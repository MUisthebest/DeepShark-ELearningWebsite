Title,Elements
"Browser environment, specs","<h1 class=""main__header-title"">Browser environment, specs</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Browser environment, specs"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>The JavaScript language was initially created for web browsers. Since then, it has evolved into a language with many uses and platforms.</p>
<p>A platform may be a browser, or a web-server or another <em>host</em>, or even a “smart” coffee machine if it can run JavaScript. Each of these provides platform-specific functionality. The JavaScript specification calls that a <em>host environment</em>.</p>
<p>A host environment provides its own objects and functions in addition to the language core. Web browsers give a means to control web pages. Node.js provides server-side features, and so on.</p>
<p>Here’s a bird’s-eye view of what we have when JavaScript runs in a web browser:</p>
<figure><div class=""image"" style=""width:367px"">
<div class=""image__ratio"" style=""padding-top:83.92370572207084%""></div>
<object class=""image__image"" data=""/article/browser-environment/windowObjects.svg"" data-use-theme="""" height=""308"" type=""image/svg+xml"" width=""367"">
<img alt="""" height=""308"" src=""https://javascript.info/article/browser-environment/windowObjects.svg"" width=""367""/>
</object>
</div></figure><p>There’s a “root” object called <code>window</code>. It has two roles:</p>
<ol>
<li>First, it is a global object for JavaScript code, as described in the chapter <a href=""https://javascript.info/global-object"">Global object</a>.</li>
<li>Second, it represents the “browser window” and provides methods to control it.</li>
</ol>
<p>For instance, we can use it as a global object:</p>
<div class=""code-example"" data-global=""1"" data-trusted=""1"" id=""h0wrrn1toz"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function sayHi() {
  alert(""Hello"");
}

// global functions are methods of the global object:
window.sayHi();</code></pre>
</div>
</div>
</div><p>And we can use it as a browser window, to show the window height:</p>
<div class=""code-example"" data-trusted=""1"" id=""cfmraf96rm"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(window.innerHeight); // inner window height</code></pre>
</div>
</div>
</div><p>There are more window-specific methods and properties, which we’ll cover later.</p>
<h2><a class=""main__anchor"" href=""#dom-document-object-model"" name=""dom-document-object-model"">DOM (Document Object Model)</a></h2><p>The Document Object Model, or DOM for short, represents all page content as objects that can be modified.</p>
<p>The <code>document</code> object is the main “entry point” to the page. We can change or create anything on the page using it.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""i2o31065l6"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// change the background color to red
document.body.style.background = ""red"";

// change it back after 1 second
setTimeout(() =&gt; document.body.style.background = """", 1000);</code></pre>
</div>
</div>
</div><p>Here, we used <code>document.body.style</code>, but there’s much, much more. Properties and methods are described in the specification: <a href=""https://dom.spec.whatwg.org"">DOM Living Standard</a>.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">DOM is not only for browsers</span></div>
<div class=""important__content""><p>The DOM specification explains the structure of a document and provides objects to manipulate it. There are non-browser instruments that use DOM too.</p>
<p>For instance, server-side scripts that download HTML pages and process them can also use the DOM. They may support only a part of the specification though.</p>
</div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">CSSOM for styling</span></div>
<div class=""important__content""><p>There’s also a separate specification, <a href=""https://www.w3.org/TR/cssom-1/"">CSS Object Model (CSSOM)</a> for CSS rules and stylesheets, that explains how they are represented as objects, and how to read and write them.</p>
<p>The CSSOM is used together with the DOM when we modify style rules for the document. In practice though, the CSSOM is rarely required, because we rarely need to modify CSS rules from JavaScript (usually we just add/remove CSS classes, not modify their CSS rules), but that’s also possible.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#bom-browser-object-model"" name=""bom-browser-object-model"">BOM (Browser Object Model)</a></h2><p>The Browser Object Model (BOM) represents additional objects provided by the browser (host environment) for working with everything except the document.</p>
<p>For instance:</p>
<ul>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator"">navigator</a> object provides background information about the browser and the operating system. There are many properties, but the two most widely known are: <code>navigator.userAgent</code> – about the current browser, and <code>navigator.platform</code> – about the platform (can help to differentiate between Windows/Linux/Mac etc).</li>
<li>The <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/location"">location</a> object allows us to read the current URL and can redirect the browser to a new one.</li>
</ul>
<p>Here’s how we can use the <code>location</code> object:</p>
<div class=""code-example"" data-trusted=""1"" id=""tk74dk573f"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(location.href); // shows current URL
if (confirm(""Go to Wikipedia?"")) {
  location.href = ""https://wikipedia.org""; // redirect the browser to another URL
}</code></pre>
</div>
</div>
</div><p>The functions <code>alert/confirm/prompt</code> are also a part of the BOM: they are not directly related to the document, but represent pure browser methods for communicating with the user.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Specifications</span></div>
<div class=""important__content""><p>The BOM is a part of the general <a href=""https://html.spec.whatwg.org"">HTML specification</a>.</p>
<p>Yes, you heard that right. The HTML spec at <a href=""https://html.spec.whatwg.org"">https://html.spec.whatwg.org</a> is not only about the “HTML language” (tags, attributes), but also covers a bunch of objects, methods, and browser-specific DOM extensions. That’s “HTML in broad terms”. Also, some parts have additional specs listed at <a href=""https://spec.whatwg.org"">https://spec.whatwg.org</a>.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Talking about standards, we have:</p>
<dl>
<dt>DOM specification</dt>
<dd>Describes the document structure, manipulations, and events, see <a href=""https://dom.spec.whatwg.org"">https://dom.spec.whatwg.org</a>.</dd>
<dt>CSSOM specification</dt>
<dd>Describes stylesheets and style rules, manipulations with them, and their binding to documents, see <a href=""https://www.w3.org/TR/cssom-1/"">https://www.w3.org/TR/cssom-1/</a>.</dd>
<dt>HTML specification</dt>
<dd>Describes the HTML language (e.g. tags) and also the BOM (browser object model) – various browser functions: <code>setTimeout</code>, <code>alert</code>, <code>location</code> and so on, see <a href=""https://html.spec.whatwg.org"">https://html.spec.whatwg.org</a>. It takes the DOM specification and extends it with many additional properties and methods.</dd>
</dl>
<p>Additionally, some classes are described separately at <a href=""https://spec.whatwg.org/"">https://spec.whatwg.org/</a>.</p>
<p>Please note these links, as there’s so much to learn that it’s impossible to cover everything and remember it all.</p>
<p>When you’d like to read about a property or a method, the Mozilla manual at <a href=""https://developer.mozilla.org/en-US/"">https://developer.mozilla.org/en-US/</a> is also a nice resource, but the corresponding spec may be better: it’s more complex and longer to read, but will make your fundamental knowledge sound and complete.</p>
<p>To find something, it’s often convenient to use an internet search “WHATWG [term]” or “MDN [term]”, e.g <a href=""https://google.com?q=whatwg+localstorage"">https://google.com?q=whatwg+localstorage</a>, <a href=""https://google.com?q=mdn+localstorage"">https://google.com?q=mdn+localstorage</a>.</p>
<p>Now, we’ll get down to learning the DOM, because the document plays the central role in the UI.</p>
</div></article></div>"
DOM tree,"<h1 class=""main__header-title"">DOM tree</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""DOM tree"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>The backbone of an HTML document is tags.</p>
<p>According to the Document Object Model (DOM), every HTML tag is an object. Nested tags are  “children” of the enclosing one. The text inside a tag is an object as well.</p>
<p>All these objects are accessible using JavaScript, and we can use them to modify the page.</p>
<p>For example, <code>document.body</code> is the object representing the <code>&lt;body&gt;</code> tag.</p>
<p>Running this code will make the <code>&lt;body&gt;</code> red for 3 seconds:</p>
<div class=""code-example"" data-trusted=""1"" id=""q0p38945qi"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.style.background = 'red'; // make the background red

setTimeout(() =&gt; document.body.style.background = '', 3000); // return back</code></pre>
</div>
</div>
</div><p>Here we used <code>style.background</code> to change the background color of <code>document.body</code>, but there are many other properties, such as:</p>
<ul>
<li><code>innerHTML</code> – HTML contents of the node.</li>
<li><code>offsetWidth</code> – the node width (in pixels)</li>
<li>…and so on.</li>
</ul>
<p>Soon we’ll learn more ways to manipulate the DOM, but first we need to know about its structure.</p>
<h2><a class=""main__anchor"" href=""#an-example-of-the-dom"" name=""an-example-of-the-dom"">An example of the DOM</a></h2><p>Let’s start with the following simple document:</p>
<div class=""code-example"" data-trusted=""1"" id=""schjlyxc4v"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;About elk&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  The truth about elk.
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><p>The DOM represents HTML as a tree structure of tags. Here’s how it looks:</p>
<div class=""domtree""></div>
<script>
let node1 = {""name"":""HTML"",""nodeType"":1,""children"":[{""name"":""HEAD"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""\n  ""},{""name"":""TITLE"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""About elk""}]},{""name"":""#text"",""nodeType"":3,""content"":""\n""}]},{""name"":""#text"",""nodeType"":3,""content"":""\n""},{""name"":""BODY"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""\n  The truth about elk.\n""}]}]}

drawHtmlTree(node1, 'div.domtree', 690, 320);
</script>
<p>On the picture above, you can click on element nodes and their children will open/collapse.</p>
<p>Every tree node is an object.</p>
<p>Tags are <em>element nodes</em> (or just elements) and form the tree structure: <code>&lt;html&gt;</code> is at the root, then <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> are its children, etc.</p>
<p>The text inside elements forms <em>text nodes</em>, labelled as <code>#text</code>. A text node contains only a string. It may not have children and is always a leaf of the tree.</p>
<p>For instance, the <code>&lt;title&gt;</code> tag has the text <code>""About elk""</code>.</p>
<p>Please note the special characters in text nodes:</p>
<ul>
<li>a newline: <code>↵</code> (in JavaScript known as <code>\n</code>)</li>
<li>a space: <code>␣</code></li>
</ul>
<p>Spaces and newlines are totally valid characters, like letters and digits. They form text nodes and become a part of the DOM. So, for instance, in the example above the <code>&lt;head&gt;</code> tag contains some spaces before <code>&lt;title&gt;</code>, and that text becomes a <code>#text</code> node (it contains a newline and some spaces only).</p>
<p>There are only two top-level exclusions:</p>
<ol>
<li>Spaces and newlines before <code>&lt;head&gt;</code> are ignored for historical reasons.</li>
<li>If we put something after <code>&lt;/body&gt;</code>, then that is automatically moved inside the <code>body</code>, at the end, as the HTML spec requires that all content must be inside <code>&lt;body&gt;</code>. So there can’t be any spaces after <code>&lt;/body&gt;</code>.</li>
</ol>
<p>In other cases everything’s straightforward – if there are spaces (just like any character) in the document, then they become text nodes in the DOM, and if we remove them, then there won’t be any.</p>
<p>Here are no space-only text nodes:</p>
<div class=""code-example"" data-trusted=""1"" id=""kr49gm5sul"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;About elk&lt;/title&gt;&lt;/head&gt;&lt;body&gt;The truth about elk.&lt;/body&gt;&lt;/html&gt;</code></pre>
</div>
</div>
</div><div class=""domtree""></div>
<script>
let node2 = {""name"":""HTML"",""nodeType"":1,""children"":[{""name"":""HEAD"",""nodeType"":1,""children"":[{""name"":""TITLE"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""About elk""}]}]},{""name"":""BODY"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""The truth about elk.""}]}]}

drawHtmlTree(node2, 'div.domtree', 690, 210);
</script>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Spaces at string start/end and space-only text nodes are usually hidden in tools</span></div>
<div class=""important__content""><p>Browser tools (to be covered soon) that work with DOM usually do not show spaces at the start/end of the text and empty text nodes (line-breaks) between tags.</p>
<p>Developer tools save screen space this way.</p>
<p>On further DOM pictures we’ll sometimes omit them when they are irrelevant. Such spaces usually do not affect how the document is displayed.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#autocorrection"" name=""autocorrection"">Autocorrection</a></h2><p>If the browser encounters malformed HTML, it automatically corrects it when making the DOM.</p>
<p>For instance, the top tag is always <code>&lt;html&gt;</code>. Even if it doesn’t exist in the document, it will exist in the DOM, because the browser will create it. The same goes for <code>&lt;body&gt;</code>.</p>
<p>As an example, if the HTML file is the single word <code>""Hello""</code>, the browser will wrap it into <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code>, and add the required <code>&lt;head&gt;</code>, and the DOM will be:</p>
<div class=""domtree""></div>
<script>
let node3 = {""name"":""HTML"",""nodeType"":1,""children"":[{""name"":""HEAD"",""nodeType"":1,""children"":[]},{""name"":""BODY"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""Hello""}]}]}

drawHtmlTree(node3, 'div.domtree', 690, 150);
</script>
<p>While generating the DOM, browsers automatically process errors in the document, close tags and so on.</p>
<p>A document with unclosed tags:</p>
<div class=""code-example"" data-trusted=""1"" id=""2eld8ggr1c"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;p&gt;Hello
&lt;li&gt;Mom
&lt;li&gt;and
&lt;li&gt;Dad</code></pre>
</div>
</div>
</div><p>…will become a normal DOM as the browser reads tags and restores the missing parts:</p>
<div class=""domtree""></div>
<script>
let node4 = {""name"":""HTML"",""nodeType"":1,""children"":[{""name"":""HEAD"",""nodeType"":1,""children"":[]},{""name"":""BODY"",""nodeType"":1,""children"":[{""name"":""P"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""Hello""}]},{""name"":""LI"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""Mom""}]},{""name"":""LI"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""and""}]},{""name"":""LI"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""Dad""}]}]}]}

drawHtmlTree(node4, 'div.domtree', 690, 360);
</script>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Tables always have <code>&lt;tbody&gt;</code></span></div>
<div class=""important__content""><p>An interesting “special case” is tables. By DOM specification they must have <code>&lt;tbody&gt;</code> tag, but HTML text may omit it. Then the browser creates <code>&lt;tbody&gt;</code> in the DOM automatically.</p>
<p>For the HTML:</p>
<div class=""code-example"" data-trusted=""1"" id=""jfxsxe4lnc"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;table id=""table""&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre>
</div>
</div>
</div><p>DOM-structure will be:</p>
<div class=""domtree""></div>
<script>
let node5 = {""name"":""TABLE"",""nodeType"":1,""children"":[{""name"":""TBODY"",""nodeType"":1,""children"":[{""name"":""TR"",""nodeType"":1,""children"":[{""name"":""TD"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""1""}]}]}]}]};

drawHtmlTree(node5,  'div.domtree', 600, 200);
</script>
<p>You see? The <code>&lt;tbody&gt;</code> appeared out of nowhere. We should keep this in mind while working with tables to avoid surprises.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#other-node-types"" name=""other-node-types"">Other node types</a></h2><p>There are some other node types besides elements and text nodes.</p>
<p>For example, comments:</p>
<div class=""code-example"" data-highlight='[{""start"":6,""end"":6}]' data-trusted=""1"" id=""i3f10mbndy"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;body&gt;
  The truth about elk.
  &lt;ol&gt;
    &lt;li&gt;An elk is a smart&lt;/li&gt;
    &lt;!-- comment --&gt;
    &lt;li&gt;...and cunning animal!&lt;/li&gt;
  &lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><div class=""domtree""></div>
<script>
let node6 = {""name"":""HTML"",""nodeType"":1,""children"":[{""name"":""HEAD"",""nodeType"":1,""children"":[]},{""name"":""BODY"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""\n  The truth about elk.\n  ""},{""name"":""OL"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""\n    ""},{""name"":""LI"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""An elk is a smart""}]},{""name"":""#text"",""nodeType"":3,""content"":""\n    ""},{""name"":""#comment"",""nodeType"":8,""content"":""comment""},{""name"":""#text"",""nodeType"":3,""content"":""\n    ""},{""name"":""LI"",""nodeType"":1,""children"":[{""name"":""#text"",""nodeType"":3,""content"":""...and cunning animal!""}]},{""name"":""#text"",""nodeType"":3,""content"":""\n  ""}]},{""name"":""#text"",""nodeType"":3,""content"":""\n\n\n""}]}]};

drawHtmlTree(node6, 'div.domtree', 690, 500);
</script>
<p>We can see here a new tree node type – <em>comment node</em>, labeled as <code>#comment</code>, between two text nodes.</p>
<p>We may think – why is a comment added to the DOM? It doesn’t affect the visual representation in any way. But there’s a rule – if something’s in HTML, then it also must be in the DOM tree.</p>
<p><strong>Everything in HTML, even comments, becomes a part of the DOM.</strong></p>
<p>Even the <code>&lt;!DOCTYPE...&gt;</code> directive at the very beginning of HTML is also a DOM node. It’s in the DOM tree right before <code>&lt;html&gt;</code>. Few people know about that. We are not going to touch that node, we even don’t draw it on diagrams, but it’s there.</p>
<p>The <code>document</code> object that represents the whole document is, formally, a DOM node as well.</p>
<p>There are <a href=""https://dom.spec.whatwg.org/#node"">12 node types</a>. In practice we usually work with 4 of them:</p>
<ol>
<li><code>document</code> – the “entry point” into DOM.</li>
<li>element nodes – HTML-tags, the tree building blocks.</li>
<li>text nodes – contain text.</li>
<li>comments – sometimes we can put information there, it won’t be shown, but JS can read it from the DOM.</li>
</ol>
<h2><a class=""main__anchor"" href=""#see-it-for-yourself"" name=""see-it-for-yourself"">See it for yourself</a></h2><p>To see the DOM structure in real-time, try <a href=""https://software.hixie.ch/utilities/js/live-dom-viewer/"">Live DOM Viewer</a>. Just type in the document, and it will show up as a DOM at an instant.</p>
<p>Another way to explore the DOM is to use the browser developer tools. Actually, that’s what we use when developing.</p>
<p>To do so, open the web page <a href=""https://javascript.info/article/dom-nodes/elk.html"">elk.html</a>, turn on the browser developer tools and switch to the Elements tab.</p>
<p>It should look like this:</p>
<figure><div class=""image"" style=""width:698px"">
<div class=""image__ratio"" style=""padding-top:35.673352435530084%""></div>
<object class=""image__image"" data=""/article/dom-nodes/elk.svg"" data-use-theme="""" height=""249"" type=""image/svg+xml"" width=""698"">
<img alt="""" height=""249"" src=""https://javascript.info/article/dom-nodes/elk.svg"" width=""698""/>
</object>
</div></figure><p>You can see the DOM, click on elements, see their details and so on.</p>
<p>Please note that the DOM structure in developer tools is simplified. Text nodes are shown just as text. And there are no “blank” (space only) text nodes at all. That’s fine, because most of the time we are interested in element nodes.</p>
<p>Clicking the <span class=""devtools"" style=""background-position:-328px -124px""></span> button in the left-upper corner allows us to choose a node from the webpage using a mouse (or other pointer devices) and “inspect” it (scroll to it in the Elements tab). This works great when we have a huge HTML page (and corresponding huge DOM) and would like to see the place of a particular element in it.</p>
<p>Another way to do it would be just right-clicking on a webpage and selecting “Inspect” in the context menu.</p>
<figure><div class=""image"" style=""width:696px"">
<div class=""image__ratio"" style=""padding-top:54.45402298850575%""></div>
<object class=""image__image"" data=""/article/dom-nodes/inspect.svg"" data-use-theme="""" height=""379"" type=""image/svg+xml"" width=""696"">
<img alt="""" height=""379"" src=""https://javascript.info/article/dom-nodes/inspect.svg"" width=""696""/>
</object>
</div></figure><p>At the right part of the tools there are the following subtabs:</p>
<ul>
<li><strong>Styles</strong> – we can see CSS applied to the current element rule by rule, including built-in rules (gray). Almost everything can be edited in-place, including the dimensions/margins/paddings of the box below.</li>
<li><strong>Computed</strong> – to see CSS applied to the element by property: for each property we can see a rule that gives it (including CSS inheritance and such).</li>
<li><strong>Event Listeners</strong> – to see event listeners attached to DOM elements (we’ll cover them in the next part of the tutorial).</li>
<li>…and so on.</li>
</ul>
<p>The best way to study them is to click around. Most values are editable in-place.</p>
<h2><a class=""main__anchor"" href=""#interaction-with-console"" name=""interaction-with-console"">Interaction with console</a></h2><p>As we work the DOM, we also may want to apply JavaScript to it. Like: get a node and run some code to modify it, to see the result. Here are few tips to travel between the Elements tab and the console.</p>
<p>For the start:</p>
<ol>
<li>Select the first <code>&lt;li&gt;</code> in the Elements tab.</li>
<li>Press <kbd class=""shortcut"">Esc</kbd> – it will open console right below the Elements tab.</li>
</ol>
<p>Now the last selected element is available as <code>$0</code>, the previously selected is <code>$1</code> etc.</p>
<p>We can run commands on them. For instance, <code>$0.style.background = 'red'</code> makes the selected list item red, like this:</p>
<figure><div class=""image"" style=""width:699px"">
<div class=""image__ratio"" style=""padding-top:64.37768240343348%""></div>
<object class=""image__image"" data=""/article/dom-nodes/domconsole0.svg"" data-use-theme="""" height=""450"" type=""image/svg+xml"" width=""699"">
<img alt="""" height=""450"" src=""https://javascript.info/article/dom-nodes/domconsole0.svg"" width=""699""/>
</object>
</div></figure><p>That’s how to get a node from Elements in Console.</p>
<p>There’s also a road back. If there’s a variable referencing a DOM node, then we can use the command <code>inspect(node)</code> in Console to see it in the Elements pane.</p>
<p>Or we can just output the DOM node in the console and explore “in-place”, like <code>document.body</code> below:</p>
<figure><div class=""image"" style=""width:696px"">
<div class=""image__ratio"" style=""padding-top:73.5632183908046%""></div>
<object class=""image__image"" data=""/article/dom-nodes/domconsole1.svg"" data-use-theme="""" height=""512"" type=""image/svg+xml"" width=""696"">
<img alt="""" height=""512"" src=""https://javascript.info/article/dom-nodes/domconsole1.svg"" width=""696""/>
</object>
</div></figure><p>That’s for debugging purposes of course. From the next chapter on we’ll access and modify DOM using JavaScript.</p>
<p>The browser developer tools are a great help in development: we can explore the DOM, try things and see what goes wrong.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>An HTML/XML document is represented inside the browser as the DOM tree.</p>
<ul>
<li>Tags become element nodes and form the structure.</li>
<li>Text becomes text nodes.</li>
<li>…etc, everything in HTML has its place in DOM, even comments.</li>
</ul>
<p>We can use developer tools to inspect DOM and modify it manually.</p>
<p>Here we covered the basics, the most used and important actions to start with. There’s an extensive documentation about Chrome Developer Tools at <a href=""https://developers.google.com/web/tools/chrome-devtools"">https://developers.google.com/web/tools/chrome-devtools</a>. The best way to learn the tools is to click here and there, read menus: most options are obvious. Later, when you know them in general, read the docs and pick up the rest.</p>
<p>DOM nodes have properties and methods that allow us to travel between them, modify them, move around the page, and more. We’ll get down to them in the next chapters.</p>
</div></article></div>"
Walking the DOM,"<h1 class=""main__header-title"">Walking the DOM</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Walking the DOM"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>The DOM allows us to do anything with elements and their contents, but first we need to reach the corresponding DOM object.</p>
<p>All operations on the DOM start with the <code>document</code> object. That’s the main “entry point” to DOM. From it we can access any node.</p>
<p>Here’s a picture of links that allow for travel between DOM nodes:</p>
<figure><div class=""image"" style=""width:420px"">
<div class=""image__ratio"" style=""padding-top:92.38095238095238%""></div>
<object class=""image__image"" data=""/article/dom-navigation/dom-links.svg"" data-use-theme="""" height=""388"" type=""image/svg+xml"" width=""420"">
<img alt="""" height=""388"" src=""https://javascript.info/article/dom-navigation/dom-links.svg"" width=""420""/>
</object>
</div></figure><p>Let’s discuss them in more detail.</p>
<h2><a class=""main__anchor"" href=""#on-top-documentelement-and-body"" name=""on-top-documentelement-and-body"">On top: documentElement and body</a></h2><p>The topmost tree nodes are available directly as <code>document</code> properties:</p>
<dl>
<dt><code>&lt;html&gt;</code> = <code>document.documentElement</code></dt>
<dd>The topmost document node is <code>document.documentElement</code>. That’s the DOM node of the <code>&lt;html&gt;</code> tag.</dd>
<dt><code>&lt;body&gt;</code> = <code>document.body</code></dt>
<dd>Another widely used DOM node is the <code>&lt;body&gt;</code> element – <code>document.body</code>.</dd>
<dt><code>&lt;head&gt;</code> = <code>document.head</code></dt>
<dd>The <code>&lt;head&gt;</code> tag is available as <code>document.head</code>.</dd>
</dl>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">There’s a catch: <code>document.body</code> can be <code>null</code></span></div>
<div class=""important__content""><p>A script cannot access an element that doesn’t exist at the moment of running.</p>
<p>In particular, if a script is inside <code>&lt;head&gt;</code>, then <code>document.body</code> is unavailable, because the browser did not read it yet.</p>
<p>So, in the example below the first <code>alert</code> shows <code>null</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":4,""end"":4}]' data-trusted=""1"" id=""uzn9vg578b"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;

&lt;head&gt;
  &lt;script&gt;
    alert( ""From HEAD: "" + document.body ); // null, there's no &lt;body&gt; yet
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    alert( ""From BODY: "" + document.body ); // HTMLBodyElement, now it exists
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div></div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">In the DOM world <code>null</code> means “doesn’t exist”</span></div>
<div class=""important__content""><p>In the DOM, the <code>null</code> value means “doesn’t exist” or “no such node”.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#children-childnodes-firstchild-lastchild"" name=""children-childnodes-firstchild-lastchild"">Children: childNodes, firstChild, lastChild</a></h2><p>There are two terms that we’ll use from now on:</p>
<ul>
<li><strong>Child nodes (or children)</strong> – elements that are direct children. In other words, they are nested exactly in the given one. For instance, <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> are children of <code>&lt;html&gt;</code> element.</li>
<li><strong>Descendants</strong> – all elements that are nested in the given one, including children, their children and so on.</li>
</ul>
<p>For instance, here <code>&lt;body&gt;</code> has children <code>&lt;div&gt;</code> and <code>&lt;ul&gt;</code> (and few blank text nodes):</p>
<div class=""code-example"" data-trusted=""1"" id=""873s2qilkp"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Information&lt;/b&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><p>…And descendants of <code>&lt;body&gt;</code> are not only direct children <code>&lt;div&gt;</code>, <code>&lt;ul&gt;</code> but also more deeply nested elements, such as <code>&lt;li&gt;</code> (a child of <code>&lt;ul&gt;</code>) and <code>&lt;b&gt;</code> (a child of <code>&lt;li&gt;</code>) – the entire subtree.</p>
<p><strong>The <code>childNodes</code> collection lists all child nodes, including text nodes.</strong></p>
<p>The example below shows children of <code>document.body</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":11,""end"":13}]' data-trusted=""1"" id=""mnzo7noz61"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let i = 0; i &lt; document.body.childNodes.length; i++) {
      alert( document.body.childNodes[i] ); // Text, DIV, Text, UL, ..., SCRIPT
    }
  &lt;/script&gt;
  ...more stuff...
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><p>Please note an interesting detail here. If we run the example above, the last element shown is <code>&lt;script&gt;</code>. In fact, the document has more stuff below, but at the moment of the script execution the browser did not read it yet, so the script doesn’t see it.</p>
<p><strong>Properties <code>firstChild</code> and <code>lastChild</code> give fast access to the first and last children.</strong></p>
<p>They are just shorthands. If there exist child nodes, then the following is always true:</p>
<div class=""code-example"" data-trusted=""1"" id=""ehpj6zzbm5"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>elem.childNodes[0] === elem.firstChild
elem.childNodes[elem.childNodes.length - 1] === elem.lastChild</code></pre>
</div>
</div>
</div><p>There’s also a special function <code>elem.hasChildNodes()</code> to check whether there are any child nodes.</p>
<h3><a class=""main__anchor"" href=""#dom-collections"" name=""dom-collections"">DOM collections</a></h3><p>As we can see, <code>childNodes</code> looks like an array. But actually it’s not an array, but rather a <em>collection</em> – a special array-like iterable object.</p>
<p>There are two important consequences:</p>
<ol>
<li>We can use <code>for..of</code> to iterate over it:</li>
</ol>
<div class=""code-example"" data-trusted=""1"" id=""sgs6ri61td"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>for (let node of document.body.childNodes) {
  alert(node); // shows all nodes from the collection
}</code></pre>
</div>
</div>
</div><p>That’s because it’s iterable (provides the <code>Symbol.iterator</code> property, as required).</p>
<ol start=""2"">
<li>Array methods won’t work, because it’s not an array:</li>
</ol>
<div class=""code-example"" data-trusted=""1"" id=""mcr465j1pd"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(document.body.childNodes.filter); // undefined (there's no filter method!)</code></pre>
</div>
</div>
</div><p>The first thing is nice. The second is tolerable, because we can use <code>Array.from</code> to create a “real” array from the collection, if we want array methods:</p>
<div class=""code-example"" data-trusted=""1"" id=""p1gbuz48ua"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( Array.from(document.body.childNodes).filter ); // function</code></pre>
</div>
</div>
</div><div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">DOM collections are read-only</span></div>
<div class=""important__content""><p>DOM collections, and even more – <em>all</em> navigation properties listed in this chapter are read-only.</p>
<p>We can’t replace a child by something else by assigning <code>childNodes[i] = ...</code>.</p>
<p>Changing DOM needs other methods. We will see them in the next chapter.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">DOM collections are live</span></div>
<div class=""important__content""><p>Almost all DOM collections with minor exceptions are <em>live</em>. In other words, they reflect the current state of DOM.</p>
<p>If we keep a reference to <code>elem.childNodes</code>, and add/remove nodes into DOM, then they appear in the collection automatically.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Don’t use <code>for..in</code> to loop over collections</span></div>
<div class=""important__content""><p>Collections are iterable using <code>for..of</code>. Sometimes people try to use <code>for..in</code> for that.</p>
<p>Please, don’t. The <code>for..in</code> loop iterates over all enumerable properties. And collections have some “extra” rarely used properties that we usually do not want to get:</p>
<div class=""code-example"" data-trusted=""1"" id=""ti0cd7z1gj"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
&lt;script&gt;
  // shows 0, 1, length, item, values and more.
  for (let prop in document.body.childNodes) alert(prop);
&lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div></div></div>
<h2><a class=""main__anchor"" href=""#siblings-and-the-parent"" name=""siblings-and-the-parent"">Siblings and the parent</a></h2><p><em>Siblings</em> are nodes that are children of the same parent.</p>
<p>For instance, here <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> are siblings:</p>
<div class=""code-example"" data-trusted=""1"" id=""2wce7s8csq"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;
  &lt;head&gt;...&lt;/head&gt;&lt;body&gt;...&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><ul>
<li><code>&lt;body&gt;</code> is said to be the “next” or “right” sibling of <code>&lt;head&gt;</code>,</li>
<li><code>&lt;head&gt;</code> is said to be the “previous” or “left” sibling of <code>&lt;body&gt;</code>.</li>
</ul>
<p>The next sibling is in <code>nextSibling</code> property, and the previous one – in <code>previousSibling</code>.</p>
<p>The parent is available as <code>parentNode</code>.</p>
<p>For example:</p>
<div class=""code-example"" data-trusted=""1"" id=""lchldwnu8y"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// parent of &lt;body&gt; is &lt;html&gt;
alert( document.body.parentNode === document.documentElement ); // true

// after &lt;head&gt; goes &lt;body&gt;
alert( document.head.nextSibling ); // HTMLBodyElement

// before &lt;body&gt; goes &lt;head&gt;
alert( document.body.previousSibling ); // HTMLHeadElement</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#element-only-navigation"" name=""element-only-navigation"">Element-only navigation</a></h2><p>Navigation properties listed above refer to <em>all</em> nodes. For instance, in <code>childNodes</code> we can see both text nodes, element nodes, and even comment nodes if they exist.</p>
<p>But for many tasks we don’t want text or comment nodes. We want to manipulate element nodes that represent tags and form the structure of the page.</p>
<p>So let’s see more navigation links that only take <em>element nodes</em> into account:</p>
<figure><div class=""image"" style=""width:440px"">
<div class=""image__ratio"" style=""padding-top:71.81818181818181%""></div>
<object class=""image__image"" data=""/article/dom-navigation/dom-links-elements.svg"" data-use-theme="""" height=""316"" type=""image/svg+xml"" width=""440"">
<img alt="""" height=""316"" src=""https://javascript.info/article/dom-navigation/dom-links-elements.svg"" width=""440""/>
</object>
</div></figure><p>The links are similar to those given above, just with <code>Element</code> word inside:</p>
<ul>
<li><code>children</code> – only those children that are element nodes.</li>
<li><code>firstElementChild</code>, <code>lastElementChild</code> – first and last element children.</li>
<li><code>previousElementSibling</code>, <code>nextElementSibling</code> – neighbor elements.</li>
<li><code>parentElement</code> – parent element.</li>
</ul>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Why <code>parentElement</code>? Can the parent be <em>not</em> an element?</span></div>
<div class=""important__content""><p>The <code>parentElement</code> property returns the “element” parent, while <code>parentNode</code> returns “any node” parent. These properties are usually the same: they both get the parent.</p>
<p>With the one exception of <code>document.documentElement</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""dvt6d3ac7l"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( document.documentElement.parentNode ); // document
alert( document.documentElement.parentElement ); // null</code></pre>
</div>
</div>
</div><p>The reason is that the root node <code>document.documentElement</code> (<code>&lt;html&gt;</code>) has <code>document</code> as its parent. But <code>document</code> is not an element node, so <code>parentNode</code> returns it and <code>parentElement</code> does not.</p>
<p>This detail may be useful when we want to travel up from an arbitrary element <code>elem</code> to <code>&lt;html&gt;</code>, but not to the <code>document</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""vlhepixdrp"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>while(elem = elem.parentElement) { // go up till &lt;html&gt;
  alert( elem );
}</code></pre>
</div>
</div>
</div></div></div>
<p>Let’s modify one of the examples above: replace <code>childNodes</code> with <code>children</code>. Now it shows only elements:</p>
<div class=""code-example"" data-highlight='[{""start"":11,""end"":13}]' data-trusted=""1"" id=""73hpeb75py"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Begin&lt;/div&gt;

  &lt;ul&gt;
    &lt;li&gt;Information&lt;/li&gt;
  &lt;/ul&gt;

  &lt;div&gt;End&lt;/div&gt;

  &lt;script&gt;
    for (let elem of document.body.children) {
      alert(elem); // DIV, UL, DIV, SCRIPT
    }
  &lt;/script&gt;
  ...
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#dom-navigation-tables"" name=""dom-navigation-tables"">More links: tables</a></h2><p>Till now we described the basic navigation properties.</p>
<p>Certain types of DOM elements may provide additional properties, specific to their type, for convenience.</p>
<p>Tables are a great example of that, and represent a particularly important case:</p>
<p><strong>The <code>&lt;table&gt;</code></strong> element supports (in addition to the given above) these properties:</p>
<ul>
<li><code>table.rows</code> – the collection of <code>&lt;tr&gt;</code> elements of the table.</li>
<li><code>table.caption/tHead/tFoot</code> – references to elements <code>&lt;caption&gt;</code>, <code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>.</li>
<li><code>table.tBodies</code> – the collection of <code>&lt;tbody&gt;</code> elements (can be many according to the standard, but there will always be at least one – even if it is not in the source HTML, the browser will put it in the DOM).</li>
</ul>
<p><strong><code>&lt;thead&gt;</code>, <code>&lt;tfoot&gt;</code>, <code>&lt;tbody&gt;</code></strong> elements provide the <code>rows</code> property:</p>
<ul>
<li><code>tbody.rows</code> – the collection of <code>&lt;tr&gt;</code> inside.</li>
</ul>
<p><strong><code>&lt;tr&gt;</code>:</strong></p>
<ul>
<li><code>tr.cells</code> – the collection of <code>&lt;td&gt;</code> and <code>&lt;th&gt;</code> cells inside the given <code>&lt;tr&gt;</code>.</li>
<li><code>tr.sectionRowIndex</code> – the position (index) of the given <code>&lt;tr&gt;</code> inside the enclosing <code>&lt;thead&gt;/&lt;tbody&gt;/&lt;tfoot&gt;</code>.</li>
<li><code>tr.rowIndex</code> – the number of the <code>&lt;tr&gt;</code> in the table as a whole (including all table rows).</li>
</ul>
<p><strong><code>&lt;td&gt;</code> and <code>&lt;th&gt;</code>:</strong></p>
<ul>
<li><code>td.cellIndex</code> – the number of the cell inside the enclosing <code>&lt;tr&gt;</code>.</li>
</ul>
<p>An example of usage:</p>
<div class=""code-example"" data-demo-height=""100"" data-highlight='[{""start"":11,""cols"":[{""start"":17,""end"":33}]}]' data-trusted=""1"" id=""lhoacyonkx"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;table id=""table""&gt;
  &lt;tr&gt;
    &lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;three&lt;/td&gt;&lt;td&gt;four&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  // get td with ""two"" (first row, second column)
  let td = table.rows[0].cells[1];
  td.style.backgroundColor = ""red""; // highlight it
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>The specification: <a href=""https://html.spec.whatwg.org/multipage/tables.html"">tabular data</a>.</p>
<p>There are also additional navigation properties for HTML forms. We’ll look at them later when we start working with forms.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Given a DOM node, we can go to its immediate neighbors using navigation properties.</p>
<p>There are two main sets of them:</p>
<ul>
<li>For all nodes: <code>parentNode</code>, <code>childNodes</code>, <code>firstChild</code>, <code>lastChild</code>, <code>previousSibling</code>, <code>nextSibling</code>.</li>
<li>For element nodes only: <code>parentElement</code>, <code>children</code>, <code>firstElementChild</code>, <code>lastElementChild</code>, <code>previousElementSibling</code>, <code>nextElementSibling</code>.</li>
</ul>
<p>Some types of DOM elements, e.g. tables, provide additional properties and collections to access their content.</p>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#dom-children"" name=""dom-children"">DOM children</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/dom-children"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Look at this page:</p>
<div class=""code-example"" data-trusted=""1"" id=""trsj5wtklq"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;
&lt;body&gt;
  &lt;div&gt;Users:&lt;/div&gt;
  &lt;ul&gt;
    &lt;li&gt;John&lt;/li&gt;
    &lt;li&gt;Pete&lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div><p>For each of the following, give at least one way of how to access them:</p>
<ul>
<li>The <code>&lt;div&gt;</code> DOM node?</li>
<li>The <code>&lt;ul&gt;</code> DOM node?</li>
<li>The second <code>&lt;li&gt;</code> (with Pete)?</li>
</ul>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>There are many ways, for instance:</p>
<p>The <code>&lt;div&gt;</code> DOM node:</p>
<div class=""code-example"" data-trusted=""1"" id=""94ndtut8w8"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.firstElementChild
// or
document.body.children[0]
// or (the first node is space, so we take 2nd)
document.body.childNodes[1]</code></pre>
</div>
</div>
</div><p>The <code>&lt;ul&gt;</code> DOM node:</p>
<div class=""code-example"" data-trusted=""1"" id=""cixlidy140"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.lastElementChild
// or
document.body.children[1]</code></pre>
</div>
</div>
</div><p>The second <code>&lt;li&gt;</code> (with Pete):</p>
<div class=""code-example"" data-trusted=""1"" id=""fxdgzyzau0"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// get &lt;ul&gt;, and then get its last element child
document.body.lastElementChild.lastElementChild</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#the-sibling-question"" name=""the-sibling-question"">The sibling question</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/navigation-links-which-null"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>If <code>elem</code> – is an arbitrary DOM element node…</p>
<ul>
<li>Is it true that <code>elem.lastChild.nextSibling</code> is always <code>null</code>?</li>
<li>Is it true that <code>elem.children[0].previousSibling</code> is always <code>null</code> ?</li>
</ul>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><ol>
<li>Yes, true. The element <code>elem.lastChild</code> is always the last one, it has no <code>nextSibling</code>.</li>
<li>No, wrong, because <code>elem.children[0]</code> is the first child <em>among elements</em>. But there may exist non-element nodes before it. So <code>previousSibling</code> may be a text node.</li>
</ol>
<p>Please note: for both cases if there are no children, then there will be an error.</p>
<p>If there are no children, <code>elem.lastChild</code> is <code>null</code>, so we can’t access <code>elem.lastChild.nextSibling</code>. And the collection <code>elem.children</code> is empty (like an empty array <code>[]</code>).</p>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#select-all-diagonal-cells"" name=""select-all-diagonal-cells"">Select all diagonal cells</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/select-diagonal-cells"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Write the code to paint all diagonal table cells in red.</p>
<p>You’ll need to get all diagonal <code>&lt;td&gt;</code> from the <code>&lt;table&gt;</code> and paint them using the code:</p>
<div class=""code-example"" data-trusted=""1"" id=""5ha6l2ovis"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// td should be the reference to the table cell
td.style.backgroundColor = 'red';</code></pre>
</div>
</div>
</div><p>The result should be:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/select-diagonal-cells/solution/"" style=""height:180px""></iframe>
</div><p><a data-plunk-id=""2AOS4aj5TiW1oD5J"" href=""https://plnkr.co/edit/2AOS4aj5TiW1oD5J?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>We’ll be using <code>rows</code> and <code>cells</code> properties to access diagonal table cells.</p>
<p><a data-plunk-id=""z8AeflcSowLaF4WF"" href=""https://plnkr.co/edit/z8AeflcSowLaF4WF?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
"Searching: getElement*, querySelector*","<h1 class=""main__header-title"">Searching: getElement*, querySelector*</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Searching: getElement*, querySelector*"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>DOM navigation properties are great when elements are close to each other. What if they are not? How to get an arbitrary element of the page?</p>
<p>There are additional searching methods for that.</p>
<h2><a class=""main__anchor"" href=""#document-getelementbyid-or-just-id"" name=""document-getelementbyid-or-just-id"">document.getElementById or just id</a></h2><p>If an element has the <code>id</code> attribute, we can get the element using the method <code>document.getElementById(id)</code>, no matter where it is.</p>
<p>For instance:</p>
<div class=""code-example"" data-highlight='[{""start"":6,""end"":6}]' data-trusted=""1"" id=""i5zgafbdel"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem""&gt;
  &lt;div id=""elem-content""&gt;Element&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
  // get the element
  let elem = document.getElementById('elem');

  // make its background red
  elem.style.background = 'red';
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Also, there’s a global variable named by <code>id</code> that references the element:</p>
<div class=""code-example"" data-highlight='[{""start"":1,""cols"":[{""start"":11,""end"":23}]},{""start"":0,""cols"":[{""start"":9,""end"":13}]}]' data-trusted=""1"" id=""czup4di5fe"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem""&gt;
  &lt;div id=""elem-content""&gt;Element&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
  // elem is a reference to DOM-element with id=""elem""
  elem.style.background = 'red';

  // id=""elem-content"" has a hyphen inside, so it can't be a variable name
  // ...but we can access it using square brackets: window['elem-content']
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>…That’s unless we declare a JavaScript variable with the same name, then it takes precedence:</p>
<div class=""code-example"" data-demo-height=""0"" data-trusted=""0"" id=""gy99k5uxl8"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem""&gt;&lt;/div&gt;

&lt;script&gt;
  let elem = 5; // now elem is 5, not a reference to &lt;div id=""elem""&gt;

  alert(elem); // 5
&lt;/script&gt;</code></pre>
</div>
</div>
</div><div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Please don’t use id-named global variables to access elements</span></div>
<div class=""important__content""><p>This behavior is described <a href=""https://html.spec.whatwg.org/multipage/window-object.html#named-access-on-the-window-object"">in the specification</a>, but it is supported mainly for compatibility.</p>
<p>The browser tries to help us by mixing namespaces of JS and DOM. That’s fine for simple scripts, inlined into HTML, but generally isn’t a good thing. There may be naming conflicts. Also, when one reads JS code and doesn’t have HTML in view, it’s not obvious where the variable comes from.</p>
<p>Here in the tutorial we use <code>id</code> to directly reference an element for brevity, when it’s obvious where the element comes from.</p>
<p>In real life <code>document.getElementById</code> is the preferred method.</p>
</div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">The <code>id</code> must be unique</span></div>
<div class=""important__content""><p>The <code>id</code> must be unique. There can be only one element in the document with the given <code>id</code>.</p>
<p>If there are multiple elements with the same <code>id</code>, then the behavior of methods that use it is unpredictable, e.g. <code>document.getElementById</code> may return any of such elements at random. So please stick to the rule and keep <code>id</code> unique.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Only <code>document.getElementById</code>, not <code>anyElem.getElementById</code></span></div>
<div class=""important__content""><p>The method <code>getElementById</code> can be called only on <code>document</code> object. It looks for the given <code>id</code> in the whole document.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#querySelectorAll"" name=""querySelectorAll"">querySelectorAll</a></h2><p>By far, the most versatile method, <code>elem.querySelectorAll(css)</code> returns all elements inside <code>elem</code> matching the given CSS selector.</p>
<p>Here we look for all <code>&lt;li&gt;</code> elements that are last children:</p>
<div class=""code-example"" data-highlight='[{""start"":9,""end"":9}]' data-trusted=""1"" id=""ycexv6hedj"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ul&gt;
  &lt;li&gt;The&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
  &lt;li&gt;has&lt;/li&gt;
  &lt;li&gt;passed&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  let elements = document.querySelectorAll('ul &gt; li:last-child');

  for (let elem of elements) {
    alert(elem.innerHTML); // ""test"", ""passed""
  }
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>This method is indeed powerful, because any CSS selector can be used.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Can use pseudo-classes as well</span></div>
<div class=""important__content""><p>Pseudo-classes in the CSS selector like <code>:hover</code> and <code>:active</code> are also supported. For instance, <code>document.querySelectorAll(':hover')</code> will return the collection with elements that the pointer is over now (in nesting order: from the outermost <code>&lt;html&gt;</code> to the most nested one).</p>
</div></div>
<h2><a class=""main__anchor"" href=""#querySelector"" name=""querySelector"">querySelector</a></h2><p>The call to <code>elem.querySelector(css)</code> returns the first element for the given CSS selector.</p>
<p>In other words, the result is the same as <code>elem.querySelectorAll(css)[0]</code>, but the latter is looking for <em>all</em> elements and picking one, while <code>elem.querySelector</code> just looks for one. So it’s faster and also shorter to write.</p>
<h2><a class=""main__anchor"" href=""#matches"" name=""matches"">matches</a></h2><p>Previous methods were searching the DOM.</p>
<p>The <a href=""https://dom.spec.whatwg.org/#dom-element-matches"">elem.matches(css)</a> does not look for anything, it merely checks if <code>elem</code> matches the given CSS-selector. It returns <code>true</code> or <code>false</code>.</p>
<p>The method comes in handy when we are iterating over elements (like in an array or something) and trying to filter out those that interest us.</p>
<p>For instance:</p>
<div class=""code-example"" data-highlight='[{""start"":6,""end"":6}]' data-trusted=""1"" id=""mq8cv9f3xo"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;a href=""http://example.com/file.zip""&gt;...&lt;/a&gt;
&lt;a href=""http://ya.ru""&gt;...&lt;/a&gt;

&lt;script&gt;
  // can be any collection instead of document.body.children
  for (let elem of document.body.children) {
    if (elem.matches('a[href$=""zip""]')) {
      alert(""The archive reference: "" + elem.href );
    }
  }
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#closest"" name=""closest"">closest</a></h2><p><em>Ancestors</em> of an element are: parent, the parent of parent, its parent and so on. The ancestors together form the chain of parents from the element to the top.</p>
<p>The method <code>elem.closest(css)</code> looks for the nearest ancestor that matches the CSS-selector. The <code>elem</code> itself is also included in the search.</p>
<p>In other words, the method <code>closest</code> goes up from the element and checks each of parents. If it matches the selector, then the search stops, and the ancestor is returned.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""m60fu0a1b2"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;h1&gt;Contents&lt;/h1&gt;

&lt;div class=""contents""&gt;
  &lt;ul class=""book""&gt;
    &lt;li class=""chapter""&gt;Chapter 1&lt;/li&gt;
    &lt;li class=""chapter""&gt;Chapter 2&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;script&gt;
  let chapter = document.querySelector('.chapter'); // LI

  alert(chapter.closest('.book')); // UL
  alert(chapter.closest('.contents')); // DIV

  alert(chapter.closest('h1')); // null (because h1 is not an ancestor)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#getelementsby"" name=""getelementsby"">getElementsBy*</a></h2><p>There are also other methods to look for nodes by a tag, class, etc.</p>
<p>Today, they are mostly history, as <code>querySelector</code> is more powerful and shorter to write.</p>
<p>So here we cover them mainly for completeness, while you can still find them in the old scripts.</p>
<ul>
<li><code>elem.getElementsByTagName(tag)</code> looks for elements with the given tag and returns the collection of them. The <code>tag</code> parameter can also be a star <code>""*""</code> for “any tags”.</li>
<li><code>elem.getElementsByClassName(className)</code> returns elements that have the given CSS class.</li>
<li><code>document.getElementsByName(name)</code> returns elements with the given <code>name</code> attribute, document-wide. Very rarely used.</li>
</ul>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""i22mz774u8"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// get all divs in the document
let divs = document.getElementsByTagName('div');</code></pre>
</div>
</div>
</div><p>Let’s find all <code>input</code> tags inside the table:</p>
<div class=""code-example"" data-demo-height=""50"" data-highlight='[{""start"":19,""end"":19}]' data-trusted=""1"" id=""yrcpx774jv"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;table id=""table""&gt;
  &lt;tr&gt;
    &lt;td&gt;Your age:&lt;/td&gt;

    &lt;td&gt;
      &lt;label&gt;
        &lt;input type=""radio"" name=""age"" value=""young"" checked&gt; less than 18
      &lt;/label&gt;
      &lt;label&gt;
        &lt;input type=""radio"" name=""age"" value=""mature""&gt; from 18 to 50
      &lt;/label&gt;
      &lt;label&gt;
        &lt;input type=""radio"" name=""age"" value=""senior""&gt; more than 60
      &lt;/label&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  let inputs = table.getElementsByTagName('input');

  for (let input of inputs) {
    alert( input.value + ': ' + input.checked );
  }
&lt;/script&gt;</code></pre>
</div>
</div>
</div><div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Don’t forget the <code>""s""</code> letter!</span></div>
<div class=""important__content""><p>Novice developers sometimes forget the letter <code>""s""</code>. That is, they try to call <code>getElementByTagName</code> instead of <code>getElement<b>s</b>ByTagName</code>.</p>
<p>The <code>""s""</code> letter is absent in <code>getElementById</code>, because it returns a single element. But <code>getElementsByTagName</code> returns a collection of elements, so there’s <code>""s""</code> inside.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">It returns a collection, not an element!</span></div>
<div class=""important__content""><p>Another widespread novice mistake is to write:</p>
<div class=""code-example"" data-trusted=""1"" id=""u0kd7xm299"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// doesn't work
document.getElementsByTagName('input').value = 5;</code></pre>
</div>
</div>
</div><p>That won’t work, because it takes a <em>collection</em> of inputs and assigns the value to it rather than to elements inside it.</p>
<p>We should either iterate over the collection or get an element by its index, and then assign, like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""bitt20uils"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// should work (if there's an input)
document.getElementsByTagName('input')[0].value = 5;</code></pre>
</div>
</div>
</div></div></div>
<p>Looking for <code>.article</code> elements:</p>
<div class=""code-example"" data-demo-height=""50"" data-trusted=""1"" id=""mrbm20vypq"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;form name=""my-form""&gt;
  &lt;div class=""article""&gt;Article&lt;/div&gt;
  &lt;div class=""long article""&gt;Long article&lt;/div&gt;
&lt;/form&gt;

&lt;script&gt;
  // find by name attribute
  let form = document.getElementsByName('my-form')[0];

  // find by class inside the form
  let articles = form.getElementsByClassName('article');
  alert(articles.length); // 2, found two elements with class ""article""
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#live-collections"" name=""live-collections"">Live collections</a></h2><p>All methods <code>""getElementsBy*""</code> return a <em>live</em> collection. Such collections always reflect the current state of the document and “auto-update” when it changes.</p>
<p>In the example below, there are two scripts.</p>
<ol>
<li>The first one creates a reference to the collection of <code>&lt;div&gt;</code>. As of now, its length is <code>1</code>.</li>
<li>The second scripts runs after the browser meets one more <code>&lt;div&gt;</code>, so its length is <code>2</code>.</li>
</ol>
<div class=""code-example"" data-highlight='[{""start"":10,""end"":10}]' data-trusted=""1"" id=""uj9rguh9y5"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.getElementsByTagName('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 2
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>In contrast, <code>querySelectorAll</code> returns a <em>static</em> collection. It’s like a fixed array of elements.</p>
<p>If we use it instead, then both scripts output <code>1</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":10,""end"":10}]' data-trusted=""1"" id=""4cbtsfcl2r"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div&gt;First div&lt;/div&gt;

&lt;script&gt;
  let divs = document.querySelectorAll('div');
  alert(divs.length); // 1
&lt;/script&gt;

&lt;div&gt;Second div&lt;/div&gt;

&lt;script&gt;
  alert(divs.length); // 1
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Now we can easily see the difference. The static collection did not increase after the appearance of a new <code>div</code> in the document.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>There are 6 main methods to search for nodes in DOM:</p>
<table>
<thead>
<tr>
<td>Method</td>
<td>Searches by...</td>
<td>Can call on an element?</td>
<td>Live?</td>
</tr>
</thead>
<tbody>
<tr>
<td><code>querySelector</code></td>
<td>CSS-selector</td>
<td>✔</td>
<td>-</td>
</tr>
<tr>
<td><code>querySelectorAll</code></td>
<td>CSS-selector</td>
<td>✔</td>
<td>-</td>
</tr>
<tr>
<td><code>getElementById</code></td>
<td><code>id</code></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><code>getElementsByName</code></td>
<td><code>name</code></td>
<td>-</td>
<td>✔</td>
</tr>
<tr>
<td><code>getElementsByTagName</code></td>
<td>tag or <code>'*'</code></td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>getElementsByClassName</code></td>
<td>class</td>
<td>✔</td>
<td>✔</td>
</tr>
</tbody>
</table>
<p>By far the most used are <code>querySelector</code> and <code>querySelectorAll</code>, but <code>getElement(s)By*</code> can be sporadically helpful or found in the old scripts.</p>
<p>Besides that:</p>
<ul>
<li>There is <code>elem.matches(css)</code> to check if <code>elem</code> matches the given CSS selector.</li>
<li>There is <code>elem.closest(css)</code> to look for the nearest ancestor that matches the given CSS-selector. The <code>elem</code> itself is also checked.</li>
</ul>
<p>And let’s mention one more method here to check for the child-parent relationship, as it’s sometimes useful:</p>
<ul>
<li><code>elemA.contains(elemB)</code> returns true if <code>elemB</code> is inside <code>elemA</code> (a descendant of <code>elemA</code>) or when <code>elemA==elemB</code>.</li>
</ul>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#search-for-elements"" name=""search-for-elements"">Search for elements</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/find-elements"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 4</span></div><div class=""task__content""><div class=""task__formatted""><p>Here’s the document with the table and form.</p>
<p>How to find?…</p>
<ol>
<li>The table with <code>id=""age-table""</code>.</li>
<li>All <code>label</code> elements inside that table (there should be 3 of them).</li>
<li>The first <code>td</code> in that table (with the word “Age”).</li>
<li>The <code>form</code> with <code>name=""search""</code>.</li>
<li>The first <code>input</code> in that form.</li>
<li>The last <code>input</code> in that form.</li>
</ol>
<p>Open the page <a href=""https://javascript.info/task/find-elements/table.html"">table.html</a> in a separate window and make use of browser tools for that.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>There are many ways to do it.</p>
<p>Here are some of them:</p>
<div class=""code-example"" data-trusted=""1"" id=""0cbnyvmobz"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// 1. The table with `id=""age-table""`.
let table = document.getElementById('age-table')

// 2. All label elements inside that table
table.getElementsByTagName('label')
// or
document.querySelectorAll('#age-table label')

// 3. The first td in that table (with the word ""Age"")
table.rows[0].cells[0]
// or
table.getElementsByTagName('td')[0]
// or
table.querySelector('td')

// 4. The form with the name ""search""
// assuming there's only one element with name=""search"" in the document
let form = document.getElementsByName('search')[0]
// or, form specifically
document.querySelector('form[name=""search""]')

// 5. The first input in that form.
form.getElementsByTagName('input')[0]
// or
form.querySelector('input')

// 6. The last input in that form
let inputs = form.querySelectorAll('input') // find all inputs
inputs[inputs.length-1] // take the last one</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
"Node properties: type, tag and contents","<h1 class=""main__header-title"">Node properties: type, tag and contents</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Node properties: type, tag and contents"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>Let’s get a more in-depth look at DOM nodes.</p>
<p>In this chapter we’ll see more into what they are and learn their most used properties.</p>
<h2><a class=""main__anchor"" href=""#dom-node-classes"" name=""dom-node-classes"">DOM node classes</a></h2><p>Different DOM nodes may have different properties. For instance, an element node corresponding to tag <code>&lt;a&gt;</code> has link-related properties, and the one corresponding to <code>&lt;input&gt;</code> has input-related properties and so on. Text nodes are not the same as element nodes. But there are also common properties and methods between all of them, because all classes of DOM nodes form a single hierarchy.</p>
<p>Each DOM node belongs to the corresponding built-in class.</p>
<p>The root of the hierarchy is <a href=""https://dom.spec.whatwg.org/#eventtarget"">EventTarget</a>, that is inherited by  <a href=""https://dom.spec.whatwg.org/#interface-node"">Node</a>, and other DOM nodes inherit from it.</p>
<p>Here’s the picture, explanations to follow:</p>
<figure><div class=""image"" style=""width:552px"">
<div class=""image__ratio"" style=""padding-top:73.0072463768116%""></div>
<object class=""image__image"" data=""/article/basic-dom-node-properties/dom-class-hierarchy.svg"" data-use-theme="""" height=""403"" type=""image/svg+xml"" width=""552"">
<img alt="""" height=""403"" src=""https://javascript.info/article/basic-dom-node-properties/dom-class-hierarchy.svg"" width=""552""/>
</object>
</div></figure><p>The classes are:</p>
<ul>
<li>
<p><a href=""https://dom.spec.whatwg.org/#eventtarget"">EventTarget</a> – is the root “abstract” class for everything.</p>
<p>Objects of that class are never created. It serves as a base, so that all DOM nodes support so-called “events”, we’ll study them later.</p>
</li>
<li>
<p><a href=""https://dom.spec.whatwg.org/#interface-node"">Node</a> – is also an “abstract” class, serving as a base  for DOM nodes.</p>
<p>It provides the core tree functionality: <code>parentNode</code>, <code>nextSibling</code>, <code>childNodes</code> and so on (they are getters). Objects of <code>Node</code> class are never created. But there are other classes that inherit from it (and so inherit the <code>Node</code> functionality).</p>
</li>
<li>
<p><a href=""https://dom.spec.whatwg.org/#interface-document"">Document</a>, for historical reasons often inherited by <code>HTMLDocument</code> (though the latest spec doesn’t dictate it) – is a document as a whole.</p>
<p>The <code>document</code> global object belongs exactly to this class. It serves as an entry point to the DOM.</p>
</li>
<li>
<p><a href=""https://dom.spec.whatwg.org/#interface-characterdata"">CharacterData</a> – an “abstract” class, inherited by:</p>
<ul>
<li><a href=""https://dom.spec.whatwg.org/#interface-text"">Text</a> – the class corresponding to a text inside elements, e.g. <code>Hello</code> in <code>&lt;p&gt;Hello&lt;/p&gt;</code>.</li>
<li><a href=""https://dom.spec.whatwg.org/#interface-comment"">Comment</a> – the class for comments. They are not shown, but each comment becomes a member of DOM.</li>
</ul>
</li>
<li>
<p><a href=""https://dom.spec.whatwg.org/#interface-element"">Element</a> – is the base class for DOM elements.</p>
<p>It provides element-level navigation like <code>nextElementSibling</code>, <code>children</code> and searching methods like <code>getElementsByTagName</code>, <code>querySelector</code>.</p>
<p>A browser supports not only HTML, but also XML and SVG. So the <code>Element</code> class serves as a base for more specific classes: <code>SVGElement</code>, <code>XMLElement</code> (we don’t need them here) and <code>HTMLElement</code>.</p>
</li>
<li>
<p>Finally, <a href=""https://html.spec.whatwg.org/multipage/dom.html#htmlelement"">HTMLElement</a> is the basic class for all HTML elements. We’ll work with it most of the time.</p>
<p>It is inherited by concrete HTML elements:</p>
<ul>
<li><a href=""https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement"">HTMLInputElement</a> – the class for <code>&lt;input&gt;</code> elements,</li>
<li><a href=""https://html.spec.whatwg.org/multipage/semantics.html#htmlbodyelement"">HTMLBodyElement</a> – the class for <code>&lt;body&gt;</code> elements,</li>
<li><a href=""https://html.spec.whatwg.org/multipage/semantics.html#htmlanchorelement"">HTMLAnchorElement</a> – the class for <code>&lt;a&gt;</code> elements,</li>
<li>…and so on.</li>
</ul>
</li>
</ul>
<p>There are many other tags with their own classes that may have specific properties and methods, while some elements, such as <code>&lt;span&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code> do not have any specific properties, so they are instances of <code>HTMLElement</code> class.</p>
<p>So, the full set of properties and methods of a given node comes as the result of the chain of inheritance.</p>
<p>For example, let’s consider the DOM object for an <code>&lt;input&gt;</code> element. It belongs to <a href=""https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement"">HTMLInputElement</a> class.</p>
<p>It gets properties and methods as a superposition of (listed in inheritance order):</p>
<ul>
<li><code>HTMLInputElement</code> – this class provides input-specific properties,</li>
<li><code>HTMLElement</code> – it provides common HTML element methods (and getters/setters),</li>
<li><code>Element</code> – provides generic element methods,</li>
<li><code>Node</code> – provides common DOM node properties,</li>
<li><code>EventTarget</code> – gives the support for events (to be covered),</li>
<li>…and finally it inherits from <code>Object</code>, so “plain object” methods like <code>hasOwnProperty</code> are also available.</li>
</ul>
<p>To see the DOM node class name, we can recall that an object usually has the <code>constructor</code> property. It references the class constructor, and <code>constructor.name</code> is its name:</p>
<div class=""code-example"" data-trusted=""1"" id=""kt3ppcrkth"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( document.body.constructor.name ); // HTMLBodyElement</code></pre>
</div>
</div>
</div><p>…Or we can just <code>toString</code> it:</p>
<div class=""code-example"" data-trusted=""1"" id=""tqpeqcnjxl"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( document.body ); // [object HTMLBodyElement]</code></pre>
</div>
</div>
</div><p>We also can use <code>instanceof</code> to check the inheritance:</p>
<div class=""code-example"" data-trusted=""1"" id=""npalv6q6i7"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( document.body instanceof HTMLBodyElement ); // true
alert( document.body instanceof HTMLElement ); // true
alert( document.body instanceof Element ); // true
alert( document.body instanceof Node ); // true
alert( document.body instanceof EventTarget ); // true</code></pre>
</div>
</div>
</div><p>As we can see, DOM nodes are regular JavaScript objects. They use prototype-based classes for inheritance.</p>
<p>That’s also easy to see by outputting an element with <code>console.dir(elem)</code> in a browser. There in the console you can see <code>HTMLElement.prototype</code>, <code>Element.prototype</code> and so on.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type""><code>console.dir(elem)</code> versus <code>console.log(elem)</code></span></div>
<div class=""important__content""><p>Most browsers support two commands in their developer tools: <code>console.log</code> and <code>console.dir</code>. They output their arguments to the console. For JavaScript objects these commands usually do the same.</p>
<p>But for DOM elements they are different:</p>
<ul>
<li><code>console.log(elem)</code> shows the element DOM tree.</li>
<li><code>console.dir(elem)</code> shows the element as a DOM object, good to explore its properties.</li>
</ul>
<p>Try it on <code>document.body</code>.</p>
</div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">IDL in the spec</span></div>
<div class=""important__content""><p>In the specification, DOM classes aren’t described by using JavaScript, but a special <a href=""https://en.wikipedia.org/wiki/Interface_description_language"">Interface description language</a> (IDL), that is usually easy to understand.</p>
<p>In IDL all properties are prepended with their types. For instance, <code>DOMString</code>, <code>boolean</code> and so on.</p>
<p>Here’s an excerpt from it, with comments:</p>
<div class=""code-example"" data-highlight='[{""start"":14,""end"":14},{""start"":11,""end"":12},{""start"":5,""end"":5},{""start"":1,""end"":1}]' data-trusted=""1"" id=""wt9z7ycxeh"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// Define HTMLInputElement
// The colon "":"" means that HTMLInputElement inherits from HTMLElement
interface HTMLInputElement: HTMLElement {
  // here go properties and methods of &lt;input&gt; elements

  // ""DOMString"" means that the value of a property is a string
  attribute DOMString accept;
  attribute DOMString alt;
  attribute DOMString autocomplete;
  attribute DOMString value;

  // boolean value property (true/false)
  attribute boolean autofocus;
  ...
  // now the method: ""void"" means that the method returns no value
  void select();
  ...
}</code></pre>
</div>
</div>
</div></div></div>
<h2><a class=""main__anchor"" href=""#the-nodetype-property"" name=""the-nodetype-property"">The “nodeType” property</a></h2><p>The <code>nodeType</code> property provides one more, “old-fashioned” way to get the “type” of a DOM node.</p>
<p>It has a numeric value:</p>
<ul>
<li><code>elem.nodeType == 1</code> for element nodes,</li>
<li><code>elem.nodeType == 3</code> for text nodes,</li>
<li><code>elem.nodeType == 9</code> for the document object,</li>
<li>there are few other values in <a href=""https://dom.spec.whatwg.org/#node"">the specification</a>.</li>
</ul>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""izwkmzd1h2"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
  &lt;script&gt;
  let elem = document.body;

  // let's examine: what type of node is in elem?
  alert(elem.nodeType); // 1 =&gt; element

  // and its first child is...
  alert(elem.firstChild.nodeType); // 3 =&gt; text

  // for the document object, the type is 9
  alert( document.nodeType ); // 9
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>In modern scripts, we can use <code>instanceof</code> and other class-based tests to see the node type, but sometimes <code>nodeType</code> may be simpler. We can only read <code>nodeType</code>, not change it.</p>
<h2><a class=""main__anchor"" href=""#tag-nodename-and-tagname"" name=""tag-nodename-and-tagname"">Tag: nodeName and tagName</a></h2><p>Given a DOM node, we can read its tag name from <code>nodeName</code> or <code>tagName</code> properties:</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""l9w5blfr48"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( document.body.nodeName ); // BODY
alert( document.body.tagName ); // BODY</code></pre>
</div>
</div>
</div><p>Is there any difference between <code>tagName</code> and <code>nodeName</code>?</p>
<p>Sure, the difference is reflected in their names, but is indeed a bit subtle.</p>
<ul>
<li>The <code>tagName</code> property exists only for <code>Element</code> nodes.</li>
<li>The <code>nodeName</code> is defined for any <code>Node</code>:
<ul>
<li>for elements it means the same as <code>tagName</code>.</li>
<li>for other node types (text, comment, etc.) it has a string with the node type.</li>
</ul>
</li>
</ul>
<p>In other words, <code>tagName</code> is only supported by element nodes (as it originates from <code>Element</code> class), while <code>nodeName</code> can say something about other node types.</p>
<p>For instance, let’s compare <code>tagName</code> and <code>nodeName</code> for the <code>document</code> and a comment node:</p>
<div class=""code-example"" data-trusted=""1"" id=""wlkq1irkpp"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;&lt;!-- comment --&gt;

  &lt;script&gt;
    // for comment
    alert( document.body.firstChild.tagName ); // undefined (not an element)
    alert( document.body.firstChild.nodeName ); // #comment

    // for document
    alert( document.tagName ); // undefined (not an element)
    alert( document.nodeName ); // #document
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>If we only deal with elements, then we can use both <code>tagName</code> and <code>nodeName</code> – there’s no difference.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">The tag name is always uppercase except in XML mode</span></div>
<div class=""important__content""><p>The browser has two modes of processing documents: HTML and XML. Usually the HTML-mode is used for webpages. XML-mode is enabled when the browser receives an XML-document with the header: <code>Content-Type: application/xml+xhtml</code>.</p>
<p>In HTML mode <code>tagName/nodeName</code> is always uppercased: it’s <code>BODY</code> either for <code>&lt;body&gt;</code> or <code>&lt;BoDy&gt;</code>.</p>
<p>In XML mode the case is kept “as is”. Nowadays XML mode is rarely used.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#innerhtml-the-contents"" name=""innerhtml-the-contents"">innerHTML: the contents</a></h2><p>The <a href=""https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin"">innerHTML</a> property allows to get the HTML inside the element as a string.</p>
<p>We can also modify it. So it’s one of the most powerful ways to change the page.</p>
<p>The example shows the contents of <code>document.body</code> and then replaces it completely:</p>
<div class=""code-example"" data-trusted=""1"" id=""o5akfx84en"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
  &lt;p&gt;A paragraph&lt;/p&gt;
  &lt;div&gt;A div&lt;/div&gt;

  &lt;script&gt;
    alert( document.body.innerHTML ); // read the current contents
    document.body.innerHTML = 'The new BODY!'; // replace it
  &lt;/script&gt;

&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>We can try to insert invalid HTML, the browser will fix our errors:</p>
<div class=""code-example"" data-trusted=""1"" id=""tqmmaikn5x"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;

  &lt;script&gt;
    document.body.innerHTML = '&lt;b&gt;test'; // forgot to close the tag
    alert( document.body.innerHTML ); // &lt;b&gt;test&lt;/b&gt; (fixed)
  &lt;/script&gt;

&lt;/body&gt;</code></pre>
</div>
</div>
</div><div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Scripts don’t execute</span></div>
<div class=""important__content""><p>If <code>innerHTML</code> inserts a <code>&lt;script&gt;</code> tag into the document – it becomes a part of HTML, but doesn’t execute.</p>
</div></div>
<h3><a class=""main__anchor"" href=""#beware-innerhtml-does-a-full-overwrite"" name=""beware-innerhtml-does-a-full-overwrite"">Beware: “innerHTML+=” does a full overwrite</a></h3><p>We can append HTML to an element by using <code>elem.innerHTML+=""more html""</code>.</p>
<p>Like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""thlnwm11pz"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>chatDiv.innerHTML += ""&lt;div&gt;Hello&lt;img src='smile.gif'/&gt; !&lt;/div&gt;"";
chatDiv.innerHTML += ""How goes?"";</code></pre>
</div>
</div>
</div><p>But we should be very careful about doing it, because what’s going on is <em>not</em> an addition, but a full overwrite.</p>
<p>Technically, these two lines do the same:</p>
<div class=""code-example"" data-highlight='[{""start"":2,""end"":2}]' data-trusted=""1"" id=""zt0ml9bexc"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>elem.innerHTML += ""..."";
// is a shorter way to write:
elem.innerHTML = elem.innerHTML + ""...""</code></pre>
</div>
</div>
</div><p>In other words, <code>innerHTML+=</code> does this:</p>
<ol>
<li>The old contents is removed.</li>
<li>The new <code>innerHTML</code> is written instead (a concatenation of the old and the new one).</li>
</ol>
<p><strong>As the content is “zeroed-out” and rewritten from the scratch, all images and other resources will be reloaded</strong>.</p>
<p>In the <code>chatDiv</code> example above the line <code>chatDiv.innerHTML+=""How goes?""</code> re-creates the HTML content and reloads <code>smile.gif</code> (hope it’s cached). If <code>chatDiv</code> has a lot of other text and images, then the reload becomes clearly visible.</p>
<p>There are other side-effects as well. For instance, if the existing text was selected with the mouse, then most browsers will remove the selection upon rewriting <code>innerHTML</code>. And if there was an <code>&lt;input&gt;</code> with a text entered by the visitor, then the text will be removed. And so on.</p>
<p>Luckily, there are other ways to add HTML besides <code>innerHTML</code>, and we’ll study them soon.</p>
<h2><a class=""main__anchor"" href=""#outerhtml-full-html-of-the-element"" name=""outerhtml-full-html-of-the-element"">outerHTML: full HTML of the element</a></h2><p>The <code>outerHTML</code> property contains the full HTML of the element. That’s like <code>innerHTML</code> plus the element itself.</p>
<p>Here’s an example:</p>
<div class=""code-example"" data-trusted=""1"" id=""1a6qjjlzw4"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem""&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;

&lt;script&gt;
  alert(elem.outerHTML); // &lt;div id=""elem""&gt;Hello &lt;b&gt;World&lt;/b&gt;&lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p><strong>Beware: unlike <code>innerHTML</code>, writing to <code>outerHTML</code> does not change the element. Instead, it replaces it in the DOM.</strong></p>
<p>Yeah, sounds strange, and strange it is, that’s why we make a separate note about it here. Take a look.</p>
<p>Consider the example:</p>
<div class=""code-example"" data-highlight='[{""start"":8,""end"":8},{""start"":5,""end"":5}]' data-trusted=""1"" id=""o9ktt07dyk"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div&gt;Hello, world!&lt;/div&gt;

&lt;script&gt;
  let div = document.querySelector('div');

  // replace div.outerHTML with &lt;p&gt;...&lt;/p&gt;
  div.outerHTML = '&lt;p&gt;A new element&lt;/p&gt;'; // (*)

  // Wow! 'div' is still the same!
  alert(div.outerHTML); // &lt;div&gt;Hello, world!&lt;/div&gt; (**)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Looks really odd, right?</p>
<p>In the line <code>(*)</code> we replaced <code>div</code> with <code>&lt;p&gt;A new element&lt;/p&gt;</code>. In the outer document (the DOM) we can see the new content instead of the <code>&lt;div&gt;</code>. But, as we can see in line <code>(**)</code>, the value of the old <code>div</code> variable hasn’t changed!</p>
<p>The <code>outerHTML</code> assignment does not modify the DOM element (the object referenced by, in this case, the variable ‘div’), but removes it from the DOM and inserts the new HTML in its place.</p>
<p>So what happened in <code>div.outerHTML=...</code> is:</p>
<ul>
<li><code>div</code> was removed from the document.</li>
<li>Another piece of HTML <code>&lt;p&gt;A new element&lt;/p&gt;</code> was inserted in its place.</li>
<li><code>div</code> still has its old value. The new HTML wasn’t saved to any variable.</li>
</ul>
<p>It’s so easy to make an error here: modify <code>div.outerHTML</code> and then continue to work with <code>div</code> as if it had the new content in it. But it doesn’t. Such thing is correct for <code>innerHTML</code>, but not for <code>outerHTML</code>.</p>
<p>We can write to <code>elem.outerHTML</code>, but should keep in mind that it doesn’t change the element we’re writing to (‘elem’). It puts the new HTML in its place instead. We can get references to the new elements by querying the DOM.</p>
<h2><a class=""main__anchor"" href=""#nodevalue-data-text-node-content"" name=""nodevalue-data-text-node-content"">nodeValue/data: text node content</a></h2><p>The <code>innerHTML</code> property is only valid for element nodes.</p>
<p>Other node types, such as text nodes, have their counterpart: <code>nodeValue</code> and <code>data</code> properties. These two are almost the same for practical use, there are only minor specification differences. So we’ll use <code>data</code>, because it’s shorter.</p>
<p>An example of reading the content of a text node and a comment:</p>
<div class=""code-example"" data-demo-height=""50"" data-highlight='[{""start"":8,""end"":8},{""start"":5,""end"":5}]' data-trusted=""1"" id=""rcdmrwyigd"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
  Hello
  &lt;!-- Comment --&gt;
  &lt;script&gt;
    let text = document.body.firstChild;
    alert(text.data); // Hello

    let comment = text.nextSibling;
    alert(comment.data); // Comment
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>For text nodes we can imagine a reason to read or modify them, but why comments?</p>
<p>Sometimes developers embed information or template instructions into HTML in them, like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""c6zfipg65v"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!-- if isAdmin --&gt;
  &lt;div&gt;Welcome, Admin!&lt;/div&gt;
&lt;!-- /if --&gt;</code></pre>
</div>
</div>
</div><p>…Then JavaScript can read it from <code>data</code> property and process embedded instructions.</p>
<h2><a class=""main__anchor"" href=""#textcontent-pure-text"" name=""textcontent-pure-text"">textContent: pure text</a></h2><p>The <code>textContent</code> provides access to the <em>text</em> inside the element: only text, minus all <code>&lt;tags&gt;</code>.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""782v3h6ugs"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""news""&gt;
  &lt;h1&gt;Headline!&lt;/h1&gt;
  &lt;p&gt;Martians attack people!&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
  // Headline! Martians attack people!
  alert(news.textContent);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>As we can see, only text is returned, as if all <code>&lt;tags&gt;</code> were cut out, but the text in them remained.</p>
<p>In practice, reading such text is rarely needed.</p>
<p><strong>Writing to <code>textContent</code> is much more useful, because it allows to write text the “safe way”.</strong></p>
<p>Let’s say we have an arbitrary string, for instance entered by a user, and want to show it.</p>
<ul>
<li>With <code>innerHTML</code> we’ll have it inserted “as HTML”, with all HTML tags.</li>
<li>With <code>textContent</code> we’ll have it inserted “as text”, all symbols are treated literally.</li>
</ul>
<p>Compare the two:</p>
<div class=""code-example"" data-trusted=""1"" id=""swec4052rp"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem1""&gt;&lt;/div&gt;
&lt;div id=""elem2""&gt;&lt;/div&gt;

&lt;script&gt;
  let name = prompt(""What's your name?"", ""&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;"");

  elem1.innerHTML = name;
  elem2.textContent = name;
&lt;/script&gt;</code></pre>
</div>
</div>
</div><ol>
<li>The first <code>&lt;div&gt;</code> gets the name “as HTML”: all tags become tags, so we see the bold name.</li>
<li>The second <code>&lt;div&gt;</code> gets the name “as text”, so we literally see <code>&lt;b&gt;Winnie-the-Pooh!&lt;/b&gt;</code>.</li>
</ol>
<p>In most cases, we expect the text from a user, and want to treat it as text. We don’t want unexpected HTML in our site. An assignment to <code>textContent</code> does exactly that.</p>
<h2><a class=""main__anchor"" href=""#the-hidden-property"" name=""the-hidden-property"">The “hidden” property</a></h2><p>The “hidden” attribute and the DOM property specifies whether the element is visible or not.</p>
<p>We can use it in HTML or assign it using JavaScript, like this:</p>
<div class=""code-example"" data-demo-height=""80"" data-trusted=""1"" id=""ii7wqa8ax6"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div&gt;Both divs below are hidden&lt;/div&gt;

&lt;div hidden&gt;With the attribute ""hidden""&lt;/div&gt;

&lt;div id=""elem""&gt;JavaScript assigned the property ""hidden""&lt;/div&gt;

&lt;script&gt;
  elem.hidden = true;
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Technically, <code>hidden</code> works the same as <code>style=""display:none""</code>. But it’s shorter to write.</p>
<p>Here’s a blinking element:</p>
<div class=""code-example"" data-demo-height=""50"" data-trusted=""1"" id=""84qk72zayk"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem""&gt;A blinking element&lt;/div&gt;

&lt;script&gt;
  setInterval(() =&gt; elem.hidden = !elem.hidden, 1000);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#more-properties"" name=""more-properties"">More properties</a></h2><p>DOM elements also have additional properties, in particular those that depend on the class:</p>
<ul>
<li><code>value</code> – the value for <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code> (<code>HTMLInputElement</code>, <code>HTMLSelectElement</code>…).</li>
<li><code>href</code> – the “href” for <code>&lt;a href=""...""&gt;</code> (<code>HTMLAnchorElement</code>).</li>
<li><code>id</code> – the value of “id” attribute, for all elements (<code>HTMLElement</code>).</li>
<li>…and much more…</li>
</ul>
<p>For instance:</p>
<div class=""code-example"" data-demo-height=""80"" data-trusted=""1"" id=""6a4z9qt86c"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;input type=""text"" id=""elem"" value=""value""&gt;

&lt;script&gt;
  alert(elem.type); // ""text""
  alert(elem.id); // ""elem""
  alert(elem.value); // value
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Most standard HTML attributes have the corresponding DOM property, and we can access it like that.</p>
<p>If we want to know the full list of supported properties for a given class, we can find them in the specification. For instance, <code>HTMLInputElement</code> is documented at <a href=""https://html.spec.whatwg.org/#htmlinputelement"">https://html.spec.whatwg.org/#htmlinputelement</a>.</p>
<p>Or if we’d like to get them fast or are interested in a concrete browser specification – we can always output the element using <code>console.dir(elem)</code> and read the properties. Or explore “DOM properties” in the Elements tab of the browser developer tools.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Each DOM node belongs to a certain class. The classes form a hierarchy. The full set of properties and methods come as the result of inheritance.</p>
<p>Main DOM node properties are:</p>
<dl>
<dt><code>nodeType</code></dt>
<dd>We can use it to see if a node is a text or an element node. It has a numeric value: <code>1</code> for elements,<code>3</code> for text nodes, and a few others for other node types. Read-only.</dd>
<dt><code>nodeName/tagName</code></dt>
<dd>For elements, tag name (uppercased unless XML-mode). For non-element nodes <code>nodeName</code> describes what it is. Read-only.</dd>
<dt><code>innerHTML</code></dt>
<dd>The HTML content of the element. Can be modified.</dd>
<dt><code>outerHTML</code></dt>
<dd>The full HTML of the element. A write operation into <code>elem.outerHTML</code> does not touch <code>elem</code> itself. Instead it gets replaced with the new HTML in the outer context.</dd>
<dt><code>nodeValue/data</code></dt>
<dd>The content of a non-element node (text, comment). These two are almost the same, usually we use <code>data</code>. Can be modified.</dd>
<dt><code>textContent</code></dt>
<dd>The text inside the element: HTML minus all <code>&lt;tags&gt;</code>. Writing into it puts the text inside the element, with all special characters and tags treated exactly as text. Can safely insert user-generated text and protect from unwanted HTML insertions.</dd>
<dt><code>hidden</code></dt>
<dd>When set to <code>true</code>, does the same as CSS <code>display:none</code>.</dd>
</dl>
<p>DOM nodes also have other properties depending on their class. For instance, <code>&lt;input&gt;</code> elements (<code>HTMLInputElement</code>) support <code>value</code>, <code>type</code>, while <code>&lt;a&gt;</code> elements (<code>HTMLAnchorElement</code>) support <code>href</code> etc. Most standard HTML attributes have a corresponding DOM property.</p>
<p>However, HTML attributes and DOM properties are not always the same, as we’ll see in the next chapter.</p>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#count-descendants"" name=""count-descendants"">Count descendants</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/tree-info"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>There’s a tree structured as nested <code>ul/li</code>.</p>
<p>Write the code that for each <code>&lt;li&gt;</code> shows:</p>
<ol>
<li>What’s the text inside it (without the subtree)</li>
<li>The number of nested <code>&lt;li&gt;</code> – all descendants, including the deeply nested ones.</li>
</ol>
<p><a href=""https://en.js.cx/task/tree-info/solution/"" target=""blank"">Demo in new window</a></p><p><a data-plunk-id=""HILrCNC2WQL70wBY"" href=""https://plnkr.co/edit/HILrCNC2WQL70wBY?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>Let’s make a loop over <code>&lt;li&gt;</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""a6sv1c77x6"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>for (let li of document.querySelectorAll('li')) {
  ...
}</code></pre>
</div>
</div>
</div><p>In the loop we need to get the text inside every <code>li</code>.</p>
<p>We can read the text from the first child node of <code>li</code>, that is the text node:</p>
<div class=""code-example"" data-trusted=""1"" id=""hjrkae1aet"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>for (let li of document.querySelectorAll('li')) {
  let title = li.firstChild.data;

  // title is the text in &lt;li&gt; before any other nodes
}</code></pre>
</div>
</div>
</div><p>Then we can get the number of descendants as <code>li.getElementsByTagName('li').length</code>.</p>
<p><a data-plunk-id=""F1UQNdzRcv7xkTpk"" href=""https://plnkr.co/edit/F1UQNdzRcv7xkTpk?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#what-s-in-the-nodetype"" name=""what-s-in-the-nodetype"">What's in the nodeType?</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/lastchild-nodetype-inline"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>What does the script show?</p>
<div class=""code-example"" data-trusted=""1"" id=""w8163bojnq"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;

&lt;body&gt;
  &lt;script&gt;
    alert(document.body.lastChild.nodeType);
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>There’s a catch here.</p>
<p>At the time of <code>&lt;script&gt;</code> execution the last DOM node is exactly <code>&lt;script&gt;</code>, because the browser did not process the rest of the page yet.</p>
<p>So the result is <code>1</code> (element node).</p>
<div class=""code-example"" data-demo-height=""60"" data-trusted=""1"" id=""xz38wbzwg3"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;html&gt;

&lt;body&gt;
  &lt;script&gt;
    alert(document.body.lastChild.nodeType);
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#tag-in-comment"" name=""tag-in-comment"">Tag in comment</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/tag-in-comment"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 3</span></div><div class=""task__content""><div class=""task__formatted""><p>What does this code show?</p>
<div class=""code-example"" data-trusted=""1"" id=""c3leru7h1y"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;script&gt;
  let body = document.body;

  body.innerHTML = ""&lt;!--"" + body.tagName + ""--&gt;"";

  alert( body.firstChild.data ); // what's here?
&lt;/script&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The answer: <strong><code>BODY</code></strong>.</p>
<div class=""code-example"" data-trusted=""1"" id=""86l84sk6jx"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;script&gt;
  let body = document.body;

  body.innerHTML = ""&lt;!--"" + body.tagName + ""--&gt;"";

  alert( body.firstChild.data ); // BODY
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>What’s going on step by step:</p>
<ol>
<li>The content of <code>&lt;body&gt;</code> is replaced with the comment. The comment is <code>&lt;!--BODY--&gt;</code>, because <code>body.tagName == ""BODY""</code>. As we remember, <code>tagName</code> is always uppercase in HTML.</li>
<li>The comment is now the only child node, so we get it in <code>body.firstChild</code>.</li>
<li>The <code>data</code> property of the comment is its contents (inside <code>&lt;!--...--&gt;</code>): <code>""BODY""</code>.</li>
</ol>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#where-s-the-document-in-the-hierarchy"" name=""where-s-the-document-in-the-hierarchy"">Where's the ""document"" in the hierarchy?</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/where-document-in-hierarchy"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 4</span></div><div class=""task__content""><div class=""task__formatted""><p>Which class does the <code>document</code> belong to?</p>
<p>What’s its place in the DOM hierarchy?</p>
<p>Does it inherit from <code>Node</code> or <code>Element</code>, or maybe <code>HTMLElement</code>?</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>We can see which class it belongs by outputting it, like:</p>
<div class=""code-example"" data-trusted=""1"" id=""2my6w1e4v0"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(document); // [object HTMLDocument]</code></pre>
</div>
</div>
</div><p>Or:</p>
<div class=""code-example"" data-trusted=""1"" id=""w2znfx1a4v"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(document.constructor.name); // HTMLDocument</code></pre>
</div>
</div>
</div><p>So, <code>document</code> is an instance of <code>HTMLDocument</code> class.</p>
<p>What’s its place in the hierarchy?</p>
<p>Yeah, we could browse the specification, but it would be faster to figure out manually.</p>
<p>Let’s traverse the prototype chain via <code>__proto__</code>.</p>
<p>As we know, methods of a class are in the <code>prototype</code> of the constructor. For instance, <code>HTMLDocument.prototype</code> has methods for documents.</p>
<p>Also, there’s a reference to the constructor function inside the <code>prototype</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""aqn744z8cw"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(HTMLDocument.prototype.constructor === HTMLDocument); // true</code></pre>
</div>
</div>
</div><p>To get a name of the class as a string, we can use <code>constructor.name</code>. Let’s do it for the whole <code>document</code> prototype chain, till class <code>Node</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""kxwwnxs66o"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert(HTMLDocument.prototype.constructor.name); // HTMLDocument
alert(HTMLDocument.prototype.__proto__.constructor.name); // Document
alert(HTMLDocument.prototype.__proto__.__proto__.constructor.name); // Node</code></pre>
</div>
</div>
</div><p>That’s the hierarchy.</p>
<p>We also could examine the object using <code>console.dir(document)</code> and see these names by opening <code>__proto__</code>. The console takes them from <code>constructor</code> internally.</p>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
Attributes and properties,"<h1 class=""main__header-title"">Attributes and properties</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Attributes and properties"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>When the browser loads the page, it “reads” (another word: “parses”) the HTML and generates DOM objects from it. For element nodes, most standard HTML attributes automatically become properties of DOM objects.</p>
<p>For instance, if the tag is <code>&lt;body id=""page""&gt;</code>, then the DOM object has <code>body.id=""page""</code>.</p>
<p>But the attribute-property mapping is not one-to-one! In this chapter we’ll pay attention to separate these two notions, to see how to work with them, when they are the same, and when they are different.</p>
<h2><a class=""main__anchor"" href=""#dom-properties"" name=""dom-properties"">DOM properties</a></h2><p>We’ve already seen built-in DOM properties. There are a lot. But technically no one limits us, and if there aren’t enough, we can add our own.</p>
<p>DOM nodes are regular JavaScript objects. We can alter them.</p>
<p>For instance, let’s create a new property in <code>document.body</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""ywf6i6c3nu"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.myData = {
  name: 'Caesar',
  title: 'Imperator'
};

alert(document.body.myData.title); // Imperator</code></pre>
</div>
</div>
</div><p>We can add a method as well:</p>
<div class=""code-example"" data-trusted=""1"" id=""dc3qvbluxq"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.sayTagName = function() {
  alert(this.tagName);
};

document.body.sayTagName(); // BODY (the value of ""this"" in the method is document.body)</code></pre>
</div>
</div>
</div><p>We can also modify built-in prototypes like <code>Element.prototype</code> and add new methods to all elements:</p>
<div class=""code-example"" data-trusted=""1"" id=""67hslgzeyk"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>Element.prototype.sayHi = function() {
  alert(`Hello, I'm ${this.tagName}`);
};

document.documentElement.sayHi(); // Hello, I'm HTML
document.body.sayHi(); // Hello, I'm BODY</code></pre>
</div>
</div>
</div><p>So, DOM properties and methods behave just like those of regular JavaScript objects:</p>
<ul>
<li>They can have any value.</li>
<li>They are case-sensitive (write <code>elem.nodeType</code>, not <code>elem.NoDeTyPe</code>).</li>
</ul>
<h2><a class=""main__anchor"" href=""#html-attributes"" name=""html-attributes"">HTML attributes</a></h2><p>In HTML, tags may have attributes. When the browser parses the HTML to create DOM objects for tags, it recognizes <em>standard</em> attributes and creates DOM properties from them.</p>
<p>So when an element has <code>id</code> or another <em>standard</em> attribute, the corresponding property gets created. But that doesn’t happen if the attribute is non-standard.</p>
<p>For instance:</p>
<div class=""code-example"" data-highlight='[{""start"":3,""end"":4}]' data-trusted=""1"" id=""7yitod4944"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body id=""test"" something=""non-standard""&gt;
  &lt;script&gt;
    alert(document.body.id); // test
    // non-standard attribute does not yield a property
    alert(document.body.something); // undefined
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>Please note that a standard attribute for one element can be unknown for another one. For instance, <code>""type""</code> is standard for <code>&lt;input&gt;</code> (<a href=""https://html.spec.whatwg.org/#htmlinputelement"">HTMLInputElement</a>), but not for <code>&lt;body&gt;</code> (<a href=""https://html.spec.whatwg.org/#htmlbodyelement"">HTMLBodyElement</a>). Standard attributes are described in the specification for the corresponding element class.</p>
<p>Here we can see it:</p>
<div class=""code-example"" data-highlight='[{""start"":4,""end"":4}]' data-trusted=""1"" id=""ili051pxbf"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body id=""body"" type=""...""&gt;
  &lt;input id=""input"" type=""text""&gt;
  &lt;script&gt;
    alert(input.type); // text
    alert(body.type); // undefined: DOM property not created, because it's non-standard
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>So, if an attribute is non-standard, there won’t be a DOM-property for it. Is there a way to access such attributes?</p>
<p>Sure. All attributes are accessible by using the following methods:</p>
<ul>
<li><code>elem.hasAttribute(name)</code> – checks for existence.</li>
<li><code>elem.getAttribute(name)</code> – gets the value.</li>
<li><code>elem.setAttribute(name, value)</code> – sets the value.</li>
<li><code>elem.removeAttribute(name)</code> – removes the attribute.</li>
</ul>
<p>These methods operate exactly with what’s written in HTML.</p>
<p>Also one can read all attributes using <code>elem.attributes</code>: a collection of objects that belong to a built-in <a href=""https://dom.spec.whatwg.org/#attr"">Attr</a> class, with <code>name</code> and <code>value</code> properties.</p>
<p>Here’s a demo of reading a non-standard property:</p>
<div class=""code-example"" data-highlight='[{""start"":2,""end"":2}]' data-trusted=""1"" id=""qn27w08grm"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body something=""non-standard""&gt;
  &lt;script&gt;
    alert(document.body.getAttribute('something')); // non-standard
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>HTML attributes have the following features:</p>
<ul>
<li>Their name is case-insensitive (<code>id</code> is same as <code>ID</code>).</li>
<li>Their values are always strings.</li>
</ul>
<p>Here’s an extended demo of working with attributes:</p>
<div class=""code-example"" data-trusted=""1"" id=""vrj5avr6vo"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
  &lt;div id=""elem"" about=""Elephant""&gt;&lt;/div&gt;

  &lt;script&gt;
    alert( elem.getAttribute('About') ); // (1) 'Elephant', reading

    elem.setAttribute('Test', 123); // (2), writing

    alert( elem.outerHTML ); // (3), see if the attribute is in HTML (yes)

    for (let attr of elem.attributes) { // (4) list all
      alert( `${attr.name} = ${attr.value}` );
    }
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>Please note:</p>
<ol>
<li><code>getAttribute('About')</code> – the first letter is uppercase here, and in HTML it’s all lowercase. But that doesn’t matter: attribute names are case-insensitive.</li>
<li>We can assign anything to an attribute, but it becomes a string. So here we have <code>""123""</code> as the value.</li>
<li>All attributes including ones that we set are visible in <code>outerHTML</code>.</li>
<li>The <code>attributes</code> collection is iterable and has all the attributes of the element (standard and non-standard) as objects with <code>name</code> and <code>value</code> properties.</li>
</ol>
<h2><a class=""main__anchor"" href=""#property-attribute-synchronization"" name=""property-attribute-synchronization"">Property-attribute synchronization</a></h2><p>When a standard attribute changes, the corresponding property is auto-updated, and (with some exceptions) vice versa.</p>
<p>In the example below <code>id</code> is modified as an attribute, and we can see the property changed too. And then the same backwards:</p>
<div class=""code-example"" data-trusted=""1"" id=""4n9w7i8y0p"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;input&gt;

&lt;script&gt;
  let input = document.querySelector('input');

  // attribute =&gt; property
  input.setAttribute('id', 'id');
  alert(input.id); // id (updated)

  // property =&gt; attribute
  input.id = 'newId';
  alert(input.getAttribute('id')); // newId (updated)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>But there are exclusions, for instance <code>input.value</code> synchronizes only from attribute → property, but not back:</p>
<div class=""code-example"" data-highlight='[{""start"":9,""end"":11}]' data-trusted=""1"" id=""svkfdj6h8x"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;input&gt;

&lt;script&gt;
  let input = document.querySelector('input');

  // attribute =&gt; property
  input.setAttribute('value', 'text');
  alert(input.value); // text

  // NOT property =&gt; attribute
  input.value = 'newValue';
  alert(input.getAttribute('value')); // text (not updated!)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>In the example above:</p>
<ul>
<li>Changing the attribute <code>value</code> updates the property.</li>
<li>But the property change does not affect the attribute.</li>
</ul>
<p>That “feature” may actually come in handy, because the user actions may lead to <code>value</code> changes, and then after them, if we want to recover the “original” value from HTML, it’s in the attribute.</p>
<h2><a class=""main__anchor"" href=""#dom-properties-are-typed"" name=""dom-properties-are-typed"">DOM properties are typed</a></h2><p>DOM properties are not always strings. For instance, the <code>input.checked</code> property (for checkboxes) is a boolean:</p>
<div class=""code-example"" data-trusted=""1"" id=""8njwdat31q"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;input id=""input"" type=""checkbox"" checked&gt; checkbox

&lt;script&gt;
  alert(input.getAttribute('checked')); // the attribute value is: empty string
  alert(input.checked); // the property value is: true
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>There are other examples. The <code>style</code> attribute is a string, but the <code>style</code> property is an object:</p>
<div class=""code-example"" data-trusted=""1"" id=""xboy1p81zd"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""div"" style=""color:red;font-size:120%""&gt;Hello&lt;/div&gt;

&lt;script&gt;
  // string
  alert(div.getAttribute('style')); // color:red;font-size:120%

  // object
  alert(div.style); // [object CSSStyleDeclaration]
  alert(div.style.color); // red
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Most properties are strings though.</p>
<p>Quite rarely, even if a DOM property type is a string, it may differ from the attribute. For instance, the <code>href</code> DOM property is always a <em>full</em> URL, even if the attribute contains a relative URL or just a <code>#hash</code>.</p>
<p>Here’s an example:</p>
<div class=""code-example"" data-demo-height=""30"" data-trusted=""1"" id=""expmc1tf3g"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;a id=""a"" href=""#hello""&gt;link&lt;/a&gt;
&lt;script&gt;
  // attribute
  alert(a.getAttribute('href')); // #hello

  // property
  alert(a.href ); // full URL in the form http://site.com/page#hello
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>If we need the value of <code>href</code> or any other attribute exactly as written in the HTML, we can use <code>getAttribute</code>.</p>
<h2><a class=""main__anchor"" href=""#non-standard-attributes-dataset"" name=""non-standard-attributes-dataset"">Non-standard attributes, dataset</a></h2><p>When writing HTML, we use a lot of standard attributes. But what about non-standard, custom ones? First, let’s see whether they are useful or not? What for?</p>
<p>Sometimes non-standard attributes are used to pass custom data from HTML to JavaScript, or to “mark” HTML-elements for JavaScript.</p>
<p>Like this:</p>
<div class=""code-example"" data-highlight='[{""start"":3,""cols"":[{""start"":5,""end"":20}]},{""start"":1,""cols"":[{""start"":5,""end"":21}]}]' data-trusted=""1"" id=""ztzvxl51x6"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!-- mark the div to show ""name"" here --&gt;
&lt;div show-info=""name""&gt;&lt;/div&gt;
&lt;!-- and age here --&gt;
&lt;div show-info=""age""&gt;&lt;/div&gt;

&lt;script&gt;
  // the code finds an element with the mark and shows what's requested
  let user = {
    name: ""Pete"",
    age: 25
  };

  for(let div of document.querySelectorAll('[show-info]')) {
    // insert the corresponding info into the field
    let field = div.getAttribute('show-info');
    div.innerHTML = user[field]; // first Pete into ""name"", then 25 into ""age""
  }
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Also they can be used to style an element.</p>
<p>For instance, here for the order state the attribute <code>order-state</code> is used:</p>
<div class=""code-example"" data-trusted=""1"" id=""q7jzerw4b9"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
  /* styles rely on the custom attribute ""order-state"" */
  .order[order-state=""new""] {
    color: green;
  }

  .order[order-state=""pending""] {
    color: blue;
  }

  .order[order-state=""canceled""] {
    color: red;
  }
&lt;/style&gt;

&lt;div class=""order"" order-state=""new""&gt;
  A new order.
&lt;/div&gt;

&lt;div class=""order"" order-state=""pending""&gt;
  A pending order.
&lt;/div&gt;

&lt;div class=""order"" order-state=""canceled""&gt;
  A canceled order.
&lt;/div&gt;</code></pre>
</div>
</div>
</div><p>Why would using an attribute be preferable to having classes like <code>.order-state-new</code>, <code>.order-state-pending</code>, <code>.order-state-canceled</code>?</p>
<p>Because an attribute is more convenient to manage. The state can be changed as easy as:</p>
<div class=""code-example"" data-trusted=""1"" id=""nff1tozg9g"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// a bit simpler than removing old/adding a new class
div.setAttribute('order-state', 'canceled');</code></pre>
</div>
</div>
</div><p>But there may be a possible problem with custom attributes. What if we use a non-standard attribute for our purposes and later the standard introduces it and makes it do something? The HTML language is alive, it grows, and more attributes appear to suit the needs of developers. There may be unexpected effects in such case.</p>
<p>To avoid conflicts, there exist <a href=""https://html.spec.whatwg.org/#embedding-custom-non-visible-data-with-the-data-*-attributes"">data-*</a> attributes.</p>
<p><strong>All attributes starting with “data-” are reserved for programmers’ use. They are available in the <code>dataset</code> property.</strong></p>
<p>For instance, if an <code>elem</code> has an attribute named <code>""data-about""</code>, it’s available as <code>elem.dataset.about</code>.</p>
<p>Like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""jhya6imo4v"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body data-about=""Elephants""&gt;
&lt;script&gt;
  alert(document.body.dataset.about); // Elephants
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Multiword attributes like <code>data-order-state</code> become camel-cased: <code>dataset.orderState</code>.</p>
<p>Here’s a rewritten “order state” example:</p>
<div class=""code-example"" data-trusted=""1"" id=""1f63mivi7r"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
  .order[data-order-state=""new""] {
    color: green;
  }

  .order[data-order-state=""pending""] {
    color: blue;
  }

  .order[data-order-state=""canceled""] {
    color: red;
  }
&lt;/style&gt;

&lt;div id=""order"" class=""order"" data-order-state=""new""&gt;
  A new order.
&lt;/div&gt;

&lt;script&gt;
  // read
  alert(order.dataset.orderState); // new

  // modify
  order.dataset.orderState = ""pending""; // (*)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Using <code>data-*</code> attributes is a valid, safe way to pass custom data.</p>
<p>Please note that we can not only read, but also modify data-attributes. Then CSS updates the view accordingly: in the example above the last line <code>(*)</code> changes the color to blue.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><ul>
<li>Attributes – is what’s written in HTML.</li>
<li>Properties – is what’s in DOM objects.</li>
</ul>
<p>A small comparison:</p>
<table>
<thead>
<tr>
<th></th>
<th>Properties</th>
<th>Attributes</th>
</tr>
</thead>
<tbody>
<tr>
<td>Type</td>
<td>Any value, standard properties have types described in the spec</td>
<td>A string</td>
</tr>
<tr>
<td>Name</td>
<td>Name is case-sensitive</td>
<td>Name is not case-sensitive</td>
</tr>
</tbody>
</table>
<p>Methods to work with attributes are:</p>
<ul>
<li><code>elem.hasAttribute(name)</code> – to check for existence.</li>
<li><code>elem.getAttribute(name)</code> – to get the value.</li>
<li><code>elem.setAttribute(name, value)</code> – to set the value.</li>
<li><code>elem.removeAttribute(name)</code> – to remove the attribute.</li>
<li><code>elem.attributes</code> is a collection of all attributes.</li>
</ul>
<p>For most situations using DOM properties is preferable. We should refer to attributes only when DOM properties do not suit us, when we need exactly attributes, for instance:</p>
<ul>
<li>We need a non-standard attribute. But if it starts with <code>data-</code>, then we should use <code>dataset</code>.</li>
<li>We want to read the value “as written” in HTML. The value of the DOM property may be different, for instance the <code>href</code> property is always a full URL, and we may want to get the “original” value.</li>
</ul>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#get-the-attribute"" name=""get-the-attribute"">Get the attribute</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/get-user-attribute"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Write the code to select the element with <code>data-widget-name</code> attribute from the document and to read its value.</p>
<div class=""code-example"" data-trusted=""1"" id=""1s3hlnun8w"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;div data-widget-name=""menu""&gt;Choose the genre&lt;/div&gt;

  &lt;script&gt;
    /* your code */
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><div class=""code-example"" data-demo-height=""100"" data-trusted=""1"" id=""faey8nqesn"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;div data-widget-name=""menu""&gt;Choose the genre&lt;/div&gt;

  &lt;script&gt;
    // getting it
    let elem = document.querySelector('[data-widget-name]');

    // reading the value
    alert(elem.dataset.widgetName);
    // or
    alert(elem.getAttribute('data-widget-name'));
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#make-external-links-orange"" name=""make-external-links-orange"">Make external links orange</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/yellow-links"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 3</span></div><div class=""task__content""><div class=""task__formatted""><p>Make all external links orange by altering their <code>style</code> property.</p>
<p>A link is external if:</p>
<ul>
<li>Its <code>href</code> has <code>://</code> in it</li>
<li>But doesn’t start with <code>http://internal.com</code>.</li>
</ul>
<p>Example:</p>
<div class=""code-example"" data-trusted=""1"" id=""ls39iuo1ml"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;a name=""list""&gt;the list&lt;/a&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=""http://google.com""&gt;http://google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""/tutorial""&gt;/tutorial.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""local/path""&gt;local/path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""ftp://ftp.com/my.zip""&gt;ftp://ftp.com/my.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""http://nodejs.org""&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""http://internal.com/test""&gt;http://internal.com/test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
  // setting style for a single link
  let link = document.querySelector('a');
  link.style.color = 'orange';
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>The result should be:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/yellow-links/solution/"" style=""height:180px""></iframe>
</div><p><a data-plunk-id=""GFHTmQn3BqqRzk20"" href=""https://plnkr.co/edit/GFHTmQn3BqqRzk20?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>First, we need to find all external references.</p>
<p>There are two ways.</p>
<p>The first is to find all links using <code>document.querySelectorAll('a')</code> and then filter out what we need:</p>
<div class=""code-example"" data-highlight='[{""start"":3,""end"":3}]' data-trusted=""1"" id=""vtmjer6pk6"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let links = document.querySelectorAll('a');

for (let link of links) {
  let href = link.getAttribute('href');
  if (!href) continue; // no attribute

  if (!href.includes('://')) continue; // no protocol

  if (href.startsWith('http://internal.com')) continue; // internal

  link.style.color = 'orange';
}</code></pre>
</div>
</div>
</div><p>Please note: we use <code>link.getAttribute('href')</code>. Not <code>link.href</code>, because we need the value from HTML.</p>
<p>…Another, simpler way would be to add the checks to CSS selector:</p>
<div class=""code-example"" data-trusted=""1"" id=""8h7vsu6dnk"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// look for all links that have :// in href
// but href doesn't start with http://internal.com
let selector = 'a[href*=""://""]:not([href^=""http://internal.com""])';
let links = document.querySelectorAll(selector);

links.forEach(link =&gt; link.style.color = 'orange');</code></pre>
</div>
</div>
</div><p><a data-plunk-id=""rWNJkuV9eAtLnyBL"" href=""https://plnkr.co/edit/rWNJkuV9eAtLnyBL?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
Modifying the document,"<h1 class=""main__header-title"">Modifying the document</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Modifying the document"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>DOM modification is the key to creating “live” pages.</p>
<p>Here we’ll see how to create new elements “on the fly” and modify the existing page content.</p>
<h2><a class=""main__anchor"" href=""#example-show-a-message"" name=""example-show-a-message"">Example: show a message</a></h2><p>Let’s demonstrate using an example. We’ll add a message on the page that looks nicer than <code>alert</code>.</p>
<p>Here’s how it will look:</p>
<div class=""code-example"" data-autorun=""true"" data-demo-height=""80"" data-highlight='[{""start"":10,""end"":12}]' data-trusted=""1"" id=""62gpm9qnvj"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;div class=""alert""&gt;
  &lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.
&lt;/div&gt;</code></pre>
</div>
</div>
<div class=""code-result code-example__result"">
<iframe class=""code-result__iframe"" name=""test-62gpm9qnvj"" src=""about:blank"" style=""height:80px""></iframe>
</div>
</div><p>That was the HTML example. Now let’s create the same <code>div</code> with JavaScript (assuming that the styles are in the HTML/CSS already).</p>
<h2><a class=""main__anchor"" href=""#creating-an-element"" name=""creating-an-element"">Creating an element</a></h2><p>To create DOM nodes, there are two methods:</p>
<dl>
<dt><code>document.createElement(tag)</code></dt>
<dd>
<p>Creates a new <em>element node</em> with the given tag:</p>
<div class=""code-example"" data-trusted=""1"" id=""l3camrudxh"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let div = document.createElement('div');</code></pre>
</div>
</div>
</div></dd>
<dt><code>document.createTextNode(text)</code></dt>
<dd>
<p>Creates a new <em>text node</em> with the given text:</p>
<div class=""code-example"" data-trusted=""1"" id=""elll94ous3"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let textNode = document.createTextNode('Here I am');</code></pre>
</div>
</div>
</div></dd>
</dl>
<p>Most of the time we need to create element nodes, such as the <code>div</code> for the message.</p>
<h3><a class=""main__anchor"" href=""#creating-the-message"" name=""creating-the-message"">Creating the message</a></h3><p>Creating the message div takes 3 steps:</p>
<div class=""code-example"" data-trusted=""1"" id=""t8s3bs3sat"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// 1. Create &lt;div&gt; element
let div = document.createElement('div');

// 2. Set its class to ""alert""
div.className = ""alert"";

// 3. Fill it with the content
div.innerHTML = ""&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message."";</code></pre>
</div>
</div>
</div><p>We’ve created the element. But as of now it’s only in a variable named <code>div</code>, not in the page yet. So we can’t see it.</p>
<h2><a class=""main__anchor"" href=""#insertion-methods"" name=""insertion-methods"">Insertion methods</a></h2><p>To make the <code>div</code> show up, we need to insert it somewhere into <code>document</code>. For instance, into <code>&lt;body&gt;</code> element, referenced by <code>document.body</code>.</p>
<p>There’s a special method <code>append</code> for that: <code>document.body.append(div)</code>.</p>
<p>Here’s the full code:</p>
<div class=""code-example"" data-demo-height=""80"" data-highlight='[{""start"":15,""end"":15}]' data-trusted=""1"" id=""a7ktobdcox"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  let div = document.createElement('div');
  div.className = ""alert"";
  div.innerHTML = ""&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message."";

  document.body.append(div);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Here we called <code>append</code> on <code>document.body</code>, but we can call <code>append</code> method on any other element, to put another element into it. For instance, we can append something to <code>&lt;div&gt;</code> by calling <code>div.append(anotherElement)</code>.</p>
<p>Here are more insertion methods, they specify different places where to insert:</p>
<ul>
<li><code>node.append(...nodes or strings)</code> – append nodes or strings <em>at the end</em> of <code>node</code>,</li>
<li><code>node.prepend(...nodes or strings)</code> – insert nodes or strings <em>at the beginning</em> of <code>node</code>,</li>
<li><code>node.before(...nodes or strings)</code> –- insert nodes or strings <em>before</em> <code>node</code>,</li>
<li><code>node.after(...nodes or strings)</code> –- insert nodes or strings <em>after</em> <code>node</code>,</li>
<li><code>node.replaceWith(...nodes or strings)</code> –- replaces <code>node</code> with the given nodes or strings.</li>
</ul>
<p>Arguments of these methods are an arbitrary list of DOM nodes to insert, or text strings (that become text nodes automatically).</p>
<p>Let’s see them in action.</p>
<p>Here’s an example of using these methods to add items to a list and the text before/after it:</p>
<div class=""code-example"" data-autorun=""true"" data-trusted=""1"" id=""rz3srkmu19"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ol id=""ol""&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
  ol.before('before'); // insert string ""before"" before &lt;ol&gt;
  ol.after('after'); // insert string ""after"" after &lt;ol&gt;

  let liFirst = document.createElement('li');
  liFirst.innerHTML = 'prepend';
  ol.prepend(liFirst); // insert liFirst at the beginning of &lt;ol&gt;

  let liLast = document.createElement('li');
  liLast.innerHTML = 'append';
  ol.append(liLast); // insert liLast at the end of &lt;ol&gt;
&lt;/script&gt;</code></pre>
</div>
</div>
<div class=""code-result code-example__result"">
<iframe class=""code-result__iframe"" name=""test-rz3srkmu19"" src=""about:blank"" style=""height:200px""></iframe>
</div>
</div><p>Here’s a visual picture of what the methods do:</p>
<figure><div class=""image"" style=""width:409px"">
<div class=""image__ratio"" style=""padding-top:49.63325183374083%""></div>
<object class=""image__image"" data=""/article/modifying-document/before-prepend-append-after.svg"" data-use-theme="""" height=""203"" type=""image/svg+xml"" width=""409"">
<img alt="""" height=""203"" src=""https://javascript.info/article/modifying-document/before-prepend-append-after.svg"" width=""409""/>
</object>
</div></figure><p>So the final list will be:</p>
<div class=""code-example"" data-trusted=""1"" id=""oc3jn8wmbh"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>before
&lt;ol id=""ol""&gt;
  &lt;li&gt;prepend&lt;/li&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;append&lt;/li&gt;
&lt;/ol&gt;
after</code></pre>
</div>
</div>
</div><p>As said, these methods can insert multiple nodes and text pieces in a single call.</p>
<p>For instance, here a string and an element are inserted:</p>
<div class=""code-example"" data-trusted=""1"" id=""17hfu8ubrd"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""div""&gt;&lt;/div&gt;
&lt;script&gt;
  div.before('&lt;p&gt;Hello&lt;/p&gt;', document.createElement('hr'));
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Please note: the text is inserted “as text”, not “as HTML”, with proper escaping of characters such as <code>&lt;</code>, <code>&gt;</code>.</p>
<p>So the final HTML is:</p>
<div class=""code-example"" data-highlight='[{""start"":0,""end"":0}]' data-trusted=""1"" id=""1zcq8ens6b"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
&lt;hr&gt;
&lt;div id=""div""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</div><p>In other words, strings are inserted in a safe way, like <code>elem.textContent</code> does it.</p>
<p>So, these methods can only be used to insert DOM nodes or text pieces.</p>
<p>But what if we’d like to insert an HTML string “as html”, with all tags and stuff working, in the same manner as <code>elem.innerHTML</code> does it?</p>
<h2><a class=""main__anchor"" href=""#insertadjacenthtml-text-element"" name=""insertadjacenthtml-text-element"">insertAdjacentHTML/Text/Element</a></h2><p>For that we can use another, pretty versatile method: <code>elem.insertAdjacentHTML(where, html)</code>.</p>
<p>The first parameter is a code word, specifying where to insert relative to <code>elem</code>. Must be one of the following:</p>
<ul>
<li><code>""beforebegin""</code> – insert <code>html</code> immediately before <code>elem</code>,</li>
<li><code>""afterbegin""</code> – insert <code>html</code> into <code>elem</code>, at the beginning,</li>
<li><code>""beforeend""</code> – insert <code>html</code> into <code>elem</code>, at the end,</li>
<li><code>""afterend""</code> – insert <code>html</code> immediately after <code>elem</code>.</li>
</ul>
<p>The second parameter is an HTML string, that is inserted “as HTML”.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""lizeqnbrhq"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""div""&gt;&lt;/div&gt;
&lt;script&gt;
  div.insertAdjacentHTML('beforebegin', '&lt;p&gt;Hello&lt;/p&gt;');
  div.insertAdjacentHTML('afterend', '&lt;p&gt;Bye&lt;/p&gt;');
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>…Would lead to:</p>
<div class=""code-example"" data-trusted=""1"" id=""n4j2674v09"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;p&gt;Hello&lt;/p&gt;
&lt;div id=""div""&gt;&lt;/div&gt;
&lt;p&gt;Bye&lt;/p&gt;</code></pre>
</div>
</div>
</div><p>That’s how we can append arbitrary HTML to the page.</p>
<p>Here’s the picture of insertion variants:</p>
<figure><div class=""image"" style=""width:409px"">
<div class=""image__ratio"" style=""padding-top:49.63325183374083%""></div>
<object class=""image__image"" data=""/article/modifying-document/insert-adjacent.svg"" data-use-theme="""" height=""203"" type=""image/svg+xml"" width=""409"">
<img alt="""" height=""203"" src=""https://javascript.info/article/modifying-document/insert-adjacent.svg"" width=""409""/>
</object>
</div></figure><p>We can easily notice similarities between this and the previous picture. The insertion points are actually the same, but this method inserts HTML.</p>
<p>The method has two brothers:</p>
<ul>
<li><code>elem.insertAdjacentText(where, text)</code> – the same syntax, but a string of <code>text</code> is inserted “as text” instead of HTML,</li>
<li><code>elem.insertAdjacentElement(where, elem)</code> – the same syntax, but inserts an element.</li>
</ul>
<p>They exist mainly to make the syntax “uniform”. In practice, only <code>insertAdjacentHTML</code> is used most of the time. Because for elements and text, we have methods <code>append/prepend/before/after</code> – they are shorter to write and can insert nodes/text pieces.</p>
<p>So here’s an alternative variant of showing a message:</p>
<div class=""code-example"" data-trusted=""1"" id=""rff2jbg7h7"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  document.body.insertAdjacentHTML(""afterbegin"", `&lt;div class=""alert""&gt;
    &lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.
  &lt;/div&gt;`);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#node-removal"" name=""node-removal"">Node removal</a></h2><p>To remove a node, there’s a method <code>node.remove()</code>.</p>
<p>Let’s make our message disappear after a second:</p>
<div class=""code-example"" data-highlight='[{""start"":16,""end"":16}]' data-trusted=""0"" id=""jgc6af7foa"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;script&gt;
  let div = document.createElement('div');
  div.className = ""alert"";
  div.innerHTML = ""&lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message."";

  document.body.append(div);
  setTimeout(() =&gt; div.remove(), 1000);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Please note: if we want to <em>move</em> an element to another place – there’s no need to remove it from the old one.</p>
<p><strong>All insertion methods automatically remove the node from the old place.</strong></p>
<p>For instance, let’s swap elements:</p>
<div class=""code-example"" data-demo-height=""50"" data-trusted=""1"" id=""nq8ynmqjmu"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""first""&gt;First&lt;/div&gt;
&lt;div id=""second""&gt;Second&lt;/div&gt;
&lt;script&gt;
  // no need to call remove
  second.after(first); // take #second and after it insert #first
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#cloning-nodes-clonenode"" name=""cloning-nodes-clonenode"">Cloning nodes: cloneNode</a></h2><p>How to insert one more similar message?</p>
<p>We could make a function and put the code there. But the alternative way would be to <em>clone</em> the existing <code>div</code> and modify the text inside it (if needed).</p>
<p>Sometimes when we have a big element, that may be faster and simpler.</p>
<ul>
<li>The call <code>elem.cloneNode(true)</code> creates a “deep” clone of the element – with all attributes and subelements. If we call <code>elem.cloneNode(false)</code>, then the clone is made without child elements.</li>
</ul>
<p>An example of copying the message:</p>
<div class=""code-example"" data-demo-height=""120"" data-highlight='[{""start"":15,""end"":18}]' data-trusted=""1"" id=""63qflkncbt"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;style&gt;
.alert {
  padding: 15px;
  border: 1px solid #d6e9c6;
  border-radius: 4px;
  color: #3c763d;
  background-color: #dff0d8;
}
&lt;/style&gt;

&lt;div class=""alert"" id=""div""&gt;
  &lt;strong&gt;Hi there!&lt;/strong&gt; You've read an important message.
&lt;/div&gt;

&lt;script&gt;
  let div2 = div.cloneNode(true); // clone the message
  div2.querySelector('strong').innerHTML = 'Bye there!'; // change the clone

  div.after(div2); // show the clone after the existing div
&lt;/script&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#document-fragment"" name=""document-fragment"">DocumentFragment</a></h2><p><code>DocumentFragment</code> is a special DOM node that serves as a wrapper to pass around lists of nodes.</p>
<p>We can append other nodes to it, but when we insert it somewhere, then its content is inserted instead.</p>
<p>For example, <code>getListContent</code> below generates a fragment with <code>&lt;li&gt;</code> items, that are later inserted into <code>&lt;ul&gt;</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":15,""end"":15}]' data-trusted=""1"" id=""dtvh4snrqe"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ul id=""ul""&gt;&lt;/ul&gt;

&lt;script&gt;
function getListContent() {
  let fragment = new DocumentFragment();

  for(let i=1; i&lt;=3; i++) {
    let li = document.createElement('li');
    li.append(i);
    fragment.append(li);
  }

  return fragment;
}

ul.append(getListContent()); // (*)
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>Please note, at the last line <code>(*)</code> we append <code>DocumentFragment</code>, but it “blends in”, so the resulting structure will be:</p>
<div class=""code-example"" data-trusted=""1"" id=""0bg26ue0ig"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ul&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;3&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</div>
</div>
</div><p><code>DocumentFragment</code> is rarely used explicitly. Why append to a special kind of node, if we can return an array of nodes instead? Rewritten example:</p>
<div class=""code-example"" data-highlight='[{""start"":15,""end"":15}]' data-trusted=""1"" id=""89w9iik0pk"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ul id=""ul""&gt;&lt;/ul&gt;

&lt;script&gt;
function getListContent() {
  let result = [];

  for(let i=1; i&lt;=3; i++) {
    let li = document.createElement('li');
    li.append(i);
    result.push(li);
  }

  return result;
}

ul.append(...getListContent()); // append + ""..."" operator = friends!
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>We mention <code>DocumentFragment</code> mainly because there are some concepts on top of it, like <a href=""https://javascript.info/template-element"">template</a> element, that we’ll cover much later.</p>
<h2><a class=""main__anchor"" href=""#old-school-insert-remove-methods"" name=""old-school-insert-remove-methods"">Old-school insert/remove methods</a></h2><div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Old school</span></div>
<div class=""important__content"">
            This information helps to understand old scripts, but not needed for new development.
            </div></div>
<p>There are also “old school” DOM manipulation methods, existing for historical reasons.</p>
<p>These methods come from really ancient times. Nowadays, there’s no reason to use them, as modern methods, such as <code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code>, <code>remove</code>, <code>replaceWith</code>, are more flexible.</p>
<p>The only reason we list these methods here is that you can find them in many old scripts:</p>
<dl>
<dt><code>parentElem.appendChild(node)</code></dt>
<dd>
<p>Appends <code>node</code> as the last child of <code>parentElem</code>.</p>
<p>The following example adds a new <code>&lt;li&gt;</code> to the end of <code>&lt;ol&gt;</code>:</p>
<div class=""code-example"" data-demo-height=""100"" data-trusted=""1"" id=""8r0vooa6j0"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ol id=""list""&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
  let newLi = document.createElement('li');
  newLi.innerHTML = 'Hello, world!';

  list.appendChild(newLi);
&lt;/script&gt;</code></pre>
</div>
</div>
</div></dd>
<dt><code>parentElem.insertBefore(node, nextSibling)</code></dt>
<dd>
<p>Inserts <code>node</code> before <code>nextSibling</code> into <code>parentElem</code>.</p>
<p>The following code inserts a new list item before the second <code>&lt;li&gt;</code>:</p>
<div class=""code-example"" data-demo-height=""100"" data-highlight='[{""start"":9,""end"":9}]' data-trusted=""1"" id=""krbzwzvwmn"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ol id=""list""&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;
&lt;script&gt;
  let newLi = document.createElement('li');
  newLi.innerHTML = 'Hello, world!';

  list.insertBefore(newLi, list.children[1]);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>To insert <code>newLi</code> as the first element, we can do it like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""1ikb36xgm6"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>list.insertBefore(newLi, list.firstChild);</code></pre>
</div>
</div>
</div></dd>
<dt><code>parentElem.replaceChild(node, oldChild)</code></dt>
<dd>
<p>Replaces <code>oldChild</code> with <code>node</code> among children of <code>parentElem</code>.</p>
</dd>
<dt><code>parentElem.removeChild(node)</code></dt>
<dd>
<p>Removes <code>node</code> from <code>parentElem</code> (assuming <code>node</code> is its child).</p>
<p>The following example removes first <code>&lt;li&gt;</code> from <code>&lt;ol&gt;</code>:</p>
<div class=""code-example"" data-demo-height=""100"" data-trusted=""1"" id=""ikwxztuhxg"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ol id=""list""&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
  let li = list.firstElementChild;
  list.removeChild(li);
&lt;/script&gt;</code></pre>
</div>
</div>
</div></dd>
</dl>
<p>All these methods return the inserted/removed node. In other words, <code>parentElem.appendChild(node)</code> returns <code>node</code>. But usually the returned value is not used, we just run the method.</p>
<h2><a class=""main__anchor"" href=""#a-word-about-document-write"" name=""a-word-about-document-write"">A word about “document.write”</a></h2><p>There’s one more, very ancient method of adding something to a web-page: <code>document.write</code>.</p>
<p>The syntax:</p>
<div class=""code-example"" data-highlight='[{""start"":1,""end"":3}]' data-trusted=""1"" id=""9hi6jqiovi"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;p&gt;Somewhere in the page...&lt;/p&gt;
&lt;script&gt;
  document.write('&lt;b&gt;Hello from JS&lt;/b&gt;');
&lt;/script&gt;
&lt;p&gt;The end&lt;/p&gt;</code></pre>
</div>
</div>
</div><p>The call to <code>document.write(html)</code> writes the <code>html</code> into page “right here and now”. The <code>html</code> string can be dynamically generated, so it’s kind of flexible. We can use JavaScript to create a full-fledged webpage and write it.</p>
<p>The method comes from times when there was no DOM, no standards… Really old times. It still lives, because there are scripts using it.</p>
<p>In modern scripts we can rarely see it, because of the following important limitation:</p>
<p><strong>The call to <code>document.write</code> only works while the page is loading.</strong></p>
<p>If we call it afterwards, the existing document content is erased.</p>
<p>For instance:</p>
<div class=""code-example"" data-highlight='[{""start"":1,""end"":5}]' data-trusted=""1"" id=""3nak37i670"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;p&gt;After one second the contents of this page will be replaced...&lt;/p&gt;
&lt;script&gt;
  // document.write after 1 second
  // that's after the page loaded, so it erases the existing content
  setTimeout(() =&gt; document.write('&lt;b&gt;...By this.&lt;/b&gt;'), 1000);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>So it’s kind of unusable at “after loaded” stage, unlike other DOM methods we covered above.</p>
<p>That’s the downside.</p>
<p>There’s an upside also. Technically, when <code>document.write</code> is called while the browser is reading (“parsing”) incoming HTML, and it writes something, the browser consumes it just as if it were initially there, in the HTML text.</p>
<p>So it works blazingly fast, because there’s <em>no DOM modification</em> involved. It writes directly into the page text, while the DOM is not yet built.</p>
<p>So if we need to add a lot of text into HTML dynamically, and we’re at page loading phase, and the speed matters, it may help. But in practice these requirements rarely come together. And usually we can see this method in scripts just because they are old.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><ul>
<li>
<p>Methods to create new nodes:</p>
<ul>
<li><code>document.createElement(tag)</code> – creates an element with the given tag,</li>
<li><code>document.createTextNode(value)</code> – creates a text node (rarely used),</li>
<li><code>elem.cloneNode(deep)</code> – clones the element, if <code>deep==true</code> then with all descendants.</li>
</ul>
</li>
<li>
<p>Insertion and removal:</p>
<ul>
<li><code>node.append(...nodes or strings)</code> – insert into <code>node</code>, at the end,</li>
<li><code>node.prepend(...nodes or strings)</code> – insert into <code>node</code>, at the beginning,</li>
<li><code>node.before(...nodes or strings)</code> –- insert right before <code>node</code>,</li>
<li><code>node.after(...nodes or strings)</code> –- insert right after <code>node</code>,</li>
<li><code>node.replaceWith(...nodes or strings)</code> –- replace <code>node</code>.</li>
<li><code>node.remove()</code> –- remove the <code>node</code>.</li>
</ul>
<p>Text strings are inserted “as text”.</p>
</li>
<li>
<p>There are also “old school” methods:</p>
<ul>
<li><code>parent.appendChild(node)</code></li>
<li><code>parent.insertBefore(node, nextSibling)</code></li>
<li><code>parent.removeChild(node)</code></li>
<li><code>parent.replaceChild(newElem, node)</code></li>
</ul>
<p>All these methods return <code>node</code>.</p>
</li>
<li>
<p>Given some HTML in <code>html</code>, <code>elem.insertAdjacentHTML(where, html)</code> inserts it depending on the value of <code>where</code>:</p>
<ul>
<li><code>""beforebegin""</code> – insert <code>html</code> right before <code>elem</code>,</li>
<li><code>""afterbegin""</code> – insert <code>html</code> into <code>elem</code>, at the beginning,</li>
<li><code>""beforeend""</code> – insert <code>html</code> into <code>elem</code>, at the end,</li>
<li><code>""afterend""</code> – insert <code>html</code> right after <code>elem</code>.</li>
</ul>
<p>Also there are similar methods, <code>elem.insertAdjacentText</code> and <code>elem.insertAdjacentElement</code>, that insert text strings and elements, but they are rarely used.</p>
</li>
<li>
<p>To append HTML to the page before it has finished loading:</p>
<ul>
<li><code>document.write(html)</code></li>
</ul>
<p>After the page is loaded such a call erases the document. Mostly seen in old scripts.</p>
</li>
</ul>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#createtextnode-vs-innerhtml-vs-textcontent"" name=""createtextnode-vs-innerhtml-vs-textcontent"">createTextNode vs innerHTML vs textContent</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/createtextnode-vs-innerhtml"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>We have an empty DOM element <code>elem</code> and a string <code>text</code>.</p>
<p>Which of these 3 commands will do exactly the same?</p>
<ol>
<li><code>elem.append(document.createTextNode(text))</code></li>
<li><code>elem.innerHTML = text</code></li>
<li><code>elem.textContent = text</code></li>
</ol>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>Answer: <strong>1 and 3</strong>.</p>
<p>Both commands result in adding the <code>text</code> “as text” into the <code>elem</code>.</p>
<p>Here’s an example:</p>
<div class=""code-example"" data-demo-height=""80"" data-trusted=""1"" id=""v4e67tqd6h"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""elem1""&gt;&lt;/div&gt;
&lt;div id=""elem2""&gt;&lt;/div&gt;
&lt;div id=""elem3""&gt;&lt;/div&gt;
&lt;script&gt;
  let text = '&lt;b&gt;text&lt;/b&gt;';

  elem1.append(document.createTextNode(text));
  elem2.innerHTML = text;
  elem3.textContent = text;
&lt;/script&gt;</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#clear-the-element"" name=""clear-the-element"">Clear the element</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/clear-elem"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Create a function <code>clear(elem)</code> that removes everything from the element.</p>
<div class=""code-example"" data-demo-height=""60"" data-trusted=""1"" id=""nm1m7n7pl5"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ol id=""elem""&gt;
  &lt;li&gt;Hello&lt;/li&gt;
  &lt;li&gt;World&lt;/li&gt;
&lt;/ol&gt;

&lt;script&gt;
  function clear(elem) { /* your code */ }

  clear(elem); // clears the list
&lt;/script&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>First, let’s see how <em>not</em> to do it:</p>
<div class=""code-example"" data-trusted=""1"" id=""qk89i3ma48"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function clear(elem) {
  for (let i=0; i &lt; elem.childNodes.length; i++) {
      elem.childNodes[i].remove();
  }
}</code></pre>
</div>
</div>
</div><p>That won’t work, because the call to <code>remove()</code> shifts the collection <code>elem.childNodes</code>, so elements start from the index <code>0</code> every time. But <code>i</code> increases, and some elements will be skipped.</p>
<p>The <code>for..of</code> loop also does the same.</p>
<p>The right variant could be:</p>
<div class=""code-example"" data-trusted=""1"" id=""nfjxsm24ix"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function clear(elem) {
  while (elem.firstChild) {
    elem.firstChild.remove();
  }
}</code></pre>
</div>
</div>
</div><p>And also there’s a simpler way to do the same:</p>
<div class=""code-example"" data-trusted=""1"" id=""of73agz3ww"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function clear(elem) {
  elem.innerHTML = '';
}</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#why-does-aaa-remain"" name=""why-does-aaa-remain"">Why does ""aaa"" remain?</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/why-aaa"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 1</span></div><div class=""task__content""><div class=""task__formatted""><p>In the example below, the call <code>table.remove()</code> removes the table from the document.</p>
<p>But if you run it, you can see that the text <code>""aaa""</code> is still visible.</p>
<p>Why does that happen?</p>
<div class=""code-example"" data-demo-height=""100"" data-trusted=""1"" id=""96ji0q59gj"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;table id=""table""&gt;
  aaa
  &lt;tr&gt;
    &lt;td&gt;Test&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;script&gt;
  alert(table); // the table, as it should be

  table.remove();
  // why there's still ""aaa"" in the document?
&lt;/script&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The HTML in the task is incorrect. That’s the reason of the odd thing.</p>
<p>The browser has to fix it automatically. But there may be no text inside the <code>&lt;table&gt;</code>: according to the spec only table-specific tags are allowed. So the browser shows <code>""aaa""</code> <em>before</em> the <code>&lt;table&gt;</code>.</p>
<p>Now it’s obvious that when we remove the table, it remains.</p>
<p>The question can be easily answered by exploring the DOM using the browser tools. You’ll see <code>""aaa""</code> before the <code>&lt;table&gt;</code>.</p>
<p>The HTML standard specifies in detail how to process bad HTML, and such behavior of the browser is correct.</p>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#create-a-list"" name=""create-a-list"">Create a list</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/create-list"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 4</span></div><div class=""task__content""><div class=""task__formatted""><p>Write an interface to create a list from user input.</p>
<p>For every list item:</p>
<ol>
<li>Ask a user about its content using <code>prompt</code>.</li>
<li>Create the <code>&lt;li&gt;</code> with it and add it to <code>&lt;ul&gt;</code>.</li>
<li>Continue until the user cancels the input (by pressing <kbd class=""shortcut"">Esc</kbd> or via an empty entry).</li>
</ol>
<p>All elements should be created dynamically.</p>
<p>If a user types HTML-tags, they should be treated like a text.</p>
<p><a href=""https://en.js.cx/task/create-list/solution/"" target=""blank"">Demo in new window</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>Please note the usage of <code>textContent</code> to assign the <code>&lt;li&gt;</code> content.</p>
<p><a data-plunk-id=""bAZIwCiBujwcXu10"" href=""https://plnkr.co/edit/bAZIwCiBujwcXu10?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#create-a-tree-from-the-object"" name=""create-a-tree-from-the-object"">Create a tree from the object</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/create-object-tree"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Write a function <code>createTree</code> that creates a nested <code>ul/li</code> list from the nested object.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""tyf44lla6n"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let data = {
  ""Fish"": {
    ""trout"": {},
    ""salmon"": {}
  },

  ""Tree"": {
    ""Huge"": {
      ""sequoia"": {},
      ""oak"": {}
    },
    ""Flowering"": {
      ""apple tree"": {},
      ""magnolia"": {}
    }
  }
};</code></pre>
</div>
</div>
</div><p>The syntax:</p>
<div class=""code-example"" data-highlight='[{""start"":1,""end"":1}]' data-trusted=""1"" id=""9avmo6m2a8"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let container = document.getElementById('container');
createTree(container, data); // creates the tree in the container</code></pre>
</div>
</div>
</div><p>The result (tree) should look like this:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/create-object-tree/build-tree-dom/"" style=""height:300px""></iframe>
</div><p>Choose one of two ways of solving this task:</p>
<ol>
<li>Create the HTML for the tree and then assign to <code>container.innerHTML</code>.</li>
<li>Create tree nodes and append with DOM methods.</li>
</ol>
<p>Would be great if you could do both.</p>
<p>P.S. The tree should not have “extra” elements like empty <code>&lt;ul&gt;&lt;/ul&gt;</code> for the leaves.</p>
<p><a data-plunk-id=""5xY7BNtzpnesXE9G"" href=""https://plnkr.co/edit/5xY7BNtzpnesXE9G?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The easiest way to walk the object is to use recursion.</p>
<ol>
<li><a href=""https://plnkr.co/edit/bmBB6yUI0hNUgo5Z?p=preview"">The solution with innerHTML</a>.</li>
<li><a href=""https://plnkr.co/edit/x2nHmQx5Y7I2ZYfc?p=preview"">The solution with DOM</a>.</li>
</ol>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#show-descendants-in-a-tree"" name=""show-descendants-in-a-tree"">Show descendants in a tree</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/tree-count"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>There’s a tree organized as nested <code>ul/li</code>.</p>
<p>Write the code that adds to each <code>&lt;li&gt;</code> the number of its descendants. Skip leaves (nodes without children).</p>
<p>The result:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/tree-count/solution/"" style=""height:300px""></iframe>
</div><p><a data-plunk-id=""Bx4IuRtNjZsdSlL4"" href=""https://plnkr.co/edit/Bx4IuRtNjZsdSlL4?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>To append text to each <code>&lt;li&gt;</code> we can alter the text node <code>data</code>.</p>
<p><a data-plunk-id=""Pg2rtiS97CJnJcSZ"" href=""https://plnkr.co/edit/Pg2rtiS97CJnJcSZ?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#create-a-calendar"" name=""create-a-calendar"">Create a calendar</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/calendar-table"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 4</span></div><div class=""task__content""><div class=""task__formatted""><p>Write a function <code>createCalendar(elem, year, month)</code>.</p>
<p>The call should create a calendar for the given year/month and put it inside <code>elem</code>.</p>
<p>The calendar should be a table, where a week is <code>&lt;tr&gt;</code>, and a day is <code>&lt;td&gt;</code>. The table top should be <code>&lt;th&gt;</code> with weekday names: the first day should be Monday, and so on till Sunday.</p>
<p>For instance, <code>createCalendar(cal, 2012, 9)</code> should generate in element <code>cal</code> the following calendar:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/calendar-table/solution/"" style=""height:210px""></iframe>
</div><p>P.S. For this task it’s enough to generate the calendar, should not yet be clickable.</p>
<p><a data-plunk-id=""BHBpmm3GWGXtQwzZ"" href=""https://plnkr.co/edit/BHBpmm3GWGXtQwzZ?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>We’ll create the table as a string: <code>""&lt;table&gt;...&lt;/table&gt;""</code>, and then assign it to  <code>innerHTML</code>.</p>
<p>The algorithm:</p>
<ol>
<li>Create the table header with <code>&lt;th&gt;</code> and weekday names.</li>
<li>Create the date object <code>d = new Date(year, month-1)</code>. That’s the first day of <code>month</code> (taking into account that months in JavaScript start from <code>0</code>, not <code>1</code>).</li>
<li>First few cells till the first day of the month <code>d.getDay()</code> may be empty. Let’s fill them in with <code>&lt;td&gt;&lt;/td&gt;</code>.</li>
<li>Increase the day in <code>d</code>: <code>d.setDate(d.getDate()+1)</code>. If <code>d.getMonth()</code> is not yet the next month, then add the new cell <code>&lt;td&gt;</code> to the calendar. If that’s a Sunday, then add a newline <code>“&lt;/tr&gt;&lt;tr&gt;”</code>.</li>
<li>If the month has finished, but the table row is not yet full, add empty <code>&lt;td&gt;</code> into it, to make it square.</li>
</ol>
<p><a data-plunk-id=""pQhTkBrLvNivzIsr"" href=""https://plnkr.co/edit/pQhTkBrLvNivzIsr?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#colored-clock-with-setinterval"" name=""colored-clock-with-setinterval"">Colored clock with setInterval</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/clock-setinterval"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 4</span></div><div class=""task__content""><div class=""task__formatted""><p>Create a colored clock like here:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/clock-setinterval/solution/"" style=""height:60px""></iframe>
</div><p>Use HTML/CSS for the styling, JavaScript only updates time in elements.</p>
<p><a data-plunk-id=""PyMPZ25dkjoDSxCc"" href=""https://plnkr.co/edit/PyMPZ25dkjoDSxCc?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>First, let’s make HTML/CSS.</p>
<p>Each component of the time would look great in its own <code>&lt;span&gt;</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""iq49lbkz3k"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""clock""&gt;
  &lt;span class=""hour""&gt;hh&lt;/span&gt;:&lt;span class=""min""&gt;mm&lt;/span&gt;:&lt;span class=""sec""&gt;ss&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</div><p>Also we’ll need CSS to color them.</p>
<p>The <code>update</code> function will refresh the clock, to be called by <code>setInterval</code> every second:</p>
<div class=""code-example"" data-highlight='[{""start"":2,""end"":2}]' data-trusted=""1"" id=""d8uy5q5t4z"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function update() {
  let clock = document.getElementById('clock');
  let date = new Date(); // (*)
  let hours = date.getHours();
  if (hours &lt; 10) hours = '0' + hours;
  clock.children[0].innerHTML = hours;

  let minutes = date.getMinutes();
  if (minutes &lt; 10) minutes = '0' + minutes;
  clock.children[1].innerHTML = minutes;

  let seconds = date.getSeconds();
  if (seconds &lt; 10) seconds = '0' + seconds;
  clock.children[2].innerHTML = seconds;
}</code></pre>
</div>
</div>
</div><p>In the line <code>(*)</code> we every time check the current date. The calls to <code>setInterval</code> are not reliable: they may happen with delays.</p>
<p>The clock-managing functions:</p>
<div class=""code-example"" data-trusted=""1"" id=""tvrwi3wkld"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let timerId;

function clockStart() { // run the clock
  if (!timerId) { // only set a new interval if the clock is not running
    timerId = setInterval(update, 1000);
  }
  update(); // (*)
}

function clockStop() {
  clearInterval(timerId);
  timerId = null; // (**)
}</code></pre>
</div>
</div>
</div><p>Please note that the call to <code>update()</code> is not only scheduled in <code>clockStart()</code>, but immediately run in the line <code>(*)</code>. Otherwise the visitor would have to wait till the first execution of <code>setInterval</code>. And the clock would be empty till then.</p>
<p>Also it is important to set a new interval in <code>clockStart()</code> only when the clock is not running. Otherways clicking the start button several times would set multiple concurrent intervals. Even worse – we would only keep the <code>timerID</code> of the last interval, losing references to all others. Then we wouldn’t be able to stop the clock ever again! Note that we need to clear the <code>timerID</code> when the clock is stopped in the line <code>(**)</code>, so that it can be started again by running <code>clockStart()</code>.</p>
<p><a data-plunk-id=""aiyWmre5PQMMZY17"" href=""https://plnkr.co/edit/aiyWmre5PQMMZY17?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#insert-the-html-in-the-list"" name=""insert-the-html-in-the-list"">Insert the HTML in the list</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/append-to-list"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Write the code to insert <code>&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;</code> between two <code>&lt;li&gt;</code> here:</p>
<div class=""code-example"" data-trusted=""1"" id=""jhtxacfo8y"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;ul id=""ul""&gt;
  &lt;li id=""one""&gt;1&lt;/li&gt;
  &lt;li id=""two""&gt;4&lt;/li&gt;
&lt;/ul&gt;</code></pre>
</div>
</div>
</div></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>When we need to insert a piece of HTML somewhere, <code>insertAdjacentHTML</code> is the best fit.</p>
<p>The solution:</p>
<div class=""code-example"" data-trusted=""1"" id=""xeby0tnp22"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>one.insertAdjacentHTML('afterend', '&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;');</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#sort-the-table"" name=""sort-the-table"">Sort the table</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/sort-table"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>There’s a table:</p>
<div class=""code-example"" data-trusted=""1"" id=""0dnw1v2d1n"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Surname&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;John&lt;/td&gt;&lt;td&gt;Smith&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Pete&lt;/td&gt;&lt;td&gt;Brown&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Ann&lt;/td&gt;&lt;td&gt;Lee&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;...&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</div><p>There may be more rows in it.</p>
<p>Write the code to sort it by the <code>""name""</code> column.</p>
<p><a data-plunk-id=""qSFrxgowhbl63ydm"" href=""https://plnkr.co/edit/qSFrxgowhbl63ydm?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The solution is short, yet may look a bit tricky, so here I provide it with extensive comments:</p>
<div class=""code-example"" data-trusted=""1"" id=""lgt14jstxx"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let sortedRows = Array.from(table.tBodies[0].rows) // 1
  .sort((rowA, rowB) =&gt; rowA.cells[0].innerHTML.localeCompare(rowB.cells[0].innerHTML));

table.tBodies[0].append(...sortedRows); // (3)</code></pre>
</div>
</div>
</div><p>The step-by-step algorthm:</p>
<ol>
<li>Get all <code>&lt;tr&gt;</code>, from <code>&lt;tbody&gt;</code>.</li>
<li>Then sort them comparing by the content of the first <code>&lt;td&gt;</code> (the name field).</li>
<li>Now insert nodes in the right order by <code>.append(...sortedRows)</code>.</li>
</ol>
<p>We don’t have to remove row elements, just “re-insert”, they leave the old place automatically.</p>
<p>P.S. In our case, there’s an explicit <code>&lt;tbody&gt;</code> in the table, but even if HTML table doesn’t have <code>&lt;tbody&gt;</code>, the DOM structure always has it.</p>
<p><a data-plunk-id=""Tjt2RzDKAANs96fF"" href=""https://plnkr.co/edit/Tjt2RzDKAANs96fF?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
Styles and classes,"<h1 class=""main__header-title"">Styles and classes</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Styles and classes"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>Before we get into JavaScript’s ways of dealing with styles and classes – here’s an important rule. Hopefully it’s obvious enough, but we still have to mention it.</p>
<p>There are generally two ways to style an element:</p>
<ol>
<li>Create a class in CSS and add it: <code>&lt;div class=""...""&gt;</code></li>
<li>Write properties directly into <code>style</code>: <code>&lt;div style=""...""&gt;</code>.</li>
</ol>
<p>JavaScript can modify both classes and <code>style</code> properties.</p>
<p>We should always prefer CSS classes to <code>style</code>. The latter should only be used if classes “can’t handle it”.</p>
<p>For example, <code>style</code> is acceptable if we calculate coordinates of an element dynamically and want to set them from JavaScript, like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""4nywlv2qqh"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let top = /* complex calculations */;
let left = /* complex calculations */;

elem.style.left = left; // e.g '123px', calculated at run-time
elem.style.top = top; // e.g '456px'</code></pre>
</div>
</div>
</div><p>For other cases, like making the text red, adding a background icon – describe that in CSS and then add the class (JavaScript can do that). That’s more flexible and easier to support.</p>
<h2><a class=""main__anchor"" href=""#classname-and-classlist"" name=""classname-and-classlist"">className and classList</a></h2><p>Changing a class is one of the most often used actions in scripts.</p>
<p>In the ancient time, there was a limitation in JavaScript: a reserved word like <code>""class""</code> could not be an object property. That limitation does not exist now, but at that time it was impossible to have a <code>""class""</code> property, like <code>elem.class</code>.</p>
<p>So for classes the similar-looking property <code>""className""</code> was introduced: the <code>elem.className</code> corresponds to the <code>""class""</code> attribute.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""eygk3x79qm"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body class=""main page""&gt;
  &lt;script&gt;
    alert(document.body.className); // main page
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>If we assign something to <code>elem.className</code>, it replaces the whole string of classes. Sometimes that’s what we need, but often we want to add/remove a single class.</p>
<p>There’s another property for that: <code>elem.classList</code>.</p>
<p>The <code>elem.classList</code> is a special object with methods to <code>add/remove/toggle</code> a single class.</p>
<p>For instance:</p>
<div class=""code-example"" data-highlight='[{""start"":2,""end"":3}]' data-trusted=""1"" id=""vchcnfqo4p"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body class=""main page""&gt;
  &lt;script&gt;
    // add a class
    document.body.classList.add('article');

    alert(document.body.className); // main page article
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>So we can operate both on the full class string using <code>className</code> or on individual classes using <code>classList</code>. What we choose depends on our needs.</p>
<p>Methods of <code>classList</code>:</p>
<ul>
<li><code>elem.classList.add/remove(""class"")</code> – adds/removes the class.</li>
<li><code>elem.classList.toggle(""class"")</code> – adds the class if it doesn’t exist, otherwise removes it.</li>
<li><code>elem.classList.contains(""class"")</code> – checks for the given class, returns <code>true/false</code>.</li>
</ul>
<p>Besides, <code>classList</code> is iterable, so we can list all classes with <code>for..of</code>, like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""53jllskm7m"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body class=""main page""&gt;
  &lt;script&gt;
    for (let name of document.body.classList) {
      alert(name); // main, and then page
    }
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#element-style"" name=""element-style"">Element style</a></h2><p>The property <code>elem.style</code> is an object that corresponds to what’s written in the <code>""style""</code> attribute. Setting <code>elem.style.width=""100px""</code> works the same as if we had in the attribute <code>style</code> a string <code>width:100px</code>.</p>
<p>For multi-word property the camelCase is used:</p>
<div class=""code-example"" data-trusted=""1"" id=""zahupxglbq"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>background-color  =&gt; elem.style.backgroundColor
z-index           =&gt; elem.style.zIndex
border-left-width =&gt; elem.style.borderLeftWidth</code></pre>
</div>
</div>
</div><p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""t6aeunic8k"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.style.backgroundColor = prompt('background color?', 'green');</code></pre>
</div>
</div>
</div><div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Prefixed properties</span></div>
<div class=""important__content""><p>Browser-prefixed properties like <code>-moz-border-radius</code>, <code>-webkit-border-radius</code> also follow the same rule: a dash means upper case.</p>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""2h3whap6pb"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>button.style.MozBorderRadius = '5px';
button.style.WebkitBorderRadius = '5px';</code></pre>
</div>
</div>
</div></div></div>
<h2><a class=""main__anchor"" href=""#resetting-the-style-property"" name=""resetting-the-style-property"">Resetting the style property</a></h2><p>Sometimes we want to assign a style property, and later remove it.</p>
<p>For instance, to hide an element, we can set <code>elem.style.display = ""none""</code>.</p>
<p>Then later we may want to remove the <code>style.display</code> as if it were not set. Instead of <code>delete elem.style.display</code> we should assign an empty string to it: <code>elem.style.display = """"</code>.</p>
<div class=""code-example"" data-trusted=""1"" id=""hbzxg0thhm"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// if we run this code, the &lt;body&gt; will blink
document.body.style.display = ""none""; // hide

setTimeout(() =&gt; document.body.style.display = """", 1000); // back to normal</code></pre>
</div>
</div>
</div><p>If we set <code>style.display</code> to an empty string, then the browser applies CSS classes and its built-in styles normally, as if there were no such <code>style.display</code> property at all.</p>
<p>Also there is a special method for that, <code>elem.style.removeProperty('style property')</code>. So, We can remove a property like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""bsps9itqpp"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>document.body.style.background = 'red'; //set background to red

setTimeout(() =&gt; document.body.style.removeProperty('background'), 1000); // remove background after 1 second</code></pre>
</div>
</div>
</div><div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Full rewrite with <code>style.cssText</code></span></div>
<div class=""important__content""><p>Normally, we use <code>style.*</code> to assign individual style properties. We can’t set the full style like <code>div.style=""color: red; width: 100px""</code>, because <code>div.style</code> is an object, and it’s read-only.</p>
<p>To set the full style as a string, there’s a special property <code>style.cssText</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""c7jlskinx9"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""div""&gt;Button&lt;/div&gt;

&lt;script&gt;
  // we can set special style flags like ""important"" here
  div.style.cssText=`color: red !important;
    background-color: yellow;
    width: 100px;
    text-align: center;
  `;

  alert(div.style.cssText);
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>This property is rarely used, because such assignment removes all existing styles: it does not add, but replaces them. May occasionally delete something needed. But we can safely use it for new elements, when we know we won’t delete an existing style.</p>
<p>The same can be accomplished by setting an attribute: <code>div.setAttribute('style', 'color: red...')</code>.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#mind-the-units"" name=""mind-the-units"">Mind the units</a></h2><p>Don’t forget to add CSS units to values.</p>
<p>For instance, we should not set <code>elem.style.top</code> to <code>10</code>, but rather to <code>10px</code>. Otherwise it wouldn’t work:</p>
<div class=""code-example"" data-demo-height=""100"" data-highlight='[{""start"":2,""end"":4}]' data-trusted=""1"" id=""bobd96agus"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;body&gt;
  &lt;script&gt;
    // doesn't work!
    document.body.style.margin = 20;
    alert(document.body.style.margin); // '' (empty string, the assignment is ignored)

    // now add the CSS unit (px) - and it works
    document.body.style.margin = '20px';
    alert(document.body.style.margin); // 20px

    alert(document.body.style.marginTop); // 20px
    alert(document.body.style.marginLeft); // 20px
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>Please note: the browser “unpacks” the property <code>style.margin</code> in the last lines and infers <code>style.marginLeft</code> and <code>style.marginTop</code> from it.</p>
<h2><a class=""main__anchor"" href=""#computed-styles-getcomputedstyle"" name=""computed-styles-getcomputedstyle"">Computed styles: getComputedStyle</a></h2><p>So, modifying a style is easy. But how to <em>read</em> it?</p>
<p>For instance, we want to know the size, margins, the color of an element. How to do it?</p>
<p><strong>The <code>style</code> property operates only on the value of the <code>""style""</code> attribute, without any CSS cascade.</strong></p>
<p>So we can’t read anything that comes from CSS classes using <code>elem.style</code>.</p>
<p>For instance, here <code>style</code> doesn’t see the margin:</p>
<div class=""code-example"" data-demo-height=""60"" data-highlight='[{""start"":7,""end"":8}]' data-trusted=""1"" id=""sqgj208mm5"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;head&gt;
  &lt;style&gt; body { color: red; margin: 5px } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  The red text
  &lt;script&gt;
    alert(document.body.style.color); // empty
    alert(document.body.style.marginTop); // empty
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</div><p>…But what if we need, say, to increase the margin by <code>20px</code>? We would want the current value of it.</p>
<p>There’s another method for that: <code>getComputedStyle</code>.</p>
<p>The syntax is:</p>
<div class=""code-example"" data-trusted=""1"" id=""c8vneh2n3h"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>getComputedStyle(element, [pseudo])</code></pre>
</div>
</div>
</div><dl>
<dt>element</dt>
<dd>Element to read the value for.</dd>
<dt>pseudo</dt>
<dd>A pseudo-element if required, for instance <code>::before</code>. An empty string or no argument means the element itself.</dd>
</dl>
<p>The result is an object with styles, like <code>elem.style</code>, but now with respect to all CSS classes.</p>
<p>For instance:</p>
<div class=""code-example"" data-demo-height=""100"" data-trusted=""1"" id=""i96d1pv2zm"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;head&gt;
  &lt;style&gt; body { color: red; margin: 5px } &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;script&gt;
    let computedStyle = getComputedStyle(document.body);

    // now we can read the margin and the color from it

    alert( computedStyle.marginTop ); // 5px
    alert( computedStyle.color ); // rgb(255, 0, 0)
  &lt;/script&gt;

&lt;/body&gt;</code></pre>
</div>
</div>
</div><div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Computed and resolved values</span></div>
<div class=""important__content""><p>There are two concepts in <a href=""https://drafts.csswg.org/cssom/#resolved-values"">CSS</a>:</p>
<ol>
<li>A <em>computed</em> style value is the value after all CSS rules and CSS inheritance is applied, as the result of the CSS cascade. It can look like <code>height:1em</code> or <code>font-size:125%</code>.</li>
<li>A <em>resolved</em> style value is the one finally applied to the element. Values like <code>1em</code> or <code>125%</code> are relative. The browser takes the computed value and makes all units fixed and absolute, for instance: <code>height:20px</code> or <code>font-size:16px</code>. For geometry properties resolved values may have a floating point, like <code>width:50.5px</code>.</li>
</ol>
<p>A long time ago <code>getComputedStyle</code> was created to get computed values, but it turned out that resolved values are much more convenient, and the standard changed.</p>
<p>So nowadays <code>getComputedStyle</code> actually returns the resolved value of the property, usually in <code>px</code> for geometry.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type""><code>getComputedStyle</code> requires the full property name</span></div>
<div class=""important__content""><p>We should always ask for the exact property that we want, like <code>paddingLeft</code> or <code>marginTop</code> or <code>borderTopWidth</code>. Otherwise the correct result is not guaranteed.</p>
<p>For instance, if there are properties <code>paddingLeft/paddingTop</code>, then what should we get for <code>getComputedStyle(elem).padding</code>? Nothing, or maybe a “generated” value from known paddings? There’s no standard rule here.</p>
</div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Styles applied to <code>:visited</code> links are hidden!</span></div>
<div class=""important__content""><p>Visited links may be colored using <code>:visited</code> CSS pseudoclass.</p>
<p>But <code>getComputedStyle</code> does not give access to that color, because otherwise an arbitrary page could find out whether the user visited a link by creating it on the page and checking the styles.</p>
<p>JavaScript may not see the styles applied by <code>:visited</code>. And also, there’s a limitation in CSS that forbids applying geometry-changing styles in <code>:visited</code>. That’s to guarantee that there’s no side way for an evil page to test if a link was visited and hence to break the privacy.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>To manage classes, there are two DOM properties:</p>
<ul>
<li><code>className</code> – the string value, good to manage the whole set of classes.</li>
<li><code>classList</code> – the object with methods <code>add/remove/toggle/contains</code>, good for individual classes.</li>
</ul>
<p>To change the styles:</p>
<ul>
<li>
<p>The <code>style</code> property is an object with camelCased styles. Reading and writing to it has the same meaning as modifying individual properties in the <code>""style""</code> attribute. To see how to apply <code>important</code> and other rare stuff – there’s a list of methods at <a href=""https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration"">MDN</a>.</p>
</li>
<li>
<p>The <code>style.cssText</code> property corresponds to the whole <code>""style""</code> attribute, the full string of styles.</p>
</li>
</ul>
<p>To read the resolved styles (with respect to all classes, after all CSS is applied and final values are calculated):</p>
<ul>
<li>The <code>getComputedStyle(elem, [pseudo])</code> returns the style-like object with them. Read-only.</li>
</ul>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#create-a-notification"" name=""create-a-notification"">Create a notification</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/create-notification"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Write a function <code>showNotification(options)</code> that creates a notification: <code>&lt;div class=""notification""&gt;</code> with the given content. The notification should automatically disappear after 1.5 seconds.</p>
<p>The options are:</p>
<div class=""code-example"" data-trusted=""1"" id=""nl3btbcvyf"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// shows an element with the text ""Hello"" near the right-top of the window
showNotification({
  top: 10, // 10px from the top of the window (by default 0px)
  right: 10, // 10px from the right edge of the window (by default 0px)
  html: ""Hello!"", // the HTML of notification
  className: ""welcome"" // an additional class for the div (optional)
});</code></pre>
</div>
</div>
</div><p><a href=""https://en.js.cx/task/create-notification/solution/"" target=""blank"">Demo in new window</a></p><p>Use CSS positioning to show the element at given top/right coordinates. The source document has the necessary styles.</p>
<p><a data-plunk-id=""TYrJoVr9FomtsmT4"" href=""https://plnkr.co/edit/TYrJoVr9FomtsmT4?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p><a data-plunk-id=""Qo5nJ3qMmbNMvej2"" href=""https://plnkr.co/edit/Qo5nJ3qMmbNMvej2?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
Element size and scrolling,"<h1 class=""main__header-title"">Element size and scrolling</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Element size and scrolling"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>There are many JavaScript properties that allow us to read information about element width, height and other geometry features.</p>
<p>We often need them when moving or positioning elements in JavaScript.</p>
<h2><a class=""main__anchor"" href=""#sample-element"" name=""sample-element"">Sample element</a></h2><p>As a sample element to demonstrate properties we’ll use the one given below:</p>
<div class=""code-example"" data-trusted=""1"" id=""5fa00aza76"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;div id=""example""&gt;
  ...Text...
&lt;/div&gt;
&lt;style&gt;
  #example {
    width: 300px;
    height: 200px;
    border: 25px solid #E8C48F;
    padding: 20px;
    overflow: auto;
  }
&lt;/style&gt;</code></pre>
</div>
</div>
</div><p>It has the border, padding and scrolling. The full set of features. There are no margins, as they are not the part of the element itself, and there are no special properties for them.</p>
<p>The element looks like this:</p>
<figure><div class=""image"" style=""width:566px"">
<div class=""image__ratio"" style=""padding-top:82.86219081272085%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-css.svg"" data-use-theme="""" height=""469"" type=""image/svg+xml"" width=""566"">
<img alt="""" height=""469"" src=""https://javascript.info/article/size-and-scroll/metric-css.svg"" width=""566""/>
</object>
</div></figure><p>You can <a href=""https://plnkr.co/edit/xPOfAnuT7lGQc7dP?p=preview"">open the document in the sandbox</a>.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Mind the scrollbar</span></div>
<div class=""important__content""><p>The picture above demonstrates the most complex case when the element has a scrollbar. Some browsers (not all) reserve the space for it by taking it from the content (labeled as “content width” above).</p>
<p>So, without scrollbar the content width would be <code>300px</code>, but if the scrollbar is <code>16px</code> wide (the width may vary between devices and browsers) then only <code>300 - 16 = 284px</code> remains, and we should take it into account. That’s why examples from this chapter assume that there’s a scrollbar. Without it, some calculations are simpler.</p>
</div></div>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">The <code>padding-bottom</code> area may be filled with text</span></div>
<div class=""important__content""><p>Usually paddings are shown empty on our illustrations, but if there’s a lot of text in the element and it overflows, then browsers show the “overflowing” text at <code>padding-bottom</code>, that’s normal.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#geometry"" name=""geometry"">Geometry</a></h2><p>Here’s the overall picture with geometry properties:</p>
<figure><div class=""image"" style=""width:670px"">
<div class=""image__ratio"" style=""padding-top:89.8507462686567%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-all.svg"" data-use-theme="""" height=""602"" type=""image/svg+xml"" width=""670"">
<img alt="""" height=""602"" src=""https://javascript.info/article/size-and-scroll/metric-all.svg"" width=""670""/>
</object>
</div></figure><p>Values of these properties are technically numbers, but these numbers are “of pixels”, so these are pixel measurements.</p>
<p>Let’s start exploring the properties starting from the outside of the element.</p>
<h2><a class=""main__anchor"" href=""#offsetparent-offsetleft-top"" name=""offsetparent-offsetleft-top"">offsetParent, offsetLeft/Top</a></h2><p>These properties are rarely needed, but still they are the “most outer” geometry properties, so we’ll start with them.</p>
<p>The <code>offsetParent</code> is the nearest ancestor that the browser uses for calculating coordinates during rendering.</p>
<p>That’s the nearest ancestor that is one of the following:</p>
<ol>
<li>CSS-positioned (<code>position</code> is <code>absolute</code>, <code>relative</code>, <code>fixed</code> or <code>sticky</code>),  or</li>
<li><code>&lt;td&gt;</code>, <code>&lt;th&gt;</code>, or <code>&lt;table&gt;</code>,  or</li>
<li><code>&lt;body&gt;</code>.</li>
</ol>
<p>Properties <code>offsetLeft/offsetTop</code> provide x/y coordinates relative to <code>offsetParent</code> upper-left corner.</p>
<p>In the example below the inner <code>&lt;div&gt;</code> has <code>&lt;main&gt;</code> as <code>offsetParent</code> and <code>offsetLeft/offsetTop</code> shifts from its upper-left corner (<code>180</code>):</p>
<div class=""code-example"" data-demo-height=""10"" data-trusted=""1"" id=""75w0sysgvi"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;main style=""position: relative"" id=""main""&gt;
  &lt;article&gt;
    &lt;div id=""example"" style=""position: absolute; left: 180px; top: 180px""&gt;...&lt;/div&gt;
  &lt;/article&gt;
&lt;/main&gt;
&lt;script&gt;
  alert(example.offsetParent.id); // main
  alert(example.offsetLeft); // 180 (note: a number, not a string ""180px"")
  alert(example.offsetTop); // 180
&lt;/script&gt;</code></pre>
</div>
</div>
</div><figure><div class=""image"" style=""width:597px"">
<div class=""image__ratio"" style=""padding-top:87.10217755443887%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-offset-parent.svg"" data-use-theme="""" height=""520"" type=""image/svg+xml"" width=""597"">
<img alt="""" height=""520"" src=""https://javascript.info/article/size-and-scroll/metric-offset-parent.svg"" width=""597""/>
</object>
</div></figure><p>There are several occasions when <code>offsetParent</code> is <code>null</code>:</p>
<ol>
<li>For not shown elements (<code>display:none</code> or not in the document).</li>
<li>For <code>&lt;body&gt;</code> and <code>&lt;html&gt;</code>.</li>
<li>For elements with <code>position:fixed</code>.</li>
</ol>
<h2><a class=""main__anchor"" href=""#offsetwidth-height"" name=""offsetwidth-height"">offsetWidth/Height</a></h2><p>Now let’s move on to the element itself.</p>
<p>These two properties are the simplest ones. They provide the “outer” width/height of the element. Or, in other words, its full size including borders.</p>
<figure><div class=""image"" style=""width:508px"">
<div class=""image__ratio"" style=""padding-top:100.19685039370079%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-offset-width-height.svg"" data-use-theme="""" height=""509"" type=""image/svg+xml"" width=""508"">
<img alt="""" height=""509"" src=""https://javascript.info/article/size-and-scroll/metric-offset-width-height.svg"" width=""508""/>
</object>
</div></figure><p>For our sample element:</p>
<ul>
<li><code>offsetWidth = 390</code> – the outer width, can be calculated as inner CSS-width (<code>300px</code>) plus paddings (<code>2 * 20px</code>) and borders (<code>2 * 25px</code>).</li>
<li><code>offsetHeight = 290</code> – the outer height.</li>
</ul>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Geometry properties are zero/null for elements that are not displayed</span></div>
<div class=""important__content""><p>Geometry properties are calculated only for displayed elements.</p>
<p>If an element (or any of its ancestors) has <code>display:none</code> or is not in the document, then all geometry properties are zero (or <code>null</code> for <code>offsetParent</code>).</p>
<p>For example, <code>offsetParent</code> is <code>null</code>, and <code>offsetWidth</code>, <code>offsetHeight</code> are <code>0</code> when we created an element, but haven’t inserted it into the document yet, or it (or its ancestor) has <code>display:none</code>.</p>
<p>We can use this to check if an element is hidden, like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""lf310wihpp"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function isHidden(elem) {
  return !elem.offsetWidth &amp;&amp; !elem.offsetHeight;
}</code></pre>
</div>
</div>
</div><p>Please note that such <code>isHidden</code> returns <code>true</code> for elements that are on-screen, but have zero sizes.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#clienttop-left"" name=""clienttop-left"">clientTop/Left</a></h2><p>Inside the element we have the borders.</p>
<p>To measure them, there are properties <code>clientTop</code> and <code>clientLeft</code>.</p>
<p>In our example:</p>
<ul>
<li><code>clientLeft = 25</code> – left border width</li>
<li><code>clientTop = 25</code> – top border width</li>
</ul>
<figure><div class=""image"" style=""width:353px"">
<div class=""image__ratio"" style=""padding-top:89.51841359773371%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-client-left-top.svg"" data-use-theme="""" height=""316"" type=""image/svg+xml"" width=""353"">
<img alt="""" height=""316"" src=""https://javascript.info/article/size-and-scroll/metric-client-left-top.svg"" width=""353""/>
</object>
</div></figure><p>…But to be precise – these properties are not border width/height, but rather relative coordinates of the inner side from the outer side.</p>
<p>What’s the difference?</p>
<p>It becomes visible when the document is right-to-left (the operating system is in Arabic or Hebrew languages). The scrollbar is then not on the right, but on the left, and then <code>clientLeft</code> also includes the scrollbar width.</p>
<p>In that case, <code>clientLeft</code> would be not <code>25</code>, but with the scrollbar width <code>25 + 16 = 41</code>.</p>
<p>Here’s the example in hebrew:</p>
<figure><div class=""image"" style=""width:359px"">
<div class=""image__ratio"" style=""padding-top:88.02228412256268%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-client-left-top-rtl.svg"" data-use-theme="""" height=""316"" type=""image/svg+xml"" width=""359"">
<img alt="""" height=""316"" src=""https://javascript.info/article/size-and-scroll/metric-client-left-top-rtl.svg"" width=""359""/>
</object>
</div></figure><h2><a class=""main__anchor"" href=""#clientwidth-height"" name=""clientwidth-height"">clientWidth/Height</a></h2><p>These properties provide the size of the area inside the element borders.</p>
<p>They include the content width together with paddings, but without the scrollbar:</p>
<figure><div class=""image"" style=""width:500px"">
<div class=""image__ratio"" style=""padding-top:98.6%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-client-width-height.svg"" data-use-theme="""" height=""493"" type=""image/svg+xml"" width=""500"">
<img alt="""" height=""493"" src=""https://javascript.info/article/size-and-scroll/metric-client-width-height.svg"" width=""500""/>
</object>
</div></figure><p>On the picture above let’s first consider <code>clientHeight</code>.</p>
<p>There’s no horizontal scrollbar, so it’s exactly the sum of what’s inside the borders: CSS-height <code>200px</code> plus top and bottom paddings (<code>2 * 20px</code>) total <code>240px</code>.</p>
<p>Now <code>clientWidth</code> – here the content width is not <code>300px</code>, but <code>284px</code>, because <code>16px</code> are occupied by the scrollbar. So the sum is <code>284px</code> plus left and right paddings, total <code>324px</code>.</p>
<p><strong>If there are no paddings, then <code>clientWidth/Height</code> is exactly the content area, inside the borders and the scrollbar (if any).</strong></p>
<figure><div class=""image"" style=""width:409px"">
<div class=""image__ratio"" style=""padding-top:114.18092909535453%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-client-width-nopadding.svg"" data-use-theme="""" height=""467"" type=""image/svg+xml"" width=""409"">
<img alt="""" height=""467"" src=""https://javascript.info/article/size-and-scroll/metric-client-width-nopadding.svg"" width=""409""/>
</object>
</div></figure><p>So when there’s no padding we can use <code>clientWidth/clientHeight</code> to get the content area size.</p>
<h2><a class=""main__anchor"" href=""#scrollwidth-height"" name=""scrollwidth-height"">scrollWidth/Height</a></h2><p>These properties are like <code>clientWidth/clientHeight</code>, but they also include the scrolled out (hidden) parts:</p>
<figure><div class=""image"" style=""width:463px"">
<div class=""image__ratio"" style=""padding-top:113.17494600431965%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-scroll-width-height.svg"" data-use-theme="""" height=""524"" type=""image/svg+xml"" width=""463"">
<img alt="""" height=""524"" src=""https://javascript.info/article/size-and-scroll/metric-scroll-width-height.svg"" width=""463""/>
</object>
</div></figure><p>On the picture above:</p>
<ul>
<li><code>scrollHeight = 723</code> – is the full inner height of the content area including the scrolled out parts.</li>
<li><code>scrollWidth = 324</code> – is the full inner width, here we have no horizontal scroll, so it equals <code>clientWidth</code>.</li>
</ul>
<p>We can use these properties to expand the element wide to its full width/height.</p>
<p>Like this:</p>
<div class=""code-example"" data-trusted=""1"" id=""iotgihuagj"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// expand the element to the full content height
element.style.height = `${element.scrollHeight}px`;</code></pre>
</div>
</div>
</div><p>Click the button to expand the element:</p>
<div id=""element"" style=""width:300px;height:200px; padding: 0;overflow: auto; border:1px solid black;"">text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text</div>
<p><button onclick=""element.style.height = `${element.scrollHeight}px`"" style=""padding:0"">element.style.height = <code>${element.scrollHeight}px</code></button></p>
<h2><a class=""main__anchor"" href=""#scrollleft-scrolltop"" name=""scrollleft-scrolltop"">scrollLeft/scrollTop</a></h2><p>Properties <code>scrollLeft/scrollTop</code> are the width/height of the hidden, scrolled out part of the element.</p>
<p>On the picture below we can see <code>scrollHeight</code> and <code>scrollTop</code> for a block with a vertical scroll.</p>
<figure><div class=""image"" style=""width:489px"">
<div class=""image__ratio"" style=""padding-top:110.83844580777095%""></div>
<object class=""image__image"" data=""/article/size-and-scroll/metric-scroll-top.svg"" data-use-theme="""" height=""542"" type=""image/svg+xml"" width=""489"">
<img alt="""" height=""542"" src=""https://javascript.info/article/size-and-scroll/metric-scroll-top.svg"" width=""489""/>
</object>
</div></figure><p>In other words, <code>scrollTop</code> is “how much is scrolled up”.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type""><code>scrollLeft/scrollTop</code> can be modified</span></div>
<div class=""important__content""><p>Most of the geometry properties here are read-only, but <code>scrollLeft/scrollTop</code> can be changed, and the browser will scroll the element.</p>
<p>If you click the element below, the code <code>elem.scrollTop += 10</code> executes. That makes the element content scroll <code>10px</code> down.</p>
<div onclick=""this.scrollTop+=10"" style=""cursor:pointer;border:1px solid black;width:100px;height:80px;overflow:auto"">Click<br/>Me<br/>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9</div>
<p>Setting <code>scrollTop</code> to <code>0</code> or a big value, such as <code>1e9</code> will make the element scroll to the very top/bottom respectively.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#don-t-take-width-height-from-css"" name=""don-t-take-width-height-from-css"">Don’t take width/height from CSS</a></h2><p>We’ve just covered geometry properties of DOM elements, that can be used to get widths, heights and calculate distances.</p>
<p>But as we know from the chapter <a href=""https://javascript.info/styles-and-classes"">Styles and classes</a>, we can read CSS-height and width using <code>getComputedStyle</code>.</p>
<p>So why not to read the width of an element with <code>getComputedStyle</code>, like this?</p>
<div class=""code-example"" data-trusted=""1"" id=""7it934u4af"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let elem = document.body;

alert( getComputedStyle(elem).width ); // show CSS width for elem</code></pre>
</div>
</div>
</div><p>Why should we use geometry properties instead? There are two reasons:</p>
<ol>
<li>
<p>First, CSS <code>width/height</code> depend on another property: <code>box-sizing</code> that defines “what is” CSS width and height. A change in <code>box-sizing</code> for CSS purposes may break such JavaScript.</p>
</li>
<li>
<p>Second, CSS <code>width/height</code> may be <code>auto</code>, for instance for an inline element:</p>
<div class=""code-example"" data-highlight='[{""start"":3,""end"":3}]' data-trusted=""1"" id=""btxsdw8c5d"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""show""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;span id=""elem""&gt;Hello!&lt;/span&gt;

&lt;script&gt;
  alert( getComputedStyle(elem).width ); // auto
&lt;/script&gt;</code></pre>
</div>
</div>
</div><p>From the CSS standpoint, <code>width:auto</code> is perfectly normal, but in JavaScript we need an exact size in <code>px</code> that we can use in calculations. So here CSS width is useless.</p>
</li>
</ol>
<p>And there’s one more reason: a scrollbar. Sometimes the code that works fine without a scrollbar becomes buggy with it, because a scrollbar takes the space from the content in some browsers. So the real width available for the content is <em>less</em> than CSS width. And <code>clientWidth/clientHeight</code> take that into account.</p>
<p>…But with <code>getComputedStyle(elem).width</code> the situation is different. Some browsers (e.g. Chrome) return the real inner width, minus the scrollbar, and some of them (e.g. Firefox) – CSS width (ignore the scrollbar). Such cross-browser differences is the reason not to use <code>getComputedStyle</code>, but rather rely on geometry properties.</p>
<p>If your browser reserves the space for a scrollbar (most browsers for Windows do), then you can test it below.</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""><div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_external"" href=""https://en.js.cx/article/size-and-scroll/cssWidthScroll/"" target=""_blank"" title=""open in new window""></a>
</div>
</div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/article/size-and-scroll/cssWidthScroll/"" style=""height:300px""></iframe>
</div><p>The element with text has CSS <code>width:300px</code>.</p>
<p>On a Desktop Windows OS, Firefox, Chrome, Edge all reserve the space for the scrollbar. But  Firefox shows <code>300px</code>, while Chrome and Edge show less. That’s because Firefox returns the CSS width and other browsers return the “real” width.</p>
<p>Please note that the described difference is only about reading <code>getComputedStyle(...).width</code> from JavaScript, visually everything is correct.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Elements have the following geometry properties:</p>
<ul>
<li><code>offsetParent</code> – is the nearest positioned ancestor or <code>td</code>, <code>th</code>, <code>table</code>, <code>body</code>.</li>
<li><code>offsetLeft/offsetTop</code> – coordinates relative to the upper-left edge of <code>offsetParent</code>.</li>
<li><code>offsetWidth/offsetHeight</code> – “outer” width/height of an element including borders.</li>
<li><code>clientLeft/clientTop</code> – the distances from the upper-left outer corner to the upper-left inner (content + padding) corner. For left-to-right OS they are always the widths of left/top borders. For right-to-left OS the vertical scrollbar is on the left so <code>clientLeft</code> includes its width too.</li>
<li><code>clientWidth/clientHeight</code> – the width/height of the content including paddings, but without the scrollbar.</li>
<li><code>scrollWidth/scrollHeight</code> – the width/height of the content, just like <code>clientWidth/clientHeight</code>, but also include scrolled-out, invisible part of the element.</li>
<li><code>scrollLeft/scrollTop</code> – width/height of the scrolled out upper part of the element, starting from its upper-left corner.</li>
</ul>
<p>All properties are read-only except <code>scrollLeft/scrollTop</code> that make the browser scroll the element if changed.</p>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#what-s-the-scroll-from-the-bottom"" name=""what-s-the-scroll-from-the-bottom"">What's the scroll from the bottom?</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/get-scroll-height-bottom"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>The <code>elem.scrollTop</code> property is the size of the scrolled out part from the top. How to get the size of the bottom scroll (let’s call it <code>scrollBottom</code>)?</p>
<p>Write the code that works for an arbitrary <code>elem</code>.</p>
<p>P.S. Please check your code: if there’s no scroll or the element is fully scrolled down, then it should return <code>0</code>.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The solution is:</p>
<div class=""code-example"" data-trusted=""1"" id=""oe0gkq6mo7"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let scrollBottom = elem.scrollHeight - elem.scrollTop - elem.clientHeight;</code></pre>
</div>
</div>
</div><p>In other words: (full height) minus (scrolled out top part) minus (visible part) – that’s exactly the scrolled out bottom part.</p>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#what-is-the-scrollbar-width"" name=""what-is-the-scrollbar-width"">What is the scrollbar width?</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/scrollbar-width"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 3</span></div><div class=""task__content""><div class=""task__formatted""><p>Write the code that returns the width of a standard scrollbar.</p>
<p>For Windows it usually varies between <code>12px</code> and <code>20px</code>. If the browser doesn’t reserve any space for it (the scrollbar is half-translucent over the text, also happens), then it may be <code>0px</code>.</p>
<p>P.S. The code should work for any HTML document, do not depend on its content.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>To get the scrollbar width, we can create an element with the scroll, but without borders and paddings.</p>
<p>Then the difference between its full width <code>offsetWidth</code> and the inner content area width <code>clientWidth</code> will be exactly the scrollbar:</p>
<div class=""code-example"" data-trusted=""1"" id=""nikkqbzgc7"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// create a div with the scroll
let div = document.createElement('div');

div.style.overflowY = 'scroll';
div.style.width = '50px';
div.style.height = '50px';

// must put it in the document, otherwise sizes will be 0
document.body.append(div);
let scrollWidth = div.offsetWidth - div.clientWidth;

div.remove();

alert(scrollWidth);</code></pre>
</div>
</div>
</div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#place-the-ball-in-the-field-center"" name=""place-the-ball-in-the-field-center"">Place the ball in the field center</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/put-ball-in-center"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Here’s how the source document looks:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""><div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_external"" href=""https://en.js.cx/task/put-ball-in-center/source/"" target=""_blank"" title=""open in new window""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-plunk-id=""vrbv3tdVE12i9qWj"" href=""https://plnkr.co/edit/vrbv3tdVE12i9qWj?p=preview"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/put-ball-in-center/source/"" style=""height:180px""></iframe>
</div><p>What are coordinates of the field center?</p>
<p>Calculate them and use to place the ball into the center of the green field:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/put-ball-in-center/solution/"" style=""height:180px""></iframe>
</div><ul>
<li>The element should be moved by JavaScript, not CSS.</li>
<li>The code should work with any ball size (<code>10</code>, <code>20</code>, <code>30</code> pixels) and any field size, not be bound to the given values.</li>
</ul>
<p>P.S. Sure, centering could be done with CSS, but here we want exactly JavaScript. Further we’ll meet other topics and more complex situations when JavaScript must be used. Here we do a “warm-up”.</p>
<p><a data-plunk-id=""vrbv3tdVE12i9qWj"" href=""https://plnkr.co/edit/vrbv3tdVE12i9qWj?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The ball has <code>position:absolute</code>. It means that its <code>left/top</code> coordinates are measured from the nearest positioned element, that is <code>#field</code> (because it has <code>position:relative</code>).</p>
<p>The coordinates start from the inner left-upper corner of the field:</p>
<figure><div class=""image"" style=""width:233px"">
<div class=""image__ratio"" style=""padding-top:66.95278969957081%""></div>
<object class=""image__image"" data=""/task/put-ball-in-center/field.svg"" data-use-theme="""" height=""156"" type=""image/svg+xml"" width=""233"">
<img alt="""" height=""156"" src=""https://javascript.info/task/put-ball-in-center/field.svg"" width=""233""/>
</object>
</div></figure><p>The inner field width/height is <code>clientWidth/clientHeight</code>. So the field center has coordinates <code>(clientWidth/2, clientHeight/2)</code>.</p>
<p>…But if we set <code>ball.style.left/top</code> to such values, then not the ball as a whole, but the left-upper edge of the ball would be in the center:</p>
<div class=""code-example"" data-trusted=""1"" id=""7t2mi0qdf3"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>ball.style.left = Math.round(field.clientWidth / 2) + 'px';
ball.style.top = Math.round(field.clientHeight / 2) + 'px';</code></pre>
</div>
</div>
</div><p>Here’s how it looks:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""></div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/put-ball-in-center/ball-half/"" style=""height:180px""></iframe>
</div><p>To align the ball center with the center of the field, we should move the ball to the half of its width to the left and to the half of its height to the top:</p>
<div class=""code-example"" data-trusted=""1"" id=""2j68z185qo"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>ball.style.left = Math.round(field.clientWidth / 2 - ball.offsetWidth / 2) + 'px';
ball.style.top = Math.round(field.clientHeight / 2 - ball.offsetHeight / 2) + 'px';</code></pre>
</div>
</div>
</div><p>Now the ball is finally centered.</p>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Attention: the pitfall!</span></div>
<div class=""important__content""><p>The code won’t work reliably while <code>&lt;img&gt;</code> has no width/height:</p>
<div class=""code-example"" data-trusted=""1"" id=""gmv1u8f86i"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;img src=""ball.png"" id=""ball""&gt;</code></pre>
</div>
</div>
</div></div></div>
<p>When the browser does not know the width/height of an image (from tag attributes or CSS), then it assumes them to equal <code>0</code> until the image finishes loading.</p>
<p>So the value of <code>ball.offsetWidth</code> will be <code>0</code> until the image loads. That leads to wrong coordinates in the code above.</p>
<p>After the first load, the browser usually caches the image, and on reloads it will have the size immediately. But on the first load the value of <code>ball.offsetWidth</code> is <code>0</code>.</p>
<p>We should fix that by adding <code>width/height</code> to <code>&lt;img&gt;</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":0,""cols"":[{""start"":20,""end"":42}]}]' data-trusted=""1"" id=""43qq1xz9e3"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-markup""><code>&lt;img src=""ball.png"" width=""40"" height=""40"" id=""ball""&gt;</code></pre>
</div>
</div>
</div><p>…Or provide the size in CSS:</p>
<div class=""code-example"" data-trusted=""1"" id=""x9lnh2msgg"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-css""><code>#ball {
  width: 40px;
  height: 40px;
}</code></pre>
</div>
</div>
</div><p><a data-plunk-id=""R5JkVBsfnBee3d4x"" href=""https://plnkr.co/edit/R5JkVBsfnBee3d4x?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#the-difference-css-width-versus-clientwidth"" name=""the-difference-css-width-versus-clientwidth"">The difference: CSS width versus clientWidth</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/width-vs-clientwidth"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>What’s the difference between <code>getComputedStyle(elem).width</code> and <code>elem.clientWidth</code>?</p>
<p>Give at least 3 differences. The more the better.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>Differences:</p>
<ol>
<li><code>clientWidth</code> is numeric, while <code>getComputedStyle(elem).width</code> returns a string with <code>px</code> at the end.</li>
<li><code>getComputedStyle</code> may return non-numeric width like <code>""auto""</code> for an inline element.</li>
<li><code>clientWidth</code> is the inner content area of the element plus paddings, while CSS width (with standard <code>box-sizing</code>) is the inner content area <em>without paddings</em>.</li>
<li>If there’s a scrollbar and the browser reserves the space for it, some browser substract that space from CSS width (cause it’s not available for content any more), and some do not. The <code>clientWidth</code> property is always the same: scrollbar size is substracted if reserved.</li>
</ol>
</div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
Window sizes and scrolling,"<h1 class=""main__header-title"">Window sizes and scrolling</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Window sizes and scrolling"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>How do we find the width and height of the browser window? How do we get the full width and height of the document, including the scrolled out part? How do we scroll the page using JavaScript?</p>
<p>For this type of information, we can use the root document element <code>document.documentElement</code>, that corresponds to the <code>&lt;html&gt;</code> tag. But there are additional methods and peculiarities to consider.</p>
<h2><a class=""main__anchor"" href=""#width-height-of-the-window"" name=""width-height-of-the-window"">Width/height of the window</a></h2><p>To get window width and height, we can use the <code>clientWidth/clientHeight</code> of <code>document.documentElement</code>:</p>
<figure><div class=""image"" style=""width:508px"">
<div class=""image__ratio"" style=""padding-top:39.960629921259844%""></div>
<object class=""image__image"" data=""/article/size-and-scroll-window/document-client-width-height.svg"" data-use-theme="""" height=""203"" type=""image/svg+xml"" width=""508"">
<img alt="""" height=""203"" src=""https://javascript.info/article/size-and-scroll-window/document-client-width-height.svg"" width=""508""/>
</object>
</div></figure><p>For instance, this button shows the height of your window:</p>
<p><button onclick=""alert(document.documentElement.clientHeight)"">alert(document.documentElement.clientHeight)</button></p>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Not <code>window.innerWidth/innerHeight</code></span></div>
<div class=""important__content""><p>Browsers also support properties like <code>window.innerWidth/innerHeight</code>. They look like what we want, so why not to use them instead?</p>
<p>If there exists a scrollbar, and it occupies some space, <code>clientWidth/clientHeight</code> provide the width/height without it (subtract it). In other words, they return the width/height of the visible part of the document, available for the content.</p>
<p><code>window.innerWidth/innerHeight</code> includes the scrollbar.</p>
<p>If there’s a scrollbar, and it occupies some space, then these two lines show different values:</p>
<div class=""code-example"" data-trusted=""1"" id=""9rfjh6djxg"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert( window.innerWidth ); // full window width
alert( document.documentElement.clientWidth ); // window width minus the scrollbar</code></pre>
</div>
</div>
</div><p>In most cases, we need the <em>available</em> window width in order to draw or position something within scrollbars (if there are any), so we should use <code>documentElement.clientHeight/clientWidth</code>.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type""><code>DOCTYPE</code> is important</span></div>
<div class=""important__content""><p>Please note: top-level geometry properties may work a little bit differently when there’s no <code>&lt;!DOCTYPE HTML&gt;</code> in HTML. Odd things are possible.</p>
<p>In modern HTML we should always write <code>DOCTYPE</code>.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#width-height-of-the-document"" name=""width-height-of-the-document"">Width/height of the document</a></h2><p>Theoretically, as the root document element is <code>document.documentElement</code>, and it encloses all the content, we could measure the document’s full size as <code>document.documentElement.scrollWidth/scrollHeight</code>.</p>
<p>But on that element, for the whole page, these properties do not work as intended. In Chrome/Safari/Opera, if there’s no scroll, then <code>documentElement.scrollHeight</code> may be even less than <code>documentElement.clientHeight</code>! Weird, right?</p>
<p>To reliably obtain the full document height, we should take the maximum of these properties:</p>
<div class=""code-example"" data-trusted=""1"" id=""eylo6kb3bp"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let scrollHeight = Math.max(
  document.body.scrollHeight, document.documentElement.scrollHeight,
  document.body.offsetHeight, document.documentElement.offsetHeight,
  document.body.clientHeight, document.documentElement.clientHeight
);

alert('Full document height, with scrolled out part: ' + scrollHeight);</code></pre>
</div>
</div>
</div><p>Why so? Better don’t ask. These inconsistencies come from ancient times, not a “smart” logic.</p>
<h2><a class=""main__anchor"" href=""#page-scroll"" name=""page-scroll"">Get the current scroll</a></h2><p>DOM elements have their current scroll state in their <code>scrollLeft/scrollTop</code> properties.</p>
<p>For document scroll, <code>document.documentElement.scrollLeft/scrollTop</code> works in most browsers, except older WebKit-based ones, like Safari (bug <a href=""https://bugs.webkit.org/show_bug.cgi?id=5991"">5991</a>), where we should use <code>document.body</code> instead of <code>document.documentElement</code>.</p>
<p>Luckily, we don’t have to remember these peculiarities at all, because the scroll is available in the special properties, <code>window.pageXOffset/pageYOffset</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""doi1kb44go"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>alert('Current scroll from the top: ' + window.pageYOffset);
alert('Current scroll from the left: ' + window.pageXOffset);</code></pre>
</div>
</div>
</div><p>These properties are read-only.</p>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Also available as <code>window</code> properties <code>scrollX</code> and <code>scrollY</code></span></div>
<div class=""important__content""><p>For historical reasons, both properties exist, but they are the same:</p>
<ul>
<li><code>window.pageXOffset</code> is an alias of <code>window.scrollX</code>.</li>
<li><code>window.pageYOffset</code> is an alias of <code>window.scrollY</code>.</li>
</ul>
</div></div>
<h2><a class=""main__anchor"" href=""#window-scroll"" name=""window-scroll"">Scrolling: scrollTo, scrollBy, scrollIntoView</a></h2><div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Important:</span></div>
<div class=""important__content""><p>To scroll the page with JavaScript, its DOM must be fully built.</p>
<p>For instance, if we try to scroll the page with a script in <code>&lt;head&gt;</code>, it won’t work.</p>
</div></div>
<p>Regular elements can be scrolled by changing <code>scrollTop/scrollLeft</code>.</p>
<p>We can do the same for the page using <code>document.documentElement.scrollTop/scrollLeft</code> (except Safari, where <code>document.body.scrollTop/Left</code> should be used instead).</p>
<p>Alternatively, there’s a simpler, universal solution: special methods <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy"">window.scrollBy(x,y)</a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo"">window.scrollTo(pageX,pageY)</a>.</p>
<ul>
<li>
<p>The method <code>scrollBy(x,y)</code> scrolls the page <em>relative to its current position</em>. For instance, <code>scrollBy(0,10)</code> scrolls the page <code>10px</code> down.</p>
<p>The button below demonstrates this:</p>
<p><button onclick=""window.scrollBy(0,10)"">window.scrollBy(0,10)</button></p>
</li>
<li>
<p>The method <code>scrollTo(pageX,pageY)</code> scrolls the page <em>to absolute coordinates</em>, so that the top-left corner of the visible part has coordinates <code>(pageX, pageY)</code> relative to the document’s top-left corner. It’s like setting <code>scrollLeft/scrollTop</code>.</p>
<p>To scroll to the very beginning, we can use <code>scrollTo(0,0)</code>.</p>
<p><button onclick=""window.scrollTo(0,0)"">window.scrollTo(0,0)</button></p>
</li>
</ul>
<p>These methods work for all browsers the same way.</p>
<h2><a class=""main__anchor"" href=""#scrollintoview"" name=""scrollintoview"">scrollIntoView</a></h2><p>For completeness, let’s cover one more method: <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView"">elem.scrollIntoView(top)</a>.</p>
<p>The call to <code>elem.scrollIntoView(top)</code> scrolls the page to make <code>elem</code> visible. It has one argument:</p>
<ul>
<li>If <code>top=true</code> (that’s the default), then the page will be scrolled to make <code>elem</code> appear on the top of the window. The upper edge of the element will be aligned with the window top.</li>
<li>If <code>top=false</code>, then the page scrolls to make <code>elem</code> appear at the bottom. The bottom edge of the element will be aligned with the window bottom.</li>
</ul>
<p>The button below scrolls the page to position itself at the window top:</p>
<p><button onclick=""this.scrollIntoView()"">this.scrollIntoView()</button></p>
<p>And this button scrolls the page to position itself at the bottom:</p>
<p><button onclick=""this.scrollIntoView(false)"">this.scrollIntoView(false)</button></p>
<h2><a class=""main__anchor"" href=""#forbid-the-scrolling"" name=""forbid-the-scrolling"">Forbid the scrolling</a></h2><p>Sometimes we need to make the document “unscrollable”. For instance, when we need to cover the page with a large message requiring immediate attention, and we want the visitor to interact with that message, not with the document.</p>
<p>To make the document unscrollable, it’s enough to set <code>document.body.style.overflow = ""hidden""</code>. The page will “freeze” at its current scroll position.</p>
<p>Try it:</p>
<p><button onclick=""document.body.style.overflow = 'hidden'"">document.body.style.overflow = ‘hidden’</button></p>
<p><button onclick=""document.body.style.overflow = ''"">document.body.style.overflow = ‘’</button></p>
<p>The first button freezes the scroll, while the second one releases it.</p>
<p>We can use the same technique to freeze the scroll for other elements, not just for <code>document.body</code>.</p>
<p>The drawback of the method is that the scrollbar disappears. If it occupied some space, then that space is now free and the content “jumps” to fill it.</p>
<p>That looks a bit odd, but can be worked around if we compare <code>clientWidth</code> before and after the freeze. If it increased (the scrollbar disappeared), then add <code>padding</code> to <code>document.body</code> in place of the scrollbar to keep the content width the same.</p>
<h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Geometry:</p>
<ul>
<li>
<p>Width/height of the visible part of the document (content area width/height): <code>document.documentElement.clientWidth/clientHeight</code></p>
</li>
<li>
<p>Width/height of the whole document, with the scrolled out part:</p>
<div class=""code-example"" data-trusted=""1"" id=""83soytvt0o"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let scrollHeight = Math.max(
  document.body.scrollHeight, document.documentElement.scrollHeight,
  document.body.offsetHeight, document.documentElement.offsetHeight,
  document.body.clientHeight, document.documentElement.clientHeight
);</code></pre>
</div>
</div>
</div></li>
</ul>
<p>Scrolling:</p>
<ul>
<li>
<p>Read the current scroll: <code>window.pageYOffset/pageXOffset</code>.</p>
</li>
<li>
<p>Change the current scroll:</p>
<ul>
<li><code>window.scrollTo(pageX,pageY)</code> – absolute coordinates,</li>
<li><code>window.scrollBy(x,y)</code> – scroll relative the current place,</li>
<li><code>elem.scrollIntoView(top)</code> – scroll to make <code>elem</code> visible (align with the top/bottom of the window).</li>
</ul>
</li>
</ul>
</div></article></div>"
Coordinates,"<h1 class=""main__header-title"">Coordinates</h1>
<div class=""content""><article class=""formatted"" itemscope="""" itemtype=""http://schema.org/TechArticle""><meta content=""Coordinates"" itemprop=""name""/><div itemprop=""author"" itemscope="""" itemtype=""http://schema.org/Person""><meta content=""iliakan@gmail.com"" itemprop=""email""/><meta content=""Ilya Kantor"" itemprop=""name""/></div><div itemprop=""articleBody""><p>To move elements around we should be familiar with coordinates.</p>
<p>Most JavaScript methods deal with one of two coordinate systems:</p>
<ol>
<li><strong>Relative to the window</strong> – similar to <code>position:fixed</code>, calculated from the window top/left edge.
<ul>
<li>we’ll denote these coordinates as <code>clientX/clientY</code>, the reasoning for such name will become clear later, when we study event properties.</li>
</ul>
</li>
<li><strong>Relative to the document</strong> – similar to <code>position:absolute</code> in the document root, calculated from the document top/left edge.
<ul>
<li>we’ll denote them <code>pageX/pageY</code>.</li>
</ul>
</li>
</ol>
<p>When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same.</p>
<p>On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):</p>
<figure><div class=""image"" style=""width:728px"">
<div class=""image__ratio"" style=""padding-top:49.175824175824175%""></div>
<object class=""image__image"" data=""/article/coordinates/document-and-window-coordinates-scrolled.svg"" data-use-theme="""" height=""358"" type=""image/svg+xml"" width=""728"">
<img alt="""" height=""358"" src=""https://javascript.info/article/coordinates/document-and-window-coordinates-scrolled.svg"" width=""728""/>
</object>
</div></figure><p>When the document scrolled:</p>
<ul>
<li><code>pageY</code> – document-relative coordinate stayed the same, it’s counted from the document top (now scrolled out).</li>
<li><code>clientY</code> – window-relative coordinate did change (the arrow became shorter), as the same point became closer to window top.</li>
</ul>
<h2><a class=""main__anchor"" href=""#element-coordinates-getboundingclientrect"" name=""element-coordinates-getboundingclientrect"">Element coordinates: getBoundingClientRect</a></h2><p>The method <code>elem.getBoundingClientRect()</code> returns window coordinates for a minimal rectangle that encloses <code>elem</code> as an object of built-in <a href=""https://www.w3.org/TR/geometry-1/#domrect"">DOMRect</a> class.</p>
<p>Main <code>DOMRect</code> properties:</p>
<ul>
<li><code>x/y</code> – X/Y-coordinates of the rectangle origin relative to window,</li>
<li><code>width/height</code> – width/height of the rectangle (can be negative).</li>
</ul>
<p>Additionally, there are derived properties:</p>
<ul>
<li><code>top/bottom</code> – Y-coordinate for the top/bottom rectangle edge,</li>
<li><code>left/right</code> – X-coordinate for the left/right rectangle edge.</li>
</ul>
<p>For instance click this button to see its window coordinates:</p>
<p><input id=""brTest"" onclick=""showRect(this)"" style=""max-width: 90vw;"" type=""button"" value=""Get coordinates using button.getBoundingClientRect() for this button""/></p>
<script>
function showRect(elem) {
  let r = elem.getBoundingClientRect();
  alert(`x:${r.x}
y:${r.y}
width:${r.width}
height:${r.height}
top:${r.top}
bottom:${r.bottom}
left:${r.left}
right:${r.right}
`);
}
</script>
<p>If you scroll the page and repeat, you’ll notice that as window-relative button position changes, its window coordinates (<code>y/top/bottom</code> if you scroll vertically) change as well.</p>
<p>Here’s the picture of <code>elem.getBoundingClientRect()</code> output:</p>
<figure><div class=""image"" style=""width:521px"">
<div class=""image__ratio"" style=""padding-top:78.88675623800384%""></div>
<object class=""image__image"" data=""/article/coordinates/coordinates.svg"" data-use-theme="""" height=""411"" type=""image/svg+xml"" width=""521"">
<img alt="""" height=""411"" src=""https://javascript.info/article/coordinates/coordinates.svg"" width=""521""/>
</object>
</div></figure><p>As you can see, <code>x/y</code> and <code>width/height</code> fully describe the rectangle. Derived properties can be easily calculated from them:</p>
<ul>
<li><code>left = x</code></li>
<li><code>top = y</code></li>
<li><code>right = x + width</code></li>
<li><code>bottom = y + height</code></li>
</ul>
<p>Please note:</p>
<ul>
<li>Coordinates may be decimal fractions, such as <code>10.5</code>. That’s normal, internally browser uses fractions in calculations. We don’t have to round them when setting to <code>style.left/top</code>.</li>
<li>Coordinates may be negative. For instance, if the page is scrolled so that <code>elem</code> is now above the window, then <code>elem.getBoundingClientRect().top</code> is negative.</li>
</ul>
<div class=""important important_smart"">
<div class=""important__header""><span class=""important__type"">Why derived properties are needed? Why does <code>top/left</code> exist if there’s <code>x/y</code>?</span></div>
<div class=""important__content""><p>Mathematically, a rectangle is uniquely defined with its starting point <code>(x,y)</code> and the direction vector <code>(width,height)</code>. So the additional derived properties are for convenience.</p>
<p>Technically it’s possible for <code>width/height</code> to be negative, that allows for “directed” rectangle, e.g. to represent mouse selection with properly marked start and end.</p>
<p>Negative <code>width/height</code> values mean that the rectangle starts at its bottom-right corner and then “grows” left-upwards.</p>
<p>Here’s a rectangle with negative <code>width</code> and <code>height</code> (e.g. <code>width=-200</code>, <code>height=-100</code>):</p>
<figure><div class=""image"" style=""width:521px"">
<div class=""image__ratio"" style=""padding-top:68.13819577735126%""></div>
<object class=""image__image"" data=""/article/coordinates/coordinates-negative.svg"" data-use-theme="""" height=""355"" type=""image/svg+xml"" width=""521"">
<img alt="""" height=""355"" src=""https://javascript.info/article/coordinates/coordinates-negative.svg"" width=""521""/>
</object>
</div></figure><p>As you can see, <code>left/top</code> do not equal <code>x/y</code> in such case.</p>
<p>In practice though, <code>elem.getBoundingClientRect()</code> always returns positive width/height, here we mention negative <code>width/height</code> only for you to understand why these seemingly duplicate properties are not actually duplicates.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Internet Explorer: no support for <code>x/y</code></span></div>
<div class=""important__content""><p>Internet Explorer doesn’t support <code>x/y</code> properties for historical reasons.</p>
<p>So we can either make a polyfill (add getters in <code>DomRect.prototype</code>) or just use <code>top/left</code>, as they are always the same as <code>x/y</code> for positive <code>width/height</code>, in particular in the result of <code>elem.getBoundingClientRect()</code>.</p>
</div></div>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">Coordinates right/bottom are different from CSS position properties</span></div>
<div class=""important__content""><p>There are obvious similarities between window-relative coordinates and CSS <code>position:fixed</code>.</p>
<p>But in CSS positioning, <code>right</code> property means the distance from the right edge, and <code>bottom</code> property means the distance from the bottom edge.</p>
<p>If we just look at the picture above, we can see that in JavaScript it is not so. All window coordinates are counted from the top-left corner, including these ones.</p>
</div></div>
<h2><a class=""main__anchor"" href=""#elementFromPoint"" name=""elementFromPoint"">elementFromPoint(x, y)</a></h2><p>The call to <code>document.elementFromPoint(x, y)</code> returns the most nested element at window coordinates <code>(x, y)</code>.</p>
<p>The syntax is:</p>
<div class=""code-example"" data-trusted=""1"" id=""het0g9ixky"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let elem = document.elementFromPoint(x, y);</code></pre>
</div>
</div>
</div><p>For instance, the code below highlights and outputs the tag of the element that is now in the middle of the window:</p>
<div class=""code-example"" data-trusted=""1"" id=""k8xcfsuqwc"">
<div class=""codebox code-example__codebox"">
<div class=""toolbar codebox__toolbar"">
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_run"" data-action=""run"" href=""#"" title=""run""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-action=""edit"" href=""#"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let centerX = document.documentElement.clientWidth / 2;
let centerY = document.documentElement.clientHeight / 2;

let elem = document.elementFromPoint(centerX, centerY);

elem.style.background = ""red"";
alert(elem.tagName);</code></pre>
</div>
</div>
</div><p>As it uses window coordinates, the element may be different depending on the current scroll position.</p>
<div class=""important important_warn"">
<div class=""important__header""><span class=""important__type"">For out-of-window coordinates the <code>elementFromPoint</code> returns <code>null</code></span></div>
<div class=""important__content""><p>The method <code>document.elementFromPoint(x,y)</code> only works if <code>(x,y)</code> are inside the visible area.</p>
<p>If any of the coordinates is negative or exceeds the window width/height, then it returns <code>null</code>.</p>
<p>Here’s a typical error that may occur if we don’t check for it:</p>
<div class=""code-example"" data-highlight='[{""start"":2,""end"":2}]' data-trusted=""1"" id=""19pom9h668"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let elem = document.elementFromPoint(x, y);
// if the coordinates happen to be out of the window, then elem = null
elem.style.background = ''; // Error!</code></pre>
</div>
</div>
</div></div></div>
<h2><a class=""main__anchor"" href=""#using-for-fixed-positioning"" name=""using-for-fixed-positioning"">Using for “fixed” positioning</a></h2><p>Most of time we need coordinates in order to position something.</p>
<p>To show something near an element, we can use <code>getBoundingClientRect</code> to get its coordinates, and then CSS <code>position</code> together with <code>left/top</code> (or <code>right/bottom</code>).</p>
<p>For instance, the function <code>createMessageUnder(elem, html)</code> below shows the message under <code>elem</code>:</p>
<div class=""code-example"" data-highlight='[{""start"":8,""end"":12}]' data-trusted=""1"" id=""6av7y8t47s"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let elem = document.getElementById(""coords-show-mark"");

function createMessageUnder(elem, html) {
  // create message element
  let message = document.createElement('div');
  // better to use a css class for the style here
  message.style.cssText = ""position:fixed; color: red"";

  // assign coordinates, don't forget ""px""!
  let coords = elem.getBoundingClientRect();

  message.style.left = coords.left + ""px"";
  message.style.top = coords.bottom + ""px"";

  message.innerHTML = html;

  return message;
}

// Usage:
// add it for 5 seconds in the document
let message = createMessageUnder(elem, 'Hello, world!');
document.body.append(message);
setTimeout(() =&gt; message.remove(), 5000);</code></pre>
</div>
</div>
</div><p>Click the button to run it:</p>
<p><button id=""coords-show-mark"">Button with id=“coords-show-mark”, the message will appear under it</button></p>
<p>The code can be modified to show the message at the left, right, below, apply CSS animations to “fade it in” and so on. That’s easy, as we have all the coordinates and sizes of the element.</p>
<p>But note the important detail: when the page is scrolled, the message flows away from the button.</p>
<p>The reason is obvious: the message element relies on <code>position:fixed</code>, so it remains at the same place of the window while the page scrolls away.</p>
<p>To change that, we need to use document-based coordinates and <code>position:absolute</code>.</p>
<h2><a class=""main__anchor"" href=""#getCoords"" name=""getCoords"">Document coordinates</a></h2><p>Document-relative coordinates start from the upper-left corner of the document, not the window.</p>
<p>In CSS, window coordinates correspond to <code>position:fixed</code>, while document coordinates are similar to <code>position:absolute</code> on top.</p>
<p>We can use <code>position:absolute</code> and <code>top/left</code> to put something at a certain place of the document, so that it remains there during a page scroll. But we need the right coordinates first.</p>
<p>There’s no standard method to get the document coordinates of an element. But it’s easy to write it.</p>
<p>The two coordinate systems are connected by the formula:</p>
<ul>
<li><code>pageY</code> = <code>clientY</code> + height of the scrolled-out vertical part of the document.</li>
<li><code>pageX</code> = <code>clientX</code> + width of the scrolled-out horizontal part of the document.</li>
</ul>
<p>The function <code>getCoords(elem)</code> will take window coordinates from <code>elem.getBoundingClientRect()</code> and add the current scroll to them:</p>
<div class=""code-example"" data-trusted=""1"" id=""t2wmvk77m1"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// get document coordinates of the element
function getCoords(elem) {
  let box = elem.getBoundingClientRect();

  return {
    top: box.top + window.pageYOffset,
    right: box.right + window.pageXOffset,
    bottom: box.bottom + window.pageYOffset,
    left: box.left + window.pageXOffset
  };
}</code></pre>
</div>
</div>
</div><p>If in the example above we used it with <code>position:absolute</code>, then the message would stay near the element on scroll.</p>
<p>The modified <code>createMessageUnder</code> function:</p>
<div class=""code-example"" data-highlight='[{""start"":4,""cols"":[{""start"":15,""end"":31}]},{""start"":2,""cols"":[{""start"":27,""end"":44}]}]' data-trusted=""1"" id=""zh38kyqi5r"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>function createMessageUnder(elem, html) {
  let message = document.createElement('div');
  message.style.cssText = ""position:absolute; color: red"";

  let coords = getCoords(elem);

  message.style.left = coords.left + ""px"";
  message.style.top = coords.bottom + ""px"";

  message.innerHTML = html;

  return message;
}</code></pre>
</div>
</div>
</div><h2><a class=""main__anchor"" href=""#summary"" name=""summary"">Summary</a></h2><p>Any point on the page has coordinates:</p>
<ol>
<li>Relative to the window – <code>elem.getBoundingClientRect()</code>.</li>
<li>Relative to the document – <code>elem.getBoundingClientRect()</code> plus the current page scroll.</li>
</ol>
<p>Window coordinates are great to use with <code>position:fixed</code>, and document coordinates do well with <code>position:absolute</code>.</p>
<p>Both coordinate systems have their pros and cons; there are times we need one or the other one, just like CSS <code>position</code> <code>absolute</code> and <code>fixed</code>.</p>
</div></article><div class=""tasks formatted""><h2 class=""tasks__title"" id=""tasks""><a class=""tasks__title-anchor main__anchor main__anchor main__anchor_noicon"" href=""#tasks"">Tasks</a></h2><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#find-window-coordinates-of-the-field"" name=""find-window-coordinates-of-the-field"">Find window coordinates of the field</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/find-point-coordinates"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>In the iframe below you can see a document with the green “field”.</p>
<p>Use JavaScript to find window coordinates of corners pointed by with arrows.</p>
<p>There’s a small feature implemented in the document for convenience. A click at any place shows coordinates there.</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""><div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_external"" href=""https://en.js.cx/task/find-point-coordinates/source/"" target=""_blank"" title=""open in new window""></a>
</div>
<div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_edit"" data-plunk-id=""XKeG6RccvYDmVJg6"" href=""https://plnkr.co/edit/XKeG6RccvYDmVJg6?p=preview"" target=""_blank"" title=""open in sandbox""></a>
</div>
</div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/find-point-coordinates/source/"" style=""height:360px""></iframe>
</div><p>Your code should use DOM to get window coordinates of:</p>
<ol>
<li>Upper-left, outer corner (that’s simple).</li>
<li>Bottom-right, outer corner (simple too).</li>
<li>Upper-left, inner corner (a bit harder).</li>
<li>Bottom-right, inner corner (there are several ways, choose one).</li>
</ol>
<p>The coordinates that you calculate should be the same as those returned by the mouse click.</p>
<p>P.S. The code should also work if the element has another size or border, not bound to any fixed values.</p>
<p><a data-plunk-id=""XKeG6RccvYDmVJg6"" href=""https://plnkr.co/edit/XKeG6RccvYDmVJg6?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__step task__step_open""><button class=""task__step-show"" onclick=""showStep(this)"" type=""button"">Outer corners</button><div class=""task__answer-content""><h4 class=""task__step-title"">Outer corners</h4><div class=""formatted""><p>Outer corners are basically what we get from <a href=""https://developer.mozilla.org/en-US/docs/DOM/element.getBoundingClientRect"">elem.getBoundingClientRect()</a>.</p>
<p>Coordinates of the upper-left corner <code>answer1</code> and the bottom-right corner <code>answer2</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""eggrg1048i"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let coords = elem.getBoundingClientRect();

let answer1 = [coords.left, coords.top];
let answer2 = [coords.right, coords.bottom];</code></pre>
</div>
</div>
</div></div></div></div><div class=""task__step task__step_open""><button class=""task__step-show"" onclick=""showStep(this)"" type=""button"">Left-upper inner corner</button><div class=""task__answer-content""><h4 class=""task__step-title"">Left-upper inner corner</h4><div class=""formatted""><p>That differs from the outer corner by the border width. A reliable way to get the distance is <code>clientLeft/clientTop</code>:</p>
<div class=""code-example"" data-trusted=""1"" id=""ffrg60eyhv"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let answer3 = [coords.left + field.clientLeft, coords.top + field.clientTop];</code></pre>
</div>
</div>
</div></div></div></div><div class=""task__step task__step_open""><button class=""task__step-show"" onclick=""showStep(this)"" type=""button"">Right-bottom inner corner</button><div class=""task__answer-content""><h4 class=""task__step-title"">Right-bottom inner corner</h4><div class=""formatted""><p>In our case we need to substract the border size from the outer coordinates.</p>
<p>We could use CSS way:</p>
<div class=""code-example"" data-trusted=""1"" id=""jq2l1czdvg"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let answer4 = [
  coords.right - parseInt(getComputedStyle(field).borderRightWidth),
  coords.bottom - parseInt(getComputedStyle(field).borderBottomWidth)
];</code></pre>
</div>
</div>
</div><p>An alternative way would be to add <code>clientWidth/clientHeight</code> to coordinates of the left-upper corner. That’s probably even better:</p>
<div class=""code-example"" data-trusted=""1"" id=""ctw9b8z59a"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>let answer4 = [
  coords.left + elem.clientLeft + elem.clientWidth,
  coords.top + elem.clientTop + elem.clientHeight
];</code></pre>
</div>
</div>
</div><p><a data-plunk-id=""IBrRCQXy9m5vPo60"" href=""https://plnkr.co/edit/IBrRCQXy9m5vPo60?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#show-a-note-near-the-element"" name=""show-a-note-near-the-element"">Show a note near the element</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/position-at"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Create a function <code>positionAt(anchor, position, elem)</code> that positions <code>elem</code>, depending on <code>position</code> near <code>anchor</code> element.</p>
<p>The <code>position</code> must be a string with any one of 3 values:</p>
<ul>
<li><code>""top""</code> – position <code>elem</code> right above <code>anchor</code></li>
<li><code>""right""</code> – position <code>elem</code> immediately at the right of <code>anchor</code></li>
<li><code>""bottom""</code> – position <code>elem</code> right below <code>anchor</code></li>
</ul>
<p>It’s used inside function <code>showNote(anchor, position, html)</code>, provided in the task source code, that creates a “note” element with given <code>html</code> and shows it at the given <code>position</code> near the <code>anchor</code>.</p>
<p>Here’s the demo of notes:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""><div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_external"" href=""https://en.js.cx/task/position-at/solution/"" target=""_blank"" title=""open in new window""></a>
</div>
</div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/position-at/solution/"" style=""height:350px""></iframe>
</div><p><a data-plunk-id=""7i4DSsh8UGU7my5X"" href=""https://plnkr.co/edit/7i4DSsh8UGU7my5X?p=preview"" target=""_blank"">Open a sandbox for the task.</a></p></div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>In this task we only need to accurately calculate the coordinates. See the code for details.</p>
<p>Please note: the elements must be in the document to read <code>offsetHeight</code> and other properties.
A hidden (<code>display:none</code>) or out of the document element has no size.</p>
<p><a data-plunk-id=""KpPSh1WNclyAoe8B"" href=""https://plnkr.co/edit/KpPSh1WNclyAoe8B?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#show-a-note-near-the-element-absolute"" name=""show-a-note-near-the-element-absolute"">Show a note near the element (absolute)</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/position-at-absolute"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Modify the solution of the <a href=""https://javascript.info/task/position-at"">previous task</a> so that the note uses <code>position:absolute</code> instead of <code>position:fixed</code>.</p>
<p>That will prevent its “runaway” from the element when the page scrolls.</p>
<p>Take the solution of that task as a starting point. To test the scroll, add the style <code>&lt;body style=""height: 2000px""&gt;</code>.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p>The solution is actually pretty simple:</p>
<ul>
<li>Use <code>position:absolute</code> in CSS instead of <code>position:fixed</code> for <code>.note</code>.</li>
<li>Use the function <a href=""https://javascript.info/coordinates#getCoords"">getCoords()</a> from the chapter <a href=""https://javascript.info/coordinates"">Coordinates</a> to get document-relative coordinates.</li>
</ul>
<p><a data-plunk-id=""faOuXhUKYA1U0wWo"" href=""https://plnkr.co/edit/faOuXhUKYA1U0wWo?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div><div class=""task tasks__task""><div class=""task__header""><div class=""task__title-wrap""><h3 class=""task__title""><a class=""main__anchor"" href=""#position-the-note-inside-absolute"" name=""position-the-note-inside-absolute"">Position the note inside (absolute)</a></h3><a class=""task__open-link"" href=""https://javascript.info/task/position-inside-absolute"" target=""_blank""></a></div><div class=""task__header-note""><span class=""task__importance"" title=""How important is the task, from 1 to 5"">importance: 5</span></div><div class=""task__content""><div class=""task__formatted""><p>Extend the previous task <a href=""https://javascript.info/task/position-at-absolute"">Show a note near the element (absolute)</a>: teach the function  <code>positionAt(anchor, position, elem)</code> to insert <code>elem</code> inside the <code>anchor</code>.</p>
<p>New values for <code>position</code>:</p>
<ul>
<li><code>top-out</code>, <code>right-out</code>, <code>bottom-out</code> – work the same as before, they insert the <code>elem</code> over/right/under <code>anchor</code>.</li>
<li><code>top-in</code>, <code>right-in</code>, <code>bottom-in</code> – insert <code>elem</code> inside the <code>anchor</code>: stick it to the upper/right/bottom edge.</li>
</ul>
<p>For instance:</p>
<div class=""code-example"" data-trusted=""1"" id=""wkk2ecn99b"">
<div class=""codebox code-example__codebox"">
<div class=""codebox__code"" data-code=""1"">
<pre class=""line-numbers language-javascript""><code>// shows the note above blockquote
positionAt(blockquote, ""top-out"", note);

// shows the note inside blockquote, at the top
positionAt(blockquote, ""top-in"", note);</code></pre>
</div>
</div>
</div><p>The result:</p>
<div class=""code-result"">
<div class=""code-result__toolbar toolbar""><div class=""toolbar__tool"">
<a class=""toolbar__button toolbar__button_external"" href=""https://en.js.cx/task/position-inside-absolute/solution/"" target=""_blank"" title=""open in new window""></a>
</div>
</div>
<iframe class=""code-result__iframe"" data-trusted=""1"" src=""https://en.js.cx/task/position-inside-absolute/solution/"" style=""height:310px""></iframe>
</div><p>As the source code, take the solution of the task <a href=""https://javascript.info/task/position-at-absolute"">Show a note near the element (absolute)</a>.</p>
</div><button class=""task__solution"" type=""button"">solution</button><div class=""task__answer""><div class=""task__answer-content""><div class=""formatted""><p><a data-plunk-id=""tzu5AT4fJA5WaMtF"" href=""https://plnkr.co/edit/tzu5AT4fJA5WaMtF?p=preview"" target=""_blank"">Open the solution in a sandbox.</a></p></div></div><button class=""close-button task__answer-close"" title=""close"" type=""button""></button></div></div></div></div></div></div>"
