topic,title,content
Getting Started,Introduction to Node.js,"<main>
 <h1 id=""introduction-to-nodejs"">
  <a href=""#introduction-to-nodejs"">
   Introduction to Node.js
  </a>
 </h1>
 <p>
  Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project!
 </p>
 <p>
  Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.
 </p>
 <p>
  A Node.js app runs in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.
 </p>
 <p>
  When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.
 </p>
 <p>
  This allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing thread concurrency, which could be a significant source of bugs.
 </p>
 <p>
  Node.js has a unique advantage because millions of frontend developers that write JavaScript for the browser are now able to write the server-side code in addition to the client-side code without the need to learn a completely different language.
 </p>
 <p>
  In Node.js the new ECMAScript standards can be used without problems, as you don't have to wait for all your users to update their browsers - you are in charge of deciding which ECMAScript version to use by changing the Node.js version, and you can also enable specific experimental features by running Node.js with flags.
 </p>
 <h2 id=""an-example-nodejs-application"">
  <a href=""#an-example-nodejs-application"">
   An Example Node.js Application
  </a>
 </h2>
 <p>
  The most common example Hello World of Node.js is a web server:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rlb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rlb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> createServer</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> hostname</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">127.0.0.1</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> port</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 3000</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 200</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setHeader</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">text/plain</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Hello World</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">port</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> hostname</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Server running at http://</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">hostname</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">:</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">port</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">/</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rlb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rlb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  To run this snippet, save it as a
  <code>
   server.js
  </code>
  file and run
  <code>
   node server.js
  </code>
  in your terminal.
If you use mjs version of the code, you should save it as a
  <code>
   server.mjs
  </code>
  file and run
  <code>
   node server.mjs
  </code>
  in your terminal.
 </p>
 <p>
  This code first includes the Node.js
  <a href=""https://nodejs.org/api/http.html"">
   <code>
    http
   </code>
   module
  </a>
  .
 </p>
 <p>
  Node.js has a fantastic
  <a href=""https://nodejs.org/api/"">
   standard library
  </a>
  , including first-class support for networking.
 </p>
 <p>
  The
  <code>
   createServer()
  </code>
  method of
  <code>
   http
  </code>
  creates a new HTTP server and returns it.
 </p>
 <p>
  The server is set to listen on the specified port and host name. When the server is ready, the callback function is called, in this case informing us that the server is running.
 </p>
 <p>
  Whenever a new request is received, the
  <a href=""https://nodejs.org/api/http.html#http_event_request"">
   <code>
    request
   </code>
   event
  </a>
  is called, providing two objects: a request (an
  <a href=""https://nodejs.org/api/http.html#http_class_http_incomingmessage"">
   <code>
    http.IncomingMessage
   </code>
  </a>
  object) and a response (an
  <a href=""https://nodejs.org/api/http.html#http_class_http_serverresponse"">
   <code>
    http.ServerResponse
   </code>
  </a>
  object).
 </p>
 <p>
  Those 2 objects are essential to handle the HTTP call.
 </p>
 <p>
  The first provides the request details. In this simple example, this is not used, but you could access the request headers and request data.
 </p>
 <p>
  The second is used to return data to the caller.
 </p>
 <p>
  In this case with:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 200</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  we set the statusCode property to 200, to indicate a successful response.
 </p>
 <p>
  We set the Content-Type header:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setHeader</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">text/plain</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  and we close the response, adding the content as an argument to
  <code>
   end()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Hello World</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  If you haven't already done so,
  <a href=""https://nodejs.org/en/download"">
   download
  </a>
  Node.js.
 </p>
</main>
"
Getting Started,How much JavaScript do you need to know to use Node.js?,"<main>
 <h1 id=""how-much-javascript-do-you-need-to-know-to-use-nodejs"">
  <a href=""#how-much-javascript-do-you-need-to-know-to-use-nodejs"">
   How much JavaScript do you need to know to use Node.js?
  </a>
 </h1>
 <p>
  As a beginner, it's hard to get to a point where you are confident enough in your programming abilities. While learning to code, you might also be confused at where does JavaScript end, and where Node.js begins, and vice versa.
 </p>
 <h3 id=""what-is-recommended-to-learn-before-diving-deep-with-nodejs"">
  <a href=""#what-is-recommended-to-learn-before-diving-deep-with-nodejs"">
   What is recommended to learn before diving deep with Node.js?
  </a>
 </h3>
 <ul>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"">
    Lexical Structure
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators"">
    Expressions
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"">
    Data Types
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"">
    Classes
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables#what_is_a_variable"">
    Variables
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"">
    Functions
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"">
    <code>
     this
    </code>
    operator
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"">
    Arrow Functions
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration"">
    Loops
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Scope"">
    Scopes
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"">
    Arrays
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"">
    Template Literals
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"">
    Strict Mode
   </a>
  </li>
  <li>
   <a href=""/en/learn/getting-started/ecmascript-2015-es6-and-beyond"">
    ECMAScript 2015 (ES6) and beyond
   </a>
  </li>
 </ul>
 <p>
  With those concepts in mind, you are well on your road to become a proficient JavaScript developer, in both the browser and in Node.js.
 </p>
 <h4 id=""asynchronous-programming"">
  <a href=""#asynchronous-programming"">
   Asynchronous Programming
  </a>
 </h4>
 <p>
  The following concepts are also key to understand asynchronous programming, which is one of the fundamental parts of Node.js:
 </p>
 <ul>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing"">
    Asynchronous programming and callbacks
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/API/setTimeout"">
    Timers
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">
    Promises
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">
    Async and Await
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"">
    Closures
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"">
    The Event Loop
   </a>
  </li>
 </ul>
</main>
"
Getting Started,Differences between Node.js and the Browser,"<main>
 <h1 id=""differences-between-nodejs-and-the-browser"">
  <a href=""#differences-between-nodejs-and-the-browser"">
   Differences between Node.js and the Browser
  </a>
 </h1>
 <p>
  Both the browser and Node.js use JavaScript as their programming language. Building apps that run in the browser is completely different from building a Node.js application. Despite the fact that it's always JavaScript, there are some key differences that make the experience radically different.
 </p>
 <p>
  From the perspective of a frontend developer who extensively uses JavaScript, Node.js apps bring with them a huge advantage: the comfort of programming everything - the frontend and the backend - in a single language.
 </p>
 <p>
  You have a huge opportunity because we know how hard it is to fully, deeply learn a programming language, and by using the same language to perform all your work on the web - both on the client and on the server, you're in a unique position of advantage.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    What changes is the ecosystem.
   </strong>
  </p>
 </blockquote>
 <p>
  In the browser, most of the time what you are doing is interacting with the DOM, or other Web Platform APIs like Cookies. Those do not exist in Node.js, of course. You don't have the
  <code>
   document
  </code>
  ,
  <code>
   window
  </code>
  and all the other objects that are provided by the browser.
 </p>
 <p>
  And in the browser, we don't have all the nice APIs that Node.js provides through its modules, like the filesystem access functionality.
 </p>
 <p>
  Another big difference is that in Node.js you control the environment. Unless you are building an open source application that anyone can deploy anywhere, you know which version of Node.js you will run the application on. Compared to the browser environment, where you don't get the luxury to choose what browser your visitors will use, this is very convenient.
 </p>
 <p>
  This means that you can write all the modern ES2015+ JavaScript that your Node.js version supports. Since JavaScript moves so fast, but browsers can be a bit slow to upgrade, sometimes on the web you are stuck with using older JavaScript / ECMAScript releases. You can use Babel to transform your code to be ES5-compatible before shipping it to the browser, but in Node.js, you won't need that.
 </p>
 <p>
  Another difference is that Node.js supports both the CommonJS and ES module systems (since Node.js v12), while in the browser, we are starting to see the ES Modules standard being implemented.
 </p>
 <p>
  In practice, this means that you can use both
  <code>
   require()
  </code>
  and
  <code>
   import
  </code>
  in Node.js, while you are limited to
  <code>
   import
  </code>
  in the browser.
 </p>
</main>
"
Getting Started,The V8 JavaScript Engine,"<main>
 <h1 id=""the-v8-javascript-engine"">
  <a href=""#the-v8-javascript-engine"">
   The V8 JavaScript Engine
  </a>
 </h1>
 <p>
  V8 is the name of the JavaScript engine that powers Google Chrome. It's the thing that takes our JavaScript and executes it while browsing with Chrome.
 </p>
 <p>
  V8 is the JavaScript engine i.e. it parses and executes JavaScript code. The DOM, and the other Web Platform APIs (they all makeup runtime environment) are provided by the browser.
 </p>
 <p>
  The cool thing is that the JavaScript engine is independent of the browser in which it's hosted. This key feature enabled the rise of Node.js. V8 was chosen to be the engine that powered Node.js back in 2009, and as the popularity of Node.js exploded, V8 became the engine that now powers an incredible amount of server-side code written in JavaScript.
 </p>
 <p>
  The Node.js ecosystem is huge and thanks to V8 which also powers desktop apps, with projects like Electron.
 </p>
 <h2 id=""other-js-engines"">
  <a href=""#other-js-engines"">
   Other JS engines
  </a>
 </h2>
 <p>
  Other browsers have their own JavaScript engine:
 </p>
 <ul>
  <li>
   Firefox has
   <a href=""https://spidermonkey.dev"">
    <strong>
     SpiderMonkey
    </strong>
   </a>
  </li>
  <li>
   Safari has
   <a href=""https://developer.apple.com/documentation/javascriptcore"">
    <strong>
     JavaScriptCore
    </strong>
   </a>
   (also called Nitro)
  </li>
  <li>
   Edge was originally based on
   <a href=""https://github.com/Microsoft/ChakraCore"">
    <strong>
     Chakra
    </strong>
   </a>
   but has more recently been
   <a href=""https://support.microsoft.com/en-us/help/4501095/download-the-new-microsoft-edge-based-on-chromium"">
    rebuilt using Chromium
   </a>
   and the V8 engine.
  </li>
 </ul>
 <p>
  and many others exist as well.
 </p>
 <p>
  All those engines implement the
  <a href=""https://www.ecma-international.org/publications/standards/Ecma-262.htm"">
   ECMA ES-262 standard
  </a>
  , also called ECMAScript, the standard used by JavaScript.
 </p>
 <h2 id=""the-quest-for-performance"">
  <a href=""#the-quest-for-performance"">
   The quest for performance
  </a>
 </h2>
 <p>
  V8 is written in C++, and it's continuously improved. It is portable and runs on Mac, Windows, Linux and several other systems.
 </p>
 <p>
  In this V8 introduction, we will ignore the implementation details of V8: they can be found on more authoritative sites (e.g. the
  <a href=""https://v8.dev/"">
   V8 official site
  </a>
  ), and they change over time, often radically.
 </p>
 <p>
  V8 is always evolving, just like the other JavaScript engines around, to speed up the Web and the Node.js ecosystem.
 </p>
 <p>
  On the web, there is a race for performance that's been going on for years, and we (as users and developers) benefit a lot from this competition because we get faster and more optimized machines year after year.
 </p>
 <h2 id=""compilation"">
  <a href=""#compilation"">
   Compilation
  </a>
 </h2>
 <p>
  JavaScript is generally considered an interpreted language, but modern JavaScript engines no longer just interpret JavaScript, they compile it.
 </p>
 <p>
  This has been happening since 2009, when the SpiderMonkey JavaScript compiler was added to Firefox 3.5, and everyone followed this idea.
 </p>
 <p>
  JavaScript is internally compiled by V8 with
  <strong>
   just-in-time
  </strong>
  (JIT)
  <strong>
   compilation
  </strong>
  to speed up the execution.
 </p>
 <p>
  This might seem counter-intuitive, but since the introduction of Google Maps in 2004, JavaScript has evolved from a language that was generally executing a few dozens of lines of code to complete applications with thousands to hundreds of thousands of lines running in the browser.
 </p>
 <p>
  Our applications can now run for hours inside a browser, rather than being just a few form validation rules or simple scripts.
 </p>
 <p>
  In this
  <em>
   new world
  </em>
  , compiling JavaScript makes perfect sense because while it might take a little bit more to have the JavaScript
  <em>
   ready
  </em>
  , once done it's going to be much more performant than purely interpreted code.
 </p>
</main>
"
Getting Started,An introduction to the npm package manager,"<main>
 <h1 id=""an-introduction-to-the-npm-package-manager"">
  <a href=""#an-introduction-to-the-npm-package-manager"">
   An introduction to the npm package manager
  </a>
 </h1>
 <h2 id=""introduction-to-npm"">
  <a href=""#introduction-to-npm"">
   Introduction to npm
  </a>
 </h2>
 <p>
  <code>
   npm
  </code>
  is the standard package manager for Node.js.
 </p>
 <p>
  In September 2022 over 2.1 million packages were reported being listed in the npm registry, making it the biggest single language code repository on Earth, and you can be sure there is a package for (almost!) everything.
 </p>
 <p>
  It started as a way to download and manage dependencies of Node.js packages, but it has since become a tool used also in frontend JavaScript.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <a href=""https://yarnpkg.com/en/"">
    <strong>
     Yarn
    </strong>
   </a>
   and
   <a href=""https://pnpm.io"">
    <strong>
     pnpm
    </strong>
   </a>
   are alternatives to npm cli. You can check them out as well.
  </p>
 </blockquote>
 <h2 id=""packages"">
  <a href=""#packages"">
   Packages
  </a>
 </h2>
 <p>
  <code>
   npm
  </code>
  installs, updates and manages downloads of dependencies of your project. Dependencies are pre-built pieces of code, such as libraries and packages, that your Node.js application needs to work.
 </p>
 <h3 id=""installing-all-dependencies"">
  <a href=""#installing-all-dependencies"">
   Installing all dependencies
  </a>
 </h3>
 <p>
  If a project has a
  <code>
   package.json
  </code>
  file, by running
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> install</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  it will install everything the project needs, in the
  <code>
   node_modules
  </code>
  folder, creating it if it's not existing already.
 </p>
 <h3 id=""installing-a-single-package"">
  <a href=""#installing-a-single-package"">
   Installing a single package
  </a>
 </h3>
 <p>
  You can also install a specific package by running
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> install</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#A3BE8C"">package-nam</span><span style=""color:#D8DEE9FF"">e</span><span style=""color:#81A1C1"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Furthermore, since npm 5, this command adds
  <code>
   &lt;package-name&gt;
  </code>
  to the
  <code>
   package.json
  </code>
  file
  <em>
   dependencies
  </em>
  . Before version 5, you needed to add the flag
  <code>
   --save
  </code>
  .
 </p>
 <p>
  Often you'll see more flags added to this command:
 </p>
 <ul>
  <li>
   <code>
    --save-dev
   </code>
   installs and adds the entry to the
   <code>
    package.json
   </code>
   file
   <em>
    devDependencies
   </em>
  </li>
  <li>
   <code>
    --no-save
   </code>
   installs but does not add the entry to the
   <code>
    package.json
   </code>
   file
   <em>
    dependencies
   </em>
  </li>
  <li>
   <code>
    --save-optional
   </code>
   installs and adds the entry to the
   <code>
    package.json
   </code>
   file
   <em>
    optionalDependencies
   </em>
  </li>
  <li>
   <code>
    --no-optional
   </code>
   will prevent optional dependencies from being installed
  </li>
 </ul>
 <p>
  Shorthands of the flags can also be used:
 </p>
 <ul>
  <li>
   -S:
   <code>
    --save
   </code>
  </li>
  <li>
   -D:
   <code>
    --save-dev
   </code>
  </li>
  <li>
   -O:
   <code>
    --save-optional
   </code>
  </li>
 </ul>
 <p>
  The difference between
  <em>
   devDependencies
  </em>
  and
  <em>
   dependencies
  </em>
  is that the former contains development tools, like a testing library, while the latter is bundled with the app in production.
 </p>
 <p>
  As for the
  <em>
   optionalDependencies
  </em>
  the difference is that build failure of the dependency will not cause installation to fail. But it is your program's responsibility to handle the lack of the dependency. Read more about
  <a href=""https://docs.npmjs.com/cli/configuring-npm/package-json#optionaldependencies"">
   optional dependencies
  </a>
  .
 </p>
 <h3 id=""updating-packages"">
  <a href=""#updating-packages"">
   Updating packages
  </a>
 </h3>
 <p>
  Updating is also made easy, by running
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> update</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  <code>
   npm
  </code>
  will check all packages for a newer version that satisfies your versioning constraints.
 </p>
 <p>
  You can specify a single package to update as well:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> update</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#A3BE8C"">package-nam</span><span style=""color:#D8DEE9FF"">e</span><span style=""color:#81A1C1"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h2 id=""versioning"">
  <a href=""#versioning"">
   Versioning
  </a>
 </h2>
 <p>
  In addition to plain downloads,
  <code>
   npm
  </code>
  also manages
  <strong>
   versioning
  </strong>
  , so you can specify any specific version of a package, or require a version higher or lower than what you need.
 </p>
 <p>
  Many times you'll find that a library is only compatible with a major release of another library.
 </p>
 <p>
  Or a bug in the latest release of a lib, still unfixed, is causing an issue.
 </p>
 <p>
  Specifying an explicit version of a library also helps to keep everyone on the same exact version of a package, so that the whole team runs the same version until the
  <code>
   package.json
  </code>
  file is updated.
 </p>
 <p>
  In all those cases, versioning helps a lot, and
  <code>
   npm
  </code>
  follows the semantic versioning (semver) standard.
 </p>
 <p>
  You can install a specific version of a package, by running
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> install</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#A3BE8C"">package-nam</span><span style=""color:#D8DEE9FF"">e</span><span style=""color:#81A1C1"">&gt;</span><span style=""color:#A3BE8C"">@</span><span style=""color:#81A1C1"">&lt;</span><span style=""color:#A3BE8C"">versio</span><span style=""color:#D8DEE9FF"">n</span><span style=""color:#81A1C1"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h2 id=""running-tasks"">
  <a href=""#running-tasks"">
   Running Tasks
  </a>
 </h2>
 <p>
  The package.json file supports a format for specifying command line tasks that can be run by using
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> run</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#A3BE8C"">task-nam</span><span style=""color:#D8DEE9FF"">e</span><span style=""color:#81A1C1"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  For example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">scripts</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">start-dev</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">node lib/server-development</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">start</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">node lib/server-production</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  It's very common to use this feature to run Webpack:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">scripts</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">watch</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">webpack --watch --progress --colors --config webpack.conf.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">dev</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">webpack --progress --colors --config webpack.conf.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">prod</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">NODE_ENV=production webpack -p --config webpack.conf.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  So instead of typing those long commands, which are easy to forget or mistype, you can run
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">$</span><span style=""color:#D8DEE9FF""> npm run watch</span></span>
<span class=""line""><span style=""color:#ECEFF4"">$</span><span style=""color:#D8DEE9FF""> npm run dev</span></span>
<span class=""line""><span style=""color:#ECEFF4"">$</span><span style=""color:#D8DEE9FF""> npm run prod</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
</main>
"
Getting Started,ECMAScript 2015 (ES6) and beyond,"<main>
 <h1 id=""ecmascript-2015-es6-and-beyond"">
  <a href=""#ecmascript-2015-es6-and-beyond"">
   ECMAScript 2015 (ES6) and beyond
  </a>
 </h1>
 <p>
  Node.js is built against modern versions of
  <a href=""https://v8.dev/"">
   V8
  </a>
  . By keeping up-to-date with the latest releases of this engine, we ensure new features from the
  <a href=""http://www.ecma-international.org/publications/standards/Ecma-262.htm"">
   JavaScript ECMA-262 specification
  </a>
  are brought to Node.js developers in a timely manner, as well as continued performance and stability improvements.
 </p>
 <p>
  All ECMAScript 2015 (ES6) features are split into three groups for
  <strong>
   shipping
  </strong>
  ,
  <strong>
   staged
  </strong>
  , and
  <strong>
   in progress
  </strong>
  features:
 </p>
 <ul>
  <li>
   All
   <strong>
    shipping
   </strong>
   features, which V8 considers stable, are turned
   <strong>
    on by default on Node.js
   </strong>
   and do
   <strong>
    NOT
   </strong>
   require any kind of runtime flag.
  </li>
  <li>
   <strong>
    Staged
   </strong>
   features, which are almost-completed features that are not considered stable by the V8 team, require a runtime flag:
   <code>
    --harmony
   </code>
   .
  </li>
  <li>
   <strong>
    In progress
   </strong>
   features can be activated individually by their respective harmony flag, although this is highly discouraged unless for testing purposes. Note: these flags are exposed by V8 and will potentially change without any deprecation notice.
  </li>
 </ul>
 <h3 id=""which-features-ship-with-which-nodejs-version-by-default"">
  <a href=""#which-features-ship-with-which-nodejs-version-by-default"">
   Which features ship with which Node.js version by default?
  </a>
 </h3>
 <p>
  The website
  <a href=""https://node.green/"">
   node.green
  </a>
  provides an excellent overview over supported ECMAScript features in various versions of Node.js, based on kangax's compat-table.
 </p>
 <h3 id=""which-features-are-in-progress"">
  <a href=""#which-features-are-in-progress"">
   Which features are in progress?
  </a>
 </h3>
 <p>
  New features are constantly being added to the V8 engine. Generally speaking, expect them to land on a future Node.js release, although timing is unknown.
 </p>
 <p>
  You may list all the
  <em>
   in progress
  </em>
  features available on each Node.js release by grepping through the
  <code>
   --v8-options
  </code>
  argument. Please note that these are incomplete and possibly broken features of V8, so use them at your own risk:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --v8-options</span><span style=""color:#81A1C1""> |</span><span style=""color:#88C0D0""> grep</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">in progress</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""i-have-my-infrastructure-set-up-to-leverage-the---harmony-flag-should-i-remove-it"">
  <a href=""#i-have-my-infrastructure-set-up-to-leverage-the---harmony-flag-should-i-remove-it"">
   I have my infrastructure set up to leverage the --harmony flag. Should I remove it?
  </a>
 </h3>
 <p>
  The current behavior of the
  <code>
   --harmony
  </code>
  flag on Node.js is to enable
  <strong>
   staged
  </strong>
  features only. After all, it is now a synonym of
  <code>
   --es_staging
  </code>
  . As mentioned above, these are completed features that have not been considered stable yet. If you want to play safe, especially on production environments, consider removing this runtime flag until it ships by default on V8 and, consequently, on Node.js. If you keep this enabled, you should be prepared for further Node.js upgrades to break your code if V8 changes their semantics to more closely follow the standard.
 </p>
 <h3 id=""how-do-i-find-which-version-of-v8-ships-with-a-particular-version-of-nodejs"">
  <a href=""#how-do-i-find-which-version-of-v8-ships-with-a-particular-version-of-nodejs"">
   How do I find which version of V8 ships with a particular version of Node.js?
  </a>
 </h3>
 <p>
  Node.js provides a simple way to list all dependencies and respective versions that ship with a specific binary through the
  <code>
   process
  </code>
  global object. In case of the V8 engine, type the following in your terminal to retrieve its version:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> -p</span><span style=""color:#A3BE8C""> process.versions.v8</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
</main>
"
Getting Started,"Node.js, the difference between development and production","<main>
 <h1 id=""nodejs-the-difference-between-development-and-production"">
  <a href=""#nodejs-the-difference-between-development-and-production"">
   Node.js, the difference between development and production
  </a>
 </h1>
 <p>
  <strong>
   There is no difference between development and production in Node.js
  </strong>
  , i.e., there are no specific settings you need to apply to make Node.js work in a production configuration.
However, a few libraries in the npm registry recognize using the
  <code>
   NODE_ENV
  </code>
  variable and default it to a
  <code>
   development
  </code>
  setting.
Always run your Node.js with the
  <code>
   NODE_ENV=production
  </code>
  set.
 </p>
 <p>
  A popular way of configuring your application is by using the
  <a href=""https://12factor.net/"">
   twelve factor methodology
  </a>
  .
 </p>
 <h2 id=""why-is-node_env-considered-an-antipattern"">
  <a href=""#why-is-node_env-considered-an-antipattern"">
   Why is NODE_ENV considered an antipattern?
  </a>
 </h2>
 <p>
  An environment is a digital platform or a system where engineers can build, test,
  <em>
   deploy
  </em>
  , and manage software products. Conventionally, there are four stages or types of environments where our application is run:
 </p>
 <ul>
  <li>
   Development
  </li>
  <li>
   Testing
  </li>
  <li>
   Staging
  </li>
  <li>
   Production
  </li>
 </ul>
 <p>
  The fundamental problem of
  <code>
   NODE_ENV
  </code>
  stems from developers combining optimizations and software behavior with the environment their software is running on. The result is code like the following:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">NODE_ENV</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">development</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">  // ...</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">NODE_ENV</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">production</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">  // ...</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">if</span><span style=""color:#D8DEE9FF""> ([</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">production</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">staging</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">includes</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">NODE_ENV</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">  // ...</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  While this might look harmless, it makes the production and staging environments different, thus making reliable testing impossible. For example a test and thus a functionality of your product could pass when
  <code>
   NODE_ENV
  </code>
  is set to
  <code>
   development
  </code>
  but fail when setting
  <code>
   NODE_ENV
  </code>
  to
  <code>
   production
  </code>
  .
Therefore, setting
  <code>
   NODE_ENV
  </code>
  to anything but
  <code>
   production
  </code>
  is considered an
  <em>
   antipattern
  </em>
  .
 </p>
</main>
"
Getting Started,Node.js with WebAssembly,"<main>
 <h1 id=""nodejs-with-webassembly"">
  <a href=""#nodejs-with-webassembly"">
   Node.js with WebAssembly
  </a>
 </h1>
 <p>
  <strong>
   <a href=""https://webassembly.org"">
    WebAssembly
   </a>
  </strong>
  is a high-performance assembly-like language that can be compiled from various languages, including C/C++, Rust, and AssemblyScript. Currently, it is supported by Chrome, Firefox, Safari, Edge, and Node.js!
 </p>
 <p>
  The WebAssembly specification details two file formats, a binary format called a WebAssembly Module with a
  <code>
   .wasm
  </code>
  extension and corresponding text representation called WebAssembly Text format with a
  <code>
   .wat
  </code>
  extension.
 </p>
 <h2 id=""key-concepts"">
  <a href=""#key-concepts"">
   Key Concepts
  </a>
 </h2>
 <ul>
  <li>
   Module - A compiled WebAssembly binary, ie a
   <code>
    .wasm
   </code>
   file.
  </li>
  <li>
   Memory - A resizable ArrayBuffer.
  </li>
  <li>
   Table - A resizable typed array of references not stored in Memory.
  </li>
  <li>
   Instance - An instantiation of a Module with its Memory, Table, and variables.
  </li>
 </ul>
 <p>
  In order to use WebAssembly, you need a
  <code>
   .wasm
  </code>
  binary file and a set of APIs to communicate with WebAssembly. Node.js provides the necessary APIs via the global
  <code>
   WebAssembly
  </code>
  object.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">WebAssembly</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">/*</span></span>
<span class=""line""><span style=""color:#707e99"">Object [WebAssembly] {</span></span>
<span class=""line""><span style=""color:#707e99"">  compile: [Function: compile],</span></span>
<span class=""line""><span style=""color:#707e99"">  validate: [Function: validate],</span></span>
<span class=""line""><span style=""color:#707e99"">  instantiate: [Function: instantiate]</span></span>
<span class=""line""><span style=""color:#707e99"">}</span></span>
<span class=""line""><span style=""color:#707e99"">*/</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""generating-webassembly-modules"">
  <a href=""#generating-webassembly-modules"">
   Generating WebAssembly Modules
  </a>
 </h2>
 <p>
  There are multiple methods available to generate WebAssembly binary files including:
 </p>
 <ul>
  <li>
   Writing WebAssembly (
   <code>
    .wat
   </code>
   ) by hand and converting to binary format using tools such as
   <a href=""https://github.com/webassembly/wabt"">
    wabt
   </a>
  </li>
  <li>
   Using
   <a href=""https://emscripten.org/"">
    emscripten
   </a>
   with a C/C++ application
  </li>
  <li>
   Using
   <a href=""https://rustwasm.github.io/wasm-pack/book/"">
    wasm-pack
   </a>
   with a Rust application
  </li>
  <li>
   Using
   <a href=""https://www.assemblyscript.org/"">
    AssemblyScript
   </a>
   if you prefer a TypeScript-like experience
  </li>
 </ul>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Some of these tools generate not only the binary file, but the JavaScript ""glue"" code and corresponding HTML files to run in the browser.
  </p>
 </blockquote>
 <h2 id=""how-to-use-it"">
  <a href=""#how-to-use-it"">
   How to use it
  </a>
 </h2>
 <p>
  Once you have a WebAssembly module, you can use the Node.js
  <code>
   WebAssembly
  </code>
  object to instantiate it.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rrb9utjfb:-trigger-js-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rrb9utjfb:-content-js-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// Assume add.wasm file exists that contains a single function adding 2 provided arguments</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Use the readFileSync function to read the contents of the ""add.wasm"" file</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> wasmBuffer</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFileSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/path/to/add.wasm</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Use the WebAssembly.instantiate method to instantiate the WebAssembly module</span></span>
<span class=""line""><span style=""color:#D8DEE9"">WebAssembly</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">instantiate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">wasmBuffer</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">then</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">wasmModule</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // Exported function lives under instance.exports object</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> add</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> wasmModule</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">instance</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">exports</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> sum</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> add</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">5</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 6</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">sum</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Outputs: 11</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rrb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rrb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""interacting-with-the-os"">
  <a href=""#interacting-with-the-os"">
   Interacting with the OS
  </a>
 </h2>
 <p>
  WebAssembly modules cannot directly access OS functionality on its own. A third-party tool
  <a href=""https://docs.wasmtime.dev/"">
   Wasmtime
  </a>
  can be used to access this functionality.
  <code>
   Wasmtime
  </code>
  utilizes the
  <a href=""https://wasi.dev/"">
   WASI
  </a>
  API to access the OS functionality.
 </p>
 <h2 id=""resources"">
  <a href=""#resources"">
   Resources
  </a>
 </h2>
 <ul>
  <li>
   <a href=""https://webassembly.org/"">
    General WebAssembly Information
   </a>
  </li>
  <li>
   <a href=""https://developer.mozilla.org/en-US/docs/WebAssembly"">
    MDN Docs
   </a>
  </li>
  <li>
   <a href=""https://webassembly.github.io/spec/core/text/index.html"">
    Write WebAssembly by hand
   </a>
  </li>
 </ul>
</main>
"
Getting Started,Debugging Node.js,"<main>
 <h1 id=""debugging-nodejs"">
  <a href=""#debugging-nodejs"">
   Debugging Node.js
  </a>
 </h1>
 <p>
  This guide will help you get started debugging your Node.js apps and scripts.
 </p>
 <h2 id=""enable-inspector"">
  <a href=""#enable-inspector"">
   Enable Inspector
  </a>
 </h2>
 <p>
  When started with the
  <code>
   --inspect
  </code>
  switch, a Node.js process listens for a
debugging client. By default, it will listen at host and port 127.0.0.1:9229.
Each process is also assigned a unique
  <a href=""https://tools.ietf.org/html/rfc4122"">
   UUID
  </a>
  .
 </p>
 <p>
  Inspector clients must know and specify host address, port, and UUID to connect.
A full URL will look something like
  <code>
   ws://127.0.0.1:9229/0f2c936f-b1cd-4ac9-aab3-f63b0f33d55e
  </code>
  .
 </p>
 <p>
  Node.js will also start listening for debugging messages if it receives a
  <code>
   SIGUSR1
  </code>
  signal. (
  <code>
   SIGUSR1
  </code>
  is not available on Windows.) In Node.js 7 and
earlier, this activates the legacy Debugger API. In Node.js 8 and later, it will
activate the Inspector API.
 </p>
 <h2 id=""security-implications"">
  <a href=""#security-implications"">
   Security Implications
  </a>
 </h2>
 <p>
  Since the debugger has full access to the Node.js execution environment, a
malicious actor able to connect to this port may be able to execute arbitrary
code on behalf of the Node.js process. It is important to understand the security
implications of exposing the debugger port on public and private networks.
 </p>
 <h3 id=""exposing-the-debug-port-publicly-is-unsafe"">
  <a href=""#exposing-the-debug-port-publicly-is-unsafe"">
   Exposing the debug port publicly is unsafe
  </a>
 </h3>
 <p>
  If the debugger is bound to a public IP address, or to 0.0.0.0, any clients that
can reach your IP address will be able to connect to the debugger without any
restriction and will be able to run arbitrary code.
 </p>
 <p>
  By default
  <code>
   node --inspect
  </code>
  binds to 127.0.0.1. You explicitly need to provide a
public IP address or 0.0.0.0, etc., if you intend to allow external connections
to the debugger. Doing so may expose you to a potentially significant security
threat. We suggest you ensure appropriate firewalls and access controls in place
to prevent a security exposure.
 </p>
 <p>
  See the section on '
  <a href=""#enabling-remote-debugging-scenarios"">
   Enabling remote debugging scenarios
  </a>
  ' on some advice on how
to safely allow remote debugger clients to connect.
 </p>
 <h3 id=""local-applications-have-full-access-to-the-inspector"">
  <a href=""#local-applications-have-full-access-to-the-inspector"">
   Local applications have full access to the inspector
  </a>
 </h3>
 <p>
  Even if you bind the inspector port to 127.0.0.1 (the default), any applications
running locally on your machine will have unrestricted access. This is by design
to allow local debuggers to be able to attach conveniently.
 </p>
 <h3 id=""browsers-websockets-and-same-origin-policy"">
  <a href=""#browsers-websockets-and-same-origin-policy"">
   Browsers, WebSockets and same-origin policy
  </a>
 </h3>
 <p>
  Websites open in a web-browser can make WebSocket and HTTP requests under the
browser security model. An initial HTTP connection is necessary to obtain a
unique debugger session id. The same-origin-policy prevents websites from being
able to make this HTTP connection. For additional security against
  <a href=""https://en.wikipedia.org/wiki/DNS_rebinding"">
   DNS rebinding attacks
  </a>
  , Node.js
verifies that the 'Host' headers for the connection either
specify an IP address or
  <code>
   localhost
  </code>
  precisely.
 </p>
 <p>
  These security policies disallow connecting to a remote debug server by
specifying the hostname. You can work-around this restriction by specifying
either the IP address or by using ssh tunnels as described below.
 </p>
 <h2 id=""inspector-clients"">
  <a href=""#inspector-clients"">
   Inspector Clients
  </a>
 </h2>
 <p>
  A minimal CLI debugger is available with
  <code>
   node inspect myscript.js
  </code>
  .
Several commercial and open source tools can also connect to the Node.js Inspector.
 </p>
 <h3 id=""chrome-devtools-55-microsoft-edge"">
  <a href=""#chrome-devtools-55-microsoft-edge"">
   Chrome DevTools 55+, Microsoft Edge
  </a>
 </h3>
 <ul>
  <li>
   <strong>
    Option 1
   </strong>
   : Open
   <code>
    chrome://inspect
   </code>
   in a Chromium-based
browser or
   <code>
    edge://inspect
   </code>
   in Edge. Click the Configure button and ensure your target host and port
are listed.
  </li>
  <li>
   <strong>
    Option 2
   </strong>
   : Copy the
   <code>
    devtoolsFrontendUrl
   </code>
   from the output of
   <code>
    /json/list
   </code>
   (see above) or the --inspect hint text and paste into Chrome.
  </li>
 </ul>
 <p>
  See
  <a href=""https://github.com/ChromeDevTools/devtools-frontend"">
   https://github.com/ChromeDevTools/devtools-frontend
  </a>
  ,
  <a href=""https://www.microsoftedgeinsider.com"">
   https://www.microsoftedgeinsider.com
  </a>
  for more information.
 </p>
 <h3 id=""visual-studio-code-110"">
  <a href=""#visual-studio-code-110"">
   Visual Studio Code 1.10+
  </a>
 </h3>
 <ul>
  <li>
   In the Debug panel, click the settings icon to open
   <code>
    .vscode/launch.json
   </code>
   .
Select ""Node.js"" for initial setup.
  </li>
 </ul>
 <p>
  See
  <a href=""https://github.com/microsoft/vscode"">
   https://github.com/microsoft/vscode
  </a>
  for more information.
 </p>
 <h3 id=""visual-studio-2017"">
  <a href=""#visual-studio-2017"">
   Visual Studio 2017+
  </a>
 </h3>
 <ul>
  <li>
   Choose ""Debug &gt; Start Debugging"" from the menu or hit F5.
  </li>
  <li>
   <a href=""https://github.com/Microsoft/nodejstools/wiki/Debugging"">
    Detailed instructions
   </a>
   .
  </li>
 </ul>
 <h3 id=""jetbrains-webstorm-and-other-jetbrains-ides"">
  <a href=""#jetbrains-webstorm-and-other-jetbrains-ides"">
   JetBrains WebStorm and other JetBrains IDEs
  </a>
 </h3>
 <ul>
  <li>
   Create a new Node.js debug configuration and hit Debug.
   <code>
    --inspect
   </code>
   will be used
by default for Node.js 7+. To disable uncheck
   <code>
    js.debugger.node.use.inspect
   </code>
   in
the IDE Registry. To learn more about running and debugging Node.js in WebStorm and other JetBrains IDEs,
check out
   <a href=""https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html"">
    WebStorm online help
   </a>
   .
  </li>
 </ul>
 <h3 id=""chrome-remote-interface"">
  <a href=""#chrome-remote-interface"">
   chrome-remote-interface
  </a>
 </h3>
 <ul>
  <li>
   Library to ease connections to
   <a href=""https://chromedevtools.github.io/debugger-protocol-viewer/v8/"">
    Inspector Protocol
   </a>
   endpoints.
  </li>
 </ul>
 <p>
  See
  <a href=""https://github.com/cyrus-and/chrome-remote-interface"">
   https://github.com/cyrus-and/chrome-remote-interface
  </a>
  for more information.
 </p>
 <h3 id=""gitpod"">
  <a href=""#gitpod"">
   Gitpod
  </a>
 </h3>
 <ul>
  <li>
   Start a Node.js debug configuration from the
   <code>
    Debug
   </code>
   view or hit
   <code>
    F5
   </code>
   .
   <a href=""https://medium.com/gitpod/debugging-node-js-applications-in-theia-76c94c76f0a1"">
    Detailed instructions
   </a>
  </li>
 </ul>
 <p>
  See
  <a href=""https://www.gitpod.io"">
   https://www.gitpod.io
  </a>
  for more information.
 </p>
 <h3 id=""eclipse-ide-with-eclipse-wild-web-developer-extension"">
  <a href=""#eclipse-ide-with-eclipse-wild-web-developer-extension"">
   Eclipse IDE with Eclipse Wild Web Developer extension
  </a>
 </h3>
 <ul>
  <li>
   From a .js file, choose ""Debug As... &gt; Node program"", or
  </li>
  <li>
   Create a Debug Configuration to attach debugger to running Node.js application (already started with
   <code>
    --inspect
   </code>
   ).
  </li>
 </ul>
 <p>
  See
  <a href=""https://eclipse.org/eclipseide"">
   https://eclipse.org/eclipseide
  </a>
  for more information.
 </p>
 <h2 id=""command-line-options"">
  <a href=""#command-line-options"">
   Command-line options
  </a>
 </h2>
 <p>
  The following table lists the impact of various runtime flags on debugging:
 </p>
 <table>
  <thead>
   <tr>
    <th>
     Flag
    </th>
    <th>
     Meaning
    </th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td>
     --inspect
    </td>
    <td>
     Enable inspector agent; Listen on default address and port (127.0.0.1:9229)
    </td>
   </tr>
   <tr>
    <td>
     --inspect=[host:port]
    </td>
    <td>
     Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229)
    </td>
   </tr>
   <tr>
    <td>
     --inspect-brk
    </td>
    <td>
     Enable inspector agent; Listen on default address and port (127.0.0.1:9229); Break before user code starts
    </td>
   </tr>
   <tr>
    <td>
     --inspect-brk=[host:port]
    </td>
    <td>
     Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229); Break before user code starts
    </td>
   </tr>
   <tr>
    <td>
     --inspect-wait
    </td>
    <td>
     Enable inspector agent; Listen on default address and port (127.0.0.1:9229); Wait for debugger to be attached.
    </td>
   </tr>
   <tr>
    <td>
     --inspect-wait=[host:port]
    </td>
    <td>
     Enable inspector agent; Bind to address or hostname host (default: 127.0.0.1); Listen on port port (default: 9229); Wait for debugger to be attached.
    </td>
   </tr>
   <tr>
    <td>
     node inspect script.js
    </td>
    <td>
     Spawn child process to run user's script under --inspect flag; and use main process to run CLI debugger.
    </td>
   </tr>
   <tr>
    <td>
     node inspect --port=xxxx script.js
    </td>
    <td>
     Spawn child process to run user's script under --inspect flag; and use main process to run CLI debugger. Listen on port port (default: 9229)
    </td>
   </tr>
  </tbody>
 </table>
 <h2 id=""enabling-remote-debugging-scenarios"">
  <a href=""#enabling-remote-debugging-scenarios"">
   Enabling remote debugging scenarios
  </a>
 </h2>
 <p>
  We recommend that you never have the debugger listen on a public IP address. If
you need to allow remote debugging connections we recommend the use of ssh
tunnels instead. We provide the following example for illustrative purposes only.
Please understand the security risk of allowing remote access to a privileged
service before proceeding.
 </p>
 <p>
  Let's say you are running Node.js on a remote machine, remote.example.com, that
you want to be able to debug. On that machine, you should start the node process
with the inspector listening only to localhost (the default).
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --inspect</span><span style=""color:#A3BE8C""> server.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Now, on your local machine from where you want to initiate a debug client
connection, you can setup an ssh tunnel:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">ssh</span><span style=""color:#A3BE8C""> -L</span><span style=""color:#A3BE8C""> 9221:localhost:9229</span><span style=""color:#A3BE8C""> <a class=""__cf_email__"" data-cfemail=""097c7a6c7b497b6c64667d6c276c71686479656c276a6664"" href=""/cdn-cgi/l/email-protection"">[email protected]</a></span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  This starts a ssh tunnel session where a connection to port 9221 on your local
machine will be forwarded to port 9229 on remote.example.com. You can now attach
a debugger such as Chrome DevTools or Visual Studio Code to localhost:9221,
which should be able to debug as if the Node.js application was running locally.
 </p>
 <h2 id=""legacy-debugger"">
  <a href=""#legacy-debugger"">
   Legacy Debugger
  </a>
 </h2>
 <p>
  <strong>
   The legacy debugger has been deprecated as of Node.js 7.7.0. Please use
   <code>
    --inspect
   </code>
   and Inspector instead.
  </strong>
 </p>
 <p>
  When started with the
  <strong>
   --debug
  </strong>
  or
  <strong>
   --debug-brk
  </strong>
  switches in version 7 and
earlier, Node.js listens for debugging commands defined by the discontinued
V8 Debugging Protocol on a TCP port, by default
  <code>
   5858
  </code>
  . Any debugger client
which speaks this protocol can connect to and debug the running process; a
couple popular ones are listed below.
 </p>
 <p>
  The V8 Debugging Protocol is no longer maintained or documented.
 </p>
 <h3 id=""built-in-debugger"">
  <a href=""#built-in-debugger"">
   Built-in Debugger
  </a>
 </h3>
 <p>
  Start
  <code>
   node debug script_name.js
  </code>
  to start your script under the builtin
command-line debugger. Your script starts in another Node.js process started with
the
  <code>
   --debug-brk
  </code>
  option, and the initial Node.js process runs the
  <code>
   _debugger.js
  </code>
  script and connects to your target. See
  <a href=""https://nodejs.org/dist/latest/docs/api/debugger.html"">
   docs
  </a>
  for more information.
 </p>
 <h3 id=""node-inspector"">
  <a href=""#node-inspector"">
   node-inspector
  </a>
 </h3>
 <p>
  Debug your Node.js app with Chrome DevTools by using an intermediary process
which translates the
  <a href=""https://chromedevtools.github.io/debugger-protocol-viewer/v8/"">
   Inspector Protocol
  </a>
  used in Chromium to the V8 Debugger
protocol used in Node.js. See
  <a href=""https://github.com/node-inspector/node-inspector"">
   https://github.com/node-inspector/node-inspector
  </a>
  for more information.
 </p>
</main>
"
Getting Started,Profiling Node.js Applications,"<main>
 <h1 id=""profiling-nodejs-applications"">
  <a href=""#profiling-nodejs-applications"">
   Profiling Node.js Applications
  </a>
 </h1>
 <p>
  Profiling a Node.js application involves measuring its performance by analyzing
the CPU, memory, and other runtime metrics while the application is running.
This helps in identifying bottlenecks, high CPU usage, memory leaks, or slow
function calls that may impact the application's efficiency, responsiveness
and scalability.
 </p>
 <p>
  There are many third party tools available for profiling Node.js applications
but, in many cases, the easiest option is to use the Node.js built-in profiler.
The built-in profiler uses the
  <a href=""https://v8.dev/docs/profile"">
   profiler inside V8
  </a>
  which samples the stack at
regular intervals during program execution. It records the results of these
samples, along with important optimization events such as jit compiles, as a
series of ticks:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>code-creation,LazyCompile,0,0x2d5000a337a0,396,""bp</span><span> </span><span>native</span><span> </span><span>array.js:1153:16"",0x289f644df68,~</span></span>
<span class=""line""><span>code-creation,LazyCompile,0,0x2d5000a33940,716,""hasOwnProperty</span><span> </span><span>native</span><span> </span><span>v8natives.js:198:30"",0x289f64438d0,~</span></span>
<span class=""line""><span>code-creation,LazyCompile,0,0x2d5000a33c20,284,""ToName</span><span> </span><span>native</span><span> </span><span>runtime.js:549:16"",0x289f643bb28,~</span></span>
<span class=""line""><span>code-creation,Stub,2,0x2d5000a33d40,182,""DoubleToIStub""</span></span>
<span class=""line""><span>code-creation,Stub,2,0x2d5000a33e00,507,""NumberToStringStub""</span></span>
</code></pre>
 </div>
 <p>
  In the past, you needed the V8 source code to be able to interpret the ticks.
Luckily, tools have been introduced since Node.js 4.4.0 that facilitate the
consumption of this information without separately building V8 from source.
Let's see how the built-in profiler can help provide insight into application
performance.
 </p>
 <p>
  To illustrate the use of the tick profiler, we will work with a simple Express
application. Our application will have two handlers, one for adding new users to
our system:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/newUser</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> password</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> username</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">replace</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">/[</span><span style=""color:#EBCB8B"">!@#$%^&amp;*</span><span style=""color:#ECEFF4"">]/</span><span style=""color:#81A1C1"">g</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#D8DEE9""> users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">400</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> salt</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> crypto</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">randomBytes</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">128</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">base64</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> hash</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> crypto</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pbkdf2Sync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">password</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> salt</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 10000</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 512</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">sha512</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">] </span><span style=""color:#81A1C1"">=</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> salt</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> hash</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  and another for validating user authentication attempts:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/auth</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> password</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> username</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">replace</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">/[</span><span style=""color:#EBCB8B"">!@#$%^&amp;*</span><span style=""color:#ECEFF4"">]/</span><span style=""color:#81A1C1"">g</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">400</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> salt</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> hash</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> encryptHash</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> crypto</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pbkdf2Sync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">password</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> salt</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 10000</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 512</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">sha512</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">crypto</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">timingSafeEqual</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">hash</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> encryptHash</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">401</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <em>
   Please note that these are NOT recommended handlers for authenticating users in
your Node.js applications and are used purely for illustration purposes. You
should not be trying to design your own cryptographic authentication mechanisms
in general. It is much better to use existing, proven authentication solutions.
  </em>
 </p>
 <p>
  Now assume that we've deployed our application and users are complaining about
high latency on requests. We can easily run the app with the built-in profiler:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>NODE_ENV=production</span><span> </span><span>node</span><span> </span><span>--prof</span><span> </span><span>app.js</span></span>
</code></pre>
 </div>
 <p>
  and put some load on the server using
  <code>
   ab
  </code>
  (ApacheBench):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>curl</span><span> </span><span>-X</span><span> </span><span>GET</span><span> </span><span>""http://localhost:8080/newUser?username=matt&amp;password=password""</span></span>
<span class=""line""><span>ab</span><span> </span><span>-k</span><span> </span><span>-c</span><span> </span><span>20</span><span> </span><span>-n</span><span> </span><span>250</span><span> </span><span>""http://localhost:8080/auth?username=matt&amp;password=password""</span></span>
</code></pre>
 </div>
 <p>
  and get an ab output of:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>Concurrency</span><span> </span><span>Level:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>20</span></span>
<span class=""line""><span>Time</span><span> </span><span>taken</span><span> </span><span>for</span><span> </span><span>tests:</span><span> </span><span></span><span> </span><span></span><span> </span><span>46.932</span><span> </span><span>seconds</span></span>
<span class=""line""><span>Complete</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>250</span></span>
<span class=""line""><span>Failed</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span></span>
<span class=""line""><span>Keep-Alive</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>250</span></span>
<span class=""line""><span>Total</span><span> </span><span>transferred:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>50250</span><span> </span><span>bytes</span></span>
<span class=""line""><span>HTML</span><span> </span><span>transferred:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>500</span><span> </span><span>bytes</span></span>
<span class=""line""><span>Requests</span><span> </span><span>per</span><span> </span><span>second:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>5.33</span><span> </span><span>[#/sec]</span><span> </span><span>(mean)</span></span>
<span class=""line""><span>Time</span><span> </span><span>per</span><span> </span><span>request:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3754.556</span><span> </span><span>[ms]</span><span> </span><span>(mean)</span></span>
<span class=""line""><span>Time</span><span> </span><span>per</span><span> </span><span>request:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>187.728</span><span> </span><span>[ms]</span><span> </span><span>(mean,</span><span> </span><span>across</span><span> </span><span>all</span><span> </span><span>concurrent</span><span> </span><span>requests)</span></span>
<span class=""line""><span>Transfer</span><span> </span><span>rate:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1.05</span><span> </span><span>[Kbytes/sec]</span><span> </span><span>received</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span>...</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span>Percentage</span><span> </span><span>of</span><span> </span><span>the</span><span> </span><span>requests</span><span> </span><span>served</span><span> </span><span>within</span><span> </span><span>a</span><span> </span><span>certain</span><span> </span><span>time</span><span> </span><span>(ms)</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>50%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3755</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>66%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3804</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>75%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3818</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>80%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3825</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>90%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3845</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>95%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3858</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>98%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3874</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>99%</span><span> </span><span></span><span> </span><span></span><span> </span><span>3875</span></span>
<span class=""line""><span></span><span> </span><span>100%</span><span> </span><span></span><span> </span><span></span><span> </span><span>4225</span><span> </span><span>(longest</span><span> </span><span>request)</span></span>
</code></pre>
 </div>
 <p>
  From this output, we see that we're only managing to serve about 5 requests per
second and that the average request takes just under 4 seconds round trip. In a
real-world example, we could be doing lots of work in many functions on behalf
of a user request but even in our simple example, time could be lost compiling
regular expressions, generating random salts, generating unique hashes from user
passwords, or inside the Express framework itself.
 </p>
 <p>
  Since we ran our application using the
  <code>
   --prof
  </code>
  option, a tick file was generated
in the same directory as your local run of the application. It should have the
form
  <code>
   isolate-0xnnnnnnnnnnnn-v8.log
  </code>
  (where
  <code>
   n
  </code>
  is a digit).
 </p>
 <p>
  In order to make sense of this file, we need to use the tick processor bundled
with the Node.js binary. To run the processor, use the
  <code>
   --prof-process
  </code>
  flag:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>node</span><span> </span><span>--prof-process</span><span> </span><span>isolate-0xnnnnnnnnnnnn-v8.log</span><span> </span><span>&gt;</span><span> </span><span>processed.txt</span></span>
</code></pre>
 </div>
 <p>
  Opening processed.txt in your favorite text editor will give you a few different
types of information. The file is broken up into sections which are again broken
up by language. First, we look at the summary section and see:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span>[Summary]:</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>ticks</span><span> </span><span></span><span> </span><span>total</span><span> </span><span></span><span> </span><span>nonlib</span><span> </span><span></span><span> </span><span></span><span> </span><span>name</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>79</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0.2%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0.2%</span><span> </span><span></span><span> </span><span>JavaScript</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>36703</span><span> </span><span></span><span> </span><span></span><span> </span><span>97.2%</span><span> </span><span></span><span> </span><span></span><span> </span><span>99.2%</span><span> </span><span></span><span> </span><span>C++</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>7</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0.0%</span><span> </span><span></span><span> </span><span>GC</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>767</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>2.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>Shared</span><span> </span><span>libraries</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>215</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0.6%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>Unaccounted</span></span>
</code></pre>
 </div>
 <p>
  This tells us that 97% of all samples gathered occurred in C++ code and that
when viewing other sections of the processed output we should pay most attention
to work being done in C++ (as opposed to JavaScript). With this in mind, we next
find the [C++] section which contains information about which C++ functions are
taking the most CPU time and see:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span>[C++]:</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>ticks</span><span> </span><span></span><span> </span><span>total</span><span> </span><span></span><span> </span><span>nonlib</span><span> </span><span></span><span> </span><span></span><span> </span><span>name</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>19557</span><span> </span><span></span><span> </span><span></span><span> </span><span>51.8%</span><span> </span><span></span><span> </span><span></span><span> </span><span>52.9%</span><span> </span><span></span><span> </span><span>node::crypto::PBKDF2(v8::FunctionCallbackInfo&lt;v8::Value&gt;</span><span> </span><span>const&amp;)</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>4510</span><span> </span><span></span><span> </span><span></span><span> </span><span>11.9%</span><span> </span><span></span><span> </span><span></span><span> </span><span>12.2%</span><span> </span><span></span><span> </span><span>_sha1_block_data_order</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3165</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>8.4%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>8.6%</span><span> </span><span></span><span> </span><span>_malloc_zone_malloc</span></span>
</code></pre>
 </div>
 <p>
  We see that the top 3 entries account for 72.1% of CPU time taken by the
program. From this output, we immediately see that at least 51.8% of CPU time is
taken up by a function called PBKDF2 which corresponds to our hash generation
from a user's password. However, it may not be immediately obvious how the lower
two entries factor into our application (or if it is we will pretend otherwise
for the sake of example). To better understand the relationship between these
functions, we will next look at the [Bottom up (heavy) profile] section which
provides information about the primary callers of each function. Examining this
section, we find:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>ticks</span><span> </span><span>parent</span><span> </span><span></span><span> </span><span>name</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>19557</span><span> </span><span></span><span> </span><span></span><span> </span><span>51.8%</span><span> </span><span></span><span> </span><span>node::crypto::PBKDF2(v8::FunctionCallbackInfo&lt;v8::Value&gt;</span><span> </span><span>const&amp;)</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>19557</span><span> </span><span></span><span> </span><span>100.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>v8::internal::Builtins::~Builtins()</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>19557</span><span> </span><span></span><span> </span><span>100.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>LazyCompile:</span><span> </span><span>~pbkdf2</span><span> </span><span>crypto.js:557:16</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>4510</span><span> </span><span></span><span> </span><span></span><span> </span><span>11.9%</span><span> </span><span></span><span> </span><span>_sha1_block_data_order</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>4510</span><span> </span><span></span><span> </span><span>100.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>LazyCompile:</span><span> </span><span>*pbkdf2</span><span> </span><span>crypto.js:557:16</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>4510</span><span> </span><span></span><span> </span><span>100.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>LazyCompile:</span><span> </span><span>*exports.pbkdf2Sync</span><span> </span><span>crypto.js:552:30</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3165</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>8.4%</span><span> </span><span></span><span> </span><span>_malloc_zone_malloc</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3161</span><span> </span><span></span><span> </span><span></span><span> </span><span>99.9%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>LazyCompile:</span><span> </span><span>*pbkdf2</span><span> </span><span>crypto.js:557:16</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3161</span><span> </span><span></span><span> </span><span>100.0%</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>LazyCompile:</span><span> </span><span>*exports.pbkdf2Sync</span><span> </span><span>crypto.js:552:30</span></span>
</code></pre>
 </div>
 <p>
  Parsing this section takes a little more work than the raw tick counts above.
Within each of the ""call stacks"" above, the percentage in the parent column
tells you the percentage of samples for which the function in the row above was
called by the function in the current row. For example, in the middle ""call
stack"" above for _sha1_block_data_order, we see that
  <code>
   _sha1_block_data_order
  </code>
  occurred
in 11.9% of samples, which we knew from the raw counts above. However, here, we
can also tell that it was always called by the pbkdf2 function inside the
Node.js crypto module. We see that similarly,
  <code>
   _malloc_zone_malloc
  </code>
  was called
almost exclusively by the same pbkdf2 function. Thus, using the information in
this view, we can tell that our hash computation from the user's password
accounts not only for the 51.8% from above but also for all CPU time in the top
3 most sampled functions since the calls to
  <code>
   _sha1_block_data_order
  </code>
  and
  <code>
   _malloc_zone_malloc
  </code>
  were made on behalf of the pbkdf2 function.
 </p>
 <p>
  At this point, it is very clear that the password-based hash generation should
be the target of our optimization. Thankfully, you've fully internalized the
  <a href=""https://nodesource.com/blog/why-asynchronous"">
   benefits of asynchronous programming
  </a>
  and you realize that the work to
generate a hash from the user's password is being done in a synchronous way and
thus tying down the event loop. This prevents us from working on other incoming
requests while computing a hash.
 </p>
 <p>
  To remedy this issue, you make a small modification to the above handlers to use
the asynchronous version of the pbkdf2 function:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/auth</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> password</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  username</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> username</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">replace</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">/[</span><span style=""color:#EBCB8B"">!@#$%^&amp;*</span><span style=""color:#ECEFF4"">]/</span><span style=""color:#81A1C1"">g</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">username</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">password</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">400</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  crypto</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pbkdf2</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    password</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">salt</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#B48EAD"">    10000</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#B48EAD"">    512</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    '</span><span style=""color:#A3BE8C"">sha512</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> hash</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">users</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#D8DEE9"">username</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">hash</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">() </span><span style=""color:#81A1C1"">===</span><span style=""color:#D8DEE9""> hash</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">401</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  A new run of the ab benchmark above with the asynchronous version of your app
yields:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>Concurrency</span><span> </span><span>Level:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>20</span></span>
<span class=""line""><span>Time</span><span> </span><span>taken</span><span> </span><span>for</span><span> </span><span>tests:</span><span> </span><span></span><span> </span><span></span><span> </span><span>12.846</span><span> </span><span>seconds</span></span>
<span class=""line""><span>Complete</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>250</span></span>
<span class=""line""><span>Failed</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span></span>
<span class=""line""><span>Keep-Alive</span><span> </span><span>requests:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>250</span></span>
<span class=""line""><span>Total</span><span> </span><span>transferred:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>50250</span><span> </span><span>bytes</span></span>
<span class=""line""><span>HTML</span><span> </span><span>transferred:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>500</span><span> </span><span>bytes</span></span>
<span class=""line""><span>Requests</span><span> </span><span>per</span><span> </span><span>second:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>19.46</span><span> </span><span>[#/sec]</span><span> </span><span>(mean)</span></span>
<span class=""line""><span>Time</span><span> </span><span>per</span><span> </span><span>request:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1027.689</span><span> </span><span>[ms]</span><span> </span><span>(mean)</span></span>
<span class=""line""><span>Time</span><span> </span><span>per</span><span> </span><span>request:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>51.384</span><span> </span><span>[ms]</span><span> </span><span>(mean,</span><span> </span><span>across</span><span> </span><span>all</span><span> </span><span>concurrent</span><span> </span><span>requests)</span></span>
<span class=""line""><span>Transfer</span><span> </span><span>rate:</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3.82</span><span> </span><span>[Kbytes/sec]</span><span> </span><span>received</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span>...</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span>Percentage</span><span> </span><span>of</span><span> </span><span>the</span><span> </span><span>requests</span><span> </span><span>served</span><span> </span><span>within</span><span> </span><span>a</span><span> </span><span>certain</span><span> </span><span>time</span><span> </span><span>(ms)</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>50%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1018</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>66%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1035</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>75%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1041</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>80%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1043</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>90%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1049</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>95%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1063</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>98%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1070</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>99%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1071</span></span>
<span class=""line""><span></span><span> </span><span>100%</span><span> </span><span></span><span> </span><span></span><span> </span><span>1079</span><span> </span><span>(longest</span><span> </span><span>request)</span></span>
</code></pre>
 </div>
 <p>
  Yay! Your app is now serving about 20 requests per second, roughly 4 times more
than it was with the synchronous hash generation. Additionally, the average
latency is down from the 4 seconds before to just over 1 second.
 </p>
 <p>
  Hopefully, through the performance investigation of this (admittedly contrived)
example, you've seen how the V8 tick processor can help you gain a better
understanding of the performance of your Node.js applications.
 </p>
 <p>
  You may also find
  <a href=""/en/learn/diagnostics/flame-graphs"">
   how to create a flame graph
  </a>
  helpful.
 </p>
</main>
"
Getting Started,Fetching data with Node.js,"<main>
 <h1 id=""using-the-fetch-api-with-undici-in-nodejs"">
  <a href=""#using-the-fetch-api-with-undici-in-nodejs"">
   Using the Fetch API with Undici in Node.js
  </a>
 </h1>
 <h2 id=""introduction"">
  <a href=""#introduction"">
   Introduction
  </a>
 </h2>
 <p>
  <a href=""https://undici.nodejs.org"">
   Undici
  </a>
  is an HTTP client library that powers the fetch API in Node.js. It was written from scratch and does not rely on the built-in HTTP client in Node.js. It includes a number of features that make it a good choice for high-performance applications.
 </p>
 <h2 id=""basic-get-usage"">
  <a href=""#basic-get-usage"">
   Basic GET Usage
  </a>
 </h2>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // Like the browser fetch API, the default method is GET</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> response</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> fetch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">https://jsonplaceholder.typicode.com/posts</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">json</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">  // returns something like:</span></span>
<span class=""line""><span style=""color:#707e99"">  //   {</span></span>
<span class=""line""><span style=""color:#707e99"">  //   userId: 1,</span></span>
<span class=""line""><span style=""color:#707e99"">  //   id: 1,</span></span>
<span class=""line""><span style=""color:#707e99"">  //   title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',</span></span>
<span class=""line""><span style=""color:#707e99"">  //   body: 'quia et suscipit\n' +</span></span>
<span class=""line""><span style=""color:#707e99"">  //     'suscipit recusandae consequuntur expedita et cum\n' +</span></span>
<span class=""line""><span style=""color:#707e99"">  //     'reprehenderit molestiae ut ut quas totam\n' +</span></span>
<span class=""line""><span style=""color:#707e99"">  //     'nostrum rerum est autem sunt rem eveniet architecto'</span></span>
<span class=""line""><span style=""color:#707e99"">  // }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">main</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""basic-post-usage"">
  <a href=""#basic-post-usage"">
   Basic POST Usage
  </a>
 </h2>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// Data sent from the client to the server</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  title</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">foo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  body</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  userId</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> response</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> fetch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">https://jsonplaceholder.typicode.com/posts</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">    method</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">POST</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">    headers</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      '</span><span style=""color:#A3BE8C"">User-Agent</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">undici-stream-example</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      '</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#88C0D0"">    body</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stringify</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">json</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">  // returns something like:</span></span>
<span class=""line""><span style=""color:#707e99"">  // { title: 'foo', body: 'bar', userId: 1, id: 101 }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">main</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""customizing-the-fetch-api-with-undici"">
  <a href=""#customizing-the-fetch-api-with-undici"">
   Customizing the Fetch API with Undici
  </a>
 </h2>
 <p>
  Undici allows you to customize the Fetch API by providing options to the
  <code>
   fetch
  </code>
  function. For example, you can set custom headers, set the request method, and set the request body. Here is an example of how you can customize the Fetch API with Undici:
 </p>
 <p>
  The
  <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"">
   fetch
  </a>
  function takes two arguments: the URL to fetch and an options object. The options object is the
  <a href=""https://undici.nodejs.org/#/docs/api/Dispatcher?id=parameter-requestoptions"">
   Request
  </a>
  object that you can use to customize the request. The function returns a
  <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">
   Promises
  </a>
  that resolves to a
  <a href=""https://undici.nodejs.org/#/docs/api/Dispatcher?id=parameter-responsedata"">
   Response
  </a>
  object. One difference between the Fetch API in the browser and the Fetch API in Node.js is that the Node.js version does not support
 </p>
 <p>
  In the following example, we are sending a POST request to the Ollama API with a JSON payload. Ollama is a cli tool that allows you to run LLM's (Large Language Models) on your local machine. You can download it
  <a href=""https://ollama.com/download"">
   here
  </a>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">ollama</span><span style=""color:#A3BE8C""> run</span><span style=""color:#A3BE8C""> mistral</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  This will download the
  <code>
   mistral
  </code>
  model and run it on your local machine.
 </p>
 <p>
  With a pool, you can reuse connections to the same server, which can improve performance. Here is an example of how you can use a pool with Undici:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> Pool</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">undici</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> ollamaPool</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Pool</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">http://localhost:11434</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  connections</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 10</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">/**</span></span>
<span class=""line""><span style=""color:#707e99""> * Stream the completion of a prompt using the Ollama API.</span></span>
<span class=""line""><span style=""color:#707e99""> * </span><span style=""color:#ECEFF4"">@</span><span style=""color:#8FBCBB"">param</span><span style=""color:#ECEFF4""> {</span><span style=""color:#707e99"">string</span><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9""> prompt</span><span style=""color:#707e99""> - The prompt to complete.</span></span>
<span class=""line""><span style=""color:#707e99""> * </span><span style=""color:#ECEFF4"">@</span><span style=""color:#8FBCBB"">link</span><span style=""color:#707e99""> https://github.com/ollama/ollama/blob/main/docs/api.md</span></span>
<span class=""line""><span style=""color:#707e99""> **/</span></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> streamOllamaCompletion</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">prompt</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> statusCode</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> body</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> ollamaPool</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">request</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">    path</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/api/generate</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">    method</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">POST</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">    headers</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      '</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#88C0D0"">    body</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stringify</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#D8DEE9""> prompt</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> model</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">mistral</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // You can read about HTTP status codes here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</span></span>
<span class=""line""><span style=""color:#707e99"">  // 200 means the request was successful.</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> !==</span><span style=""color:#B48EAD""> 200</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    throw</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Ollama request failed with status </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> partial</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> decoder</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> TextDecoder</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> of</span><span style=""color:#D8DEE9""> body</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    partial</span><span style=""color:#81A1C1""> +=</span><span style=""color:#D8DEE9""> decoder</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">decode</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> stream</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">partial</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Streaming complete.</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> streamOllamaCompletion</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">What is recursion?</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Error calling Ollama:</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> finally</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Closing Ollama pool.</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  ollamaPool</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">close</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""streaming-responses-with-undici"">
  <a href=""#streaming-responses-with-undici"">
   Streaming Responses with Undici
  </a>
 </h2>
 <p>
  <a href=""https://nodejs.org/docs/v22.14.0/api/stream.html#stream"">
   Streams
  </a>
  is a feature in Node.js that allows you to read and write chucks of data.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> stream</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">undici</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> Writable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> fetchGitHubRepos</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> url</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">https://api.github.com/users/nodejs/repos</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> statusCode</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> stream</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    url</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      method</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">GET</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      headers</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        '</span><span style=""color:#A3BE8C"">User-Agent</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">undici-stream-example</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">        Accept</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      let</span><span style=""color:#D8DEE9""> buffer</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">      return</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Writable</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">        write</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> encoding</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          buffer</span><span style=""color:#81A1C1""> +=</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">          try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">            const</span><span style=""color:#D8DEE9""> json</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">parse</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">buffer</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">            console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">              '</span><span style=""color:#A3BE8C"">Repository Names:</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">              json</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">map</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">repo</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> repo</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">name</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">            )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">            buffer</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">          }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">            console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Error parsing JSON:</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">          }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">          callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        },</span></span>
<span class=""line""><span style=""color:#88C0D0"">        final</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Stream processing completed.</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">          callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Response status: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">fetchGitHubRepos</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
</main>
"
Getting Started,Security Best Practices,"<main>
 <h1 id=""security-best-practices"">
  <a href=""#security-best-practices"">
   Security Best Practices
  </a>
 </h1>
 <h2 id=""intent"">
  <a href=""#intent"">
   Intent
  </a>
 </h2>
 <p>
  This document intends to extend the current
  <a href=""https://github.com/nodejs/node/security/policy#the-nodejs-threat-model"">
   threat model
  </a>
  and provide extensive
guidelines on how to secure a Node.js application.
 </p>
 <h2 id=""document-content"">
  <a href=""#document-content"">
   Document Content
  </a>
 </h2>
 <ul>
  <li>
   Best practices: A simplified condensed way to see the best practices. We can
use
   <a href=""https://github.com/nodejs/security-wg/issues/488"">
    this issue
   </a>
   or
   <a href=""https://github.com/goldbergyoni/nodebestpractices"">
    this guideline
   </a>
   as the starting point. It is important to note that this document is specific
to Node.js, if you are looking for something broad, consider
   <a href=""https://github.com/ossf/wg-best-practices-os-developers"">
    OSSF Best Practices
   </a>
   .
  </li>
  <li>
   Attacks explained: illustrate and document in plain English with some code
examples (if possible) of the attacks that we are mentioning in the threat model.
  </li>
  <li>
   Third-Party Libraries: define threats
(typosquatting attacks, malicious packages...) and best practices regarding
node modules dependencies, etc...
  </li>
 </ul>
 <h2 id=""threat-list"">
  <a href=""#threat-list"">
   Threat List
  </a>
 </h2>
 <h3 id=""denial-of-service-of-http-server-cwe-400"">
  <a href=""#denial-of-service-of-http-server-cwe-400"">
   Denial of Service of HTTP server (CWE-400)
  </a>
 </h3>
 <p>
  This is an attack where the application becomes unavailable for the purpose it
was designed due to the way it processes incoming HTTP requests. These requests
need not be deliberately crafted by a malicious actor: a misconfigured or buggy
client can also send a pattern of requests to the server that result in a denial
of service.
 </p>
 <p>
  HTTP requests are received by the Node.js HTTP server and handed over to the
application code via the registered request handler. The server does not parse
the content of the request body. Therefore any DoS caused by the contents of the
body after they are handed over to the request handler is not a vulnerability in
Node.js itself, since it's the responsibility of the application code to handle
it correctly.
 </p>
 <p>
  Ensure that the WebServer handles socket errors properly, for instance, when a
server is created without an error handler, it will be vulnerable to DoS
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rlb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rlb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> net</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:net</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> net</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">socket</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // socket.on('error', console.error) // this prevents the server to crash</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  socket</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Echo server</span><span style=""color:#EBCB8B"">\r\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  socket</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">socket</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">5000</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">0.0.0.0</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rlb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rlb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  If a
  <em>
   bad request
  </em>
  is performed the server could crash.
 </p>
 <p>
  An example of a DoS attack that is not caused by the request's contents is
  <a href=""https://en.wikipedia.org/wiki/Slowloris_(computer_security)"">
   Slowloris
  </a>
  . In this attack, HTTP requests are sent slowly and fragmented,
one fragment at a time. Until the full request is delivered, the server will
keep resources dedicated to the ongoing request. If enough of these requests
are sent at the same time, the amount of concurrent connections will soon reach
its maximum resulting in a denial of service. This is how the attack depends
not on the request's contents but on the timing and pattern of the requests
being sent to the server.
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Use a reverse proxy to receive and forward requests to the Node.js application.
Reverse proxies can provide caching, load balancing, IP blacklisting, etc. which
reduce the probability of a DoS attack being effective.
  </li>
  <li>
   Correctly configure the server timeouts, so that connections that are idle or
where requests are arriving too slowly can be dropped. See the different timeouts
in
   <a href=""https://nodejs.org/api/http.html#class-httpserver"">
    <code>
     http.Server
    </code>
   </a>
   , particularly
   <code>
    headersTimeout
   </code>
   ,
   <code>
    requestTimeout
   </code>
   ,
   <code>
    timeout
   </code>
   ,
and
   <code>
    keepAliveTimeout
   </code>
   .
  </li>
  <li>
   Limit the number of open sockets per host and in total. See the
   <a href=""https://nodejs.org/api/http.html"">
    http docs
   </a>
   ,
particularly
   <code>
    agent.maxSockets
   </code>
   ,
   <code>
    agent.maxTotalSockets
   </code>
   ,
   <code>
    agent.maxFreeSockets
   </code>
   and
   <code>
    server.maxRequestsPerSocket
   </code>
   .
  </li>
 </ul>
 <h3 id=""dns-rebinding-cwe-346"">
  <a href=""#dns-rebinding-cwe-346"">
   DNS Rebinding (CWE-346)
  </a>
 </h3>
 <p>
  This is an attack that can target Node.js applications being run with the
debugging inspector enabled using the
  <a href=""/en/learn/getting-started/debugging"">
   --inspect switch
  </a>
  .
 </p>
 <p>
  Since websites opened in a web browser can make WebSocket and HTTP requests,
they can target the debugging inspector running locally.
This is usually prevented by the
  <a href=""/en/learn/getting-started/debugging"">
   same-origin policy
  </a>
  implemented by modern
browsers, which forbids scripts from reaching resources from different origins
(meaning a malicious website cannot read data requested from a local IP address).
 </p>
 <p>
  However, through DNS rebinding, an attacker can temporarily control the origin
for their requests so that they seem to originate from a local IP address.
This is done by controlling both a website and the DNS server used to resolve
its IP address. See
  <a href=""https://en.wikipedia.org/wiki/DNS_rebinding"">
   DNS Rebinding wiki
  </a>
  for more details.
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Disable inspector on
   <em>
    SIGUSR1
   </em>
   signal by attaching a
   <code>
    process.on(‘SIGUSR1’, …)
   </code>
   listener to it.
  </li>
  <li>
   Do not run the inspector protocol in production.
  </li>
 </ul>
 <h3 id=""exposure-of-sensitive-information-to-an-unauthorized-actor-cwe-552"">
  <a href=""#exposure-of-sensitive-information-to-an-unauthorized-actor-cwe-552"">
   Exposure of Sensitive Information to an Unauthorized Actor (CWE-552)
  </a>
 </h3>
 <p>
  All the files and folders included in the current directory are pushed to the
npm registry during the package publication.
 </p>
 <p>
  There are some mechanisms to control this behavior by defining a blocklist with
  <code>
   .npmignore
  </code>
  and
  <code>
   .gitignore
  </code>
  or by defining an allowlist in the
  <code>
   package.json
  </code>
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Using
   <code>
    npm publish --dry-run
   </code>
   to list all the files to publish. Ensure to review the
content before publishing the package.
  </li>
  <li>
   It’s also important to create and maintain ignore files such as
   <code>
    .gitignore
   </code>
   and
   <code>
    .npmignore
   </code>
   .
Throughout these files, you can specify which files/folders should not be published.
The
   <a href=""https://docs.npmjs.com/cli/configuring-npm/package-json#files"">
    files property
   </a>
   in
   <code>
    package.json
   </code>
   allows the inverse operation
-- allowed list.
  </li>
  <li>
   In case of an exposure, make sure to
   <a href=""https://docs.npmjs.com/unpublishing-packages-from-the-registry"">
    unpublish the package
   </a>
   .
  </li>
 </ul>
 <h3 id=""http-request-smuggling-cwe-444"">
  <a href=""#http-request-smuggling-cwe-444"">
   HTTP Request Smuggling (CWE-444)
  </a>
 </h3>
 <p>
  This is an attack that involves two HTTP servers (usually a proxy and a Node.js
application). A client sends an HTTP request that goes first through the
front-end server (the proxy) and then is redirected to the back-end server (the application).
When the front-end and back-end interpret ambiguous HTTP requests differently,
there is potential for an attacker to send a malicious message that won't be
seen by the front-end but will be seen by the back-end, effectively ""smuggling""
it past the proxy server.
 </p>
 <p>
  See the
  <a href=""https://cwe.mitre.org/data/definitions/444.html"">
   CWE-444
  </a>
  for a more detailed description and examples.
 </p>
 <p>
  Since this attack depends on Node.js interpreting HTTP requests
differently from an (arbitrary) HTTP server, a successful attack can be due to
a vulnerability in Node.js, the front-end server, or both.
If the way the request is interpreted by Node.js is consistent with the
HTTP specification (see
  <a href=""https://datatracker.ietf.org/doc/html/rfc7230#section-3"">
   RFC7230
  </a>
  ), then it is not considered a vulnerability
in Node.js.
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Do not use the
   <code>
    insecureHTTPParser
   </code>
   option when creating a HTTP Server.
  </li>
  <li>
   Configure the front-end server to normalize ambiguous requests.
  </li>
  <li>
   Continuously monitor for new HTTP request smuggling vulnerabilities in both
Node.js and the front-end server of choice.
  </li>
  <li>
   Use HTTP/2 end to end and disable HTTP downgrading if possible.
  </li>
 </ul>
 <h3 id=""information-exposure-through-timing-attacks-cwe-208"">
  <a href=""#information-exposure-through-timing-attacks-cwe-208"">
   Information Exposure through Timing Attacks (CWE-208)
  </a>
 </h3>
 <p>
  This is an attack that allows the attacker to learn potentially sensitive information by, for example, measuring how long
it takes for the application to respond to a request. This attack is not specific to Node.js and can target almost all runtimes.
 </p>
 <p>
  The attack is possible whenever the application uses a secret in a timing-sensitive operation (e.g., branch). Consider handling authentication in a typical application. Here, a basic authentication method includes email and password as credentials.
User information is retrieved from the input the user has supplied from ideally a
DBMS.
Upon retrieving user information, the password is compared with the user
information retrieved from the database. Using the built-in string comparison takes a longer
time for the same-length values.
This comparison, when run for an acceptable amount unwillingly increases the
response time of the request. By comparing the request response times, an
attacker can guess the length and the value of the password in a large quantity
of requests.
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   <p>
    The crypto API exposes a function
    <code>
     timingSafeEqual
    </code>
    to compare actual and
expected sensitive values using a constant-time algorithm.
   </p>
  </li>
  <li>
   <p>
    For password comparison, you can use the
    <a href=""https://nodejs.org/api/crypto.html#cryptoscryptpassword-salt-keylen-options-callback"">
     scrypt
    </a>
    available also on the
native crypto module.
   </p>
  </li>
  <li>
   <p>
    More generally, avoid using secrets in variable-time operations. This includes branching on secrets and, when the attacker could be co-located on the same infrastructure (e.g., same cloud machine), using a secret as an index into memory. Writing constant-time code in JavaScript is hard (partly because of the JIT). For crypto applications, use the built-in crypto APIs or WebAssembly (for algorithms not implemented in natively).
   </p>
  </li>
 </ul>
 <h3 id=""malicious-third-party-modules-cwe-1357"">
  <a href=""#malicious-third-party-modules-cwe-1357"">
   Malicious Third-Party Modules (CWE-1357)
  </a>
 </h3>
 <p>
  Currently, in Node.js, any package can access powerful resources such as
network access.
Furthermore, because they also have access to the file system, they can send
any data anywhere.
 </p>
 <p>
  All code running into a node process has the ability to load and run additional
arbitrary code by using
  <code>
   eval()
  </code>
  (or its equivalents).
All code with file system write access may achieve the same thing by writing to
new or existing files that are loaded.
 </p>
 <p>
  Node.js has an experimental
  <a href=""#experimental-features-in-production"">
   ¹
  </a>
  <a href=""https://nodejs.org/api/permissions.html#policies"">
   policy mechanism
  </a>
  to declare the loaded resource as untrusted or trusted.
However, this policy is not enabled by default.
Be sure to pin dependency versions and run automatic checks for vulnerabilities
using common workflows or npm scripts.
Before installing a package make sure that this package is maintained and
includes all the content you expected.
Be careful, the GitHub source code is not always the same as the published one,
validate it in the
  <em>
   node_modules
  </em>
  .
 </p>
 <h4 id=""supply-chain-attacks"">
  <a href=""#supply-chain-attacks"">
   Supply chain attacks
  </a>
 </h4>
 <p>
  A supply chain attack on a Node.js application happens when one of its
dependencies (either direct or transitive) are compromised.
This can happen either due to the application being too lax on the specification
of the dependencies (allowing for unwanted updates) and/or common typos in the
specification (vulnerable to
  <a href=""https://en.wikipedia.org/wiki/Typosquatting"">
   typosquatting
  </a>
  ).
 </p>
 <p>
  An attacker who takes control of an upstream package can publish a new version
with malicious code in it. If a Node.js application depends on that package
without being strict on which version is safe to use, the package can be
automatically updated to the latest malicious version, compromising the application.
 </p>
 <p>
  Dependencies specified in the
  <code>
   package.json
  </code>
  file can have an exact version number
or a range. However, when pinning a dependency to an exact version, its
transitive dependencies are not themselves pinned.
This still leaves the application vulnerable to unwanted/unexpected updates.
 </p>
 <p>
  Possible attack vectors:
 </p>
 <ul>
  <li>
   Typosquatting attacks
  </li>
  <li>
   Lockfile poisoning
  </li>
  <li>
   Compromised maintainers
  </li>
  <li>
   Malicious Packages
  </li>
  <li>
   Dependency Confusions
  </li>
 </ul>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Prevent npm from executing arbitrary scripts with
   <code>
    --ignore-scripts
   </code>
   <ul>
    <li>
     Additionally, you can disable it globally with
     <code>
      npm config set ignore-scripts true
     </code>
    </li>
   </ul>
  </li>
  <li>
   Pin dependency versions to a specific immutable version,
not a version that is a range or from a mutable source.
  </li>
  <li>
   Use lockfiles, which pin every dependency (direct and transitive).
   <!-- -->
   <ul>
    <li>
     Use
     <a href=""https://blog.ulisesgascon.com/lockfile-posioned"">
      Mitigations for lockfile poisoning
     </a>
     .
    </li>
   </ul>
  </li>
  <li>
   Automate checks for new vulnerabilities using CI, with tools like
   <a href=""https://docs.npmjs.com/cli/commands/npm-audit"">
    <code>
     npm-audit
    </code>
   </a>
   .
   <!-- -->
   <ul>
    <li>
     Tools such as
     <a href=""https://socket.dev/"">
      <code>
       Socket
      </code>
     </a>
     can be used to analyze packages with static analysis
to find risky behaviors such as network or filesystem access.
    </li>
   </ul>
  </li>
  <li>
   Use
   <a href=""https://docs.npmjs.com/cli/v8/commands/npm-ci"">
    <code>
     npm ci
    </code>
   </a>
   instead of
   <code>
    npm install
   </code>
   .
This enforces the lockfile so that inconsistencies between it and the
   <em>
    package.json
   </em>
   file causes an error (instead of silently ignoring the lockfile
in favor of
   <em>
    package.json
   </em>
   ).
  </li>
  <li>
   Carefully check the
   <em>
    package.json
   </em>
   file for errors/typos in the names of the
dependencies.
  </li>
 </ul>
 <h3 id=""memory-access-violation-cwe-284"">
  <a href=""#memory-access-violation-cwe-284"">
   Memory Access Violation (CWE-284)
  </a>
 </h3>
 <p>
  Memory-based or heap-based attacks depend on a combination of memory management
errors and an exploitable memory allocator.
Like all runtimes, Node.js is vulnerable to these attacks if your projects run
on a shared machine.
Using a secure heap is useful for preventing sensitive information from leaking
due to pointer overruns and underruns.
 </p>
 <p>
  Unfortunately, a secure heap is not available on Windows.
More information can be found on Node.js
  <a href=""https://nodejs.org/dist/latest-v18.x/docs/api/cli.html#--secure-heapn"">
   secure-heap documentation
  </a>
  .
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Use
   <code>
    --secure-heap=n
   </code>
   depending on your application where
   <em>
    n
   </em>
   is the allocated
maximum byte size.
  </li>
  <li>
   Do not run your production app on a shared machine.
  </li>
 </ul>
 <h3 id=""monkey-patching-cwe-349"">
  <a href=""#monkey-patching-cwe-349"">
   Monkey Patching (CWE-349)
  </a>
 </h3>
 <p>
  Monkey patching refers to the modification of properties in runtime aiming to
change the existing behavior. Example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// eslint-disable-next-line no-extend-native</span></span>
<span class=""line""><span style=""color:#8FBCBB"">Array</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9FF"">prototype</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">item</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // overriding the global [].push</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <p>
  The
  <code>
   --frozen-intrinsics
  </code>
  flag enables experimental
  <a href=""#experimental-features-in-production"">
   ¹
  </a>
  frozen intrinsics, which means all the built-in JavaScript objects and functions
are recursively frozen.
Therefore, the following snippet
  <strong>
   will not
  </strong>
  override the default behavior of
  <code>
   Array.prototype.push
  </code>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// eslint-disable-next-line no-extend-native</span></span>
<span class=""line""><span style=""color:#8FBCBB"">Array</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9FF"">prototype</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">item</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // overriding the global [].push</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Uncaught:</span></span>
<span class=""line""><span style=""color:#707e99"">// TypeError &lt;Object &lt;Object &lt;[Object: null prototype] {}&gt;&gt;&gt;:</span></span>
<span class=""line""><span style=""color:#707e99"">// Cannot assign to read only property 'push' of object ''</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  However, it’s important to mention you can still define new globals and replace
existing globals using
  <code>
   globalThis
  </code>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">&gt;</span><span style=""color:#D8DEE9FF""> globalThis.foo = 3</span><span style=""color:#81A1C1"">;</span><span style=""color:#88C0D0""> foo</span><span style=""color:#81A1C1"">;</span><span style=""color:#88C0D0""> //</span><span style=""color:#A3BE8C""> you</span><span style=""color:#A3BE8C""> can</span><span style=""color:#A3BE8C""> still</span><span style=""color:#A3BE8C""> define</span><span style=""color:#A3BE8C""> new</span><span style=""color:#A3BE8C""> globals</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">3</span></span>
<span class=""line""><span style=""color:#ECEFF4"">&gt;</span><span style=""color:#D8DEE9FF""> globalThis.Array = 4</span><span style=""color:#81A1C1"">;</span><span style=""color:#88C0D0""> Array</span><span style=""color:#81A1C1"">;</span><span style=""color:#88C0D0""> //</span><span style=""color:#A3BE8C""> However,</span><span style=""color:#A3BE8C""> you</span><span style=""color:#A3BE8C""> can</span><span style=""color:#A3BE8C""> also</span><span style=""color:#A3BE8C""> replace</span><span style=""color:#A3BE8C""> existing</span><span style=""color:#A3BE8C""> globals</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">4</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  Therefore,
  <code>
   Object.freeze(globalThis)
  </code>
  can be used to guarantee no globals will
be replaced.
 </p>
 <h3 id=""prototype-pollution-attacks-cwe-1321"">
  <a href=""#prototype-pollution-attacks-cwe-1321"">
   Prototype Pollution Attacks (CWE-1321)
  </a>
 </h3>
 <p>
  Prototype pollution refers to the possibility of modifying or injecting properties
into Javascript language items by abusing the usage of __proto_
  <em>
   ,
_constructor
  </em>
  ,
  <em>
   prototype
  </em>
  , and other properties inherited from built-in
prototypes.
 </p>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> a</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> a</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> b</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 2</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">parse</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">{""__proto__"": { ""polluted"": true}}</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> c</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Object</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">assign</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{},</span><span style=""color:#D8DEE9""> a</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">c</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">polluted</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // true</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Potential DoS</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> data2</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">parse</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">{""__proto__"": null}</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> d</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Object</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">assign</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">a</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data2</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">d</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hasOwnProperty</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">b</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Uncaught TypeError: d.hasOwnProperty is not a function</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is a potential vulnerability inherited from the JavaScript
language.
 </p>
 <p>
  <strong>
   Examples
  </strong>
  :
 </p>
 <ul>
  <li>
   <a href=""https://www.cvedetails.com/cve/CVE-2022-21824/"">
    CVE-2022-21824
   </a>
   (Node.js)
  </li>
  <li>
   <a href=""https://www.cvedetails.com/cve/CVE-2018-3721/"">
    CVE-2018-3721
   </a>
   (3rd Party library: Lodash)
  </li>
 </ul>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <ul>
  <li>
   Avoid
   <a href=""https://gist.github.com/DaniAkash/b3d7159fddcff0a9ee035bd10e34b277#file-unsafe-merge-js"">
    insecure recursive merges
   </a>
   , see
   <a href=""https://www.cve.org/CVERecord?id=CVE-2018-16487"">
    CVE-2018-16487
   </a>
   .
  </li>
  <li>
   Implement JSON Schema validations for external/untrusted requests.
  </li>
  <li>
   Create Objects without prototype by using
   <code>
    Object.create(null)
   </code>
   .
  </li>
  <li>
   Freezing the prototype:
   <code>
    Object.freeze(MyObject.prototype)
   </code>
   .
  </li>
  <li>
   Disable the
   <code>
    Object.prototype.__proto__
   </code>
   property using
   <code>
    --disable-proto
   </code>
   flag.
  </li>
  <li>
   Check that the property exists directly on the object, not from the prototype
using
   <code>
    Object.hasOwn(obj, keyFromObj)
   </code>
   .
  </li>
  <li>
   Avoid using methods from
   <code>
    Object.prototype
   </code>
   .
  </li>
 </ul>
 <h3 id=""uncontrolled-search-path-element-cwe-427"">
  <a href=""#uncontrolled-search-path-element-cwe-427"">
   Uncontrolled Search Path Element (CWE-427)
  </a>
 </h3>
 <p>
  Node.js loads modules following the
  <a href=""https://nodejs.org/api/modules.html#modules_all_together"">
   Module Resolution Algorithm
  </a>
  .
Therefore, it assumes the directory in which a module is requested
(require) is trusted.
 </p>
 <p>
  By that, it means the following application behavior is expected.
Assuming the following directory structure:
 </p>
 <ul>
  <li>
   <em>
    app/
   </em>
   <ul>
    <li>
     <em>
      server.js
     </em>
    </li>
    <li>
     <em>
      auth.js
     </em>
    </li>
    <li>
     <em>
      auth
     </em>
    </li>
   </ul>
  </li>
 </ul>
 <p>
  If server.js uses
  <code>
   require('./auth')
  </code>
  it will follow the module resolution
algorithm and load
  <em>
   auth
  </em>
  instead of
  <em>
   auth.js
  </em>
  .
 </p>
 <p>
  <strong>
   Mitigations
  </strong>
 </p>
 <p>
  Using the experimental
  <a href=""#experimental-features-in-production"">
   ¹
  </a>
  <a href=""https://nodejs.org/api/permissions.html#integrity-checks"">
   policy mechanism with integrity checking
  </a>
  can avoid the above threat.
For the directory described above, one can use the following
  <code>
   policy.json
  </code>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">resources</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">./app/auth.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">integrity</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">./app/server.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">dependencies</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        ""</span><span style=""color:#8FBCBB"">./auth</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./app/auth.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">integrity</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">sha256-NPtLCQ0ntPPWgfVEgX46ryTNpdvTWdQPoZO3kHo0bKI=</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  Therefore, when requiring the
  <em>
   auth
  </em>
  module, the system will validate the
integrity and throw an error if doesn’t match the expected one.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">» node --experimental-policy=policy.json app/server.js</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">node:internal/policy/sri:65</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">      throw new ERR_SRI_PARSE(str, str[prevIndex], prevIndex);</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">      ^</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">SyntaxError [ERR_SRI_PARSE]: Subresource Integrity string ""sha256-iuGZ6SFVFpMuHUcJciQTIKpIyaQVigMZlvg9Lx66HV8=%"" had an unexpected ""%"" at position 51</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at new NodeError (node:internal/errors:393:5)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Object.parse (node:internal/policy/sri:65:13)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at processEntry (node:internal/policy/manifest:581:38)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Manifest.assertIntegrity (node:internal/policy/manifest:588:32)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Module._compile (node:internal/modules/cjs/loader:1119:21)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Module.load (node:internal/modules/cjs/loader:1037:32)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Module._load (node:internal/modules/cjs/loader:878:12)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at Module.require (node:internal/modules/cjs/loader:1061:19)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    at require (node:internal/modules/cjs/helpers:99:18) {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  code: 'ERR_SRI_PARSE'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  Note, it's always recommended the use of
  <code>
   --policy-integrity
  </code>
  to avoid policy mutations.
 </p>
 <h2 id=""experimental-features-in-production"">
  <a href=""#experimental-features-in-production"">
   Experimental Features in Production
  </a>
 </h2>
 <p>
  The use of experimental features in production isn't recommended.
Experimental features can suffer breaking changes if needed, and their
functionality isn't securely stable. Although, feedback is highly appreciated.
 </p>
 <h2 id=""openssf-tools"">
  <a href=""#openssf-tools"">
   OpenSSF Tools
  </a>
 </h2>
 <p>
  The
  <a href=""https://openssf.org/"">
   OpenSSF
  </a>
  is leading several initiatives that can be very useful, especially if you plan to publish an npm package. These initiatives include:
 </p>
 <ul>
  <li>
   <a href=""https://securityscorecards.dev/"">
    OpenSSF Scorecard
   </a>
   Scorecard evaluates open source projects using a series of automated security risk checks. You can use it to proactively assess vulnerabilities and dependencies in your code base and make informed decisions about accepting vulnerabilities.
  </li>
  <li>
   <a href=""https://bestpractices.coreinfrastructure.org/en"">
    OpenSSF Best Practices Badge Program
   </a>
   Projects can voluntarily self-certify by describing how they comply with each best practice. This will generate a badge that can be added to the project.
  </li>
 </ul>
</main>
"
TypeScript,Introduction to TypeScript,"<main>
 <h1 id=""introduction-to-typescript"">
  <a href=""#introduction-to-typescript"">
   Introduction to TypeScript
  </a>
 </h1>
 <h2 id=""what-is-typescript"">
  <a href=""#what-is-typescript"">
   What is TypeScript
  </a>
 </h2>
 <p>
  <strong>
   <a href=""https://www.typescriptlang.org"">
    TypeScript
   </a>
  </strong>
  is an open-source language maintained and developed by Microsoft.
 </p>
 <p>
  Basically, TypeScript adds additional syntax to JavaScript to support a tighter integration with your editor. Catch errors early in your editor or in your CI/CD pipeline, and write more maintainable code.
 </p>
 <p>
  We can talk about other TypeScript benefits later, let's see some examples now!
 </p>
 <h2 id=""first-typescript-code"">
  <a href=""#first-typescript-code"">
   First TypeScript code
  </a>
 </h2>
 <p>
  Take a look at this code snippet and then we can unpack it together:
 </p>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">type</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  name</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  age</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> number</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">user</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> User</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> boolean</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> user</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">age</span><span style=""color:#81A1C1""> &gt;=</span><span style=""color:#B48EAD""> 18</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> justine</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Justine</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  age</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 23</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> satisfies</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> isJustineAnAdult</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">justine</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  The first part (with the
  <code>
   type
  </code>
  keyword) is responsible for declaring our custom object type representing users. Later we utilize this newly created type to create function
  <code>
   isAdult
  </code>
  that accepts one argument of type
  <code>
   User
  </code>
  and returns
  <code>
   boolean
  </code>
  . After this, we create
  <code>
   justine
  </code>
  , our example data that can be used for calling the previously defined function. Finally, we create a new variable with information on whether
  <code>
   justine
  </code>
  is an adult.
 </p>
 <p>
  There are additional things about this example that you should know. Firstly, if we do not comply with the declared types, TypeScript will inform us that something is wrong and prevent misuse. Secondly, not everything must be typed explicitly—TypeScript infers types for us. For example, the variable
  <code>
   isJustineAnAdult
  </code>
  is of type
  <code>
   boolean
  </code>
  even if we didn't type it explicitly, and
  <code>
   justine
  </code>
  would be a valid argument for our function even though we didn't declare this variable as of
  <code>
   User
  </code>
  type.
 </p>
 <h2 id=""what-does-typescript-consist-of"">
  <a href=""#what-does-typescript-consist-of"">
   What does TypeScript consist of?
  </a>
 </h2>
 <p>
  TypeScript consists of two main components: the code itself and type definitions.
 </p>
 <h3 id=""typescript-code"">
  <a href=""#typescript-code"">
   TypeScript Code
  </a>
 </h3>
 <p>
  The code part is regular JavaScript with additional TypeScript-specific syntax for type annotations. When TypeScript code is compiled, all the TypeScript-specific parts are removed, resulting in clean JavaScript that can run in any environment. For example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> greet</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">name</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Hello, </span><span style=""color:#ECEFF4"">${</span><span style=""color:#D8DEE9"">name</span><span style=""color:#ECEFF4"">}</span><span style=""color:#A3BE8C"">!</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <h3 id=""type-definitions"">
  <a href=""#type-definitions"">
   Type Definitions
  </a>
 </h3>
 <p>
  Type definitions describe the shape of existing JavaScript code. They are usually stored in
  <code>
   .d.ts
  </code>
  files and don't contain any actual implementation—they only describe the types. These definitions are essential for interoperability with JavaScript: code is not usually distributed as TypeScript, but instead transpiled to JavaScript that includes sidecar type definition files.
 </p>
 <p>
  For example, when you use Node.js with TypeScript, you'll need type definitions for Node.js APIs. This is available via
  <code>
   @types/node
  </code>
  . Install it using:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> add</span><span style=""color:#A3BE8C""> --save-dev</span><span style=""color:#A3BE8C""> @types/node</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  These type definitions allow TypeScript to understand Node.js APIs and provide proper type checking and autocompletion when you use functions like
  <code>
   fs.readFile
  </code>
  or
  <code>
   http.createServer
  </code>
  . For example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#81A1C1""> *</span><span style=""color:#81A1C1""> as</span><span style=""color:#8FBCBB""> fs</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">example.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">foo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  //                          ^^^ Argument of type '""foo""' is not assignable to parameter of type …</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Many popular JavaScript libraries have their type definitions available under the
  <code>
   @types
  </code>
  namespace, maintained by the DefinitelyTyped community. This enables seamless integration of existing JavaScript libraries with TypeScript projects.
 </p>
 <h3 id=""transform-capabilities"">
  <a href=""#transform-capabilities"">
   Transform Capabilities
  </a>
 </h3>
 <p>
  TypeScript also includes powerful transformation capabilities, particularly for JSX (used in React and similar frameworks). The TypeScript compiler can transform JSX syntax into regular JavaScript, similar to how Babel works. While we won't cover these transformation features in these articles, it's worth noting that TypeScript isn't only a tool for type checking—it's also a build tool for transforming modern JavaScript syntax into compatible versions for different environments.
 </p>
 <h2 id=""how-to-run-typescript-code"">
  <a href=""#how-to-run-typescript-code"">
   How to run TypeScript code
  </a>
 </h2>
 <p>
  Okay, so we have some TypeScript code. Now how do we run it?
There are few possible ways to run TypeScript code, we will cover all of them in the next articles.
 </p>
</main>
"
TypeScript,Running TypeScript code using transpilation,"<main>
 <h1 id=""running-typescript-code-using-transpilation"">
  <a href=""#running-typescript-code-using-transpilation"">
   Running TypeScript code using transpilation
  </a>
 </h1>
 <p>
  Transpilation is the process of converting source code from one language to another. In the case of TypeScript, it's the process of converting TypeScript code to JavaScript code. This is necessary because browsers and Node.js can't run TypeScript code directly.
 </p>
 <h2 id=""compiling-typescript-to-javascript"">
  <a href=""#compiling-typescript-to-javascript"">
   Compiling TypeScript to JavaScript
  </a>
 </h2>
 <p>
  The most common way to run TypeScript code is to compile it to JavaScript first. You can do this using the TypeScript compiler
  <code>
   tsc
  </code>
  .
 </p>
 <p>
  <strong>
   Step 1:
  </strong>
  Write your TypeScript code in a file, for example
  <code>
   example.ts
  </code>
  .
 </p>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">type</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  name</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  age</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> number</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">user</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> User</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> boolean</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> user</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">age</span><span style=""color:#81A1C1""> &gt;=</span><span style=""color:#B48EAD""> 18</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> justine</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Justine</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  age</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 23</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> satisfies</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> isJustineAnAdult</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">justine</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  <strong>
   Step 2:
  </strong>
  Install TypeScript locally using a package manager:
 </p>
 <p>
  In this example we're going to use npm, you can check
  <a href=""/en/learn/getting-started/an-introduction-to-the-npm-package-manager"">
   our introduction to the npm package manager
  </a>
  for more information.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> i</span><span style=""color:#A3BE8C""> -D</span><span style=""color:#A3BE8C""> typescript</span><span style=""color:#707e99""> # -D is a shorthand for --save-dev</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  <strong>
   Step 3:
  </strong>
  Compile your TypeScript code to JavaScript using the
  <code>
   tsc
  </code>
  command:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npx</span><span style=""color:#A3BE8C""> tsc</span><span style=""color:#A3BE8C""> example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    NOTE:
   </strong>
   <code>
    npx
   </code>
   is a tool that allows you to run Node.js packages without installing them globally.
  </p>
 </blockquote>
 <p>
  <code>
   tsc
  </code>
  is the TypeScript compiler which will take our TypeScript code and compile it to JavaScript.
This command will result in a new file named
  <code>
   example.js
  </code>
  that we can run using Node.js.
Now when we know how to compile and run TypeScript code let's see TypeScript bug-preventing capabilities in action!
 </p>
 <p>
  <strong>
   Step 4:
  </strong>
  Run your JavaScript code using Node.js:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> example.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  You should see the output of your TypeScript code in the terminal
 </p>
 <h2 id=""if-there-are-type-errors"">
  <a href=""#if-there-are-type-errors"">
   If there are type errors
  </a>
 </h2>
 <p>
  If you have type errors in your TypeScript code, the TypeScript compiler will catch them and prevent you from running the code. For example, if you change the
  <code>
   age
  </code>
  property of
  <code>
   justine
  </code>
  to a string, TypeScript will throw an error:
 </p>
 <p>
  We will modify our code like this, to voluntarily introduce a type error:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">type</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  name</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  age</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> number</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">user</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> User</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> boolean</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> user</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">age</span><span style=""color:#81A1C1""> &gt;=</span><span style=""color:#B48EAD""> 18</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> justine</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> User</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Justine</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  age</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Secret!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> isJustineAnAdult</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> isAdult</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">justine</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">I shouldn't be here!</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  And this is what TypeScript has to say about this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">example.ts:12:5 - error TS2322: Type 'string' is not assignable to type 'number'.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">12     age: 'Secret!',</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">       ~~~</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  example.ts:3:5</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    3     age: number;</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">          ~~~</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    The expected type comes from property 'age' which is declared here on type 'User'</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">example.ts:15:7 - error TS2322: Type 'boolean' is not assignable to type 'string'.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">15 const isJustineAnAdult: string = isAdult(justine, ""I shouldn't be here!"");</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">         ~~~~~~~~~~~~~~~~</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">example.ts:15:51 - error TS2554: Expected 1 arguments, but got 2.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">15 const isJustineAnAdult: string = isAdult(justine, ""I shouldn't be here!"");</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">                                                     ~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class=""line""></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">Found 3 errors in the same file, starting at: example.ts:12</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  As you can see, TypeScript is very helpful in catching bugs before they even happen. This is one of the reasons why TypeScript is so popular among developers.
 </p>
</main>
"
TypeScript,Running TypeScript with a runner,"<main>
 <h1 id=""running-typescript-with-a-runner"">
  <a href=""#running-typescript-with-a-runner"">
   Running TypeScript with a runner
  </a>
 </h1>
 <p>
  In the previous article, we learned how to run TypeScript code using transpilation. In this article, we will learn how to run TypeScript code using a runner.
 </p>
 <h2 id=""running-typescript-code-with-ts-node"">
  <a href=""#running-typescript-code-with-ts-node"">
   Running TypeScript code with
   <code>
    ts-node
   </code>
  </a>
 </h2>
 <p>
  <a href=""https://typestrong.org/ts-node/"">
   ts-node
  </a>
  is a TypeScript execution environment for Node.js. It allows you to run TypeScript code directly in Node.js without the need to compile it first. By default,
  <code>
   ts-node
  </code>
  performs type checking unless
  <code>
   transpileOnly
  </code>
  is enabled. While
  <code>
   ts-node
  </code>
  can catch type errors at runtime, we still recommend type-checking your code first with
  <code>
   tsc
  </code>
  before shipping it.
 </p>
 <p>
  To use
  <code>
   ts-node
  </code>
  , you need to install it first:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> i</span><span style=""color:#A3BE8C""> -D</span><span style=""color:#A3BE8C""> ts-node</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Then you can run your TypeScript code like this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npx</span><span style=""color:#A3BE8C""> ts-node</span><span style=""color:#A3BE8C""> example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h2 id=""running-typescript-code-with-tsx"">
  <a href=""#running-typescript-code-with-tsx"">
   Running TypeScript code with
   <code>
    tsx
   </code>
  </a>
 </h2>
 <p>
  <a href=""https://tsx.is/"">
   tsx
  </a>
  is another TypeScript execution environment for Node.js. It allows you to run TypeScript code directly in Node.js without the need to compile it first. Note, however, that it does not type check your code. So we recommend to type check your code first with
  <code>
   tsc
  </code>
  and then run it with
  <code>
   tsx
  </code>
  before shipping it.
 </p>
 <p>
  To use
  <code>
   tsx
  </code>
  , you need to install it first:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npm</span><span style=""color:#A3BE8C""> i</span><span style=""color:#A3BE8C""> -D</span><span style=""color:#A3BE8C""> tsx</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Then you can run your TypeScript code like this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">npx</span><span style=""color:#A3BE8C""> tsx</span><span style=""color:#A3BE8C""> example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""registering-tsx-via-node"">
  <a href=""#registering-tsx-via-node"">
   Registering
   <code>
    tsx
   </code>
   via
   <code>
    node
   </code>
  </a>
 </h3>
 <p>
  If you want to use
  <code>
   tsx
  </code>
  via
  <code>
   node
  </code>
  , you can register
  <code>
   tsx
  </code>
  via
  <code>
   --import
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --import=tsx</span><span style=""color:#A3BE8C""> example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
</main>
"
TypeScript,Running TypeScript Natively,"<main>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    ⚠️WARNING⚠️:
   </strong>
   All content in this article uses Node.js experimental features. Please make sure you are using a version of Node.js that supports the features mentioned in this article. And remember that experimental features can change in future versions of Node.js.
  </p>
 </blockquote>
 <h1 id=""running-typescript-natively"">
  <a href=""#running-typescript-natively"">
   Running TypeScript Natively
  </a>
 </h1>
 <p>
  In the previous articles, we learned how to run TypeScript code using transpilation and with a runner. In this article, we will learn how to run TypeScript code using Node.js itself.
 </p>
 <h2 id=""running-typescript-code-with-nodejs"">
  <a href=""#running-typescript-code-with-nodejs"">
   Running TypeScript code with Node.js
  </a>
 </h2>
 <p>
  Since V22.6.0, Node.js has experimental support for some TypeScript syntax via ""type stripping"". You can write code that's valid TypeScript directly in Node.js without the need to transpile it first.
 </p>
 <p>
  The
  <a href=""https://nodejs.org/docs/latest-v22.x/api/cli.html#--experimental-strip-types"">
   <code>
    --experimental-strip-types
   </code>
  </a>
  flag tells Node.js to strip the type annotations from the TypeScript code before running it.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --experimental-strip-types</span><span style=""color:#A3BE8C""> example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  And that's it! You can now run TypeScript code directly in Node.js without the need to transpile it first, and use TypeScript to catch type-related errors.
 </p>
 <p>
  In V22.7.0 this experimental support was extended to transform TypeScript-only syntax, like
  <code>
   enum
  </code>
  s and
  <code>
   namespace
  </code>
  , with the addition of the
  <a href=""https://nodejs.org/docs/latest-v23.x/api/cli.html#--experimental-transform-types"">
   <code>
    --experimental-transform-types
   </code>
  </a>
  flag. Enabling
  <code>
   --experimental-transform-types
  </code>
  automatically implies that
  <code>
   --experimental-strip-types
  </code>
  is enabled, so there's no need to use both flags in the same command:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --experimental-transform-types</span><span style=""color:#A3BE8C""> another-example.ts</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  From V23 onwards, the
  <code>
   --experimental-strip-types
  </code>
  flag is enabled by default (you can disable it via the
  <a href=""https://nodejs.org/docs/latest-v23.x/api/cli.html#--no-experimental-strip-types"">
   <code>
    --no-experimental-strip-types
   </code>
  </a>
  flag), enabling you to run any supported syntax, so running files like the one below with
  <code>
   node file.ts
  </code>
  is supported:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> foo</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">bar</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> number</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> string</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">hello</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  However, running any code that requires transformations, like the code below still needs the use of
  <code>
   --experimental-transform-types
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">enum</span><span style=""color:#8FBCBB""> MyEnum</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  A</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  B</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">MyEnum</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">A</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  Future versions of Node.js will include support for TypeScript without the need for a command line flag.
 </p>
 <h2 id=""limitations"">
  <a href=""#limitations"">
   Limitations
  </a>
 </h2>
 <p>
  At the time of writing, the experimental support for TypeScript in Node.js has some limitations.
 </p>
 <p>
  You can get more information on the
  <a href=""https://nodejs.org/docs/latest-v23.x/api/typescript.html#typescript-features"">
   API docs
  </a>
  .
 </p>
 <h3 id=""configuration"">
  <a href=""#configuration"">
   Configuration
  </a>
 </h3>
 <p>
  The Node.js TypeScript loader (
  <a href=""https://github.com/nodejs/amaro"">
   Amaro
  </a>
  ) does not need or use
  <code>
   tsconfig.json
  </code>
  to run TypeScript code.
 </p>
 <p>
  We recommend configuring your editor and
  <code>
   tsc
  </code>
  to reflect Node.js behavior by creating a
  <code>
   tsconfig.json
  </code>
  using the
  <code>
   compilerOptions
  </code>
  listed
  <a href=""https://nodejs.org/api/typescript.html#type-stripping"">
   here
  </a>
  , as well as using TypeScript version
  <strong>
   5.7 or higher
  </strong>
  .
 </p>
 <h2 id=""important-notes"">
  <a href=""#important-notes"">
   Important notes
  </a>
 </h2>
 <p>
  Thanks to all the contributors who have made this feature possible. We hope that this feature will be stable and available in the LTS version of Node.js soon.
 </p>
 <p>
  We can understand that this feature is experimental and has some limitations; if that doesn't suit your use-case, please use something else, or contribute a fix. Bug reports are also welcome, please keep in mind the project is run by volunteers, without warranty of any kind, so please be patient if you can't contribute the fix yourself.
 </p>
</main>
"
TypeScript,Publishing a TypeScript package,"<main>
 <h1 id=""publishing-a-typescript-package"">
  <a href=""#publishing-a-typescript-package"">
   Publishing a TypeScript package
  </a>
 </h1>
 <p>
  This article covers items regarding TypeScript publishing specifically. Publishing means distributed as a package via npm (or other package manager); this is not about compiling an app / server to be run in production (such as a PWA and/or endpoint server).
 </p>
 <p>
  Some important things to note:
 </p>
 <ul>
  <li>
   <p>
    Everything from
    <a href=""../modules/publishing-a-package"">
     Publishing a package
    </a>
    applies here.
   </p>
   <ul>
    <li>
     <p>
      Fields like
      <code>
       main
      </code>
      operate on
      <em>
       published
      </em>
      content, so when TypeScript source-code is transpiled to JavaScript, JavaScript is the published content and
      <code>
       main
      </code>
      would point to a JavaScript file with a JavaScript file extension (ex
      <code>
       main.ts
      </code>
      →
      <code>
       ""main"": ""main.js""
      </code>
      ).
     </p>
    </li>
    <li>
     <p>
      Fields like
      <code>
       scripts.test
      </code>
      operate on source-code, so they would use the file extensions of the source code (ex
      <code>
       ""test"": ""node --test './src/**/*.test.ts'
      </code>
      ).
     </p>
    </li>
   </ul>
  </li>
  <li>
   <p>
    Node runs TypeScript code via a process called ""
    <a href=""https://nodejs.org/api/typescript.html#type-stripping"">
     type stripping
    </a>
    "", wherein node (via
    <a href=""https://github.com/nodejs/amaro"">
     Amaro
    </a>
    ) removes TypeScript-specific syntax, leaving behind vanilla JavaScript (which node already understands). This behaviour is enabled by default as of node version 23.6.0.
   </p>
   <ul>
    <li>
     Node does
     <strong>
      not
     </strong>
     strip types in
     <code>
      node_modules
     </code>
     because it can cause significant performance issues for the official TypeScript compiler (
     <code>
      tsc
     </code>
     ) and parts of VS Code, so the TypeScript maintainers would like to discourage people publishing raw TypeScript, at least for now.
    </li>
   </ul>
  </li>
  <li>
   <p>
    Consuming TypeScript-specific features like
    <code>
     enum
    </code>
    in node still requires a flag (
    <a href=""https://nodejs.org/api/typescript.html#typescript-features"">
     <code>
      --experimental-transform-types
     </code>
    </a>
    ). There are often better alternatives for these anyway.
   </p>
   <ul>
    <li>
     To ensure TypeScript-specific features are
     <em>
      not
     </em>
     present (so your code can just run in node), set the
     <a href=""https://devblogs.microsoft.com/typescript/announcing-typescript-5-8-beta/#the---erasablesyntaxonly-option"">
      <code>
       erasableSyntaxOnly
      </code>
     </a>
     config option in TypeScript version 5.8+.
    </li>
   </ul>
  </li>
  <li>
   <p>
    Use
    <a href=""https://docs.github.com/en/code-security/dependabot"">
     dependabot
    </a>
    to keep your dependencies current, including those in github actions. It's a very easy set-and-forget configuration.
   </p>
  </li>
  <li>
   <p>
    <code>
     .nvmrc
    </code>
    comes from
    <a href=""https://github.com/nvm-sh/nvm"">
     <code>
      nvm
     </code>
    </a>
    , a multi-version manager for node. It allows you to specify the version of node the project should generally use.
   </p>
  </li>
 </ul>
 <p>
  A directory overview of a repository would look something like:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-text-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rbb9utjfb:-content-text-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-text"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span>example-ts-pkg/</span></span>
<span class=""line""><span>├ .github/</span></span>
<span class=""line""><span>│ ├ workflows/</span></span>
<span class=""line""><span>│ │ ├ ci.yml</span></span>
<span class=""line""><span>│ │ └ publish.yml</span></span>
<span class=""line""><span>│ └ dependabot.yml</span></span>
<span class=""line""><span>├ src/</span></span>
<span class=""line""><span>│ ├ foo.fixture.js</span></span>
<span class=""line""><span>│ ├ main.ts</span></span>
<span class=""line""><span>│ ├ main.test.ts</span></span>
<span class=""line""><span>│ ├ some-util.ts</span></span>
<span class=""line""><span>│ └ some-util.test.ts</span></span>
<span class=""line""><span>├ LICENSE</span></span>
<span class=""line""><span>├ package.json</span></span>
<span class=""line""><span>├ README.md</span></span>
<span class=""line""><span>└ tsconfig.json</span></span>
<span class=""line""><span></span></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      text
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-text-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rbb9utjfb:-content-text-1"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-text-2"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rbb9utjfb:-content-text-2"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  And a directory overview of its published package would look something like:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Reb9utjfb:-trigger-text-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Reb9utjfb:-content-text-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-text"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span>example-ts-pkg/</span></span>
<span class=""line""><span>├ LICENSE</span></span>
<span class=""line""><span>├ main.d.ts</span></span>
<span class=""line""><span>├ main.d.ts.map</span></span>
<span class=""line""><span>├ main.js</span></span>
<span class=""line""><span>├ package.json</span></span>
<span class=""line""><span>├ README.md</span></span>
<span class=""line""><span>├ some-util.d.ts</span></span>
<span class=""line""><span>├ some-util.d.ts.map</span></span>
<span class=""line""><span>└ some-util.js</span></span>
<span class=""line""><span></span></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      text
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Reb9utjfb:-trigger-text-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Reb9utjfb:-content-text-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  A note about directory organisation: There are a few common practices for placing tests. Principle of least knowledge says to co-locate them (put them adjacent to implementation). Sometimes, that's in the same directory, or within a drawer like a
  <code>
   __test__
  </code>
  (also adjacent to the implementation, ""Files co-located but segregated""). Alternatively, some opt to create a
  <code>
   test/
  </code>
  sibling to
  <code>
   src/
  </code>
  (""'src' and 'test' fully segregated""), either with a mirrored structure or a ""junk drawer"".
 </p>
 <h2 id=""what-to-do-with-your-types"">
  <a href=""#what-to-do-with-your-types"">
   What to do with your types
  </a>
 </h2>
 <h3 id=""treat-types-like-a-test"">
  <a href=""#treat-types-like-a-test"">
   Treat types like a test
  </a>
 </h3>
 <p>
  The purpose of types is to warn an implementation will not work:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> foo</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">a</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> bar</span><span style=""color:#81A1C1"">:</span><span style=""color:#8FBCBB""> number</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> foo</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">//    ^^^ Type 'string' is not assignable to type 'number'.</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <p>
  TypeScript has warned that the above code will not behave as intended, just like a unit test warns that code does not behave as intended. They are complementary and verify different things—you should have both.
 </p>
 <p>
  Your editor (eg VS Code) likely has built-in support for TypeScript, displaying errors as you work. If not, and/or you missed those, CI will have your back.
 </p>
 <p>
  The following
  <a href=""https://github.com/features/actions"">
   GitHub Action
  </a>
  sets up a CI task to automatically check (and require) types pass inspection for a PR into the
  <code>
   main
  </code>
  branch.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rvb9utjfb:-trigger-yaml-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rvb9utjfb:-content-yaml-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-yaml"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99""># yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> Tests</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">on</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">  pull_request</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    branches</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">*</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">]</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">jobs</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">  check-types</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#707e99"">    # Separate these from tests because</span></span>
<span class=""line""><span style=""color:#707e99"">    # they are platform and node-version independent</span></span>
<span class=""line""><span style=""color:#707e99"">    # and need be run only once.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">    runs-on</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ubuntu-latest</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">    steps</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/checkout@v4</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/setup-node@v4</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        with</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          node-version-file</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">.nvmrc</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          cache</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">npm</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> npm clean install</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        run</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> npm ci</span></span>
<span class=""line""><span style=""color:#707e99"">      # You may want to run a lint check here too</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> run</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> node --run types:check</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">  get-matrix</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#707e99"">    # Automatically pick active LTS versions</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    runs-on</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ubuntu-latest</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    outputs</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">      latest</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ${{ steps.set-matrix.outputs.requireds }}</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    steps</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ljharb/actions/node/matrix@main</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        id</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> set-matrix</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        with</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          versionsAsRoot</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          type</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> majors</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          preset</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">&gt;= 22</span><span style=""color:#ECEFF4"">'</span><span style=""color:#707e99""> # glob is not backported below 22.x</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">  test</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    needs</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> [</span><span style=""color:#A3BE8C"">get-matrix</span><span style=""color:#ECEFF4"">]</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    runs-on</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ${{ matrix.os }}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">    strategy</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">      fail-fast</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> false</span></span>
<span class=""line""><span style=""color:#8FBCBB"">      matrix</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        node-version</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ${{ fromJson(needs.get-matrix.outputs.latest) }}</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        os</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">          -</span><span style=""color:#A3BE8C""> macos-latest</span></span>
<span class=""line""><span style=""color:#ECEFF4"">          -</span><span style=""color:#A3BE8C""> ubuntu-latest</span></span>
<span class=""line""><span style=""color:#ECEFF4"">          -</span><span style=""color:#A3BE8C""> windows-latest</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">    steps</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/checkout@v4</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> Use node ${{ matrix.node-version }}</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/setup-node@v4</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        with</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          node-version</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ${{ matrix.node-version }}</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          cache</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">npm</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> npm clean install</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        run</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> npm ci</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> run</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> node --run test</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      YAML
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rvb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rvb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:Rvb9utjfb:-trigger-json-2"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rvb9utjfb:-content-json-2"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:Rvb9utjfb:-trigger-json-3"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rvb9utjfb:-content-json-3"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Note that test files may well have a different
  <code>
   tsconfig.json
  </code>
  applied (hence why they are excluded in the above sample).
 </p>
 <h3 id=""generate-type-declarations"">
  <a href=""#generate-type-declarations"">
   Generate type declarations
  </a>
 </h3>
 <p>
  Type declarations (
  <code>
   .d.ts
  </code>
  and friends) provide type information as a sidecar file, allowing the execution code to be vanilla JavaScript whilst still having types.
 </p>
 <p>
  Since these are generated based on source code, they can be built as part of your publication process and do not need to be checked into your repository.
 </p>
 <p>
  Take the following example, where the type declarations are generated just before publishing to the npm registry.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1ab9utjfb:-trigger-yaml-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1ab9utjfb:-content-yaml-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-yaml"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99""># yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99""># This is mostly boilerplate.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> Publish to npm</span></span>
<span class=""line""><span style=""color:#81A1C1"">on</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">  push</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    tags</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">**@*</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">jobs</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">  build</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    runs-on</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> ubuntu-latest</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">    permissions</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">      contents</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> read</span></span>
<span class=""line""><span style=""color:#8FBCBB"">    steps</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/checkout@v4</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> uses</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> actions/setup-node@v4</span></span>
<span class=""line""><span style=""color:#8FBCBB"">        with</span><span style=""color:#ECEFF4"">:</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          node-version-file</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">.nvmrc</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#8FBCBB"">          registry-url</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">https://registry.npmjs.org</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      -</span><span style=""color:#8FBCBB""> run</span><span style=""color:#ECEFF4"">:</span><span style=""color:#A3BE8C""> npm ci</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">      # - name: Publish to npm</span></span>
<span class=""line""><span style=""color:#707e99"">      #   run: … npm publish …</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      YAML
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1ab9utjfb:-trigger-diff-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1ab9utjfb:-content-diff-1"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:R1ab9utjfb:-trigger-ini-2"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1ab9utjfb:-content-ini-2"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:R1ab9utjfb:-trigger-ini-3"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1ab9utjfb:-content-ini-3"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You'll want to publish a package compiled to support all Node.js LTS versions since you don't know which version the consumer will be running; the
  <code>
   tsconfig
  </code>
  s in this article support node 18.x and later.
 </p>
 <p>
  <code>
   npm publish
  </code>
  will automatically run
  <a href=""https://docs.npmjs.com/cli/using-npm/scripts#npm-publish"">
   <code>
    prepack
   </code>
   beforehand
  </a>
  .
  <code>
   npm
  </code>
  will also run
  <code>
   prepack
  </code>
  automatically before
  <code>
   npm pack --dry-run
  </code>
  (so you can easily see what your published package will be without actually publishing it).
  <strong>
   Beware
  </strong>
  ,
  <a href=""../command-line/run-nodejs-scripts-from-the-command-line.md#using-the---run-flag"">
   <code>
    node --run
   </code>
   does
   <em>
    not
   </em>
   do that
  </a>
  . You can't use
  <code>
   node --run
  </code>
  for this step, so that caveat does not apply here, but it can for other steps.
 </p>
 <p>
  The steps to actually publish to npm will be included in a separate article (there are several pros and cons beyond the scope of this article).
 </p>
 <h4 id=""breaking-this-down"">
  <a href=""#breaking-this-down"">
   Breaking this down
  </a>
 </h4>
 <p>
  Generating type declarations is deterministic: you'll get the same output from the same input, every time. So there is no need to commit these to git.
 </p>
 <p>
  <a href=""https://docs.npmjs.com/cli/commands/npm-publish"">
   <code>
    npm publish
   </code>
  </a>
  grabs everything applicable and available at the moment the command is run; so generating type declarations immediately before means those are available and will get picked up.
 </p>
 <p>
  By default,
  <code>
   npm publish
  </code>
  grabs (almost) everything (see
  <a href=""https://docs.npmjs.com/cli/commands/npm-publish#files-included-in-package"">
   Files included in package
  </a>
  ). In order to keep your published package minimal (see the ""Heaviest Objects in the Universe"" meme about
  <code>
   node_modules
  </code>
  ), you want to exclude certain files (like tests and test fixtures) from from packaging. Add these to the opt-out list specified in
  <a href=""https://docs.npmjs.com/cli/using-npm/developers#keeping-files-out-of-your-package"">
   <code>
    .npmignore
   </code>
  </a>
  ; ensure the
  <code>
   !*.d.ts
  </code>
  exception is listed, or the generated type declartions will not be published! Alternatively, you can use
  <a href=""https://docs.npmjs.com/cli/configuring-npm/package-json#files"">
   package.json ""files""
  </a>
  to create an opt-in (if a mistake is made accidentally omitting a file, your package may be broken for downstream users, so this is a less safe option).
 </p>
</main>
"
Asynchronous Work,Asynchronous flow control,"<main>
 <h1 id=""asynchronous-flow-control"">
  <a href=""#asynchronous-flow-control"">
   Asynchronous flow control
  </a>
 </h1>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   The material in this post is heavily inspired by
   <a href=""http://book.mixu.net/node/ch7.html"">
    Mixu's Node.js Book
   </a>
   .
  </p>
 </blockquote>
 <p>
  At its core, JavaScript is designed to be non-blocking on the ""main"" thread, this is where views are rendered. You can imagine the importance of this in the browser. When the main thread becomes blocked it results in the infamous ""freezing"" that end users dread, and no other events can be dispatched resulting in the loss of data acquisition, for example.
 </p>
 <p>
  This creates some unique constraints that only a functional style of programming can cure. This is where callbacks come in to the picture.
 </p>
 <p>
  However, callbacks can become challenging to handle in more complicated procedures. This often results in ""callback hell"" where multiple nested functions with callbacks make the code more challenging to read, debug, organize, etc.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">async1</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">input</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> result1</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  async2</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">result2</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">    async3</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">result3</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      async4</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">result4</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">        async5</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">output</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">          // do something with output</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Of course, in real life there would most likely be additional lines of code to handle
  <code>
   result1
  </code>
  ,
  <code>
   result2
  </code>
  , etc., thus, the length and complexity of this issue usually results in code that looks much more messy than the example above.
 </p>
 <p>
  <strong>
   This is where
   <em>
    functions
   </em>
   come in to great use. More complex operations are made up of many functions:
  </strong>
 </p>
 <ol>
  <li>
   initiator style / input
  </li>
  <li>
   middleware
  </li>
  <li>
   terminator
  </li>
 </ol>
 <p>
  <strong>
   The ""initiator style / input"" is the first function in the sequence. This function will accept the original input, if any, for the operation. The operation is an executable series of functions, and the original input will primarily be:
  </strong>
 </p>
 <ol>
  <li>
   variables in a global environment
  </li>
  <li>
   direct invocation with or without arguments
  </li>
  <li>
   values obtained by file system or network requests
  </li>
 </ol>
 <p>
  Network requests can be incoming requests initiated by a foreign network, by another application on the same network, or by the app itself on the same or foreign network.
 </p>
 <p>
  A middleware function will return another function, and a terminator function will invoke the callback. The following illustrates the flow to network or file system requests. Here the latency is 0 because all these values are available in memory.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> final</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">someInput</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  callback</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">someInput</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> and terminated by executing callback </span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> middleware</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">someInput</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#88C0D0""> final</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">someInput</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> touched by middleware </span><span style=""color:#ECEFF4"">`</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> initiate</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> someInput</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">hello this is a function </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  middleware</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">someInput</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">result</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">    // requires callback to `return` result</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">initiate</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""state-management"">
  <a href=""#state-management"">
   State management
  </a>
 </h2>
 <p>
  Functions may or may not be state dependent. State dependency arises when the input or other variable of a function relies on an outside function.
 </p>
 <p>
  <strong>
   In this way there are two primary strategies for state management:
  </strong>
 </p>
 <ol>
  <li>
   passing in variables directly to a function, and
  </li>
  <li>
   acquiring a variable value from a cache, session, file, database, network, or other outside source.
  </li>
 </ol>
 <p>
  Note, I did not mention global variable. Managing state with global variables is often a sloppy anti-pattern that makes it difficult or impossible to guarantee state. Global variables in complex programs should be avoided when possible.
 </p>
 <h2 id=""control-flow"">
  <a href=""#control-flow"">
   Control flow
  </a>
 </h2>
 <p>
  If an object is available in memory, iteration is possible, and there will not be a change to control flow:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> getSong</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> _song</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 100</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &gt;</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> -=</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    _song</span><span style=""color:#81A1C1""> +=</span><span style=""color:#ECEFF4""> `</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> beers on the wall, you take one down and pass it around, </span><span style=""color:#81A1C1"">${</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      i</span><span style=""color:#81A1C1""> -</span><span style=""color:#B48EAD""> 1</span></span>
<span class=""line""><span style=""color:#81A1C1"">    }</span><span style=""color:#A3BE8C""> bottles of beer on the wall</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      _song</span><span style=""color:#81A1C1""> +=</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">Hey let's get some more beer</span><span style=""color:#ECEFF4"">""</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> _song</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> singSong</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">""</span><span style=""color:#A3BE8C"">song is '' empty, FEED ME A SONG!</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> song</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> getSong</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// this will work</span></span>
<span class=""line""><span style=""color:#88C0D0"">singSong</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">song</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  However, if the data exists outside of memory the iteration will no longer work:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> getSong</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> _song</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ''</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 100</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &gt;</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> -=</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">    /* eslint-disable no-loop-func */</span></span>
<span class=""line""><span style=""color:#88C0D0"">    setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      _song</span><span style=""color:#81A1C1""> +=</span><span style=""color:#ECEFF4""> `</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> beers on the wall, you take one down and pass it around, </span><span style=""color:#81A1C1"">${</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        i</span><span style=""color:#81A1C1""> -</span><span style=""color:#B48EAD""> 1</span></span>
<span class=""line""><span style=""color:#81A1C1"">      }</span><span style=""color:#A3BE8C""> bottles of beer on the wall</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">      if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        _song</span><span style=""color:#81A1C1""> +=</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">Hey let's get some more beer</span><span style=""color:#ECEFF4"">""</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">    /* eslint-enable no-loop-func */</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> _song</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> singSong</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">""</span><span style=""color:#A3BE8C"">song is '' empty, FEED ME A SONG!</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">_song</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> song</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> getSong</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">beer</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// this will not work</span></span>
<span class=""line""><span style=""color:#88C0D0"">singSong</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">song</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// Uncaught Error: song is '' empty, FEED ME A SONG!</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Why did this happen?
  <code>
   setTimeout
  </code>
  instructs the CPU to store the instructions elsewhere on the bus, and instructs that the data is scheduled for pickup at a later time. Thousands of CPU cycles pass before the function hits again at the 0 millisecond mark, the CPU fetches the instructions from the bus and executes them. The only problem is that song ('') was returned thousands of cycles prior.
 </p>
 <p>
  The same situation arises in dealing with file systems and network requests. The main thread simply cannot be blocked for an indeterminate period of time-- therefore, we use callbacks to schedule the execution of code in time in a controlled manner.
 </p>
 <p>
  You will be able to perform almost all of your operations with the following 3 patterns:
 </p>
 <ol>
  <li>
   <strong>
    In series:
   </strong>
   functions will be executed in a strict sequential order, this one is most similar to
   <code>
    for
   </code>
   loops.
  </li>
 </ol>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// operations defined elsewhere and ready to execute</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> operations</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> func</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> function1</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> args</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> args1</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> func</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> function2</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> args</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> args2</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> func</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> function3</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> args</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> args3</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> executeFunctionWithArgs</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">operation</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // executes function</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> args</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> func</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> operation</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  func</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">args</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> serialProcedure</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">operation</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">operation</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">exit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // finished</span></span>
<span class=""line""><span style=""color:#88C0D0"">  executeFunctionWithArgs</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">operation</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // continue AFTER callback</span></span>
<span class=""line""><span style=""color:#88C0D0"">    serialProcedure</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">operations</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">shift</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">serialProcedure</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">operations</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">shift</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <ol start=""2"">
  <li>
   <strong>
    Limited in series:
   </strong>
   functions will be executed in a strict sequential order, but with a limit on the number of executions. Useful when you need to process a large list but with a cap on the number of items successfully processed.
  </li>
 </ol>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> successCount</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> final</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">dispatched </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">successCount</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> emails</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">finished</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> dispatch</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // `sendEmail` is a hypothetical SMTP client</span></span>
<span class=""line""><span style=""color:#88C0D0"">  sendMail</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      subject</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Dinner tonight</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      message</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">We have lots of cabbage on the plate. You coming?</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      smtp</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> recipient</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">email</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    callback</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> sendOneMillionEmailsOnly</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  getListOfTenMillionGreatEmails</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> bigList</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">    function</span><span style=""color:#88C0D0""> serial</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#81A1C1""> ||</span><span style=""color:#D8DEE9""> successCount</span><span style=""color:#81A1C1""> &gt;=</span><span style=""color:#B48EAD""> 1000000</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">return</span><span style=""color:#88C0D0""> final</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">      dispatch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">_err</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">        if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">_err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#D8DEE9"">successCount</span><span style=""color:#81A1C1""> +=</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">        serial</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">bigList</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pop</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">    serial</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">bigList</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pop</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">sendOneMillionEmailsOnly</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <ol start=""3"">
  <li>
   <strong>
    Full parallel:
   </strong>
   when ordering is not an issue, such as emailing a list of 1,000,000 email recipients.
  </li>
 </ol>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> count</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> success</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> failed</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> recipients</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Bart</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> email</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bart@tld</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Marge</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> email</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">marge@tld</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Homer</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> email</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">homer@tld</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Lisa</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> email</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">lisa@tld</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> name</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Maggie</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> email</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">maggie@tld</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> dispatch</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // `sendEmail` is a hypothetical SMTP client</span></span>
<span class=""line""><span style=""color:#88C0D0"">  sendMail</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      subject</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Dinner tonight</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      message</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">We have lots of cabbage on the plate. You coming?</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      smtp</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> recipient</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">email</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    callback</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> final</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Result: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">count</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> attempts </span><span style=""color:#EBCB8B"">\</span></span>
<span class=""line""><span style=""color:#A3BE8C"">      &amp; </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">success</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> succeeded emails</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">failed</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9FF"">length)</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Failed to send to: </span><span style=""color:#EBCB8B"">\</span></span>
<span class=""line""><span style=""color:#EBCB8B"">        \n</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">result</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">failed</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">join</span><span style=""color:#ECEFF4"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">}</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">recipients</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  dispatch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      success</span><span style=""color:#81A1C1""> +=</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      failed</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">recipient</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">name</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    count</span><span style=""color:#81A1C1""> +=</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">count</span><span style=""color:#81A1C1""> ===</span><span style=""color:#D8DEE9""> recipients</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9FF"">length) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">      final</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        count</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        success</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        failed</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Each has its own use cases, benefits, and issues you can experiment and read about in more detail. Most importantly, remember to modularize your operations and use callbacks! If you feel any doubt, treat everything as if it were middleware!
 </p>
</main>
"
Asynchronous Work,Overview of Blocking vs Non-Blocking,"<main>
 <h1 id=""overview-of-blocking-vs-non-blocking"">
  <a href=""#overview-of-blocking-vs-non-blocking"">
   Overview of Blocking vs Non-Blocking
  </a>
 </h1>
 <p>
  This overview covers the difference between
  <strong>
   blocking
  </strong>
  and
  <strong>
   non-blocking
  </strong>
  calls in Node.js. This overview will refer to the event loop and libuv but no
prior knowledge of those topics is required. Readers are assumed to have a
basic understanding of the JavaScript language and Node.js
  <a href=""/en/learn/asynchronous-work/javascript-asynchronous-programming-and-callbacks"">
   callback pattern
  </a>
  .
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   ""I/O"" refers primarily to interaction with the system's disk and
network supported by
   <a href=""https://libuv.org/"">
    libuv
   </a>
   .
  </p>
 </blockquote>
 <h2 id=""blocking"">
  <a href=""#blocking"">
   Blocking
  </a>
 </h2>
 <p>
  <strong>
   Blocking
  </strong>
  is when the execution of additional JavaScript in the Node.js
process must wait until a non-JavaScript operation completes. This happens
because the event loop is unable to continue running JavaScript while a
  <strong>
   blocking
  </strong>
  operation is occurring.
 </p>
 <p>
  In Node.js, JavaScript that exhibits poor performance due to being CPU intensive
rather than waiting on a non-JavaScript operation, such as I/O, isn't typically
referred to as
  <strong>
   blocking
  </strong>
  . Synchronous methods in the Node.js standard library
that use libuv are the most commonly used
  <strong>
   blocking
  </strong>
  operations. Native
modules may also have
  <strong>
   blocking
  </strong>
  methods.
 </p>
 <p>
  All of the I/O methods in the Node.js standard library provide asynchronous
versions, which are
  <strong>
   non-blocking
  </strong>
  , and accept callback functions. Some
methods also have
  <strong>
   blocking
  </strong>
  counterparts, which have names that end with
  <code>
   Sync
  </code>
  .
 </p>
 <h2 id=""comparing-code"">
  <a href=""#comparing-code"">
   Comparing Code
  </a>
 </h2>
 <p>
  <strong>
   Blocking
  </strong>
  methods execute
  <strong>
   synchronously
  </strong>
  and
  <strong>
   non-blocking
  </strong>
  methods
execute
  <strong>
   asynchronously
  </strong>
  .
 </p>
 <p>
  Using the File System module as an example, this is a
  <strong>
   synchronous
  </strong>
  file read:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFileSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // blocks here until file is read</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  And here is an equivalent
  <strong>
   asynchronous
  </strong>
  example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The first example appears simpler than the second but has the disadvantage of
the second line
  <strong>
   blocking
  </strong>
  the execution of any additional JavaScript until
the entire file is read. Note that in the synchronous version if an error is
thrown it will need to be caught or the process will crash. In the asynchronous
version, it is up to the author to decide whether an error should throw as
shown.
 </p>
 <p>
  Let's expand our example a little bit:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFileSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // blocks here until file is read</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">moreWork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // will run after console.log</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  And here is a similar, but not equivalent asynchronous example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">moreWork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // will run before console.log</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  In the first example above,
  <code>
   console.log
  </code>
  will be called before
  <code>
   moreWork()
  </code>
  . In
the second example
  <code>
   fs.readFile()
  </code>
  is
  <strong>
   non-blocking
  </strong>
  so JavaScript execution
can continue and
  <code>
   moreWork()
  </code>
  will be called first. The ability to run
  <code>
   moreWork()
  </code>
  without waiting for the file read to complete is a key design
choice that allows for higher throughput.
 </p>
 <h2 id=""concurrency-and-throughput"">
  <a href=""#concurrency-and-throughput"">
   Concurrency and Throughput
  </a>
 </h2>
 <p>
  JavaScript execution in Node.js is single threaded, so concurrency refers to the
event loop's capacity to execute JavaScript callback functions after completing
other work. Any code that is expected to run in a concurrent manner must allow
the event loop to continue running as non-JavaScript operations, like I/O, are
occurring.
 </p>
 <p>
  As an example, let's consider a case where each request to a web server takes
50ms to complete and 45ms of that 50ms is database I/O that can be done
asynchronously. Choosing
  <strong>
   non-blocking
  </strong>
  asynchronous operations frees up that
45ms per request to handle other requests. This is a significant difference in
capacity just by choosing to use
  <strong>
   non-blocking
  </strong>
  methods instead of
  <strong>
   blocking
  </strong>
  methods.
 </p>
 <p>
  The event loop is different than models in many other languages where additional
threads may be created to handle concurrent work.
 </p>
 <h2 id=""dangers-of-mixing-blocking-and-non-blocking-code"">
  <a href=""#dangers-of-mixing-blocking-and-non-blocking-code"">
   Dangers of Mixing Blocking and Non-Blocking Code
  </a>
 </h2>
 <p>
  There are some patterns that should be avoided when dealing with I/O. Let's look
at an example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">unlinkSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  In the above example,
  <code>
   fs.unlinkSync()
  </code>
  is likely to be run before
  <code>
   fs.readFile()
  </code>
  , which would delete
  <code>
   file.md
  </code>
  before it is actually read. A
better way to write this, which is completely
  <strong>
   non-blocking
  </strong>
  and guaranteed to
execute in the correct order is:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">readFileErr</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">readFileErr</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> readFileErr</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">unlink</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> unlinkErr</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">unlinkErr</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">throw</span><span style=""color:#D8DEE9""> unlinkErr</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The above places a
  <strong>
   non-blocking
  </strong>
  call to
  <code>
   fs.unlink()
  </code>
  within the callback of
  <code>
   fs.readFile()
  </code>
  which guarantees the correct order of operations.
 </p>
 <h2 id=""additional-resources"">
  <a href=""#additional-resources"">
   Additional Resources
  </a>
 </h2>
 <ul>
  <li>
   <a href=""https://libuv.org/"">
    libuv
   </a>
  </li>
 </ul>
</main>
"
Asynchronous Work,JavaScript Asynchronous Programming and Callbacks,"<main>
 <h1 id=""javascript-asynchronous-programming-and-callbacks"">
  <a href=""#javascript-asynchronous-programming-and-callbacks"">
   JavaScript Asynchronous Programming and Callbacks
  </a>
 </h1>
 <h2 id=""asynchronicity-in-programming-languages"">
  <a href=""#asynchronicity-in-programming-languages"">
   Asynchronicity in Programming Languages
  </a>
 </h2>
 <p>
  Computers are asynchronous by design.
 </p>
 <p>
  Asynchronous means that things can happen independently of the main program flow.
 </p>
 <p>
  In the current consumer computers, every program runs for a specific time slot and then it stops its execution to let another program continue their execution. This thing runs in a cycle so fast that it's impossible to notice. We think our computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines).
 </p>
 <p>
  Programs internally use
  <em>
   interrupts
  </em>
  , a signal that's emitted to the processor to gain the attention of the system.
 </p>
 <p>
  Let's not go into the internals of this now, but just keep in mind that it's normal for programs to be asynchronous and halt their execution until they need attention, allowing the computer to execute other things in the meantime. When a program is waiting for a response from the network, it cannot halt the processor until the request finishes.
 </p>
 <p>
  Normally, programming languages are synchronous and some provide a way to manage asynchronicity in the language or through libraries. C, Java, C#, PHP, Go, Ruby, Swift, and Python are all synchronous by default. Some of them handle async operations by using threads, spawning a new process.
 </p>
 <h2 id=""javascript"">
  <a href=""#javascript"">
   JavaScript
  </a>
 </h2>
 <p>
  JavaScript is
  <strong>
   synchronous
  </strong>
  by default and is single threaded. This means that code cannot create new threads and run in parallel.
 </p>
 <p>
  Lines of code are executed in series, one after another, for example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> a</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> b</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 2</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> c</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> a</span><span style=""color:#81A1C1""> *</span><span style=""color:#D8DEE9""> b</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">c</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">doSomething</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  But JavaScript was born inside the browser, its main job, in the beginning, was to respond to user actions, like
  <code>
   onClick
  </code>
  ,
  <code>
   onMouseOver
  </code>
  ,
  <code>
   onChange
  </code>
  ,
  <code>
   onSubmit
  </code>
  and so on. How could it do this with a synchronous programming model?
 </p>
 <p>
  The answer was in its environment. The
  <strong>
   browser
  </strong>
  provides a way to do it by providing a set of APIs that can handle this kind of functionality.
 </p>
 <p>
  More recently, Node.js introduced a non-blocking I/O environment to extend this concept to file access, network calls and so on.
 </p>
 <h2 id=""callbacks"">
  <a href=""#callbacks"">
   Callbacks
  </a>
 </h2>
 <p>
  You can't know when a user is going to click a button. So, you
  <strong>
   define an event handler for the click event
  </strong>
  . This event handler accepts a function, which will be called when the event is triggered:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">document</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">getElementById</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">button</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">addEventListener</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">click</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // item clicked</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is the so-called
  <strong>
   callback
  </strong>
  .
 </p>
 <p>
  A callback is a simple function that's passed as a value to another function, and will only be executed when the event happens. We can do this because JavaScript has first-class functions, which can be assigned to variables and passed around to other functions (called
  <strong>
   higher-order functions
  </strong>
  )
 </p>
 <p>
  It's common to wrap all your client code in a
  <code>
   load
  </code>
  event listener on the
  <code>
   window
  </code>
  object, which runs the callback function only when the page is ready:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">window</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">addEventListener</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">load</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // window loaded</span></span>
<span class=""line""><span style=""color:#707e99"">  // do what you want</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Callbacks are used everywhere, not just in DOM events.
 </p>
 <p>
  One common example is by using timers:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // runs after 2 seconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  XHR requests also accept a callback, in this example by assigning a function to a property that will be called when a particular event occurs (in this case, the state of the request changes):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> xhr</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> XMLHttpRequest</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">onreadystatechange</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">readyState</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 4</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">status</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 200</span><span style=""color:#81A1C1""> ?</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">responseText</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">:</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">open</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">GET</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">https://yoursite.com</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">xhr</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">send</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""handling-errors-in-callbacks"">
  <a href=""#handling-errors-in-callbacks"">
   Handling errors in callbacks
  </a>
 </h3>
 <p>
  How do you handle errors with callbacks? One very common strategy is to use what Node.js adopted: the first parameter in any callback function is the error object:
  <strong>
   error-first callbacks
  </strong>
 </p>
 <p>
  If there is no error, the object is
  <code>
   null
  </code>
  . If there is an error, it contains some description of the error and other information.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/file.json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">    // handle error</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // no errors, process data</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""the-problem-with-callbacks"">
  <a href=""#the-problem-with-callbacks"">
   The problem with callbacks
  </a>
 </h3>
 <p>
  Callbacks are great for simple cases!
 </p>
 <p>
  However every callback adds a level of nesting, and when you have lots of callbacks, the code starts to be complicated very quickly:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">window</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">addEventListener</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">load</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  document</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">getElementById</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">button</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">addEventListener</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">click</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">    setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      items</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">item</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">        // your code here</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is just a simple 4-levels code, but I've seen much more levels of nesting and it's not fun.
 </p>
 <p>
  How do we solve this?
 </p>
 <h3 id=""alternatives-to-callbacks"">
  <a href=""#alternatives-to-callbacks"">
   Alternatives to callbacks
  </a>
 </h3>
 <p>
  Starting with ES6, JavaScript introduced several features that help us with asynchronous code that do not involve using callbacks: Promises (ES6) and Async/Await (ES2017).
 </p>
</main>
"
Asynchronous Work,Discover JavaScript Timers,"<main>
 <h1 id=""discover-javascript-timers"">
  <a href=""#discover-javascript-timers"">
   Discover JavaScript Timers
  </a>
 </h1>
 <h2 id=""settimeout"">
  <a href=""#settimeout"">
   <code>
    setTimeout()
   </code>
  </a>
 </h2>
 <p>
  When writing JavaScript code, you might want to delay the execution of a function.
 </p>
 <p>
  This is the job of
  <code>
   setTimeout
  </code>
  . You specify a callback function to execute later, and a value expressing how later you want it to run, in milliseconds:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // runs after 2 seconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // runs after 50 milliseconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 50</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This syntax defines a new function. You can call whatever other function you want in there, or you can pass an existing function name, and a set of parameters:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> myFunction</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">firstParam</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> secondParam</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // do something</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// runs after 2 seconds</span></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">myFunction</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> firstParam</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> secondParam</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <code>
   setTimeout
  </code>
  returns the timer id. This is generally not used, but you can store this id, and clear it if you want to delete this scheduled function execution:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> id</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // should run after 2 seconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// I changed my mind</span></span>
<span class=""line""><span style=""color:#88C0D0"">clearTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">id</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""zero-delay"">
  <a href=""#zero-delay"">
   Zero delay
  </a>
 </h3>
 <p>
  If you specify the timeout delay to
  <code>
   0
  </code>
  , the callback function will be executed as soon as possible, but after the current function execution:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">after </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C""> before </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This code will print
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">before</span></span>
<span class=""line""><span style=""color:#88C0D0"">after</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  This is especially useful to avoid blocking the CPU on intensive tasks and let other functions be executed while performing a heavy calculation, by queuing functions in the scheduler.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Some browsers (IE and Edge) implement a
   <code>
    setImmediate()
   </code>
   method that does this same exact functionality, but it's not standard and
   <a href=""https://caniuse.com/#feat=setimmediate"">
    unavailable on other browsers
   </a>
   . But it's a standard function in Node.js.
  </p>
 </blockquote>
 <h2 id=""setinterval"">
  <a href=""#setinterval"">
   <code>
    setInterval()
   </code>
  </a>
 </h2>
 <p>
  <code>
   setInterval
  </code>
  is a function similar to
  <code>
   setTimeout
  </code>
  , with a difference: instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">setInterval</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // runs every 2 seconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The function above runs every 2 seconds unless you tell it to stop, using
  <code>
   clearInterval
  </code>
  , passing it the interval id that
  <code>
   setInterval
  </code>
  returned:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> id</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> setInterval</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // runs every 2 seconds</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 2000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">clearInterval</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">id</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  It's common to call
  <code>
   clearInterval
  </code>
  inside the setInterval callback function, to let it auto-determine if it should run again or stop. For example this code runs something unless App.somethingIWait has the value
  <code>
   arrived
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> interval</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> setInterval</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">App</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">somethingIWait</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">arrived</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">    clearInterval</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">interval</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#707e99"">  // otherwise do things</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 100</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""recursive-settimeout"">
  <a href=""#recursive-settimeout"">
   Recursive setTimeout
  </a>
 </h2>
 <p>
  <code>
   setInterval
  </code>
  starts a function every n milliseconds, without any consideration about when a function finished its execution.
 </p>
 <p>
  If a function always takes the same amount of time, it's all fine:
 </p>
 <p>
  <img alt=""setInterval working fine"" class=""h-auto w-auto"" data-nimg=""1"" decoding=""async"" height=""0"" loading=""lazy"" sizes=""(min-width: 768px) 200vw, 500vw"" src=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=3840&amp;q=75"" srcset=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=16&amp;q=75 16w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=32&amp;q=75 32w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=48&amp;q=75 48w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=64&amp;q=75 64w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=96&amp;q=75 96w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=128&amp;q=75 128w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=256&amp;q=75 256w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=384&amp;q=75 384w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=640&amp;q=75 640w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=750&amp;q=75 750w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=828&amp;q=75 828w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-ok.png&amp;w=3840&amp;q=75 3840w"" style=""color:transparent"" width=""0""/>
 </p>
 <p>
  Maybe the function takes different execution times, depending on network conditions for example:
 </p>
 <p>
  <img alt=""setInterval varying duration"" class=""h-auto w-auto"" data-nimg=""1"" decoding=""async"" height=""0"" loading=""lazy"" sizes=""(min-width: 768px) 200vw, 500vw"" src=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=3840&amp;q=75"" srcset=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=16&amp;q=75 16w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=32&amp;q=75 32w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=48&amp;q=75 48w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=64&amp;q=75 64w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=96&amp;q=75 96w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=128&amp;q=75 128w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=256&amp;q=75 256w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=384&amp;q=75 384w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=640&amp;q=75 640w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=750&amp;q=75 750w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=828&amp;q=75 828w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-varying-duration.png&amp;w=3840&amp;q=75 3840w"" style=""color:transparent"" width=""0""/>
 </p>
 <p>
  And maybe one long execution overlaps the next one:
 </p>
 <p>
  <img alt=""setInterval overlapping"" class=""h-auto w-auto"" data-nimg=""1"" decoding=""async"" height=""0"" loading=""lazy"" sizes=""(min-width: 768px) 200vw, 500vw"" src=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=3840&amp;q=75"" srcset=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=16&amp;q=75 16w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=32&amp;q=75 32w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=48&amp;q=75 48w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=64&amp;q=75 64w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=96&amp;q=75 96w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=128&amp;q=75 128w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=256&amp;q=75 256w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=384&amp;q=75 384w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=640&amp;q=75 640w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=750&amp;q=75 750w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=828&amp;q=75 828w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Fsetinterval-overlapping.png&amp;w=3840&amp;q=75 3840w"" style=""color:transparent"" width=""0""/>
 </p>
 <p>
  To avoid this, you can schedule a recursive setTimeout to be called when the callback function finishes:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> myFunction</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // do something</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">myFunction</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 1000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">myFunction</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 1000</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  to achieve this scenario:
 </p>
 <p>
  <img alt=""Recursive setTimeout"" class=""h-auto w-auto"" data-nimg=""1"" decoding=""async"" height=""0"" loading=""lazy"" sizes=""(min-width: 768px) 200vw, 500vw"" src=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=3840&amp;q=75"" srcset=""/_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=16&amp;q=75 16w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=32&amp;q=75 32w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=48&amp;q=75 48w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=64&amp;q=75 64w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=96&amp;q=75 96w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=128&amp;q=75 128w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=256&amp;q=75 256w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=384&amp;q=75 384w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=640&amp;q=75 640w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=750&amp;q=75 750w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=828&amp;q=75 828w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=1080&amp;q=75 1080w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=1200&amp;q=75 1200w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=1920&amp;q=75 1920w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=2048&amp;q=75 2048w, /_next/image?url=%2Fstatic%2Fimages%2Flearn%2Fjavascript-timers%2Frecursive-settimeout.png&amp;w=3840&amp;q=75 3840w"" style=""color:transparent"" width=""0""/>
 </p>
 <p>
  <code>
   setTimeout
  </code>
  and
  <code>
   setInterval
  </code>
  are available in Node.js, through the
  <a href=""https://nodejs.org/api/timers.html"">
   Timers module
  </a>
  .
 </p>
 <p>
  Node.js also provides
  <code>
   setImmediate()
  </code>
  , which is equivalent to using
  <code>
   setTimeout(() =&gt; {}, 0)
  </code>
  , mostly used to work with the Node.js Event Loop.
 </p>
</main>
"
Asynchronous Work,The Node.js Event Loop,"<main>
 <h1 id=""the-nodejs-event-loop"">
  <a href=""#the-nodejs-event-loop"">
   The Node.js Event Loop
  </a>
 </h1>
 <h2 id=""what-is-the-event-loop"">
  <a href=""#what-is-the-event-loop"">
   What is the Event Loop?
  </a>
 </h2>
 <p>
  The event loop is what allows Node.js to perform non-blocking I/O
operations — despite the fact that a single JavaScript thread is used by default — by
offloading operations to the system kernel whenever possible.
 </p>
 <p>
  Since most modern kernels are multi-threaded, they can handle multiple
operations executing in the background. When one of these operations
completes, the kernel tells Node.js so that the appropriate callback
may be added to the
  <strong>
   poll
  </strong>
  queue to eventually be executed. We'll explain
this in further detail later in this topic.
 </p>
 <h2 id=""event-loop-explained"">
  <a href=""#event-loop-explained"">
   Event Loop Explained
  </a>
 </h2>
 <p>
  When Node.js starts, it initializes the event loop, processes the
provided input script (or drops into the
  <a href=""https://nodejs.org/api/repl.html#repl_repl"">
   REPL
  </a>
  , which is not covered in
this document) which may make async API calls, schedule timers, or call
  <code>
   process.nextTick()
  </code>
  , then begins processing the event loop.
 </p>
 <p>
  The following diagram shows a simplified overview of the event loop's
order of operations.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>┌───────────────────────────┐</span></span>
<span class=""line""><span>┌─&gt;│</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>timers</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>└─────────────┬─────────────┘</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>┌─────────────┴─────────────┐</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>pending</span><span> </span><span>callbacks</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>└─────────────┬─────────────┘</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>┌─────────────┴─────────────┐</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>idle,</span><span> </span><span>prepare</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>└─────────────┬─────────────┘</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>┌───────────────┐</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>┌─────────────┴─────────────┐</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span>incoming:</span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>poll</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│&lt;─────┤</span><span> </span><span></span><span> </span><span>connections,</span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>└─────────────┬─────────────┘</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span>data,</span><span> </span><span>etc.</span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>┌─────────────┴─────────────┐</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>└───────────────┘</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>│</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>check</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>└─────────────┬─────────────┘</span></span>
<span class=""line""><span>│</span><span> </span><span></span><span> </span><span>┌─────────────┴─────────────┐</span></span>
<span class=""line""><span>└──┤</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>close</span><span> </span><span>callbacks</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>│</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>└───────────────────────────┘</span></span>
</code></pre>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Each box will be referred to as a ""phase"" of the event loop.
  </p>
 </blockquote>
 <p>
  Each phase has a FIFO queue of callbacks to execute. While each phase is
special in its own way, generally, when the event loop enters a given
phase, it will perform any operations specific to that phase, then
execute callbacks in that phase's queue until the queue has been
exhausted or the maximum number of callbacks has executed. When the
queue has been exhausted or the callback limit is reached, the event
loop will move to the next phase, and so on.
 </p>
 <p>
  Since any of these operations may schedule
  <em>
   more
  </em>
  operations and new
events processed in the
  <strong>
   poll
  </strong>
  phase are queued by the kernel, poll
events can be queued while polling events are being processed. As a
result, long running callbacks can allow the poll phase to run much
longer than a timer's threshold. See the
  <a href=""#timers"">
   <strong>
    timers
   </strong>
  </a>
  and
  <a href=""#poll"">
   <strong>
    poll
   </strong>
  </a>
  sections for more details.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   There is a slight discrepancy between the Windows and the
Unix/Linux implementation, but that's not important for this
demonstration. The most important parts are here. There are actually
seven or eight steps, but the ones we care about — ones that Node.js
actually uses - are those above.
  </p>
 </blockquote>
 <h2 id=""phases-overview"">
  <a href=""#phases-overview"">
   Phases Overview
  </a>
 </h2>
 <ul>
  <li>
   <strong>
    timers
   </strong>
   : this phase executes callbacks scheduled by
   <code>
    setTimeout()
   </code>
   and
   <code>
    setInterval()
   </code>
   .
  </li>
  <li>
   <strong>
    pending callbacks
   </strong>
   : executes I/O callbacks deferred to the next loop
iteration.
  </li>
  <li>
   <strong>
    idle, prepare
   </strong>
   : only used internally.
  </li>
  <li>
   <strong>
    poll
   </strong>
   : retrieve new I/O events; execute I/O related callbacks (almost
all with the exception of close callbacks, the ones scheduled by timers,
and
   <code>
    setImmediate()
   </code>
   ); node will block here when appropriate.
  </li>
  <li>
   <strong>
    check
   </strong>
   :
   <code>
    setImmediate()
   </code>
   callbacks are invoked here.
  </li>
  <li>
   <strong>
    close callbacks
   </strong>
   : some close callbacks, e.g.
   <code>
    socket.on('close', ...)
   </code>
   .
  </li>
 </ul>
 <p>
  Between each run of the event loop, Node.js checks if it is waiting for
any asynchronous I/O or timers and shuts down cleanly if there are not
any.
 </p>
 <h2 id=""phases-in-detail"">
  <a href=""#phases-in-detail"">
   Phases in Detail
  </a>
 </h2>
 <h3 id=""timers"">
  <a href=""#timers"">
   timers
  </a>
 </h3>
 <p>
  A timer specifies the
  <strong>
   threshold
  </strong>
  <em>
   after which
  </em>
  a provided callback
  <em>
   may be executed
  </em>
  rather than the
  <strong>
   exact
  </strong>
  time a person
  <em>
   wants it to
be executed
  </em>
  . Timers callbacks will run as early as they can be
scheduled after the specified amount of time has passed; however,
Operating System scheduling or the running of other callbacks may delay
them.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Technically, the
   <a href=""#poll"">
    <strong>
     poll
    </strong>
    phase
   </a>
   controls when timers are executed.
  </p>
 </blockquote>
 <p>
  For example, say you schedule a timeout to execute after a 100 ms
threshold, then your script starts asynchronously reading a file which
takes 95 ms:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> someAsyncOperation</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // Assume this takes 95ms to complete</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/path/to/file</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> timeoutScheduled</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Date</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">now</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> delay</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Date</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">now</span><span style=""color:#D8DEE9FF"">() </span><span style=""color:#81A1C1"">-</span><span style=""color:#D8DEE9""> timeoutScheduled</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">delay</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">ms have passed since I was scheduled</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 100</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// do someAsyncOperation which takes 95 ms to complete</span></span>
<span class=""line""><span style=""color:#88C0D0"">someAsyncOperation</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> startCallback</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Date</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">now</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // do something that will take 10ms...</span></span>
<span class=""line""><span style=""color:#81A1C1"">  while</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">Date</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">now</span><span style=""color:#D8DEE9FF"">() </span><span style=""color:#81A1C1"">-</span><span style=""color:#D8DEE9""> startCallback</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#B48EAD""> 10</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">    // do nothing</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  When the event loop enters the
  <strong>
   poll
  </strong>
  phase, it has an empty queue
(
  <code>
   fs.readFile()
  </code>
  has not completed), so it will wait for the number of ms
remaining until the soonest timer's threshold is reached. While it is
waiting 95 ms pass,
  <code>
   fs.readFile()
  </code>
  finishes reading the file and its
callback which takes 10 ms to complete is added to the
  <strong>
   poll
  </strong>
  queue and
executed. When the callback finishes, there are no more callbacks in the
queue, so the event loop will see that the threshold of the soonest
timer has been reached then wrap back to the
  <strong>
   timers
  </strong>
  phase to execute
the timer's callback. In this example, you will see that the total delay
between the timer being scheduled and its callback being executed will
be 105ms.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   To prevent the
   <strong>
    poll
   </strong>
   phase from starving the event loop,
   <a href=""https://libuv.org/"">
    libuv
   </a>
   (the C library that implements the Node.js
event loop and all of the asynchronous behaviors of the platform)
also has a hard maximum (system dependent) before it stops polling for
more events.
  </p>
 </blockquote>
 <h3 id=""pending-callbacks"">
  <a href=""#pending-callbacks"">
   pending callbacks
  </a>
 </h3>
 <p>
  This phase executes callbacks for some system operations such as types
of TCP errors. For example if a TCP socket receives
  <code>
   ECONNREFUSED
  </code>
  when
attempting to connect, some *nix systems want to wait to report the
error. This will be queued to execute in the
  <strong>
   pending callbacks
  </strong>
  phase.
 </p>
 <h3 id=""poll"">
  <a href=""#poll"">
   poll
  </a>
 </h3>
 <p>
  The
  <strong>
   poll
  </strong>
  phase has two main functions:
 </p>
 <ol>
  <li>
   Calculating how long it should block and poll for I/O, then
  </li>
  <li>
   Processing events in the
   <strong>
    poll
   </strong>
   queue.
  </li>
 </ol>
 <p>
  When the event loop enters the
  <strong>
   poll
  </strong>
  phase
  <em>
   and there are no timers
scheduled
  </em>
  , one of two things will happen:
 </p>
 <ul>
  <li>
   <p>
    <em>
     If the
     <strong>
      poll
     </strong>
     queue
     <strong>
      is not empty
     </strong>
    </em>
    , the event loop will iterate
through its queue of callbacks executing them synchronously until
either the queue has been exhausted, or the system-dependent hard limit
is reached.
   </p>
  </li>
  <li>
   <p>
    <em>
     If the
     <strong>
      poll
     </strong>
     queue
     <strong>
      is empty
     </strong>
    </em>
    , one of two more things will
happen:
   </p>
   <ul>
    <li>
     <p>
      If scripts have been scheduled by
      <code>
       setImmediate()
      </code>
      , the event loop
will end the
      <strong>
       poll
      </strong>
      phase and continue to the
      <strong>
       check
      </strong>
      phase to
execute those scheduled scripts.
     </p>
    </li>
    <li>
     <p>
      If scripts
      <strong>
       have not
      </strong>
      been scheduled by
      <code>
       setImmediate()
      </code>
      , the
event loop will wait for callbacks to be added to the queue, then
execute them immediately.
     </p>
    </li>
   </ul>
  </li>
 </ul>
 <p>
  Once the
  <strong>
   poll
  </strong>
  queue is empty the event loop will check for timers
  <em>
   whose time thresholds have been reached
  </em>
  . If one or more timers are
ready, the event loop will wrap back to the
  <strong>
   timers
  </strong>
  phase to execute
those timers' callbacks.
 </p>
 <h3 id=""check"">
  <a href=""#check"">
   check
  </a>
 </h3>
 <p>
  This phase allows the event loop to execute callbacks immediately after the
  <strong>
   poll
  </strong>
  phase has completed. If the
  <strong>
   poll
  </strong>
  phase becomes idle and
scripts have been queued with
  <code>
   setImmediate()
  </code>
  , the event loop may
continue to the
  <strong>
   check
  </strong>
  phase rather than waiting.
 </p>
 <p>
  <code>
   setImmediate()
  </code>
  is actually a special timer that runs in a separate
phase of the event loop. It uses a libuv API that schedules callbacks to
execute after the
  <strong>
   poll
  </strong>
  phase has completed.
 </p>
 <p>
  Generally, as the code is executed, the event loop will eventually hit
the
  <strong>
   poll
  </strong>
  phase where it will wait for an incoming connection, request,
etc. However, if a callback has been scheduled with
  <code>
   setImmediate()
  </code>
  and the
  <strong>
   poll
  </strong>
  phase becomes idle, it will end and continue to the
  <strong>
   check
  </strong>
  phase rather than waiting for
  <strong>
   poll
  </strong>
  events.
 </p>
 <h3 id=""close-callbacks"">
  <a href=""#close-callbacks"">
   close callbacks
  </a>
 </h3>
 <p>
  If a socket or handle is closed abruptly (e.g.
  <code>
   socket.destroy()
  </code>
  ), the
  <code>
   'close'
  </code>
  event will be emitted in this phase. Otherwise it will be
emitted via
  <code>
   process.nextTick()
  </code>
  .
 </p>
 <h2 id=""setimmediate-vs-settimeout"">
  <a href=""#setimmediate-vs-settimeout"">
   <code>
    setImmediate()
   </code>
   vs
   <code>
    setTimeout()
   </code>
  </a>
 </h2>
 <p>
  <code>
   setImmediate()
  </code>
  and
  <code>
   setTimeout()
  </code>
  are similar, but behave in different
ways depending on when they are called.
 </p>
 <ul>
  <li>
   <code>
    setImmediate()
   </code>
   is designed to execute a script once the
current
   <strong>
    poll
   </strong>
   phase completes.
  </li>
  <li>
   <code>
    setTimeout()
   </code>
   schedules a script to be run after a minimum threshold
in ms has elapsed.
  </li>
 </ul>
 <p>
  The order in which the timers are executed will vary depending on the
context in which they are called. If both are called from within the
main module, then timing will be bound by the performance of the process
(which can be impacted by other applications running on the machine).
 </p>
 <p>
  For example, if we run the following script which is not within an I/O
cycle (i.e. the main module), the order in which the two timers are
executed is non-deterministic, as it is bound by the performance of the
process:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2lb9utjfb:-trigger-js-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2lb9utjfb:-content-js-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// timeout_vs_immediate.js</span></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">timeout</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">immediate</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2lb9utjfb:-trigger-bash-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2lb9utjfb:-content-bash-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  However, if you move the two calls within an I/O cycle, the immediate
callback is always executed first:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2ob9utjfb:-trigger-js-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2ob9utjfb:-content-js-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// timeout_vs_immediate.js</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">__filename</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">timeout</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">immediate</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2ob9utjfb:-trigger-bash-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2ob9utjfb:-content-bash-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The main advantage to using
  <code>
   setImmediate()
  </code>
  over
  <code>
   setTimeout()
  </code>
  is
  <code>
   setImmediate()
  </code>
  will always be executed before any timers if scheduled
within an I/O cycle, independently of how many timers are present.
 </p>
 <h2 id=""processnexttick"">
  <a href=""#processnexttick"">
   <code>
    process.nextTick()
   </code>
  </a>
 </h2>
 <h3 id=""understanding-processnexttick"">
  <a href=""#understanding-processnexttick"">
   Understanding
   <code>
    process.nextTick()
   </code>
  </a>
 </h3>
 <p>
  You may have noticed that
  <code>
   process.nextTick()
  </code>
  was not displayed in the
diagram, even though it's a part of the asynchronous API. This is because
  <code>
   process.nextTick()
  </code>
  is not technically part of the event loop. Instead,
the
  <code>
   nextTickQueue
  </code>
  will be processed after the current operation is
completed, regardless of the current phase of the event loop. Here,
an
  <em>
   operation
  </em>
  is defined as a transition from the
underlying C/C++ handler, and handling the JavaScript that needs to be
executed.
 </p>
 <p>
  Looking back at our diagram, any time you call
  <code>
   process.nextTick()
  </code>
  in a
given phase, all callbacks passed to
  <code>
   process.nextTick()
  </code>
  will be
resolved before the event loop continues. This can create some bad
situations because
  <strong>
   it allows you to ""starve"" your I/O by making
recursive
   <code>
    process.nextTick()
   </code>
   calls
  </strong>
  , which prevents the event loop
from reaching the
  <strong>
   poll
  </strong>
  phase.
 </p>
 <h3 id=""why-would-that-be-allowed"">
  <a href=""#why-would-that-be-allowed"">
   Why would that be allowed?
  </a>
 </h3>
 <p>
  Why would something like this be included in Node.js? Part of it is a
design philosophy where an API should always be asynchronous even where
it doesn't have to be. Take this code snippet for example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> apiCall</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">arg</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">typeof</span><span style=""color:#D8DEE9""> arg</span><span style=""color:#81A1C1""> !==</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">string</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      callback</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#81A1C1"">      new</span><span style=""color:#88C0D0""> TypeError</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">argument should be string</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The snippet does an argument check and if it's not correct, it will pass
the error to the callback. The API updated fairly recently to allow
passing arguments to
  <code>
   process.nextTick()
  </code>
  allowing it to take any
arguments passed after the callback to be propagated as the arguments to
the callback so you don't have to nest functions.
 </p>
 <p>
  What we're doing is passing an error back to the user but only
  <em>
   after
  </em>
  we have allowed the rest of the user's code to execute. By using
  <code>
   process.nextTick()
  </code>
  we guarantee that
  <code>
   apiCall()
  </code>
  always runs its
callback
  <em>
   after
  </em>
  the rest of the user's code and
  <em>
   before
  </em>
  the event loop
is allowed to proceed. To achieve this, the JS call stack is allowed to
unwind then immediately execute the provided callback which allows a
person to make recursive calls to
  <code>
   process.nextTick()
  </code>
  without reaching a
  <code>
   RangeError: Maximum call stack size exceeded from v8
  </code>
  .
 </p>
 <p>
  This philosophy can lead to some potentially problematic situations.
Take this snippet for example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> bar</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// this has an asynchronous signature, but calls callback synchronously</span></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> someAsyncApiCall</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// the callback is called before `someAsyncApiCall` completes.</span></span>
<span class=""line""><span style=""color:#88C0D0"">someAsyncApiCall</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // since someAsyncApiCall hasn't completed, bar hasn't been assigned any value</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> bar</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // undefined</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">bar</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The user defines
  <code>
   someAsyncApiCall()
  </code>
  to have an asynchronous signature,
but it actually operates synchronously. When it is called, the callback
provided to
  <code>
   someAsyncApiCall()
  </code>
  is called in the same phase of the
event loop because
  <code>
   someAsyncApiCall()
  </code>
  doesn't actually do anything
asynchronously. As a result, the callback tries to reference
  <code>
   bar
  </code>
  even
though it may not have that variable in scope yet, because the script has not
been able to run to completion.
 </p>
 <p>
  By placing the callback in a
  <code>
   process.nextTick()
  </code>
  , the script still has the
ability to run to completion, allowing all the variables, functions,
etc., to be initialized prior to the callback being called. It also has
the advantage of not allowing the event loop to continue. It may be
useful for the user to be alerted to an error before the event loop is
allowed to continue. Here is the previous example using
  <code>
   process.nextTick()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> bar</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> someAsyncApiCall</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">callback</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">someAsyncApiCall</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> bar</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 1</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">bar</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Here's another real world example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> net</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">listening</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  When only a port is passed, the port is bound immediately. So, the
  <code>
   'listening'
  </code>
  callback could be called immediately. The problem is that the
  <code>
   .on('listening')
  </code>
  callback will not have been set by that time.
 </p>
 <p>
  To get around this, the
  <code>
   'listening'
  </code>
  event is queued in a
  <code>
   nextTick()
  </code>
  to allow the script to run to completion. This allows the user to set
any event handlers they want.
 </p>
 <h2 id=""processnexttick-vs-setimmediate"">
  <a href=""#processnexttick-vs-setimmediate"">
   <code>
    process.nextTick()
   </code>
   vs
   <code>
    setImmediate()
   </code>
  </a>
 </h2>
 <p>
  We have two calls that are similar as far as users are concerned, but
their names are confusing.
 </p>
 <ul>
  <li>
   <code>
    process.nextTick()
   </code>
   fires immediately on the same phase
  </li>
  <li>
   <code>
    setImmediate()
   </code>
   fires on the following iteration or 'tick' of the
event loop
  </li>
 </ul>
 <p>
  In essence, the names should be swapped.
  <code>
   process.nextTick()
  </code>
  fires more
immediately than
  <code>
   setImmediate()
  </code>
  , but this is an artifact of the past
which is unlikely to change. Making this switch would break a large
percentage of the packages on npm. Every day more new modules are being
added, which means every day we wait, more potential breakages occur.
While they are confusing, the names themselves won't change.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   We recommend developers use
   <code>
    setImmediate()
   </code>
   in all cases because it's
easier to reason about.
  </p>
 </blockquote>
 <h2 id=""why-use-processnexttick"">
  <a href=""#why-use-processnexttick"">
   Why use
   <code>
    process.nextTick()
   </code>
   ?
  </a>
 </h2>
 <p>
  There are two main reasons:
 </p>
 <ol>
  <li>
   <p>
    Allow users to handle errors, cleanup any then unneeded resources, or
perhaps try the request again before the event loop continues.
   </p>
  </li>
  <li>
   <p>
    At times it's necessary to allow a callback to run after the call
stack has unwound but before the event loop continues.
   </p>
  </li>
 </ol>
 <p>
  One example is to match the user's expectations. Simple example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> net</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">connection</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> conn</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">listening</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Say that
  <code>
   listen()
  </code>
  is run at the beginning of the event loop, but the
listening callback is placed in a
  <code>
   setImmediate()
  </code>
  . Unless a
hostname is passed, binding to the port will happen immediately. For
the event loop to proceed, it must hit the
  <strong>
   poll
  </strong>
  phase, which means
there is a non-zero chance that a connection could have been received
allowing the connection event to be fired before the listening event.
 </p>
 <p>
  Another example is extending an
  <code>
   EventEmitter
  </code>
  and emitting an
event from within the constructor:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> EventEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:events</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyEmitter</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> EventEmitter</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  constructor</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    super</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">emit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> myEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MyEmitter</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">myEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">an event occurred!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can't emit an event from the constructor immediately
because the script will not have processed to the point where the user
assigns a callback to that event. So, within the constructor itself,
you can use
  <code>
   process.nextTick()
  </code>
  to set a callback to emit the event
after the constructor has finished, which provides the expected results:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> EventEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:events</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyEmitter</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> EventEmitter</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  constructor</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    super</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">    // use nextTick to emit the event once a handler is assigned</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">emit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> myEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MyEmitter</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">myEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">an event occurred!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
</main>
"
Asynchronous Work,The Node.js Event Emitter,"<main>
 <h1 id=""the-nodejs-event-emitter"">
  <a href=""#the-nodejs-event-emitter"">
   The Node.js Event emitter
  </a>
 </h1>
 <p>
  If you worked with JavaScript in the browser, you know how much of the interaction of the user is handled through events: mouse clicks, keyboard button presses, reacting to mouse movements, and so on.
 </p>
 <p>
  On the backend side, Node.js offers us the option to build a similar system using the
  <a href=""https://nodejs.org/api/events.html"">
   <code>
    events
   </code>
   module
  </a>
  .
 </p>
 <p>
  This module, in particular, offers the
  <code>
   EventEmitter
  </code>
  class, which we'll use to handle our events.
 </p>
 <p>
  You initialize that using
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rbb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> EventEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:events</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> eventEmitter</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> EventEmitter</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rbb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  This object exposes, among many others, the
  <code>
   on
  </code>
  and
  <code>
   emit
  </code>
  methods.
 </p>
 <ul>
  <li>
   <code>
    emit
   </code>
   is used to trigger an event
  </li>
  <li>
   <code>
    on
   </code>
   is used to add a callback function that's going to be executed when the event is triggered
  </li>
 </ul>
 <p>
  For example, let's create a
  <code>
   start
  </code>
  event, and as a matter of providing a sample, we react to that by just logging to the console:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">started</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  When we run
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">emit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  the event handler function is triggered, and we get the console log.
 </p>
 <p>
  You can pass arguments to the event handler by passing them as additional arguments to
  <code>
   emit()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> number</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">started </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">number</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">emit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 23</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Multiple arguments:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">start</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> end</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">started from </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">start</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> to </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">end</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">eventEmitter</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">emit</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 100</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The EventEmitter object also exposes several other methods to interact with events, like
 </p>
 <ul>
  <li>
   <code>
    once()
   </code>
   : add a one-time listener
  </li>
  <li>
   <code>
    removeListener()
   </code>
   /
   <code>
    off()
   </code>
   : remove an event listener from an event
  </li>
  <li>
   <code>
    removeAllListeners()
   </code>
   : remove all listeners for an event
  </li>
 </ul>
 <p>
  You can read more about these methods in the
  <a href=""https://nodejs.org/api/events.html"">
   official documentation
  </a>
  .
 </p>
</main>
"
Asynchronous Work,Understanding process.nextTick(),"<main>
 <h1 id=""understanding-processnexttick"">
  <a href=""#understanding-processnexttick"">
   Understanding process.nextTick()
  </a>
 </h1>
 <p>
  As you try to understand the Node.js event loop, one important part of it is
  <code>
   process.nextTick()
  </code>
  .
Every time the runtime calls back into JavaScript for an event, we call it a tick.
 </p>
 <p>
  When we pass a function to
  <code>
   process.nextTick()
  </code>
  , we instruct the engine to invoke this function immediately after the current operation completes, before moving to the next phase in the event loop:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // do something</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The event loop is busy processing the current function code. When this operation ends, the JS engine runs all the functions passed to
  <code>
   nextTick
  </code>
  calls during that operation.
 </p>
 <p>
  It's the way we can tell the JS engine to process a function asynchronously (after the current function), but as soon as possible, not queue it.
 </p>
 <p>
  Calling
  <code>
   setTimeout(() =&gt; {}, 0)
  </code>
  will execute the function at the end of next tick, much later than when using
  <code>
   nextTick()
  </code>
  which prioritizes the call and executes it just before the beginning of the next tick.
 </p>
 <p>
  Use
  <code>
   nextTick()
  </code>
  when you want to make sure that in the next event loop iteration that code is already executed.
 </p>
 <h4 id=""an-example-of-the-order-of-events"">
  <a href=""#an-example-of-the-order-of-events"">
   An Example of the order of events:
  </a>
 </h4>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Hello =&gt; number 1</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Running before the timeout =&gt; number 3</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">setTimeout</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The timeout running last =&gt; number 4</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">},</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Running at next tick =&gt; number 2</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h4 id=""example-output"">
  <a href=""#example-output"">
   Example output:
  </a>
 </h4>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">Hello</span><span style=""color:#D8DEE9FF""> =</span><span style=""color:#81A1C1"">&gt;</span><span style=""color:#A3BE8C""> number</span><span style=""color:#B48EAD""> 1</span></span>
<span class=""line""><span style=""color:#88C0D0"">Running</span><span style=""color:#A3BE8C""> at</span><span style=""color:#A3BE8C""> next</span><span style=""color:#A3BE8C""> tick</span><span style=""color:#D8DEE9FF""> =</span><span style=""color:#81A1C1"">&gt;</span><span style=""color:#A3BE8C""> number</span><span style=""color:#B48EAD""> 2</span></span>
<span class=""line""><span style=""color:#88C0D0"">Running</span><span style=""color:#A3BE8C""> before</span><span style=""color:#A3BE8C""> the</span><span style=""color:#A3BE8C""> timeout</span><span style=""color:#D8DEE9FF""> =</span><span style=""color:#81A1C1"">&gt;</span><span style=""color:#A3BE8C""> number</span><span style=""color:#B48EAD""> 3</span></span>
<span class=""line""><span style=""color:#88C0D0"">The</span><span style=""color:#A3BE8C""> timeout</span><span style=""color:#A3BE8C""> running</span><span style=""color:#A3BE8C""> last</span><span style=""color:#D8DEE9FF""> =</span><span style=""color:#81A1C1"">&gt;</span><span style=""color:#A3BE8C""> number</span><span style=""color:#B48EAD""> 4</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  The exact output may differ from run to run.
 </p>
</main>
"
Asynchronous Work,Understanding setImmediate(),"<main>
 <h1 id=""understanding-setimmediate"">
  <a href=""#understanding-setimmediate"">
   Understanding setImmediate()
  </a>
 </h1>
 <p>
  When you want to execute some piece of code asynchronously, but as soon as possible, one option is to use the
  <code>
   setImmediate()
  </code>
  function provided by Node.js:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // run something</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the event loop.
 </p>
 <p>
  How is
  <code>
   setImmediate()
  </code>
  different from
  <code>
   setTimeout(() =&gt; {}, 0)
  </code>
  (passing a 0ms timeout), and from
  <code>
   process.nextTick()
  </code>
  and
  <code>
   Promise.then()
  </code>
  ?
 </p>
 <p>
  A function passed to
  <code>
   process.nextTick()
  </code>
  is going to be executed on the current iteration of the event loop, after the current operation ends. This means it will always execute before
  <code>
   setTimeout
  </code>
  and
  <code>
   setImmediate
  </code>
  .
 </p>
 <p>
  A
  <code>
   setTimeout()
  </code>
  callback with a 0ms delay is very similar to
  <code>
   setImmediate()
  </code>
  . The execution order will depend on various factors, but they will be both run in the next iteration of the event loop.
 </p>
 <p>
  A
  <code>
   process.nextTick
  </code>
  callback is added to
  <code>
   process.nextTick queue
  </code>
  . A
  <code>
   Promise.then()
  </code>
  callback is added to
  <code>
   promises microtask queue
  </code>
  . A
  <code>
   setTimeout
  </code>
  ,
  <code>
   setImmediate
  </code>
  callback is added to
  <code>
   macrotask queue
  </code>
  .
 </p>
 <p>
  Event loop executes tasks in
  <code>
   process.nextTick queue
  </code>
  first, and then executes
  <code>
   promises microtask queue
  </code>
  , and then executes
  <code>
   macrotask queue
  </code>
  .
 </p>
 <p>
  Here is an example to show the order between
  <code>
   setImmediate()
  </code>
  ,
  <code>
   process.nextTick()
  </code>
  and
  <code>
   Promise.then()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> baz</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">baz</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> foo</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">foo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> zoo</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">zoo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> start</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">start</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">baz</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  new</span><span style=""color:#8FBCBB""> Promise</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">resolve</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> reject</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">    resolve</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">then</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">resolve</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">resolve</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">zoo</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">foo</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">start</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// start foo bar zoo baz</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This code will first call
  <code>
   start()
  </code>
  , then call
  <code>
   foo()
  </code>
  in
  <code>
   process.nextTick queue
  </code>
  . After that, it will handle
  <code>
   promises microtask queue
  </code>
  , which prints
  <code>
   bar
  </code>
  and adds
  <code>
   zoo()
  </code>
  in
  <code>
   process.nextTick queue
  </code>
  at the same time. Then it will call
  <code>
   zoo()
  </code>
  which has just been added. In the end, the
  <code>
   baz()
  </code>
  in
  <code>
   macrotask queue
  </code>
  is called.
 </p>
 <p>
  The principle aforementioned holds true in CommonJS cases, but keep in mind in ES Modules, e.g.
  <code>
   mjs
  </code>
  files, the execution order will be different:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// start bar foo zoo baz</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is because the ES Module being loaded is wrapped as an asynchronous operation, and thus the entire script is actually already in the
  <code>
   promises microtask queue
  </code>
  . So when the promise is immediately resolved, its callback is appended to the
  <code>
   microtask
  </code>
  queue. Node.js will attempt to clear the queue until moving to any other queue, and hence you will see it outputs
  <code>
   bar
  </code>
  first.
 </p>
</main>
"
Asynchronous Work,Don't Block the Event Loop,"<main>
 <h1 id=""dont-block-the-event-loop-or-the-worker-pool"">
  <a href=""#dont-block-the-event-loop-or-the-worker-pool"">
   Don't Block the Event Loop (or the Worker Pool)
  </a>
 </h1>
 <h2 id=""should-you-read-this-guide"">
  <a href=""#should-you-read-this-guide"">
   Should you read this guide?
  </a>
 </h2>
 <p>
  If you're writing anything more complicated than a brief command-line script, reading this should help you write higher-performance, more-secure applications.
 </p>
 <p>
  This document is written with Node.js servers in mind, but the concepts apply to complex Node.js applications as well.
Where OS-specific details vary, this document is Linux-centric.
 </p>
 <h2 id=""summary"">
  <a href=""#summary"">
   Summary
  </a>
 </h2>
 <p>
  Node.js runs JavaScript code in the Event Loop (initialization and callbacks), and offers a Worker Pool to handle expensive tasks like file I/O.
Node.js scales well, sometimes better than more heavyweight approaches like Apache.
The secret to the scalability of Node.js is that it uses a small number of threads to handle many clients.
If Node.js can make do with fewer threads, then it can spend more of your system's time and memory working on clients rather than on paying space and time overheads for threads (memory, context-switching).
But because Node.js has only a few threads, you must structure your application to use them wisely.
 </p>
 <p>
  Here's a good rule of thumb for keeping your Node.js server speedy:
  <em>
   Node.js is fast when the work associated with each client at any given time is ""small""
  </em>
  .
 </p>
 <p>
  This applies to callbacks on the Event Loop and tasks on the Worker Pool.
 </p>
 <h2 id=""why-should-i-avoid-blocking-the-event-loop-and-the-worker-pool"">
  <a href=""#why-should-i-avoid-blocking-the-event-loop-and-the-worker-pool"">
   Why should I avoid blocking the Event Loop and the Worker Pool?
  </a>
 </h2>
 <p>
  Node.js uses a small number of threads to handle many clients.
In Node.js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.), and a pool of
  <code>
   k
  </code>
  Workers in a Worker Pool (aka the threadpool).
 </p>
 <p>
  If a thread is taking a long time to execute a callback (Event Loop) or a task (Worker), we call it ""blocked"".
While a thread is blocked working on behalf of one client, it cannot handle requests from any other clients.
This provides two motivations for blocking neither the Event Loop nor the Worker Pool:
 </p>
 <ol>
  <li>
   Performance: If you regularly perform heavyweight activity on either type of thread, the
   <em>
    throughput
   </em>
   (requests/second) of your server will suffer.
  </li>
  <li>
   Security: If it is possible that for certain input one of your threads might block, a malicious client could submit this ""evil input"", make your threads block, and keep them from working on other clients. This would be a
   <a href=""https://en.wikipedia.org/wiki/Denial-of-service_attack"">
    Denial of Service
   </a>
   attack.
  </li>
 </ol>
 <h2 id=""a-quick-review-of-node"">
  <a href=""#a-quick-review-of-node"">
   A quick review of Node
  </a>
 </h2>
 <p>
  Node.js uses the Event-Driven Architecture: it has an Event Loop for orchestration and a Worker Pool for expensive tasks.
 </p>
 <h3 id=""what-code-runs-on-the-event-loop"">
  <a href=""#what-code-runs-on-the-event-loop"">
   What code runs on the Event Loop?
  </a>
 </h3>
 <p>
  When they begin, Node.js applications first complete an initialization phase,
  <code>
   require
  </code>
  'ing modules and registering callbacks for events.
Node.js applications then enter the Event Loop, responding to incoming client requests by executing the appropriate callback.
This callback executes synchronously, and may register asynchronous requests to continue processing after it completes.
The callbacks for these asynchronous requests will also be executed on the Event Loop.
 </p>
 <p>
  The Event Loop will also fulfill the non-blocking asynchronous requests made by its callbacks, e.g., network I/O.
 </p>
 <p>
  In summary, the Event Loop executes the JavaScript callbacks registered for events, and is also responsible for fulfilling non-blocking asynchronous requests like network I/O.
 </p>
 <h3 id=""what-code-runs-on-the-worker-pool"">
  <a href=""#what-code-runs-on-the-worker-pool"">
   What code runs on the Worker Pool?
  </a>
 </h3>
 <p>
  The Worker Pool of Node.js is implemented in libuv (
  <a href=""http://docs.libuv.org/en/v1.x/threadpool.html"">
   docs
  </a>
  ), which exposes a general task submission API.
 </p>
 <p>
  Node.js uses the Worker Pool to handle ""expensive"" tasks.
This includes I/O for which an operating system does not provide a non-blocking version, as well as particularly CPU-intensive tasks.
 </p>
 <p>
  These are the Node.js module APIs that make use of this Worker Pool:
 </p>
 <ol>
  <li>
   I/O-intensive
   <!-- -->
   <ol>
    <li>
     <a href=""https://nodejs.org/api/dns.html"">
      DNS
     </a>
     :
     <code>
      dns.lookup()
     </code>
     ,
     <code>
      dns.lookupService()
     </code>
     .
    </li>
    <li>
     <a href=""https://nodejs.org/api/fs.html#fs_threadpool_usage"">
      File System
     </a>
     : All file system APIs except
     <code>
      fs.FSWatcher()
     </code>
     and those that are explicitly synchronous use libuv's threadpool.
    </li>
   </ol>
  </li>
  <li>
   CPU-intensive
   <!-- -->
   <ol>
    <li>
     <a href=""https://nodejs.org/api/crypto.html"">
      Crypto
     </a>
     :
     <code>
      crypto.pbkdf2()
     </code>
     ,
     <code>
      crypto.scrypt()
     </code>
     ,
     <code>
      crypto.randomBytes()
     </code>
     ,
     <code>
      crypto.randomFill()
     </code>
     ,
     <code>
      crypto.generateKeyPair()
     </code>
     .
    </li>
    <li>
     <a href=""https://nodejs.org/api/zlib.html#zlib_threadpool_usage"">
      Zlib
     </a>
     : All zlib APIs except those that are explicitly synchronous use libuv's threadpool.
    </li>
   </ol>
  </li>
 </ol>
 <p>
  In many Node.js applications, these APIs are the only sources of tasks for the Worker Pool. Applications and modules that use a
  <a href=""https://nodejs.org/api/addons.html"">
   C++ add-on
  </a>
  can submit other tasks to the Worker Pool.
 </p>
 <p>
  For the sake of completeness, we note that when you call one of these APIs from a callback on the Event Loop, the Event Loop pays some minor setup costs as it enters the Node.js C++ bindings for that API and submits a task to the Worker Pool.
These costs are negligible compared to the overall cost of the task, which is why the Event Loop is offloading it.
When submitting one of these tasks to the Worker Pool, Node.js provides a pointer to the corresponding C++ function in the Node.js C++ bindings.
 </p>
 <h3 id=""how-does-nodejs-decide-what-code-to-run-next"">
  <a href=""#how-does-nodejs-decide-what-code-to-run-next"">
   How does Node.js decide what code to run next?
  </a>
 </h3>
 <p>
  Abstractly, the Event Loop and the Worker Pool maintain queues for pending events and pending tasks, respectively.
 </p>
 <p>
  In truth, the Event Loop does not actually maintain a queue.
Instead, it has a collection of file descriptors that it asks the operating system to monitor, using a mechanism like
  <a href=""http://man7.org/linux/man-pages/man7/epoll.7.html"">
   epoll
  </a>
  (Linux),
  <a href=""https://developer.apple.com/library/content/documentation/Darwin/Conceptual/FSEvents_ProgGuide/KernelQueues/KernelQueues.html"">
   kqueue
  </a>
  (OSX), event ports (Solaris), or
  <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa365198.aspx"">
   IOCP
  </a>
  (Windows).
These file descriptors correspond to network sockets, any files it is watching, and so on.
When the operating system says that one of these file descriptors is ready, the Event Loop translates it to the appropriate event and invokes the callback(s) associated with that event.
You can learn more about this process
  <a href=""https://www.youtube.com/watch?v=P9csgxBgaZ8"">
   here
  </a>
  .
 </p>
 <p>
  In contrast, the Worker Pool uses a real queue whose entries are tasks to be processed.
A Worker pops a task from this queue and works on it, and when finished the Worker raises an ""At least one task is finished"" event for the Event Loop.
 </p>
 <h3 id=""what-does-this-mean-for-application-design"">
  <a href=""#what-does-this-mean-for-application-design"">
   What does this mean for application design?
  </a>
 </h3>
 <p>
  In a one-thread-per-client system like Apache, each pending client is assigned its own thread.
If a thread handling one client blocks, the operating system will interrupt it and give another client a turn.
The operating system thus ensures that clients that require a small amount of work are not penalized by clients that require more work.
 </p>
 <p>
  Because Node.js handles many clients with few threads, if a thread blocks handling one client's request, then pending client requests may not get a turn until the thread finishes its callback or task.
  <em>
   The fair treatment of clients is thus the responsibility of your application
  </em>
  .
This means that you shouldn't do too much work for any client in any single callback or task.
 </p>
 <p>
  This is part of why Node.js can scale well, but it also means that you are responsible for ensuring fair scheduling.
The next sections talk about how to ensure fair scheduling for the Event Loop and for the Worker Pool.
 </p>
 <h2 id=""dont-block-the-event-loop"">
  <a href=""#dont-block-the-event-loop"">
   Don't block the Event Loop
  </a>
 </h2>
 <p>
  The Event Loop notices each new client connection and orchestrates the generation of a response.
All incoming requests and outgoing responses pass through the Event Loop.
This means that if the Event Loop spends too long at any point, all current and new clients will not get a turn.
 </p>
 <p>
  You should make sure you never block the Event Loop.
In other words, each of your JavaScript callbacks should complete quickly.
This of course also applies to your
  <code>
   await
  </code>
  's, your
  <code>
   Promise.then
  </code>
  's, and so on.
 </p>
 <p>
  A good way to ensure this is to reason about the
  <a href=""https://en.wikipedia.org/wiki/Time_complexity"">
   ""computational complexity""
  </a>
  of your callbacks.
If your callback takes a constant number of steps no matter what its arguments are, then you'll always give every pending client a fair turn.
If your callback takes a different number of steps depending on its arguments, then you should think about how long the arguments might be.
 </p>
 <p>
  Example 1: A constant-time callback.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/constant-time</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Example 2: An
  <code>
   O(n)
  </code>
  callback. This callback will run quickly for small
  <code>
   n
  </code>
  and more slowly for large
  <code>
   n
  </code>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/countToN</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">n</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // n iterations before giving someone else a turn</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Iter </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Example 3: An
  <code>
   O(n^2)
  </code>
  callback. This callback will still run quickly for small
  <code>
   n
  </code>
  , but for large
  <code>
   n
  </code>
  it will run much more slowly than the previous
  <code>
   O(n)
  </code>
  example.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/countToN2</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">n</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // n^2 iterations before giving someone else a turn</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> j</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> j</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> j</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Iter </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">.</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">j</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""how-careful-should-you-be"">
  <a href=""#how-careful-should-you-be"">
   How careful should you be?
  </a>
 </h3>
 <p>
  Node.js uses the Google V8 engine for JavaScript, which is quite fast for many common operations.
Exceptions to this rule are regexps and JSON operations, discussed below.
 </p>
 <p>
  However, for complex tasks you should consider bounding the input and rejecting inputs that are too long.
That way, even if your callback has large complexity, by bounding the input you ensure the callback cannot take more than the worst-case time on the longest acceptable input.
You can then evaluate the worst-case cost of this callback and determine whether its running time is acceptable in your context.
 </p>
 <h3 id=""blocking-the-event-loop-redos"">
  <a href=""#blocking-the-event-loop-redos"">
   Blocking the Event Loop: REDOS
  </a>
 </h3>
 <p>
  One common way to block the Event Loop disastrously is by using a ""vulnerable""
  <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"">
   regular expression
  </a>
  .
 </p>
 <h4 id=""avoiding-vulnerable-regular-expressions"">
  <a href=""#avoiding-vulnerable-regular-expressions"">
   Avoiding vulnerable regular expressions
  </a>
 </h4>
 <p>
  A regular expression (regexp) matches an input string against a pattern.
We usually think of a regexp match as requiring a single pass through the input string ---
  <code>
   O(n)
  </code>
  time where
  <code>
   n
  </code>
  is the length of the input string.
In many cases, a single pass is indeed all it takes.
Unfortunately, in some cases the regexp match might require an exponential number of trips through the input string ---
  <code>
   O(2^n)
  </code>
  time.
An exponential number of trips means that if the engine requires
  <code>
   x
  </code>
  trips to determine a match, it will need
  <code>
   2*x
  </code>
  trips if we add only one more character to the input string.
Since the number of trips is linearly related to the time required, the effect of this evaluation will be to block the Event Loop.
 </p>
 <p>
  A
  <em>
   vulnerable regular expression
  </em>
  is one on which your regular expression engine might take exponential time, exposing you to
  <a href=""https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"">
   REDOS
  </a>
  on ""evil input"".
Whether or not your regular expression pattern is vulnerable (i.e. the regexp engine might take exponential time on it) is actually a difficult question to answer, and varies depending on whether you're using Perl, Python, Ruby, Java, JavaScript, etc., but here are some rules of thumb that apply across all of these languages:
 </p>
 <ol>
  <li>
   Avoid nested quantifiers like
   <code>
    (a+)*
   </code>
   . V8's regexp engine can handle some of these quickly, but others are vulnerable.
  </li>
  <li>
   Avoid OR's with overlapping clauses, like
   <code>
    (a|a)*
   </code>
   . Again, these are sometimes-fast.
  </li>
  <li>
   Avoid using backreferences, like
   <code>
    (a.*) \1
   </code>
   . No regexp engine can guarantee evaluating these in linear time.
  </li>
  <li>
   If you're doing a simple string match, use
   <code>
    indexOf
   </code>
   or the local equivalent. It will be cheaper and will never take more than
   <code>
    O(n)
   </code>
   .
  </li>
 </ol>
 <p>
  If you aren't sure whether your regular expression is vulnerable, remember that Node.js generally doesn't have trouble reporting a
  <em>
   match
  </em>
  even for a vulnerable regexp and a long input string.
The exponential behavior is triggered when there is a mismatch but Node.js can't be certain until it tries many paths through the input string.
 </p>
 <h4 id=""a-redos-example"">
  <a href=""#a-redos-example"">
   A REDOS example
  </a>
 </h4>
 <p>
  Here is an example vulnerable regexp exposing its server to REDOS:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">app</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/redos-me</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">req</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> filePath</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> req</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">query</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">filePath</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // REDOS</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">filePath</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">match</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">/(</span><span style=""color:#EBCB8B"">\/.</span><span style=""color:#81A1C1"">+</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1"">+$</span><span style=""color:#ECEFF4"">/</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">valid path</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">invalid path</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  res</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">sendStatus</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The vulnerable regexp in this example is a (bad!) way to check for a valid path on Linux.
It matches strings that are a sequence of ""/""-delimited names, like ""/a/b/c"".
It is dangerous because it violates rule 1: it has a doubly-nested quantifier.
 </p>
 <p>
  If a client queries with filePath
  <code>
   ///.../\n
  </code>
  (100 /'s followed by a newline character that the regexp's ""."" won't match), then the Event Loop will take effectively forever, blocking the Event Loop.
This client's REDOS attack causes all other clients not to get a turn until the regexp match finishes.
 </p>
 <p>
  For this reason, you should be leery of using complex regular expressions to validate user input.
 </p>
 <h4 id=""anti-redos-resources"">
  <a href=""#anti-redos-resources"">
   Anti-REDOS Resources
  </a>
 </h4>
 <p>
  There are some tools to check your regexps for safety, like
 </p>
 <ul>
  <li>
   <a href=""https://github.com/davisjam/safe-regex"">
    safe-regex
   </a>
  </li>
  <li>
   <a href=""https://github.com/superhuman/rxxr2"">
    rxxr2
   </a>
   .
  </li>
 </ul>
 <p>
  However, neither of these will catch all vulnerable regexps.
 </p>
 <p>
  Another approach is to use a different regexp engine.
You could use the
  <a href=""https://github.com/uhop/node-re2"">
   node-re2
  </a>
  module, which uses Google's blazing-fast
  <a href=""https://github.com/google/re2"">
   RE2
  </a>
  regexp engine.
But be warned, RE2 is not 100% compatible with V8's regexps, so check for regressions if you swap in the node-re2 module to handle your regexps.
And particularly complicated regexps are not supported by node-re2.
 </p>
 <p>
  If you're trying to match something ""obvious"", like a URL or a file path, find an example in a
  <a href=""http://www.regexlib.com"">
   regexp library
  </a>
  or use an npm module, e.g.
  <a href=""https://www.npmjs.com/package/ip-regex"">
   ip-regex
  </a>
  .
 </p>
 <h3 id=""blocking-the-event-loop-nodejs-core-modules"">
  <a href=""#blocking-the-event-loop-nodejs-core-modules"">
   Blocking the Event Loop: Node.js core modules
  </a>
 </h3>
 <p>
  Several Node.js core modules have synchronous expensive APIs, including:
 </p>
 <ul>
  <li>
   <a href=""https://nodejs.org/api/crypto.html"">
    Encryption
   </a>
  </li>
  <li>
   <a href=""https://nodejs.org/api/zlib.html"">
    Compression
   </a>
  </li>
  <li>
   <a href=""https://nodejs.org/api/fs.html"">
    File system
   </a>
  </li>
  <li>
   <a href=""https://nodejs.org/api/child_process.html"">
    Child process
   </a>
  </li>
 </ul>
 <p>
  These APIs are expensive, because they involve significant computation (encryption, compression), require I/O (file I/O), or potentially both (child process). These APIs are intended for scripting convenience, but are not intended for use in the server context. If you execute them on the Event Loop, they will take far longer to complete than a typical JavaScript instruction, blocking the Event Loop.
 </p>
 <p>
  In a server,
  <em>
   you should not use the following synchronous APIs from these modules
  </em>
  :
 </p>
 <ul>
  <li>
   Encryption:
   <!-- -->
   <ul>
    <li>
     <code>
      crypto.randomBytes
     </code>
     (synchronous version)
    </li>
    <li>
     <code>
      crypto.randomFillSync
     </code>
    </li>
    <li>
     <code>
      crypto.pbkdf2Sync
     </code>
    </li>
    <li>
     You should also be careful about providing large input to the encryption and decryption routines.
    </li>
   </ul>
  </li>
  <li>
   Compression:
   <!-- -->
   <ul>
    <li>
     <code>
      zlib.inflateSync
     </code>
    </li>
    <li>
     <code>
      zlib.deflateSync
     </code>
    </li>
   </ul>
  </li>
  <li>
   File system:
   <!-- -->
   <ul>
    <li>
     Do not use the synchronous file system APIs. For example, if the file you access is in a
     <a href=""https://en.wikipedia.org/wiki/Clustered_file_system#Distributed_file_systems"">
      distributed file system
     </a>
     like
     <a href=""https://en.wikipedia.org/wiki/Network_File_System"">
      NFS
     </a>
     , access times can vary widely.
    </li>
   </ul>
  </li>
  <li>
   Child process:
   <!-- -->
   <ul>
    <li>
     <code>
      child_process.spawnSync
     </code>
    </li>
    <li>
     <code>
      child_process.execSync
     </code>
    </li>
    <li>
     <code>
      child_process.execFileSync
     </code>
    </li>
   </ul>
  </li>
 </ul>
 <p>
  This list is reasonably complete as of Node.js v9.
 </p>
 <h3 id=""blocking-the-event-loop-json-dos"">
  <a href=""#blocking-the-event-loop-json-dos"">
   Blocking the Event Loop: JSON DOS
  </a>
 </h3>
 <p>
  <code>
   JSON.parse
  </code>
  and
  <code>
   JSON.stringify
  </code>
  are other potentially expensive operations.
While these are
  <code>
   O(n)
  </code>
  in the length of the input, for large
  <code>
   n
  </code>
  they can take surprisingly long.
 </p>
 <p>
  If your server manipulates JSON objects, particularly those from a client, you should be cautious about the size of the objects or strings you work with on the Event Loop.
 </p>
 <p>
  Example: JSON blocking. We create an object
  <code>
   obj
  </code>
  of size 2^21 and
  <code>
   JSON.stringify
  </code>
  it, run
  <code>
   indexOf
  </code>
  on the string, and then JSON.parse it. The
  <code>
   JSON.stringify
  </code>
  'd string is 50MB. It takes 0.7 seconds to stringify the object, 0.03 seconds to indexOf on the 50MB string, and 1.3 seconds to parse the string.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> obj</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> a</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> niter</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 20</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> before</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> str</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> pos</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> res</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> took</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#D8DEE9""> niter</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  obj</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> obj1</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> obj</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> obj2</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> obj</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Doubles in size each iter</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">before</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">str</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stringify</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">obj</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">took</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">before</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">JSON.stringify took </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> took</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">before</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">pos</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> str</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">indexOf</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">nomatch</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">took</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">before</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pure indexof took </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> took</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">before</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">res</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">parse</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">str</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">took</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">hrtime</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">before</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">JSON.parse took </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> took</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  There are npm modules that offer asynchronous JSON APIs. See for example:
 </p>
 <ul>
  <li>
   <a href=""https://www.npmjs.com/package/JSONStream"">
    JSONStream
   </a>
   , which has stream APIs.
  </li>
  <li>
   <a href=""https://www.npmjs.com/package/bfj"">
    Big-Friendly JSON
   </a>
   , which has stream APIs as well as asynchronous versions of the standard JSON APIs using the partitioning-on-the-Event-Loop paradigm outlined below.
  </li>
 </ul>
 <h3 id=""complex-calculations-without-blocking-the-event-loop"">
  <a href=""#complex-calculations-without-blocking-the-event-loop"">
   Complex calculations without blocking the Event Loop
  </a>
 </h3>
 <p>
  Suppose you want to do complex calculations in JavaScript without blocking the Event Loop.
You have two options: partitioning or offloading.
 </p>
 <h4 id=""partitioning"">
  <a href=""#partitioning"">
   Partitioning
  </a>
 </h4>
 <p>
  You could
  <em>
   partition
  </em>
  your calculations so that each runs on the Event Loop but regularly yields (gives turns to) other pending events.
In JavaScript it's easy to save the state of an ongoing task in a closure, as shown in example 2 below.
 </p>
 <p>
  For a simple example, suppose you want to compute the average of the numbers
  <code>
   1
  </code>
  to
  <code>
   n
  </code>
  .
 </p>
 <p>
  Example 1: Un-partitioned average, costs
  <code>
   O(n)
  </code>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#D8DEE9"">sum</span><span style=""color:#81A1C1""> +=</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> avg</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> sum</span><span style=""color:#81A1C1""> /</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">avg: </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> avg</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Example 2: Partitioned average, each of the
  <code>
   n
  </code>
  asynchronous steps costs
  <code>
   O(1)
  </code>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> asyncAvg</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">n</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> avgCB</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // Save ongoing sum in JS closure.</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> sum</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  function</span><span style=""color:#88C0D0""> help</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">i</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    sum</span><span style=""color:#81A1C1""> +=</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">i</span><span style=""color:#81A1C1""> ==</span><span style=""color:#D8DEE9""> n</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">      cb</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">sum</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">      return;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">    // ""Asynchronous recursion"".</span></span>
<span class=""line""><span style=""color:#707e99"">    // Schedule next operation asynchronously.</span></span>
<span class=""line""><span style=""color:#88C0D0"">    setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">help</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">bind</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> +</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // Start the helper, with CB to call avgCB.</span></span>
<span class=""line""><span style=""color:#88C0D0"">  help</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">1</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">sum</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    let</span><span style=""color:#D8DEE9""> avg</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> sum</span><span style=""color:#81A1C1""> /</span><span style=""color:#D8DEE9""> n</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    avgCB</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">avg</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">asyncAvg</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">n</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">avg</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">avg of 1-n: </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> avg</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can apply this principle to array iterations and so forth.
 </p>
 <h4 id=""offloading"">
  <a href=""#offloading"">
   Offloading
  </a>
 </h4>
 <p>
  If you need to do something more complex, partitioning is not a good option.
This is because partitioning uses only the Event Loop, and you won't benefit from multiple cores almost certainly available on your machine.
  <em>
   Remember, the Event Loop should orchestrate client requests, not fulfill them itself.
  </em>
  For a complicated task, move the work off of the Event Loop onto a Worker Pool.
 </p>
 <h5 id=""how-to-offload"">
  <a href=""#how-to-offload"">
   How to offload
  </a>
 </h5>
 <p>
  You have two options for a destination Worker Pool to which to offload work.
 </p>
 <ol>
  <li>
   You can use the built-in Node.js Worker Pool by developing a
   <a href=""https://nodejs.org/api/addons.html"">
    C++ addon
   </a>
   . On older versions of Node, build your C++ addon using
   <a href=""https://github.com/nodejs/nan"">
    NAN
   </a>
   , and on newer versions use
   <a href=""https://nodejs.org/api/n-api.html"">
    N-API
   </a>
   .
   <a href=""https://www.npmjs.com/package/webworker-threads"">
    node-webworker-threads
   </a>
   offers a JavaScript-only way to access the Node.js Worker Pool.
  </li>
  <li>
   You can create and manage your own Worker Pool dedicated to computation rather than the Node.js I/O-themed Worker Pool. The most straightforward ways to do this is using
   <a href=""https://nodejs.org/api/child_process.html"">
    Child Process
   </a>
   or
   <a href=""https://nodejs.org/api/cluster.html"">
    Cluster
   </a>
   .
  </li>
 </ol>
 <p>
  You should
  <em>
   not
  </em>
  simply create a
  <a href=""https://nodejs.org/api/child_process.html"">
   Child Process
  </a>
  for every client.
You can receive client requests more quickly than you can create and manage children, and your server might become a
  <a href=""https://en.wikipedia.org/wiki/Fork_bomb"">
   fork bomb
  </a>
  .
 </p>
 <h5 id=""downside-of-offloading"">
  <a href=""#downside-of-offloading"">
   Downside of offloading
  </a>
 </h5>
 <p>
  The downside of the offloading approach is that it incurs overhead in the form of
  <em>
   communication costs
  </em>
  .
Only the Event Loop is allowed to see the ""namespace"" (JavaScript state) of your application.
From a Worker, you cannot manipulate a JavaScript object in the Event Loop's namespace.
Instead, you have to serialize and deserialize any objects you wish to share.
Then the Worker can operate on its own copy of these object(s) and return the modified object (or a ""patch"") to the Event Loop.
 </p>
 <p>
  For serialization concerns, see the section on JSON DOS.
 </p>
 <h5 id=""some-suggestions-for-offloading"">
  <a href=""#some-suggestions-for-offloading"">
   Some suggestions for offloading
  </a>
 </h5>
 <p>
  You may wish to distinguish between CPU-intensive and I/O-intensive tasks because they have markedly different characteristics.
 </p>
 <p>
  A CPU-intensive task only makes progress when its Worker is scheduled, and the Worker must be scheduled onto one of your machine's
  <a href=""https://nodejs.org/api/os.html#os_os_cpus"">
   logical cores
  </a>
  .
If you have 4 logical cores and 5 Workers, one of these Workers cannot make progress.
As a result, you are paying overhead (memory and scheduling costs) for this Worker and getting no return for it.
 </p>
 <p>
  I/O-intensive tasks involve querying an external service provider (DNS, file system, etc.) and waiting for its response.
While a Worker with an I/O-intensive task is waiting for its response, it has nothing else to do and can be de-scheduled by the operating system, giving another Worker a chance to submit their request.
Thus,
  <em>
   I/O-intensive tasks will be making progress even while the associated thread is not running
  </em>
  .
External service providers like databases and file systems have been highly optimized to handle many pending requests concurrently.
For example, a file system will examine a large set of pending write and read requests to merge conflicting updates and to retrieve files in an optimal order.
 </p>
 <p>
  If you rely on only one Worker Pool, e.g. the Node.js Worker Pool, then the differing characteristics of CPU-bound and I/O-bound work may harm your application's performance.
 </p>
 <p>
  For this reason, you might wish to maintain a separate Computation Worker Pool.
 </p>
 <h4 id=""offloading-conclusions"">
  <a href=""#offloading-conclusions"">
   Offloading: conclusions
  </a>
 </h4>
 <p>
  For simple tasks, like iterating over the elements of an arbitrarily long array, partitioning might be a good option.
If your computation is more complex, offloading is a better approach: the communication costs, i.e. the overhead of passing serialized objects between the Event Loop and the Worker Pool, are offset by the benefit of using multiple cores.
 </p>
 <p>
  However, if your server relies heavily on complex calculations, you should think about whether Node.js is really a good fit. Node.js excels for I/O-bound work, but for expensive computation it might not be the best option.
 </p>
 <p>
  If you take the offloading approach, see the section on not blocking the Worker Pool.
 </p>
 <h2 id=""dont-block-the-worker-pool"">
  <a href=""#dont-block-the-worker-pool"">
   Don't block the Worker Pool
  </a>
 </h2>
 <p>
  Node.js has a Worker Pool composed of
  <code>
   k
  </code>
  Workers.
If you are using the Offloading paradigm discussed above, you might have a separate Computational Worker Pool, to which the same principles apply.
In either case, let us assume that
  <code>
   k
  </code>
  is much smaller than the number of clients you might be handling concurrently.
This is in keeping with the ""one thread for many clients"" philosophy of Node.js, the secret to its scalability.
 </p>
 <p>
  As discussed above, each Worker completes its current Task before proceeding to the next one on the Worker Pool queue.
 </p>
 <p>
  Now, there will be variation in the cost of the Tasks required to handle your clients' requests.
Some Tasks can be completed quickly (e.g. reading short or cached files, or producing a small number of random bytes), and others will take longer (e.g reading larger or uncached files, or generating more random bytes).
Your goal should be to
  <em>
   minimize the variation in Task times
  </em>
  , and you should use
  <em>
   Task partitioning
  </em>
  to accomplish this.
 </p>
 <h3 id=""minimizing-the-variation-in-task-times"">
  <a href=""#minimizing-the-variation-in-task-times"">
   Minimizing the variation in Task times
  </a>
 </h3>
 <p>
  If a Worker's current Task is much more expensive than other Tasks, then it will be unavailable to work on other pending Tasks.
In other words,
  <em>
   each relatively long Task effectively decreases the size of the Worker Pool by one until it is completed
  </em>
  .
This is undesirable because, up to a point, the more Workers in the Worker Pool, the greater the Worker Pool throughput (tasks/second) and thus the greater the server throughput (client requests/second).
One client with a relatively expensive Task will decrease the throughput of the Worker Pool, in turn decreasing the throughput of the server.
 </p>
 <p>
  To avoid this, you should try to minimize variation in the length of Tasks you submit to the Worker Pool.
While it is appropriate to treat the external systems accessed by your I/O requests (DB, FS, etc.) as black boxes, you should be aware of the relative cost of these I/O requests, and should avoid submitting requests you can expect to be particularly long.
 </p>
 <p>
  Two examples should illustrate the possible variation in task times.
 </p>
 <h4 id=""variation-example-long-running-file-system-reads"">
  <a href=""#variation-example-long-running-file-system-reads"">
   Variation example: Long-running file system reads
  </a>
 </h4>
 <p>
  Suppose your server must read files in order to handle some client requests.
After consulting the Node.js
  <a href=""https://nodejs.org/api/fs.html"">
   File system
  </a>
  APIs, you opted to use
  <code>
   fs.readFile()
  </code>
  for simplicity.
However,
  <code>
   fs.readFile()
  </code>
  is (
  <a href=""https://github.com/nodejs/node/pull/17054"">
   currently
  </a>
  ) not partitioned: it submits a single
  <code>
   fs.read()
  </code>
  Task spanning the entire file.
If you read shorter files for some users and longer files for others,
  <code>
   fs.readFile()
  </code>
  may introduce significant variation in Task lengths, to the detriment of Worker Pool throughput.
 </p>
 <p>
  For a worst-case scenario, suppose an attacker can convince your server to read an
  <em>
   arbitrary
  </em>
  file (this is a
  <a href=""https://www.owasp.org/index.php/Path_Traversal"">
   directory traversal vulnerability
  </a>
  ).
If your server is running Linux, the attacker can name an extremely slow file:
  <a href=""http://man7.org/linux/man-pages/man4/random.4.html"">
   <code>
    /dev/random
   </code>
  </a>
  .
For all practical purposes,
  <code>
   /dev/random
  </code>
  is infinitely slow, and every Worker asked to read from
  <code>
   /dev/random
  </code>
  will never finish that Task.
An attacker then submits
  <code>
   k
  </code>
  requests, one for each Worker, and no other client requests that use the Worker Pool will make progress.
 </p>
 <h4 id=""variation-example-long-running-crypto-operations"">
  <a href=""#variation-example-long-running-crypto-operations"">
   Variation example: Long-running crypto operations
  </a>
 </h4>
 <p>
  Suppose your server generates cryptographically secure random bytes using
  <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback"">
   <code>
    crypto.randomBytes()
   </code>
  </a>
  .
  <code>
   crypto.randomBytes()
  </code>
  is not partitioned: it creates a single
  <code>
   randomBytes()
  </code>
  Task to generate as many bytes as you requested.
If you create fewer bytes for some users and more bytes for others,
  <code>
   crypto.randomBytes()
  </code>
  is another source of variation in Task lengths.
 </p>
 <h3 id=""task-partitioning"">
  <a href=""#task-partitioning"">
   Task partitioning
  </a>
 </h3>
 <p>
  Tasks with variable time costs can harm the throughput of the Worker Pool.
To minimize variation in Task times, as far as possible you should
  <em>
   partition
  </em>
  each Task into comparable-cost sub-Tasks.
When each sub-Task completes it should submit the next sub-Task, and when the final sub-Task completes it should notify the submitter.
 </p>
 <p>
  To continue the
  <code>
   fs.readFile()
  </code>
  example, you should instead use
  <code>
   fs.read()
  </code>
  (manual partitioning) or
  <code>
   ReadStream
  </code>
  (automatically partitioned).
 </p>
 <p>
  The same principle applies to CPU-bound tasks; the
  <code>
   asyncAvg
  </code>
  example might be inappropriate for the Event Loop, but it is well suited to the Worker Pool.
 </p>
 <p>
  When you partition a Task into sub-Tasks, shorter Tasks expand into a small number of sub-Tasks, and longer Tasks expand into a larger number of sub-Tasks.
Between each sub-Task of a longer Task, the Worker to which it was assigned can work on a sub-Task from another, shorter, Task, thus improving the overall Task throughput of the Worker Pool.
 </p>
 <p>
  Note that the number of sub-Tasks completed is not a useful metric for the throughput of the Worker Pool.
Instead, concern yourself with the number of
  <em>
   Tasks
  </em>
  completed.
 </p>
 <h3 id=""avoiding-task-partitioning"">
  <a href=""#avoiding-task-partitioning"">
   Avoiding Task partitioning
  </a>
 </h3>
 <p>
  Recall that the purpose of Task partitioning is to minimize the variation in Task times.
If you can distinguish between shorter Tasks and longer Tasks (e.g. summing an array vs. sorting an array), you could create one Worker Pool for each class of Task.
Routing shorter Tasks and longer Tasks to separate Worker Pools is another way to minimize Task time variation.
 </p>
 <p>
  In favor of this approach, partitioning Tasks incurs overhead (the costs of creating a Worker Pool Task representation and of manipulating the Worker Pool queue), and avoiding partitioning saves you the costs of additional trips to the Worker Pool.
It also keeps you from making mistakes in partitioning your Tasks.
 </p>
 <p>
  The downside of this approach is that Workers in all of these Worker Pools will incur space and time overheads and will compete with each other for CPU time.
Remember that each CPU-bound Task makes progress only while it is scheduled.
As a result, you should only consider this approach after careful analysis.
 </p>
 <h3 id=""worker-pool-conclusions"">
  <a href=""#worker-pool-conclusions"">
   Worker Pool: conclusions
  </a>
 </h3>
 <p>
  Whether you use only the Node.js Worker Pool or maintain separate Worker Pool(s), you should optimize the Task throughput of your Pool(s).
 </p>
 <p>
  To do this, minimize the variation in Task times by using Task partitioning.
 </p>
 <h2 id=""the-risks-of-npm-modules"">
  <a href=""#the-risks-of-npm-modules"">
   The risks of npm modules
  </a>
 </h2>
 <p>
  While the Node.js core modules offer building blocks for a wide variety of applications, sometimes something more is needed. Node.js developers benefit tremendously from the
  <a href=""https://www.npmjs.com/"">
   npm ecosystem
  </a>
  , with hundreds of thousands of modules offering functionality to accelerate your development process.
 </p>
 <p>
  Remember, however, that the majority of these modules are written by third-party developers and are generally released with only best-effort guarantees. A developer using an npm module should be concerned about two things, though the latter is frequently forgotten.
 </p>
 <ol>
  <li>
   Does it honor its APIs?
  </li>
  <li>
   Might its APIs block the Event Loop or a Worker?
Many modules make no effort to indicate the cost of their APIs, to the detriment of the community.
  </li>
 </ol>
 <p>
  For simple APIs you can estimate the cost of the APIs; the cost of string manipulation isn't hard to fathom.
But in many cases it's unclear how much an API might cost.
 </p>
 <p>
  <em>
   If you are calling an API that might do something expensive, double-check the cost. Ask the developers to document it, or examine the source code yourself (and submit a PR documenting the cost).
  </em>
 </p>
 <p>
  Remember, even if the API is asynchronous, you don't know how much time it might spend on a Worker or on the Event Loop in each of its partitions.
For example, suppose in the
  <code>
   asyncAvg
  </code>
  example given above, each call to the helper function summed
  <em>
   half
  </em>
  of the numbers rather than one of them.
Then this function would still be asynchronous, but the cost of each partition would be
  <code>
   O(n)
  </code>
  , not
  <code>
   O(1)
  </code>
  , making it much less safe to use for arbitrary values of
  <code>
   n
  </code>
  .
 </p>
 <h2 id=""conclusion"">
  <a href=""#conclusion"">
   Conclusion
  </a>
 </h2>
 <p>
  Node.js has two types of threads: one Event Loop and
  <code>
   k
  </code>
  Workers.
The Event Loop is responsible for JavaScript callbacks and non-blocking I/O, and a Worker executes tasks corresponding to C++ code that completes an asynchronous request, including blocking I/O and CPU-intensive work.
Both types of threads work on no more than one activity at a time.
If any callback or task takes a long time, the thread running it becomes
  <em>
   blocked
  </em>
  .
If your application makes blocking callbacks or tasks, this can lead to degraded throughput (clients/second) at best, and complete denial of service at worst.
 </p>
 <p>
  To write a high-throughput, more DoS-proof web server, you must ensure that on benign and on malicious input, neither your Event Loop nor your Workers will block.
 </p>
</main>
"
Manipulating Files,Node.js file stats,"<main>
 <h1 id=""nodejs-file-stats"">
  <a href=""#nodejs-file-stats"">
   Node.js file stats
  </a>
 </h1>
 <p>
  Every file comes with a set of details that we can inspect using Node.js. In particular, using the
  <code>
   stat()
  </code>
  method provided by the
  <a href=""https://nodejs.org/api/fs.html"">
   <code>
    fs
   </code>
   module
  </a>
  .
 </p>
 <p>
  You call it passing a file path, and once Node.js gets the file details it will call the callback function you pass, with 2 parameters: an error message, and the file stats:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R7b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> stats</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#707e99"">  // we have access to the file stats in `stats`</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R7b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Node.js also provides a sync method, which blocks the thread until the file stats are ready:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rab9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rab9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> stats</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">statSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rab9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rab9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The file information is included in the stats variable. What kind of information can we extract using the stats?
 </p>
 <p>
  <strong>
   A lot, including:
  </strong>
 </p>
 <ul>
  <li>
   if the file is a directory or a file, using
   <code>
    stats.isFile()
   </code>
   and
   <code>
    stats.isDirectory()
   </code>
  </li>
  <li>
   if the file is a symbolic link using
   <code>
    stats.isSymbolicLink()
   </code>
  </li>
  <li>
   the file size in bytes using
   <code>
    stats.size
   </code>
   .
  </li>
 </ul>
 <p>
  There are other advanced methods, but the bulk of what you'll use in your day-to-day programming is this.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rjb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rjb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> stats</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isFile</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // true</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isDirectory</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // false</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isSymbolicLink</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // false</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">size</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 1024000 //= 1MB</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rjb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rjb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can also use promise-based
  <code>
   fsPromises.stat()
  </code>
  method offered by the
  <code>
   fs/promises
  </code>
  module if you like:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rmb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rmb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> stats</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isFile</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // true</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isDirectory</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // false</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isSymbolicLink</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // false</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    stats</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">size</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 1024000 //= 1MB</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rmb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rmb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can read more about the
  <code>
   fs
  </code>
  module in the
  <a href=""https://nodejs.org/api/fs.html"">
   official documentation
  </a>
  .
 </p>
</main>
"
Manipulating Files,Node.js File Paths,"<main>
 <h1 id=""nodejs-file-paths"">
  <a href=""#nodejs-file-paths"">
   Node.js File Paths
  </a>
 </h1>
 <p>
  Every file in the system has a path. On Linux and macOS, a path might look like:
  <code>
   /users/joe/file.txt
  </code>
  while Windows computers are different, and have a structure such as:
  <code>
   C:\users\joe\file.txt
  </code>
 </p>
 <p>
  You need to pay attention when using paths in your applications, as this difference must be taken into account.
 </p>
 <p>
  You include this module in your files using
  <code>
   const path = require('node:path');
  </code>
  and you can start using its methods.
 </p>
 <h2 id=""getting-information-out-of-a-path"">
  <a href=""#getting-information-out-of-a-path"">
   Getting information out of a path
  </a>
 </h2>
 <p>
  Given a path, you can extract information out of it using those methods:
 </p>
 <ul>
  <li>
   <code>
    dirname
   </code>
   : gets the parent folder of a file
  </li>
  <li>
   <code>
    basename
   </code>
   : gets the filename part
  </li>
  <li>
   <code>
    extname
   </code>
   : gets the file extension
  </li>
 </ul>
 <h3 id=""example"">
  <a href=""#example"">
   Example
  </a>
 </h3>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rhb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rhb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> path</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:path</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> notes</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/users/joe/notes.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">dirname</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">notes</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // /users/joe</span></span>
<span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">basename</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">notes</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // notes.txt</span></span>
<span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">extname</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">notes</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // .txt</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rhb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rhb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can get the file name without the extension by specifying a second argument to
  <code>
   basename
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">basename</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">notes</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">extname</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">notes</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // notes</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""working-with-paths"">
  <a href=""#working-with-paths"">
   Working with paths
  </a>
 </h2>
 <p>
  You can join two or more parts of a path by using
  <code>
   path.join()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> name</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">joe</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">join</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">users</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> name</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">notes.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // '/users/joe/notes.txt'</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can get the absolute path calculation of a relative path using
  <code>
   path.resolve()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">resolve</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">joe.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // '/Users/joe/joe.txt' if run from my home folder</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  In this case Node.js will simply append
  <code>
   /joe.txt
  </code>
  to the current working directory. If you specify a second parameter folder,
  <code>
   resolve
  </code>
  will use the first as a base for the second:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">resolve</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">tmp</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">joe.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // '/Users/joe/tmp/joe.txt' if run from my home folder</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  If the first parameter starts with a slash, that means it's an absolute path:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">resolve</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/etc</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">joe.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // '/etc/joe.txt'</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <code>
   path.normalize()
  </code>
  is another useful function, that will try and calculate the actual path, when it contains relative specifiers like
  <code>
   .
  </code>
  or
  <code>
   ..
  </code>
  , or double slashes:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">normalize</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/users/joe/..//test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // '/users/test.txt'</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <strong>
   Neither resolve nor normalize will check if the path exists
  </strong>
  . They just calculate a path based on the information they got.
 </p>
</main>
"
Manipulating Files,Working with file descriptors in Node.js,"<main>
 <h1 id=""working-with-file-descriptors-in-nodejs"">
  <a href=""#working-with-file-descriptors-in-nodejs"">
   Working with file descriptors in Node.js
  </a>
 </h1>
 <p>
  Before you're able to interact with a file that sits in your filesystem, you must get a file descriptor.
 </p>
 <p>
  A file descriptor is a reference to an open file, a number (fd) returned by opening the file using the
  <code>
   open()
  </code>
  method offered by the
  <code>
   fs
  </code>
  module. This number (
  <code>
   fd
  </code>
  ) uniquely identifies an open file in operating system:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R7b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">open</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">r</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> fd</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // fd is our file descriptor</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R7b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Notice the
  <code>
   r
  </code>
  we used as the second parameter to the
  <code>
   fs.open()
  </code>
  call.
 </p>
 <p>
  That flag means we open the file for reading.
 </p>
 <p>
  <strong>
   Other flags you'll commonly use are:
  </strong>
 </p>
 <table>
  <thead>
   <tr>
    <th>
     Flag
    </th>
    <th>
     Description
    </th>
    <th>
     File gets created if it doesn't exist
    </th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td>
     r+
    </td>
    <td>
     This flag opens the file for reading and writing
    </td>
    <td>
     ❌
    </td>
   </tr>
   <tr>
    <td>
     w+
    </td>
    <td>
     This flag opens the file for reading and writing and it also positions the stream at the beginning of the file
    </td>
    <td>
     ✅
    </td>
   </tr>
   <tr>
    <td>
     a
    </td>
    <td>
     This flag opens the file for writing and it also positions the stream at the end of the file
    </td>
    <td>
     ✅
    </td>
   </tr>
   <tr>
    <td>
     a+
    </td>
    <td>
     This flag opens the file for reading and writing and it also positions the stream at the end of the file
    </td>
    <td>
     ✅
    </td>
   </tr>
  </tbody>
 </table>
 <p>
  You can also open the file by using the
  <code>
   fs.openSync
  </code>
  method, which returns the file descriptor, instead of providing it in a callback:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rib9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rib9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> fd</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">openSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">r</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rib9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rib9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Once you get the file descriptor, in whatever way you choose, you can perform all the operations that require it, like calling
  <code>
   fs.close()
  </code>
  and many other operations that interact with the filesystem.
 </p>
 <p>
  You can also open the file by using the promise-based
  <code>
   fsPromises.open
  </code>
  method offered by the
  <code>
   fs/promises
  </code>
  module.
 </p>
 <p>
  The
  <code>
   fs/promises
  </code>
  module is available starting only from Node.js v14. Before v14, after v10, you can use
  <code>
   require('fs').promises
  </code>
  instead. Before v10, after v8, you can use
  <code>
   util.promisify
  </code>
  to convert
  <code>
   fs
  </code>
  methods into promise-based methods.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rpb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rpb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// Or const fs = require('fs').promises before v14.</span></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> filehandle</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    filehandle</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">open</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">r</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">filehandle</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">fd</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">await</span><span style=""color:#D8DEE9""> filehandle</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> encoding</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">utf8</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> finally</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">filehandle</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">await</span><span style=""color:#D8DEE9""> filehandle</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">close</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rpb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rpb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Here is an example of
  <code>
   util.promisify
  </code>
  :
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rsb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rsb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> util</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:util</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> open</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> util</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">promisify</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">open</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> fd</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> open</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">r</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rsb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rsb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  To see more details about the
  <code>
   fs/promises
  </code>
  module, please check
  <a href=""https://nodejs.org/api/fs.html#promise-example"">
   fs/promises API
  </a>
  .
 </p>
</main>
"
Manipulating Files,Reading files with Node.js,"<main>
 <h1 id=""reading-files-with-nodejs"">
  <a href=""#reading-files-with-nodejs"">
   Reading files with Node.js
  </a>
 </h1>
 <p>
  The simplest way to read a file in Node.js is to use the
  <code>
   fs.readFile()
  </code>
  method, passing it the file path, encoding and a callback function that will be called with the file data (and the error):
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R5b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R5b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">utf8</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R5b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Alternatively, you can use the synchronous version
  <code>
   fs.readFileSync()
  </code>
  :
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R8b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R8b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFileSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">utf8</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R8b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R8b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can also use the promise-based
  <code>
   fsPromises.readFile()
  </code>
  method offered by the
  <code>
   fs/promises
  </code>
  module:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rbb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> encoding</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">utf8</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rbb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rbb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  All three of
  <code>
   fs.readFile()
  </code>
  ,
  <code>
   fs.readFileSync()
  </code>
  and
  <code>
   fsPromises.readFile()
  </code>
  read the full content of the file in memory before returning the data.
 </p>
 <p>
  This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.
 </p>
 <p>
  In this case, a better option is to read the file content using streams.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> fs</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> path</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">path</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:stream/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fileUrl</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">https://www.gutenberg.org/files/2701/2701-0.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> outputFilePath</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">join</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">cwd</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">moby.md</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> downloadFile</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">url</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> outoutPath</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> response</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> fetch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">url</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">ok</span><span style=""color:#81A1C1""> ||</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    throw</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Failed to fetch </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">url</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">. Status: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">status</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> fileStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createWriteStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">outoutPath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Downloading file from </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">url</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> to </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">outoutPath</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> pipeline</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">body</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> fileStream</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">File downloaded successfully</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> readFile</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">filePath</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> readStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">filePath</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> encoding</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">utf8</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    for</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> of</span><span style=""color:#D8DEE9""> readStream</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">--- File chunk start ---</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">--- File chunk end ---</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Finished reading the file.</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Error reading file: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">error</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">message</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> downloadFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fileUrl</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> outputFilePath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> readFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">outputFilePath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Error: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">error</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">message</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
</main>
"
Manipulating Files,Writing files with Node.js,"<main>
 <h1 id=""writing-files-with-nodejs"">
  <a href=""#writing-files-with-nodejs"">
   Writing files with Node.js
  </a>
 </h1>
 <h2 id=""writing-a-file"">
  <a href=""#writing-a-file"">
   Writing a file
  </a>
 </h2>
 <p>
  The easiest way to write to files in Node.js is to use the
  <code>
   fs.writeFile()
  </code>
  API.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> content</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Some content!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">writeFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // file written successfully</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""writing-a-file-synchronously"">
  <a href=""#writing-a-file-synchronously"">
   Writing a file synchronously
  </a>
 </h3>
 <p>
  Alternatively, you can use the synchronous version
  <code>
   fs.writeFileSync()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> content</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Some content!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">writeFileSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">  // file written successfully</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can also use the promise-based
  <code>
   fsPromises.writeFile()
  </code>
  method offered by the
  <code>
   fs/promises
  </code>
  module:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> content</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Some content!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">writeFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  By default, this API will
  <strong>
   replace the contents of the file
  </strong>
  if it does already exist.
 </p>
 <p>
  <strong>
   You can modify the default by specifying a flag:
  </strong>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">writeFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> flag</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">a+</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h4 id=""the-flags-youll-likely-use-are"">
  <a href=""#the-flags-youll-likely-use-are"">
   The flags you'll likely use are
  </a>
 </h4>
 <table>
  <thead>
   <tr>
    <th>
     Flag
    </th>
    <th>
     Description
    </th>
    <th style=""text-align:center"">
     File gets created if it doesn't exist
    </th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td>
     <code>
      r+
     </code>
    </td>
    <td>
     This flag opens the file for
     <strong>
      reading
     </strong>
     and
     <strong>
      writing
     </strong>
    </td>
    <td style=""text-align:center"">
     ❌
    </td>
   </tr>
   <tr>
    <td>
     <code>
      w+
     </code>
    </td>
    <td>
     This flag opens the file for
     <strong>
      reading
     </strong>
     and
     <strong>
      writing
     </strong>
     and it also positions the stream at the
     <strong>
      beginning
     </strong>
     of the file
    </td>
    <td style=""text-align:center"">
     ✅
    </td>
   </tr>
   <tr>
    <td>
     <code>
      a
     </code>
    </td>
    <td>
     This flag opens the file for
     <strong>
      writing
     </strong>
     and it also positions the stream at the
     <strong>
      end
     </strong>
     of the file
    </td>
    <td style=""text-align:center"">
     ✅
    </td>
   </tr>
   <tr>
    <td>
     <code>
      a+
     </code>
    </td>
    <td>
     This flag opens the file for
     <strong>
      reading
     </strong>
     and
     <strong>
      writing
     </strong>
     and it also positions the stream at the
     <strong>
      end
     </strong>
     of the file
    </td>
    <td style=""text-align:center"">
     ✅
    </td>
   </tr>
  </tbody>
 </table>
 <ul>
  <li>
   You can find more information about the flags in the
   <a href=""https://nodejs.org/api/fs.html#file-system-flags"">
    fs documentation
   </a>
   .
  </li>
 </ul>
 <h2 id=""appending-content-to-a-file"">
  <a href=""#appending-content-to-a-file"">
   Appending content to a file
  </a>
 </h2>
 <p>
  Appending to files is handy when you don't want to overwrite a file with new content, but rather add to it.
 </p>
 <h3 id=""examples"">
  <a href=""#examples"">
   Examples
  </a>
 </h3>
 <p>
  A handy method to append content to the end of a file is
  <code>
   fs.appendFile()
  </code>
  (and its
  <code>
   fs.appendFileSync()
  </code>
  counterpart):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> content</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Some content!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">appendFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">file.log</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // done!</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h4 id=""example-with-promises"">
  <a href=""#example-with-promises"">
   Example with Promises
  </a>
 </h4>
 <p>
  Here is a
  <code>
   fsPromises.appendFile()
  </code>
  example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> content</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Some content!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">appendFile</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe/test.txt</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> content</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
</main>
"
Manipulating Files,Working with folders in Node.js,"<main>
 <h1 id=""working-with-folders-in-nodejs"">
  <a href=""#working-with-folders-in-nodejs"">
   Working with folders in Node.js
  </a>
 </h1>
 <p>
  The Node.js
  <code>
   fs
  </code>
  core module provides many handy methods you can use to work with folders.
 </p>
 <h2 id=""check-if-a-folder-exists"">
  <a href=""#check-if-a-folder-exists"">
   Check if a folder exists
  </a>
 </h2>
 <p>
  Use
  <code>
   fs.access()
  </code>
  (and its promise-based
  <code>
   fsPromises.access()
  </code>
  counterpart) to check if the folder exists and Node.js can access it with its permissions.
 </p>
 <h2 id=""create-a-new-folder"">
  <a href=""#create-a-new-folder"">
   Create a new folder
  </a>
 </h2>
 <p>
  Use
  <code>
   fs.mkdir()
  </code>
  or
  <code>
   fs.mkdirSync()
  </code>
  or
  <code>
   fsPromises.mkdir()
  </code>
  to create a new folder.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rdb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rdb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> folderName</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/Users/joe/test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">!</span><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">existsSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderName</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">mkdirSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderName</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rdb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rdb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""read-the-content-of-a-directory"">
  <a href=""#read-the-content-of-a-directory"">
   Read the content of a directory
  </a>
 </h2>
 <p>
  Use
  <code>
   fs.readdir()
  </code>
  or
  <code>
   fs.readdirSync()
  </code>
  or
  <code>
   fsPromises.readdir()
  </code>
  to read the contents of a directory.
 </p>
 <p>
  This piece of code reads the content of a folder, both files and subfolders, and returns their relative path:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rkb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rkb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> folderPath</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/Users/joe</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readdirSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderPath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rkb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rkb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can get the full path:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readdirSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderPath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">map</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fileName</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">join</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderPath</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> fileName</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can also filter the results to only return the files, and exclude the folders:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rrb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rrb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> isFile</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fileName</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">lstatSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fileName</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">isFile</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">readdirSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderPath</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">map</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fileName</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> path</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">join</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">folderPath</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> fileName</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">filter</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">isFile</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rrb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rrb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""rename-a-folder"">
  <a href=""#rename-a-folder"">
   Rename a folder
  </a>
 </h2>
 <p>
  Use
  <code>
   fs.rename()
  </code>
  or
  <code>
   fs.renameSync()
  </code>
  or
  <code>
   fsPromises.rename()
  </code>
  to rename folder. The first parameter is the current path, the second the new path:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R10b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R10b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">rename</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/Users/roger</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#707e99"">  // done</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R10b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R10b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  <code>
   fs.renameSync()
  </code>
  is the synchronous version:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R13b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R13b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">renameSync</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/Users/roger</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R13b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R13b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  <code>
   fsPromises.rename()
  </code>
  is the promise-based version:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R16b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R16b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> example</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    await</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">rename</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">/Users/joe</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/Users/roger</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""><span style=""color:#88C0D0"">example</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R16b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R16b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""remove-a-folder"">
  <a href=""#remove-a-folder"">
   Remove a folder
  </a>
 </h2>
 <p>
  Use
  <code>
   fs.rmdir()
  </code>
  or
  <code>
   fs.rmdirSync()
  </code>
  or
  <code>
   fsPromises.rmdir()
  </code>
  to remove a folder.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1bb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1bb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">rmdir</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">dir</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">dir</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> is deleted!</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1bb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1bb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  To remove a folder that has contents use
  <code>
   fs.rm()
  </code>
  with the option
  <code>
   { recursive: true }
  </code>
  to recursively remove the contents.
 </p>
 <p>
  <code>
   { recursive: true, force: true }
  </code>
  makes it so that exceptions will be ignored if the folder does not exist.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1gb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1gb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">rm</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">dir</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> recursive</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> force</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    throw</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">dir</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C""> is deleted!</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1gb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1gb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
</main>
"
Manipulating Files,How to work with Different Filesystems,"<main>
 <h1 id=""how-to-work-with-different-filesystems"">
  <a href=""#how-to-work-with-different-filesystems"">
   How to Work with Different Filesystems
  </a>
 </h1>
 <p>
  Node.js exposes many features of the filesystem. But not all filesystems are alike.
The following are suggested best practices to keep your code simple and safe
when working with different filesystems.
 </p>
 <h2 id=""filesystem-behavior"">
  <a href=""#filesystem-behavior"">
   Filesystem Behavior
  </a>
 </h2>
 <p>
  Before you can work with a filesystem, you need to know how it behaves.
Different filesystems behave differently and have more or less features than
others: case sensitivity, case insensitivity, case preservation, Unicode form
preservation, timestamp resolution, extended attributes, inodes, Unix
permissions, alternate data streams etc.
 </p>
 <p>
  Be wary of inferring filesystem behavior from
  <code>
   process.platform
  </code>
  . For example,
do not assume that because your program is running on Darwin that you are
therefore working on a case-insensitive filesystem (HFS+), as the user may be
using a case-sensitive filesystem (HFSX). Similarly, do not assume that because
your program is running on Linux that you are therefore working on a filesystem
which supports Unix permissions and inodes, as you may be on a particular
external drive, USB or network drive which does not.
 </p>
 <p>
  The operating system may not make it easy to infer filesystem behavior, but all
is not lost. Instead of keeping a list of every known filesystem and behavior
(which is always going to be incomplete), you can probe the filesystem to see
how it actually behaves. The presence or absence of certain features which are
easy to probe, are often enough to infer the behavior of other features which
are more difficult to probe.
 </p>
 <p>
  Remember that some users may have different filesystems mounted at various paths
in the working tree.
 </p>
 <h2 id=""avoid-a-lowest-common-denominator-approach"">
  <a href=""#avoid-a-lowest-common-denominator-approach"">
   Avoid a Lowest Common Denominator Approach
  </a>
 </h2>
 <p>
  You might be tempted to make your program act like a lowest common denominator
filesystem, by normalizing all filenames to uppercase, normalizing all filenames
to NFC Unicode form, and normalizing all file timestamps to say 1-second
resolution. This would be the lowest common denominator approach.
 </p>
 <p>
  Do not do this. You would only be able to interact safely with a filesystem
which has the exact same lowest common denominator characteristics in every
respect. You would be unable to work with more advanced filesystems in the way
that users expect, and you would run into filename or timestamp collisions. You
would most certainly lose and corrupt user data through a series of complicated
dependent events, and you would create bugs that would be difficult if not
impossible to solve.
 </p>
 <p>
  What happens when you later need to support a filesystem that only has 2-second
or 24-hour timestamp resolution? What happens when the Unicode standard advances
to include a slightly different normalization algorithm (as has happened in the
past)?
 </p>
 <p>
  A lowest common denominator approach would tend to try to create a portable
program by using only ""portable"" system calls. This leads to programs that are
leaky and not in fact portable.
 </p>
 <h2 id=""adopt-a-superset-approach"">
  <a href=""#adopt-a-superset-approach"">
   Adopt a Superset Approach
  </a>
 </h2>
 <p>
  Make the best use of each platform you support by adopting a superset approach.
For example, a portable backup program should sync btimes (the created time of a
file or folder) correctly between Windows systems, and should not destroy or
alter btimes, even though btimes are not supported on Linux systems. The same
portable backup program should sync Unix permissions correctly between Linux
systems, and should not destroy or alter Unix permissions, even though Unix
permissions are not supported on Windows systems.
 </p>
 <p>
  Handle different filesystems by making your program act like a more advanced
filesystem. Support a superset of all possible features: case-sensitivity,
case-preservation, Unicode form sensitivity, Unicode form preservation, Unix
permissions, high-resolution nanosecond timestamps, extended attributes etc.
 </p>
 <p>
  Once you have case-preservation in your program, you can always implement
case-insensitivity if you need to interact with a case-insensitive filesystem.
But if you forego case-preservation in your program, you cannot interact safely
with a case-preserving filesystem. The same is true for Unicode form
preservation and timestamp resolution preservation.
 </p>
 <p>
  If a filesystem provides you with a filename in a mix of lowercase and
uppercase, then keep the filename in the exact case given. If a filesystem
provides you with a filename in mixed Unicode form or NFC or NFD (or NFKC or
NFKD), then keep the filename in the exact byte sequence given. If a filesystem
provides you with a millisecond timestamp, then keep the timestamp in
millisecond resolution.
 </p>
 <p>
  When you work with a lesser filesystem, you can always downsample appropriately,
with comparison functions as required by the behavior of the filesystem on which
your program is running. If you know that the filesystem does not support Unix
permissions, then you should not expect to read the same Unix permissions you
write. If you know that the filesystem does not preserve case, then you should
be prepared to see
  <code>
   ABC
  </code>
  in a directory listing when your program creates
  <code>
   abc
  </code>
  .
But if you know that the filesystem does preserve case, then you should consider
  <code>
   ABC
  </code>
  to be a different filename to
  <code>
   abc
  </code>
  , when detecting file renames or if the
filesystem is case-sensitive.
 </p>
 <h2 id=""case-preservation"">
  <a href=""#case-preservation"">
   Case Preservation
  </a>
 </h2>
 <p>
  You may create a directory called
  <code>
   test/abc
  </code>
  and be surprised to see sometimes
that
  <code>
   fs.readdir('test')
  </code>
  returns
  <code>
   ['ABC']
  </code>
  . This is not a bug in Node. Node
returns the filename as the filesystem stores it, and not all filesystems
support case-preservation. Some filesystems convert all filenames to uppercase
(or lowercase).
 </p>
 <h2 id=""unicode-form-preservation"">
  <a href=""#unicode-form-preservation"">
   Unicode Form Preservation
  </a>
 </h2>
 <p>
  <em>
   Case preservation and Unicode form preservation are similar concepts. To
understand why Unicode form should be preserved , make sure that you first
understand why case should be preserved. Unicode form preservation is just as
simple when understood correctly.
  </em>
 </p>
 <p>
  Unicode can encode the same characters using several different byte sequences.
Several strings may look the same, but have different byte sequences. When
working with UTF-8 strings, be careful that your expectations are in line with
how Unicode works. Just as you would not expect all UTF-8 characters to encode
to a single byte, you should not expect several UTF-8 strings that look the same
to the human eye to have the same byte representation. This may be an
expectation that you can have of ASCII, but not of UTF-8.
 </p>
 <p>
  You may create a directory called
  <code>
   test/café
  </code>
  (NFC Unicode form with byte
sequence
  <code>
   &lt;63 61 66 c3 a9&gt;
  </code>
  and
  <code>
   string.length === 5
  </code>
  ) and be surprised to see
sometimes that
  <code>
   fs.readdir('test')
  </code>
  returns
  <code>
   ['café']
  </code>
  (NFD Unicode form with
byte sequence
  <code>
   &lt;63 61 66 65 cc 81&gt;
  </code>
  and
  <code>
   string.length === 6
  </code>
  ). This is not a
bug in Node. Node.js returns the filename as the filesystem stores it, and not
all filesystems support Unicode form preservation.
 </p>
 <p>
  HFS+, for example, will normalize all filenames to a form almost always the same
as NFD form. Do not expect HFS+ to behave the same as NTFS or EXT4 and
vice-versa. Do not try to change data permanently through normalization as a
leaky abstraction to paper over Unicode differences between filesystems. This
would create problems without solving any. Rather, preserve Unicode form and use
normalization as a comparison function only.
 </p>
 <h2 id=""unicode-form-insensitivity"">
  <a href=""#unicode-form-insensitivity"">
   Unicode Form Insensitivity
  </a>
 </h2>
 <p>
  Unicode form insensitivity and Unicode form preservation are two different
filesystem behaviors often mistaken for each other. Just as case-insensitivity
has sometimes been incorrectly implemented by permanently normalizing filenames
to uppercase when storing and transmitting filenames, so Unicode form
insensitivity has sometimes been incorrectly implemented by permanently
normalizing filenames to a certain Unicode form (NFD in the case of HFS+) when
storing and transmitting filenames. It is possible and much better to implement
Unicode form insensitivity without sacrificing Unicode form preservation, by
using Unicode normalization for comparison only.
 </p>
 <h2 id=""comparing-different-unicode-forms"">
  <a href=""#comparing-different-unicode-forms"">
   Comparing Different Unicode Forms
  </a>
 </h2>
 <p>
  Node.js provides
  <code>
   string.normalize('NFC' / 'NFD')
  </code>
  which you can use to normalize a
UTF-8 string to either NFC or NFD. You should never store the output from this
function but only use it as part of a comparison function to test whether two
UTF-8 strings would look the same to the user.
 </p>
 <p>
  You can use
  <code>
   string1.normalize('NFC') === string2.normalize('NFC')
  </code>
  or
  <code>
   string1.normalize('NFD') === string2.normalize('NFD')
  </code>
  as your comparison
function. Which form you use does not matter.
 </p>
 <p>
  Normalization is fast but you may want to use a cache as input to your
comparison function to avoid normalizing the same string many times over. If the
string is not present in the cache then normalize it and cache it. Be careful
not to store or persist the cache, use it only as a cache.
 </p>
 <p>
  Note that using
  <code>
   normalize()
  </code>
  requires that your version of Node.js include ICU
(otherwise
  <code>
   normalize()
  </code>
  will just return the original string). If you download
the latest version of Node.js from the website then it will include ICU.
 </p>
 <h2 id=""timestamp-resolution"">
  <a href=""#timestamp-resolution"">
   Timestamp Resolution
  </a>
 </h2>
 <p>
  You may set the
  <code>
   mtime
  </code>
  (the modified time) of a file to
  <code>
   1444291759414
  </code>
  (millisecond resolution) and be surprised to see sometimes that
  <code>
   fs.stat
  </code>
  returns the new mtime as
  <code>
   1444291759000
  </code>
  (1-second resolution) or
  <code>
   1444291758000
  </code>
  (2-second resolution). This is not a bug in Node. Node.js returns
the timestamp as the filesystem stores it, and not all filesystems support
nanosecond, millisecond or 1-second timestamp resolution. Some filesystems even
have very coarse resolution for the atime timestamp in particular, e.g. 24 hours
for some FAT filesystems.
 </p>
 <h2 id=""do-not-corrupt-filenames-and-timestamps-through-normalization"">
  <a href=""#do-not-corrupt-filenames-and-timestamps-through-normalization"">
   Do Not Corrupt Filenames and Timestamps Through Normalization
  </a>
 </h2>
 <p>
  Filenames and timestamps are user data. Just as you would never automatically
rewrite user file data to uppercase the data or normalize
  <code>
   CRLF
  </code>
  to
  <code>
   LF
  </code>
  line-endings, so you should never change, interfere or corrupt filenames or
timestamps through case / Unicode form / timestamp normalization. Normalization
should only ever be used for comparison, never for altering data.
 </p>
 <p>
  Normalization is effectively a lossy hash code. You can use it to test for
certain kinds of equivalence (e.g. do several strings look the same even though
they have different byte sequences) but you can never use it as a substitute for
the actual data. Your program should pass on filename and timestamp data as is.
 </p>
 <p>
  Your program can create new data in NFC (or in any combination of Unicode form
it prefers) or with a lowercase or uppercase filename, or with a 2-second
resolution timestamp, but your program should not corrupt existing user data by
imposing case / Unicode form / timestamp normalization. Rather, adopt a superset
approach and preserve case, Unicode form and timestamp resolution in your
program. That way, you will be able to interact safely with filesystems which do
the same.
 </p>
 <h2 id=""use-normalization-comparison-functions-appropriately"">
  <a href=""#use-normalization-comparison-functions-appropriately"">
   Use Normalization Comparison Functions Appropriately
  </a>
 </h2>
 <p>
  Make sure that you use case / Unicode form / timestamp comparison functions
appropriately. Do not use a case-insensitive filename comparison function if you
are working on a case-sensitive filesystem. Do not use a Unicode form
insensitive comparison function if you are working on a Unicode form sensitive
filesystem (e.g. NTFS and most Linux filesystems which preserve both NFC and NFD
or mixed Unicode forms). Do not compare timestamps at 2-second resolution if you
are working on a nanosecond timestamp resolution filesystem.
 </p>
 <h2 id=""be-prepared-for-slight-differences-in-comparison-functions"">
  <a href=""#be-prepared-for-slight-differences-in-comparison-functions"">
   Be Prepared for Slight Differences in Comparison Functions
  </a>
 </h2>
 <p>
  Be careful that your comparison functions match those of the filesystem (or
probe the filesystem if possible to see how it would actually compare).
Case-insensitivity for example is more complex than a simple
  <code>
   toLowerCase()
  </code>
  comparison. In fact,
  <code>
   toUpperCase()
  </code>
  is usually better than
  <code>
   toLowerCase()
  </code>
  (since it handles certain foreign language characters differently). But better
still would be to probe the filesystem since every filesystem has its own case
comparison table baked in.
 </p>
 <p>
  As an example, Apple's HFS+ normalizes filenames to NFD form but this NFD form
is actually an older version of the current NFD form and may sometimes be
slightly different from the latest Unicode standard's NFD form. Do not expect
HFS+ NFD to be exactly the same as Unicode NFD all the time.
 </p>
</main>
"
Command Line,Run Node.js scripts from the command line,"<main>
 <h1 id=""run-nodejs-scripts-from-the-command-line"">
  <a href=""#run-nodejs-scripts-from-the-command-line"">
   Run Node.js scripts from the command line
  </a>
 </h1>
 <p>
  The usual way to run a Node.js program is to run the globally available
  <code>
   node
  </code>
  command (once you install Node.js) and pass the name of the file you want to execute.
 </p>
 <p>
  If your main Node.js application file is
  <code>
   app.js
  </code>
  , you can call it by typing:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Above, you are explicitly telling the shell to run your script with
  <code>
   node
  </code>
  . You can also embed this information into your JavaScript file with a
  <a href=""https://en.wikipedia.org/wiki/Shebang_(Unix)"">
   ""shebang""
  </a>
  line. The ""shebang"" is the first line in the file, and tells the OS which interpreter to use for running the script. Below is the first line of JavaScript:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">#!/usr/bin/node</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Above, we are explicitly giving the absolute path of interpreter. Not all operating systems have
  <code>
   node
  </code>
  in the bin folder, but all should have
  <code>
   env
  </code>
  . You can tell the OS to run
  <code>
   env
  </code>
  with node as parameter:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">#!/usr/bin/env node</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// your javascript code</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  To use a shebang, your file should have executable permission. You can give
  <code>
   app.js
  </code>
  the executable permission by running:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">chmod</span><span style=""color:#A3BE8C""> u+x</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  While running the command, make sure you are in the same directory which contains the
  <code>
   app.js
  </code>
  file.
 </p>
 <h2 id=""pass-string-as-argument-to-node-instead-of-file-path"">
  <a href=""#pass-string-as-argument-to-node-instead-of-file-path"">
   Pass string as argument to
   <code>
    node
   </code>
   instead of file path
  </a>
 </h2>
 <p>
  To execute a string as argument you can use
  <code>
   -e
  </code>
  ,
  <code>
   --eval ""script""
  </code>
  . Evaluate the following argument as JavaScript. The modules which are predefined in the REPL can also be used in script.
 </p>
 <p>
  On Windows, using cmd.exe a single quote will not work correctly because it only recognizes double
  <code>
   ""
  </code>
  for quoting. In Powershell or Git bash, both
  <code>
   '
  </code>
  and
  <code>
   ""
  </code>
  are usable.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> -e</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">console.log(123)</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h2 id=""restart-the-application-automatically"">
  <a href=""#restart-the-application-automatically"">
   Restart the application automatically
  </a>
 </h2>
 <p>
  As of Node.js V16, there is a built-in option to automatically restart the application when a file changes. This is useful for development purposes.
To use this feature, you need to pass the
  <code>
   --watch
  </code>
  flag to Node.js.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --watch</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  So when you change the file, the application will restart automatically.
Read the
  <a href=""https://nodejs.org/docs/latest-v22.x/api/cli.html#--watch"">
   <code>
    --watch
   </code>
   flag documentation
  </a>
  .
 </p>
 <h2 id=""run-a-task-with-nodejs"">
  <a href=""#run-a-task-with-nodejs"">
   Run a task with Node.js
  </a>
 </h2>
 <p>
  Node.js provides a built-in task runner that allows you to execute specific commands defined in your
  <code>
   package.json
  </code>
  file. This can be particularly useful for automating repetitive tasks such as running tests, building your project, or linting your code.
 </p>
 <h3 id=""using-the---run-flag"">
  <a href=""#using-the---run-flag"">
   Using the
   <code>
    --run
   </code>
   flag
  </a>
 </h3>
 <p>
  The
  <a href=""https://nodejs.org/docs/latest-v22.x/api/cli.html#--run"">
   <code>
    --run
   </code>
  </a>
  flag allows you to run a specified command from the
  <code>
   scripts
  </code>
  section of your
  <code>
   package.json
  </code>
  file. For example, if you have the following
  <code>
   package.json
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">scripts</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">start</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">node app.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">dev</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">node --run -- --watch</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">test</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">node --test</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  You can run the
  <code>
   test
  </code>
  script using the
  <code>
   --run
  </code>
  flag:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --run</span><span style=""color:#A3BE8C""> test</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""passing-arguments-to-the-command"">
  <a href=""#passing-arguments-to-the-command"">
   Passing arguments to the command
  </a>
 </h3>
 <p>
  Let's explain the
  <code>
   dev
  </code>
  key in the
  <code>
   scripts
  </code>
  object of the
  <code>
   package.json
  </code>
  file.
 </p>
 <p>
  The syntax
  <code>
   -- --another-argument
  </code>
  is used to pass arguments to the command. In this case, the
  <code>
   --watch
  </code>
  argument is passed to the
  <code>
   dev
  </code>
  script.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --run</span><span style=""color:#A3BE8C""> dev</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""environment-variables"">
  <a href=""#environment-variables"">
   Environment variables
  </a>
 </h3>
 <p>
  The
  <code>
   --run
  </code>
  flag sets specific environment variables that can be useful for your scripts:
 </p>
 <ul>
  <li>
   <code>
    NODE_RUN_SCRIPT_NAME
   </code>
   : The name of the script being run.
  </li>
  <li>
   <code>
    NODE_RUN_PACKAGE_JSON_PATH
   </code>
   : The path to the
   <code>
    package.json
   </code>
   file being processed.
  </li>
 </ul>
 <h3 id=""intentional-limitations"">
  <a href=""#intentional-limitations"">
   Intentional limitations
  </a>
 </h3>
 <p>
  The Node.js task runner is intentionally more limited compared to other task runners like
  <code>
   npm run
  </code>
  or
  <code>
   yarn run
  </code>
  . It focuses on performance and simplicity, omitting features like running
  <code>
   pre
  </code>
  or
  <code>
   post
  </code>
  scripts. This makes it suitable for straightforward tasks but may not cover all use cases.
 </p>
</main>
"
Command Line,How to read environment variables from Node.js,"<main>
 <h1 id=""how-to-read-environment-variables-from-nodejs"">
  <a href=""#how-to-read-environment-variables-from-nodejs"">
   How to read environment variables from Node.js
  </a>
 </h1>
 <p>
  The
  <code>
   process
  </code>
  core module of Node.js provides the
  <code>
   env
  </code>
  property which hosts all the environment variables that were set at the moment the process was started.
 </p>
 <p>
  The below code runs
  <code>
   app.js
  </code>
  and set
  <code>
   USER_ID
  </code>
  and
  <code>
   USER_KEY
  </code>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">USER_ID</span><span style=""color:#81A1C1"">=</span><span style=""color:#A3BE8C"">239482</span><span style=""color:#D8DEE9""> USER_KEY</span><span style=""color:#81A1C1"">=</span><span style=""color:#A3BE8C"">foobar</span><span style=""color:#88C0D0""> node</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  That will pass the user
  <code>
   USER_ID
  </code>
  as
  <strong>
   239482
  </strong>
  and the
  <code>
   USER_KEY
  </code>
  as
  <strong>
   foobar
  </strong>
  . This is suitable for testing, however for production, you will probably be configuring some bash scripts to export variables.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Note:
   <code>
    process
   </code>
   does not need to be imported, it is a global object in Node.js.
  </p>
 </blockquote>
 <p>
  Here is an example that accesses the
  <code>
   USER_ID
  </code>
  and
  <code>
   USER_KEY
  </code>
  environment variables, which we set in above code.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">USER_ID</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // ""239482""</span></span>
<span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">USER_KEY</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // ""foobar""</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  In the same way you can access any custom environment variable you set.
 </p>
 <p>
  Node.js 20 introduced
  <strong>
   experimental
  </strong>
  <a href=""https://nodejs.org/dist/latest-v22.x/docs/api/cli.html#--env-fileconfig"">
   support for .env files
  </a>
  .
 </p>
 <p>
  Now, you can use the
  <code>
   --env-file
  </code>
  flag to specify an environment file when running your Node.js application. Here's an example
  <code>
   .env
  </code>
  file and how to access its variables using
  <code>
   process.env
  </code>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99""># .env file</span></span>
<span class=""line""><span style=""color:#D8DEE9"">PORT</span><span style=""color:#81A1C1"">=</span><span style=""color:#A3BE8C"">3000</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  In your js file
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">env</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">PORT</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // ""3000""</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Run
  <code>
   app.js
  </code>
  file with environment variables set in
  <code>
   .env
  </code>
  file.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --env-file=.env</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  This command loads all the environment variables from the
  <code>
   .env
  </code>
  file, making them available to the application on
  <code>
   process.env
  </code>
 </p>
 <p>
  Also, you can pass multiple
  <code>
   --env-file
  </code>
  arguments. Subsequent files override pre-existing variables defined in previous files.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --env-file=.env</span><span style=""color:#A3BE8C""> --env-file=.development.env</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   Note: if the same variable is defined in the environment and in the file, the value from the environment takes precedence.
  </p>
 </blockquote>
 <p>
  In case you want to optionally read from a
  <code>
   .env
  </code>
  file, it's possible to avoid
throwing an error if the file is missing using the
  <code>
   --env-file-if-exists
  </code>
  flag.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> --env-file-if-exists=.env</span><span style=""color:#A3BE8C""> app.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
</main>
"
Command Line,How to use the Node.js REPL,"<main>
 <h1 id=""how-to-use-the-nodejs-repl"">
  <a href=""#how-to-use-the-nodejs-repl"">
   How to use the Node.js REPL
  </a>
 </h1>
 <h2 id=""what-is-the-nodejs-repl"">
  <a href=""#what-is-the-nodejs-repl"">
   What is the Node.js REPL?
  </a>
 </h2>
 <p>
  Node.js comes with a built-in REPL (Read-Eval-Print Loop) environment that allows you to execute JavaScript code interactively. The REPL is accessible through the terminal and is a great way to test out small pieces of code.
 </p>
 <h2 id=""how-to-use-the-nodejs-repl-1"">
  <a href=""#how-to-use-the-nodejs-repl-1"">
   How to use the Node.js REPL
  </a>
 </h2>
 <p>
  The
  <code>
   node
  </code>
  command is the one we use to run our Node.js scripts:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> script.js</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  If we run the
  <code>
   node
  </code>
  command without any script to execute or without any arguments, we start a REPL session:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    Note:
   </strong>
   <code>
    REPL
   </code>
   stands for Read Evaluate Print Loop, and it is a programming language environment (basically a console window) that takes single expression as user input and returns the result back to the console after execution. The REPL session provides a convenient way to quickly test simple JavaScript code.
  </p>
 </blockquote>
 <p>
  If you try it now in your terminal, this is what happens:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">❯</span><span style=""color:#A3BE8C""> node</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  The command stays in idle mode and waits for us to enter something.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    Tip:
   </strong>
   if you are unsure how to open your terminal, google ""How to open terminal on your-operating-system"".
  </p>
 </blockquote>
 <p>
  The REPL is waiting for us to enter some JavaScript code, to be more precise.
 </p>
 <p>
  Start simple and enter
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">&gt;</span><span style=""color:#D8DEE9FF""> console.log(</span><span style=""color:#88C0D0"">'test'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">test</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">undefined</span></span>
<span class=""line""><span style=""color:#ECEFF4"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  The first value,
  <code>
   test
  </code>
  , is the output we told the console to print, then we get
  <code>
   undefined
  </code>
  which is the return value of running
  <code>
   console.log()
  </code>
  .
Node read this line of code, evaluated it, printed the result, and then went back to waiting for more lines of code. Node will loop through these three steps for every piece of code we execute in the REPL until we exit the session. That is where the REPL got its name.
 </p>
 <p>
  Node automatically prints the result of any line of JavaScript code without the need to instruct it to do so. For example, type in the following line and press enter:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">&gt;</span><span style=""color:#D8DEE9FF""> 5 === </span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">5</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">false</span></span>
<span class=""line""><span style=""color:#ECEFF4"">&gt;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  Note the difference in the outputs of the above two lines. The Node REPL printed
  <code>
   undefined
  </code>
  after executing
  <code>
   console.log()
  </code>
  , while on the other hand, it just printed the result of
  <code>
   5 === '5'
  </code>
  . You need to keep in mind that the former is just a statement in JavaScript, and the latter is an expression.
 </p>
 <p>
  In some cases, the code you want to test might need multiple lines. For example, say you want to define a function that generates a random number, in the REPL session type in the following line and press enter:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">function generateRandom() {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">...</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  The Node REPL is smart enough to determine that you are not done writing your code yet, and it will go into a multi-line mode for you to type in more code. Now finish your function definition and press enter:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">function generateRandom() {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">...return Math.random()</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">}</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">undefined</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <h3 id=""the-_-special-variable"">
  <a href=""#the-_-special-variable"">
   The
   <code>
    _
   </code>
   special variable
  </a>
 </h3>
 <p>
  If after some code you type
  <code>
   _
  </code>
  , that is going to print the result of the last operation.
 </p>
 <h3 id=""the-up-arrow-key"">
  <a href=""#the-up-arrow-key"">
   The Up arrow key
  </a>
 </h3>
 <p>
  If you press the
  <code>
   up
  </code>
  arrow key, you will get access to the history of the previous lines of code executed in the current, and even previous REPL sessions.
 </p>
 <h3 id=""dot-commands"">
  <a href=""#dot-commands"">
   Dot commands
  </a>
 </h3>
 <p>
  The REPL has some special commands, all starting with a dot
  <code>
   .
  </code>
  . They are
 </p>
 <ul>
  <li>
   <code>
    .help
   </code>
   : shows the dot commands help
  </li>
  <li>
   <code>
    .editor
   </code>
   : enables editor mode, to write multiline JavaScript code with ease. Once you are in this mode, enter ctrl-D to run the code you wrote.
  </li>
  <li>
   <code>
    .break
   </code>
   : when inputting a multi-line expression, entering the .break command will abort further input. Same as pressing ctrl-C.
  </li>
  <li>
   <code>
    .clear
   </code>
   : resets the REPL context to an empty object and clears any multi-line expression currently being input.
  </li>
  <li>
   <code>
    .load
   </code>
   : loads a JavaScript file, relative to the current working directory
  </li>
  <li>
   <code>
    .save
   </code>
   : saves all you entered in the REPL session to a file (specify the filename)
  </li>
  <li>
   <code>
    .exit
   </code>
   : exits the repl (same as pressing ctrl-C two times)
  </li>
 </ul>
 <p>
  The REPL knows when you are typing a multi-line statement without the need to invoke
  <code>
   .editor
  </code>
  .
 </p>
 <p>
  For example if you start typing an iteration like this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">[1, 2, 3].forEach(num =&gt; {</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  and you press
  <code>
   enter
  </code>
  , the REPL will go to a new line that starts with 3 dots, indicating you can now continue to work on that block.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-console"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9FF"">... console.log(num)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">... })</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell Session
   </span>
  </div>
 </div>
 <p>
  If you type
  <code>
   .break
  </code>
  at the end of a line, the multiline mode will stop and the statement will not be executed.
 </p>
 <h3 id=""run-repl-from-javascript-file"">
  <a href=""#run-repl-from-javascript-file"">
   Run REPL from JavaScript file
  </a>
 </h3>
 <p>
  We can import the REPL in a JavaScript file using
  <code>
   repl
  </code>
  .
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2fb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2fb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> repl</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:repl</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2fb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2fb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Using the repl variable we can perform various operations.
To start the REPL command prompt, type in the following line
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">repl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">start</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Run the file in the command line.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2mb9utjfb:-trigger-bash-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2mb9utjfb:-content-bash-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">node</span><span style=""color:#A3BE8C""> repl.js</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      Shell
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2mb9utjfb:-trigger-console-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2mb9utjfb:-content-console-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can pass a string which shows when the REPL starts. The default is '&gt; ' (with a trailing space), but we can define custom prompt.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// a Unix style prompt</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> local</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> repl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">start</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">$ </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can display a message while exiting the REPL
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">local</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">exit</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">exiting repl</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">exit</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  You can read more about the REPL module in the
  <a href=""https://nodejs.org/api/repl.html"">
   repl documentation
  </a>
  .
 </p>
</main>
"
Command Line,Output to the command line using Node.js,"<main>
 <h1 id=""output-to-the-command-line-using-nodejs"">
  <a href=""#output-to-the-command-line-using-nodejs"">
   Output to the command line using Node.js
  </a>
 </h1>
 <h3 id=""basic-output-using-the-console-module"">
  <a href=""#basic-output-using-the-console-module"">
   Basic output using the console module
  </a>
 </h3>
 <p>
  Node.js provides a
  <a href=""https://nodejs.org/docs/latest-v22.x/api/console.html"">
   <code>
    console
   </code>
   module
  </a>
  which provides tons of very useful ways to interact with the command line.
 </p>
 <p>
  It is basically the same as the
  <code>
   console
  </code>
  object you find in the browser.
 </p>
 <p>
  The most basic and most used method is
  <code>
   console.log()
  </code>
  , which prints the string you pass to it to the console.
 </p>
 <p>
  If you pass an object, it will render it as a string.
 </p>
 <p>
  You can pass multiple variables to
  <code>
   console.log
  </code>
  , for example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> x</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">x</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> y</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">y</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">x</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> y</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  and Node.js will print both.
 </p>
 <p>
  We can also format pretty phrases by passing variables and a format specifier.
 </p>
 <p>
  For example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">My %s has %d ears</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">cat</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 2</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <ul>
  <li>
   <code>
    %s
   </code>
   format a variable as a string
  </li>
  <li>
   <code>
    %d
   </code>
   format a variable as a number
  </li>
  <li>
   <code>
    %i
   </code>
   format a variable as its integer part only
  </li>
  <li>
   <code>
    %o
   </code>
   format a variable as an object
  </li>
 </ul>
 <p>
  Example:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">%o</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> Number</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""clear-the-console"">
  <a href=""#clear-the-console"">
   Clear the console
  </a>
 </h3>
 <p>
  <code>
   console.clear()
  </code>
  clears the console (the behavior might depend on the console used)
 </p>
 <h3 id=""counting-elements"">
  <a href=""#counting-elements"">
   Counting elements
  </a>
 </h3>
 <p>
  <code>
   console.count()
  </code>
  is a handy method.
 </p>
 <p>
  Take this code:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> x</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 1</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> y</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 2</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> z</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 3</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  '</span><span style=""color:#A3BE8C"">The value of x is </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> x</span><span style=""color:#81A1C1""> +</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C""> and has been checked .. how many times?</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  '</span><span style=""color:#A3BE8C"">The value of x is </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> x</span><span style=""color:#81A1C1""> +</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C""> and has been checked .. how many times?</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  '</span><span style=""color:#A3BE8C"">The value of y is </span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> +</span><span style=""color:#D8DEE9""> y</span><span style=""color:#81A1C1""> +</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C""> and has been checked .. how many times?</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  What happens is that
  <code>
   console.count()
  </code>
  will count the number of times a string is printed, and print the count next to it:
 </p>
 <p>
  You can just count apples and oranges:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> oranges</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">orange</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">orange</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> apples</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">just one apple</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">oranges</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">apples</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""reset-counting"">
  <a href=""#reset-counting"">
   Reset counting
  </a>
 </h3>
 <p>
  The console.countReset() method resets counter used with console.count().
 </p>
 <p>
  We will use the apples and orange example to demonstrate this.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> oranges</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">orange</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">orange</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> apples</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">just one apple</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">oranges</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">apples</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">countReset</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">orange</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">oranges</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">forEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fruit</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Notice how the call to
  <code>
   console.countReset('orange')
  </code>
  resets the value counter to zero.
 </p>
 <h3 id=""print-the-stack-trace"">
  <a href=""#print-the-stack-trace"">
   Print the stack trace
  </a>
 </h3>
 <p>
  There might be cases where it's useful to print the call stack trace of a function, maybe to answer the question
  <em>
   how did you reach that part of the code?
  </em>
 </p>
 <p>
  You can do so using
  <code>
   console.trace()
  </code>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> function2</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">trace</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> function1</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#88C0D0""> function2</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">function1</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This will print the stack trace. This is what's printed if we try this in the Node.js REPL:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">Trace</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> function2</span><span style=""color:#D8DEE9FF""> (repl:1:33)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> function1</span><span style=""color:#D8DEE9FF""> (repl:1:25)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> repl:1:1</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> ContextifyScript.Script.runInThisContext</span><span style=""color:#D8DEE9FF""> (vm.js:44:33)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> REPLServer.defaultEval</span><span style=""color:#D8DEE9FF""> (repl.js:239:29)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> bound</span><span style=""color:#D8DEE9FF""> (domain.js:301:14)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> REPLServer.runBound</span><span style=""color:#D8DEE9FF""> [as </span><span style=""color:#A3BE8C"">eval]</span><span style=""color:#D8DEE9FF""> (domain.js:314:12)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> REPLServer.onLine</span><span style=""color:#D8DEE9FF""> (repl.js:440:10)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> emitOne</span><span style=""color:#D8DEE9FF""> (events.js:120:20)</span></span>
<span class=""line""><span style=""color:#88C0D0"">    at</span><span style=""color:#A3BE8C""> REPLServer.emit</span><span style=""color:#D8DEE9FF""> (events.js:210:7)</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""calculate-the-time-spent"">
  <a href=""#calculate-the-time-spent"">
   Calculate the time spent
  </a>
 </h3>
 <p>
  You can easily calculate how much time a function takes to run, using
  <code>
   time()
  </code>
  and
  <code>
   timeEnd()
  </code>
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> doSomething</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#88C0D0""> measureDoingSomething</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">time</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">doSomething()</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">  // do something, and measure the time it takes</span></span>
<span class=""line""><span style=""color:#88C0D0"">  doSomething</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">timeEnd</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">doSomething()</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">measureDoingSomething</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""stdout-and-stderr"">
  <a href=""#stdout-and-stderr"">
   stdout and stderr
  </a>
 </h3>
 <p>
  As we saw console.log is great for printing messages in the Console. This is what's called the standard output, or
  <code>
   stdout
  </code>
  .
 </p>
 <p>
  <code>
   console.error
  </code>
  prints to the
  <code>
   stderr
  </code>
  stream.
 </p>
 <p>
  It will not appear in the console, but it will appear in the error log.
 </p>
 <h3 id=""color-the-output"">
  <a href=""#color-the-output"">
   Color the output
  </a>
 </h3>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    NOTE
   </strong>
   This part of the resource is designed with version 22.11 which notes
   <code>
    styleText
   </code>
   as ‘Active development’.
  </p>
 </blockquote>
 <p>
  In many cases, you will be tempted to paste certain text to get a nice output at the terminal.
 </p>
 <p>
  There is a
  <code>
   styleText
  </code>
  function provided by the
  <code>
   node:util
  </code>
  module. Let's discover how to use it.
 </p>
 <p>
  First of all, you need to import the
  <code>
   styleText
  </code>
  function from the
  <code>
   node:util
  </code>
  module:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2vb9utjfb:-trigger-mjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2vb9utjfb:-content-mjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> styleText</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:util</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2vb9utjfb:-trigger-cjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2vb9utjfb:-content-cjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Then, you can use it to style your text:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#88C0D0"">  styleText</span><span style=""color:#D8DEE9FF"">([</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">red</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">This is red text </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">+</span></span>
<span class=""line""><span style=""color:#88C0D0"">    styleText</span><span style=""color:#D8DEE9FF"">([</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">green</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bold</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">and this is green bold text </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">+</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    '</span><span style=""color:#A3BE8C"">this is normal text</span><span style=""color:#ECEFF4"">'</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The first argument is an array of styles, and the second argument is the text you want to style. We invite you to read
  <a href=""https://nodejs.org/docs/latest-v22.x/api/util.html#utilstyletextformat-text-options"">
   the docs
  </a>
 </p>
</main>
"
Command Line,Accept input from the command line in Node.js,"<main>
 <h1 id=""accept-input-from-the-command-line-in-nodejs"">
  <a href=""#accept-input-from-the-command-line-in-nodejs"">
   Accept input from the command line in Node.js
  </a>
 </h1>
 <p>
  How to make a Node.js CLI program interactive?
 </p>
 <p>
  Node.js since version 7 provides the
  <a href=""https://nodejs.org/docs/latest-v22.x/api/readline.html"">
   <code>
    readline
   </code>
   module
  </a>
  to perform exactly this: get input from a readable stream such as the
  <code>
   process.stdin
  </code>
  stream, which during the execution of a Node.js program is the terminal input, one line at a time.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R7b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> readline</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:readline</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> rl</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> readline</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createInterface</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  input</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdin</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  output</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">rl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">question</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">What's your name?</span><span style=""color:#ECEFF4"">`</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> name</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Hi </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">name</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">!</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  rl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">close</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R7b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R7b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  This piece of code asks the user's
  <em>
   name
  </em>
  , and once the text is entered and the user presses enter, we send a greeting.
 </p>
 <p>
  The
  <code>
   question()
  </code>
  method shows the first parameter (a question) and waits for the user input. It calls the callback function once enter is pressed.
 </p>
 <p>
  In this callback function, we close the readline interface.
 </p>
 <p>
  <code>
   readline
  </code>
  offers several other methods, please check them out on the package documentation linked above.
 </p>
 <p>
  If you need to require a password, it's best not to echo it back, but instead show a
  <code>
   *
  </code>
  symbol.
 </p>
</main>
"
Modules,Publishing a package,"<main>
 <h1 id=""publishing-a-package"">
  <a href=""#publishing-a-package"">
   Publishing a package
  </a>
 </h1>
 <p>
  All the provided
  <code>
   package.json
  </code>
  configurations (not specifically marked “does not work”) work in Node.js 12.22.x (v12 latest, the oldest supported line) and 17.2.0 (current latest at the time)
  <sup>
   <a aria-describedby=""footnote-label"" data-footnote-ref=""true"" href=""#user-content-fn-1"" id=""user-content-fnref-1"">
    1
   </a>
  </sup>
  , and for grins, with webpack 5.53.0 and 5.63.0 respectively. These are available:
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples"">
   JakobJingleheimer/nodejs-module-config-examples
  </a>
  .
 </p>
 <p>
  For curious cats,
  <a href=""#how-did-we-get-here"">
   How did we get here
  </a>
  and
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
  provide background and deeper explanations.
 </p>
 <h2 id=""pick-your-fix"">
  <a href=""#pick-your-fix"">
   Pick your fix
  </a>
 </h2>
 <p>
  There are 2 main options, which cover almost all use-cases:
 </p>
 <ul>
  <li>
   Write source code and publish in CJS (you use
   <code>
    require()
   </code>
   ); CJS is consumable by both CJS and ESM (in all versions of node). Skip to
   <a href=""#cjs-source-and-distribution"">
    CJS source and distribution
   </a>
   .
  </li>
  <li>
   Write source code and publish in ESM (you use
   <code>
    import
   </code>
   , and don't use top-level
   <code>
    await
   </code>
   ); ESM is consumable by both ESM and CJS (in node 22.x and 23.x; see
   <a href=""https://nodejs.org/api/modules.html#loading-ecmascript-modules-using-require"">
    <code>
     require()
    </code>
    an ES Module
   </a>
   ). Skip to
   <a href=""#esm-source-and-distribution"">
    ESM source and distribution
   </a>
   .
  </li>
 </ul>
 <p>
  It's generally best to publish only 1 format, either CJS
  <em>
   or
  </em>
  ESM. Not both. Publishing multiple formats can result in the
  <a href=""#the-dual-package-hazard"">
   dual-package hazard
  </a>
  , as well as other drawbacks.
 </p>
 <p>
  There are other options available, mostly for historical purposes.
 </p>
 <table>
  <thead>
   <tr>
    <th>
     You as a package author write
    </th>
    <th>
     Consumers of your package write their code in
    </th>
    <th>
     Your options
    </th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td rowspan=""2"">
     CJS source code using
     <code>
      require()
     </code>
    </td>
    <td>
     ESM: consumers
     <code>
      import
     </code>
     your package
    </td>
    <td>
     <a href=""#cjs-source-and-only-esm-distribution"">
      CJS source and only ESM distribution
     </a>
    </td>
   </tr>
   <tr>
    <td>
     CJS &amp; ESM: consumers either
     <code>
      require()
     </code>
     or
     <code>
      import
     </code>
     your package
    </td>
    <td>
     <a href=""#cjs-source-and-both-cjs-amp-esm-distribution"">
      CJS source and both CJS &amp; ESM distribution
     </a>
    </td>
   </tr>
   <tr>
    <td rowspan=""2"">
     ESM source code using
     <code>
      import
     </code>
    </td>
    <td>
     CJS: consumers
     <code>
      require()
     </code>
     your package (and you use top-level
     <code>
      await
     </code>
     )
    </td>
    <td>
     <a href=""#esm-source-with-only-cjs-distribution"">
      ESM source with only CJS distribution
     </a>
    </td>
   </tr>
   <tr>
    <td>
     CJS &amp; ESM: consumers either
     <code>
      require()
     </code>
     or
     <code>
      import
     </code>
     your package
    </td>
    <td>
     <a href=""#esm-source-and-both-cjs-amp-esm-distribution"">
      ESM source and both CJS &amp; ESM distribution
     </a>
    </td>
   </tr>
  </tbody>
 </table>
 <h3 id=""cjs-source-and-distribution"">
  <a href=""#cjs-source-and-distribution"">
   CJS source and distribution
  </a>
 </h3>
 <p>
  The most minimal configuration may be only
  <a href=""https://nodejs.org/api/packages.html#name"">
   <code>
    ""name""
   </code>
  </a>
  . But the less arcane, the better: Essentially just declare the package’s exports via the
  <code>
   ""exports""
  </code>
  field/field-set.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/cjs/cjs-distro"">
   cjs-with-cjs-distro
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rpb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rpb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-source-and-distribution</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#707e99"">  // ""main"": ""./index.js""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rpb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rpb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Note that
  <code>
   packageJson.exports["".""] = filepath
  </code>
  is shorthand for
  <code>
   packageJson.exports["".""].default = filepath
  </code>
 </p>
 <h3 id=""esm-source-and-distribution"">
  <a href=""#esm-source-and-distribution"">
   ESM source and distribution
  </a>
 </h3>
 <p>
  Simple, tried, and true.
 </p>
 <p>
  Note that since Node.js v23.0.0, it is possible to
  <code>
   require
  </code>
  static ESM (code that does not use top-level
  <code>
   await
  </code>
  ). See
  <a href=""https://nodejs.org/api/modules.html#loading-ecmascript-modules-using-require"">
   Loading ECMAScript modules using
   <code>
    require()
   </code>
  </a>
  for details.
 </p>
 <p>
  This is almost exactly the same as the CJS-CJS configuration above with 1 small difference: the
  <a href=""https://nodejs.org/api/packages.html#type"">
   <code>
    ""type""
   </code>
  </a>
  field.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/esm/esm-distro"">
   esm-with-esm-distro
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R16b9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R16b9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">esm-source-and-distribution</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#707e99"">  // ""main"": ""./index.js""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R16b9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R16b9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Note that ESM now
  <em>
   is
  </em>
  “backwards” compatible with CJS: a CJS module now
  <em>
   can
  </em>
  <a href=""https://nodejs.org/api/modules.html#loading-ecmascript-modules-using-require"">
   <code>
    require()
   </code>
   an ES Module
  </a>
  without a flag as of 23.0.0 and 22.12.0.
 </p>
 <h3 id=""cjs-source-and-only-esm-distribution"">
  <a href=""#cjs-source-and-only-esm-distribution"">
   CJS source and only ESM distribution
  </a>
 </h3>
 <p>
  This takes a small bit of finesse but is also pretty straight-forward. This may be the choice pick of older projects targetting newer standards, or authors who merely prefer CJS but are publishing for a different environment.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/cjs/esm-distro"">
   cjs-with-esm-distro
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1fb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1fb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-source-with-esm-distribution</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">main</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/index.mjs</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1fb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1fb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The
  <a href=""https://nodejs.org/api/esm.html#enabling"">
   <code>
    .mjs
   </code>
  </a>
  file extension is a trump-card: it will override
  <strong>
   any
  </strong>
  other configuration and the file will be treated as ESM. Using this file extension is necessary because
  <code>
   packageJson.exports.import
  </code>
  does
  <strong>
   NOT
  </strong>
  signify that the file is ESM (contrary to common, if not universal, misperception), only that it is the file to be used when the package is imported (ESM
  <em>
   can
  </em>
  import CJS. See
  <a href=""#gotchas"">
   Gotchas
  </a>
  below).
 </p>
 <h3 id=""cjs-source-and-both-cjs--esm-distribution"">
  <a href=""#cjs-source-and-both-cjs--esm-distribution"">
   CJS source and both CJS &amp; ESM distribution
  </a>
 </h3>
 <p>
  In order to
  <em>
   directly
  </em>
  supply both audiences (so that your distribution works ""natively"" in either), you have a few options:
 </p>
 <h4 id=""attach-named-exports-directly-onto-exports"">
  <a href=""#attach-named-exports-directly-onto-exports"">
   Attach named exports directly onto
   <code>
    exports
   </code>
  </a>
 </h4>
 <p>
  Classic but takes some sophistication and finesse. This means adding properties onto the existing
  <code>
   module.exports
  </code>
  (instead of re-assigning
  <code>
   module.exports
  </code>
  as a whole).
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/cjs/dual/property-distro"">
   cjs-with-dual-distro (properties)
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1sb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1sb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-source-with-esm-via-properties-distribution</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">main</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1sb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1sb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Pros:
 </p>
 <ul>
  <li>
   Smaller package weight
  </li>
  <li>
   Easy and simple (probably least effort if you don't mind keeping to a minor syntax stipulation)
  </li>
  <li>
   Precludes
   <a href=""#the-dual-package-hazard"">
    the Dual-Package Hazard
   </a>
  </li>
 </ul>
 <p>
  Cons:
 </p>
 <ul>
  <li>
   Requires very specific syntax (either in source code and/or bundler gymnastics).
  </li>
 </ul>
 <p>
  Sometimes, a CJS module may re-assign
  <code>
   module.exports
  </code>
  to something else (be it an object or a function) like this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> someObject</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  foo</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {},</span></span>
<span class=""line""><span style=""color:#88C0D0"">  bar</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {},</span></span>
<span class=""line""><span style=""color:#88C0D0"">  qux</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {},</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#8FBCBB"">module</span><span style=""color:#ECEFF4"">.</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> someObject</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Node.js detects the named exports in CJS via
  <a href=""https://github.com/nodejs/cjs-module-lexer/tree/main?tab=readme-ov-file#parsing-examples"">
   static analysis that look for certain patterns
  </a>
  , which the example above evades. To make the named exports detectable, do this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#8FBCBB"">module</span><span style=""color:#ECEFF4"">.</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">foo</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> foo</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#8FBCBB"">module</span><span style=""color:#ECEFF4"">.</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">bar</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> bar</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#8FBCBB"">module</span><span style=""color:#ECEFF4"">.</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">qux</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> qux</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h4 id=""use-a-simple-esm-wrapper"">
  <a href=""#use-a-simple-esm-wrapper"">
   Use a simple ESM wrapper
  </a>
 </h4>
 <p>
  Complicated setup and difficult to get the balance right.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/cjs/dual/wrapper-distro"">
   cjs-with-dual-distro (wrapper)
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2jb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2jb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-with-wrapper-dual-distro</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/wrapper.mjs</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2jb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2jb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Pros:
 </p>
 <ul>
  <li>
   Smaller package weight
  </li>
 </ul>
 <p>
  Cons:
 </p>
 <ul>
  <li>
   Likely requires complicated bundler gymnastics (we could not find any existing option to automate this in Webpack).
  </li>
 </ul>
 <p>
  When the CJS output from the bundler evades the named exports detection in Node.js, a ESM wrapper can be used to explicitly re-export the known named exports for ESM consumers.
 </p>
 <p>
  When CJS exports an object (which gets aliased to ESM's
  <code>
   default
  </code>
  ), you can save references to all the members of the object locally in the wrapper, and then re-export them so the ESM consumer can access all of them by name.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> cjs</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">../cjs/index.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> a</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> b</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> c</span><span style=""color:#707e99""> /* … */</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> cjs</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">export</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> a</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> b</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> c</span><span style=""color:#707e99""> /* … */</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <strong>
   However
  </strong>
  , this does break live bindings: a reassignment to
  <code>
   cjs.a
  </code>
  will not reflect in
  <code>
   esmWrapper.a
  </code>
  .
 </p>
 <h4 id=""two-full-distributions"">
  <a href=""#two-full-distributions"">
   Two full distributions
  </a>
 </h4>
 <p>
  Chuck in a bunch of stuff and hope for the best. This is probably the most common and easiest of the CJS to CJS &amp; ESM options, but you pay for it. This is rarely a good idea.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/cjs/dual/double-distro"">
   cjs-with-dual-distro (double)
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3ab9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3ab9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-with-full-dual-distro</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.mjs</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3ab9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3ab9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Pros:
 </p>
 <ul>
  <li>
   Simple bundler configuration
  </li>
 </ul>
 <p>
  Cons:
 </p>
 <ul>
  <li>
   Larger package weight (basically double)
  </li>
  <li>
   Vulnerable to
   <a href=""#the-dual-package-hazard"">
    the Dual-Package Hazard
   </a>
  </li>
 </ul>
 <p>
  Alternatively, you can use
  <code>
   ""default""
  </code>
  and
  <code>
   ""node""
  </code>
  keys, which are less counter-intuitive: Node.js will always choose the
  <code>
   ""node""
  </code>
  option (which always works), and non-Node.js tooling will choose
  <code>
   ""default""
  </code>
  when configured to target something other than node.
  <strong>
   This precludes the dual-package hazard.
  </strong>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3lb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3lb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">cjs-with-alt-full-dual-distro</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">node</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.mjs</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3lb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3lb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h3 id=""esm-source-with-only-cjs-distribution"">
  <a href=""#esm-source-with-only-cjs-distribution"">
   ESM source with only CJS distribution
  </a>
 </h3>
 <p>
  We're not in Kansas anymore, Toto.
 </p>
 <p>
  The configurations (there are 2 options) are nearly the same as
  <a href=""#esm-source-and-both-cjs-amp-esm-distribution"">
   ESM source and both CJS &amp; ESM distribution
  </a>
  , just exclude
  <code>
   packageJson.exports.import
  </code>
  .
 </p>
 <p>
  💡 Using
  <code>
   ""type"": ""module""
  </code>
  <sup>
   <a aria-describedby=""footnote-label"" data-footnote-ref=""true"" href=""#user-content-fn-2"" id=""user-content-fnref-2"">
    2
   </a>
  </sup>
  paired with the
  <code>
   .cjs
  </code>
  file extension (for commonjs files) yields best results. For more information on why, see
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
  and
  <a href=""#gotchas"">
   Gotchas
  </a>
  below.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/esm/cjs-distro"">
   esm-with-cjs-distro
  </a>
 </p>
 <h3 id=""esm-source-and-both-cjs--esm-distribution"">
  <a href=""#esm-source-and-both-cjs--esm-distribution"">
   ESM source and both CJS &amp; ESM distribution
  </a>
 </h3>
 <p>
  When source code is written in non-JavaScript (ex TypeScript), options can be limited due to needing to use file extension(s) specific to that language (ex
  <code>
   .ts
  </code>
  ) and there may be no
  <code>
   .mjs
  </code>
  equivalent.
 </p>
 <p>
  Similar to
  <a href=""#cjs-source-and-both-cjs-amp-esm-distribution"">
   CJS source and both CJS &amp; ESM distribution
  </a>
  , you have the same options.
 </p>
 <h4 id=""publish-only-a-cjs-distribution-with-property-exports"">
  <a href=""#publish-only-a-cjs-distribution-with-property-exports"">
   Publish only a CJS distribution with property exports
  </a>
 </h4>
 <p>
  Tricky to make and needs good ingredients.
 </p>
 <p>
  This option is almost identical to the
  <a href=""#attach-named-exports-directly-onto-raw-exports-endraw-"">
   CJS source with CJS &amp; ESM distribution's property exports
  </a>
  above. The only difference is in package.json:
  <code>
   ""type"": ""module""
  </code>
  .
 </p>
 <p>
  Only some build tools support generating this output.
  <a href=""https://www.rollupjs.org/"">
   Rollup
  </a>
  produces compatible output out of the box when targetting commonjs. Webpack as of
  <a href=""https://github.com/webpack/webpack/releases/tag/v5.66.0"">
   v5.66.0+
  </a>
  does with the new
  <a href=""https://webpack.js.org/configuration/output/#type-commonjs-static"">
   <code>
    commonjs-static
   </code>
  </a>
  output type, (prior to this, no commonjs options produces compatible output). It is not currently possible with
  <a href=""https://esbuild.github.io/"">
   esbuild
  </a>
  (which produces a non-static
  <code>
   exports
  </code>
  ).
 </p>
 <p>
  The working example below was created prior to Webpack's recent release, so it uses Rollup (I'll get around to adding a Webpack option too).
 </p>
 <p>
  These examples assume javascript files within use the extension
  <code>
   .js
  </code>
  ;
  <code>
   ""type""
  </code>
  in
  <code>
   package.json
  </code>
  controls how those are interpreted:
 </p>
 <p>
  <code>
   ""type"":""commonjs""
  </code>
  +
  <code>
   .js
  </code>
  →
  <code>
   cjs
  </code>
  <br/>
  <code>
   ""type"":""module""
  </code>
  +
  <code>
   .js
  </code>
  →
  <code>
   mjs
  </code>
 </p>
 <p>
  If your files explicitly
  <em>
   all
  </em>
  use
  <code>
   .cjs
  </code>
  and/or
  <code>
   .mjs
  </code>
  file extensions (none use
  <code>
   .js
  </code>
  ),
  <code>
   ""type""
  </code>
  is superfluous.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/esm/dual/property-distro"">
   esm-with-cjs-distro
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R4ob9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R4ob9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">esm-with-cjs-distribution</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">main</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/index.cjs</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R4ob9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R4ob9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  💡 Using
  <code>
   ""type"": ""module""
  </code>
  <sup>
   <a aria-describedby=""footnote-label"" data-footnote-ref=""true"" href=""#user-content-fn-2"" id=""user-content-fnref-2-2"">
    2
   </a>
  </sup>
  paired with the
  <code>
   .cjs
  </code>
  file extension (for commonjs files) yields best results. For more information on why, see
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
  and
  <a href=""#gotchas"">
   Gotchas
  </a>
  below.
 </p>
 <h4 id=""publish-a-cjs-distribution-with-an-esm-wrapper"">
  <a href=""#publish-a-cjs-distribution-with-an-esm-wrapper"">
   Publish a CJS distribution with an ESM wrapper
  </a>
 </h4>
 <p>
  There's a lot going on here, and this is usually not the best.
 </p>
 <p>
  This is also almost identical to the
  <a href=""#use-a-simple-esm-wrapper"">
   CJS source and dual distribution using an ESM wrapper
  </a>
  , but with subtle differences
  <code>
   ""type"": ""module""
  </code>
  and some
  <code>
   .cjs
  </code>
  file extenions in package.json.
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/esm/dual/wrapper-distro"">
   esm-with-dual-distro (wrapper)
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R53b9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R53b9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">name</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">esm-with-cjs-and-esm-wrapper-distribution</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/wrapper.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.cjs</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.cjs</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R53b9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R53b9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  💡 Using
  <code>
   ""type"": ""module""
  </code>
  <sup>
   <a aria-describedby=""footnote-label"" data-footnote-ref=""true"" href=""#user-content-fn-2"" id=""user-content-fnref-2-3"">
    2
   </a>
  </sup>
  paired with the
  <code>
   .cjs
  </code>
  file extension (for commonjs files) yields best results. For more information on why, see
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
  and
  <a href=""#gotchas"">
   Gotchas
  </a>
  below.
 </p>
 <h4 id=""publish-both-full-cjs--esm-distributions"">
  <a href=""#publish-both-full-cjs--esm-distributions"">
   Publish both full CJS &amp; ESM distributions
  </a>
 </h4>
 <p>
  Chuck in a bunch of stuff (with a surprise) and hope for the best. This is probably the most common and easiest of the ESM to CJS &amp; ESM options, but you pay for it. This is rarely a good idea.
 </p>
 <p>
  In terms of package configuration, there are a few options that differ mostly in personal preference.
 </p>
 <h5 id=""mark-the-whole-package-as-esm-and-specifically-mark-the-cjs-exports-as-cjs-via-the-cjs-file-extension"">
  <a href=""#mark-the-whole-package-as-esm-and-specifically-mark-the-cjs-exports-as-cjs-via-the-cjs-file-extension"">
   Mark the whole package as ESM and specifically mark the CJS exports as CJS via the
   <code>
    .cjs
   </code>
   file extension
  </a>
 </h5>
 <p>
  This option has the least burden on development/developer experience.
 </p>
 <p>
  This also means that whatever build tooling must produce the distribution file with a
  <code>
   .cjs
  </code>
  file extension. This might necessitate chaining multiple build tools or adding a subsequent step to move/rename the file to have the
  <code>
   .cjs
  </code>
  file extension (ex
  <code>
   mv ./dist/index.js ./dist/index.cjs
  </code>
  ). This can be worked around by adding a subsequent step to move/rename those outputted files (ex
  <a href=""https://rollupjs.org/"">
   Rollup
  </a>
  or
  <a href=""https://stackoverflow.com/q/21985492"">
   a simple shell script
  </a>
  ).
 </p>
 <p>
  Support for the
  <code>
   .cjs
  </code>
  file extension was added in 12.0.0, and using it will cause ESM to properly recognised a file as commonjs (
  <code>
   import { foo } from './foo.cjs'
  </code>
  works). However,
  <code>
   require()
  </code>
  does not auto-resolve
  <code>
   .cjs
  </code>
  like it does for
  <code>
   .js
  </code>
  , so file extension cannot be omitted as is commonplace in commonjs:
  <code>
   require('./foo')
  </code>
  will fail, but
  <code>
   require('./foo.cjs')
  </code>
  works. Using it in your package's exports has no drawbacks:
  <code>
   packageJson.exports
  </code>
  (and
  <code>
   packageJson.main
  </code>
  ) requires a file extension regardless, and consumers reference your package by the
  <code>
   ""name""
  </code>
  field of your package.json (so they're blissfully unaware).
 </p>
 <p>
  <strong>
   Working example
  </strong>
  :
  <a href=""https://github.com/JakobJingleheimer/nodejs-module-config-examples/tree/main/packages/esm/dual/double-distro"">
   esm-with-dual-distro
  </a>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R5mb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R5mb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/index.cjs</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R5mb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5mb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Alternatively, you can use
  <code>
   ""default""
  </code>
  and
  <code>
   ""node""
  </code>
  keys, which are less counter-intuitive: Node.js will always choose the
  <code>
   ""node""
  </code>
  option (which always works), and non-Node.js tooling will choose
  <code>
   ""default""
  </code>
  when configured to target something other than node.
  <strong>
   This precludes the dual-package hazard.
  </strong>
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R5pb9utjfb:-trigger-json-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R5pb9utjfb:-content-json-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">node</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/index.cjs</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JSON
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R5pb9utjfb:-trigger-json-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5pb9utjfb:-content-json-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  💡 Using
  <code>
   ""type"": ""module""
  </code>
  <sup>
   <a aria-describedby=""footnote-label"" data-footnote-ref=""true"" href=""#user-content-fn-2"" id=""user-content-fnref-2-4"">
    2
   </a>
  </sup>
  paired with the
  <code>
   .cjs
  </code>
  file extension (for commonjs files) yields best results. For more information on why, see
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
  and
  <a href=""#gotchas"">
   Gotchas
  </a>
  below.
 </p>
 <h5 id=""use-the-mjs-or-equivalent-file-extension-for-all-source-code-files"">
  <a href=""#use-the-mjs-or-equivalent-file-extension-for-all-source-code-files"">
   Use the
   <code>
    .mjs
   </code>
   (or equivalent) file extension for all source code files
  </a>
 </h5>
 <p>
  The configuration for this is the same as
  <a href=""#cjs-source-and-both-cjs-amp-esm-distribution"">
   CJS source and both CJS &amp; ESM distribution
  </a>
  .
 </p>
 <p>
  <strong>
   Non-JavaScript source code
  </strong>
  : The non-JavaScript language’s own configuration needs to recognise/specify that the input files are ESM.
 </p>
 <h4 id=""nodejs-before-1222x"">
  <a href=""#nodejs-before-1222x"">
   Node.js before 12.22.x
  </a>
 </h4>
 <p>
  🛑 You should not do this: Versions of Node.js prior to 12.x are End of Life and are now vulnerable to serious security exploits.
 </p>
 <p>
  If you're a security researcher needing to investigate Node.js prior to v12.22.x, feel free to contact us for help configuring.
 </p>
 <h2 id=""general-notes"">
  <a href=""#general-notes"">
   General notes
  </a>
 </h2>
 <p>
  <a href=""https://nodejs.org/api/packages.html#syntax-detection"">
   Syntax detection
  </a>
  is
  <em>
   <strong>
    not
   </strong>
  </em>
  a replacement for proper package configuration; syntax detection is not fool-proof and it has
  <a href=""https://github.com/nodejs/node/pull/55238"">
   significant performance cost
  </a>
  .
 </p>
 <p>
  When using
  <a href=""https://nodejs.org/api/packages.html#conditional-exports"">
   <code>
    ""exports""
   </code>
  </a>
  in package.json, it is generally a good idea to include
  <code>
   ""./package.json"": ""./package.json""
  </code>
  so that it can be imported (
  <a href=""https://nodejs.org/api/module.html#modulefindpackagejsonspecifier-base"">
   <code>
    module.findPackageJSON
   </code>
  </a>
  is not affected by this limitation, but
  <code>
   import
  </code>
  may be more convenient).
 </p>
 <p>
  <code>
   ""exports""
  </code>
  can be advisable over
  <a href=""https://nodejs.org/api/packages.html#main"">
   <code>
    ""main""
   </code>
  </a>
  because it prevents external access to internal code (so you can be relatively sure users are not depending on things they shouldn't). If you don't need that,
  <code>
   ""main""
  </code>
  is simpler and may be a better option for you.
 </p>
 <p>
  The
  <code>
   ""engines""
  </code>
  field provides both a human-friendly and a machine-friendly indication of which version(s) of Node.js the package is compatible. Depending on the package manager used, an exception may be thrown causing the installation to fail when the consumer is using an incompatible version of Node.js (which can be very helpful to consumers). Including this field will save a lot of headache for consumers with an older version of Node.js who cannot use the package.
 </p>
 <h2 id=""down-the-rabbit-hole"">
  <a href=""#down-the-rabbit-hole"">
   Down the rabbit-hole
  </a>
 </h2>
 <p>
  Specifically in relation to Node.js, there are 4 problems to solve:
 </p>
 <ul>
  <li>
   <p>
    Determining format of source code files (author running her/his own code)
   </p>
  </li>
  <li>
   <p>
    Determining format of distribution files (code consumers will receive)
   </p>
  </li>
  <li>
   <p>
    Publicising distribution code for when it is
    <code>
     require()
    </code>
    ’d (consumer expects CJS)
   </p>
  </li>
  <li>
   <p>
    Publicising distribution code for when it is
    <code>
     import
    </code>
    ’d (consumer probably wants ESM)
   </p>
  </li>
 </ul>
 <p>
  ⚠️ The first 2 are
  <strong>
   independent
  </strong>
  of the last 2.
 </p>
 <p>
  The method of loading does NOT determine the format the file is interpreted as:
 </p>
 <ul>
  <li>
   <strong>
    package.json’s
   </strong>
   <strong>
    <code>
     exports.require
    </code>
   </strong>
   <strong>
    ≠
   </strong>
   <strong>
    <code>
     CJS
    </code>
   </strong>
   .
   <code>
    require()
   </code>
   does NOT and cannot blindly interpret the file as CJS; for instance,
   <code>
    require('foo.json')
   </code>
   correctly interprets the file as JSON, not CJS. The module containing the
   <code>
    require()
   </code>
   call of course must be CJS, but what it is loading is not necessarily also CJS.
  </li>
  <li>
   <strong>
    package.json’s
   </strong>
   <strong>
    <code>
     exports.import
    </code>
   </strong>
   <strong>
    ≠
   </strong>
   <strong>
    <code>
     ESM
    </code>
   </strong>
   .
   <code>
    import
   </code>
   similarly does NOT and cannot blindly interpret the file as ESM;
   <code>
    import
   </code>
   can load CJS, JSON, and WASM, as well as ESM. The module containing the
   <code>
    import
   </code>
   statement of course must be ESM, but what it is loading is not necessarily also ESM.
  </li>
 </ul>
 <p>
  So when you see configuration options citing or named with
  <code>
   require
  </code>
  or
  <code>
   import
  </code>
  , resist the urge to assume they are for
  <em>
   determining
  </em>
  CJS vs ES Modules.
 </p>
 <p>
  ⚠️ Adding an
  <code>
   ""exports""
  </code>
  field/field-set to a package’s configuration effectively
  <a href=""https://nodejs.org/api/packages.html#package-entry-points"">
   blocks deep pathing into the package
  </a>
  for anything not explicitly listed in the exports’ subpathing. This means it can be a breaking change.
 </p>
 <p>
  ⚠️ Consider carefully whether to distribute both CJS and ESM: It creates the potential for the
  <a href=""#the-dual-package-hazard"">
   Dual Package Hazard
  </a>
  (especially if misconfigured and the consumer tries to get clever). This can lead to an extremely confusing bug in consuming projects, especially when your package is not perfectly configured. Consumers can even be blind-sided by an intermediary package that uses the ""other"" format of your package (eg consumer uses the ESM distribution, and some other package the consumer is also using itself uses the CJS distribution). If your package is in any way stateful, consuming both the CJS and ESM distributions will result in parallel states (which is almost surely unintentional).
 </p>
 <h3 id=""the-dual-package-hazard"">
  <a href=""#the-dual-package-hazard"">
   The dual-package hazard
  </a>
 </h3>
 <p>
  When an application is using a package that provides both CommonJS and ES module sources, there is a risk of certain bugs if both instances of the package get loaded. This potential comes from the fact that the
  <code>
   pkgInstance
  </code>
  created by
  <code>
   const pkgInstance = require('pkg')
  </code>
  is not the same as the
  <code>
   pkgInstance
  </code>
  created by
  <code>
   import pkgInstance from 'pkg'
  </code>
  (or an alternative main path like
  <code>
   'pkg/module'
  </code>
  ). This is the “dual package hazard”, where two instances of the same package can be loaded within the same runtime environment. While it is unlikely that an application or package would intentionally load both instances directly, it is common for an application to load one copy while a dependency of the application loads the other copy. This hazard can happen because Node.js supports intermixing CommonJS and ES modules, and can lead to unexpected and confusing behavior.
 </p>
 <p>
  If the package main export is a constructor, an
  <code>
   instanceof
  </code>
  comparison of instances created by the two copies returns
  <code>
   false
  </code>
  , and if the export is an object, properties added to one (like
  <code>
   pkgInstance.foo = 3
  </code>
  ) are not present on the other. This differs from how
  <code>
   import
  </code>
  and
  <code>
   require
  </code>
  statements work in all-CommonJS or all-ES module environments, respectively, and therefore is surprising to users. It also differs from the behavior users are familiar with when using transpilation via tools like
  <a href=""https://babeljs.io/"">
   Babel
  </a>
  or
  <a href=""https://github.com/standard-things/esm#readme"">
   <code>
    esm
   </code>
  </a>
  .
 </p>
 <h3 id=""how-did-we-get-here"">
  <a href=""#how-did-we-get-here"">
   How did we get here
  </a>
 </h3>
 <p>
  <a href=""https://wiki.commonjs.org/wiki/Modules"">
   CommonJS (CJS)
  </a>
  was created
  <em>
   long
  </em>
  before ECMAScript Modules (ESM), back when JavaScript was still adolescent—CJS and jQuery were created just 3 years apart. CJS is not an official (
  <a href=""https://tc39.es"">
   TC39
  </a>
  ) standard and is supported by a limited few platforms (most notably, Node.js). ESM as a standard has been incoming for several years; it is currently supported by all major platforms (browsers, Deno, Node.js, etc), meaning it will run pretty much everywhere. As it became clear ESM would effectively succeed CJS (which is still very popular and widespread), many attempted to adopt early on, often before a particular aspect of the ESM specification was finalised. Because of this, those changed over time as better information became available (often informed by learnings/experiences of those eager beavers), going from best-guess to the aligning with the specification.
 </p>
 <p>
  An additional complication is bundlers, which historically managed much of this territory. However, much of what we previously needed bundle(r)s to manage is now native functionality; yet bundlers are still (and likely always will be) necessary for some things. Unfortunately, functionality bundlers no-longer need to provide is deeply ingrained in older bundlers’ implementations, so they can at times be too helpful, and in some cases, anti-pattern (bundling a library is often not recommended by bundler authors themselves). The hows and whys of that are an article unto itself.
 </p>
 <h2 id=""gotchas"">
  <a href=""#gotchas"">
   Gotchas
  </a>
 </h2>
 <p>
  The
  <code>
   package.json
  </code>
  's
  <code>
   ""type""
  </code>
  field changes the
  <code>
   .js
  </code>
  file extension to mean either
  <code>
   commonjs
  </code>
  or ES
  <code>
   module
  </code>
  respectively. It is very common in dual/mixed packages (that contain both CJS and ESM) to use this field incorrectly.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">type</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">module</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">main</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/CJS/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">./package.json</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./package.json</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  This does not work because
  <code>
   ""type"": ""module""
  </code>
  causes
  <code>
   packageJson.main
  </code>
  ,
  <code>
   packageJson.exports["".""].require
  </code>
  , and
  <code>
   packageJson.exports["".""].default
  </code>
  to get interpreted as ESM (but they’re actually CJS).
 </p>
 <p>
  Excluding
  <code>
   ""type"": ""module""
  </code>
  produces the opposite problem:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">main</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/CJS/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">exports</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">.</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">import</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/esm/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">require</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      ""</span><span style=""color:#8FBCBB"">default</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./dist/cjs/index.js</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    ""</span><span style=""color:#8FBCBB"">./package.json</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">./package.json</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <p>
  This does not work because
  <code>
   packageJson.exports["".""].import
  </code>
  will get interpreted as CJS (but it’s actually ESM).
 </p>
 <section class=""footnotes"" data-footnotes=""true"">
  <h2 class=""sr-only"" id=""footnote-label"">
   <a href=""#footnote-label"">
    Footnotes
   </a>
  </h2>
  <ol>
   <li id=""user-content-fn-1"">
    <p>
     There was a bug in Node.js v13.0–13.6 where
     <code>
      packageJson.exports["".""]
     </code>
     had to be an array with verbose config options as the first item (as an object) and the “default” as the second item (as a string). See
     <a href=""https://github.com/nodejs/modules/issues/446"">
      nodejs/modules#446
     </a>
     .
     <a aria-label=""Back to reference 1"" class=""data-footnote-backref"" data-footnote-backref="""" href=""#user-content-fnref-1"">
      ↩
     </a>
    </p>
   </li>
   <li id=""user-content-fn-2"">
    <p>
     The
     <code>
      ""type""
     </code>
     field in package.json changes what the
     <code>
      .js
     </code>
     file extension means, similar to to an
     <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-type"">
      HTML script element’s type attribute
     </a>
     .
     <a aria-label=""Back to reference 2"" class=""data-footnote-backref"" data-footnote-backref="""" href=""#user-content-fnref-2"">
      ↩
     </a>
     <a aria-label=""Back to reference 2-2"" class=""data-footnote-backref"" data-footnote-backref="""" href=""#user-content-fnref-2-2"">
      ↩
      <sup>
       2
      </sup>
     </a>
     <a aria-label=""Back to reference 2-3"" class=""data-footnote-backref"" data-footnote-backref="""" href=""#user-content-fnref-2-3"">
      ↩
      <sup>
       3
      </sup>
     </a>
     <a aria-label=""Back to reference 2-4"" class=""data-footnote-backref"" data-footnote-backref="""" href=""#user-content-fnref-2-4"">
      ↩
      <sup>
       4
      </sup>
     </a>
    </p>
   </li>
  </ol>
 </section>
</main>
"
Modules,How to publish a Node-API package,"<main>
 <h1 id=""how-to-publish-a-node-api-version-of-a-package-alongside-a-non-node-api-version"">
  <a href=""#how-to-publish-a-node-api-version-of-a-package-alongside-a-non-node-api-version"">
   How to publish a Node-API version of a package alongside a non-Node-API version
  </a>
 </h1>
 <p>
  The following steps are illustrated using the package
  <code>
   iotivity-node
  </code>
  :
 </p>
 <ul>
  <li>
   First, publish the non-Node-API version:
   <!-- -->
   <ul>
    <li>
     Update the version in
     <code>
      package.json
     </code>
     . For
     <code>
      iotivity-node
     </code>
     , the version
becomes
     <code>
      1.2.0-2
     </code>
     .
    </li>
    <li>
     Go through the release checklist (ensure tests/demos/docs are OK)
    </li>
    <li>
     <code>
      npm publish
     </code>
    </li>
   </ul>
  </li>
  <li>
   Then, publish the Node-API version:
   <!-- -->
   <ul>
    <li>
     Update the version in
     <code>
      package.json
     </code>
     . In the case of
     <code>
      iotivity-node
     </code>
     ,
the version becomes
     <code>
      1.2.0-3
     </code>
     . For versioning, we recommend following
the pre-release version scheme as described by
     <a href=""https://semver.org/#spec-item-9"">
      semver.org
     </a>
     e.g.
     <code>
      1.2.0-napi
     </code>
     .
    </li>
    <li>
     Go through the release checklist (ensure tests/demos/docs are OK)
    </li>
    <li>
     <code>
      npm publish --tag n-api
     </code>
    </li>
   </ul>
  </li>
 </ul>
 <p>
  In this example, tagging the release with
  <code>
   n-api
  </code>
  has ensured that, although
version 1.2.0-3 is later than the non-Node-API published version (1.2.0-2), it
will not be installed if someone chooses to install
  <code>
   iotivity-node
  </code>
  by simply
running
  <code>
   npm install iotivity-node
  </code>
  . This will install the non-Node-API version
by default. The user will have to run
  <code>
   npm install iotivity-node@n-api
  </code>
  to
receive the Node-API version. For more information on using tags with npm check
out
  <a href=""https://docs.npmjs.com/getting-started/using-tags"">
   ""Using dist-tags""
  </a>
  .
 </p>
 <h2 id=""how-to-introduce-a-dependency-on-a-node-api-version-of-a-package"">
  <a href=""#how-to-introduce-a-dependency-on-a-node-api-version-of-a-package"">
   How to introduce a dependency on a Node-API version of a package
  </a>
 </h2>
 <p>
  To add the Node-API version of
  <code>
   iotivity-node
  </code>
  as a dependency, the
  <code>
   package.json
  </code>
  will look like this:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">""</span><span style=""color:#A3BE8C"">dependencies</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF"">: </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">iotivity-node</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">n-api</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   As explained in
   <a href=""https://docs.npmjs.com/getting-started/using-tags"">
    ""Using dist-tags""
   </a>
   , unlike regular versions, tagged versions cannot be
addressed by version ranges such as
   <code>
    ""^2.0.0""
   </code>
   inside
   <code>
    package.json
   </code>
   . The
reason for this is that the tag refers to exactly one version. So, if the
package maintainer chooses to tag a later version of the package using the
same tag,
   <code>
    npm update
   </code>
   will receive the later version. This should be acceptable
version other than the latest published, the
   <code>
    package.json
   </code>
   dependency will
have to refer to the exact version like the following:
  </p>
 </blockquote>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-json"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#ECEFF4"">""</span><span style=""color:#A3BE8C"">dependencies</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF"">: </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  ""</span><span style=""color:#8FBCBB"">iotivity-node</span><span style=""color:#ECEFF4"">""</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">1.2.0-3</span><span style=""color:#ECEFF4"">""</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JSON
   </span>
  </div>
 </div>
</main>
"
Modules,Anatomy of an HTTP Transaction,"<main>
 <h1 id=""anatomy-of-an-http-transaction"">
  <a href=""#anatomy-of-an-http-transaction"">
   Anatomy of an HTTP Transaction
  </a>
 </h1>
 <p>
  The purpose of this guide is to impart a solid understanding of the process of
Node.js HTTP handling. We'll assume that you know, in a general sense, how HTTP
requests work, regardless of language or programming environment. We'll also
assume a bit of familiarity with Node.js
  <a href=""https://nodejs.org/api/events.html"">
   <code>
    EventEmitters
   </code>
  </a>
  and
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Streams
   </code>
  </a>
  .
If you're not quite familiar with them, it's worth taking a quick read through
the API docs for each of those.
 </p>
 <h2 id=""create-the-server"">
  <a href=""#create-the-server"">
   Create the Server
  </a>
 </h2>
 <p>
  Any node web server application will at some point have to create a web server
object. This is done by using
  <a href=""https://nodejs.org/api/http.html#http_http_createserver_requestlistener"">
   <code>
    createServer
   </code>
  </a>
  .
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R9b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R9b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> http</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // magic happens here!</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R9b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R9b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The function that's passed in to
  <a href=""https://nodejs.org/api/http.html#http_http_createserver_requestlistener"">
   <code>
    createServer
   </code>
  </a>
  is called once for every
HTTP request that's made against that server, so it's called the request
handler. In fact, the
  <a href=""https://nodejs.org/api/http.html#http_class_http_server"">
   <code>
    Server
   </code>
  </a>
  object returned by
  <a href=""https://nodejs.org/api/http.html#http_http_createserver_requestlistener"">
   <code>
    createServer
   </code>
  </a>
  is an
  <a href=""https://nodejs.org/api/events.html#events_class_eventemitter"">
   <code>
    EventEmitter
   </code>
  </a>
  , and what we have here is just shorthand for creating a
  <code>
   server
  </code>
  object and then adding the listener later.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> http</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">request</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // the same kind of magic happens here!</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  When an HTTP request hits the server, Node calls the request handler function
with a few handy objects for dealing with the transaction,
  <code>
   request
  </code>
  and
  <code>
   response
  </code>
  . We'll get to those shortly.
 </p>
 <p>
  In order to actually serve requests, the
  <a href=""https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback"">
   <code>
    listen
   </code>
  </a>
  method needs to be called
on the
  <code>
   server
  </code>
  object. In most cases, all you'll need to pass to
  <code>
   listen
  </code>
  is
the port number you want the server to listen on. There are some other options
too, so consult the
  <a href=""https://nodejs.org/api/http.html"">
   API reference
  </a>
  .
 </p>
 <h2 id=""method-url-and-headers"">
  <a href=""#method-url-and-headers"">
   Method, URL and Headers
  </a>
 </h2>
 <p>
  When handling a request, the first thing you'll probably want to do is look at
the method and URL, so that appropriate actions can be taken. Node.js makes this
relatively painless by putting handy properties onto the
  <code>
   request
  </code>
  object.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> method</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> request</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   The
   <code>
    request
   </code>
   object is an instance of
   <a href=""https://nodejs.org/api/http.html#http_class_http_incomingmessage"">
    <code>
     IncomingMessage
    </code>
   </a>
   .
  </p>
 </blockquote>
 <p>
  The
  <code>
   method
  </code>
  here will always be a normal HTTP method/verb. The
  <code>
   url
  </code>
  is the
full URL without the server, protocol or port. For a typical URL, this means
everything after and including the third forward slash.
 </p>
 <p>
  Headers are also not far away. They're in their own object on
  <code>
   request
  </code>
  called
  <code>
   headers
  </code>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> headers</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> request</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> userAgent</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> headers</span><span style=""color:#D8DEE9FF"">[</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">user-agent</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  It's important to note here that all headers are represented in lower-case only,
regardless of how the client actually sent them. This simplifies the task of
parsing headers for whatever purpose.
 </p>
 <p>
  If some headers are repeated, then their values are overwritten or joined
together as comma-separated strings, depending on the header. In some cases,
this can be problematic, so
  <a href=""https://nodejs.org/api/http.html#http_message_rawheaders"">
   <code>
    rawHeaders
   </code>
  </a>
  is also available.
 </p>
 <h2 id=""request-body"">
  <a href=""#request-body"">
   Request Body
  </a>
 </h2>
 <p>
  When receiving a
  <code>
   POST
  </code>
  or
  <code>
   PUT
  </code>
  request, the request body might be important to
your application. Getting at the body data is a little more involved than
accessing request headers. The
  <code>
   request
  </code>
  object that's passed in to a handler
implements the
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_readable"">
   <code>
    ReadableStream
   </code>
  </a>
  interface. This stream can be listened to or
piped elsewhere just like any other stream. We can grab the data right out of
the stream by listening to the stream's
  <code>
   'data'
  </code>
  and
  <code>
   'end'
  </code>
  events.
 </p>
 <p>
  The chunk emitted in each
  <code>
   'data'
  </code>
  event is a
  <a href=""https://nodejs.org/api/buffer.html"">
   <code>
    Buffer
   </code>
  </a>
  . If you know it's
going to be string data, the best thing to do is collect the data in an array,
then at the
  <code>
   'end'
  </code>
  , concatenate and stringify it.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">request</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    body</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Buffer</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">concat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">    // at this point, `body` has the entire request body stored in it as a string</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   This may seem a tad tedious, and in many cases, it is. Luckily,
there are modules like
   <a href=""https://www.npmjs.com/package/concat-stream"">
    <code>
     concat-stream
    </code>
   </a>
   and
   <a href=""https://www.npmjs.com/package/body"">
    <code>
     body
    </code>
   </a>
   on
   <a href=""https://www.npmjs.com"">
    <code>
     npm
    </code>
   </a>
   which can
help hide away some of this logic. It's important to have a good understanding
of what's going on before going down that road, and that's why you're here!
  </p>
 </blockquote>
 <h2 id=""a-quick-thing-about-errors"">
  <a href=""#a-quick-thing-about-errors"">
   A Quick Thing About Errors
  </a>
 </h2>
 <p>
  Since the
  <code>
   request
  </code>
  object is a
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_readable"">
   <code>
    ReadableStream
   </code>
  </a>
  , it's also an
  <a href=""https://nodejs.org/api/events.html#events_class_eventemitter"">
   <code>
    EventEmitter
   </code>
  </a>
  and behaves like one when an error happens.
 </p>
 <p>
  An error in the
  <code>
   request
  </code>
  stream presents itself by emitting an
  <code>
   'error'
  </code>
  event
on the stream.
  <strong>
   If you don't have a listener for that event, the error will be
   <em>
    thrown
   </em>
   , which could crash your Node.js program.
  </strong>
  You should therefore add an
  <code>
   'error'
  </code>
  listener on your request streams, even if you just log it and
continue on your way. (Though it's probably best to send some kind of HTTP error
response. More on that later.)
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // This prints the error message and stack trace to `stderr`.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stack</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  There are other ways of
  <a href=""https://nodejs.org/api/errors.html"">
   handling these errors
  </a>
  such as
other abstractions and tools, but always be aware that errors can and do happen,
and you're going to have to deal with them.
 </p>
 <h2 id=""what-weve-got-so-far"">
  <a href=""#what-weve-got-so-far"">
   What We've Got so Far
  </a>
 </h2>
 <p>
  At this point, we've covered creating a server, and grabbing the method, URL,
headers and body out of requests. When we put that all together, it might look
something like this:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1sb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1sb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> headers</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> method</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> request</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    let</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    request</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Buffer</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">concat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">        // At this point, we have the headers, method, url and body, and can now</span></span>
<span class=""line""><span style=""color:#707e99"">        // do whatever we need to in order to respond to this request.</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Activates this server, listening on port 8080.</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1sb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1sb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  If we run this example, we'll be able to
  <em>
   receive
  </em>
  requests, but not
  <em>
   respond
  </em>
  to them. In fact, if you hit this example in a web browser, your request would
time out, as nothing is being sent back to the client.
 </p>
 <p>
  So far we haven't touched on the
  <code>
   response
  </code>
  object at all, which is an instance
of
  <a href=""https://nodejs.org/api/http.html#http_class_http_serverresponse"">
   <code>
    ServerResponse
   </code>
  </a>
  , which is a
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_writable"">
   <code>
    WritableStream
   </code>
  </a>
  . It contains many
useful methods for sending data back to the client. We'll cover that next.
 </p>
 <h2 id=""http-status-code"">
  <a href=""#http-status-code"">
   HTTP Status Code
  </a>
 </h2>
 <p>
  If you don't bother setting it, the HTTP status code on a response will always
be 200. Of course, not every HTTP response warrants this, and at some point
you'll definitely want to send a different status code. To do that, you can set
the
  <code>
   statusCode
  </code>
  property.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 404</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Tell the client that the resource wasn't found.</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  There are some other shortcuts to this, as we'll see soon.
 </p>
 <h2 id=""setting-response-headers"">
  <a href=""#setting-response-headers"">
   Setting Response Headers
  </a>
 </h2>
 <p>
  Headers are set through a convenient method called
  <a href=""https://nodejs.org/api/http.html#http_response_setheader_name_value"">
   <code>
    setHeader
   </code>
  </a>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setHeader</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setHeader</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">X-Powered-By</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bacon</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  When setting the headers on a response, the case is insensitive on their names.
If you set a header repeatedly, the last value you set is the value that gets
sent.
 </p>
 <h2 id=""explicitly-sending-header-data"">
  <a href=""#explicitly-sending-header-data"">
   Explicitly Sending Header Data
  </a>
 </h2>
 <p>
  The methods of setting the headers and status code that we've already discussed
assume that you're using ""implicit headers"". This means you're counting on node
to send the headers for you at the correct time before you start sending body
data.
 </p>
 <p>
  If you want, you can
  <em>
   explicitly
  </em>
  write the headers to the response stream.
To do this, there's a method called
  <a href=""https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers"">
   <code>
    writeHead
   </code>
  </a>
  , which writes the status
code and the headers to the stream.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">writeHead</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">200</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  '</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  '</span><span style=""color:#A3BE8C"">X-Powered-By</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bacon</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Once you've set the headers (either implicitly or explicitly), you're ready to
start sending response data.
 </p>
 <h2 id=""sending-response-body"">
  <a href=""#sending-response-body"">
   Sending Response Body
  </a>
 </h2>
 <p>
  Since the
  <code>
   response
  </code>
  object is a
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_writable"">
   <code>
    WritableStream
   </code>
  </a>
  , writing a response body
out to the client is just a matter of using the usual stream methods.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;html&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;body&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;h1&gt;Hello, World!&lt;/h1&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;/body&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;/html&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  The
  <code>
   end
  </code>
  function on streams can also take in some optional data to send as the
last bit of data on the stream, so we can simplify the example above as follows.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   It's important to set the status and headers
   <em>
    before
   </em>
   you start
writing chunks of data to the body. This makes sense, since headers come before
the body in HTTP responses.
  </p>
 </blockquote>
 <h2 id=""another-quick-thing-about-errors"">
  <a href=""#another-quick-thing-about-errors"">
   Another Quick Thing About Errors
  </a>
 </h2>
 <p>
  The
  <code>
   response
  </code>
  stream can also emit
  <code>
   'error'
  </code>
  events, and at some point you're
going to have to deal with that as well. All of the advice for
  <code>
   request
  </code>
  stream
errors still applies here.
 </p>
 <h2 id=""put-it-all-together"">
  <a href=""#put-it-all-together"">
   Put It All Together
  </a>
 </h2>
 <p>
  Now that we've learned about making HTTP responses, let's put it all together.
Building on the earlier example, we're going to make a server that sends back
all of the data that was sent to us by the user. We'll format that data as JSON
using
  <code>
   JSON.stringify
  </code>
  .
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3fb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3fb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> headers</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> method</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> request</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    let</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    request</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Buffer</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">concat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">        // BEGINNING OF NEW STUFF</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 200</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setHeader</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Content-Type</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">application/json</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">        // Note: the 2 lines above could be replaced with this next one:</span></span>
<span class=""line""><span style=""color:#707e99"">        // response.writeHead(200, {'Content-Type': 'application/json'})</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">        const</span><span style=""color:#D8DEE9""> responseBody</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> headers</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> method</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> body</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">JSON</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">stringify</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">responseBody</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">        // Note: the 2 lines above could be replaced with this next one:</span></span>
<span class=""line""><span style=""color:#707e99"">        // response.end(JSON.stringify(responseBody))</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">        // END OF NEW STUFF</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3fb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3fb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""echo-server-example"">
  <a href=""#echo-server-example"">
   Echo Server Example
  </a>
 </h2>
 <p>
  Let's simplify the previous example to make a simple echo server, which just
sends whatever data is received in the request right back in the response. All
we need to do is grab the data from the request stream and write that data to
the response stream, similar to what we did previously.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3kb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3kb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    let</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    request</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Buffer</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">concat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">        response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3kb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3kb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Now let's tweak this. We want to only send an echo under the following
conditions:
 </p>
 <ul>
  <li>
   The request method is POST.
  </li>
  <li>
   The URL is
   <code>
    /echo
   </code>
   .
  </li>
 </ul>
 <p>
  In any other case, we want to simply respond with a 404.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3rb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3rb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">method</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">POST</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> &amp;&amp;</span><span style=""color:#D8DEE9""> request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">url</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/echo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">      let</span><span style=""color:#D8DEE9""> body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> []</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      request</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          body</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        .</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          body</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Buffer</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">concat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">          response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">body</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">        }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 404</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3rb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3rb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   By checking the URL in this way, we're doing a form of ""routing"".
Other forms of routing can be as simple as
   <code>
    switch
   </code>
   statements or as complex as
whole frameworks like
   <a href=""https://www.npmjs.com/package/express"">
    <code>
     express
    </code>
   </a>
   . If you're looking for something that does
routing and nothing else, try
   <a href=""https://www.npmjs.com/package/router"">
    <code>
     router
    </code>
   </a>
   .
  </p>
 </blockquote>
 <p>
  Great! Now let's take a stab at simplifying this. Remember, the
  <code>
   request
  </code>
  object
is a
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_readable"">
   <code>
    ReadableStream
   </code>
  </a>
  and the
  <code>
   response
  </code>
  object is a
  <a href=""https://nodejs.org/api/stream.html#stream_class_stream_writable"">
   <code>
    WritableStream
   </code>
  </a>
  .
That means we can use
  <a href=""https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options"">
   <code>
    pipe
   </code>
  </a>
  to direct data from one to the other. That's
exactly what we want for an echo server!
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R40b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R40b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">method</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">POST</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> &amp;&amp;</span><span style=""color:#D8DEE9""> request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">url</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/echo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">response</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 404</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R40b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R40b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Yay streams!
 </p>
 <p>
  We're not quite done yet though. As mentioned multiple times in this guide,
errors can and do happen, and we need to deal with them.
 </p>
 <p>
  To handle errors on the request stream, we'll log the error to
  <code>
   stderr
  </code>
  and send
a 400 status code to indicate a
  <code>
   Bad Request
  </code>
  . In a real-world application,
though, we'd want to inspect the error to figure out what the correct status code
and message would be. As usual with errors, you should consult the
  <a href=""https://nodejs.org/api/errors.html"">
   <code>
    Error
   </code>
   documentation
  </a>
  .
 </p>
 <p>
  On the response, we'll just log the error to
  <code>
   stderr
  </code>
  .
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R49b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R49b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> http</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:http</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">http</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> response</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 400</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">method</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">POST</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1""> &amp;&amp;</span><span style=""color:#D8DEE9""> request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">url</span><span style=""color:#81A1C1""> ===</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">/echo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      request</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">response</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">statusCode</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 404</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      response</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R49b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R49b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  We've now covered most of the basics of handling HTTP requests. At this point,
you should be able to:
 </p>
 <ul>
  <li>
   Instantiate an HTTP server with a request handler function, and have it listen
on a port.
  </li>
  <li>
   Get headers, URL, method and body data from
   <code>
    request
   </code>
   objects.
  </li>
  <li>
   Make routing decisions based on URL and/or other data in
   <code>
    request
   </code>
   objects.
  </li>
  <li>
   Send headers, HTTP status codes and body data via
   <code>
    response
   </code>
   objects.
  </li>
  <li>
   Pipe data from
   <code>
    request
   </code>
   objects and to
   <code>
    response
   </code>
   objects.
  </li>
  <li>
   Handle stream errors in both the
   <code>
    request
   </code>
   and
   <code>
    response
   </code>
   streams.
  </li>
 </ul>
 <p>
  From these basics, Node.js HTTP servers for many typical use cases can be
constructed. There are plenty of other things these APIs provide, so be sure to
read through the API docs for
  <a href=""https://nodejs.org/api/events.html"">
   <code>
    EventEmitters
   </code>
  </a>
  ,
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Streams
   </code>
  </a>
  , and
  <a href=""https://nodejs.org/api/http.html"">
   <code>
    HTTP
   </code>
  </a>
  .
 </p>
</main>
"
Modules,ABI Stability,"<main>
 <h1 id=""abi-stability"">
  <a href=""#abi-stability"">
   ABI Stability
  </a>
 </h1>
 <h2 id=""introduction"">
  <a href=""#introduction"">
   Introduction
  </a>
 </h2>
 <p>
  An Application Binary Interface (ABI) is a way for programs to call functions
and use data structures from other compiled programs. It is the compiled version
of an Application Programming Interface (API). In other words, the headers files
describing the classes, functions, data structures, enumerations, and constants
which enable an application to perform a desired task correspond by way of
compilation to a set of addresses and expected parameter values and memory
structure sizes and layouts with which the provider of the ABI was compiled.
 </p>
 <p>
  The application using the ABI must be compiled such that the available
addresses, expected parameter values, and memory structure sizes and layouts
agree with those with which the ABI provider was compiled. This is usually
accomplished by compiling against the headers provided by the ABI provider.
 </p>
 <p>
  Since the provider of the ABI and the user of the ABI may be compiled at
different times with different versions of the compiler, a portion of the
responsibility for ensuring ABI compatibility lies with the compiler. Different
versions of the compiler, perhaps provided by different vendors, must all
produce the same ABI from a header file with a certain content, and must produce
code for the application using the ABI that accesses the API described in a
given header according to the conventions of the ABI resulting from the
description in the header. Modern compilers have a fairly good track record of
not breaking the ABI compatibility of the applications they compile.
 </p>
 <p>
  The remaining responsibility for ensuring ABI compatibility lies with the team
maintaining the header files which provide the API that results, upon
compilation, in the ABI that is to remain stable. Changes to the header files
can be made, but the nature of the changes has to be closely tracked to ensure
that, upon compilation, the ABI does not change in a way that will render
existing users of the ABI incompatible with the new version.
 </p>
 <h2 id=""abi-stability-in-nodejs"">
  <a href=""#abi-stability-in-nodejs"">
   ABI Stability in Node.js
  </a>
 </h2>
 <p>
  Node.js provides header files maintained by several independent teams. For
example, header files such as
  <code>
   node.h
  </code>
  and
  <code>
   node_buffer.h
  </code>
  are maintained by
the Node.js team.
  <code>
   v8.h
  </code>
  is maintained by the V8 team, which, although in close
co-operation with the Node.js team, is independent, and with its own schedule
and priorities. Thus, the Node.js team has only partial control over the
changes that are introduced in the headers the project provides. As a result,
the Node.js project has adopted
  <a href=""https://semver.org/"">
   semantic versioning
  </a>
  .
This ensures that the APIs provided by the project will result in a stable ABI
for all minor and patch versions of Node.js released within one major version.
In practice, this means that the Node.js project has committed itself to
ensuring that a Node.js native addon compiled against a given major version of
Node.js will load successfully when loaded by any Node.js minor or patch version
within the major version against which it was compiled.
 </p>
 <h2 id=""n-api"">
  <a href=""#n-api"">
   N-API
  </a>
 </h2>
 <p>
  Demand has arisen for equipping Node.js with an API that results in an ABI that
remains stable across multiple Node.js major versions. The motivation for
creating such an API is as follows:
 </p>
 <ul>
  <li>
   <p>
    The JavaScript language has remained compatible with itself since its very
early days, whereas the ABI of the engine executing the JavaScript code changes
with every major version of Node.js. This means that applications consisting of
Node.js packages written entirely in JavaScript need not be recompiled,
reinstalled, or redeployed as a new major version of Node.js is dropped into
the production environment in which such applications run. In contrast, if an
application depends on a package that contains a native addon, the application
has to be recompiled, reinstalled, and redeployed whenever a new major version
of Node.js is introduced into the production environment. This disparity
between Node.js packages containing native addons and those that are written
entirely in JavaScript has added to the maintenance burden of production
systems which rely on native addons.
   </p>
  </li>
  <li>
   <p>
    Other projects have started to produce JavaScript interfaces that are
essentially alternative implementations of Node.js. Since these projects are
usually built on a different JavaScript engine than V8, their native addons
necessarily take on a different structure and use a different API. Nevertheless,
using a single API for a native addon across different implementations of the
Node.js JavaScript API would allow these projects to take advantage of the
ecosystem of JavaScript packages that has accrued around Node.js.
   </p>
  </li>
  <li>
   <p>
    Node.js may contain a different JavaScript engine in the future. This means
that, externally, all Node.js interfaces would remain the same, but the V8
header file would be absent. Such a step would cause the disruption of the
Node.js ecosystem in general, and that of the native addons in particular, if
an API that is JavaScript engine agnostic is not first provided by Node.js and
adopted by native addons.
   </p>
  </li>
 </ul>
 <p>
  To these ends Node.js has introduced N-API in version 8.6.0 and marked it as a
stable component of the project as of Node.js 8.12.0. The API is defined in the
headers
  <a href=""https://github.com/nodejs/node/blob/main/src/node_api.h"">
   <code>
    node_api.h
   </code>
  </a>
  and
  <a href=""https://github.com/nodejs/node/blob/main/src/node_api_types.h"">
   <code>
    node_api_types.h
   </code>
  </a>
  , and provides a forward-
compatibility guarantee that crosses the Node.js major version boundary. The
guarantee can be stated as follows:
 </p>
 <p>
  <strong>
   A given version
   <em>
    n
   </em>
   of N-API will be available in the major version of
Node.js in which it was published, and in all subsequent versions of Node.js,
including subsequent major versions.
  </strong>
 </p>
 <p>
  A native addon author can take advantage of the N-API forward compatibility
guarantee by ensuring that the addon makes use only of APIs defined in
  <code>
   node_api.h
  </code>
  and data structures and constants defined in
  <code>
   node_api_types.h
  </code>
  .
By doing so, the author facilitates adoption of their addon by indicating to
production users that the maintenance burden for their application will increase
no more by the addition of the native addon to their project than it would by
the addition of a package written purely in JavaScript.
 </p>
 <p>
  N-API is versioned because new APIs are added from time to time. Unlike
semantic versioning, N-API versioning is cumulative. That is, each version of
N-API conveys the same meaning as a minor version in the semver system, meaning
that all changes made to N-API will be backwards compatible. Additionally, new
N-APIs are added under an experimental flag to give the community an opportunity
to vet them in a production environment. Experimental status means that,
although care has been taken to ensure that the new API will not have to be
modified in an ABI-incompatible way in the future, it has not yet been
sufficiently proven in production to be correct and useful as designed and, as
such, may undergo ABI-incompatible changes before it is finally incorporated
into a forthcoming version of N-API. That is, an experimental N-API is not yet
covered by the forward compatibility guarantee.
 </p>
</main>
"
Modules,How to use streams,"<main>
 <h1 id=""how-to-use-streams"">
  <a href=""#how-to-use-streams"">
   How To Use Streams
  </a>
 </h1>
 <p>
  Working with large amounts of data in Node.js applications can be a double-edged sword. The ability to handle massive amounts of data is extremely handy but can also lead to performance bottlenecks and memory exhaustion. Traditionally, developers tackled this challenge by reading the entire dataset into memory at once. This approach, while intuitive for smaller datasets, becomes inefficient and resource-intensive for large data (e.g., files, network requests…).
 </p>
 <p>
  This is where Node.js streams come in. Streams offer a fundamentally different approach, allowing you to process data incrementally and optimize memory usage. By handling data in manageable chunks, streams empower you to build scalable applications that can efficiently tackle even the most daunting datasets. As popularly quoted, “streams are arrays over time.”
 </p>
 <p>
  In this guide, we give an overview of the Stream concept, history, and API as well as some recommendations on how to use and operate them.
 </p>
 <h2 id=""what-are-nodejs-streams"">
  <a href=""#what-are-nodejs-streams"">
   What are Node.js Streams?
  </a>
 </h2>
 <p>
  Node.js streams offer a powerful abstraction for managing data flow in your applications. They excel at processing large datasets, such as reading or writing from files and network requests, without compromising performance.
 </p>
 <p>
  This approach differs from loading the entire dataset into memory at once. Streams process data in chunks, significantly reducing memory usage. All streams in Node.js inherit from the
  <a href=""https://nodejs.org/api/events.html#class-eventemitter"">
   <code>
    EventEmitter
   </code>
  </a>
  class, allowing them to emit events at various stages of data processing. These streams can be readable, writable, or both, providing flexibility for different data-handling scenarios.
 </p>
 <h3 id=""event-driven-architecture"">
  <a href=""#event-driven-architecture"">
   Event-Driven Architecture
  </a>
 </h3>
 <p>
  Node.js thrives on an event-driven architecture, making it ideal for real-time I/O. This means consuming input as soon as it's available and sending output as soon as the application generates it. Streams seamlessly integrate with this approach, enabling continuous data processing.
 </p>
 <p>
  They achieve this by emitting events at key stages. These events include signals for received data (
  <a href=""https://nodejs.org/api/stream.html#stream_event_data"">
   <code>
    data
   </code>
  </a>
  event) and the stream's completion (
  <a href=""https://nodejs.org/api/stream.html#event-end"">
   <code>
    end
   </code>
  </a>
  event). Developers can listen to these events and execute custom logic accordingly. This event-driven nature makes streams highly efficient for the processing of data from external sources.
 </p>
 <h2 id=""why-use-streams"">
  <a href=""#why-use-streams"">
   Why use Streams?
  </a>
 </h2>
 <p>
  Streams provide three key advantages over other data-handling methods:
 </p>
 <ul>
  <li>
   <strong>
    Memory Efficiency
   </strong>
   : Streams process data incrementally, consuming and processing data in chunks rather than loading the entire dataset into memory. This is a major advantage when dealing with large datasets, as it significantly reduces memory usage and prevents memory-related performance issues.
  </li>
  <li>
   <strong>
    Improved Response Time
   </strong>
   : Streams allow for immediate data processing. When a chunk of data arrives, it can be processed without waiting for the entire payload or dataset to be received. This reduces latency and improves your application's overall responsiveness.
  </li>
  <li>
   <strong>
    Scalability for Real-Time Processing
   </strong>
   : By handling data in chunks, Node.js streams can efficiently handle large amounts of data with limited resources. This scalability makes streams ideal for applications that process high volumes of data in real time.
  </li>
 </ul>
 <p>
  These advantages make streams a powerful tool for building high-performance, scalable Node.js applications, particularly when working with large datasets or real-time data processing.
 </p>
 <h3 id=""note-on-performance"">
  <a href=""#note-on-performance"">
   Note on performance
  </a>
 </h3>
 <p>
  If your application already has all the data readily available in memory, using streams might add unnecessary overhead, complexity, and slow down your application.
 </p>
 <h2 id=""stream-history"">
  <a href=""#stream-history"">
   Stream history
  </a>
 </h2>
 <p>
  This section is a reference of the history of streams in Node.js. Unless you’re working with a codebase written for a Node.js version prior to 0.11.5 (2013), you will rarely encounter older versions of the streams API, but the terms might still be in use.
 </p>
 <h3 id=""streams-0"">
  <a href=""#streams-0"">
   Streams 0
  </a>
 </h3>
 <p>
  The first version of streams was released at the same time as Node.js. Although there wasn't a Stream class yet, different modules used the concept and implemented the
  <code>
   read
  </code>
  /
  <code>
   write
  </code>
  functions. The
  <code>
   util.pump()
  </code>
  function was available to control the flow of data between streams.
 </p>
 <h3 id=""streams-1-classic"">
  <a href=""#streams-1-classic"">
   Streams 1 (Classic)
  </a>
 </h3>
 <p>
  With the release of Node v0.4.0 in 2011, the Stream class was introduced, as well as the
  <code>
   pipe()
  </code>
  method.
 </p>
 <h3 id=""streams-2"">
  <a href=""#streams-2"">
   Streams 2
  </a>
 </h3>
 <p>
  In 2012, with the release of Node v0.10.0, Streams 2 were unveiled. This update brought new stream subclasses, including Readable, Writable, Duplex, and Transform. Additionally, the
  <code>
   readable
  </code>
  event was added. To maintain backwards compatibility, streams could be switched to the old mode by adding a
  <code>
   data
  </code>
  event listener or calling
  <code>
   pause()
  </code>
  or
  <code>
   resume()
  </code>
  methods.
 </p>
 <h3 id=""streams-3"">
  <a href=""#streams-3"">
   Streams 3
  </a>
 </h3>
 <p>
  In 2013, Streams 3 were released with Node v0.11.5, to address the problem of a stream having both a
  <code>
   data
  </code>
  and
  <code>
   readable
  </code>
  event handlers. This removed the need to choose between 'current' and 'old' modes. Streams 3 is the current version of streams in Node.js.
 </p>
 <h2 id=""stream-types"">
  <a href=""#stream-types"">
   Stream types
  </a>
 </h2>
 <h3 id=""readable"">
  <a href=""#readable"">
   Readable
  </a>
 </h3>
 <p>
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  is the class that we use to sequentially read a source of data. Typical examples of
  <code>
   Readable
  </code>
  streams in Node.js API are
  <a href=""https://nodejs.org/api/fs.html#class-fsreadstream"">
   <code>
    fs.ReadStream
   </code>
  </a>
  when reading files,
  <a href=""https://nodejs.org/api/http.html#class-httpincomingmessage"">
   <code>
    http.IncomingMessage
   </code>
  </a>
  when reading HTTP requests, and
  <a href=""https://nodejs.org/api/process.html#processstdin"">
   <code>
    process.stdin
   </code>
  </a>
  when reading from the standard input.
 </p>
 <h4 id=""key-methods-and-events"">
  <a href=""#key-methods-and-events"">
   Key Methods and Events
  </a>
 </h4>
 <p>
  A readable stream operates with several core methods and events that allow fine control over data handling:
 </p>
 <ul>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#stream_event_data"">
     <code>
      on('data')
     </code>
    </a>
   </strong>
   : This event is triggered whenever data is available from the stream. It is very fast, as the stream pushes data as quickly as it can handle, making it suitable for high-throughput scenarios.
  </li>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#event-end"">
     <code>
      on('end')
     </code>
    </a>
   </strong>
   : Emitted when there is no more data to read from the stream. It signifies the completion of data delivery. This event is only fired when all the data from the stream has been consumed.
  </li>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#event-readable"">
     <code>
      on('readable')
     </code>
    </a>
   </strong>
   : This event is triggered when there is data available to read from the stream or when the end of the stream has been reached. It allows for more controlled data reading when needed.
  </li>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#event-close_1"">
     <code>
      on('close')
     </code>
    </a>
   </strong>
   : This event is emitted when the stream and its underlying resources have been closed and indicates that no more events will be emitted.
  </li>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#event-error_1"">
     <code>
      on('error')
     </code>
    </a>
   </strong>
   : This event can be emitted at any point, signaling that there was an error processing. A handler for this event can be used to avoid uncaught exceptions.
  </li>
 </ul>
 <p>
  A demonstration of the use of these events can be seen in the following sections.
 </p>
 <h4 id=""basic-readable-stream"">
  <a href=""#basic-readable-stream"">
   Basic Readable Stream
  </a>
 </h4>
 <p>
  Here's an example of a simple readable stream implementation that generates data dynamically:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R27b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R27b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Readable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyStream</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Readable</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  #count </span><span style=""color:#81A1C1"">=</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  _read</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">size</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">:-)</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">++this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">#count</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 5</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">      this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> stream</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MyStream</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R27b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R27b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  In this code, the
  <code>
   MyStream
  </code>
  class extends Readable and overrides the [
  <code>
   _read
  </code>
  ][] method to push a string "":-)"" to the internal buffer. After pushing the string five times, it signals the end of the stream by pushing
  <code>
   null
  </code>
  . The
  <a href=""https://nodejs.org/api/stream.html#stream_event_data"">
   <code>
    on('data')
   </code>
  </a>
  event handler logs each chunk to the console as it is received.
 </p>
 <h4 id=""advanced-control-with-the-readable-event"">
  <a href=""#advanced-control-with-the-readable-event"">
   Advanced Control with the readable Event
  </a>
 </h4>
 <p>
  For even finer control over data flow, the readable event can be used. This event is more complex but provides better performance for certain applications by allowing explicit control over when data is read from the stream:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2eb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2eb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> stream</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MyStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  highWaterMark</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">readable</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">count</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&gt;&gt; readable event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  while</span><span style=""color:#D8DEE9FF""> ((</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">read</span><span style=""color:#D8DEE9FF"">()) </span><span style=""color:#81A1C1"">!==</span><span style=""color:#81A1C1""> null</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Process the chunk</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&gt;&gt; end event</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2eb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2eb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Here, the readable event is used to pull data from the stream as needed manually. The loop inside the readable event handler continues to read data from the stream buffer until it returns
  <code>
   null
  </code>
  , indicating that the buffer is temporarily empty or the stream has ended. Setting
  <code>
   highWaterMark
  </code>
  to 1 keeps the buffer size small, triggering the readable event more frequently and allowing more granular control over the data flow.
 </p>
 <p>
  With the previous code, you’ll get an output like
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 1</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">):-)</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 2</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 3</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 4</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#81A1C1""> end</span><span style=""color:#D8DEE9FF""> event</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Let’s try to digest that. When we attach the
  <code>
   on('readable')
  </code>
  event, it makes a first call to
  <code>
   read()
  </code>
  because that is what might trigger the emission of a
  <code>
   readable
  </code>
  event. After the emission of said event, we call
  <code>
   read
  </code>
  on the first iteration of the
  <code>
   while
  </code>
  loop. That’s why we get the first two smileys in one row. After that, we keep calling
  <code>
   read
  </code>
  until
  <code>
   null
  </code>
  is pushed. Each call to
  <code>
   read
  </code>
  programs the emission of a new
  <code>
   readable
  </code>
  event, but as we are in “flow” mode (i.e., using the
  <code>
   readable
  </code>
  event), the emission is scheduled for the
  <code>
   nextTick
  </code>
  . That’s why we get them all at the end, when the synchronous code of the loop is finished.
 </p>
 <p>
  NOTE: You can try to run the code with
  <code>
   NODE_DEBUG=stream
  </code>
  to see that
  <code>
   emitReadable
  </code>
  is triggered after each
  <code>
   push
  </code>
  .
 </p>
 <p>
  If we want to see readable events called before each smiley, we can wrap
  <code>
   push
  </code>
  into a
  <code>
   setImmediate
  </code>
  or
  <code>
   process.nextTick
  </code>
  like this:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R2rb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R2rb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyStream</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Readable</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  #count </span><span style=""color:#81A1C1"">=</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  _read</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">size</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">    setImmediate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">:-)</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">      if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">++this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">#count</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 5</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">        return</span><span style=""color:#81A1C1""> this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R2rb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R2rb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  And we’ll get:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 1</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 2</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 3</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 4</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 5</span></span>
<span class=""line""><span style=""color:#88C0D0"">:-</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> readable event: 6</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#81A1C1""> end</span><span style=""color:#D8DEE9FF""> event</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""writable"">
  <a href=""#writable"">
   Writable
  </a>
 </h3>
 <p>
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  streams are useful for creating files, uploading data, or any task that involves sequentially outputting data. While readable streams provide the source of data, writable streams in Node.js act as the destination for your data. Typical examples of writable streams in the Node.js API are
  <a href=""https://nodejs.org/api/fs.html#class-fswritestream"">
   <code>
    fs.WriteStream
   </code>
  </a>
  ,
  <a href=""https://nodejs.org/api/process.html#processstdout"">
   <code>
    process.stdout
   </code>
  </a>
  , and
  <a href=""https://nodejs.org/api/process.html#processstderr"">
   <code>
    process.stderr
   </code>
  </a>
  .
 </p>
 <h4 id=""key-methods-and-events-in-writable-streams"">
  <a href=""#key-methods-and-events-in-writable-streams"">
   Key Methods and Events in Writable Streams
  </a>
 </h4>
 <ul>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
     <code>
      .write()
     </code>
    </a>
   </strong>
   : This method is used to write a chunk of data to the stream. It handles the data by buffering it up to a defined limit (highWaterMark), and returns a boolean indicating whether more data can be written immediately.
  </li>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#writableendchunk-encoding-callback"">
     <code>
      .end()
     </code>
    </a>
   </strong>
   : This method signals the end of the data writing process. It signals the stream to complete the write operation and potentially perform any necessary cleanup.
  </li>
 </ul>
 <h4 id=""creating-a-writable"">
  <a href=""#creating-a-writable"">
   Creating a Writable
  </a>
 </h4>
 <p>
  Here's an example of creating a writable stream that converts all incoming data to uppercase before writing it to the standard output:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3cb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3cb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Writable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> once</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:events</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyStream</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Writable</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  constructor</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    super</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> highWaterMark</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 10</span><span style=""color:#707e99""> /* 10 bytes */</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#88C0D0"">  _write</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> encode</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">() </span><span style=""color:#81A1C1"">+</span><span style=""color:#ECEFF4""> '</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> stream</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MyStream</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1""> &lt;</span><span style=""color:#B48EAD""> 10</span><span style=""color:#81A1C1"">;</span><span style=""color:#D8DEE9""> i</span><span style=""color:#81A1C1"">++</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> waitDrain</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> !</span><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">hello</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">waitDrain</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&gt;&gt; wait drain</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">      await</span><span style=""color:#88C0D0""> once</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">drain</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">end</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">world</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Call the async function</span></span>
<span class=""line""><span style=""color:#88C0D0"">main</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3cb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3cb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  In this code,
  <code>
   MyStream
  </code>
  is a custom
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream with a buffer capacity (
  <a href=""https://nodejs.org/api/stream.html#stream_buffering"">
   <code>
    highWaterMark
   </code>
  </a>
  ) of 10 bytes. It overrides the
  <a href=""https://nodejs.org/api/stream.html#writable_writechunk-encoding-callback"">
   <code>
    _write
   </code>
  </a>
  method to convert data to uppercase before writing it out.
 </p>
 <p>
  The loop attempts to write hello ten times to the stream. If the buffer fills up (
  <code>
   waitDrain
  </code>
  becomes
  <code>
   true
  </code>
  ), it waits for a
  <a href=""https://nodejs.org/api/stream.html#stream_event_drain"">
   <code>
    drain
   </code>
  </a>
  event before continuing, ensuring we do not overwhelm the stream's buffer.
 </p>
 <p>
  The output will be:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> wait drain</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> wait drain</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> wait drain</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> wait drain</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#81A1C1"">&gt;&gt;</span><span style=""color:#D8DEE9FF""> wait drain</span></span>
<span class=""line""><span style=""color:#88C0D0"">HELLO</span></span>
<span class=""line""><span style=""color:#88C0D0"">WORLD</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""duplex"">
  <a href=""#duplex"">
   Duplex
  </a>
 </h3>
 <p>
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Duplex
   </code>
  </a>
  streams implement both the readable and writable interfaces.
 </p>
 <h4 id=""key-methods-and-events-in-duplex-streams"">
  <a href=""#key-methods-and-events-in-duplex-streams"">
   Key Methods and Events in Duplex Streams
  </a>
 </h4>
 <p>
  Duplex streams implement all the methods and events described in Readable and Writable Streams.
 </p>
 <p>
  A good example of a duplex stream is the
  <code>
   Socket
  </code>
  class in the
  <code>
   net
  </code>
  module:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R3vb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R3vb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> net</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:net</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Create a TCP server</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> server</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> net</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createServer</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">socket</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  socket</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Hello from server!</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  socket</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Client says: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">  // Handle client disconnection</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  socket</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Client disconnected</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Start the server on port 8080</span></span>
<span class=""line""><span style=""color:#D8DEE9"">server</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">listen</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#B48EAD"">8080</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Server listening on port 8080</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R3vb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R3vb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The previous code will open a TCP socket on port 8080, send
  <code>
   Hello from server!
  </code>
  to any connecting client, and log any data received.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R42b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R42b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> net</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:net</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Connect to the server at localhost:8080</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> client</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> net</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createConnection</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> port</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 8080</span><span style=""color:#ECEFF4""> },</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  client</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Hello from client!</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">client</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Server says: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Handle the server closing the connection</span></span>
<span class=""line""><span style=""color:#D8DEE9"">client</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">end</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Disconnected from server</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R42b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R42b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The previous code will connect to the TCP socket, send a
  <code>
   Hello from client
  </code>
  message, and log any received data.
 </p>
 <h3 id=""transform"">
  <a href=""#transform"">
   Transform
  </a>
 </h3>
 <p>
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Transform
   </code>
  </a>
  streams are duplex streams, where the output is computed based on the input. As the name suggests, they are usually used between a readable and a writable stream to transform the data as it passes through.
 </p>
 <h4 id=""key-methods-and-events-in-transform-streams"">
  <a href=""#key-methods-and-events-in-transform-streams"">
   Key Methods and Events in Transform Streams
  </a>
 </h4>
 <p>
  Apart from all the methods and events in Duplex Streams, there is:
 </p>
 <ul>
  <li>
   <strong>
    <a href=""https://nodejs.org/api/stream.html#transform_transformchunk-encoding-callback"">
     <code>
      _transform
     </code>
    </a>
   </strong>
   : This function is called internally to handle the flow of data between the readable and writable parts. This MUST NOT be called by application code.
  </li>
 </ul>
 <h4 id=""creating-a-transform-stream"">
  <a href=""#creating-a-transform-stream"">
   Creating a Transform Stream
  </a>
 </h4>
 <p>
  To create a new transform stream, we can pass an
  <code>
   options
  </code>
  object to the
  <code>
   Transform
  </code>
  constructor, including a
  <code>
   transform
  </code>
  function that handles how the output data is computed from the input data using the
  <code>
   push
  </code>
  method.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R4jb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R4jb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Transform</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> upper</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Transform</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  transform</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> enc</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    cb</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R4jb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R4jb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  This stream will take any input and output it in uppercase.
 </p>
 <h2 id=""how-to-operate-with-streams"">
  <a href=""#how-to-operate-with-streams"">
   How to operate with streams
  </a>
 </h2>
 <p>
  When working with streams, we usually want to read from a source and write to a destination, possibly needing some transformation of the data in between. The following sections will cover different ways to do so.
 </p>
 <h3 id=""pipe"">
  <a href=""#pipe"">
   <code>
    .pipe()
   </code>
  </a>
 </h3>
 <p>
  The
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_pipe_destination_options"">
   <code>
    .pipe()
   </code>
  </a>
  method concatenates one readable stream to a writable (or transform) stream. Although this seems like a simple way to achieve our goal, it delegates all error handling to the programmer, making it difficult to get it right.
 </p>
 <p>
  The following example shows a pipe trying to output the current file in uppercase to the console.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R50b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R50b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Transform</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> errorCount</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> upper</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Transform</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  transform</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> enc</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">errorCount</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 10</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">      return</span><span style=""color:#88C0D0""> cb</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">BOOM!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    errorCount</span><span style=""color:#81A1C1"">++;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    cb</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> readStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">__filename</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> highWaterMark</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> writeStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">readStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">upper</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">writeStream</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">readStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Readable stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">upper</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Transform stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">upper</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#A3BE8C"">Error in transform stream:</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">message</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">writeStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Writable stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R50b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R50b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  After writing 10 characters,
  <code>
   upper
  </code>
  will return an error in the callback, which will cause the stream to close. However, the other streams won’t be notified, resulting in memory leaks. The output will be:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">CONST</span><span style=""color:#A3BE8C""> FS</span><span style=""color:#A3BE8C""> =</span></span>
<span class=""line""><span style=""color:#88C0D0"">Error</span><span style=""color:#A3BE8C""> in</span><span style=""color:#A3BE8C""> transform</span><span style=""color:#A3BE8C""> stream:</span><span style=""color:#A3BE8C""> BOOM!</span></span>
<span class=""line""><span style=""color:#88C0D0"">Transform</span><span style=""color:#A3BE8C""> stream</span><span style=""color:#A3BE8C""> closed</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <h3 id=""pipeline"">
  <a href=""#pipeline"">
   <code>
    pipeline()
   </code>
  </a>
 </h3>
 <p>
  To avoid the pitfalls and low-level complexity of the
  <code>
   .pipe()
  </code>
  method, in most cases, it is recommended to use the
  <a href=""https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback"">
   <code>
    pipeline()
   </code>
  </a>
  method. This method is a safer and more robust way to pipe streams together, handling errors and cleanup automatically.
 </p>
 <p>
  The following example demonstrates how using
  <code>
   pipeline()
  </code>
  prevents the pitfalls of the previous example:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R5bb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R5bb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Transform</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> errorCount</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 0</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> upper</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Transform</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  transform</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> enc</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> cb</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">errorCount</span><span style=""color:#81A1C1""> ===</span><span style=""color:#B48EAD""> 10</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">      return</span><span style=""color:#88C0D0""> cb</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">new</span><span style=""color:#88C0D0""> Error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">BOOM!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    errorCount</span><span style=""color:#81A1C1"">++;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    cb</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> readStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">__filename</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> highWaterMark</span><span style=""color:#ECEFF4"">:</span><span style=""color:#B48EAD""> 1</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> writeStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">readStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Readable stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">upper</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#EBCB8B"">\n</span><span style=""color:#A3BE8C"">Transform stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">writeStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">close</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Writable stream closed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">pipeline</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">readStream</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> upper</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> writeStream</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">    return</span><span style=""color:#D8DEE9""> console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline error:</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">message</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline succeeded</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R5bb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5bb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  In this case, all streams will be closed with the following output:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">CONST</span><span style=""color:#A3BE8C""> FS</span><span style=""color:#A3BE8C""> =</span></span>
<span class=""line""><span style=""color:#88C0D0"">Transform</span><span style=""color:#A3BE8C""> stream</span><span style=""color:#A3BE8C""> closed</span></span>
<span class=""line""><span style=""color:#88C0D0"">Writable</span><span style=""color:#A3BE8C""> stream</span><span style=""color:#A3BE8C""> closed</span></span>
<span class=""line""><span style=""color:#88C0D0"">Pipeline</span><span style=""color:#A3BE8C""> error:</span><span style=""color:#A3BE8C""> BOOM!</span></span>
<span class=""line""><span style=""color:#88C0D0"">Readable</span><span style=""color:#A3BE8C""> stream</span><span style=""color:#A3BE8C""> closed</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  The
  <a href=""https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback"">
   <code>
    pipeline()
   </code>
  </a>
  method also has an
  <a href=""https://nodejs.org/api/stream.html#streampipelinesource-transforms-destination-options"">
   <code>
    async pipeline()
   </code>
  </a>
  version, which doesn’t accept a callback but instead returns a promise that is rejected if the pipeline fails.
 </p>
 <h3 id=""async-iterators"">
  <a href=""#async-iterators"">
   Async Iterators
  </a>
 </h3>
 <p>
  Async iterators are recommended as the standard way of interfacing with the Streams API. Compared to all the stream primitives in both the Web and Node.js, async iterators are easier to understand and use, contributing to fewer bugs and more maintainable code. In recent versions of Node.js, async iterators have emerged as a more elegant and readable way to interact with streams. Building upon the foundation of events, async iterators provide a higher-level abstraction that simplifies stream consumption.
 </p>
 <p>
  In Node.js, all readable streams are asynchronous iterables. This means you can use the
  <code>
   for await...of
  </code>
  syntax to loop through the stream's data as it becomes available, handling each piece of data with the efficiency and simplicity of asynchronous code.
 </p>
 <h4 id=""benefits-of-using-async-iterators-with-streams"">
  <a href=""#benefits-of-using-async-iterators-with-streams"">
   Benefits of Using Async Iterators with Streams
  </a>
 </h4>
 <p>
  Using async iterators with streams simplifies the handling of asynchronous data flows in several ways:
 </p>
 <ul>
  <li>
   <strong>
    Enhanced Readability
   </strong>
   : The code structure is cleaner and more readable, particularly when dealing with multiple asynchronous data sources.
  </li>
  <li>
   <strong>
    Error Handling
   </strong>
   : Async iterators allow straightforward error handling using try/catch blocks, akin to regular asynchronous functions.
  </li>
  <li>
   <strong>
    Flow Control
   </strong>
   : They inherently manage backpressure, as the consumer controls the flow by awaiting the next piece of data, allowing for more efficient memory usage and processing.
  </li>
 </ul>
 <p>
  Async iterators offer a more modern and often more readable way to work with readable streams, especially when dealing with asynchronous data sources or when you prefer a more sequential, loop-based approach to data processing.
 </p>
 <p>
  Here's an example demonstrating the use of async iterators with a readable stream:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R62b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R62b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> pipeline</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">__filename</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#81A1C1"">    async</span><span style=""color:#81A1C1""> function*</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">source</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      for</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">let</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> of</span><span style=""color:#D8DEE9""> source</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">        yield</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">main</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R62b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R62b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  This code achieves the same result as the previous examples, without the need to define a new transform stream. The error from the previous examples has been removed for the sake of brevity. The async version of the pipeline has been used, and it should be wrapped in a
  <code>
   try...catch
  </code>
  block to handle possible errors.
 </p>
 <h3 id=""object-mode"">
  <a href=""#object-mode"">
   Object mode
  </a>
 </h3>
 <p>
  By default, streams can work with strings,
  <a href=""https://nodejs.org/api/buffer.html"">
   <code>
    Buffer
   </code>
  </a>
  ,
  <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"">
   <code>
    TypedArray
   </code>
  </a>
  , or
  <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView"">
   <code>
    DataView
   </code>
  </a>
  . If an arbitrary value different from these (e.g., an object) is pushed into a stream, a
  <code>
   TypeError
  </code>
  will be thrown. However, it is possible to work with objects by setting the
  <code>
   objectMode
  </code>
  option to
  <code>
   true
  </code>
  . This allows the stream to work with any JavaScript value, except for
  <code>
   null
  </code>
  , which is used to signal the end of the stream. This means you can
  <code>
   push
  </code>
  and
  <code>
   read
  </code>
  any value in a readable stream, and
  <code>
   write
  </code>
  any value in a writable stream.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R69b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R69b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Readable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> readable</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> Readable</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  objectMode</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  read</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> hello</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">world</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R69b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R69b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  When working in object mode, it is important to remember that the
  <code>
   highWaterMark
  </code>
  option refers to the number of objects, not bytes.
 </p>
 <h3 id=""backpressure"">
  <a href=""#backpressure"">
   Backpressure
  </a>
 </h3>
 <p>
  When using streams, it is important to make sure the producer doesn't overwhelm the consumer. For this, the backpressure mechanism is used in all streams in the Node.js API, and implementors are responsible for maintaining that behavior.
 </p>
 <p>
  In any scenario where the data buffer has exceeded the
  <a href=""https://nodejs.org/api/stream.html#stream_buffering"">
   <code>
    highWaterMark
   </code>
  </a>
  or the write queue is currently busy,
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  will return
  <code>
   false
  </code>
  .
 </p>
 <p>
  When a
  <code>
   false
  </code>
  value is returned, the backpressure system kicks in. It will pause the incoming
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream from sending any data and wait until the consumer is ready again. Once the data buffer is emptied, a
  <a href=""https://nodejs.org/api/stream.html#stream_event_drain"">
   <code>
    'drain'
   </code>
  </a>
  event will be emitted to resume the incoming data flow.
 </p>
 <p>
  For a deeper understanding of backpressure, check the
  <a href=""/en/learn/modules/backpressuring-in-streams"">
   <code>
    backpressure guide
   </code>
  </a>
  .
 </p>
 <h2 id=""streams-vs-web-streams"">
  <a href=""#streams-vs-web-streams"">
   Streams vs Web streams
  </a>
 </h2>
 <p>
  The stream concept is not exclusive to Node.js. In fact, Node.js has a different implementation of the stream concept called
  <a href=""https://nodejs.org/api/webstreams.html"">
   <code>
    Web Streams
   </code>
  </a>
  , which implements the
  <a href=""https://streams.spec.whatwg.org/"">
   <code>
    WHATWG Streams Standard
   </code>
  </a>
  . Although the concepts behind them are similar, it is important to be aware that they have different APIs and are not directly compatible.
 </p>
 <p>
  <a href=""https://nodejs.org/api/webstreams.html"">
   <code>
    Web Streams
   </code>
  </a>
  implement the
  <a href=""https://nodejs.org/api/webstreams.html#class-readablestream"">
   <code>
    ReadableStream
   </code>
  </a>
  ,
  <a href=""https://nodejs.org/api/webstreams.html#class-writablestream"">
   <code>
    WritableStream
   </code>
  </a>
  , and
  <a href=""https://nodejs.org/api/webstreams.html#class-transformstream"">
   <code>
    TransformStream
   </code>
  </a>
  classes, which are homologous to Node.js's
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  ,
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  , and
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Transform
   </code>
  </a>
  streams.
 </p>
 <h3 id=""interoperability-of-streams-and-web-streams"">
  <a href=""#interoperability-of-streams-and-web-streams"">
   Interoperability of streams and Web Streams
  </a>
 </h3>
 <p>
  Node.js provides utility functions to convert to/from Web Streams and Node.js streams. These functions are implemented as
  <code>
   toWeb
  </code>
  and
  <code>
   fromWeb
  </code>
  methods in each stream class.
 </p>
 <p>
  The following example in the
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Duplex
   </code>
  </a>
  class demonstrates how to work with both readable and writable streams converted to Web Streams:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R72b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R72b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Duplex</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> duplex</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> Duplex</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  read</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">world</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#88C0D0"">  write</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> encoding</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">writable</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> readable</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> writable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> Duplex</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toWeb</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">duplex</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">writable</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">getWriter</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">hello</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">readable</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">getReader</span><span style=""color:#D8DEE9FF"">()</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">read</span><span style=""color:#D8DEE9FF"">()</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  .</span><span style=""color:#88C0D0"">then</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">result</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">readable</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> result</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">value</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R72b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R72b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  The helper functions are useful if you need to return a Web Stream from a Node.js module or vice versa. For regular consumption of streams, async iterators enable seamless interaction with both Node.js and Web Streams.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R75b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R75b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> body</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> fetch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">https://nodejs.org/api/stream.html</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  await</span><span style=""color:#88C0D0""> pipeline</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    body</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#81A1C1"">    new</span><span style=""color:#88C0D0""> TextDecoderStream</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#81A1C1"">    async</span><span style=""color:#81A1C1""> function*</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">source</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      for</span><span style=""color:#81A1C1""> await</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> of</span><span style=""color:#D8DEE9""> source</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">        yield</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toUpperCase</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    },</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">  )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">main</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">catch</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">error</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R75b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R75b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  Be aware that the fetch body is a
  <code>
   ReadableStream&lt;Uint8Array&gt;
  </code>
  , and therefore a
  <a href=""https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream"">
   <code>
    TextDecoderStream
   </code>
  </a>
  is needed to work with chunks as strings.
 </p>
 <p>
  This work is derived from content published by
  <a href=""https://github.com/mcollina"">
   Matteo Collina
  </a>
  in
  <a href=""https://blog.platformatic.dev/a-guide-to-reading-and-writing-nodejs-streams"">
   Platformatic's Blog
  </a>
  .
 </p>
</main>
"
Modules,Backpressuring in Streams,"<main>
 <h1 id=""backpressuring-in-streams"">
  <a href=""#backpressuring-in-streams"">
   Backpressuring in Streams
  </a>
 </h1>
 <p>
  There is a general problem that occurs during data handling called
  <a href=""https://en.wikipedia.org/wiki/Backpressure_routing"">
   <code>
    backpressure
   </code>
  </a>
  and describes a buildup of data behind a buffer during data
transfer. When the receiving end of the transfer has complex operations, or is
slower for whatever reason, there is a tendency for data from the incoming
source to accumulate, like a clog.
 </p>
 <p>
  To solve this problem, there must be a delegation system in place to ensure a
smooth flow of data from one source to another. Different communities have
resolved this issue uniquely to their programs, Unix pipes and TCP sockets are
good examples of this, and are often referred to as
  <em>
   flow control
  </em>
  . In
Node.js, streams have been the adopted solution.
 </p>
 <p>
  The purpose of this guide is to further detail what backpressure is, and how
exactly streams address this in Node.js' source code. The second part of
the guide will introduce suggested best practices to ensure your application's
code is safe and optimized when implementing streams.
 </p>
 <p>
  We assume a little familiarity with the general definition of
  <a href=""https://en.wikipedia.org/wiki/Backpressure_routing"">
   <code>
    backpressure
   </code>
  </a>
  ,
  <a href=""https://nodejs.org/api/buffer.html"">
   <code>
    Buffer
   </code>
  </a>
  , and
  <a href=""https://nodejs.org/api/events.html"">
   <code>
    EventEmitters
   </code>
  </a>
  in Node.js, as well as
some experience with
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  . If you haven't read through those docs,
it's not a bad idea to take a look at the API documentation first, as it will
help expand your understanding while reading this guide.
 </p>
 <h2 id=""the-problem-with-data-handling"">
  <a href=""#the-problem-with-data-handling"">
   The Problem with Data Handling
  </a>
 </h2>
 <p>
  In a computer system, data is transferred from one process to another through
pipes, sockets, and signals. In Node.js, we find a similar mechanism called
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  . Streams are great! They do so much for Node.js and almost every
part of the internal codebase utilizes that module. As a developer, you
are more than encouraged to use them too!
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rfb9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rfb9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> readline</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:readline</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// process.stdin and process.stdout are both instances of Streams.</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> rl</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> readline</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createInterface</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  input</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdin</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  output</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">stdout</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">rl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">question</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Why should you use streams? </span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> answer</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Maybe it's </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">answer</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">, maybe it's because they are awesome! :)</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">  rl</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">close</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rfb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rfb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  A good example of why the backpressure mechanism implemented through streams is
a great optimization can be demonstrated by comparing the internal system tools
from Node.js'
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  implementation.
 </p>
 <p>
  In one scenario, we will take a large file (approximately ~9 GB) and compress it
using the familiar
  <a href=""https://linux.die.net/man/1/zip"">
   <code>
    zip(1)
   </code>
  </a>
  tool.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>zip</span><span> </span><span>The.Matrix.1080p.mkv</span></span>
</code></pre>
 </div>
 <p>
  While that will take a few minutes to complete, in another shell we may run
a script that takes Node.js' module
  <a href=""https://nodejs.org/api/zlib.html"">
   <code>
    zlib
   </code>
  </a>
  , that wraps around another
compression tool,
  <a href=""https://linux.die.net/man/1/gzip"">
   <code>
    gzip(1)
   </code>
  </a>
  .
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rob9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rob9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> gzip</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:zlib</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createGzip</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> inp</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> out</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createWriteStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv.gz</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">inp</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">gzip</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">out</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rob9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rob9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  To test the results, try opening each compressed file. The file compressed by
the
  <a href=""https://linux.die.net/man/1/zip"">
   <code>
    zip(1)
   </code>
  </a>
  tool will notify you the file is corrupt, whereas the
compression finished by
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  will decompress without error.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   In this example, we use
   <code>
    .pipe()
   </code>
   to get the data source from one end
to the other. However, notice there are no proper error handlers attached. If
a chunk of data were to fail to be properly received, the
   <code>
    Readable
   </code>
   source or
   <code>
    gzip
   </code>
   stream will not be destroyed.
   <a href=""https://github.com/mafintosh/pump"">
    <code>
     pump
    </code>
   </a>
   is a utility tool that would
properly destroy all the streams in a pipeline if one of them fails or closes,
and is a must-have in this case!
  </p>
 </blockquote>
 <p>
  <a href=""https://github.com/mafintosh/pump"">
   <code>
    pump
   </code>
  </a>
  is only necessary for Node.js 8.x or earlier, as for Node.js 10.x
or later version,
  <a href=""https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback"">
   <code>
    pipeline
   </code>
  </a>
  is introduced to replace for
  <a href=""https://github.com/mafintosh/pump"">
   <code>
    pump
   </code>
  </a>
  .
This is a module method to pipe between streams forwarding errors and properly
cleaning up and providing a callback when the pipeline is complete.
 </p>
 <p>
  Here is an example of using pipeline:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R11b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R11b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> zlib</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:zlib</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Use the pipeline API to easily pipe a series of streams</span></span>
<span class=""line""><span style=""color:#707e99"">// together and get notified when the pipeline is fully done.</span></span>
<span class=""line""><span style=""color:#707e99"">// A pipeline to gzip a potentially huge video file efficiently:</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">pipeline</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  zlib</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createGzip</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createWriteStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv.gz</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  err</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline failed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1""> else</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline succeeded</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R11b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R11b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  You can also use the
  <a href=""https://nodejs.org/api/stream.html#streampipelinesource-transforms-destination-options"">
   <code>
    stream/promises
   </code>
  </a>
  module to use pipeline with
  <code>
   async
  </code>
  /
  <code>
   await
  </code>
  :
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R14b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R14b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> pipeline</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream/promises</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> fs</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:fs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> zlib</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:zlib</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> run</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  try</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    await</span><span style=""color:#88C0D0""> pipeline</span><span style=""color:#D8DEE9FF"">(</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createReadStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      zlib</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createGzip</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      fs</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">createWriteStream</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">The.Matrix.1080p.mkv.gz</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    )</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline succeeded</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#81A1C1""> catch</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">err</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">error</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Pipeline failed</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> err</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R14b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R14b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h2 id=""too-much-data-too-quickly"">
  <a href=""#too-much-data-too-quickly"">
   Too Much Data, Too Quickly
  </a>
 </h2>
 <p>
  There are instances where a
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream might give data to the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  much too quickly — much more than the consumer can handle!
 </p>
 <p>
  When that occurs, the consumer will begin to queue all the chunks of data for
later consumption. The write queue will get longer and longer, and because of
this more data must be kept in memory until the entire process has been completed.
 </p>
 <p>
  Writing to a disk is a lot slower than reading from a disk, thus, when we are
trying to compress a file and write it to our hard disk, backpressure will
occur because the write disk will not be able to keep up with the speed from
the read.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// Secretly the stream is saying: ""whoa, whoa! hang on, this is way too much!""</span></span>
<span class=""line""><span style=""color:#707e99"">// Data will begin to build up on the read side of the data buffer as</span></span>
<span class=""line""><span style=""color:#707e99"">// `write` tries to keep up with the incoming data flow.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">inp</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">gzip</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">outputFile</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is why a backpressure mechanism is important. If a backpressure system was
not present, the process would use up your system's memory, effectively slowing
down other processes, and monopolizing a large part of your system until
completion.
 </p>
 <p>
  This results in a few things:
 </p>
 <ul>
  <li>
   Slowing down all other current processes
  </li>
  <li>
   A very overworked garbage collector
  </li>
  <li>
   Memory exhaustion
  </li>
 </ul>
 <p>
  In the following examples, we will take out the
  <a href=""https://github.com/nodejs/node/blob/55c42bc6e5602e5a47fb774009cfe9289cb88e71/lib/_stream_writable.js#L239"">
   return value
  </a>
  of the
  <code>
   .write()
  </code>
  function and change it to
  <code>
   true
  </code>
  , which effectively disables
backpressure support in Node.js core. In any reference to 'modified' binary,
we are talking about running the
  <code>
   node
  </code>
  binary without the
  <code>
   return ret;
  </code>
  line,
and instead with the replaced
  <code>
   return true;
  </code>
  .
 </p>
 <h2 id=""excess-drag-on-garbage-collection"">
  <a href=""#excess-drag-on-garbage-collection"">
   Excess Drag on Garbage Collection
  </a>
 </h2>
 <p>
  Let's take a look at a quick benchmark. Using the same example from above, we
ran a few time trials to get a median time for both binaries.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>trial</span><span> </span><span>(#)</span><span> </span><span></span><span> </span><span>|</span><span> </span><span>`node`</span><span> </span><span>binary</span><span> </span><span>(ms)</span><span> </span><span>|</span><span> </span><span>modified</span><span> </span><span>`node`</span><span> </span><span>binary</span><span> </span><span>(ms)</span></span>
<span class=""line""><span>=================================================================</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>56924</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>55011</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>2</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>52686</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>55869</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>59479</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>54043</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>4</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>54473</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>55229</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>5</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>52933</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>59723</span></span>
<span class=""line""><span>=================================================================</span></span>
<span class=""line""><span>average</span><span> </span><span>time:</span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>55299</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>55975</span></span>
</code></pre>
 </div>
 <p>
  Both take around a minute to run, so there's not much of a difference at all,
but let's take a closer look to confirm whether our suspicions are correct. We
use the Linux tool
  <a href=""https://dtrace.org/about/"">
   <code>
    dtrace
   </code>
  </a>
  to evaluate what's happening with the V8 garbage
collector.
 </p>
 <p>
  The GC (garbage collector) measured time indicates the intervals of a full cycle
of a single sweep done by the garbage collector:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>approx.</span><span> </span><span>time</span><span> </span><span>(ms)</span><span> </span><span>|</span><span> </span><span>GC</span><span> </span><span>(ms)</span><span> </span><span>|</span><span> </span><span>modified</span><span> </span><span>GC</span><span> </span><span>(ms)</span></span>
<span class=""line""><span>=================================================</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>40</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>2</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>170</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>300</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>*</span></span>
<span class=""line""><span></span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>39000</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>6</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>26</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>42000</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>6</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>21</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>47000</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>5</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>32</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>50000</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>8</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>28</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>54000</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>6</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>35</span></span>
</code></pre>
 </div>
 <p>
  While the two processes start the same and seem to work the GC at the same
rate, it becomes evident that after a few seconds with a properly working
backpressure system in place, it spreads the GC load across consistent
intervals of 4-8 milliseconds until the end of the data transfer.
 </p>
 <p>
  However, when a backpressure system is not in place, the V8 garbage collection
starts to drag out. The normal binary called the GC fires approximately
  <strong>
   75
  </strong>
  times in a minute, whereas, the modified binary fires only
  <strong>
   36
  </strong>
  times.
 </p>
 <p>
  This is the slow and gradual debt accumulating from growing memory usage. As
data gets transferred, without a backpressure system in place, more memory is
being used for each chunk transfer.
 </p>
 <p>
  The more memory that is being allocated, the more the GC has to take care of in
one sweep. The bigger the sweep, the more the GC needs to decide what can be
freed up, and scanning for detached pointers in a larger memory space will
consume more computing power.
 </p>
 <h2 id=""memory-exhaustion"">
  <a href=""#memory-exhaustion"">
   Memory Exhaustion
  </a>
 </h2>
 <p>
  To determine the memory consumption of each binary, we've clocked each process
with
  <code>
   /usr/bin/time -lp sudo ./node ./backpressure-example/zlib.js
  </code>
  individually.
 </p>
 <p>
  This is the output on the normal binary:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>Respecting</span><span> </span><span>the</span><span> </span><span>return</span><span> </span><span>value</span><span> </span><span>of</span><span> </span><span>.write()</span></span>
<span class=""line""><span>=============================================</span></span>
<span class=""line""><span>real</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>58.88</span></span>
<span class=""line""><span>user</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>56.79</span></span>
<span class=""line""><span>sys</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>8.79</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>87810048</span><span> </span><span></span><span> </span><span>maximum</span><span> </span><span>resident</span><span> </span><span>set</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>shared</span><span> </span><span>memory</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>unshared</span><span> </span><span>data</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>unshared</span><span> </span><span>stack</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>19427</span><span> </span><span></span><span> </span><span>page</span><span> </span><span>reclaims</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3134</span><span> </span><span></span><span> </span><span>page</span><span> </span><span>faults</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>swaps</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>5</span><span> </span><span></span><span> </span><span>block</span><span> </span><span>input</span><span> </span><span>operations</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>194</span><span> </span><span></span><span> </span><span>block</span><span> </span><span>output</span><span> </span><span>operations</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>messages</span><span> </span><span>sent</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>messages</span><span> </span><span>received</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span><span> </span><span></span><span> </span><span>signals</span><span> </span><span>received</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>12</span><span> </span><span></span><span> </span><span>voluntary</span><span> </span><span>context</span><span> </span><span>switches</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>666037</span><span> </span><span></span><span> </span><span>involuntary</span><span> </span><span>context</span><span> </span><span>switches</span></span>
</code></pre>
 </div>
 <p>
  The maximum byte size occupied by virtual memory turns out to be approximately
87.81 mb.
 </p>
 <p>
  And now changing the
  <a href=""https://github.com/nodejs/node/blob/55c42bc6e5602e5a47fb774009cfe9289cb88e71/lib/_stream_writable.js#L239"">
   return value
  </a>
  of the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  function, we get:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>Without</span><span> </span><span>respecting</span><span> </span><span>the</span><span> </span><span>return</span><span> </span><span>value</span><span> </span><span>of</span><span> </span><span>.write():</span></span>
<span class=""line""><span>==================================================</span></span>
<span class=""line""><span>real</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>54.48</span></span>
<span class=""line""><span>user</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>53.15</span></span>
<span class=""line""><span>sys</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>7.43</span></span>
<span class=""line""><span>1524965376</span><span> </span><span></span><span> </span><span>maximum</span><span> </span><span>resident</span><span> </span><span>set</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>shared</span><span> </span><span>memory</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>unshared</span><span> </span><span>data</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>average</span><span> </span><span>unshared</span><span> </span><span>stack</span><span> </span><span>size</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>373617</span><span> </span><span></span><span> </span><span>page</span><span> </span><span>reclaims</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>3139</span><span> </span><span></span><span> </span><span>page</span><span> </span><span>faults</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>swaps</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>18</span><span> </span><span></span><span> </span><span>block</span><span> </span><span>input</span><span> </span><span>operations</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>199</span><span> </span><span></span><span> </span><span>block</span><span> </span><span>output</span><span> </span><span>operations</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>messages</span><span> </span><span>sent</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>0</span><span> </span><span></span><span> </span><span>messages</span><span> </span><span>received</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>1</span><span> </span><span></span><span> </span><span>signals</span><span> </span><span>received</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>25</span><span> </span><span></span><span> </span><span>voluntary</span><span> </span><span>context</span><span> </span><span>switches</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>629566</span><span> </span><span></span><span> </span><span>involuntary</span><span> </span><span>context</span><span> </span><span>switches</span></span>
</code></pre>
 </div>
 <p>
  The maximum byte size occupied by virtual memory turns out to be approximately
1.52 gb.
 </p>
 <p>
  Without streams in place to delegate the backpressure, there is an order of
magnitude greater of memory space being allocated - a huge margin of
difference between the same process!
 </p>
 <p>
  This experiment shows how optimized and cost-effective Node.js' backpressure
mechanism is for your computing system. Now, let's do a breakdown of how it
works!
 </p>
 <h2 id=""how-does-backpressure-resolve-these-issues"">
  <a href=""#how-does-backpressure-resolve-these-issues"">
   How Does Backpressure Resolve These Issues?
  </a>
 </h2>
 <p>
  There are different functions to transfer data from one process to another. In
Node.js, there is an internal built-in function called
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_pipe_destination_options"">
   <code>
    .pipe()
   </code>
  </a>
  . There are
  <a href=""https://github.com/sindresorhus/awesome-nodejs#streams"">
   other packages
  </a>
  out there you can use too! Ultimately though, at the basic
level of this process, we have two separate components: the
  <em>
   source
  </em>
  of the
data and the
  <em>
   consumer
  </em>
  .
 </p>
 <p>
  When
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_pipe_destination_options"">
   <code>
    .pipe()
   </code>
  </a>
  is called from the source, it signals to the consumer that
there is data to be transferred. The pipe function helps to set up the
appropriate backpressure closures for the event triggers.
 </p>
 <p>
  In Node.js the source is a
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream and the consumer is the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream (both of these may be interchanged with a
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Duplex
   </code>
  </a>
  or
a
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Transform
   </code>
  </a>
  stream, but that is out-of-scope for this guide).
 </p>
 <p>
  The moment that backpressure is triggered can be narrowed exactly to the return
value of a
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  's
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  function. This return value is
determined by a few conditions, of course.
 </p>
 <p>
  In any scenario where the data buffer has exceeded the
  <a href=""https://nodejs.org/api/stream.html#stream_buffering"">
   <code>
    highWaterMark
   </code>
  </a>
  or
the write queue is currently busy,
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  will return
  <code>
   false
  </code>
  .
 </p>
 <p>
  When a
  <code>
   false
  </code>
  value is returned, the backpressure system kicks in. It will
pause the incoming
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream from sending any data and wait until
the consumer is ready again. Once the data buffer is emptied, a
  <a href=""https://nodejs.org/api/stream.html#stream_event_drain"">
   <code>
    'drain'
   </code>
  </a>
  event will be emitted and resume the incoming data flow.
 </p>
 <p>
  Once the queue is finished, backpressure will allow data to be sent again.
The space in memory that was being used will free itself up and prepare for the
next batch of data.
 </p>
 <p>
  This effectively allows a fixed amount of memory to be used at any given
time for a
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_pipe_destination_options"">
   <code>
    .pipe()
   </code>
  </a>
  function. There will be no memory leakage, and no
infinite buffering, and the garbage collector will only have to deal with
one area in memory!
 </p>
 <p>
  So, if backpressure is so important, why have you (probably) not heard of it?
Well, the answer is simple: Node.js does all of this automatically for you.
 </p>
 <p>
  That's so great! But also not so great when we are trying to understand how to
implement our custom streams.
 </p>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   In most machines, there is a byte size that determines when a buffer
is full (which will vary across different machines). Node.js allows you to set
your custom
   <a href=""https://nodejs.org/api/stream.html#stream_buffering"">
    <code>
     highWaterMark
    </code>
   </a>
   , but commonly, the default is set to 16kb
(16384, or 16 for objectMode streams). In instances where you might
want to raise that value, go for it, but do so with caution!
  </p>
 </blockquote>
 <h2 id=""lifecycle-of-pipe"">
  <a href=""#lifecycle-of-pipe"">
   Lifecycle of
   <code>
    .pipe()
   </code>
  </a>
 </h2>
 <p>
  To achieve a better understanding of backpressure, here is a flow-chart on the
lifecycle of a
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream being
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_pipe_destination_options"">
   piped
  </a>
  into a
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+===================+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x--&gt;</span><span> </span><span></span><span> </span><span>Piping</span><span> </span><span>functions</span><span> </span><span></span><span> </span><span></span><span> </span><span>+--&gt;</span><span> </span><span></span><span> </span><span></span><span> </span><span>src.pipe(dest)</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>are</span><span> </span><span>set</span><span> </span><span>up</span><span> </span><span>during</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|===================|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>the</span><span> </span><span>.pipe</span><span> </span><span>method.</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span>Event</span><span> </span><span>callbacks</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>+===============+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|-------------------|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span>Your</span><span> </span><span>Data</span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>They</span><span> </span><span>exist</span><span> </span><span>outside</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('close',</span><span> </span><span>cb)</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>+=======+=======+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>the</span><span> </span><span>data</span><span> </span><span>flow,</span><span> </span><span>but</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('data',</span><span> </span><span>cb)</span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>importantly</span><span> </span><span>attach</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('drain',</span><span> </span><span>cb)</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>events,</span><span> </span><span>and</span><span> </span><span>their</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('unpipe',</span><span> </span><span>cb)</span><span> </span><span>|</span></span>
<span class=""line""><span>+---------v---------+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>x</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>respective</span><span> </span><span>callbacks.</span><span> </span><span>|</span><span> </span><span>.on('error',</span><span> </span><span>cb)</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span>|</span><span> </span><span></span><span> </span><span>Readable</span><span> </span><span>Stream</span><span> </span><span></span><span> </span><span>+----+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('finish',</span><span> </span><span>cb)</span><span> </span><span>|</span></span>
<span class=""line""><span>+-^-------^-------^-+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span>.on('end',</span><span> </span><span>cb)</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-------------------+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-------------------+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+=================+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+----&gt;</span><span> </span><span></span><span> </span><span>Writable</span><span> </span><span>Stream</span><span> </span><span></span><span> </span><span>+---------&gt;</span><span> </span><span></span><span> </span><span>.write(chunk)</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-------------------+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+=======+=========+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+------------------v---------+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-&gt;</span><span> </span><span>if</span><span> </span><span>(!chunk)</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>Is</span><span> </span><span>this</span><span> </span><span>chunk</span><span> </span><span>too</span><span> </span><span>big?</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>emit</span><span> </span><span>.end();</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>Is</span><span> </span><span>the</span><span> </span><span>queue</span><span> </span><span>busy?</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-&gt;</span><span> </span><span>else</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+-------+----------------+---+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>emit</span><span> </span><span>.write();</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+--v---+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+---v---+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^-----------------------------------&lt;</span><span> </span><span></span><span> </span><span>No</span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span>Yes</span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+------+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+---v---+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>emit</span><span> </span><span>.pause();</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+=================+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>^---------------^-----------------------+</span><span> </span><span></span><span> </span><span>return</span><span> </span><span>false;</span><span> </span><span></span><span> </span><span>&lt;-----+---+</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+=================+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>when</span><span> </span><span>queue</span><span> </span><span>is</span><span> </span><span>empty</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+============+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span>^------------^-----------------------&lt;</span><span> </span><span></span><span> </span><span>Buffering</span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|============|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+&gt;</span><span> </span><span>emit</span><span> </span><span>.drain();</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span>^Buffer^</span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+&gt;</span><span> </span><span>emit</span><span> </span><span>.resume();</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+------------+</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span>^Buffer^</span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+------------+</span><span> </span><span></span><span> </span><span></span><span> </span><span>add</span><span> </span><span>chunk</span><span> </span><span>to</span><span> </span><span>queue</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>|</span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>&lt;---^---------------------&lt;</span></span>
<span class=""line""><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span></span><span> </span><span>+============+</span></span>
</code></pre>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   If you are setting up a pipeline to chain together a few streams to
manipulate your data, you will most likely be implementing
   <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
    <code>
     Transform
    </code>
   </a>
   stream.
  </p>
 </blockquote>
 <p>
  In this case, your output from your
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream will enter in the
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Transform
   </code>
  </a>
  and will pipe into the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  .
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#D8DEE9"">Readable</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">Transformable</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pipe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">Writable</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Backpressure will be automatically applied, but note that both the incoming and
outgoing
  <code>
   highWaterMark
  </code>
  of the
  <a href=""https://nodejs.org/api/stream.html#stream_duplex_and_transform_streams"">
   <code>
    Transform
   </code>
  </a>
  stream may be manipulated and
will affect the backpressure system.
 </p>
 <h2 id=""backpressure-guidelines"">
  <a href=""#backpressure-guidelines"">
   Backpressure Guidelines
  </a>
 </h2>
 <p>
  Since
  <a href=""https://nodejs.org/docs/v0.10.0/"">
   Node.js v0.10
  </a>
  , the
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  class has offered the ability to
modify the behavior of the
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_read_size"">
   <code>
    .read()
   </code>
  </a>
  or
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  by using the
underscore version of these respective functions (
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_read_size_1"">
   <code>
    ._read()
   </code>
  </a>
  and
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_writable_write_chunk_encoding_callback_1"">
   <code>
    ._write()
   </code>
  </a>
  ).
 </p>
 <p>
  There are guidelines documented for
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_implementing_a_readable_stream"">
   implementing Readable streams
  </a>
  and
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_implementing_a_writable_stream"">
   implementing Writable streams
  </a>
  . We will assume you've read these over, and
the next section will go a little bit more in-depth.
 </p>
 <h2 id=""rules-to-abide-by-when-implementing-custom-streams"">
  <a href=""#rules-to-abide-by-when-implementing-custom-streams"">
   Rules to Abide By When Implementing Custom Streams
  </a>
 </h2>
 <p>
  The golden rule of streams is
  <strong>
   to always respect backpressure
  </strong>
  . What
constitutes as best practice is non-contradictory practice. So long as you are
careful to avoid behaviors that conflict with internal backpressure support,
you can be sure you're following good practice.
 </p>
 <p>
  In general,
 </p>
 <ol>
  <li>
   Never
   <code>
    .push()
   </code>
   if you are not asked.
  </li>
  <li>
   Never call
   <code>
    .write()
   </code>
   after it returns false but wait for 'drain' instead.
  </li>
  <li>
   Streams changes between different Node.js versions, and the library you use.
Be careful and test things.
  </li>
 </ol>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   In regards to point 3, an incredibly useful package for building
browser streams is
   <a href=""https://github.com/nodejs/readable-stream"">
    <code>
     readable-stream
    </code>
   </a>
   . Rodd Vagg has written a
   <a href=""https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html"">
    great blog post
   </a>
   describing the utility of this library. In short, it
provides a type of automated graceful degradation for
   <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
    <code>
     Readable
    </code>
   </a>
   streams,
and supports older versions of browsers and Node.js.
  </p>
 </blockquote>
 <h2 id=""rules-specific-to-readable-streams"">
  <a href=""#rules-specific-to-readable-streams"">
   Rules specific to Readable Streams
  </a>
 </h2>
 <p>
  So far, we have taken a look at how
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  affects backpressure and have
focused much on the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream. Because of Node.js' functionality,
data is technically flowing downstream from
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  to
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  .
However, as we can observe in any transmission of data, matter, or energy, the
source is just as important as the destination, and the
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  stream
is vital to how backpressure is handled.
 </p>
 <p>
  Both these processes rely on one another to communicate effectively, if
the
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  ignores when the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream asks for it to stop
sending in data, it can be just as problematic as when the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  's return
value is incorrect.
 </p>
 <p>
  So, as well as respecting the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  return, we must also respect the
return value of
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_push_chunk_encoding"">
   <code>
    .push()
   </code>
  </a>
  used in the
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_read_size_1"">
   <code>
    ._read()
   </code>
  </a>
  method. If
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_push_chunk_encoding"">
   <code>
    .push()
   </code>
  </a>
  returns a
  <code>
   false
  </code>
  value, the stream will stop reading from the
source. Otherwise, it will continue without pause.
 </p>
 <p>
  Here is an example of bad practice using
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_push_chunk_encoding"">
   <code>
    .push()
   </code>
  </a>
  :
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// This is problematic as it completely ignores the return value from the push</span></span>
<span class=""line""><span style=""color:#707e99"">// which may be a signal for backpressure from the destination stream!</span></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyReadable</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Readable</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  _read</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">size</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    let</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    while</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">null</span><span style=""color:#81A1C1""> !==</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> getNextChunk</span><span style=""color:#D8DEE9FF"">())) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#81A1C1"">      this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Additionally, from outside the custom stream, there are pitfalls to ignoring
backpressure. In this counter-example of good practice, the application's code
forces data through whenever it is available (signaled by the
  <a href=""https://nodejs.org/api/stream.html#stream_event_data"">
   <code>
    'data'
   </code>
   event
  </a>
  ):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// This ignores the backpressure mechanisms Node.js has set in place,</span></span>
<span class=""line""><span style=""color:#707e99"">// and unconditionally pushes through data, regardless if the</span></span>
<span class=""line""><span style=""color:#707e99"">// destination stream is ready for it or not.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">readable</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> writable</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Here's an example of using
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_push_chunk_encoding"">
   <code>
    .push()
   </code>
  </a>
  with a Readable stream.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R57b9utjfb:-trigger-cjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R57b9utjfb:-content-cjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-cjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> Readable</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> require</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node:stream</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Create a custom Readable stream</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> myReadableStream</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Readable</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">  objectMode</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">  read</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">size</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // Push some data onto the stream</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> message</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">Hello, world!</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">push</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">null</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Mark the end of the stream</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Consume the stream</span></span>
<span class=""line""><span style=""color:#D8DEE9"">myReadableStream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">on</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> chunk</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  console</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">log</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Output:</span></span>
<span class=""line""><span style=""color:#707e99"">// { message: 'Hello, world!' }</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R57b9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R57b9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  In this example, we create a custom Readable stream that pushes a single object
onto the stream using
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_push_chunk_encoding"">
   <code>
    .push()
   </code>
  </a>
  . The
  <a href=""https://nodejs.org/docs/latest/api/stream.html#stream_readable_read_size_1"">
   <code>
    ._read()
   </code>
  </a>
  method is called when the stream is ready
to consume data, and in this case, we immediately push some data onto the stream and
mark the end of the stream by pushing null.
 </p>
 <p>
  We then consume the stream by listening for the 'data' event and logging each chunk of
data that is pushed onto the stream. In this case, we only push a single chunk of data
onto the stream, so we only see one log message.
 </p>
 <h2 id=""rules-specific-to-writable-streams"">
  <a href=""#rules-specific-to-writable-streams"">
   Rules specific to Writable Streams
  </a>
 </h2>
 <p>
  Recall that a
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  may return true or false dependent on some
conditions. Luckily for us, when building our own
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  stream,
the
  <a href=""https://en.wikipedia.org/wiki/Finite-state_machine"">
   <code>
    stream state machine
   </code>
  </a>
  will handle our callbacks and determine when to
handle backpressure and optimize the flow of data for us.
 </p>
 <p>
  However, when we want to use a
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  directly, we must respect the
  <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
   <code>
    .write()
   </code>
  </a>
  return value and pay close attention to these conditions:
 </p>
 <ul>
  <li>
   If the write queue is busy,
   <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
    <code>
     .write()
    </code>
   </a>
   will return false.
  </li>
  <li>
   If the data chunk is too large,
   <a href=""https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback"">
    <code>
     .write()
    </code>
   </a>
   will return false (the limit
is indicated by the variable,
   <a href=""https://nodejs.org/api/stream.html#stream_buffering"">
    <code>
     highWaterMark
    </code>
   </a>
   ).
  </li>
 </ul>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// This writable is invalid because of the async nature of JavaScript callbacks.</span></span>
<span class=""line""><span style=""color:#707e99"">// Without a return statement for each callback prior to the last,</span></span>
<span class=""line""><span style=""color:#707e99"">// there is a great chance multiple callbacks will be called.</span></span>
<span class=""line""><span style=""color:#81A1C1"">class</span><span style=""color:#8FBCBB""> MyWritable</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Writable</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  _write</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> encoding</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> callback</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">indexOf</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">a</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">&gt;=</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#88C0D0"">callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    else</span><span style=""color:#81A1C1""> if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">toString</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">indexOf</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">b</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">&gt;=</span><span style=""color:#B48EAD""> 0</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#88C0D0"">callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// The proper way to write this would be:</span></span>
<span class=""line""><span style=""color:#81A1C1"">if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">contains</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">a</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#81A1C1"">return</span><span style=""color:#88C0D0""> callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">chunk</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">contains</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">b</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)) </span><span style=""color:#81A1C1"">return</span><span style=""color:#88C0D0""> callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">callback</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  There are also some things to look out for when implementing
  <a href=""https://nodejs.org/api/stream.html#stream_writable_writev_chunks_callback"">
   <code>
    ._writev()
   </code>
  </a>
  .
The function is coupled with
  <a href=""https://nodejs.org/api/stream.html#writablecork"">
   <code>
    .cork()
   </code>
  </a>
  , but there is a common mistake when
writing:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#707e99"">// Using .uncork() twice here makes two calls on the C++ layer, rendering the</span></span>
<span class=""line""><span style=""color:#707e99"">// cork/uncork technique useless.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">cork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">hello </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">world </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">uncork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">cork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">from </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Matteo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">uncork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// The correct way to write this is to utilize process.nextTick(), which fires</span></span>
<span class=""line""><span style=""color:#707e99"">// on the next event loop.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">cork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">hello </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">world </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">doUncork</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> ws</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">cork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">from </span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">ws</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">write</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Matteo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">process</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">nextTick</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">doUncork</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> ws</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// As a global function.</span></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> doUncork</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">stream</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  stream</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">uncork</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  <a href=""https://nodejs.org/api/stream.html#writablecork"">
   <code>
    .cork()
   </code>
  </a>
  can be called as many times as we want, we just need to be careful to
call
  <a href=""https://nodejs.org/api/stream.html#stream_writable_uncork"">
   <code>
    .uncork()
   </code>
  </a>
  the same amount of times to make it flow again.
 </p>
 <h2 id=""conclusion"">
  <a href=""#conclusion"">
   Conclusion
  </a>
 </h2>
 <p>
  Streams are an often-used module in Node.js. They are important to the internal
structure, and for developers, to expand and connect across the Node.js modules
ecosystem.
 </p>
 <p>
  Hopefully, you will now be able to troubleshoot and safely code your own
  <a href=""https://nodejs.org/api/stream.html#stream_writable_streams"">
   <code>
    Writable
   </code>
  </a>
  and
  <a href=""https://nodejs.org/api/stream.html#stream_readable_streams"">
   <code>
    Readable
   </code>
  </a>
  streams with backpressure in mind, and share
your knowledge with colleagues and friends.
 </p>
 <p>
  Be sure to read up more on
  <a href=""https://nodejs.org/api/stream.html"">
   <code>
    Stream
   </code>
  </a>
  for other API functions to help
improve and unleash your streaming capabilities when building an application with
Node.js.
 </p>
</main>
"
Diagnostics,User Journey,"<main>
 <h1 id=""user-journey"">
  <a href=""#user-journey"">
   User Journey
  </a>
 </h1>
 <p>
  These diagnostics guides were created by the
  <a href=""https://github.com/nodejs/diagnostics"">
   Diagnostics Working Group
  </a>
  with the
objective of providing guidance when diagnosing an issue in a user's
application.
 </p>
 <p>
  The documentation project is organized based on user journey. Those journeys
are a coherent set of step-by-step procedures that a user can follow to
root-cause their issues.
 </p>
</main>
"
Diagnostics,Memory,"<main>
 <h1 id=""memory"">
  <a href=""#memory"">
   Memory
  </a>
 </h1>
 <p>
  In this document you can learn about how to debug memory related issues.
 </p>
 <h2 id=""my-process-runs-out-of-memory"">
  <a href=""#my-process-runs-out-of-memory"">
   My process runs out of memory
  </a>
 </h2>
 <p>
  Node.js
  <em>
   (JavaScript)
  </em>
  is a garbage collected language, so having memory
leaks is possible through retainers. As Node.js applications are usually
multi-tenant, business critical, and long-running, providing an accessible and
efficient way of finding a memory leak is essential.
 </p>
 <h3 id=""symptoms"">
  <a href=""#symptoms"">
   Symptoms
  </a>
 </h3>
 <p>
  The user observes continuously increasing memory usage
  <em>
   (can be fast or slow,
over days or even weeks)
  </em>
  then sees the process crashing and restarting by the
process manager. The process is maybe running slower than before and the
restarts cause some requests to fail
  <em>
   (load balancer responds with 502)
  </em>
  .
 </p>
 <h3 id=""side-effects"">
  <a href=""#side-effects"">
   Side Effects
  </a>
 </h3>
 <ul>
  <li>
   Process restarts due to the memory exhaustion and requests are dropped
on the floor
  </li>
  <li>
   Increased GC activity leads to higher CPU usage and slower response time
   <!-- -->
   <ul>
    <li>
     GC blocking the Event Loop causing slowness
    </li>
   </ul>
  </li>
  <li>
   Increased memory swapping slows down the process (GC activity)
  </li>
  <li>
   May not have enough available memory to get a Heap Snapshot
  </li>
 </ul>
 <h2 id=""my-process-utilizes-memory-inefficiently"">
  <a href=""#my-process-utilizes-memory-inefficiently"">
   My process utilizes memory inefficiently
  </a>
 </h2>
 <h3 id=""symptoms-1"">
  <a href=""#symptoms-1"">
   Symptoms
  </a>
 </h3>
 <p>
  The application uses an unexpected amount of memory and/or we observe elevated
garbage collector activity.
 </p>
 <h3 id=""side-effects-1"">
  <a href=""#side-effects-1"">
   Side Effects
  </a>
 </h3>
 <ul>
  <li>
   An elevated number of page faults
  </li>
  <li>
   Higher GC activity and CPU usage
  </li>
 </ul>
 <h2 id=""debugging"">
  <a href=""#debugging"">
   Debugging
  </a>
 </h2>
 <p>
  Most memory issues can be solved by determining how much space our specific
type of objects take and what variables are preventing them from being garbage
collected. It can also help to know the allocation pattern of our program over
time.
 </p>
 <ul>
  <li>
   <a href=""/en/learn/diagnostics/memory/using-heap-profiler/"">
    Using Heap Profiler
   </a>
  </li>
  <li>
   <a href=""/en/learn/diagnostics/memory/using-heap-snapshot/"">
    Using Heap Snapshot
   </a>
  </li>
  <li>
   <a href=""/en/learn/diagnostics/memory/using-gc-traces"">
    GC Traces
   </a>
  </li>
 </ul>
</main>
"
Diagnostics,Live Debugging,"<main>
 <h1 id=""live-debugging"">
  <a href=""#live-debugging"">
   Live Debugging
  </a>
 </h1>
 <p>
  In this document you can learn about how to live debug a Node.js process.
 </p>
 <h2 id=""my-application-doesnt-behave-as-expected"">
  <a href=""#my-application-doesnt-behave-as-expected"">
   My application doesn’t behave as expected
  </a>
 </h2>
 <h3 id=""symptoms"">
  <a href=""#symptoms"">
   Symptoms
  </a>
 </h3>
 <p>
  The user may observe that the application doesn’t provide the expected output
for certain inputs, for example, an HTTP server returns a JSON response where
certain fields are empty. Various things can go wrong in the process but in this
use case, we are mainly focused on the application logic and its correctness.
 </p>
 <h3 id=""debugging"">
  <a href=""#debugging"">
   Debugging
  </a>
 </h3>
 <p>
  In this use case, the user would like to understand the code path that our
application executes for a certain trigger like an incoming HTTP request. They
may also want to step through the code and control the execution as well as
inspect what values variables hold in memory.
 </p>
 <ul>
  <li>
   <a href=""/en/learn/diagnostics/live-debugging/using-inspector"">
    Using Inspector
   </a>
  </li>
 </ul>
</main>
"
Diagnostics,Poor Performance,"<main>
 <h1 id=""poor-performance"">
  <a href=""#poor-performance"">
   Poor Performance
  </a>
 </h1>
 <p>
  In this document you can learn about how to profile a Node.js process.
 </p>
 <h2 id=""my-application-has-a-poor-performance"">
  <a href=""#my-application-has-a-poor-performance"">
   My application has a poor performance
  </a>
 </h2>
 <h3 id=""symptoms"">
  <a href=""#symptoms"">
   Symptoms
  </a>
 </h3>
 <p>
  My applications latency is high and I have already confirmed that the bottleneck
is not my dependencies like databases and downstream services. So I suspect that
my application spends significant time to run code or process information.
 </p>
 <p>
  You are satisfied with your application performance in general but would like to
understand which part of our application can be improved to run faster or more
efficient. It can be useful when we want to improve the user experience or save
computation cost.
 </p>
 <h3 id=""debugging"">
  <a href=""#debugging"">
   Debugging
  </a>
 </h3>
 <p>
  In this use-case, we are interested in code pieces that use more CPU cycles than
the others. When we do this locally, we usually try to optimize our code.
 </p>
 <p>
  This document provides two simple ways to profile a Node.js application:
 </p>
 <ul>
  <li>
   <a href=""/en/learn/getting-started/profiling/"">
    Using V8 Sampling Profiler
   </a>
  </li>
  <li>
   <a href=""/en/learn/diagnostics/poor-performance/using-linux-perf"">
    Using Linux Perf
   </a>
  </li>
 </ul>
</main>
"
Diagnostics,Flame Graphs,"<main>
 <h1 id=""flame-graphs"">
  <a href=""#flame-graphs"">
   Flame Graphs
  </a>
 </h1>
 <h2 id=""whats-a-flame-graph-useful-for"">
  <a href=""#whats-a-flame-graph-useful-for"">
   What's a flame graph useful for?
  </a>
 </h2>
 <p>
  Flame graphs are a way of visualizing CPU time spent in functions. They can help you pin down where you spend too much time doing synchronous operations.
 </p>
 <h2 id=""how-to-create-a-flame-graph"">
  <a href=""#how-to-create-a-flame-graph"">
   How to create a flame graph
  </a>
 </h2>
 <p>
  You might have heard creating a flame graph for Node.js is difficult, but that's not true (anymore).
Solaris vms are no longer needed for flame graphs!
 </p>
 <p>
  Flame graphs are generated from
  <code>
   perf
  </code>
  output, which is not a node-specific tool. While it's the most powerful way to visualize CPU time spent, it may have issues with how JavaScript code is optimized in Node.js 8 and above. See
  <a href=""#perf-output-issues"">
   perf output issues
  </a>
  section below.
 </p>
 <h3 id=""use-a-pre-packaged-tool"">
  <a href=""#use-a-pre-packaged-tool"">
   Use a pre-packaged tool
  </a>
 </h3>
 <p>
  If you want a single step that produces a flame graph locally, try
  <a href=""https://www.npmjs.com/package/0x"">
   0x
  </a>
 </p>
 <p>
  For diagnosing production deployments, read these notes:
  <a href=""https://github.com/davidmarkclements/0x/blob/master/docs/production-servers.md"">
   0x production servers
  </a>
  .
 </p>
 <h3 id=""create-a-flame-graph-with-system-perf-tools"">
  <a href=""#create-a-flame-graph-with-system-perf-tools"">
   Create a flame graph with system perf tools
  </a>
 </h3>
 <p>
  The purpose of this guide is to show the steps involved in creating a flame graph and keep you in control of each step.
 </p>
 <p>
  If you want to understand each step better, take a look at the sections that follow where we go into more detail.
 </p>
 <p>
  Now let's get to work.
 </p>
 <ol>
  <li>
   <p>
    Install
    <code>
     perf
    </code>
    (usually available through the linux-tools-common package if not already installed)
   </p>
  </li>
  <li>
   <p>
    Try running
    <code>
     perf
    </code>
    - it might complain about missing kernel modules, install them too
   </p>
  </li>
  <li>
   <p>
    Run node with perf enabled (see
    <a href=""#perf-output-issues"">
     perf output issues
    </a>
    for tips specific to Node.js versions)
   </p>
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>perf</span><span> </span><span>record</span><span> </span><span>-e</span><span> </span><span>cycles:u</span><span> </span><span>-g</span><span> </span><span>--</span><span> </span><span>node</span><span> </span><span>--perf-basic-prof</span><span> </span><span>--interpreted-frames-native-stack</span><span> </span><span>app.js</span></span>
</code></pre>
   </div>
  </li>
  <li>
   <p>
    Disregard warnings unless they're saying you can't run perf due to missing packages; you may get some warnings about not being able to access kernel module samples which you're not after anyway.
   </p>
  </li>
  <li>
   <p>
    Run
    <code>
     perf script &gt; perfs.out
    </code>
    to generate the data file you'll visualize in a moment. It's useful to
    <a href=""#filtering-out-nodejs-internal-functions"">
     apply some cleanup
    </a>
    for a more readable graph
   </p>
  </li>
  <li>
   <p>
    Clone Brendan Gregg's FlameGraph tools:
    <a href=""https://github.com/brendangregg/FlameGraph"">
     https://github.com/brendangregg/FlameGraph
    </a>
   </p>
  </li>
  <li>
   <p>
    Run
    <code>
     cat perfs.out | ./FlameGraph/stackcollapse-perf.pl | ./FlameGraph/flamegraph.pl --colors=js &gt; profile.svg
    </code>
   </p>
  </li>
 </ol>
 <p>
  Now open the flame graph file in your favorite browser and watch it burn. It's color-coded so you can focus on the most saturated orange bars first. They're likely to represent CPU heavy functions.
 </p>
 <p>
  Worth mentioning - if you click an element of a flame graph a it will zoom-in on the section you clicked.
 </p>
 <h3 id=""using-perf-to-sample-a-running-process"">
  <a href=""#using-perf-to-sample-a-running-process"">
   Using
   <code>
    perf
   </code>
   to sample a running process
  </a>
 </h3>
 <p>
  This is great for recording flame graph data from an already running process that you don't want to interrupt. Imagine a production process with a hard to reproduce issue.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">perf</span><span style=""color:#A3BE8C""> record</span><span style=""color:#A3BE8C""> -F99</span><span style=""color:#A3BE8C""> -p</span><span style=""color:#ECEFF4""> `</span><span style=""color:#88C0D0"">pgrep</span><span style=""color:#A3BE8C""> -n node</span><span style=""color:#ECEFF4"">`</span><span style=""color:#88C0D0""> -g</span><span style=""color:#A3BE8C""> --</span><span style=""color:#A3BE8C""> sleep</span><span style=""color:#B48EAD""> 3</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  Wait, what is that
  <code>
   sleep 3
  </code>
  for? It's there to keep the perf running - despite
  <code>
   -p
  </code>
  option pointing to a different pid, the command needs to be executed on a process and end with it.
perf runs for the life of the command you pass to it, whether or not you're actually profiling that command.
  <code>
   sleep 3
  </code>
  ensures that perf runs for 3 seconds.
 </p>
 <p>
  Why is
  <code>
   -F
  </code>
  (profiling frequency) set to 99? It's a reasonable default. You can adjust if you want.
  <code>
   -F99
  </code>
  tells perf to take 99 samples per second, for more precision increase the value. Lower values should produce less output with less precise results. The precision you need depends on how long your CPU intensive functions really run. If you're looking for the reason for a noticeable slowdown, 99 frames per second should be more than enough.
 </p>
 <p>
  After you get that 3 second perf record, proceed with generating the flame graph with the last two steps from above.
 </p>
 <h3 id=""filtering-out-nodejs-internal-functions"">
  <a href=""#filtering-out-nodejs-internal-functions"">
   Filtering out Node.js internal functions
  </a>
 </h3>
 <p>
  Usually, you just want to look at the performance of your calls, so filtering out Node.js and V8 internal functions can make the graph much easier to read. You can clean up your perf file with:
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-bash"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#88C0D0"">sed</span><span style=""color:#A3BE8C""> -i</span><span style=""color:#A3BE8C""> -r</span><span style=""color:#EBCB8B""> \</span></span>
<span class=""line""><span style=""color:#A3BE8C"">  -e</span><span style=""color:#ECEFF4""> ""</span><span style=""color:#A3BE8C"">/( __libc_start| LazyCompile | v8::internal::| Builtin:| Stub:| LoadIC:|\[unknown\]| LoadPolymorphicIC:)/d</span><span style=""color:#ECEFF4"">""</span><span style=""color:#EBCB8B""> \</span></span>
<span class=""line""><span style=""color:#A3BE8C"">  -e</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">s/ LazyCompile:[*~]?/ /</span><span style=""color:#ECEFF4"">'</span><span style=""color:#EBCB8B""> \</span></span>
<span class=""line""><span style=""color:#A3BE8C"">  perfs.out</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    Shell
   </span>
  </div>
 </div>
 <p>
  If you read your flame graph and it seems odd, as if something is missing in the key function taking up most time, try generating your flame graph without the filters - maybe you got a rare case of an issue with Node.js itself.
 </p>
 <h3 id=""nodejss-profiling-options"">
  <a href=""#nodejss-profiling-options"">
   Node.js's profiling options
  </a>
 </h3>
 <p>
  <code>
   --perf-basic-prof-only-functions
  </code>
  and
  <code>
   --perf-basic-prof
  </code>
  are the two that are useful for debugging your JavaScript code. Other options are used for profiling Node.js itself, which is outside the scope of this guide.
 </p>
 <p>
  <code>
   --perf-basic-prof-only-functions
  </code>
  produces less output, so it's the option with the least overhead.
 </p>
 <h3 id=""why-do-i-need-them-at-all"">
  <a href=""#why-do-i-need-them-at-all"">
   Why do I need them at all?
  </a>
 </h3>
 <p>
  Well, without these options, you'll still get a flame graph, but with most bars labeled
  <code>
   v8::Function::Call
  </code>
  .
 </p>
 <h2 id=""perf-output-issues"">
  <a href=""#perf-output-issues"">
   <code>
    perf
   </code>
   output issues
  </a>
 </h2>
 <h3 id=""nodejs-8x-v8-pipeline-changes"">
  <a href=""#nodejs-8x-v8-pipeline-changes"">
   Node.js 8.x V8 pipeline changes
  </a>
 </h3>
 <p>
  Node.js 8.x and above ships with new optimizations to the JavaScript compilation pipeline in the V8 engine which makes function names/references unreachable for perf sometimes. (It's called Turbofan)
 </p>
 <p>
  The result is you might not get your function names right in the flame graph.
 </p>
 <p>
  You'll notice
  <code>
   ByteCodeHandler:
  </code>
  where you'd expect function names.
 </p>
 <p>
  <a href=""https://www.npmjs.com/package/0x"">
   0x
  </a>
  has some mitigations for that built in.
 </p>
 <p>
  For details see:
 </p>
 <ul>
  <li>
   <a href=""https://github.com/nodejs/benchmarking/issues/168"">
    https://github.com/nodejs/benchmarking/issues/168
   </a>
  </li>
  <li>
   <a href=""https://github.com/nodejs/diagnostics/issues/148#issuecomment-369348961"">
    https://github.com/nodejs/diagnostics/issues/148#issuecomment-369348961
   </a>
  </li>
 </ul>
 <h3 id=""nodejs-10"">
  <a href=""#nodejs-10"">
   Node.js 10+
  </a>
 </h3>
 <p>
  Node.js 10.x addresses the issue with Turbofan using the
  <code>
   --interpreted-frames-native-stack
  </code>
  flag.
 </p>
 <p>
  Run
  <code>
   node --interpreted-frames-native-stack --perf-basic-prof-only-functions
  </code>
  to get function names in the flame graph regardless of which pipeline V8 used to compile your JavaScript.
 </p>
 <h3 id=""broken-labels-in-the-flame-graph"">
  <a href=""#broken-labels-in-the-flame-graph"">
   Broken labels in the flame graph
  </a>
 </h3>
 <p>
  If you're seeing labels looking like this
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD"" dir=""ltr"" tabindex=""0""><code style=""font-family:monospace""><span class=""line""><span>node`_ZN2v88internal11interpreter17BytecodeGenerator15VisitStatementsEPNS0_8ZoneListIPNS0_9StatementEEE</span></span>
</code></pre>
 </div>
 <p>
  it means the Linux perf you're using was not compiled with demangle support, see
  <a href=""https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1396654"">
   https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1396654
  </a>
  for example
 </p>
 <h2 id=""examples"">
  <a href=""#examples"">
   Examples
  </a>
 </h2>
 <p>
  Practice capturing flame graphs yourself with
  <a href=""https://github.com/naugtur/node-example-flamegraph"">
   a flame graph exercise
  </a>
  !
 </p>
</main>
"
Test Runner,Discovering Node.js's test runner,"<main>
 <h1 id=""discovering-nodejss-test-runner"">
  <a href=""#discovering-nodejss-test-runner"">
   Discovering Node.js's test runner
  </a>
 </h1>
 <p>
  In this series of resources, we will discover how to use Node.js's test runner to test our code.
 </p>
 <h2 id=""what-is-a-test-runner"">
  <a href=""#what-is-a-test-runner"">
   What is a test runner?
  </a>
 </h2>
 <p>
  A test runner is a tool that allows you to run tests on your code. It will execute your tests and give you feedback on whether they pass or fail. It can also provide you with additional information such as code coverage.
 </p>
 <p>
  There are many test runners available for Node.js, but we will focus on the built-in test runner that comes with Node.js. It's cool because you don't need to install any additional dependencies to use it.
 </p>
 <h2 id=""why-test-your-code"">
  <a href=""#why-test-your-code"">
   Why test your code?
  </a>
 </h2>
 <p>
  Testing your code is important because it allows you to verify that your code works as expected. It helps you catch bugs early in the development process and ensures that your code is reliable and maintainable.
 </p>
 <h2 id=""running-tests-with-nodejs"">
  <a href=""#running-tests-with-nodejs"">
   Running tests with Node.js
  </a>
 </h2>
 <p>
  To run tests with Node.js, we recommend you to read the
  <a href=""https://nodejs.org/docs/latest/api/test.html#test-runner"">
   test runner documentation
  </a>
  .
 </p>
</main>
"
Test Runner,Using Node.js's test runner,"<main>
 <h1 id=""using-nodejss-test-runner"">
  <a href=""#using-nodejss-test-runner"">
   Using Node.js's test runner
  </a>
 </h1>
 <p>
  Node.js has a flexible and robust built-in test runner. This guide will show you how to set up and use it.
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R5b9utjfb:-trigger-text-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R5b9utjfb:-content-text-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-text"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span>example/</span></span>
<span class=""line""><span>  ├ …</span></span>
<span class=""line""><span>  ├ src/</span></span>
<span class=""line""><span>    ├ app/…</span></span>
<span class=""line""><span>    └ sw/…</span></span>
<span class=""line""><span>  └ test/</span></span>
<span class=""line""><span>    ├ globals/</span></span>
<span class=""line""><span>      ├ …</span></span>
<span class=""line""><span>      ├ IndexedDb.js</span></span>
<span class=""line""><span>      └ ServiceWorkerGlobalScope.js</span></span>
<span class=""line""><span>    ├ setup.mjs</span></span>
<span class=""line""><span>    ├ setup.units.mjs</span></span>
<span class=""line""><span>    └ setup.ui.mjs</span></span>
<span class=""line""><span></span></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      text
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R5b9utjfb:-trigger-bash-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5b9utjfb:-content-bash-1"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:R5b9utjfb:-trigger-json-2"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R5b9utjfb:-content-json-2"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    Note
   </strong>
   : globs require node v21+, and the globs must themselves be wrapped in quotes (without, you'll get different behaviour than expected, wherein it may first appear to be working but isn't).
  </p>
 </blockquote>
 <p>
  There are some things you always want, so put them in a base setup file like the following. This file will get imported by other, more bespoke setups.
 </p>
 <h2 id=""general-setup"">
  <a href=""#general-setup"">
   General setup
  </a>
 </h2>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> register</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:module</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">register</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">some-typescript-loader</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// TypeScript is supported hereafter</span></span>
<span class=""line""><span style=""color:#707e99"">// BUT other test/setup.*.mjs files still must be plain JavaScript!</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <!-- -->
 <p>
  Then for each setup, create a dedicated
  <code>
   setup
  </code>
  file (ensuring the base
  <code>
   setup.mjs
  </code>
  file is imported within each). There are a number of reasons to isolate the setups, but the most obvious reason is
  <a href=""https://en.wikipedia.org/wiki/You_aren't_gonna_need_it"">
   YAGNI
  </a>
  + performance: much of what you may be setting up are environment-specific mocks/stubs, which can be quite expensive and will slow down test runs. You want to avoid those costs (literal money you pay to CI, time waiting for tests to finish, etc) when you don't need them.
 </p>
 <p>
  Each example below was taken from real-world projects; they may not be appropriate/applicable to yours, but each demonstrate general concepts that are broadly applicable.
 </p>
 <h2 id=""dynamically-generating-test-cases"">
  <a href=""#dynamically-generating-test-cases"">
   Dynamically generating test cases
  </a>
 </h2>
 <p>
  Some times, you may want to dynamically generate test-cases. For instance, you want to test the same thing across a bunch of files. This is possible, albeit slightly arcane. You must use
  <code>
   test
  </code>
  (you cannot use
  <code>
   describe
  </code>
  ) +
  <code>
   testContext.test
  </code>
  :
 </p>
 <h3 id=""simple-example"">
  <a href=""#simple-example"">
   Simple example
  </a>
 </h3>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rqb9utjfb:-trigger-js-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rqb9utjfb:-content-js-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> test</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> detectOsInUserAgent</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">…</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> userAgents</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  {</span><span style=""color:#88C0D0""> ua</span><span style=""color:#ECEFF4"">:</span><span style=""color:#707e99""> /* … */</span><span style=""color:#ECEFF4"">,</span><span style=""color:#88C0D0""> os</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">WIN</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#707e99"">  // …</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">test</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Detect OS via user-agent</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> concurrency</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#D8DEE9""> t</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">const</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> os</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> ua</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF""> from userAgents) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    t</span><span style=""color:#D8DEE9FF"">.</span><span style=""color:#D8DEE9"">test</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">ua</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9FF""> () </span><span style=""color:#81A1C1"">=&gt;</span><span style=""color:#D8DEE9""> assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">equal</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#88C0D0"">detectOsInUserAgent</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">ua</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> os</span><span style=""color:#D8DEE9FF"">));</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">})</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rqb9utjfb:-trigger-js-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rqb9utjfb:-content-js-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <h3 id=""advanced-example"">
  <a href=""#advanced-example"">
   Advanced example
  </a>
 </h3>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:Rtb9utjfb:-trigger-js-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:Rtb9utjfb:-content-js-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> test</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> getWorkspacePJSONs</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./getWorkspacePJSONs.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> requiredKeywords</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9FF""> [</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">node.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">sliced bread</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">]</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">test</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Check package.jsons</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> concurrency</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#81A1C1""> async</span><span style=""color:#D8DEE9""> t</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> pjsons</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#88C0D0""> getWorkspacePJSONs</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  for</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> pjson</span><span style=""color:#81A1C1""> of</span><span style=""color:#D8DEE9""> pjsons</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#707e99"">    // ⚠️ `t.test`, NOT `test`</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    t</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">test</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">`</span><span style=""color:#A3BE8C"">Ensure fields are properly set: </span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">pjson</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">name</span><span style=""color:#81A1C1"">}</span><span style=""color:#ECEFF4"">`</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">partialDeepStrictEqual</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">pjson</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">keywords</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> requiredKeywords</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:Rtb9utjfb:-trigger-js-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rtb9utjfb:-content-js-1"" role=""tabpanel"" tabindex=""0"">
  </div>
  <div aria-labelledby=""radix-:Rtb9utjfb:-trigger-js-2"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:Rtb9utjfb:-content-js-2"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   <strong>
    Note
   </strong>
   : Prior to version 23.8.0, the setup is quite different because
   <code>
    testContext.test
   </code>
   was not automatically awaited.
  </p>
 </blockquote>
 <h2 id=""serviceworker-tests"">
  <a href=""#serviceworker-tests"">
   ServiceWorker tests
  </a>
 </h2>
 <p>
  <a href=""https://developer.mozilla.org/docs/Web/API/ServiceWorkerGlobalScope"">
   <code>
    ServiceWorkerGlobalScope
   </code>
  </a>
  contains very specific APIs that don't exist in other environments, and some of its APIs are seemingly similar to others (ex
  <code>
   fetch
  </code>
  ) but have augmented behaviour. You do not want these to spill into unrelated tests.
 </p>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> beforeEach</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> ServiceWorkerGlobalScope</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./globals/ServiceWorkerGlobalScope.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./setup.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 💡</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">beforeEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">globalSWBeforeEach</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> globalSWBeforeEach</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">self</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> ServiceWorkerGlobalScope</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> mock</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> it</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> onActivate</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./onActivate.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">ServiceWorker::onActivate()</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> globalSelf</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">self</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> claim</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">fn</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> mock__claim</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> matchAll</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">fn</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">async</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> mock__matchAll</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  class</span><span style=""color:#8FBCBB""> ActivateEvent</span><span style=""color:#81A1C1""> extends</span><span style=""color:#8FBCBB;font-weight:bold""> Event</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    constructor</span><span style=""color:#ECEFF4"">(</span><span style=""color:#81A1C1"">...</span><span style=""color:#D8DEE9"">args</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">      super</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">activate</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> ...</span><span style=""color:#D8DEE9"">args</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  before</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">self</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      clients</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> claim</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> matchAll</span><span style=""color:#ECEFF4""> },</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  after</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    global</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">self</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> globalSelf</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should claim all clients</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> async</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    await</span><span style=""color:#88C0D0""> onActivate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">new</span><span style=""color:#88C0D0""> ActivateEvent</span><span style=""color:#D8DEE9FF"">())</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">equal</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">claim</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">callCount</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">equal</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">matchAll</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">callCount</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 1</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""snapshot-tests"">
  <a href=""#snapshot-tests"">
   Snapshot tests
  </a>
 </h2>
 <p>
  These were popularised by Jest; now, many libraries implement such functionality, including Node.js as of v22.3.0. There are several use-cases such as verifying component rendering output and
  <a href=""https://en.wikipedia.org/wiki/Infrastructure_as_code"">
   Infrastructure as Code
  </a>
  config. The concept is the same regardless of use-case.
 </p>
 <p>
  There is no specific configuration
  <em>
   required
  </em>
  except enabling the feature via
  <a href="""">
   <code>
    --experimental-test-snapshots
   </code>
  </a>
  . But to demonstrate the optional configuration, you would probably add something like the following to one of your existing test config files.
 </p>
 <!-- -->
 <p>
  By default, node generates a filename that is incompatible with syntax highlighting detection:
  <code>
   .js.snapshot
  </code>
  . The generated file is actually a CJS file, so a more appropriate file name would end with
  <code>
   .snapshot.cjs
  </code>
  (or more succinctly
  <code>
   .snap.cjs
  </code>
  as below); this will also handle better in ESM projects.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> basename</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> dirname</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> extname</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> join</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:path</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> snapshot</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">snapshot</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">setResolveSnapshotPath</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">generateSnapshotPath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">/**</span></span>
<span class=""line""><span style=""color:#707e99""> * </span><span style=""color:#ECEFF4"">@</span><span style=""color:#8FBCBB"">param</span><span style=""color:#ECEFF4""> {</span><span style=""color:#707e99"">string</span><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9""> testFilePath</span><span style=""color:#707e99""> '/tmp/foo.test.js'</span></span>
<span class=""line""><span style=""color:#707e99""> * </span><span style=""color:#ECEFF4"">@</span><span style=""color:#8FBCBB"">returns</span><span style=""color:#ECEFF4""> {</span><span style=""color:#707e99"">string</span><span style=""color:#ECEFF4"">}</span><span style=""color:#707e99""> '/tmp/foo.test.snap.cjs'</span></span>
<span class=""line""><span style=""color:#707e99""> */</span></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> generateSnapshotPath</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">testFilePath</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> ext</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> extname</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">testFilePath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> filename</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> basename</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">testFilePath</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> ext</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> base</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> dirname</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">testFilePath</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#88C0D0""> join</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">base</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> `</span><span style=""color:#81A1C1"">${</span><span style=""color:#D8DEE9"">filename</span><span style=""color:#81A1C1"">}</span><span style=""color:#A3BE8C"">.snap.cjs</span><span style=""color:#ECEFF4"">`</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <!-- -->
 <p>
  The example below demonstrates snapshot testing with
  <a href=""https://testing-library.com/"">
   testing library
  </a>
  for UI components; note the two different ways of accessing
  <code>
   assert.snapshot
  </code>
  ):
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> it</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> prettyDOM</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">@testing-library/dom</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> render</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">@testing-library/react</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Any framework (ex svelte)</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> SomeComponent</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./SomeComponent.jsx</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;SomeComponent&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">  // For people preferring ""fat-arrow"" syntax, the following is probably better for consistency</span></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should render defaults when no props are provided</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> (</span><span style=""color:#D8DEE9"">t</span><span style=""color:#ECEFF4"">)</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> component</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> render</span><span style=""color:#D8DEE9FF"">(&lt;</span><span style=""color:#8FBCBB"">SomeComponent</span><span style=""color:#D8DEE9FF""> /&gt;)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">container</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">firstChild</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    t</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">snapshot</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#88C0D0"">prettyDOM</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">component</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should consume `foo` when provided</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> function</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> component</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> render</span><span style=""color:#D8DEE9FF"">(&lt;</span><span style=""color:#8FBCBB"">SomeComponent</span><span style=""color:#8FBCBB""> foo</span><span style=""color:#D8DEE9FF"">=</span><span style=""color:#ECEFF4"">""</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">""</span><span style=""color:#D8DEE9FF""> /&gt;)</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">container</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">firstChild</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">    this</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">snapshot</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#88C0D0"">prettyDOM</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">component</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">    // `this` works only when `function` is used (not ""fat arrow"").</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
 <blockquote class=""Blockquote_wrapper__4GnmJ"">
  <p>
   ⚠️
   <code>
    assert.snapshot
   </code>
   comes from the test's context (
   <code>
    t
   </code>
   or
   <code>
    this
   </code>
   ),
   <strong>
    not
   </strong>
   <code>
    node:assert
   </code>
   . This is necessary because the test context has access to scope that is impossible for
   <code>
    node:assert
   </code>
   (you would have to manually provide it every time
   <code>
    assert.snapshot
   </code>
   is used, like
   <code>
    snapshot(this, value)
   </code>
   , which would be rather tedious).
  </p>
 </blockquote>
 <h2 id=""unit-tests"">
  <a href=""#unit-tests"">
   Unit tests
  </a>
 </h2>
 <p>
  Unit tests are the simplest tests and generally require relatively nothing special. The vast majority of your tests will likely be unit tests, so it is important to keep this setup minimal because a small decrease to setup performance will magnify and cascade.
 </p>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> register</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:module</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./setup.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 💡</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">register</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">some-plaintext-loader</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#707e99"">// plain-text files like graphql can now be imported:</span></span>
<span class=""line""><span style=""color:#707e99"">// import GET_ME from 'get-me.gql'; GET_ME = '</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <!-- -->
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> it</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> Cat</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./Cat.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> Fish</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./Fish.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> Plastic</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./Plastic.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">Cat</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should eat fish</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> cat</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Cat</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> fish</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Fish</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">doesNotThrow</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> cat</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">eat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">fish</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should NOT eat plastic</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> cat</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Cat</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> plastic</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Plastic</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">throws</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> cat</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">eat</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">plastic</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h2 id=""user-interface-tests"">
  <a href=""#user-interface-tests"">
   User Interface tests
  </a>
 </h2>
 <p>
  UI tests generally require a DOM, and possibly other browser-specific APIs (such as
  <a href=""https://developer.mozilla.org/docs/Web/API/IndexedDB_API"">
   <code>
    IndexedDb
   </code>
  </a>
  used below). These tend to be very complicated and expensive to setup.
 </p>
 <!-- -->
 <p>
  If you use an API like
  <code>
   IndexedDb
  </code>
  but it's very isolated, a global mock like below is perhaps not the way to go. Instead, perhaps move this
  <code>
   beforeEach
  </code>
  into the specific test where
  <code>
   IndexedDb
  </code>
  will be accessed. Note that if the module accessing
  <code>
   IndexedDb
  </code>
  (or whatever) is itself widely accessed, either mock that module (probably the better option), or
  <em>
   do
  </em>
  keep this here.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-js"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> register</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:module</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// ⚠️ Ensure only 1 instance of JSDom is instantiated; multiples will lead to many 🤬</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> jsdom</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">global-jsdom</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./setup.units.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // 💡</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> IndexedDb</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./globals/IndexedDb.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">register</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">some-css-modules-loader</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">jsdom</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">undefined</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  url</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">https://test.example.com</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#707e99""> // ⚠️ Failing to specify this will likely lead to many 🤬</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// Example of how to decorate a global.</span></span>
<span class=""line""><span style=""color:#707e99"">// JSDOM's `history` does not handle navigation; the following handles most cases.</span></span>
<span class=""line""><span style=""color:#81A1C1"">const</span><span style=""color:#D8DEE9""> pushState</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">history</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">pushState</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">bind</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">history</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">history</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">pushState</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> mock_pushState</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> unused</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  pushState</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">data</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> unused</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> url</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">location</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">assign</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">url</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">beforeEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">globalUIBeforeEach</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> globalUIBeforeEach</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">  globalThis</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">indexedDb</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> IndexedDb</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <!-- -->
 <p>
  You can have 2 different levels of UI tests: a unit-like (wherein externals &amp; dependencies are mocked) and a more end-to-end (where only externals like IndexedDb are mocked but the rest of the chain is real). The former is generally the purer option, and the latter is generally deferred to a fully end-to-end automated usability test via something like
  <a href=""https://playwright.dev/"">
   Playwright
  </a>
  or
  <a href=""https://pptr.dev/"">
   Puppeteer
  </a>
  . Below is an example of the former.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-ts"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> before</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> it</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> screen</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">@testing-library/dom</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> render</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">@testing-library/react</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span><span style=""color:#707e99""> // Any framework (ex svelte)</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">// ⚠️ Note that SomeOtherComponent is NOT a static import;</span></span>
<span class=""line""><span style=""color:#707e99"">// this is necessary in order to facilitate mocking its own imports.</span></span>
<span class=""line""></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">&lt;SomeOtherComponent&gt;</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> SomeOtherComponent</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> calcSomeValue</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  before</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">async</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // ⚠️ Sequence matters: the mock must be set up BEFORE its consumer is imported.</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">    // Requires the `--experimental-test-module-mocks` be set.</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    calcSomeValue</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">module</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">./calcSomeValue.js</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#D8DEE9""> calcSomeValue</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">fn</span><span style=""color:#D8DEE9FF"">() </span><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    (</span><span style=""color:#ECEFF4"">{</span><span style=""color:#D8DEE9""> SomeOtherComponent</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#81A1C1""> import</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">./SomeOtherComponent.jsx</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">when calcSomeValue fails</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">    // This you would not want to handle with a snapshot because that would be brittle:</span></span>
<span class=""line""><span style=""color:#707e99"">    // When inconsequential updates are made to the error message,</span></span>
<span class=""line""><span style=""color:#707e99"">    // the snapshot test would erroneously fail</span></span>
<span class=""line""><span style=""color:#707e99"">    // (and the snapshot would need to be updated for no real value).</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">    it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should fail gracefully by displaying a pretty error</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      calcSomeValue</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">mockImplementation</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> mock__calcSomeValue</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span><span style=""color:#81A1C1""> return</span><span style=""color:#81A1C1""> null</span><span style=""color:#ECEFF4""> }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">      render</span><span style=""color:#D8DEE9FF"">(&lt;</span><span style=""color:#8FBCBB"">SomeOtherComponent</span><span style=""color:#D8DEE9FF"">&gt;)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">      const</span><span style=""color:#D8DEE9""> errorMessage</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> screen</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">queryByText</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">unable</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">      assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">ok</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">errorMessage</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    TypeScript
   </span>
  </div>
 </div>
</main>
"
Test Runner,Mocking in tests,"<main>
 <h1 id=""mocking-in-tests"">
  <a href=""#mocking-in-tests"">
   Mocking in tests
  </a>
 </h1>
 <p>
  Mocking is a means of creating a facsimile, a puppet. This is generally done in a
  <code>
   when 'a', do 'b'
  </code>
  manner of puppeteering. The idea is to limit the number of moving pieces and control things that ""don't matter"". ""mocks"" and ""stubs"" are technically different kinds of ""test doubles"". For the curious mind, a stub is a replacement that does nothing (a no-op) but track its invocation. A mock is a stub that also has a fake implementation (the
  <code>
   when 'a', do 'b'
  </code>
  ). Within this doc, the difference is unimportant, and stubs are referred to as mocks.
 </p>
 <p>
  Tests should be deterministic: runnable in any order, any number of times, and always produce the same result. Proper setup and mocking make this possible.
 </p>
 <p>
  Node.js provides many ways to mock various pieces of code.
 </p>
 <p>
  This articles deals with the following types of tests:
 </p>
 <table>
  <thead>
   <tr>
    <th style=""text-align:left"">
     type
    </th>
    <th style=""text-align:left"">
     description
    </th>
    <th style=""text-align:left"">
     example
    </th>
    <th style=""text-align:left"">
     mock candidates
    </th>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td style=""text-align:left"">
     unit
    </td>
    <td style=""text-align:left"">
     the smallest bit of code you can isolate
    </td>
    <td style=""text-align:left"">
     <code>
      const sum = (a, b) =&gt; a + b
     </code>
    </td>
    <td style=""text-align:left"">
     own code, external code, external system
    </td>
   </tr>
   <tr>
    <td style=""text-align:left"">
     component
    </td>
    <td style=""text-align:left"">
     a unit + dependencies
    </td>
    <td style=""text-align:left"">
     <code>
      const arithmetic = (op = sum, a, b) =&gt; ops[op](a, b)
     </code>
    </td>
    <td style=""text-align:left"">
     external code, external system
    </td>
   </tr>
   <tr>
    <td style=""text-align:left"">
     integration
    </td>
    <td style=""text-align:left"">
     components fitting together
    </td>
    <td style=""text-align:left"">
     -
    </td>
    <td style=""text-align:left"">
     external code, external system
    </td>
   </tr>
   <tr>
    <td style=""text-align:left"">
     end-to-end (e2e)
    </td>
    <td style=""text-align:left"">
     app + external data stores, delivery, etc
    </td>
    <td style=""text-align:left"">
     A fake user (ex a Playwright agent) literally using an app connected to real external systems.
    </td>
    <td style=""text-align:left"">
     none (do not mock)
    </td>
   </tr>
  </tbody>
 </table>
 <p>
  There are different schools of thought about when to mock and when not to mock, the broad strokes of which are outlined below.
 </p>
 <h2 id=""when-and-not-to-mock"">
  <a href=""#when-and-not-to-mock"">
   When and not to mock
  </a>
 </h2>
 <p>
  There are 3 main mock candidates:
 </p>
 <ul>
  <li>
   Own code
  </li>
  <li>
   External code
  </li>
  <li>
   External system
  </li>
 </ul>
 <h3 id=""own-code"">
  <a href=""#own-code"">
   Own code
  </a>
 </h3>
 <p>
  This is what your project controls.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> foo</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./foo.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">export</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> f</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> foo</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Here,
  <code>
   foo
  </code>
  is an ""own code"" dependency of
  <code>
   main
  </code>
  .
 </p>
 <h4 id=""why"">
  <a href=""#why"">
   Why
  </a>
 </h4>
 <p>
  For a true unit test of
  <code>
   main
  </code>
  ,
  <code>
   foo
  </code>
  should be mocked: you're testing that
  <code>
   main
  </code>
  works, not that
  <code>
   main
  </code>
  +
  <code>
   foo
  </code>
  work (that's a different test).
 </p>
 <h4 id=""why-not"">
  <a href=""#why-not"">
   Why not
  </a>
 </h4>
 <p>
  Mocking
  <code>
   foo
  </code>
  can be more trouble than worth, especially when
  <code>
   foo
  </code>
  is simple, well-tested, and rarely updated.
 </p>
 <p>
  Not mocking
  <code>
   foo
  </code>
  can be better because it's more authentic and increases coverage of
  <code>
   foo
  </code>
  (because
  <code>
   main
  </code>
  's tests will also verify
  <code>
   foo
  </code>
  ). This can, however, create noise: when
  <code>
   foo
  </code>
  breaks, a bunch of other tests will also break, so tracking down the problem is more tedious: if only the 1 test for the item ultimately responsible for the issue is failing, that's very easy to spot; whereas 100 tests failing creates a needle-in-a-haystack to find the real problem.
 </p>
 <h3 id=""external-code"">
  <a href=""#external-code"">
   External code
  </a>
 </h3>
 <p>
  This is what your project does not control.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> bar</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">bar</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">export</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> main</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  const</span><span style=""color:#D8DEE9""> f</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> bar</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  Here,
  <code>
   bar
  </code>
  is an external package, e.g. an npm dependency.
 </p>
 <p>
  Uncontroversially, for unit tests, this should always be mocked. For component and integration tests, whether to mock depends on what this is.
 </p>
 <h4 id=""why-1"">
  <a href=""#why-1"">
   Why
  </a>
 </h4>
 <p>
  Verifying that code that your project does not maintain works is not the goal of a unit test (and that code should have its own tests).
 </p>
 <h4 id=""why-not-1"">
  <a href=""#why-not-1"">
   Why not
  </a>
 </h4>
 <p>
  Sometimes, it's just not realistic to mock. For example, you would almost never mock a large framework such as react or angular (the medicine would be worse than the ailment).
 </p>
 <h3 id=""external-system"">
  <a href=""#external-system"">
   External system
  </a>
 </h3>
 <p>
  These are things like databases, environments (Chromium or Firefox for a web app, an operating system for a node app, etc), file systems, memory store, etc.
 </p>
 <p>
  Ideally, mocking these would not be necessary. Aside from somehow creating isolated copies for each case (usually very impractical due to cost, additional execution time, etc), the next best option is to mock. Without mocking, tests sabotage each other:
 </p>
 <div class=""Tabs_tabsRoot__iUO6B CodeTabs_root__nwOXE"" data-orientation=""horizontal"" dir=""ltr"">
  <div aria-orientation=""horizontal"" class=""Tabs_tabsList__7N46C"" data-orientation=""horizontal"" role=""tablist"" style=""outline:none"" tabindex=""-1"">
  </div>
  <div aria-labelledby=""radix-:R1vb9utjfb:-trigger-mjs-0"" data-orientation=""horizontal"" data-state=""active"" id=""radix-:R1vb9utjfb:-content-mjs-0"" role=""tabpanel"" style=""animation-duration:0s"" tabindex=""0"">
   <div class=""CodeBox_root__yVRmc"">
    <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> db</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">db</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">export</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> read</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> all</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> false</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  validate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> val</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  if</span><span style=""color:#D8DEE9FF""> (</span><span style=""color:#D8DEE9"">all</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#81A1C1"">return</span><span style=""color:#D8DEE9""> db</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">getAll</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> db</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">getOne</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">export</span><span style=""color:#81A1C1""> function</span><span style=""color:#88C0D0""> save</span><span style=""color:#ECEFF4"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> val</span><span style=""color:#ECEFF4"">)</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  validate</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> val</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">  return</span><span style=""color:#D8DEE9""> db</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">upsert</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">key</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> val</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span></span>
<span class=""line""></span></code></pre>
    <div class=""CodeBox_footer__vEel8"">
     <span class=""CodeBox_language___7Wpp"">
      JavaScript
     </span>
    </div>
   </div>
  </div>
  <div aria-labelledby=""radix-:R1vb9utjfb:-trigger-mjs-1"" data-orientation=""horizontal"" data-state=""inactive"" hidden="""" id=""radix-:R1vb9utjfb:-content-mjs-1"" role=""tabpanel"" tabindex=""0"">
  </div>
 </div>
 <p>
  In the above, the first and second cases (the
  <code>
   it()
  </code>
  statements) can sabotage each other because they are run concurrently and mutate the same store (a race condition):
  <code>
   save()
  </code>
  's insertion can cause the otherwise valid
  <code>
   read()
  </code>
  's test to fail its assertion on items found (and
  <code>
   read()
  </code>
  's can do the same thing to
  <code>
   save()
  </code>
  's).
 </p>
 <h2 id=""what-to-mock"">
  <a href=""#what-to-mock"">
   What to mock
  </a>
 </h2>
 <h3 id=""modules--units"">
  <a href=""#modules--units"">
   Modules + units
  </a>
 </h3>
 <p>
  This leverages
  <a href=""https://nodejs.org/api/test.html#class-mocktracker"">
   <code>
    mock
   </code>
  </a>
  from the Node.js test runner.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> before</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> it</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> mock</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">foo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> concurrency</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> barMock</span><span style=""color:#81A1C1""> =</span><span style=""color:#D8DEE9""> mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">fn</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> foo</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  before</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">async</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> barNamedExports</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#81A1C1""> import</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">./bar.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#707e99"">      // discard the original default export</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">then</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">({</span><span style=""color:#D8DEE9FF""> default</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> _</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> ...</span><span style=""color:#D8DEE9"">rest</span><span style=""color:#ECEFF4""> })</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#D8DEE9""> rest</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">    // It's usually not necessary to manually call restore() after each</span></span>
<span class=""line""><span style=""color:#707e99"">    // nor reset() after all (node does this automatically).</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">module</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">./bar.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      defaultExport</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> barMock</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#707e99"">      // Keep the other exports that you don't want to mock.</span></span>
<span class=""line""><span style=""color:#88C0D0"">      namedExports</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> barNamedExports</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#707e99"">    // This MUST be a dynamic import because that is the only way to ensure the</span></span>
<span class=""line""><span style=""color:#707e99"">    // import starts after the mock has been set up.</span></span>
<span class=""line""><span style=""color:#D8DEE9FF"">    (</span><span style=""color:#ECEFF4"">{</span><span style=""color:#D8DEE9""> foo</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> await</span><span style=""color:#81A1C1""> import</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">./foo.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">))</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should do the thing</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    barMock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">mockImplementationOnce</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">function</span><span style=""color:#88C0D0""> bar_mock</span><span style=""color:#ECEFF4"">()</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#707e99"">      /* … */</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">equal</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#88C0D0"">foo</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#ECEFF4"">,</span><span style=""color:#B48EAD""> 42</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""apis"">
  <a href=""#apis"">
   APIs
  </a>
 </h3>
 <p>
  A little-known fact is that there is a builtin way to mock
  <code>
   fetch
  </code>
  .
  <a href=""https://github.com/nodejs/undici"">
   <code>
    undici
   </code>
  </a>
  is the Node.js implementation of
  <code>
   fetch
  </code>
  . It's shipped with
  <code>
   node
  </code>
  , but not currently exposed by
  <code>
   node
  </code>
  itself, so it must be installed (ex
  <code>
   npm install undici
  </code>
  ).
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> beforeEach</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> it</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> MockAgent</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> setGlobalDispatcher</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">undici</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> endpoints</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./endpoints.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">endpoints</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> concurrency</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">  let</span><span style=""color:#D8DEE9""> agent</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">  beforeEach</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    agent</span><span style=""color:#81A1C1""> =</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> MockAgent</span><span style=""color:#D8DEE9FF"">()</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#88C0D0"">    setGlobalDispatcher</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">agent</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should retrieve data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> async</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> endpoint</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">foo</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> code</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 200</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      key</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">good</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      val</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">item</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    agent</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">https://example.com</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">intercept</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">        path</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> endpoint</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">        method</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">GET</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">reply</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">code</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">deepEqual</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">await</span><span style=""color:#D8DEE9""> endpoints</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">endpoint</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      code</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      data</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should save data</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#81A1C1""> async</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> endpoint</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">foo/1</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> code</span><span style=""color:#81A1C1""> =</span><span style=""color:#B48EAD""> 201</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> data</span><span style=""color:#81A1C1""> =</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">      key</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">good</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">      val</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">item</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    agent</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">get</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">https://example.com</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">intercept</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span></span>
<span class=""line""><span style=""color:#88C0D0"">        path</span><span style=""color:#ECEFF4"">:</span><span style=""color:#D8DEE9""> endpoint</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#88C0D0"">        method</span><span style=""color:#ECEFF4"">:</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">PUT</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      }</span><span style=""color:#D8DEE9FF"">)</span></span>
<span class=""line""><span style=""color:#ECEFF4"">      .</span><span style=""color:#88C0D0"">reply</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">code</span><span style=""color:#ECEFF4"">,</span><span style=""color:#D8DEE9""> data</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">deepEqual</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#81A1C1"">await</span><span style=""color:#D8DEE9""> endpoints</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">save</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">endpoint</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      code</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#D8DEE9"">      data</span><span style=""color:#ECEFF4"">,</span></span>
<span class=""line""><span style=""color:#ECEFF4"">    }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <h3 id=""time"">
  <a href=""#time"">
   Time
  </a>
 </h3>
 <p>
  Like Doctor Strange, you too can control time. You would usually do this just for convenience to avoid artificially protracted test runs (do you really want to wait 3 minutes for that
  <code>
   setTimeout()
  </code>
  to trigger?). You may also want to travel through time. This leverages
  <a href=""https://nodejs.org/api/test.html#class-mocktimers"">
   <code>
    mock.timers
   </code>
  </a>
  from the Node.js test runner.
 </p>
 <p>
  Note the use of time-zone here (
  <code>
   Z
  </code>
  in the time-stamps). Neglecting to include a consistent time-zone will likely lead to unexpected restults.
 </p>
 <div class=""CodeBox_root__yVRmc"">
  <pre class=""CodeBox_content__3WjnD shiki nord language-mjs"" dir=""ltr"" tabindex=""0""><code><span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> assert</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:assert/strict</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#ECEFF4""> {</span><span style=""color:#8FBCBB""> describe</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> it</span><span style=""color:#ECEFF4"">,</span><span style=""color:#8FBCBB""> mock</span><span style=""color:#ECEFF4""> }</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">node:test</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">import</span><span style=""color:#8FBCBB""> ago</span><span style=""color:#81A1C1""> from</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">./ago.mjs</span><span style=""color:#ECEFF4"">'</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#88C0D0"">describe</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">whatever</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> {</span><span style=""color:#88C0D0""> concurrency</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> true</span><span style=""color:#ECEFF4""> },</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#88C0D0"">  it</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">should choose ""minutes"" when that</span><span style=""color:#EBCB8B"">\'</span><span style=""color:#A3BE8C"">s the closet unit</span><span style=""color:#ECEFF4"">'</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> ()</span><span style=""color:#81A1C1""> =&gt;</span><span style=""color:#ECEFF4""> {</span></span>
<span class=""line""><span style=""color:#D8DEE9"">    mock</span><span style=""color:#ECEFF4"">.</span><span style=""color:#D8DEE9"">timers</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">enable</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">{</span><span style=""color:#88C0D0""> now</span><span style=""color:#ECEFF4"">:</span><span style=""color:#81A1C1""> new</span><span style=""color:#88C0D0""> Date</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">2000-01-01T00:02:02Z</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">) </span><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#81A1C1"">    const</span><span style=""color:#D8DEE9""> t</span><span style=""color:#81A1C1""> =</span><span style=""color:#88C0D0""> ago</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#ECEFF4"">'</span><span style=""color:#A3BE8C"">1999-12-01T23:59:59Z</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span>
<span class=""line""><span style=""color:#D8DEE9"">    assert</span><span style=""color:#ECEFF4"">.</span><span style=""color:#88C0D0"">equal</span><span style=""color:#D8DEE9FF"">(</span><span style=""color:#D8DEE9"">t</span><span style=""color:#ECEFF4"">,</span><span style=""color:#ECEFF4""> '</span><span style=""color:#A3BE8C"">2 minutes ago</span><span style=""color:#ECEFF4"">'</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">  }</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""><span style=""color:#ECEFF4"">}</span><span style=""color:#D8DEE9FF"">)</span><span style=""color:#81A1C1"">;</span></span>
<span class=""line""></span></code></pre>
  <div class=""CodeBox_footer__vEel8"">
   <span class=""CodeBox_language___7Wpp"">
    JavaScript
   </span>
  </div>
 </div>
 <p>
  This is especially useful when comparing against a static fixture (that is checked into a repository), such as in
  <a href=""https://nodejs.org/api/test.html#snapshot-testing"">
   snapshot testing
  </a>
  .
 </p>
</main>
"
