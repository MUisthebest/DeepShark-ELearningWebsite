topic,title,content
Introduction,Compilers,"<div class=""C_doc""><h1>Compilers</h1>
<section id=""requirements"">
The essential tools needed to follow these tutorials are a computer and a compiler toolchain able to compile C++ code and build the programs to run on it.<br/>
<br/>
C++ is a language that has evolved much over the years, and these tutorials explain many features added recently to the language. Therefore, in order to properly follow the tutorials, a recent compiler is needed. It shall support (even if only partially) the features introduced by the 2011 standard.<br/>
<br/>
Many compiler vendors support the new features at different degrees. See the bottom of this page for some compilers that are known to support the features needed. Some of them are free!<br/>
<br/>
If for some reason, you need to use some older compiler, you can access an older version of these tutorials <a href=""/doc/oldtutorial/"">here</a> (no longer updated).<br/>
</section>
<br/>
<section id=""compiler"">
<h3>What is a compiler?</h3>
Computers understand only one language and that language consists of sets of instructions made of ones and zeros. This computer language is appropriately called <i>machine language</i>.<br/>
<br/>
A single instruction to a computer could look like this:<br/>
<br/>
<table class=""boxed""><tbody><tr><td>00000</td><td>10011110</td></tr></tbody></table>
<br/>
A particular computer's machine language program that allows a user to input two numbers, adds the two numbers together, and displays the total could include these machine code instructions:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><td>00000</td><td>10011110</td></tr>
<tr><td>00001</td><td>11110100</td></tr>
<tr><td>00010</td><td>10011110</td></tr>
<tr><td>00011</td><td>11010100</td></tr>
<tr><td>00100</td><td>10111111</td></tr>
<tr><td>00101</td><td>00000000</td></tr>
</tbody></table>
<br/>
As you can imagine, programming a computer directly in machine language using only ones and zeros is very tedious and error prone. To make programming easier, high level languages have been developed. High level programs also make it easier for programmers to inspect and understand each other's programs easier.<br/>
<br/>
This is a portion of code written in C++ that accomplishes the exact same purpose:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a, b, sum;
     
cin &gt;&gt; a;
cin &gt;&gt; b;
             
sum = a + b;
cout &lt;&lt; sum &lt;&lt; endl;</code></pre></td>
</tr></tbody></table></div>
<br/>
Even if you cannot really understand the code above, you should be able to appreciate how much easier it will be to program in the C++ language as opposed to machine language.<br/>
<br/>
Because a computer can only understand machine language and humans wish to write in high level languages high level languages have to be re-written (translated) into machine language at some point. This is done by special programs called compilers, interpreters, or assemblers that are built into the various programming applications.<br/>
<br/>
C++ is designed to be a compiled language, meaning that it is generally translated into machine language that can be understood directly by the system, making the generated program highly efficient. For that, a set of tools are needed, known as the development toolchain, whose core are a compiler and its linker.<br/>
</section>
<br/>
<section id=""console"">
<h3>Console programs</h3>
Console programs are programs that use text to communicate with the user and the environment, such as printing text to the screen or reading input from a keyboard.<br/>
<br/>
Console programs are easy to interact with, and generally have a predictable behavior that is identical across all platforms. They are also simple to implement and thus are very useful to learn the basics of a programming language: The examples in these tutorials are all console programs.<br/>
<br/>
The way to compile console programs depends on the particular tool you are using.<br/>
<br/>
The easiest way for beginners to compile C++ programs is by using an Integrated Development Environment (IDE). An IDE generally integrates several development tools, including a text editor and tools to compile programs directly from it.<br/>
<br/>
Here you have instructions on how to compile and run console programs using different free Integrated Development Interfaces (IDEs):<br/>
<br/>
<table class=""boxed""><tbody><tr><th>IDE</th><th>Platform</th><th>Console programs</th></tr>
<tr><td><b>Code::blocks</b></td><td>Windows/Linux/MacOS</td><td><a href=""codeblocks/"">Compile console programs using Code::blocks</a></td></tr>
<tr><td><b>Visual Studio Express</b></td><td>Windows</td><td><a href=""visualstudio/"">Compile console programs using VS Express 2013</a></td></tr>
<tr><td><b>Dev-C++</b></td><td>Windows</td><td><a href=""devcpp/"">Compile console programs using Dev-C++</a></td></tr>
</tbody></table>
<br/>
If you happen to have a Linux or Mac environment with development features, you should be able to compile any of the examples directly from a terminal just by including C++11 flags in the command for the compiler:<br/>
<br/>
<table class=""boxed""><tbody><tr><th>Compiler</th><th>Platform</th><th>Command</th></tr>
<tr><td><b>GCC</b></td><td>Linux, among others...</td><td><code>g++ -std=c++0x example.cpp -o example_program</code></td></tr>
<tr><td><b>Clang</b></td><td>OS X, among others...</td><td><code>clang++ -std=c++11 -stdlib=libc++ example.cpp -o example_program</code></td></tr>
</tbody></table>
</section></div>"
Basics of C++,Structure of a program,"<div class=""C_doc""><h1>Structure of a program</h1>
<section id=""program_structure"">
The best way to learn a programming language is by writing programs. Typically, the first program beginners write is a program called ""Hello World"", which simply prints ""Hello World"" to your computer screen. Although it is very simple, it contains all the fundamental components C++ programs have:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my first program in C++</cite>
<dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main()
{
  std::cout &lt;&lt; <kbd>""Hello World!""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>Hello World!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The left panel above shows the C++ code for this program. The right panel shows the result when the program is executed by a computer. The grey numbers to the left of the panels are line numbers to make discussing programs and researching errors easier. They are not part of the program.<br/>
<br/>
Let's examine this program line by line:<br/>
<br/>
<dl>
<dt>Line 1: <code>// my first program in C++</code></dt>
<dd>
Two slash signs indicate that the rest of the line is a comment inserted by the programmer but which has no effect on the behavior of the program. Programmers use them to include short explanations or observations concerning the code or program. In this case, it is a brief introductory description of the program.<br/>
</dd>
<br/>
<dt>Line 2: <code>#include &lt;iostream&gt;</code></dt>
<dd>Lines beginning with a hash sign (<code>#</code>) are directives read and interpreted by what is known as the <i>preprocessor</i>. They are special lines interpreted before the compilation of the program itself begins. In this case, the directive <code>#include &lt;iostream&gt;</code>, instructs the preprocessor to include a section of standard C++ code, known as <i>header iostream</i>, that allows to perform standard input and output operations, such as writing the output of this program (<samp>Hello World</samp>) to the screen.<br/>
</dd>
<br/>
<dt>Line 3:  A blank line.</dt>
<dd>Blank lines have no effect on a program.  They simply improve readability of the code.</dd>
<br/>
<dt>Line 4: <code>int main ()</code>
</dt><dd>This line initiates the declaration of a function. Essentially, a function is a group of code statements which are given a name: in this case, this gives the name ""main"" to the group of code statements that follow. Functions will be discussed in detail in a later chapter, but essentially, their definition is introduced with a succession of a type (<code>int</code>), a name (<code>main</code>) and a pair of parentheses (<code>()</code>), optionally including parameters.<br/>
<br/>
The function named <code>main</code> is a special function in all C++ programs; it is the function called when the program is run. The execution of all C++ programs begins with the <code>main</code> function, regardless of where the function is actually located within the code.</dd>
<br/>
<dt>Lines 5 and 7: <code>{</code> and <code>}</code></dt>
<dd>The open brace (<code>{</code>) at line 5 indicates the beginning of <code>main</code>'s function definition, and the closing brace (<code>}</code>) at line 7, indicates its end. Everything between these braces is the function's body that defines what happens when <code>main</code> is called. All functions use braces to indicate the beginning and end of their definitions.<br/>
</dd>
<br/>
<dt>Line 6: <code>std::cout &lt;&lt; ""Hello World!"";</code></dt>
<dd>
This line is a C++ statement. A statement is an expression that can actually produce some effect. It is the meat of a program, specifying its actual behavior. Statements are executed in the same order that they appear within a function's body.<br/>
<br/>
This statement has three parts: First, <code>std::cout</code>, which identifies the <b>st</b>andar<b>d</b> <b>c</b>haracter <b>out</b>put device (usually, this is the computer screen). Second, the insertion operator (<code>&lt;&lt;</code>), which indicates that what follows is inserted into <code>std::cout</code>. Finally, a sentence within quotes (""Hello world!""), is the content inserted into the standard output.<br/>
<br/>
Notice that the statement ends with a semicolon (<code>;</code>). This character marks the end of the statement, just as the period ends a sentence in English.  All C++ statements must end with a semicolon character. One of the most common syntax errors in C++ is forgetting to end a statement with a semicolon.<br/>
</dd>
</dl>
<br/>
You may have noticed that not all the lines of this program perform actions when the code is executed. There is a line containing a comment (beginning with <code>//</code>). There is a line with a directive for the preprocessor (beginning with <code>#</code>). There is a line that defines a function (in this case, the <code>main</code> function). And, finally, a line with a statements ending with a semicolon (the insertion into <code>cout</code>), which was within the block delimited by the braces ( <code>{ }</code> ) of the <code>main</code> function. <br/>
<br/>
The program has been structured in different lines and properly indented, in order to make it easier to understand for the humans reading it. But C++ does not have strict rules on indentation or on how to split instructions in different lines. For example, instead of <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> main ()
{
  std::cout &lt;&lt; <kbd>"" Hello World!""</kbd>;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
We could have written:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> main () { std::cout &lt;&lt; <kbd>""Hello World!""</kbd>; }</code></pre></td>
</tr></tbody></table></div>
<br/>
all in a single line, and this would have had exactly the same meaning as the preceding code.<br/>
<br/>
In C++, the separation between statements is specified with an ending semicolon (<code>;</code>), with the separation into different lines not mattering at all for this purpose. Many statements can be written in a single line, or each statement can be in its own line. The division of code in different lines serves only to make it more legible and schematic for the humans that may read it, but has no effect on the actual behavior of the program.<br/>
<br/>
Now, let's add an additional statement to our first program:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my second program in C++</cite>
<dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main ()
{
  std::cout &lt;&lt; <kbd>""Hello World! ""</kbd>;
  std::cout &lt;&lt; <kbd>""I'm a C++ program""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>Hello World! I'm a C++ program</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this case, the program performed two insertions into <code>std::cout</code> in two different statements. Once again, the separation in different lines of code simply gives greater readability to the program, since <code>main</code> could have been perfectly valid defined in this way:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> main () { std::cout &lt;&lt; <kbd>"" Hello World! ""</kbd>; std::cout &lt;&lt; <kbd>"" I'm a C++ program ""</kbd>; }</code></pre></td>
</tr></tbody></table></div>
<br/>
The source code could have also been divided into more code lines instead:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> main ()
{
  std::cout &lt;&lt;
    <kbd>""Hello World!""</kbd>;
  std::cout
    &lt;&lt; <kbd>""I'm a C++ program""</kbd>;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
And the result would again have been exactly the same as in the previous examples.<br/>
<br/>
Preprocessor directives (those that begin by <code>#</code>) are out of this general rule since they are not statements. They are lines read and processed by the preprocessor before proper compilation begins. Preprocessor directives must be specified in their own line and, because they are not statements, do not have to end with a semicolon (<code>;</code>).<br/>
</section>
<br/>
<section id=""comments"">
<h3>Comments</h3>
As noted above, comments do not affect the operation of the program; however,  they provide an important tool to document directly within the source code what the program does and how it operates.<br/>
<br/>
C++ supports two ways of commenting code:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><cite>// line comment</cite>
<cite>/* block comment */</cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The first of them, known as <i>line comment</i>, discards everything from where the pair of slash signs (<code>//</code>) are found up to the end of that same line. The second one, known as <i>block comment</i>, discards everything between the <code>/*</code> characters and the first appearance of the <code>*/</code> characters, with the possibility of including multiple lines.<br/>
<br/>
Let's add comments to our second program: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>/* my second program in C++
   with more comments */</cite>

<dfn>#include &lt;iostream&gt;</dfn>

<var>int</var> main ()
{
  std::cout &lt;&lt; <kbd>""Hello World! ""</kbd>;     <cite>// prints Hello World!</cite>
  std::cout &lt;&lt; <kbd>""I'm a C++ program""</kbd>; <cite>// prints I'm a C++ program</cite>
}</code></pre></td>
<td class=""output""><pre><samp>Hello World! I'm a C++ program</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
If comments are included within the source code of a program without using the comment characters combinations <code>//</code>, <code>/*</code> or <code>*/</code>, the compiler takes them as if they were C++ expressions, most likely causing the compilation to fail with one, or several, error messages.<br/>
</section>
<br/>
<section id=""std"">
<h3>Using namespace std</h3>
If you have seen C++ code before, you may have seen <code>cout</code> being used instead of <code>std::cout</code>. Both name the same object: the first one uses its <i>unqualified name</i> (<code>cout</code>), while the second qualifies it directly within the <i>namespace</i> <code>std</code> (as <code>std::cout</code>).<br/>
<br/>
<code>cout</code> is part of the standard library, and all the elements in the standard C++ library are declared within what is called a <i>namespace</i>: the namespace <code>std</code>.<br/>
<br/>
In order to refer to the elements in the <code>std</code> namespace a program shall either qualify each and every use of elements of the library (as we have done by prefixing <code>cout</code> with <code>std::</code>), or introduce visibility of its components. The most typical way to introduce visibility of these components is by means of <i>using declarations</i>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>using</var> <var>namespace</var> std;</code></pre></td>
</tr></tbody></table></div>
<br/>
The above declaration allows all elements in the <code>std</code> namespace to be accessed in an <i>unqualified</i> manner (without the <code>std::</code> prefix).<br/>
<br/>
With this in mind, the last example can be rewritten to make unqualified uses of <code>cout</code> as:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my second program in C++</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  cout &lt;&lt; <kbd>""Hello World! ""</kbd>;
  cout &lt;&lt; <kbd>""I'm a C++ program""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>Hello World! I'm a C++ program</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Both ways of accessing the elements of the <code>std</code> namespace (explicit qualification and <i>using</i> declarations) are valid in C++ and produce the exact same behavior. For simplicity, and to improve readability, the examples in these tutorials will more often use this latter approach with <i>using</i> declarations, although note that <i>explicit qualification</i> is the only way to guarantee that name collisions never happen.<br/>
<br/>
Namespaces are explained in more detail in a later chapter.<br/>
</section></div>"
Basics of C++,Variables and types,"<div class=""C_doc""><h1>Variables and types</h1>
<section id=""variables"">
The usefulness of the ""Hello World"" programs shown in the previous chapter is rather questionable. We had to write several lines of code, compile them, and then execute the resulting program, just to obtain the result of a simple sentence written on the screen. It certainly would have been much faster to type the output sentence ourselves.<br/>
<br/>
However, programming is not limited only to printing simple texts on the screen. In order to go a little further on and to become able to write programs that perform useful tasks that really save us work, we need to introduce the concept of <i>variables</i>.<br/>
<br/>
Let's imagine that I ask you to remember the number 5, and then I ask you to also memorize the number 2 at the same time. You have just stored two different values in your memory (5 and 2). Now, if I ask you to add 1 to the first number I said, you should be retaining the numbers 6 (that is 5+1) and 2 in your memory. Then we could, for example, subtract these values and obtain 4 as result.<br/>
<br/>
The whole process described above is a simile of what a computer can do with two variables. The same process can be expressed in C++ with the following set of statements:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>a = 5;
b = 2;
a = a + 1;
result = a - b;</code></pre></td>
</tr></tbody></table></div>
<br/>
Obviously, this is a very simple example, since we have only used two small integer values, but consider that your computer can store millions of numbers like these at the same time and conduct sophisticated mathematical operations with them.<br/>
<br/>
We can now define <dfn>variable</dfn> as a portion of memory to store a value.<br/>
<br/>
Each variable needs a name that identifies it and distinguishes it from the others. For example, in the previous code the variable names were <code>a</code>, <code>b</code>, and <code>result</code>, but we could have called the variables any names we could have come up with, as long as they were valid C++ identifiers.<br/>
</section>
<br/>
<section id=""identifiers"">
<h3>Identifiers</h3>
A <dfn>valid identifier</dfn> is a sequence of one or more letters, digits, or underscore characters (<code>_</code>). Spaces, punctuation marks, and symbols cannot be part of an identifier. In addition, identifiers shall always begin with a letter. They can also begin with an underline character (<code>_</code>), but such identifiers are -on most cases- considered reserved for compiler-specific keywords or external identifiers, as well as identifiers containing two successive underscore characters anywhere. In no case can they begin with a digit.<br/>
<br/>
C++ uses a number of keywords to identify operations and data descriptions; therefore, identifiers created by a programmer cannot match these keywords.  The standard reserved keywords that cannot be used for programmer created identifiers are:<br/>
<br/>
<code>
alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char16_t, char32_t, class, compl, const, constexpr, const_cast, continue, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq<br/>
</code>
<br/>
Specific compilers may also have additional specific reserved keywords.<br/>
<br/>
<b>Very important:</b> The C++ language is a ""case sensitive"" language. That means that an identifier written in capital letters is not equivalent to another one with the same name but written in small letters. Thus, for example, the <code>RESULT</code> variable is not the same as the <code>result</code> variable or the <code>Result</code> variable. These are three different identifiers identifiying three different variables.<br/>
</section>
<br/>
<section id=""fundamental"">
<h3>Fundamental data types</h3>
The values of variables are stored somewhere in an unspecified location in the computer memory as zeros and ones. Our program does not need to know the exact location where a variable is stored; it can simply refer to it by its name. What the program needs to be aware of is the kind of data stored in the variable. It's not the same to store a simple integer as it is to store a letter or a large floating-point number; even though they are all represented using zeros and ones, they are not interpreted in the same way, and in many cases, they don't occupy the same amount of memory.<br/>
<br/>
Fundamental data types are basic types implemented directly by the language that represent the basic storage units supported natively by most systems. They can mainly be classified into:<br/>
<ul>
<li><b>Character types:</b> They can represent a single character, such as <code>'A'</code> or <code>'$'</code>. The most basic type is <code>char</code>, which is a one-byte character. Other types are also provided for wider characters.</li>
<li><b>Numerical integer types:</b> They can store a whole number value, such as <code>7</code> or <code>1024</code>. They exist in a variety of sizes, and can either be <i>signed</i> or <i>unsigned</i>, depending on whether they support negative values or not.</li>
<li><b>Floating-point types:</b> They can represent real values, such as <code>3.14</code> or <code>0.01</code>, with different levels of precision, depending on which of the three floating-point types is used.</li>
<li><b>Boolean type:</b> The boolean type, known in C++ as <code>bool</code>, can only represent one of two states, <code>true</code> or <code>false</code>.</li>
</ul>
<br/>
Here is the complete list of fundamental types in C++:<br/>
<table class=""boxed"">
<tbody><tr><th>Group</th><th>Type names*</th><th>Notes on size / precision</th></tr>
<tr><td rowspan=""4"">Character types</td><td><code><b>char</b></code></td><td>Exactly one byte in size. At least 8 bits.</td></tr>
<tr><td><code><b>char16_t</b></code></td><td>Not smaller than <code>char</code>. At least 16 bits.</td></tr>
<tr><td><code><b>char32_t</b></code></td><td>Not smaller than <code>char16_t</code>. At least 32 bits.</td></tr>
<tr><td><code><b>wchar_t</b></code></td><td>Can represent the largest supported character set.</td></tr>
<tr><td rowspan=""5"">Integer types (signed)</td><td><code><b>signed char</b></code></td><td>Same size as <code>char</code>. At least 8 bits.</td></tr>
<tr><td><code><i>signed</i> <b>short</b> <i>int</i></code></td><td>Not smaller than <code>char</code>. At least 16 bits.</td></tr>
<tr><td><code><i>signed</i> <b>int</b></code></td><td>Not smaller than <code>short</code>. At least 16 bits.</td></tr>
<tr><td><code><i>signed</i> <b>long</b> <i>int</i></code></td><td>Not smaller than <code>int</code>. At least 32 bits.</td></tr>
<tr><td><code><i>signed</i> <b>long long</b> <i>int</i></code></td><td>Not smaller than <code>long</code>. At least 64 bits.</td></tr>
<tr><td rowspan=""5"">Integer types (unsigned)</td><td><code><b>unsigned char</b></code></td><td rowspan=""5"">(same size as their signed counterparts)</td></tr>
<tr><td><code><b>unsigned short</b> <i>int</i></code></td></tr>
<tr><td><code><b>unsigned</b> <i>int</i></code></td></tr>
<tr><td><code><b>unsigned long</b> <i>int</i></code></td></tr>
<tr><td><code><b>unsigned long long</b> <i>int</i></code></td></tr>
<tr><td rowspan=""3"">Floating-point types</td><td><code><b>float</b></code></td><td></td></tr>
<tr><td><code><b>double</b></code></td><td>Precision not less than <code>float</code></td></tr>
<tr><td><code><b>long double</b></code></td><td>Precision not less than <code>double</code></td></tr>
<tr><td>Boolean type</td><td><code><b>bool</b></code></td><td></td></tr>
<tr><td>Void type</td><td><code><b>void</b></code></td><td>no storage</td></tr>
<tr><td>Null pointer</td><td><code><b>decltype(nullptr)</b></code></td><td></td></tr>
</tbody></table>
<br/>
* The names of certain integer types can be abbreviated without their <code>signed</code> and <code>int</code> components - only the part not in italics is required to identify the type, the part in italics is optional. I.e., <code><i>signed</i> short <i>int</i></code> can be abbreviated as <code>signed short</code>, <code>short int</code>, or simply <code>short</code>; they all identify the same fundamental type.<br/>
<br/>
Within each of the groups above, the difference between types is only their size (i.e., how much they occupy in memory): the first type in each group is the smallest, and the last is the largest, with each type being at least as large as the one preceding it in the same group. Other than that, the types in a group have the same properties.<br/>
<br/>
Note in the panel above that other than <code>char</code> (which has a size of exactly one byte), none of the fundamental types has a standard size specified (but a minimum size, at most). Therefore, the type is not required (and in many cases is not) exactly this minimum size. This does not mean that these types are of an undetermined size, but that there is no standard size across all compilers and machines; each compiler implementation may specify the sizes for these types that fit the best the architecture where the program is going to run. This rather generic size specification for types gives the C++ language a lot of flexibility to be adapted to work optimally in all kinds of platforms, both present and future. <br/>
<br/>
Type sizes above are expressed in bits; the more bits a type has, the more distinct values it can represent, but at the same time, also consumes more space in memory:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Size</th><th>Unique representable values</th><th>Notes</th></tr>
<tr><td>8-bit</td><td class=""right""><code>256</code></td><td>= 2<sup>8</sup></td></tr>
<tr><td>16-bit</td><td class=""right""><code>65 536</code></td><td>= 2<sup>16</sup></td></tr>
<tr><td>32-bit</td><td class=""right""><code>4 294 967 296</code></td><td>= 2<sup>32</sup> (~4 billion)</td></tr>
<tr><td>64-bit</td><td class=""right""><code>18 446 744 073 709 551 616</code></td><td>= 2<sup>64</sup> (~18 billion billion)</td></tr>
</tbody></table>
<br/>
For integer types, having more representable values means that the range of values they can represent is greater; for example, a 16-bit unsigned integer would be able to represent 65536 distinct values in the range 0 to 65535, while its signed counterpart would be able to represent, on most cases, values between -32768 and 32767. Note that the range of positive values is approximately halved in signed types compared to unsigned types, due to the fact that one of the 16 bits is used for the sign; this is a relatively modest difference in range, and seldom justifies the use of unsigned types based purely on the range of positive values they can represent.<br/>
<br/>
For floating-point types, the size affects their precision, by having more or less bits for their significant and exponent.<br/>
<br/>
If the size or precision of the type is not a concern, then <code>char</code>, <code>int</code>, and <code>double</code> are typically selected to represent characters, integers, and floating-point values, respectively. The other types in their respective groups are only used in very particular cases.<br/>
<br/>
The properties of fundamental types in a particular system and compiler implementation can be obtained by using the <samp><a href=""/numeric_limits"">numeric_limits</a></samp> classes (see standard header <code><a href=""/&lt;limits&gt;"">&lt;limits&gt;</a></code>). If for some reason, types of specific sizes are needed, the library defines certain fixed-size type aliases in header <code><a href=""/&lt;cstdint&gt;"">&lt;cstdint&gt;</a></code>.<br/>
<br/>
The types described above (characters, integers, floating-point, and boolean) are collectively known as arithmetic types. But two additional fundamental types exist: <code>void</code>, which identifies the lack of type; and the type <code>nullptr</code>, which is a special type of pointer. Both types will be discussed further in a coming chapter about pointers.<br/>
<br/>
C++ supports a wide variety of types based on the fundamental types discussed above; these other types are known as <i>compound data types</i>, and are one of the main strengths of the C++ language. We will also see them in more detail in future chapters.<br/>
</section>
<br/>
<section id=""declarations"">
<h3>Declaration of variables</h3>
C++ is a strongly-typed language, and requires every variable to be declared with its type before its first use. This informs the compiler the size to reserve in memory for the variable and how to interpret its value. The syntax to declare a new variable in C++ is straightforward: we simply write the type followed by the variable name (i.e., its identifier). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a;
<var>float</var> mynumber;</code></pre></td>
</tr></tbody></table></div>
<br/>
These are two valid declarations of variables. The first one declares a variable of type <code>int</code> with the identifier <code>a</code>. The second one declares a variable of type <code>float</code> with the identifier <code>mynumber</code>. Once declared, the variables <code>a</code> and <code>mynumber</code> can be used within the rest of their scope in the program.<br/>
If declaring more than one variable of the same type, they can all be declared in a single statement by separating their identifiers with commas. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a, b, c;</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares three variables (<code>a</code>, <code>b</code> and <code>c</code>), all of them of type <code>int</code>, and has exactly the same meaning as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a;
<var>int</var> b;
<var>int</var> c;</code></pre></td>
</tr></tbody></table></div>
<br/>
To see what variable declarations look like in action within a program, let's have a look at the entire C++ code of the example about your mental memory proposed at the beginning of this chapter:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/></code></pre></td>
<td class=""source""><pre><code><cite>// operating with variables</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <cite>// declaring variables:</cite>
  <var>int</var> a, b;
  <var>int</var> result;

  <cite>// process:</cite>
  a = 5;
  b = 2;
  a = a + 1;
  result = a - b;

  <cite>// print out the result:</cite>
  cout &lt;&lt; result;

  <cite>// terminate the program:</cite>
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>4</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Don't be worried if something else than the variable declarations themselves look a bit strange to you. Most of it will be explained in more detail in coming chapters.<br/>
</section>
<br/>
<section id=""initialization"">
<h3>Initialization of variables</h3>
When the variables in the example above are declared, they have an undetermined value until they are assigned a value for the first time. But it is possible for a variable to have a specific value from the moment it is declared. This is called the <i>initialization</i> of the variable.<br/>
<br/>
In C++, there are three ways to initialize variables. They are all equivalent and are reminiscent of the evolution of the language over the years:<br/>
<br/>
The first one, known as <i>c-like initialization</i> (because it is inherited from the C language), consists of appending an equal sign followed by the value to which the variable is initialized:<br/>
<br/>
<code>type identifier = initial_value;</code>
<br/>
For example, to declare a variable of type <code>int</code> called <code>x</code> and initialize it to a value of zero from the same moment it is declared, we can write:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x = 0;</code></pre></td>
</tr></tbody></table></div>
<br/>
A second method, known as <i>constructor initialization</i> (introduced by the C++ language), encloses the initial value between parentheses (<code>()</code>):<br/>
<br/>
<code>type identifier (initial_value);</code>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x (0);</code></pre></td>
</tr></tbody></table></div>
<br/>
Finally, a third method, known as <i>uniform initialization</i>, similar to the above, but using curly braces (<code>{}</code>) instead of parentheses (this was introduced by the revision of the C++ standard, in 2011):<br/>
<br/>
<code>type identifier {initial_value};</code>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x {0};</code></pre></td>
</tr></tbody></table></div>
<br/>
All three ways of initializing variables are valid and equivalent in C++.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/></code></pre></td>
<td class=""source""><pre><code><cite>// initialization of variables</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> a=5;               <cite>// initial value: 5</cite>
  <var>int</var> b(3);              <cite>// initial value: 3</cite>
  <var>int</var> c{2};              <cite>// initial value: 2</cite>
  <var>int</var> result;            <cite>// initial value undetermined</cite>

  a = a + b;
  result = a - c;
  cout &lt;&lt; result;

  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>6</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""type_deduction"">
<h3>Type deduction: auto and decltype</h3>
When a new variable is initialized, the compiler can figure out what the type of the variable is automatically by the initializer. For this, it suffices to use <code>auto</code> as the type specifier for the variable:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo = 0;
<var>auto</var> bar = foo;  <cite>// the same as: int bar = foo; </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Here, <code>bar</code> is declared as having an <code>auto</code> type; therefore, the type of <code>bar</code> is the type of the value used to initialize it: in this case it uses the type of <code>foo</code>, which is <code>int</code>.<br/>
<br/>
Variables that are not initialized can also make use of type deduction with the <code>decltype</code> specifier:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo = 0;
<var>decltype</var>(foo) bar;  <cite>// the same as: int bar; </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Here, <code>bar</code> is declared as having the same type as <code>foo</code>.<br/>
<br/>
<code>auto</code> and <code>decltype</code> are powerful features recently added to the language. But the type deduction features they introduce are meant to be used either when the type cannot be obtained by other means or when using it improves code readability. The two examples above were likely neither of these use cases. In fact they probably decreased readability, since, when reading the code, one has to search for the type of <code>foo</code> to actually know the type of <code>bar</code>.<br/>
</section>
<br/>
<section id=""strings"">
<h3>Introduction to strings</h3>
Fundamental types represent the most basic types handled by the machines where the code may run. But one of the major strengths of the C++ language is its rich set of compound types, of which the fundamental types are mere building blocks.<br/>
<br/>
An example of compound type is the <code>string</code> class. Variables of this type are able to store sequences of characters, such as words or sentences. A very useful feature!<br/>
<br/>
A first difference with fundamental data types is that in order to declare and use objects (variables) of this type, the program needs to include the header where the type is defined within the standard library (header <code>&lt;string&gt;</code>): <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my first string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystring;
  mystring = <kbd>""This is a string""</kbd>;
  cout &lt;&lt; mystring;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>This is a string</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
As you can see in the previous example, strings can be initialized with any valid string literal, just like numerical type variables can be initialized to any valid numerical literal. As with fundamental types, all initialization formats are valid with strings:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>string mystring = <kbd>""This is a string""</kbd>;
string mystring (<kbd>""This is a string""</kbd>);
string mystring {<kbd>""This is a string""</kbd>};</code></pre></td>
</tr></tbody></table></div>
<br/>
Strings can also perform all the other basic operations that fundamental data types can, like being declared without an initial value and change its value during execution:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my first string</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystring;
  mystring = <kbd>""This is the initial string content""</kbd>;
  cout &lt;&lt; mystring &lt;&lt; endl;
  mystring = <kbd>""This is a different string content""</kbd>;
  cout &lt;&lt; mystring &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>This is the initial string content
This is a different string content</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note: inserting the <code>endl</code> manipulator <b>end</b>s the <b>l</b>ine (printing a newline character and flushing the stream).<br/>
<br/>
The <samp><a href=""/string"">string</a></samp> class is a <i>compound type</i>. As you can see in the example above, <i>compound types</i> are used in the same way as <i>fundamental types</i>: the same syntax is used to declare variables and to initialize them.<br/>
<br/>
For more details on standard C++ strings, see the <samp><a href=""/string"">string</a></samp> class reference.<br/>
</section></div>"
Basics of C++,Constants,"<div class=""C_doc""><h1>Constants</h1>
<section id=""constants"">
<dfn>Constants</dfn> are expressions with a fixed value.<br/>
</section>
<br/>
<section id=""literals"">
<h3>Literals</h3>
Literals are the most obvious kind of constants. They are used to express particular values within the source code of a program. We have already used some in previous chapters to give specific values to variables or to express messages we wanted our programs to print out, for example, when we wrote:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>a = 5;</code></pre></td>
</tr></tbody></table></div>
<br/>
The <code>5</code> in this piece of code was a <i>literal constant</i>.<br/>
<br/>
Literal constants can be classified into: integer, floating-point, characters, strings, Boolean, pointers, and user-defined literals.<br/>
</section>
<br/>
<section id=""integer"">
<h4>Integer Numerals</h4>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>1776
707
-</code></pre></td>
</tr></tbody></table></div>
<br/>
These are numerical constants that identify integer values. Notice that they are not enclosed in quotes or any other special character; they are a simple succession of digits representing a whole number in decimal base; for example, <code>1776</code> always represents the value <i>one thousand seven hundred seventy-six</i>.<br/>
<br/>
In addition to decimal numbers (those that most of us use every day), C++ allows the use of octal numbers (base 8) and hexadecimal numbers (base 16) as literal constants. For octal literals, the digits are preceded with a <code>0</code> (zero) character. And for hexadecimal, they are preceded by the characters <code>0x</code> (zero, x). For example, the following literal constants are all equivalent to each other: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>75         <cite>// decimal</cite>
0113       <cite>// octal</cite>
0x4b       <cite>// hexadecimal  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
All of these represent the same number: 75 (seventy-five) expressed as a base-10 numeral, octal numeral and hexadecimal numeral, respectively. <br/>
<br/>
These literal constants have a type, just like variables. By default, integer literals are of type <code>int</code>. However, certain suffixes may be appended to an integer literal to specify a different integer type:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Suffix</th><th>Type modifier</th></tr>
<tr><td><code>u</code> <i>or</i> <code>U</code></td><td><code>unsigned</code></td></tr>
<tr><td><code>l</code> <i>or</i> <code>L</code></td><td><code>long</code></td></tr>
<tr><td><code>ll</code> <i>or</i> <code>LL</code></td><td><code>long long</code></td></tr>
</tbody></table>
<br/>
Unsigned may be combined with any of the other two in any order to form <code>unsigned long</code> or <code>unsigned long long</code>.<br/>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code>75         <cite>// int</cite>
75u        <cite>// unsigned int</cite>
75l        <cite>// long</cite>
75ul       <cite>// unsigned long </cite>
75lu       <cite>// unsigned long </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
In all the cases above, the suffix can be specified using either upper or lowercase letters.<br/>
</section>
<br/>
<section id=""floating"">
<h4>Floating Point Numerals</h4>
They express real values, with decimals and/or exponents. They can include either a decimal point, an <code>e</code> character (that expresses <i>""by ten at the Xth height""</i>, where <i>X</i> is an integer value that follows the <code>e</code> character), or both a decimal point and an <code>e</code> character:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>3.14159    <cite>// 3.14159</cite>
6.02e23    <cite>// 6.02 x 10^23</cite>
1.6e-19    <cite>// 1.6 x 10^-19</cite>
3.0        <cite>// 3.0  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
These are four valid numbers with decimals expressed in C++. The first number is PI, the second one is the number of Avogadro, the third is the electric charge of an electron (an extremely small number) -all of them approximated-, and the last one is the number <i>three</i> expressed as a floating-point numeric literal.<br/>
<br/>
The default type for floating-point literals is <code>double</code>. Floating-point literals of type <code>float</code> or <code>long double</code> can be specified by adding one of the following suffixes:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Suffix</th><th>Type</th></tr>
<tr><td><code>f</code> <i>or</i> <code>F</code></td><td><code>float</code></td></tr>
<tr><td><code>l</code> <i>or</i> <code>L</code></td><td><code>long double</code></td></tr>
</tbody></table>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>3.14159L   <cite>// long double</cite>
6.02e23f   <cite>// float  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Any of the letters that can be part of a floating-point numerical constant (<code>e</code>, <code>f</code>, <code>l</code>) can be written using either lower or uppercase letters with no difference in meaning.<br/>
</section>
<br/>
<section id=""strings"">
<h4>Character and string literals</h4>
Character and string literals are enclosed in quotes:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><kbd>'z'</kbd>
<kbd>'p'</kbd>
<kbd>""Hello world""</kbd>
<kbd>""How do you do?""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
The first two expressions represent <i>single-character literals</i>, and the following two represent <i>string literals</i> composed of several characters. Notice that to represent a single character, we enclose it between single quotes (<code>'</code>), and to express a string (which generally consists of more than one character), we enclose the characters between double quotes (<code>""</code>).<br/>
<br/>
Both single-character and string literals require quotation marks surrounding them to distinguish them from possible variable identifiers or reserved keywords. Notice the difference between these two expressions:<br/>
<br/>
<code>
x<br/>
'x'<br/>
</code>
<br/>
Here, <code>x</code> alone would refer to an identifier, such as the name of a variable or a compound type, whereas <code>'x'</code> (enclosed within single quotation marks) would refer to the character literal <code>'x'</code> (the character that represents a lowercase <i>x</i> letter).<br/>
<br/>
Character and string literals can also represent special characters that are difficult or impossible to express otherwise in the source code of a program, like newline (<code>\n</code>) or tab (<code>\t</code>). These special characters are all of them preceded by a backslash character (<code>\</code>).<br/>
<br/>
Here you have a list of the single character escape codes: <br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Escape code</th><th>Description</th></tr>
<tr><td><code>\n</code></td><td>newline</td></tr>
<tr><td><code>\r</code></td><td>carriage return</td></tr>
<tr><td><code>\t</code></td><td>tab</td></tr>
<tr><td><code>\v</code></td><td>vertical tab</td></tr>
<tr><td><code>\b</code></td><td>backspace</td></tr>
<tr><td><code>\f</code></td><td>form feed (page feed)</td></tr>
<tr><td><code>\a</code></td><td>alert (beep)</td></tr>
<tr><td><code>\'</code></td><td>single quote (<code>'</code>)</td></tr>
<tr><td><code>\""</code></td><td>double quote (<code>""</code>)</td></tr>
<tr><td><code>\?</code></td><td>question mark (<code>?</code>)</td></tr>
<tr><td><code>\\</code></td><td>backslash (<code>\</code>)</td></tr>
</tbody></table>
<br/>
For example:<br/>
<br/>
<code>
'\n'<br/>
'\t'<br/>
""Left \t Right""<br/>
""one\ntwo\nthree""<br/>
</code>
<br/>
Internally, computers represent characters as numerical codes: most typically, they use one extension of the <a href=""/ascii"">ASCII</a> character encoding system (see <a href=""/ascii"">ASCII code</a> for more info). Characters can also be represented in literals using its numerical code by writing a backslash character (<code>\</code>) followed by the code expressed as an octal (base-8) or hexadecimal (base-16) number. For an octal value, the backslash is followed directly by the digits; while for hexadecimal, an <code>x</code> character is inserted between the backslash and the hexadecimal digits themselves (for example: <code>\x20</code> or <code>\x4A</code>).<br/>
<br/>
Several string literals can be concatenated to form a single string literal simply by separating them by one or more blank spaces, including tabs, newlines, and other valid blank characters. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><kbd>""this forms""</kbd> <kbd>""a single""</kbd>     <kbd>"" string ""</kbd>
<kbd>""of characters""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
The above is a string literal equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><kbd>""this formsa single string of characters""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
Note how spaces within the quotes are part of the literal, while those outside them are not.<br/>
<br/>
Some programmers also use a trick to include long string literals in multiple lines: In C++, a backslash (<code>\</code>) at the end of line is considered a <i>line-continuation</i> character that merges both that line and the next into a single line. Therefore the following code:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>x = <kbd>""string expressed in \
two lines""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
is equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = <kbd>""string expressed in two lines""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
All the character literals and string literals described above are made of characters of type <code>char</code>. A different character type can be specified by using one of the following prefixes:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Prefix</th><th>Character type</th></tr>
<tr><td><code>u</code></td><td><code>char16_t</code></td></tr>
<tr><td><code>U</code></td><td><code>char32_t</code></td></tr>
<tr><td><code>L</code></td><td><code>wchar_t</code></td></tr>
</tbody></table>
<br/>
Note that, unlike type suffixes for integer literals, these prefixes are <i>case sensitive</i>: lowercase for <code>char16_t</code> and uppercase for <code>char32_t</code> and <code>wchar_t</code>.<br/>
<br/>
For string literals, apart from the above <code>u</code>, <code>U</code>, and <code>L</code>, two additional prefixes exist:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Prefix</th><th>Description</th></tr>
<tr><td><code>u8</code></td><td>The string literal is encoded in the executable using UTF-8</td></tr>
<tr><td><code>R</code></td><td>The string literal is a raw string</td></tr>
</tbody></table>
<br/>
In raw strings, backslashes and single and double quotes are all valid characters; the content of the literal is delimited by an initial <code>R""<i>sequence</i>(</code> and a final <code>)<i>sequence</i>""</code>, where <code><i>sequence</i></code> is any sequence of characters (including an empty sequence). The content of the string is what lies inside the parenthesis, ignoring the delimiting sequence itself. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>R<kbd>""(string with \backslash)""</kbd>
R<kbd>""&amp;%$(string with \backslash)&amp;%$""</kbd></code></pre></td>
</tr></tbody></table></div>
<br/>
Both strings above are equivalent to <code>""string with \\backslash""</code>. The <code>R</code> prefix can be combined with any other prefixes, such as <code>u</code>, <code>L</code> or <code>u8</code>.<br/>
</section>
<br/>
<section id=""other"">
<h4>Other literals</h4>
Three keyword literals exist in C++: <code>true</code>, <code>false</code> and <code>nullptr</code>:<br/>
<ul>
<li><code>true</code> and <code>false</code> are the two possible values for variables of type <code>bool</code>.</li>
<li><code>nullptr</code> is the <i>null pointer</i> value.</li>
</ul>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>bool</var> foo = <var>true</var>;
<var>bool</var> bar = <var>false</var>;
<var>int</var>* p = <var>nullptr</var>;</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""const"">
<h3>Typed constant expressions</h3>
Sometimes, it is just convenient to give a name to a constant value:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>const</var> <var>double</var> pi = 3.1415926;
<var>const</var> <var>char</var> tab = <kbd>'\t'</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
We can then use these names instead of the literals they were defined to:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/>29<br/>30<br/>31<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>const</var> <var>double</var> pi = 3.14159;
<var>const</var> <var>char</var> newline = <kbd>'\n'</kbd>;

<var>int</var> main ()
{
  <var>double</var> r=5.0;               <cite>// radius</cite>
  <var>double</var> circle;

  circle = 2 * pi * r;
  cout &lt;&lt; circle;
  cout &lt;&lt; newline;
}</code></pre></td>
<td class=""output""><pre><samp>31.4159</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""define"">
<h3>Preprocessor definitions (#define)</h3>
Another mechanism to name constant values is the use of preprocessor definitions. They have the following form:<br/>
<br/>
<code>#define identifier replacement</code> <br/>
<br/>
After this directive, any occurrence of <code>identifier</code> in the code is interpreted as <code>replacement</code>, where replacement is any sequence of characters (until the end of the line). This replacement is performed by the preprocessor, and happens before the program is compiled, thus causing a sort of blind replacement: the validity of the types or syntax involved is not checked in any way.<br/>
<br/>
For example:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/>29<br/>30<br/>31<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define PI 3.14159</dfn>
<dfn>#define NEWLINE '\n'</dfn>

<var>int</var> main ()
{
  <var>double</var> r=5.0;               <cite>// radius</cite>
  <var>double</var> circle;

  circle = 2 * PI * r;
  cout &lt;&lt; circle;
  cout &lt;&lt; NEWLINE;

}</code></pre></td>
<td class=""output""><pre><samp>31.4159</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note that the <code>#define</code> lines are preprocessor directives, and as such are single-line instructions that -unlike C++ statements- do not require semicolons (;) at the end; the directive extends automatically until the end of the line. If a semicolon is included in the line, it is part of the replacement sequence and is also included in all replaced occurrences.<br/>
</section>
</div>"
Basics of C++,Operators,"<div class=""C_doc""><h1>Operators</h1>
<section id=""operators"">
Once introduced to variables and constants, we can begin to operate with them by using <i>operators</i>. What follows is a complete list of operators. At this point, it is likely not necessary to know all of them, but they are all listed here to also serve as reference.<br/>
</section>
<br/>
<section id=""assignment"">
<h3>Assignment operator (=)</h3>
The assignment operator assigns a value to a variable.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = 5;</code></pre></td>
</tr></tbody></table></div>
<br/>
This statement assigns the integer value <code>5</code> to the variable <code>x</code>. The assignment operation always takes place from right to left, and never the other way around:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = y;</code></pre></td>
</tr></tbody></table></div>
<br/>
This statement assigns to variable <code>x</code> the value contained in variable <code>y</code>. The value of <code>x</code> at the moment this statement is executed is lost and replaced by the value of <code>y</code>.<br/>
<br/>
Consider also that we are only assigning the value of <code>y</code> to <code>x</code> at the moment of the assignment operation. Therefore, if <code>y</code> changes at a later moment, it will not affect the new value taken by <code>x</code>.<br/>
<br/>
For example, let's have a look at the following code - I have included the evolution of the content stored in the variables as comments:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// assignment operator</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> a, b;         <cite>// a:?,  b:?</cite>
  a = 10;           <cite>// a:10, b:?</cite>
  b = 4;            <cite>// a:10, b:4</cite>
  a = b;            <cite>// a:4,  b:4</cite>
  b = 7;            <cite>// a:4,  b:7</cite>

  cout &lt;&lt; <kbd>""a:""</kbd>;
  cout &lt;&lt; a;
  cout &lt;&lt; <kbd>"" b:""</kbd>;
  cout &lt;&lt; b;
}</code></pre></td>
<td class=""output""><pre><samp>a:4 b:7</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This program prints on screen the final values of <code>a</code> and <code>b</code> (4 and 7, respectively). Notice how <code>a</code> was not affected by the final modification of <code>b</code>, even though we declared <code>a = b</code> earlier.<br/>
<br/>
Assignment operations are expressions that can be evaluated. That means that the assignment itself has a value, and -for fundamental types- this value is the one assigned in the operation. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>y = 2 + (x = 5);</code></pre></td>
</tr></tbody></table></div>
<br/>
In this expression, <code>y</code> is assigned the result of adding 2 and the value of another assignment expression (which has itself a value of 5). It is roughly equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>x = 5;
y = 2 + x;</code></pre></td>
</tr></tbody></table></div>
<br/>
With the final result of assigning 7 to <code>y</code>.<br/>
<br/>
The following expression is also valid in C++: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = y = z = 5;</code></pre></td>
</tr></tbody></table></div>
<br/>
It assigns 5 to the all three variables: <code>x</code>, <code>y</code> and <code>z</code>; always from right-to-left.<br/>
</section>
<br/>
<section id=""arithmetic"">
<h3>Arithmetic operators ( +, -, *, /, % )</h3>
The five arithmetical operations supported by C++ are: <br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>operator</th><th>description</th></tr>
<tr><td><code>+</code></td><td>addition</td></tr>
<tr><td><code>-</code></td><td>subtraction</td></tr>
<tr><td><code>*</code></td><td>multiplication</td></tr>
<tr><td><code>/</code></td><td>division</td></tr>
<tr><td><code>%</code></td><td>modulo</td></tr>
</tbody></table>
<br/>
Operations of addition, subtraction, multiplication and division correspond literally to their respective mathematical operators. The last one, <i>modulo operator</i>, represented by a percentage sign (<code>%</code>), gives the remainder of a division of two values. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = 11 % 3;</code></pre></td>
</tr></tbody></table></div>
<br/>
results in variable <code>x</code> containing the value 2, since dividing 11 by 3 results in 3, with a remainder of 2.<br/>
</section>
<br/>
<section id=""compound"">
<h3>Compound assignment (+=, -=, *=, /=, %=, &gt;&gt;=, &lt;&lt;=, &amp;=, ^=, |=)</h3>
Compound assignment operators modify the current value of a variable by performing an operation on it. They are equivalent to assigning the result of an operation to the first operand:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>expression</th><th>equivalent to...</th></tr>
<tr><td><code>y += x;</code></td><td><code>y = y + x;</code></td></tr>
<tr><td><code>x -= 5;</code></td><td><code>x = x - 5;</code></td></tr>
<tr><td><code>x /= y;</code></td><td><code>x = x / y;</code></td></tr>
<tr><td><code>price *= units + 1;</code></td><td><code>price = price * (units+1);</code></td></tr>
</tbody></table>
<br/>
and the same for all other compound assignment operators. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/></code></pre></td>
<td class=""source""><pre><code><cite>// compound assignment operators</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> a, b=3;
  a = b;
  a+=2;             <cite>// equivalent to a=a+2</cite>
  cout &lt;&lt; a;
}</code></pre></td>
<td class=""output""><pre><samp>5</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""increment"">
<h3>Increment and decrement (++, --)</h3>
Some expression can be shortened even more: the increase operator (<code>++</code>) and the decrease operator (<code>--</code>) increase or reduce by one the value stored in a variable. They are equivalent to <code>+=1</code> and to <code>-=1</code>, respectively. Thus:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>++x;
x+=1;
x=x+1;</code></pre></td>
</tr></tbody></table></div>
<br/>
are all equivalent in its functionality; the three of them increase by one the value of <code>x</code>.<br/>
<br/>
In the early C compilers, the three previous expressions may have produced different executable code depending on which one was used. Nowadays, this type of code optimization is generally performed automatically by the compiler, thus the three expressions should produce exactly the same executable code.<br/>
<br/>
A peculiarity of this operator is that it can be used both as a prefix and as a suffix. That means that it can be written either before the variable name (<code>++x</code>) or after it (<code>x++</code>). Although in simple expressions like <code>x++</code> or <code>++x</code>, both have exactly the same meaning; in other expressions in which the result of the increment or decrement operation is evaluated, they may have an important difference in their meaning: In the case that the increase operator is used as a prefix (<code>++x</code>) of the value, the expression evaluates to the final value of <code>x</code>, once it is already increased. On the other hand, in case that it is used as a suffix (<code>x++</code>), the value is also increased, but the expression evaluates to the value that x had before being increased. Notice the difference:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Example 1</th><th>Example 2</th></tr>
<tr><td><code>
x = 3;<br/>
y = ++x;<br/>
// x contains 4, y contains 4<br/>
</code></td>
<td><code>
x = 3;<br/>
y = x++;<br/>
// x contains 4, y contains 3<br/>
</code></td></tr>
</tbody></table>
<br/>
In <i>Example 1</i>, the value assigned to <code>y</code> is the value of <code>x</code> after being increased. While in <i>Example 2</i>, it is the value <code>x</code> had before being increased.<br/>
</section>
<br/>
<section id=""relational"">
<h3>Relational and comparison operators ( ==, !=, &gt;, &lt;, &gt;=, &lt;= )</h3>
Two expressions can be compared using relational and equality operators. For example, to know if two values are equal or if one is greater than the other.<br/>
<br/>
The result of such an operation is either true or false (i.e., a Boolean value).<br/>
<br/>
The relational operators in C++ are:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>operator</th><th>description</th></tr>
<tr><td><code>==</code></td><td>Equal to</td></tr>
<tr><td><code>!=</code></td><td>Not equal to</td></tr>
<tr><td><code>&lt;</code></td><td>Less than</td></tr>
<tr><td><code>&gt;</code></td><td>Greater than</td></tr>
<tr><td><code>&lt;=</code></td><td>Less than or equal to</td></tr>
<tr><td><code>&gt;=</code></td><td>Greater than or equal to</td></tr>
</tbody></table>
<br/>
Here there are some examples:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code>(7 == 5)     <cite>// evaluates to false</cite>
(5 &gt; 4)      <cite>// evaluates to true</cite>
(3 != 2)     <cite>// evaluates to true</cite>
(6 &gt;= 6)     <cite>// evaluates to true</cite>
(5 &lt; 5)      <cite>// evaluates to false </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Of course, it's not just numeric constants that can be compared, but just any value, including, of course, variables. Suppose that <code>a=2</code>, <code>b=3</code> and <code>c=6</code>, then:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>(a == 5)     <cite>// evaluates to false, since a is not equal to 5</cite>
(a*b &gt;= c)   <cite>// evaluates to true, since (2*3 &gt;= 6) is true</cite>
(b+4 &gt; a*c)  <cite>// evaluates to false, since (3+4 &gt; 2*6) is false</cite>
((b=2) == a) <cite>// evaluates to true </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Be careful! The assignment operator (operator <code>=</code>, with one equal sign) is not the same as the equality comparison operator (operator <code>==</code>, with two equal signs); the first one (<code>=</code>) assigns the value on the right-hand to the variable on its left, while the other (<code>==</code>) compares whether the values on both sides of the operator are equal. Therefore, in the last expression (<code>(b=2) == a</code>), we first assigned the value <code>2</code> to <code>b</code> and then we compared it to <code>a</code> (that also stores the value 2), yielding <code>true</code>.<br/>
</section>
<br/>
<section id=""logical"">
<h3>Logical operators ( !, &amp;&amp;, || )</h3>
The operator <code>!</code> is the C++ operator for the Boolean operation NOT. It has only one operand, to its right, and inverts it, producing <code>false</code> if its operand is <code>true</code>, and <code>true</code> if its operand is <code>false</code>. Basically, it returns the opposite Boolean value of evaluating its operand. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>!(5 == 5)   <cite>// evaluates to false because the expression at its right (5 == 5) is true</cite>
!(6 &lt;= 4)   <cite>// evaluates to true because (6 &lt;= 4) would be false</cite>
!<var>true</var>       <cite>// evaluates to false</cite>
!<var>false</var>      <cite>// evaluates to true </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The logical operators <code>&amp;&amp;</code> and <code>||</code> are used when evaluating two expressions to obtain a single relational result. The operator <code>&amp;&amp;</code> corresponds to the Boolean logical operation AND, which yields <code>true</code> if both its operands are <code>true</code>, and <code>false</code> otherwise. The following panel shows the result of operator <code>&amp;&amp;</code> evaluating the expression <code>a&amp;&amp;b</code>:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th colspan=""3"">&amp;&amp; OPERATOR (and)</th></tr>
<tr><th><code>a</code></th><th><code>b</code></th><th><code>a &amp;&amp; b</code></th></tr>
<tr><td><code>true</code></td><td><code>true</code></td><td><code>true</code></td></tr>
<tr><td><code>true</code></td><td><code>false</code></td><td><code>false</code></td></tr>
<tr><td><code>false</code></td><td><code>true</code></td><td><code>false</code></td></tr>
<tr><td><code>false</code></td><td><code>false</code></td><td><code>false</code></td></tr>
</tbody></table>
<br/>
The operator <code>||</code> corresponds to the Boolean logical operation OR, which yields <code>true</code> if either of its operands is <code>true</code>, thus being false only when both operands are false. Here are the possible results of <code>a||b</code>:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th colspan=""3"">|| OPERATOR (or)</th></tr>
<tr><th><code>a</code></th><th><code>b</code></th><th><code>a || b</code></th></tr>
<tr><td><code>true</code></td><td><code>true</code></td><td><code>true</code></td></tr>
<tr><td><code>true</code></td><td><code>false</code></td><td><code>true</code></td></tr>
<tr><td><code>false</code></td><td><code>true</code></td><td><code>true</code></td></tr>
<tr><td><code>false</code></td><td><code>false</code></td><td><code>false</code></td></tr>
</tbody></table>
<br/>
For example:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>( (5 == 5) &amp;&amp; (3 &gt; 6) )  <cite>// evaluates to false ( true &amp;&amp; false )</cite>
( (5 == 5) || (3 &gt; 6) )  <cite>// evaluates to true ( true || false ) </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
When using the logical operators, C++ only evaluates what is necessary from left to right to come up with the combined relational result, ignoring the rest. Therefore, in the last example (<code>(5==5)||(3&gt;6)</code>), C++ evaluates first whether <code>5==5</code> is <code>true</code>, and if so, it never checks whether <code>3&gt;6</code> is <code>true</code> or not. This is known as <i>short-circuit evaluation</i>, and works like this for these operators:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>operator</th><th>short-circuit</th></tr>
<tr><td><code>&amp;&amp;</code></td><td>if the left-hand side expression is <code>false</code>, the combined result is <code>false</code> (the right-hand side expression is never evaluated).</td></tr>
<tr><td><code>||</code></td><td>if the left-hand side expression is <code>true</code>, the combined result is <code>true</code> (the right-hand side expression is never evaluated).</td></tr>
</tbody></table>
<br/>
This is mostly important when the right-hand expression has side effects, such as altering values:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> ( (i&lt;10) &amp;&amp; (++i&lt;n) ) { <cite>/*...*/</cite> }   <cite>// note that the condition increments i </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Here, the combined conditional expression would increase <code>i</code> by one, but only if the condition on the left of <code>&amp;&amp;</code> is <code>true</code>, because otherwise, the condition on the right-hand side (<code>++i&lt;n</code>) is never evaluated.<br/>
</section>
<br/>
<section id=""conditional"">
<h3>Conditional ternary operator ( ? )</h3>
The conditional operator evaluates an expression, returning one value if that expression evaluates to <code>true</code>, and a different one if the expression evaluates as <code>false</code>. Its syntax is:<br/>
<br/>
<code>condition ? result1 : result2</code> <br/>
<br/>
If <code>condition</code> is <code>true</code>, the entire expression evaluates to <code>result1</code>, and otherwise to <code>result2</code>.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>7==5 ? 4 : 3     <cite>// evaluates to 3, since 7 is not equal to 5.</cite>
7==5+2 ? 4 : 3   <cite>// evaluates to 4, since 7 is equal to 5+2.</cite>
5&gt;3 ? a : b      <cite>// evaluates to the value of a, since 5 is greater than 3.</cite>
a&gt;b ? a : b      <cite>// evaluates to whichever is greater, a or b.  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/></code></pre></td>
<td class=""source""><pre><code><cite>// conditional operator</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> a,b,c;

  a=2;
  b=7;
  c = (a&gt;b) ? a : b;

  cout &lt;&lt; c &lt;&lt; <kbd>'\n'</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>7</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, <code>a</code> was 2, and <code>b</code> was 7, so the expression being evaluated (<code>a&gt;b</code>) was not <code>true</code>, thus the first value specified after the question mark was discarded in favor of the second value (the one after the colon) which was <code>b</code> (with a value of 7).<br/>
</section>
<br/>
<section id=""comma"">
<h3>Comma operator ( , )</h3>
The comma operator (<code>,</code>) is used to separate two or more expressions that are included where only one expression is expected. When the set of expressions has to be evaluated for a value, only the right-most expression is considered.<br/>
<br/>
For example, the following code:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>a = (b=3, b+2);</code></pre></td>
</tr></tbody></table></div>
<br/>
would first assign the value 3 to <code>b</code>, and then assign <code>b+2</code> to variable <code>a</code>. So, at the end, variable <code>a</code> would contain the value 5 while variable <code>b</code> would contain value 3.<br/>
</section>
<br/>
<section id=""bitwise"">
<h3>Bitwise operators ( &amp;, |, ^, ~, &lt;&lt;, &gt;&gt; )</h3>
Bitwise operators modify variables considering the bit patterns that represent the values they store.<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>operator</th><th>asm equivalent</th><th>description</th></tr>
<tr><td><code>&amp;</code></td><td><code>AND</code></td><td>Bitwise AND</td></tr>
<tr><td><code>|</code></td><td><code>OR</code></td><td>Bitwise inclusive OR</td></tr>
<tr><td><code>^</code></td><td><code>XOR</code></td><td>Bitwise exclusive OR</td></tr>
<tr><td><code>~</code></td><td><code>NOT</code></td><td>Unary complement (bit inversion)</td></tr>
<tr><td><code>&lt;&lt;</code></td><td><code>SHL</code></td><td>Shift bits left</td></tr>
<tr><td><code>&gt;&gt;</code></td><td><code>SHR</code></td><td>Shift bits right</td></tr>
</tbody></table>
</section>
<br/>
<section id=""typecast"">
<h3>Explicit type casting operator</h3>
Type casting operators allow to convert a value of a given type to another type. There are several ways to do this in C++. The simplest one, which has been inherited from the C language, is to precede the expression to be converted by the new type enclosed between parentheses (()):<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> i;
<var>float</var> f = 3.14;
i = (<var>int</var>) f;</code></pre></td>
</tr></tbody></table></div>
<br/>
The previous code converts the floating-point number <code>3.14</code> to an integer value (<code>3</code>); the remainder is lost. Here, the typecasting operator was <code>(int)</code>. Another way to do the same thing in C++ is to use the functional notation preceding the expression to be converted by the type and enclosing the expression between parentheses:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>i = <var>int</var> (f);</code></pre></td>
</tr></tbody></table></div>
<br/>
Both ways of casting types are valid in C++.<br/>
</section>
<br/>
<section id=""sizeof"">
<h3>sizeof</h3>
This operator accepts one parameter, which can be either a type or a variable, and returns the size in bytes of that type or object:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = <var>sizeof</var> (<var>char</var>);</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, <code>x</code> is assigned the value <code>1</code>, because <code>char</code> is a type with a size of one byte.<br/>
<br/>
The value returned by <code>sizeof</code> is a compile-time constant, so it is always determined before program execution.<br/>
</section>
<br/>
<section id=""other"">
<h3>Other operators</h3>
Later in these tutorials, we will see a few more operators, like the ones referring to pointers or the specifics for object-oriented programming.<br/>
</section>
<br/>
<section id=""precedence"">
<h3>Precedence of operators</h3>
A single expression may have multiple operators. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = 5 + 7 % 2;</code></pre></td>
</tr></tbody></table></div>
<br/>
In C++, the above expression always assigns 6 to variable <code>x</code>, because the <code>%</code> operator has a higher precedence than the <code>+</code> operator, and is always evaluated before. Parts of the expressions can be enclosed in parenthesis to override this precedence order, or to make explicitly clear the intended effect. Notice the difference:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>x = 5 + (7 % 2);    <cite>// x = 6 (same as without parenthesis)</cite>
x = (5 + 7) % 2;    <cite>// x = 0 </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
From greatest to smallest priority, C++ operators are evaluated in the following order:<br/>
<table class=""boxed""><tbody><tr><th>Level</th><th>Precedence group</th><th>Operator</th><th>Description</th><th>Grouping</th></tr>
<tr><td>1</td><td>Scope</td><td><code>::</code></td><td>scope qualifier</td><td>Left-to-right</td></tr>
<tr><td rowspan=""4"">2</td><td rowspan=""4"">Postfix (unary)</td><td><code>++ --</code></td><td>postfix increment / decrement</td><td rowspan=""4"">Left-to-right</td></tr>
<tr><td><code>()</code></td><td>functional forms</td></tr>
<tr><td><code>[]</code></td><td>subscript</td></tr>
<tr><td><code>. -&gt;</code></td><td>member access</td></tr>
<tr><td rowspan=""7"">3</td><td rowspan=""7"">Prefix (unary)</td><td><code>++ --</code></td><td>prefix increment / decrement</td><td rowspan=""7"">Right-to-left</td></tr>
<tr><td><code>~ !</code></td><td>bitwise NOT / logical NOT</td></tr>
<tr><td><code>+ -</code></td><td>unary prefix</td></tr>
<tr><td><code>&amp; *</code></td><td>reference / dereference</td></tr>
<tr><td><code>new delete</code></td><td>allocation / deallocation</td></tr>
<tr><td><code>sizeof</code></td><td>parameter pack</td></tr>
<tr><td><code>(<i>type</i>)</code></td><td>C-style type-casting</td></tr>
<tr><td>4</td><td>Pointer-to-member</td><td><code>.* -&gt;*</code></td><td>access pointer</td><td>Left-to-right</td></tr>
<tr><td>5</td><td>Arithmetic: scaling</td><td><code>* / %</code></td><td>multiply, divide, modulo</td><td>Left-to-right</td></tr>
<tr><td>6</td><td>Arithmetic: addition</td><td><code>+ -</code></td><td>addition, subtraction</td><td>Left-to-right</td></tr>
<tr><td>7</td><td>Bitwise shift</td><td><code>&lt;&lt; &gt;&gt;</code></td><td>shift left, shift right</td><td>Left-to-right</td></tr>
<tr><td>8</td><td>Relational</td><td><code>&lt; &gt; &lt;= &gt;=</code></td><td>comparison operators</td><td>Left-to-right</td></tr>
<tr><td>9</td><td>Equality</td><td><code>== !=</code></td><td>equality / inequality</td><td>Left-to-right</td></tr>
<tr><td>10</td><td>And</td><td><code>&amp;</code></td><td>bitwise AND</td><td>Left-to-right</td></tr>
<tr><td>11</td><td>Exclusive or</td><td><code>^</code></td><td>bitwise XOR</td><td>Left-to-right</td></tr>
<tr><td>12</td><td>Inclusive or</td><td><code>|</code></td><td>bitwise OR</td><td>Left-to-right</td></tr>
<tr><td>13</td><td>Conjunction</td><td><code>&amp;&amp;</code></td><td>logical AND</td><td>Left-to-right</td></tr>
<tr><td>14</td><td>Disjunction</td><td><code>||</code></td><td>logical OR</td><td>Left-to-right</td></tr>
<tr><td rowspan=""2"">15</td><td rowspan=""2"">Assignment-level expressions</td><td><code>= *= /= %= += -=<br/>
&gt;&gt;= &lt;&lt;= &amp;= ^= |=</code></td><td>assignment / compound assignment</td><td rowspan=""2"">Right-to-left</td></tr>
<tr><td><code>?:</code></td><td>conditional operator</td></tr>
<tr><td>16</td><td>Sequencing</td><td><code>,</code></td><td>comma separator</td><td>Left-to-right</td></tr>
</tbody></table>
<br/>
When an expression has two operators with the same precedence level, <i>grouping</i> determines which one is evaluated first: either left-to-right or right-to-left.<br/>
<br/>
Enclosing all sub-statements in parentheses (even those unnecessary because of their precedence) improves code readability.<br/>
</section></div>"
Basics of C++,Basic Input/Output,"<div class=""C_doc""><h1>Basic Input/Output</h1>
<section id=""intro"">
The example programs of the previous sections provided little interaction with the user, if any at all. They simply printed simple values on screen, but the standard library provides many additional ways to interact with the user via its input/output features. This section will present a short introduction to some of the most useful. <br/>
<br/>
C++ uses a convenient abstraction called <i>streams</i> to perform input and output operations in sequential media such as the screen, the keyboard or a file. A <dfn>stream</dfn> is an entity where a program can either insert or extract characters to/from. There is no need to know details about the media associated to the stream or any of its internal specifications. All we need to know is that streams are a source/destination of characters, and  that these characters are provided/accepted sequentially (i.e., one after another).<br/>
<br/>
The standard library defines a handful of stream objects that can be used to access what are considered the standard sources and destinations of characters by the environment where the program runs:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>stream</th><th>description</th></tr>
<tr><td><code>cin</code></td><td>standard input stream</td></tr>
<tr><td><code>cout</code></td><td>standard output stream</td></tr>
<tr><td><code>cerr</code></td><td>standard error (output) stream</td></tr>
<tr><td><code>clog</code></td><td>standard logging (output) stream</td></tr>
</tbody></table>
<br/>
We are going to see in more detail only <code>cout</code> and <code>cin</code> (the standard output and input streams); <code>cerr</code> and <code>clog</code> are also output streams, so they essentially work like <code>cout</code>, with the only difference being that they identify streams for specific purposes: error messages and logging; which, in many cases, in most environment setups, they actually do the exact same thing: they print on screen, although they can also be individually redirected.<br/>
</section>
<br/>
<section id=""cout"">
<h3>Standard output (cout)</h3>
On most program environments, the standard output by default is the screen, and the C++ stream object defined to access it is <code>cout</code>.<br/>
<br/>
For formatted output operations, <code>cout</code> is used together with the <i>insertion operator</i>, which is written as <code>&lt;&lt;</code> (i.e., two ""less than"" signs).<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""Output sentence""</kbd>; <cite>// prints Output sentence on screen</cite>
cout &lt;&lt; 120;               <cite>// prints number 120 on screen</cite>
cout &lt;&lt; x;                 <cite>// prints the value of x on screen  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The <code>&lt;&lt;</code> operator inserts the data that follows it into the stream that precedes it. In the examples above, it inserted the literal string <code>Output sentence</code>, the number <code>120</code>, and the value of variable <code>x</code> into the standard output stream <code>cout</code>. Notice that the sentence in the first statement is enclosed in double quotes (<code>""</code>) because it is a string literal, while in the last one, <code>x</code> is not. The double quoting is what makes the difference; when the text is enclosed between them, the text is printed literally; when they are not, the text is interpreted as the identifier of a variable, and its value is printed instead. For example, these two sentences have very different results:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""Hello""</kbd>;  <cite>// prints Hello</cite>
cout &lt;&lt; Hello;    <cite>// prints the content of variable Hello </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Multiple insertion operations (&lt;&lt;) may be chained in a single statement:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""This ""</kbd> &lt;&lt; <kbd>"" is a ""</kbd> &lt;&lt; <kbd>""single C++ statement""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This last statement would print the text <code>This is a single C++ statement</code>. Chaining insertions is especially useful to mix literals and variables in a single statement:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""I am ""</kbd> &lt;&lt; age &lt;&lt; <kbd>"" years old and my zipcode is ""</kbd> &lt;&lt; zipcode;</code></pre></td>
</tr></tbody></table></div>
<br/>
Assuming the <var>age</var> variable contains the value 24 and the <var>zipcode</var> variable contains 90064, the output of the previous statement would be: <br/>
<br/>
<code>I am 24 years old and my zipcode is 90064</code>
<br/>
What cout does not do automatically is add line breaks at the end, unless instructed to do so. For example, take the following two statements inserting into <code>cout</code>:<br/>
cout &lt;&lt; ""This is a sentence."";<br/>
cout &lt;&lt; ""This is another sentence.""; <br/>
<br/>
The output would be in a single line, without any line breaks in between. Something like:<br/>
<br/>
<code>This is a sentence.This is another sentence.</code>
<br/>
To insert a line break, a new-line character shall be inserted at the exact position the line should be broken. In C++, a new-line character can be specified as <code>\n</code> (i.e., a backslash character followed by a lowercase <code>n</code>). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""First sentence.\n""</kbd>;
cout &lt;&lt; <kbd>""Second sentence.\nThird sentence.""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This produces the following output: <br/>
<br/>
<code>
First sentence.<br/>
Second sentence.<br/>
Third sentence.<br/>
</code>
<br/>
Alternatively, the <code>endl</code> manipulator can also be used to break lines. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""First sentence.""</kbd> &lt;&lt; endl;
cout &lt;&lt; <kbd>""Second sentence.""</kbd> &lt;&lt; endl;</code></pre></td>
</tr></tbody></table></div>
<br/>
This would print:<br/>
<br/>
<code>
First sentence.<br/>
Second sentence.<br/>
</code>
<br/>
The <code>endl</code> manipulator produces a newline character, exactly as the insertion of <code>'\n'</code> does; but it also has an additional behavior: the stream's buffer (if any) is flushed, which means that the output is requested to be physically written to the device, if it wasn't already. This affects mainly <i>fully buffered</i> streams, and <code>cout</code> is (generally) not a <i>fully buffered</i> stream. Still, it is generally a good idea to use <code>endl</code> only when flushing the stream would be a feature and <code>'\n'</code> when it would not. Bear in mind that a flushing operation incurs a certain overhead, and on some devices it may produce a delay.<br/>
</section>
<br/>
<section id=""cin"">
<h3>Standard input (cin)</h3>
In most program environments, the standard input by default is the keyboard, and the C++ stream object defined to access it is <code>cin</code>.<br/>
<br/>
For formatted input operations, <code>cin</code> is used together with the extraction operator, which is written as <code>&gt;&gt;</code> (i.e., two ""greater than"" signs). This operator is then followed by the variable where the extracted data is stored. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> age;
cin &gt;&gt; age;</code></pre></td>
</tr></tbody></table></div>
<br/>
The first statement declares a variable of type <code>int</code> called <code>age</code>, and the second extracts from <code>cin</code> a value to be stored in it. This operation makes the program wait for input from <code>cin</code>; generally, this means that the program will wait for the user to enter some sequence with the keyboard. In this case, note that the characters introduced using the keyboard are only transmitted to the program when the <kbd>ENTER</kbd> (or <kbd>RETURN</kbd>) key is pressed. Once the statement with the extraction operation on <code>cin</code> is reached, the program will wait for as long as needed until some input is introduced.<br/>
<br/>
The extraction operation on <code>cin</code> uses the type of the variable after the <code>&gt;&gt;</code> operator to determine how it interprets the characters read from the input; if it is an integer, the format expected is a series of digits, if a string a sequence of characters, etc.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// i/o example</cite>

<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> i;
  cout &lt;&lt; <kbd>""Please enter an integer value: ""</kbd>;
  cin &gt;&gt; i;
  cout &lt;&lt; <kbd>""The value you entered is ""</kbd> &lt;&lt; i;
  cout &lt;&lt; <kbd>"" and its double is ""</kbd> &lt;&lt; i*2 &lt;&lt; <kbd>"".\n""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>Please enter an integer value: 702
The value you entered is 702 and its double is 1404.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
As you can see, extracting from <code>cin</code> seems to make the task of getting input from the standard input pretty simple and straightforward. But this method also has a big drawback. What happens in the example above if the user enters something else that cannot be interpreted as an integer? Well, in this case, the extraction operation fails. And this, by default, lets the program continue without setting a value for variable <code>i</code>, producing undetermined results if the value of <code>i</code> is used later.<br/>
<br/>
This is very poor program behavior. Most programs are expected to behave in an expected manner no matter what the user types, handling invalid values appropriately. Only very simple programs should rely on values extracted directly from <code>cin</code> without further checking. A little later we will see how <i>stringstreams</i> can be used to have better control over user input. <br/>
Extractions on <code>cin</code> can also be chained to request more than one datum in a single statement:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cin &gt;&gt; a &gt;&gt; b;</code></pre></td>
</tr></tbody></table></div>
<br/>
This is equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>cin &gt;&gt; a;
cin &gt;&gt; b;</code></pre></td>
</tr></tbody></table></div>
<br/>
In both cases, the user is expected to introduce two values, one for variable <code>a</code>, and another for variable <code>b</code>. Any kind of space is used to separate two consecutive input operations; this may either be a space, a tab, or a new-line character.<br/>
</section>
<br/>
<section id=""cin_and_strings"">
<h3>cin and strings</h3>
The extraction operator can be used on <code>cin</code> to get strings of characters in the same way as with fundamental data types:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>string mystring;
cin &gt;&gt; mystring;</code></pre></td>
</tr></tbody></table></div>
<br/>
However, <code>cin</code> extraction always considers spaces (whitespaces, tabs, new-line...) as terminating the value being extracted, and thus extracting a string means to always extract a single word, not a phrase or an entire sentence.<br/>
<br/>
To get an entire line from <code>cin</code>, there exists a function, called <code>getline</code>, that takes the stream (<code>cin</code>) as first argument, and the string variable as second. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// cin with strings</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystr;
  cout &lt;&lt; <kbd>""What's your name? ""</kbd>;
  getline (cin, mystr);
  cout &lt;&lt; <kbd>""Hello ""</kbd> &lt;&lt; mystr &lt;&lt; <kbd>"".\n""</kbd>;
  cout &lt;&lt; <kbd>""What is your favorite team? ""</kbd>;
  getline (cin, mystr);
  cout &lt;&lt; <kbd>""I like ""</kbd> &lt;&lt; mystr &lt;&lt; <kbd>"" too!\n""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>What's your name? Homer Simpson
Hello Homer Simpson.
What is your favorite team? The Isotopes
I like The Isotopes too!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice how in both calls to <code>getline</code>, we used the same string identifier (<code>mystr</code>). What the program does in the second call is simply replace the previous content with the new one that is introduced.<br/>
<br/>
The standard behavior that most users expect from a console program is that each time the program queries the user for input, the user introduces the field, and then presses <kbd>ENTER</kbd> (or <kbd>RETURN</kbd>). That is to say, input is generally expected to happen in terms of lines on console programs, and this can be achieved by using <code>getline</code> to obtain input from the user. Therefore, unless you have a strong reason not to, you should always use <code>getline</code> to get input in your console programs instead of extracting from <code>cin</code>.<br/>
</section>
<br/>
<section id=""stringstream"">
<h3>stringstream</h3>
The standard header <code><a href=""/&lt;sstream&gt;"">&lt;sstream&gt;</a></code> defines a type called <code><a href=""/stringstream"">stringstream</a></code> that allows a string to be treated as a stream, and thus allowing extraction or insertion operations from/to strings in the same way as they are performed on <code>cin</code> and <code>cout</code>. This feature is most useful to convert strings to numerical values and vice versa. For example, in order to extract an integer from a string we can write:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>string mystr (<kbd>""1204""</kbd>);
<var>int</var> myint;
stringstream(mystr) &gt;&gt; myint;</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares a <code>string</code> with initialized to a value of <code>""1204""</code>, and a variable of type <code>int</code>. Then, the third line uses this variable to extract from a <code>stringstream</code> constructed from the string. This piece of code stores the numerical value <code>1204</code> in the variable called <code>myint</code>.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// stringstreams</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string mystr;
  <var>float</var> price=0;
  <var>int</var> quantity=0;

  cout &lt;&lt; <kbd>""Enter price: ""</kbd>;
  getline (cin,mystr);
  stringstream(mystr) &gt;&gt; price;
  cout &lt;&lt; <kbd>""Enter quantity: ""</kbd>;
  getline (cin,mystr);
  stringstream(mystr) &gt;&gt; quantity;
  cout &lt;&lt; <kbd>""Total price: ""</kbd> &lt;&lt; price*quantity &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>Enter price: 22.25
Enter quantity: 7
Total price: 155.75</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, we acquire numeric values from the <i>standard input</i> indirectly: Instead of extracting numeric values directly from <code>cin</code>, we get lines from it into a string object (<code>mystr</code>), and then we extract the values from this string into the variables <code>price</code> and <code>quantity</code>. Once these are numerical values, arithmetic operations can be performed on them, such as multiplying them to obtain a total price.<br/>
<br/>
With this approach of getting entire lines and extracting their contents, we separate the process of getting user input from its interpretation as data, allowing the input process to be what the user expects, and at the same time gaining more control over the transformation of its content into useful data by the program.<br/>
</section></div>"
Program structure,Control Structures,"<div class=""C_doc""><h1>Statements and flow control</h1>
<section id=""statement"">
A simple C++ statement is each of the individual instructions of a program, like the variable declarations and expressions seen in previous sections. They always end with a semicolon (<code>;</code>), and are executed in the same order in which they appear in a program.<br/>
<br/>
But programs are not limited to a linear sequence of statements. During its process, a program may repeat segments of code, or take decisions and bifurcate. For that purpose, C++ provides flow control statements that serve to specify what has to be done by our program, when, and under which circumstances.<br/>
<br/>
Many of the flow control statements explained in this section require a generic (sub)statement as part of its syntax. This statement may either be a simple C++ statement, -such as a single instruction, terminated with a semicolon (<code>;</code>) - or a compound statement. A compound statement is a group of statements (each of them terminated by its own semicolon), but all grouped together in a block, enclosed in curly braces: {}:<br/>
<br/>
<code>{ statement1; statement2; statement3; }</code> <br/>
<br/>
The entire block is considered a single statement (composed itself of multiple substatements). Whenever a generic statement is part of the syntax of a flow control statement, this can either be a simple statement or a compound statement.<br/>
</section>
<br/>
<section id=""ifelse"">
<h3>Selection statements: if and else</h3>
The <code>if</code> keyword is used to execute a statement or block, if, and only if, a condition is fulfilled. Its syntax is:<br/>
<br/>
<code>if (condition) statement</code> <br/>
<br/>
Here, <code>condition</code> is the expression that is being evaluated. If this <code>condition</code> is true, <code>statement</code> is executed. If it is false, <code>statement</code> is not executed (it is simply ignored), and the program continues right after the entire selection statement.<br/>
For example, the following code fragment prints the message <code>(x is 100)</code>, only if the value stored in the <code>x</code> variable is indeed 100:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (x == 100)
  cout &lt;&lt; <kbd>""x is 100""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
If <code>x</code> is not exactly 100, this statement is ignored, and nothing is printed.<br/>
<br/>
If you want to include more than a single statement to be executed when the condition is fulfilled, these statements shall be enclosed in braces (<code>{}</code>), forming a block:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (x == 100)
{
   cout &lt;&lt; <kbd>""x is ""</kbd>;
   cout &lt;&lt; x;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
As usual, indentation and line breaks in the code have no effect, so the above code is equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (x == 100) { cout &lt;&lt; <kbd>""x is ""</kbd>; cout &lt;&lt; x; }</code></pre></td>
</tr></tbody></table></div>
<br/>
Selection statements with <code>if</code> can also specify what happens when the condition is not fulfilled, by using the <code>else</code> keyword to introduce an alternative statement. Its syntax is:<br/>
<br/>
<code>
if (condition) statement1 else statement2<br/>
</code>
<br/>
where <code>statement1</code> is executed in case condition is true, and in case it is not, <code>statement2</code> is executed.<br/>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (x == 100)
  cout &lt;&lt; <kbd>""x is 100""</kbd>;
<var>else</var>
  cout &lt;&lt; <kbd>""x is not 100""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This prints <code>x is 100</code>, if indeed x has a value of 100, but if it does not, and only if it does not, it prints <code>x is not 100</code> instead.<br/>
Several if + else structures can be concatenated with the intention of checking a range of values. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (x &gt; 0)
  cout &lt;&lt; <kbd>""x is positive""</kbd>;
<var>else</var> <var>if</var> (x &lt; 0)
  cout &lt;&lt; <kbd>""x is negative""</kbd>;
<var>else</var>
  cout &lt;&lt; <kbd>""x is 0""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This prints whether x is positive, negative, or zero by concatenating two if-else structures. Again, it would have also been possible to execute more than a single statement per case by grouping them into blocks enclosed in braces: <code>{}</code>.<br/>
</section>
<br/>
<section id=""loops"">
<h3>Iteration statements (loops)</h3>
Loops repeat a statement a certain number of times, or while a condition is fulfilled. They are introduced by the keywords <code>while</code>, <code>do</code>, and <code>for</code>.<br/>
<br/>
<div id=""while"">
<h4>The while loop</h4>
The simplest kind of loop is the while-loop. Its syntax is:<br/>
<br/>
<code>
while (expression) statement<br/>
</code>
<br/>
The while-loop simply repeats <code>statement</code> while <code>expression</code> is true. If, after any execution of <code>statement</code>, <code>expression</code> is no longer true, the loop ends, and the program continues right after the loop. For example, let's have a look at a countdown using a while-loop:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// custom countdown using while</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> n = 10;

  <var>while</var> (n&gt;0) {
    cout &lt;&lt; n &lt;&lt; <kbd>"", ""</kbd>;
    --n;
  }

  cout &lt;&lt; <kbd>""liftoff!\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, liftoff!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The first statement in <code>main</code> sets <var>n</var> to a value of 10. This is the first number in the countdown. Then the while-loop begins: if this value fulfills the condition <code>n&gt;0</code> (that <var>n</var> is greater than zero), then the block that follows the condition is executed, and repeated for as long as the condition (<code>n&gt;0</code>) remains being true.<br/>
<br/>
The whole process of the previous program can be interpreted according to the following script (beginning in <code>main</code>):<br/>
<br/>
<ol>
<li><code>n</code> is assigned a value</li>
<li>The <code>while</code> condition is checked (<code>n&gt;0</code>). At this point there are two possibilities:<br/>
<ul>
<li>condition is true: the statement is executed (to step 3)<br/>
</li><li>condition is false: ignore statement and continue after it (to step 5)<br/>
</li></ul>
</li>
<li>Execute statement:<br/>
<code>
cout &lt;&lt; n &lt;&lt; "", "";<br/>
--n;<br/>
</code>
(prints the value of <code>n</code> and decreases <code>n</code> by 1)<br/>
</li>
<li>End of block. Return automatically to step 2.</li>
<li>Continue the program right after the block:<br/>
print <code>liftoff!</code> and end the program.</li>
</ol>
<br/>
A thing to consider with while-loops is that the loop should end at some point, and thus the statement shall alter values checked in the condition in some way, so as to force it to become false at some point. Otherwise, the loop will continue looping forever. In this case, the loop includes <code>--n</code>, that decreases the value of the variable that is being evaluated in the condition (<code>n</code>) by one - this will eventually make the condition (<code>n&gt;0</code>) false after a certain number of loop iterations. To be more specific, after 10 iterations, <code>n</code> becomes 0, making the condition no longer true, and ending the while-loop.<br/>
<br/>
Note that the complexity of this loop is trivial for a computer, and so the whole countdown is performed instantly, without any practical delay between elements of the count (if interested, see <code><a href=""/sleep_for"">sleep_for</a></code> for a countdown example with delays).<br/>
</div>
<br/>
<div id=""dowhile"">
<h4>The do-while loop</h4>
A very similar loop is the do-while loop, whose syntax is:<br/>
<br/>
<code>
do statement while (condition);<br/>
</code>
<br/>
It behaves like a while-loop, except that <code>condition</code> is evaluated after the execution of <code>statement</code> instead of before, guaranteeing at least one execution of <code>statement</code>, even if <code>condition</code> is never fulfilled. For example, the following example program echoes any text the user introduces until the user enters goodbye:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// echo machine</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string str;
  <var>do</var> {
    cout &lt;&lt; <kbd>""Enter text: ""</kbd>;
    getline (cin,str);
    cout &lt;&lt; <kbd>""You entered: ""</kbd> &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
  } <var>while</var> (str != <kbd>""goodbye""</kbd>);
}</code></pre></td>
<td class=""output""><pre><samp>Enter text: hello
You entered: hello
Enter text: who's there?
You entered: who's there?
Enter text: goodbye
You entered: goodbye</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The do-while loop is usually preferred over a while-loop when the <code>statement</code> needs to be executed at least once, such as when the condition that is checked to end of the loop is determined within the loop statement itself. In the previous example, the user input within the block is what will determine if the loop ends. And thus, even if the user wants to end the loop as soon as possible by entering <samp>goodbye</samp>, the block in the loop needs to be executed at least once to prompt for input, and the condition can, in fact, only be determined after it is executed.<br/>
</div>
<br/>
<div id=""for"">
<h4>The for loop</h4>
The <code>for</code> loop is designed to iterate a number of times. Its syntax is:<br/>
<br/>
<code>
for (initialization; condition; increase) statement;<br/>
</code>
<br/>
Like the while-loop, this loop repeats <code>statement</code> while <code>condition</code> is true. But, in addition, the for loop provides specific locations to contain an <code>initialization</code> and an <code>increase</code> expression, executed before the loop begins the first time, and after each iteration, respectively. Therefore, it is especially useful to use counter variables as <code>condition</code>.<br/>
<br/>
It works in the following way:<br/>
<br/>
<ol>
<li><code>initialization</code> is executed. Generally, this declares a counter variable, and sets it to some initial value. This is executed a single time, at the beginning of the loop.</li>
<li><code>condition</code> is checked. If it is true, the loop continues; otherwise, the loop ends, and <code>statement</code> is skipped, going directly to step 5.</li>
<li><code>statement</code> is executed. As usual, it can be either a single statement or a block enclosed in curly braces <code>{ }</code>.</li>
<li><code>increase</code> is executed, and the loop gets back to step 2.</li>
<li>the loop ends: execution continues by the next statement after it.</li>
</ol>
<br/>
Here is the countdown example using a for loop:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// countdown using a for loop</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>for</var> (<var>int</var> n=10; n&gt;0; n--) {
    cout &lt;&lt; n &lt;&lt; <kbd>"", ""</kbd>;
  }
  cout &lt;&lt; <kbd>""liftoff!\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, liftoff!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The three fields in a for-loop are optional. They can be left empty, but in all cases the semicolon signs between them are required. For example, <code>for (;n&lt;10;)</code> is a loop without <i>initialization</i> or <i>increase</i> (equivalent to a while-loop); and <code>for (;n&lt;10;++n)</code> is a loop with <i>increase</i>, but no <i>initialization</i> (maybe because the variable was already initialized before the loop). A loop with no <i>condition</i> is equivalent to a loop with <code>true</code> as condition (i.e., an infinite loop).<br/>
<br/>
Because each of the fields is executed in a particular time in the life cycle of a loop, it may be useful to execute more than a single expression as any of <i>initialization</i>, <i>condition</i>, or <i>statement</i>. Unfortunately, these are not statements, but rather, simple expressions, and thus cannot be replaced by a block. As expressions, they can, however, make use of the comma operator (<code>,</code>): This operator is an expression separator, and can separate multiple expressions where only one is generally expected. For example, using it, it would be possible for a for loop to handle two counter variables, initializing and increasing both:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>for</var> ( n=0, i=100 ; n!=i ; ++n, --i )
{
   <cite>// whatever here...</cite>
}</code></pre></td>
</tr></tbody></table></div>
<br/>
This loop will execute 50 times if neither <code>n</code> or <code>i</code> are modified within the loop:<br/>
<br/>
<img alt="""" src=""for_loop.png""/> <br/>
<br/>
<code>n</code> starts with a value of 0, and <code>i</code> with 100, the condition is <code>n!=i</code> (i.e., that <code>n</code> is not equal to <code>i</code>). Because <code>n</code> is increased by one, and <code>i</code> decreased by one on each iteration, the loop's condition will become false after the 50th iteration, when both <code>n</code> and <code>i</code> are equal to 50.<br/>
</div>
<br/>
<div id=""rangefor"">
<h4>Range-based for loop</h4>
The for-loop has another syntax, which is used exclusively with ranges:<br/>
<br/>
<code>
for ( declaration : range ) statement;<br/>
</code>
<br/>
This kind of for loop iterates over all the elements in <code>range</code>, where <code>declaration</code> declares some variable able to take the value of an element in this range. Ranges are sequences of elements, including arrays, containers, and any other type supporting the functions <samp>begin</samp> and <samp>end</samp>; Most of these types have not yet been introduced in this tutorial, but we are already acquainted with at least one kind of range: strings, which are sequences of characters.<br/>
<br/>
An example of range-based for loop using strings:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// range-based for loop</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  string str {<kbd>""Hello!""</kbd>};
  <var>for</var> (<var>char</var> c : str)
  {
    cout &lt;&lt; <kbd>""[""</kbd> &lt;&lt; c &lt;&lt; <kbd>""]""</kbd>;
  }
  cout &lt;&lt; <kbd>'\n'</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>[H][e][l][l][o][!]</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note how what precedes the colon (<code>:</code>) in the for loop is the declaration of a <code>char</code> variable (the elements in a string are of type <code>char</code>). We then use this variable, <code>c</code>, in the statement block to represent the value of each of the elements in the range.<br/>
<br/>
This loop is automatic and does not require the explicit declaration of any counter variable.<br/>
<br/>
Range based loops usually also make use of type deduction for the type of the elements with <code>auto</code>. Typically, the range-based loop above can also be written as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>for</var> (<var>auto</var> c : str)
  cout &lt;&lt; <kbd>""[""</kbd> &lt;&lt; c &lt;&lt; <kbd>""]""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, the type of <code>c</code> is automatically deduced as the type of the elements in <code>str</code>.<br/>
</div>
</section>
<br/>
<section id=""jumps"">
<h3>Jump statements</h3>
Jump statements allow altering the flow of a program by performing jumps to specific locations.<br/>
<br/>
<div id=""break"">
<h4>The break statement</h4>
<code>break</code> leaves a loop, even if the condition for its end is not fulfilled. It can be used to end an infinite loop, or to force it to end before its natural end. For example, let's stop the countdown before its natural end:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// break loop example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>for</var> (<var>int</var> n=10; n&gt;0; n--)
  {
    cout &lt;&lt; n &lt;&lt; <kbd>"", ""</kbd>;
    <var>if</var> (n==3)
    {
      cout &lt;&lt; <kbd>""countdown aborted!""</kbd>;
      <var>break</var>;
    }
  }
}</code></pre></td>
<td class=""output""><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, countdown aborted!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</div>
<br/>
<div id=""continue"">
<h4>The continue statement</h4>
The <code>continue</code> statement causes the program to skip the rest of the loop in the current iteration, as if the end of the statement block had been reached, causing it to jump to the start of the following iteration. For example, let's skip number 5 in our countdown:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// continue loop example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>for</var> (<var>int</var> n=10; n&gt;0; n--) {
    <var>if</var> (n==5) <var>continue</var>;
    cout &lt;&lt; n &lt;&lt; <kbd>"", ""</kbd>;
  }
  cout &lt;&lt; <kbd>""liftoff!\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>10, 9, 8, 7, 6, 4, 3, 2, 1, liftoff!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</div>
<br/>
<div id=""goto"">
<h4>The goto statement</h4>
<code>goto</code> allows to make an absolute jump to another point in the program. This unconditional jump ignores nesting levels, and does not cause any automatic stack unwinding. Therefore, it is a feature to use with care, and preferably within the same block of statements, especially in the presence of local variables.<br/>
<br/>
The destination point is identified by a <i>label</i>, which is then used as an argument for the <code>goto</code> statement. A <i>label</i> is made of a valid identifier followed by a colon (<code>:</code>).<br/>
<br/>
<code>goto</code> is generally deemed a low-level feature, with no particular use cases in modern higher-level programming paradigms generally used with C++. But, just as an example, here is a version of our countdown loop using goto:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// goto loop example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> n=10;
mylabel:
  cout &lt;&lt; n &lt;&lt; <kbd>"", ""</kbd>;
  n--;
  <var>if</var> (n&gt;0) <var>goto</var> mylabel;
  cout &lt;&lt; <kbd>""liftoff!\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>10, 9, 8, 7, 6, 5, 4, 3, 2, 1, liftoff!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</div>
</section>
<br/>
<section id=""switch"">
<h3>Another selection statement: switch.</h3>
The syntax of the switch statement is a bit peculiar. Its purpose is to check for a value among a number of possible constant expressions. It is something similar to concatenating <code>if</code>-<code>else</code> statements, but limited to constant expressions. Its most typical syntax is:<br/>
<br/>
<pre>code&gt;switch (expression)<br/>
{<br/>
  case constant1:<br/>
     group-of-statements-1;<br/>
     break;<br/>
  case constant2:<br/>
     group-of-statements-2;<br/>
     break;<br/>
  .<br/>
  .<br/>
  .<br/>
  default:<br/>
     default-group-of-statements<br/>
}
/code&gt;</pre>
<br/>
It works in the following way: <code>switch</code> evaluates <code>expression</code> and checks if it is equivalent to <code>constant1</code>; if it is, it executes <code>group-of-statements-1</code> until it finds the <code>break</code> statement. When it finds this <code>break</code> statement, the program jumps to the end of the entire <code>switch</code> statement (the closing brace).<br/>
<br/>
If expression was not equal to <code>constant1</code>, it is then checked against <code>constant2</code>. If it is equal to this, it executes <code>group-of-statements-2</code> until a <code>break</code> is found, when it jumps to the end of the switch.<br/>
<br/>
Finally, if the value of expression did not match any of the previously specified constants (there may be any number of these), the program executes the statements included after the <code>default:</code> label, if it exists (since it is optional).<br/>
<br/>
Both of the following code fragments have the same behavior, demonstrating the if-else equivalent of a switch statement:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>switch example</th><th>if-else equivalent</th></tr>
<tr><td>
<pre>code&gt;switch (x) {<br/>
  case 1:<br/>
    cout 

 ""x is 1"";<br/>
    break;<br/>
  case 2:<br/>
    cout 

 ""x is 2"";<br/>
    break;<br/>
  default:<br/>
    cout 

 ""value of x unknown"";<br/>
  }
/code&gt;</pre>
</td><td>
<pre>code&gt;if (x == 1) {<br/>
  cout 

 ""x is 1"";<br/>
}<br/>
else if (x == 2) {<br/>
  cout 

 ""x is 2"";<br/>
}<br/>
else {<br/>
  cout 

 ""value of x unknown"";<br/>
}<br/>

/code&gt;</pre></td></tr>
</tbody></table>
<br/>
The <code>switch</code> statement has a somewhat peculiar syntax inherited from the early times of the first C compilers, because it uses labels instead of blocks. In the most typical use (shown above), this means that <code>break</code> statements are needed after each group of statements for a particular label. If <code>break</code> is not included, all statements following the case (including those under any other labels) are also executed, until the end of the switch block or a jump statement (such as <code>break</code>) is reached.<br/>
<br/>
If the example above lacked the break statement after the first group for case one, the program would not jump automatically to the end of the switch block after printing <code>x is 1</code>, and would instead continue executing the statements in case two (thus printing also <code>x is 2</code>). It would then continue doing so until a <code>break</code> statement is encountered, or the end of the <code>switch</code> block. This makes unnecessary to enclose the statements for each case in braces <code>{}</code>, and can also be useful to execute the same group of statements for different possible values. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/></code></pre></td>
<td class=""source""><pre><code><var>switch</var> (x) {
  <var>case</var> 1:
  <var>case</var> 2:
  <var>case</var> 3:
    cout &lt;&lt; <kbd>""x is 1, 2 or 3""</kbd>;
    <var>break</var>;
  <var>default</var>:
    cout &lt;&lt; <kbd>""x is not 1, 2 nor 3""</kbd>;
  }</code></pre></td>
</tr></tbody></table></div>
<br/>
Notice that <code>switch</code> is limited to compare its evaluated expression against labels that are constant expressions. It is not possible to use variables as labels or ranges, because they are not valid C++ constant expressions.<br/>
<br/>
To check for ranges or values that are not constant, it is better to use concatenations of <code>if</code> and <code>else if</code> statements.<br/>
</section>
</div>"
Program structure,Functions,"<div class=""C_doc""><h1>Functions</h1>
<section id=""functions"">
Functions allow to structure programs in segments of code to perform individual tasks.<br/>
<br/>
In C++, a function is a group of statements that is given a name, and which can be called from some point of the program. The most common syntax to define a function is:<br/>
<br/>
<code>
type name ( parameter1, parameter2, ...) { statements }<br/>
</code>
<br/>
Where:<br/>
- <code>type</code> is the type of the value returned by the function.<br/>
- <code>name</code> is the identifier by which the function can be called.<br/>
- <code>parameters</code> (as many as needed): Each parameter consists of a type followed by an identifier, with each parameter being separated from the next by a comma. Each parameter looks very much like a regular variable declaration (for example: <code>int x</code>), and in fact acts within the function as a regular variable which is local to the function. The purpose of parameters is to allow passing arguments to the function from the location where it is called from.<br/>
- <code>statements</code> is the function's body. It is a block of statements surrounded by braces { } that specify what the function actually does.<br/>
<br/>
Let's have a look at an example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> addition (<var>int</var> a, <var>int</var> b)
{
  <var>int</var> r;
  r=a+b;
  <var>return</var> r;
}

<var>int</var> main ()
{
  <var>int</var> z;
  z = addition (5,3);
  cout &lt;&lt; <kbd>""The result is ""</kbd> &lt;&lt; z;
}</code></pre></td>
<td class=""output""><pre><samp>The result is 8</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This program is divided in two functions: <code>addition</code> and <code>main</code>. Remember that no matter the order in which they are defined, a C++ program always starts by calling <code>main</code>. In fact, <code>main</code> is the only function called automatically, and the code in any other function is only executed if its function is called from <code>main</code> (directly or indirectly).<br/>
<br/>
In the example above, <code>main</code> begins by declaring the variable <code>z</code> of type <code>int</code>, and right after that, it performs the first function call: it calls <code>addition</code>. The call to a function follows a structure very similar to its declaration. In the example above, the call to <code>addition</code> can be compared to its definition just a few lines earlier:<br/>
<br/>
<img alt="""" src=""function_arguments.png""/>
<br/>
The parameters in the function declaration have a clear correspondence to the arguments passed in the function call. The call passes two values, <code>5</code> and <code>3</code>, to the function; these correspond to the parameters <code>a</code> and <code>b</code>, declared for function <code>addition</code>.<br/>
<br/>
At the point at which the function is called from within main, the control is passed to function <code>addition</code>: here, execution of <code>main</code> is stopped, and will only resume once the <code>addition</code> function ends. At the moment of the function call, the value of both arguments (<code>5</code> and <code>3</code>) are copied to the local variables <code>int a</code> and <code>int b</code> within the function.<br/>
<br/>
Then, inside <code>addition</code>, another local variable is declared (<code>int r</code>), and by means of the expression <code>r=a+b</code>, the result of <code>a</code> plus <code>b</code> is assigned to <code>r</code>; which, for this case, where <code>a</code> is 5 and <code>b</code> is 3, means that 8 is assigned to <code>r</code>.<br/>
<br/>
The final statement within the function:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>return</var> r;</code></pre></td>
</tr></tbody></table></div>
<br/>
Ends function <code>addition</code>, and returns the control back to the point where the function was called; in this case: to function <code>main</code>. At this precise moment, the program resumes its course on <code>main</code> returning exactly at the same point at which it was interrupted by the call to <code>addition</code>. But additionally, because <code>addition</code> has a return type, the call is evaluated as having a value, and this value is the value specified in the return statement that ended <code>addition</code>: in this particular case, the value of the local variable <code>r</code>, which at the moment of the <code>return</code> statement had a value of 8.<br/>
<br/>
<img alt="""" src=""function_return_value.png""/>
<br/>
Therefore, the call to <code>addition</code> is an expression with the value returned by the function, and in this case, that value, 8, is assigned to <code>z</code>. It is as if the entire function call (<code>addition(5,3)</code>) was replaced by the value it returns (i.e., 8).<br/>
<br/>
Then main simply prints this value by calling: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""The result is ""</kbd> &lt;&lt; z;</code></pre></td>
</tr></tbody></table></div>
<br/>
A function can actually be called multiple times within a program, and its argument is naturally not limited just to literals:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> subtraction (<var>int</var> a, <var>int</var> b)
{
  <var>int</var> r;
  r=a-b;
  <var>return</var> r;
}

<var>int</var> main ()
{
  <var>int</var> x=5, y=3, z;
  z = subtraction (7,2);
  cout &lt;&lt; <kbd>""The first result is ""</kbd> &lt;&lt; z &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""The second result is ""</kbd> &lt;&lt; subtraction (7,2) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""The third result is ""</kbd> &lt;&lt; subtraction (x,y) &lt;&lt; <kbd>'\n'</kbd>;
  z= 4 + subtraction (x,y);
  cout &lt;&lt; <kbd>""The fourth result is ""</kbd> &lt;&lt; z &lt;&lt; <kbd>'\n'</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>The first result is 5
The second result is 5
The third result is 2
The fourth result is 6</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Similar to the <code>addition</code> function in the previous example, this example defines a <code>subtract</code> function, that simply returns the difference between its two parameters. This time, <code>main</code> calls this function several times, demonstrating more possible ways in which a function can be called.<br/>
<br/>
Let's examine each of these calls, bearing in mind that each function call is itself an expression that is evaluated as the value it returns. Again, you can think of it as if the function call was itself replaced by the returned value:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>z = subtraction (7,2);
cout &lt;&lt; <kbd>""The first result is ""</kbd> &lt;&lt; z;</code></pre></td>
</tr></tbody></table></div>
<br/>
If we replace the function call by the value it returns (i.e., 5), we would have:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>z = 5;
cout &lt;&lt; <kbd>""The first result is ""</kbd> &lt;&lt; z;</code></pre></td>
</tr></tbody></table></div>
<br/>
With the same procedure, we could interpret:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""The second result is ""</kbd> &lt;&lt; subtraction (7,2);</code></pre></td>
</tr></tbody></table></div>
<br/>
as:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""The second result is ""</kbd> &lt;&lt; 5;</code></pre></td>
</tr></tbody></table></div>
<br/>
since 5 is the value returned by <code>subtraction (7,2)</code>.<br/>
<br/>
In the case of:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""The third result is ""</kbd> &lt;&lt; subtraction (x,y);</code></pre></td>
</tr></tbody></table></div>
<br/>
The arguments passed to subtraction are variables instead of literals. That is also valid, and works fine. The function is called with the values <code>x</code> and <code>y</code> have at the moment of the call: 5 and 3 respectively, returning 2 as result. <br/>
<br/>
The fourth call is again similar:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>z = 4 + subtraction (x,y);</code></pre></td>
</tr></tbody></table></div>
<br/>
The only addition being that now the function call is also an operand of an addition operation. Again, the result is the same as if the function call was replaced by its result: 6. Note, that thanks to the commutative property of additions, the above can also be written as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>z = subtraction (x,y) + 4;</code></pre></td>
</tr></tbody></table></div>
<br/>
With exactly the same result. Note also that the semicolon does not necessarily go after the function call, but, as always, at the end of the whole statement. Again, the logic behind may be easily seen again by replacing the function calls by their returned value:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>z = 4 + 2;    <cite>// same as z = 4 + subtraction (x,y);</cite>
z = 2 + 4;    <cite>// same as z = subtraction (x,y) + 4; </cite></code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""void"">
<h3>Functions with no type. The use of void</h3>
The syntax shown above for functions:<br/>
<br/>
<code>
type name ( argument1, argument2 ...) { statements }<br/>
</code>
<br/>
Requires the declaration to begin with a type. This is the type of the value returned by the function. But what if the function does not need to return a value? In this case, the type to be used is <code>void</code>, which is a special type to represent the absence of value. For example, a function that simply prints a message may not need to return any value:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// void function example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> printmessage ()
{
  cout &lt;&lt; <kbd>""I'm a function!""</kbd>;
}

<var>int</var> main ()
{
  printmessage ();
}</code></pre></td>
<td class=""output""><pre><samp>I'm a function!</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
<code>void</code> can also be used in the function's parameter list to explicitly specify that the function takes no actual parameters when called. For example, <code>printmessage</code> could have been declared as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> printmessage (<var>void</var>)
{
  cout &lt;&lt; <kbd>""I'm a function!""</kbd>;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
In C++, an empty parameter list can be used instead of <code>void</code> with same meaning, but the use of <code>void</code> in the argument list was popularized by the C language, where this is a requirement.<br/>
<br/>
Something that in no case is optional are the parentheses that follow the function name, neither in its declaration nor when calling it. And even when the function takes no parameters, at least an empty pair of parentheses shall always be appended to the function name. See how <code>printmessage</code> was called in an earlier example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>printmessage ();</code></pre></td>
</tr></tbody></table></div>
<br/>
The parentheses are what differentiate functions from other kinds of declarations or statements. The following would not call the function:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>printmessage;</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""mainreturns"">
<h3>The return value of main</h3>
You may have noticed that the return type of <code>main</code> is <code>int</code>, but most examples in this and earlier chapters did not actually return any value from <code>main</code>.<br/>
<br/>
Well, there is a catch: If the execution of <code>main</code> ends normally without encountering a <code>return</code> statement the compiler assumes the function ends with an implicit return statement:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>return</var> 0;</code></pre></td>
</tr></tbody></table></div>
<br/>
Note that this only applies to function <code>main</code> for historical reasons. All other functions with a return type shall end with a proper <code>return</code> statement that includes a return value, even if this is never used.<br/>
<br/>
When <code>main</code> returns zero (either implicitly or explicitly), it is interpreted by the environment as that the program ended successfully. Other values may be returned by <code>main</code>, and some environments give access to that value to the caller in some way, although this behavior is not required nor necessarily portable between platforms. The values for <code>main</code> that are guaranteed to be interpreted in the same way on all platforms are:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>value</th><th>description</th></tr>
<tr><td><code>0</code></td><td>The program was successful</td></tr>
<tr><td><code><a href=""/EXIT_SUCCESS"">EXIT_SUCCESS</a></code></td><td>The program was successful (same as above).<br/>
This value is defined in header <code><a href=""/&lt;cstdlib&gt;"">&lt;cstdlib&gt;</a></code>.</td></tr>
<tr><td><code><a href=""/EXIT_FAILURE"">EXIT_FAILURE</a></code></td><td>The program failed.<br/>
This value is defined in header <code><a href=""/&lt;cstdlib&gt;"">&lt;cstdlib&gt;</a></code>.</td></tr>
</tbody></table>
<br/>
Because the implicit <code>return 0;</code> statement for <code>main</code> is a tricky exception, some authors consider it good practice to explicitly write the statement.<br/>
</section>
<br/>
<section id=""reference"">
<h3>Arguments passed by value and by reference</h3>
In the functions seen earlier, arguments have always been passed <i>by value</i>. This means that, when calling a function, what is passed to the function are the values of these arguments on the moment of the call, which are copied into the variables represented by the function parameters. For example, take:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x=5, y=3, z;
z = addition ( x, y );</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, function addition is passed 5 and 3, which are copies of the values of <code>x</code> and <code>y</code>, respectively. These values (5 and 3) are used to initialize the variables set as parameters in the function's definition, but any modification of these variables within the function has no effect on the values of the variables x and y outside it, because x and y were themselves not passed to the function on the call, but only copies of their values at that moment.<br/>
<br/>
<img alt="""" src=""function_arguments.png""/>
<br/>
In certain cases, though, it may be useful to access an external variable from within a function. To do that, arguments can be passed <i>by reference</i>, instead of <i>by value</i>. For example, the function <code>duplicate</code> in this code duplicates the value of its three arguments, causing the variables used as arguments to actually be modified by the call:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// passing parameters by reference</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> duplicate (<var>int</var>&amp; a, <var>int</var>&amp; b, <var>int</var>&amp; c)
{
  a*=2;
  b*=2;
  c*=2;
}

<var>int</var> main ()
{
  <var>int</var> x=1, y=3, z=7;
  duplicate (x, y, z);
  cout &lt;&lt; <kbd>""x=""</kbd> &lt;&lt; x &lt;&lt; <kbd>"", y=""</kbd> &lt;&lt; y &lt;&lt; <kbd>"", z=""</kbd> &lt;&lt; z;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>x=2, y=6, z=14</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
To gain access to its arguments, the function declares its parameters as <i>references</i>. In C++, references are indicated with an ampersand (<code>&amp;</code>) following the parameter type, as in the parameters taken by <code>duplicate</code> in the example above.<br/>
<br/>
When a variable is passed <i>by reference</i>, what is passed is no longer a copy, but the variable itself, the variable identified by the function parameter, becomes somehow associated with the argument passed to the function, and any modification on their corresponding local variables within the function are reflected in the variables passed as arguments in the call.<br/>
<br/>
<img alt="""" src=""function_by_reference.png""/> <br/>
<br/>
In fact, <code>a</code>, <code>b</code>, and <code>c</code> become aliases of the arguments passed on the function call (<code>x</code>, <code>y</code>, and <code>z</code>) and any change on <code>a</code> within the function is actually modifying variable <code>x</code> outside the function. Any change on <code>b</code> modifies <code>y</code>, and any change on <code>c</code> modifies <code>z</code>. That is why when, in the example, function <code>duplicate</code> modifies the values of variables <code>a</code>, <code>b</code>, and <code>c</code>, the values of <code>x</code>, <code>y</code>, and <code>z</code> are affected.<br/>
<br/>
If instead of defining duplicate as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> duplicate (<var>int</var>&amp; a, <var>int</var>&amp; b, <var>int</var>&amp; c)</code></pre></td>
</tr></tbody></table></div>
<br/>
Was it to be defined without the ampersand signs as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> duplicate (<var>int</var> a, <var>int</var> b, <var>int</var> c)</code></pre></td>
</tr></tbody></table></div>
<br/>
The variables would not be passed <i>by reference</i>, but <i>by value</i>, creating instead copies of their values. In this case, the output of the program would have been the values of <code>x</code>, <code>y</code>, and <code>z</code> without being modified (i.e., 1, 3, and 7).<br/>
</section>
<br/>
<section id=""constref"">
<h3>Efficiency considerations and const references</h3>
Calling a function with parameters taken by value causes copies of the values to be made. This is a relatively inexpensive operation for fundamental types such as <code>int</code>, but if the parameter is of a large compound type, it may result on certain overhead. For example, consider the following function:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>string concatenate (string a, string b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
This function takes two strings as parameters (by value), and returns the result of concatenating them. By passing the arguments by value, the function forces <code>a</code> and <code>b</code> to be copies of the arguments passed to the function when it is called. And if these are long strings, it may mean copying large quantities of data just for the function call.<br/>
<br/>
But this copy can be avoided altogether if both parameters are made <i>references</i>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>string concatenate (string&amp; a, string&amp; b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
Arguments by reference do not require a copy. The function operates directly on (aliases of) the strings passed as arguments, and, at most, it might mean the transfer of certain pointers to the function. In this regard, the version of <code>concatenate</code> taking references is more efficient than the version taking values, since it does not need to copy expensive-to-copy strings.<br/>
<br/>
On the flip side, functions with reference parameters are generally perceived as functions that modify the arguments passed, because that is why reference parameters are actually for.<br/>
<br/>
The solution is for the function to guarantee that its reference parameters are not going to be modified by this function. This can be done by qualifying the parameters as constant:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>string concatenate (<var>const</var> string&amp; a, <var>const</var> string&amp; b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
By qualifying them as <code>const</code>, the function is forbidden to modify the values of neither <code>a</code> nor <code>b</code>, but can actually access their values as references (aliases of the arguments), without having to make actual copies of the strings.<br/>
<br/>
Therefore, <code>const</code> references provide functionality similar to passing arguments by value, but with an increased efficiency for parameters of large types. That is why they are extremely popular in C++ for arguments of compound types. Note though, that for most fundamental types, there is no noticeable difference in efficiency, and in some cases, const references may even be less efficient!<br/>
</section>
<br/>
<section id=""inline"">
<h3>Inline functions</h3>
Calling a function generally causes a certain overhead (stacking arguments, jumps, etc...), and thus for very short functions, it may be more efficient to simply insert the code of the function where it is called, instead of performing the process of formally calling a function.<br/>
<br/>
Preceding a function declaration with the <code>inline</code> specifier informs the compiler that inline expansion is preferred over the usual function call mechanism for a specific function. This does not change at all the behavior of a function, but is merely used to suggest the compiler that the code generated by the function body shall be inserted at each point the function is called, instead of being invoked with a regular function call.<br/>
<br/>
For example, the concatenate function above may be declared inline as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>inline</var> string concatenate (<var>const</var> string&amp; a, <var>const</var> string&amp; b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
This informs the compiler that when <code>concatenate</code> is called, the program prefers the function to be expanded inline, instead of performing a regular call. <code>inline</code> is only specified in the function declaration, not when it is called.<br/>
<br/>
Note that most compilers already optimize code to generate inline functions when they see an opportunity to improve efficiency, even if not explicitly marked with the <code>inline</code> specifier. Therefore, this specifier merely indicates the compiler that inline is preferred for this function, although the compiler is free to not inline it, and optimize otherwise. In C++, optimization is a task delegated to the compiler, which is free to generate any code for as long as the resulting behavior is the one specified by the code.<br/>
</section>
<br/>
<section id=""defaultvalues"">
<h3>Default values in parameters</h3>
In C++, functions can also have optional parameters, for which no arguments are required in the call, in such a way that, for example, a function with three parameters may be called with only two. For this, the function shall include a default value for its last parameter, which is used by the function when called with fewer arguments. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// default values in functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> divide (<var>int</var> a, <var>int</var> b=2)
{
  <var>int</var> r;
  r=a/b;
  <var>return</var> (r);
}

<var>int</var> main ()
{
  cout &lt;&lt; divide (12) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; divide (20,4) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>6
5</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, there are two calls to function <code>divide</code>. In the first one:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>divide (12)</code></pre></td>
</tr></tbody></table></div>
<br/>
The call only passes one argument to the function, even though the function has two parameters. In this case, the function assumes the second parameter to be 2 (notice the function definition, which declares its second parameter as <code>int b=2</code>). Therefore, the result is 6.<br/>
<br/>
In the second call:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>divide (20,4)</code></pre></td>
</tr></tbody></table></div>
<br/>
The call passes two arguments to the function. Therefore, the default value for <code>b</code> (<code>int b=2</code>) is ignored, and <code>b</code> takes the value passed as argument, that is 4, yielding a result of 5.<br/>
</section>
<br/>
<section id=""declarations"">
<h3>Declaring functions</h3>
In C++, identifiers can only be used in expressions once they have been declared. For example, some variable <code>x</code> cannot be used before being declared with a statement, such as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x;</code></pre></td>
</tr></tbody></table></div>
<br/>
The same applies to functions. Functions cannot be called before they are declared. That is why, in all the previous examples of functions, the functions were always defined before the <code>main</code> function, which is the function from where the other functions were called. If <code>main</code> were defined before the other functions, this would break the rule that functions shall be declared before being used, and thus would not compile.<br/>
<br/>
The prototype of a function can be declared without actually defining the function completely, giving just enough details to allow the types involved in a function call to be known. Naturally, the function shall be defined somewhere else, like later in the code. But at least, once declared like this, it can already be called.<br/>
<br/>
The declaration shall include all types involved (the return type and the type of its arguments), using the same syntax as used in the definition of the function, but replacing the body of the function (the block of statements) with an ending semicolon.<br/>
<br/>
The parameter list does not need to include the parameter names, but only their types. Parameter names can nevertheless be specified, but they are optional, and do not need to necessarily match those in the function definition. For example, a function called <code>protofunction</code> with two int parameters can be declared with either of these statements:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> protofunction (<var>int</var> first, <var>int</var> second);
<var>int</var> protofunction (<var>int</var>, <var>int</var>);</code></pre></td>
</tr></tbody></table></div>
<br/>
Anyway, including a name for each parameter always improves legibility of the declaration.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// declaring functions prototypes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> odd (<var>int</var> x);
<var>void</var> even (<var>int</var> x);

<var>int</var> main()
{
  <var>int</var> i;
  <var>do</var> {
    cout &lt;&lt; <kbd>""Please, enter number (0 to exit): ""</kbd>;
    cin &gt;&gt; i;
    odd (i);
  } <var>while</var> (i!=0);
  <var>return</var> 0;
}

<var>void</var> odd (<var>int</var> x)
{
  <var>if</var> ((x%2)!=0) cout &lt;&lt; <kbd>""It is odd.\n""</kbd>;
  <var>else</var> even (x);
}

<var>void</var> even (<var>int</var> x)
{
  <var>if</var> ((x%2)==0) cout &lt;&lt; <kbd>""It is even.\n""</kbd>;
  <var>else</var> odd (x);
}</code></pre></td>
<td class=""output""><pre><samp>Please, enter number (0 to exit): 9
It is odd.
Please, enter number (0 to exit): 6
It is even.
Please, enter number (0 to exit): 1030
It is even.
Please, enter number (0 to exit): 0
It is even.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This example is indeed not an example of efficiency. You can probably write yourself a version of this program with half the lines of code. Anyway, this example illustrates how functions can be declared before its definition:<br/>
<br/>
The following lines:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> odd (<var>int</var> a);
<var>void</var> even (<var>int</var> a);</code></pre></td>
</tr></tbody></table></div>
<br/>
Declare the prototype of the functions. They already contain all what is necessary to call them, their name, the types of their argument, and their return type (<code>void</code> in this case). With these prototype declarations in place, they can be called before they are entirely defined, allowing for example, to place the function from where they are called (<code>main</code>)  before the actual definition of these functions.<br/>
<br/>
But declaring functions before being defined is not only useful to reorganize the order of functions within the code. In some cases, such as in this particular case, at least one of the declarations is required, because <code>odd</code> and <code>even</code> are mutually called; there is a call to <code>even</code> in <code>odd</code> and a call to <code>odd</code> in <code>even</code>. And, therefore, there is no way to structure the code so that <code>odd</code> is defined before <code>even</code>, and <code>even</code> before <code>odd</code>.<br/>
</section>
<br/>
<section id=""recursivity"">
<h3>Recursivity</h3>
Recursivity is the property that functions have to be called by themselves. It is useful for some tasks, such as sorting elements, or calculating the factorial of numbers. For example, in order to obtain the factorial of a number (<code>n!</code>) the mathematical formula would be:<br/>
<br/>
<code>n! = n * (n-1) * (n-2) * (n-3) ... * 1</code>
<br/>
More concretely, <code>5!</code> (factorial of 5) would be:<br/>
<br/>
<code>5! = 5 * 4 * 3 * 2 * 1 = 120</code>
<br/>
And a recursive function to calculate this in C++ could be:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// factorial calculator</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>long</var> factorial (<var>long</var> a)
{
  <var>if</var> (a &gt; 1)
   <var>return</var> (a * factorial (a-1));
  <var>else</var>
   <var>return</var> 1;
}

<var>int</var> main ()
{
  <var>long</var> number = 9;
  cout &lt;&lt; number &lt;&lt; <kbd>""! = ""</kbd> &lt;&lt; factorial (number);
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>9! = 362880</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice how in function factorial we included a call to itself, but only if the argument passed was greater than 1, since, otherwise, the function would perform an infinite recursive loop, in which once it arrived to 0, it would continue multiplying by all the negative numbers (probably provoking a stack overflow at some point during runtime).<br/>
</section></div>"
Program structure,Overloads and templates,"<div class=""C_doc""><h1>Overloads and templates</h1>
<section id=""overload"">
<h3>Overloaded functions</h3>
In C++, two different functions can have the same name if their parameters are different; either because they have a different number of parameters, or because any of their parameters are of a different type. For example: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// overloading functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> operate (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> (a*b);
}

<var>double</var> operate (<var>double</var> a, <var>double</var> b)
{
  <var>return</var> (a/b);
}

<var>int</var> main ()
{
  <var>int</var> x=5,y=2;
  <var>double</var> n=5.0,m=2.0;
  cout &lt;&lt; operate (x,y) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; operate (n,m) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>10
2.5</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, there are two functions called <code>operate</code>, but one of them has two parameters of type <code>int</code>, while the other has them of type <code>double</code>. The compiler knows which one to call in each case by examining the types passed as arguments when the function is called. If it is called with two <code>int</code> arguments, it calls to the function that has two <code>int</code> parameters, and if it is called with two <code>double</code>s, it calls the one with two <code>double</code>s.<br/>
<br/>
In this example, both functions have quite different behaviors, the <code>int</code> version multiplies its arguments, while the <code>double</code> version divides them. This is generally not a good idea. Two functions with the same name are generally expected to have -at least- a similar behavior, but this example demonstrates that is entirely possible for them not to. Two overloaded functions (i.e., two functions with the same name) have entirely different definitions; they are, for all purposes, different functions, that only happen to have the same name.<br/>
<br/>
Note that a function cannot be overloaded only by its return type. At least one of its parameters must have a different type.<br/>
</section>
<br/>
<section id=""templates"">
<h3>Function templates</h3>
Overloaded functions may have the same definition. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// overloaded functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> sum (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> a+b;
}

<var>double</var> sum (<var>double</var> a, <var>double</var> b)
{
  <var>return</var> a+b;
}

<var>int</var> main ()
{
  cout &lt;&lt; sum (10,20) &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; sum (1.0,1.5) &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>30
2.5</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Here, <code>sum</code> is overloaded with different parameter types, but with the exact same body.<br/>
<br/>
The function <code>sum</code> could be overloaded for a lot of types, and it could make sense for all of them to have the same body. For cases such as this, C++ has the ability to define functions with generic types, known as <i>function templates</i>. Defining a function template follows the same syntax as a regular function, except that it is preceded by the <code>template</code> keyword and a series of template parameters enclosed in angle-brackets &lt;&gt;:<br/>
<br/>
<code>template &lt;template-parameters&gt; function-declaration</code>
<br/>
The template parameters are a series of parameters separated by commas. These parameters can be generic template types by specifying either the <code>class</code> or <code>typename</code> keyword followed by an identifier. This identifier can then be used in the function declaration as if it was a regular type. For example, a generic <code>sum</code> function could be defined as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>template</var> &lt;<var>class</var> SomeType&gt;
SomeType sum (SomeType a, SomeType b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
It makes no difference whether the generic type is specified with keyword <code>class</code> or keyword <code>typename</code> in the template argument list (they are 100% synonyms in template declarations).<br/>
<br/>
In the code above, declaring <code>SomeType</code> (a generic type within the template parameters enclosed in angle-brackets) allows <code>SomeType</code> to be used anywhere in the function definition, just as any other type; it can be used as the type for parameters, as return type, or to declare new variables of this type. In all cases, it represents a generic type that will be determined on the moment the template is instantiated.<br/>
<br/>
Instantiating  a template is applying the template to create a function using particular types or values for its template parameters. This is done by calling the <i>function template</i>, with the same syntax as calling a regular function, but specifying the template arguments enclosed in angle brackets:<br/>
<br/>
<code>name &lt;template-arguments&gt; (function-arguments)</code>
<br/>
For example, the <code>sum</code> function template defined above can be called with:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = sum&lt;<var>int</var>&gt;(10,20);</code></pre></td>
</tr></tbody></table></div>
<br/>
The function <code>sum&lt;int&gt;</code> is just one of the possible instantiations of function template <code>sum</code>. In this case, by using <code>int</code> as template argument in the call, the compiler automatically instantiates a version of <code>sum</code> where each occurrence of <code>SomeType</code> is replaced by <code>int</code>, as if it was defined as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> sum (<var>int</var> a, <var>int</var> b)
{
  <var>return</var> a+b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
Let's see an actual example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// function template</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T&gt;
T sum (T a, T b)
{
  T result;
  result = a + b;
  <var>return</var> result;
}

<var>int</var> main () {
  <var>int</var> i=5, j=6, k;
  <var>double</var> f=2.0, g=0.5, h;
  k=sum&lt;<var>int</var>&gt;(i,j);
  h=sum&lt;<var>double</var>&gt;(f,g);
  cout &lt;&lt; k &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; h &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>11
2.5</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this case, we have used <code>T</code> as the template parameter name, instead of <code>SomeType</code>. It makes no difference, and <code>T</code> is actually a quite common template parameter name for generic types. <br/>
<br/>
In the example above, we used the function template <code>sum</code> twice. The first time with arguments of type <code>int</code>, and the second one with arguments of type <code>double</code>. The compiler has instantiated and then called each time the appropriate version of the function.<br/>
<br/>
Note also how <code>T</code> is also used to declare a local variable of that (generic) type within <code>sum</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>T result;</code></pre></td>
</tr></tbody></table></div>
<br/>
Therefore, result will be a variable of the same type as the parameters <code>a</code> and <code>b</code>, and as the type returned by the function.<br/>
In this specific case where the generic type <code>T</code> is used as a parameter for <code>sum</code>, the compiler is even able to deduce the data type automatically without having to explicitly specify it within angle brackets. Therefore, instead of explicitly specifying the template arguments with:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>k = sum&lt;<var>int</var>&gt; (i,j);
h = sum&lt;<var>double</var>&gt; (f,g);</code></pre></td>
</tr></tbody></table></div>
<br/>
It is possible to instead simply write:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>k = sum (i,j);
h = sum (f,g);</code></pre></td>
</tr></tbody></table></div>
<br/>
without the type enclosed in angle brackets. Naturally, for that, the type shall be unambiguous. If <code>sum</code> is called with arguments of different types, the compiler may not be able to deduce the type of <code>T</code> automatically.<br/>
<br/>
Templates are a powerful and versatile feature. They can have multiple template parameters, and the function can still use regular non-templated types. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// function templates</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T, <var>class</var> U&gt;
<var>bool</var> are_equal (T a, U b)
{
  <var>return</var> (a==b);
}

<var>int</var> main ()
{
  <var>if</var> (are_equal(10,10.0))
    cout &lt;&lt; <kbd>""x and y are equal\n""</kbd>;
  <var>else</var>
    cout &lt;&lt; <kbd>""x and y are not equal\n""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>x and y are equal</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note that this example uses automatic template parameter deduction in the call to <code>are_equal</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>are_equal(10,10.0)</code></pre></td>
</tr></tbody></table></div>
<br/>
Is equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>are_equal&lt;<var>int</var>,<var>double</var>&gt;(10,10.0)</code></pre></td>
</tr></tbody></table></div>
<br/>
There is no ambiguity possible because numerical literals are always of a specific type: Unless otherwise specified with a suffix, integer literals always produce values of type <code>int</code>, and floating-point literals always produce values of type <code>double</code>. Therefore <code>10</code> has always type <code>int</code> and <code>10.0</code> has always type <code>double</code>.<br/>
</section>
<br/>
<section id=""nontype"">
<h3>Non-type template arguments</h3>
The template parameters can not only include types introduced by <code>class</code> or <code>typename</code>, but can also include expressions of a particular type:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// template arguments</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T, <var>int</var> N&gt;
T fixed_multiply (T val)
{
  <var>return</var> val * N;
}

<var>int</var> main() {
  std::cout &lt;&lt; fixed_multiply&lt;<var>int</var>,2&gt;(10) &lt;&lt; <kbd>'\n'</kbd>;
  std::cout &lt;&lt; fixed_multiply&lt;<var>int</var>,3&gt;(10) &lt;&lt; <kbd>'\n'</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>20
30</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The second argument of the <code>fixed_multiply</code> function template is of type <code>int</code>. It just looks like a regular function parameter, and can actually be used just like one.<br/>
<br/>
But there exists a major difference: the value of template parameters is determined on compile-time to generate a different instantiation of the function <code>fixed_multiply</code>, and thus the value of that argument is never passed during runtime: The two calls to <code>fixed_multiply</code> in <code>main</code> essentially call two versions of the function: one that always multiplies by two, and one that always multiplies by three. For that same reason, the second template argument needs to be a constant expression (it cannot be passed a variable).<br/>
</section>
</div>"
Program structure,Name visibility,"<div class=""C_doc""><h1>Name visibility</h1>
<section id=""scopes"">
<h3>Scopes</h3>
Named entities, such as variables, functions, and compound types need to be declared before being used in C++. The point in the program where this declaration happens influences its visibility:<br/>
<br/>
An entity declared outside any block has <i>global scope</i>, meaning that its name is valid anywhere in the code. While an entity declared within a block, such as a function or a selective statement, has <i>block scope</i>, and is only visible within the specific block in which it is declared, but not outside it.<br/>
<br/>
Variables with block scope are known as <i>local variables</i>.<br/>
<br/>
For example, a variable declared in the body of a function is a <i>local variable</i> that extends until the end of the the function (i.e., until the brace <code>}</code> that closes the function definition), but not outside it:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo;        <cite>// global variable</cite>

<var>int</var> some_function ()
{
  <var>int</var> bar;      <cite>// local variable</cite>
  bar = 0;
}

<var>int</var> other_function ()
{
  foo = 1;  <cite>// ok: foo is a global variable</cite>
  bar = 2;  <cite>// wrong: bar is not visible from this function</cite>
}</code></pre></td>
</tr></tbody></table></div>
<br/>
In each scope, a name can only represent one entity. For example, there cannot be two variables with the same name in the same scope:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> some_function ()
{
  <var>int</var> x;
  x = 0;
  <var>double</var> x;   <cite>// wrong: name already used in this scope</cite>
  x = 0.0;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
The visibility of an entity with <i>block scope</i> extends until the end of the block, including inner blocks. Nevertheless, an inner block, because it is a different block, can re-utilize a name existing in an outer scope to refer to a different entity; in this case, the name will refer to a different entity only within the inner block, hiding the entity it names outside. While outside it, it will still refer to the original entity. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// inner block scopes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>int</var> x = 10;
  <var>int</var> y = 20;
  {
    <var>int</var> x;   <cite>// ok, inner scope.</cite>
    x = 50;  <cite>// sets value to inner x</cite>
    y = 50;  <cite>// sets value to (outer) y</cite>
    cout &lt;&lt; <kbd>""inner block:\n""</kbd>;
    cout &lt;&lt; <kbd>""x: ""</kbd> &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
    cout &lt;&lt; <kbd>""y: ""</kbd> &lt;&lt; y &lt;&lt; <kbd>'\n'</kbd>;
  }
  cout &lt;&lt; <kbd>""outer block:\n""</kbd>;
  cout &lt;&lt; <kbd>""x: ""</kbd> &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""y: ""</kbd> &lt;&lt; y &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>inner block:
x: 50
y: 50
outer block:
x: 10
y: 50</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note that <code>y</code> is not hidden in the inner block, and thus accessing <code>y</code> still accesses the outer variable.<br/>
<br/>
Variables declared in declarations that introduce a block, such as function parameters and variables declared in loops and conditions (such as those declared on a for or an if) are local to the block they introduce.<br/>
</section>
<br/>
<section id=""namespace"">
<h3>Namespaces</h3>
Only one entity can exist with a particular name in a particular scope. This is seldom a problem for local names, since blocks tend to be relatively short, and names have particular purposes within them, such as naming a counter variable, an argument, etc...<br/>
<br/>
But non-local names bring more possibilities for name collision, especially considering that libraries may declare many functions, types, and variables, neither of them local in nature, and some of them very generic.<br/>
<br/>
Namespaces allow us to group named entities that otherwise would have <i>global scope</i> into narrower scopes, giving them <i>namespace scope</i>. This allows organizing the elements of programs into different logical scopes referred to by names.<br/>
<br/>
The syntax to declare a namespaces is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""output""><pre><samp>
namespace identifier
{
  named_entities
}
</samp></pre></td></tr></tbody></table></div>
<br/>
<br/>
Where <code>identifier</code> is any valid identifier and <code>named_entities</code> is the set of variables, types and functions that are included within the namespace. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>namespace</var> myNamespace
{
  <var>int</var> a, b;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, the variables <code>a</code> and <code>b</code> are normal variables declared within a namespace called <code>myNamespace</code>.<br/>
<br/>
These variables can be accessed from within their namespace normally, with their identifier (either <code>a</code> or <code>b</code>), but if accessed from outside the <code>myNamespace</code> namespace they have to be properly qualified with the scope operator <code>::</code>. For example, to access the previous variables from outside <code>myNamespace</code> they should be qualified like:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>myNamespace::a
myNamespace::b</code></pre></td>
</tr></tbody></table></div>
<br/>
Namespaces are particularly useful to avoid name collisions. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// namespaces</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>namespace</var> foo
{
  <var>int</var> value() { <var>return</var> 5; }
}

<var>namespace</var> bar
{
  <var>const</var> <var>double</var> pi = 3.1416;
  <var>double</var> value() { <var>return</var> 2*pi; }
}

<var>int</var> main () {
  cout &lt;&lt; foo::value() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; bar::value() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; bar::pi &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>5
6.2832
3.1416</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this case, there are two functions with the same name: <code>value</code>. One is defined within the namespace <code>foo</code>, and the other one in <code>bar</code>. No redefinition errors happen thanks to namespaces. Notice also how <code>pi</code> is accessed in an unqualified manner from within namespace <code>bar</code> (just as <code>pi</code>), while it is again accessed in <code>main</code>, but here it needs to be qualified as <code>bar::pi</code>.<br/>
<br/>
Namespaces can be split: Two segments of a code can be declared in the same namespace:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>namespace</var> foo { <var>int</var> a; }
<var>namespace</var> bar { <var>int</var> b; }
<var>namespace</var> foo { <var>int</var> c; }</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares three variables: <code>a</code> and <code>c</code> are in namespace <code>foo</code>, while <code>b</code> is in namespace <code>bar</code>. Namespaces can even extend across different translation units (i.e., across different files of source code).<br/>
</section>
<br/>
<section id=""using"">
<h3>using</h3>
The keyword <code>using</code> introduces a name into the current declarative region (such as a block), thus avoiding the need to qualify the name. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// using</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>namespace</var> first
{
  <var>int</var> x = 5;
  <var>int</var> y = 10;
}

<var>namespace</var> second
{
  <var>double</var> x = 3.1416;
  <var>double</var> y = 2.7183;
}

<var>int</var> main () {
  <var>using</var> first::x;
  <var>using</var> second::y;
  cout &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; y &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; first::y &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; second::x &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>5
2.7183
10
3.1416</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice how in <code>main</code>, the variable <code>x</code> (without any name qualifier) refers to <code>first::x</code>, whereas <code>y</code> refers to <code>second::y</code>, just as specified by the <code>using</code> declarations. The variables <code>first::y</code> and <code>second::x</code> can still be accessed, but require fully qualified names.<br/>
<br/>
The keyword <code>using</code> can also be used as a directive to introduce an entire namespace:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// using</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>namespace</var> first
{
  <var>int</var> x = 5;
  <var>int</var> y = 10;
}

<var>namespace</var> second
{
  <var>double</var> x = 3.1416;
  <var>double</var> y = 2.7183;
}

<var>int</var> main () {
  <var>using</var> <var>namespace</var> first;
  cout &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; y &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; second::x &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; second::y &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>5
10
3.1416
2.7183</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this case, by declaring that we were using namespace <code>first</code>, all direct uses of <code>x</code> and <code>y</code> without name qualifiers were also looked up in namespace <code>first</code>.<br/>
<br/>
<code>using</code> and <code>using namespace</code> have validity only in the same block in which they are stated or in the entire source code file if they are used directly in the global scope. For example, it would be possible to first use the objects of one namespace and then those of another one by splitting the code in different blocks:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// using namespace example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>namespace</var> first
{
  <var>int</var> x = 5;
}

<var>namespace</var> second
{
  <var>double</var> x = 3.1416;
}

<var>int</var> main () {
  {
    <var>using</var> <var>namespace</var> first;
    cout &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  }
  {
    <var>using</var> <var>namespace</var> second;
    cout &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>5
3.1416</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""alias"">
<h3>Namespace aliasing</h3>
Existing namespaces can be aliased with new names, with the following syntax:<br/>
<br/>
<code>namespace new_name = current_name;</code>
</section>
<br/>
<section id=""std"">
<h3>The std namespace</h3>
All the entities (variables, types, constants, and functions) of the standard C++ library are declared within the <code>std</code> namespace. Most examples in these tutorials, in fact, include the following line:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>using</var> <var>namespace</var> std;</code></pre></td>
</tr></tbody></table></div>
<br/>
This introduces direct visibility of all the names of the <code>std</code> namespace into the code. This is done in these tutorials to facilitate comprehension and shorten the length of the examples, but many programmers prefer to qualify each of the elements of the standard library used in their programs. For example, instead of:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""Hello world!""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
It is common to instead see:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>std::cout &lt;&lt; <kbd>""Hello world!""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
Whether the elements in the <code>std</code> namespace are introduced with <code>using</code> declarations or are fully qualified on every use does not change the behavior or efficiency of the resulting program in any way. It is mostly a matter of style preference, although for projects mixing libraries, explicit qualification tends to be preferred.<br/>
</section>
<br/>
<section id=""storageclasses"">
<h3>Storage classes</h3>
The storage for variables with <i>global</i> or <i>namespace scope</i> is allocated for the entire duration of the program. This is known as <i>static storage</i>, and it contrasts with the storage for <i>local variables</i> (those declared within a block). These use what is known as automatic storage. The storage for local variables is only available during the block in which they are declared; after that, that same storage may be used for a local variable of some other function, or used otherwise.<br/>
<br/>
But there is another substantial difference between variables with <i>static storage</i> and variables with <i>automatic storage</i>:<br/>
- Variables with <i>static storage</i> (such as global variables) that are not explicitly initialized are automatically initialized to zeroes.<br/>
- Variables with <i>automatic storage</i> (such as local variables) that are not explicitly initialized are left uninitialized, and thus have an undetermined value.<br/>
<br/>
For example:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// static vs automatic storage</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> x;

<var>int</var> main ()
{
  <var>int</var> y;
  cout &lt;&lt; x &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; y &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>0
4285838</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The actual output may vary, but only the value of <code>x</code> is guaranteed to be zero. <code>y</code> can actually contain just about any value (including zero).<br/>
</section></div>"
Compound data types,Arrays,"<div class=""C_doc""><h1>Arrays</h1>
<section id=""arrays"">
An array is a series of elements of the same type placed in contiguous memory locations that can be individually referenced by adding an index to a unique identifier.<br/>
<br/>
That means that, for example, five values of type <code>int</code> can be declared as an array without having to declare 5 different variables (each with its own identifier). Instead, using an array, the five <code>int</code> values are stored in contiguous memory locations, and all five can be accessed using the same identifier, with the proper index.<br/>
<br/>
For example, an array containing 5 integer values of type <code>int</code> called <code>foo</code> could be represented as:<br/>
<br/>
<img alt="""" src=""arrays1.png""/>
<br/>
where each blank panel represents an element of the array. In this case, these are values of type <code>int</code>. These elements are numbered from 0 to 4, being 0 the first and 4 the last; In C++, the first element in an array is always numbered with a zero (not a one), no matter its length.<br/>
<br/>
Like a regular variable, an array must be declared before it is used. A typical declaration for an array in C++ is:<br/>
<br/>
<code>
type name [elements];<br/>
</code>
<br/>
where <code>type</code> is a valid type (such as <code>int</code>, <code>float</code>...), <code>name</code> is a valid identifier and the <code>elements</code> field (which is always enclosed in square brackets <code>[]</code>), specifies the length of the array in terms of the number of elements.<br/>
<br/>
Therefore, the <code>foo</code> array, with five elements of type <code>int</code>, can be declared as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo [5];</code></pre></td>
</tr></tbody></table></div>
<br/>
NOTE: The <code>elements</code> field within square brackets <code>[]</code>, representing the number of elements in the array, must be a <i>constant expression</i>, since arrays are blocks of static memory whose size must be determined at compile time, before the program runs.<br/>
</section>
<br/>
<section id=""initialization"">
<h3>Initializing arrays</h3>
By default, regular arrays of <i>local scope</i> (for example, those declared within a function) are left uninitialized. This means that none of its elements are set to any particular value; their contents are undetermined at the point the array is declared.<br/>
<br/>
But the elements in an array can be explicitly initialized to specific values when it is declared, by enclosing those initial values in braces {}. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo [5] = { 16, 2, 77, 40, 12071 };</code></pre></td>
</tr></tbody></table></div>
<br/>
This statement declares an array that can be represented like this:<br/>
<br/>
<img alt="""" src=""arrays2.png""/>
<br/>
The number of values between braces <code>{}</code> shall not be greater than the number of elements in the array. For example, in the example above, <code>foo</code> was declared having 5 elements (as specified by the number enclosed in square brackets, <code>[]</code>), and the braces <code>{}</code> contained exactly 5 values, one for each element. If declared with less, the remaining elements are set to their default values (which for fundamental types, means they are filled with zeroes). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> bar [5] = { 10, 20, 30 };</code></pre></td>
</tr></tbody></table></div>
<br/>
Will create an array like this:<br/>
<br/>
<img alt="""" src=""arrays3.png""/>
<br/>
The initializer can even have no values, just the braces:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> baz [5] = { };</code></pre></td>
</tr></tbody></table></div>
<br/>
This creates an array of five <code>int</code> values, each initialized with a value of zero:<br/>
<br/>
<img alt="""" src=""arrays4.png""/>
<br/>
When an initialization of values is provided for an array, C++ allows the possibility of leaving the square brackets empty <code>[]</code>. In this case, the compiler will assume automatically a size for the array that matches the number of values included between the braces <code>{}</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo [] = { 16, 2, 77, 40, 12071 };</code></pre></td>
</tr></tbody></table></div>
<br/>
After this declaration, array <code>foo</code> would be 5 <code>int</code> long, since we have provided 5 initialization values.<br/>
<br/>
Finally, the evolution of C++ has led to the adoption of <i>universal initialization</i> also for arrays. Therefore, there is no longer need for the equal sign between the declaration and the initializer. Both these statements are equivalent:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo[] = { 10, 20, 30 };
<var>int</var> foo[] { 10, 20, 30 };</code></pre></td>
</tr></tbody></table></div>
<br/>
Static arrays, and those declared directly in a namespace (outside any function), are always initialized. If no explicit initializer is specified, all the elements are default-initialized (with zeroes, for fundamental types).<br/>
</section>
<br/>
<section id=""access"">
<h3>Accessing the values of an array</h3>
The values of any of the elements in an array can be accessed just like the value of a regular variable of the same type. The syntax is:<br/>
<br/>
<code>name[index]</code>
<br/>
Following the previous examples in which <code>foo</code> had 5 elements and each of those elements was of type <code>int</code>, the name which can be used to refer to each element is the following:<br/>
<br/>
<img alt="""" src=""arrays5.png""/>
<br/>
For example, the following statement stores the value 75 in the third element of <code>foo</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>foo [2] = 75;</code></pre></td>
</tr></tbody></table></div>
<br/>
and, for example, the following copies the value of the third element of <code>foo</code> to a variable called <code>x</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>x = foo[2];</code></pre></td>
</tr></tbody></table></div>
<br/>
Therefore, the expression <code>foo[2]</code> is itself a variable of type <code>int</code>.<br/>
<br/>
Notice that the third element of <code>foo</code> is specified <code>foo[2]</code>, since the first one is <code>foo[0]</code>, the second one is <code>foo[1]</code>, and therefore, the third one is <code>foo[2]</code>. By this same reason, its last element is <code>foo[4]</code>. Therefore, if we write <code>foo[5]</code>, we would be accessing the sixth element of <code>foo</code>, and therefore actually exceeding the size of the array.<br/>
<br/>
In C++, it is syntactically correct to exceed the valid range of indices for an array. This can create problems, since accessing out-of-range elements do not cause errors on compilation, but can cause errors on runtime. The reason for this being allowed will be seen in a later chapter when pointers are introduced.<br/>
<br/>
At this point, it is important to be able to clearly distinguish between the two uses that brackets <code>[]</code> have related to arrays. They perform two different tasks: one is to specify the size of arrays when they are declared; and the second one is to specify indices for concrete array elements when they are accessed. Do not confuse these two possible uses of brackets <code>[]</code> with arrays.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> foo[5];         <cite>// declaration of a new array</cite>
foo[2] = 75;        <cite>// access to an element of the array.  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The main difference is that the declaration is preceded by the type of the elements, while the access is not.<br/>
<br/>
Some other valid operations with arrays:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>foo[0] = a;
foo[a] = 75;
b = foo [a+2];
foo[foo[a]] = foo[2] + 5;</code></pre></td>
</tr></tbody></table></div>
<br/>
For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/>29<br/>30<br/>31<br/>32<br/>33<br/>34<br/>35<br/>36<br/>37<br/>38<br/>39<br/>40<br/>41<br/>42<br/>43<br/>44<br/>45<br/>46<br/>47<br/>48<br/>49<br/>50<br/>51<br/>52<br/>53<br/>54<br/>55<br/>56<br/>57<br/>58<br/>59<br/>60<br/>61<br/>62<br/>63<br/>64<br/>65<br/>66<br/>67<br/>68<br/>69<br/>70<br/>71<br/>72<br/>73<br/>74<br/>75<br/>76<br/>77<br/>78<br/>79<br/>80<br/>81<br/>82<br/>83<br/>84<br/>85<br/>86<br/>87<br/>88<br/>89<br/>90<br/>91<br/>92<br/>93<br/>94<br/>95<br/>96<br/>97<br/>98<br/>99<br/>100<br/>101<br/>102<br/>103<br/>104<br/>105<br/>106<br/>107<br/>108<br/>109<br/>110<br/>111<br/>112<br/>113<br/>114<br/>115<br/>116<br/>117<br/>118<br/>119<br/>120<br/>121<br/>122<br/>123<br/>124<br/>125<br/>126<br/>127<br/>128<br/>129<br/>130<br/>131<br/>132<br/>133<br/>134<br/>135<br/>136<br/>137<br/>138<br/>139<br/>140<br/>141<br/>142<br/>143<br/>144<br/>145<br/>146<br/>147<br/>148<br/>149<br/>150<br/>151<br/>152<br/>153<br/>154<br/>155<br/>156<br/>157<br/>158<br/>159<br/>160<br/>161<br/>162<br/>163<br/>164<br/>165<br/>166<br/>167<br/>168<br/>169<br/>170<br/>171<br/>172<br/>173<br/>174<br/>175<br/>176<br/>177<br/>178<br/>179<br/>180<br/>181<br/>182<br/>183<br/>184<br/>185<br/>186<br/>187<br/>188<br/>189<br/>190<br/>191<br/>192<br/>193<br/>194<br/>195<br/>196<br/>197<br/>198<br/>199<br/>200<br/>201<br/>202<br/>203<br/>204<br/>205<br/>206<br/>207<br/>208<br/>209<br/>210<br/>211<br/>212<br/>213<br/>214<br/>215<br/>216<br/>217<br/>218<br/>219<br/>220<br/>221<br/>222<br/>223<br/>224<br/>225<br/>226<br/>227<br/>228<br/>229<br/>230<br/>231<br/>232<br/>233<br/>234<br/>235<br/>236<br/>237<br/>238<br/>239<br/>240<br/>241<br/>242<br/>243<br/>244<br/>245<br/>246<br/>247<br/>248<br/>249<br/>250<br/>251<br/>252<br/>253<br/>254<br/>255<br/>256<br/>257<br/>258<br/>259<br/>260<br/>261<br/>262<br/>263<br/>264<br/>265<br/>266<br/>267<br/>268<br/>269<br/>270<br/>271<br/>272<br/>273<br/>274<br/>275<br/>276<br/>277<br/>278<br/>279<br/>280<br/>281<br/>282<br/>283<br/>284<br/>285<br/>286<br/>287<br/>288<br/>289<br/>290<br/>291<br/>292<br/>293<br/>294<br/>295<br/>296<br/>297<br/>298<br/>299<br/>300<br/>301<br/>302<br/>303<br/>304<br/>305<br/>306<br/>307<br/>308<br/>309<br/>310<br/>311<br/>312<br/>313<br/>314<br/>315<br/>316<br/>317<br/>318<br/>319<br/>320<br/>321<br/>322<br/>323<br/>324<br/>325<br/>326<br/>327<br/>328<br/>329<br/>330<br/>331<br/>332<br/>333<br/>334<br/>335<br/>336<br/>337<br/>338<br/>339<br/>340<br/>341<br/>342<br/>343<br/>344<br/>345<br/>346<br/>347<br/>348<br/>349<br/>350<br/>351<br/>352<br/>353<br/>354<br/>355<br/>356<br/>357<br/>358<br/>359<br/>360<br/>361<br/>362<br/>363<br/>364<br/>365<br/>366<br/>367<br/>368<br/>369<br/>370<br/>371<br/>372<br/>373<br/>374<br/>375<br/>376<br/>377<br/>378<br/>379<br/>380<br/>381<br/>382<br/>383<br/>384<br/>385<br/>386<br/>387<br/>388<br/>389<br/>390<br/>391<br/>392<br/>393<br/>394<br/>395<br/>396<br/>397<br/>398<br/>399<br/>400<br/>401<br/>402<br/>403<br/>404<br/>405<br/>406<br/>407<br/>408<br/>409<br/>410<br/>411<br/>412<br/>413<br/>414<br/>415<br/>416<br/>417<br/>418<br/>419<br/>420<br/>421<br/>422<br/>423<br/>424<br/>425<br/>426<br/>427<br/>428<br/>429<br/>430<br/>431<br/>432<br/>433<br/>434<br/>435<br/>436<br/>437<br/>438<br/>439<br/>440<br/>441<br/>442<br/>443<br/>444<br/>445<br/>446<br/>447<br/>448<br/>449<br/>450<br/>451<br/>452<br/>453<br/>454<br/>455<br/>456<br/>457<br/>458<br/>459<br/>460<br/>461<br/>462<br/>463<br/>464<br/>465<br/>466<br/>467<br/>468<br/>469<br/>470<br/>471<br/>472<br/>473<br/>474<br/>475<br/>476<br/>477<br/>478<br/>479<br/>480<br/>481<br/>482<br/>483<br/>484<br/>485<br/>486<br/>487<br/>488<br/>489<br/>490<br/>491<br/>492<br/>493<br/>494<br/>495<br/>496<br/>497<br/>498<br/>499<br/>500<br/>501<br/>502<br/>503<br/>504<br/>505<br/>506<br/>507<br/>508<br/>509<br/>510<br/>511<br/>512<br/>513<br/>514<br/>515<br/>516<br/>517<br/>518<br/>519<br/>520<br/>521<br/>522<br/>523<br/>524<br/>525<br/>526<br/>527<br/>528<br/>529<br/>530<br/>531<br/>532<br/>533<br/>534<br/>535<br/>536<br/>537<br/>538<br/>539<br/>540<br/>541<br/>542<br/>543<br/>544<br/>545<br/>546<br/>547<br/>548<br/>549<br/>550<br/>551<br/>552<br/>553<br/>554<br/>555<br/>556<br/>557<br/>558<br/>559<br/>560<br/>561<br/>562<br/>563<br/>564<br/>565<br/>566<br/>567<br/>568<br/>569<br/>570<br/>571<br/>572<br/>573<br/>574<br/>575<br/>576<br/>577<br/>578<br/>579<br/>580<br/>581<br/>582<br/>583<br/>584<br/>585<br/>586<br/>587<br/>588<br/>589<br/>590<br/>591<br/>592<br/>593<br/>594<br/>595<br/>596<br/>597<br/>598<br/>599<br/>600<br/>601<br/>602<br/>603<br/>604<br/>605<br/>606<br/>607<br/>608<br/>609<br/>610<br/>611<br/>612<br/>613<br/>614<br/>615<br/>616<br/>617<br/>618<br/>619<br/>620<br/>621<br/>622<br/>623<br/>624<br/>625<br/>626<br/>627<br/>628<br/>629<br/>630<br/>631<br/>632<br/>633<br/>634<br/>635<br/>636<br/>637<br/>638<br/>639<br/>640<br/>641<br/>642<br/>643<br/>644<br/>645<br/>646<br/>647<br/>648<br/>649<br/>650<br/>651<br/>652<br/>653<br/>654<br/>655<br/>656<br/>657<br/>658<br/>659<br/>660<br/>661<br/>662<br/>663<br/>664<br/>665<br/>666<br/>667<br/>668<br/>669<br/>670<br/>671<br/>672<br/>673<br/>674<br/>675<br/>676<br/>677<br/>678<br/>679<br/>680<br/>681<br/>682<br/>683<br/>684<br/>685<br/>686<br/>687<br/>688<br/>689<br/>690<br/>691<br/>692<br/>693<br/>694<br/>695<br/>696<br/>697<br/>698<br/>699<br/>700<br/>701<br/>702<br/>703<br/>704<br/>705<br/>706<br/>707<br/>708<br/>709<br/>710<br/>711<br/>712<br/>713<br/>714<br/>715<br/>716<br/>717<br/>718<br/>719<br/>720<br/>721<br/>722<br/>723<br/>724<br/>725<br/>726<br/>727<br/>728<br/>729<br/>730<br/>731<br/>732<br/>733<br/>734<br/>735<br/>736<br/>737<br/>738<br/>739<br/>740<br/>741<br/>742<br/>743<br/>744<br/>745<br/>746<br/>747<br/>748<br/>749<br/>750<br/>751<br/>752<br/>753<br/>754<br/>755<br/>756<br/>757<br/>758<br/>759<br/>760<br/>761<br/>762<br/>763<br/>764<br/>765<br/>766<br/>767<br/>768<br/>769<br/>770<br/>771<br/>772<br/>773<br/>774<br/>775<br/>776<br/>777<br/>778<br/>779<br/>780<br/>781<br/>782<br/>783<br/>784<br/>785<br/>786<br/>787<br/>788<br/>789<br/>790<br/>791<br/>792<br/>793<br/>794<br/>795<br/>796<br/>797<br/>798<br/>799<br/>800<br/>801<br/>802<br/>803<br/>804<br/>805<br/>806<br/>807<br/>808<br/>809<br/>810<br/>811<br/>812<br/>813<br/>814<br/>815<br/>816<br/>817<br/>818<br/>819<br/>820<br/>821<br/>822<br/>823<br/>824<br/>825<br/>826<br/>827<br/>828<br/>829<br/>830<br/>831<br/>832<br/>833<br/>834<br/>835<br/>836<br/>837<br/>838<br/>839<br/>840<br/>841<br/>842<br/>843<br/>844<br/>845<br/>846<br/>847<br/>848<br/>849<br/>850<br/>851<br/>852<br/>853<br/>854<br/>855<br/>856<br/>857<br/>858<br/>859<br/>860<br/>861<br/>862<br/>863<br/>864<br/>865<br/>866<br/>867<br/>868<br/>869<br/>870<br/>871<br/>872<br/>873<br/>874<br/>875<br/>876<br/>877<br/>878<br/>879<br/>880<br/>881<br/>882<br/>883<br/>884<br/>885<br/>886<br/>887<br/>888<br/>889<br/>890<br/>891<br/>892<br/>893<br/>894<br/>895<br/>896<br/>897<br/>898<br/>899<br/>900<br/>901<br/>902<br/>903<br/>904<br/>905<br/>906<br/>907<br/>908<br/>909<br/>910<br/>911<br/>912<br/>913<br/>914<br/>915<br/>916<br/>917<br/>918<br/>919<br/>920<br/>921<br/>922<br/>923<br/>924<br/>925<br/>926<br/>927<br/>928<br/>929<br/>930<br/>931<br/>932<br/>933<br/>934<br/>935<br/>936<br/>937<br/>938<br/>939<br/>940<br/>941<br/>942<br/>943<br/>944<br/>945<br/>946<br/>947<br/>948<br/>949<br/>950<br/>951<br/>952<br/>953<br/>954<br/>955<br/>956<br/>957<br/>958<br/>959<br/>960<br/>961<br/>962<br/>963<br/>964<br/>965<br/>966<br/>967<br/>968<br/>969<br/>970<br/>971<br/>972<br/>973<br/>974<br/>975<br/>976<br/>977<br/>978<br/>979<br/>980<br/>981<br/>982<br/>983<br/>984<br/>985<br/>986<br/>987<br/>988<br/>989<br/>990<br/>991<br/>992<br/>993<br/>994<br/>995<br/>996<br/>997<br/>998<br/>999<br/>1000<br/>1001<br/>1002<br/>1003<br/>1004<br/>1005<br/>1006<br/>1007<br/>1008<br/>1009<br/>1010<br/>1011<br/>1012<br/>1013<br/>1014<br/>1015<br/>1016<br/>1017<br/>1018<br/>1019<br/>1020<br/>1021<br/>1022<br/>1023<br/>1024<br/>1025<br/>1026<br/>1027<br/>1028<br/>1029<br/>1030<br/>1031<br/>1032<br/>1033<br/>1034<br/>1035<br/>1036<br/>1037<br/>1038<br/>1039<br/>1040<br/>1041<br/>1042<br/>1043<br/>1044<br/>1045<br/>1046<br/>1047<br/>1048<br/>1049<br/>1050<br/>1051<br/>1052<br/>1053<br/>1054<br/>1055<br/>1056<br/>1057<br/>1058<br/>1059<br/>1060<br/>1061<br/>1062<br/>1063<br/>1064<br/>1065<br/>1066<br/>1067<br/>1068<br/>1069<br/>1070<br/>1071<br/>1072<br/>1073<br/>1074<br/>1075<br/>1076<br/>1077<br/>1078<br/>1079<br/>1080<br/>1081<br/>1082<br/>1083<br/>1084<br/>1085<br/>1086<br/>1087<br/>1088<br/>1089<br/>1090<br/>1091<br/>1092<br/>1093<br/>1094<br/>1095<br/>1096<br/>1097<br/>1098<br/>1099<br/>1100<br/>1101<br/>1102<br/>1103<br/>1104<br/>1105<br/>1106<br/>1107<br/>1108<br/>1109<br/>1110<br/>1111<br/>1112<br/>1113<br/>1114<br/>1115<br/>1116<br/>1117<br/>1118<br/>1119<br/>1120<br/>1121<br/>1122<br/>1123<br/>1124<br/>1125<br/>1126<br/>1127<br/>1128<br/>1129<br/>1130<br/>1131<br/>1132<br/>1133<br/>1134<br/>1135<br/>1136<br/>1137<br/>1138<br/>1139<br/>1140<br/>1141<br/>1142<br/>1143<br/>1144<br/>1145<br/>1146<br/>1147<br/>1148<br/>1149<br/>1150<br/>1151<br/>1152<br/>1153<br/>1154<br/>1155<br/>1156<br/>1157<br/>1158<br/>1159<br/>1160<br/>1161<br/>1162<br/>1163<br/>1164<br/>1165<br/>1166<br/>1167<br/>1168<br/>1169<br/>1170<br/>1171<br/>1172<br/>1173<br/>1174<br/>1175<br/>1176<br/>1177<br/>1178<br/>1179<br/>1180<br/>1181<br/>1182<br/>1183<br/>1184<br/>1185<br/>1186<br/>1187<br/>1188<br/>1189<br/>1190<br/>1191<br/>1192<br/>1193<br/>1194<br/>1195<br/>1196<br/>1197<br/>1198<br/>1199<br/>1200<br/>1201<br/>1202<br/>1203<br/>1204<br/>1205<br/>1206<br/>1207<br/>1208<br/>1209<br/>1210<br/>1211<br/>1212<br/>1213<br/>1214<br/>1215<br/>1216<br/>1217<br/>1218<br/>1219<br/>1220<br/>1221<br/>1222<br/>1223<br/>1224<br/>1225<br/>1226<br/>1227<br/>1228<br/>1229<br/>1230<br/>1231<br/>1232<br/>1233<br/>1234<br/>1235<br/>1236<br/>1237<br/>1238<br/>1239<br/>1240<br/>1241<br/>1242<br/>1243<br/>1244<br/>1245<br/>1246<br/>1247<br/>1248<br/>1249<br/>1250<br/>1251<br/>1252<br/>1253<br/>1254<br/>1255<br/>1256<br/>1257<br/>1258<br/>1259<br/>1260<br/>1261<br/>1262<br/>1263<br/>1264<br/>1265<br/>1266<br/>1267<br/>1268<br/>1269<br/>1270<br/>1271<br/>1272<br/>1273<br/>1274<br/>1275<br/>1276<br/>1277<br/>1278<br/>1279<br/>1280<br/>1281<br/>1282<br/>1283<br/>1284<br/>1285<br/>1286<br/>1287<br/>1288<br/>1289<br/>1290<br/>1291<br/>1292<br/>1293<br/>1294<br/>1295<br/>1296<br/>1297<br/>1298<br/>1299<br/>1300<br/>1301<br/>1302<br/>1303<br/>1304<br/>1305<br/>1306<br/>1307<br/>1308<br/>1309<br/>1310<br/>1311<br/>1312<br/>1313<br/>1314<br/>1315<br/>1316<br/>1317<br/>1318<br/>1319<br/>1320<br/>1321<br/>1322<br/>1323<br/>1324<br/>1325<br/>1326<br/>1327<br/>1328<br/>1329<br/>1330<br/>1331<br/>1332<br/>1333<br/>1334<br/>1335<br/>1336<br/>1337<br/>1338<br/>1339<br/>1340<br/>1341<br/>1342<br/>1343<br/>1344<br/>1345<br/>1346<br/>1347<br/>1348<br/>1349<br/>1350<br/>1351<br/>1352<br/>1353<br/>1354<br/>1355<br/>1356<br/>1357<br/>1358<br/>1359<br/>1360<br/>1361<br/>1362<br/>1363<br/>1364<br/>1365<br/>1366<br/>1367<br/>1368<br/>1369<br/>1370<br/>1371<br/>1372<br/>1373<br/>1374<br/>1375<br/>1376<br/>1377<br/>1378<br/>1379<br/>1380<br/>1381<br/>1382<br/>1383<br/>1384<br/>1385<br/>1386<br/>1387<br/>1388<br/>1389<br/>1390<br/>1391<br/>1392<br/>1393<br/>1394<br/>1395<br/>1396<br/>1397<br/>1398<br/>1399<br/>1400<br/>1401<br/>1402<br/>1403<br/>1404<br/>1405<br/>1406<br/>1407<br/>1408<br/>1409<br/>1410<br/>1411<br/>1412<br/>1413<br/>1414<br/>1415<br/>1416<br/>1417<br/>1418<br/>1419<br/>1420<br/>1421<br/>1422<br/>1423<br/>1424<br/>1425<br/>1426<br/>1427<br/>1428<br/>1429<br/>1430<br/>1431<br/>1432<br/>1433<br/>1434<br/>1435<br/>1436<br/>1437<br/>1438<br/>1439<br/>1440<br/>1441<br/>1442<br/>1443<br/>1444<br/>1445<br/>1446<br/>1447<br/>1448<br/>1449<br/>1450<br/>1451<br/>1452<br/>1453<br/>1454<br/>1455<br/>1456<br/>1457<br/>1458<br/>1459<br/>1460<br/>1461<br/>1462<br/>1463<br/>1464<br/>1465<br/>1466<br/>1467<br/>1468<br/>1469<br/>1470<br/>1471<br/>1472<br/>1473<br/>1474<br/>1475<br/>1476<br/>1477<br/>1478<br/>1479<br/>1480<br/>1481<br/>1482<br/>1483<br/>1484<br/>1485<br/>1486<br/>1487<br/>1488<br/>1489<br/>1490<br/>1491<br/>1492<br/>1493<br/>1494<br/>1495<br/>1496<br/>1497<br/>1498<br/>1499<br/>1500<br/>1501<br/>1502<br/>1503<br/>1504<br/>1505<br/>1506<br/>1507<br/>1508<br/>1509<br/>1510<br/>1511<br/>1512<br/>1513<br/>1514<br/>1515<br/>1516<br/>1517<br/>1518<br/>1519<br/>1520<br/>1521<br/>1522<br/>1523<br/>1524<br/>1525<br/>1526<br/>1527<br/>1528<br/>1529<br/>1530<br/>1531<br/>1532<br/>1533<br/>1534<br/>1535<br/>1536<br/>1537<br/>1538<br/>1539<br/>1540<br/>1541<br/>1542<br/>1543<br/>1544<br/>1545<br/>1546<br/>1547<br/>1548<br/>1549<br/>1550<br/>1551<br/>1552<br/>1553<br/>1554<br/>1555<br/>1556<br/>1557<br/>1558<br/>1559<br/>1560<br/>1561<br/>1562<br/>1563<br/>1564<br/>1565<br/>1566<br/>1567<br/>1568<br/>1569<br/>1570<br/>1571<br/>1572<br/>1573<br/>1574<br/>1575<br/>1576<br/>1577<br/>1578<br/>1579<br/>1580<br/>1581<br/>1582<br/>1583<br/>1584<br/>1585<br/>1586<br/>1587<br/>1588<br/>1589<br/>1590<br/>1591<br/>1592<br/>1593<br/>1594<br/>1595<br/>1596<br/>1597<br/>1598<br/>1599<br/>1600<br/>1601<br/>1602<br/>1603<br/>1604<br/>1605<br/>1606<br/>1607<br/>1608<br/>1609<br/>1610<br/>1611<br/>1612<br/>1613<br/>1614<br/>1615<br/>1616<br/>1617<br/>1618<br/>1619<br/>1620<br/>1621<br/>1622<br/>1623<br/>1624<br/>1625<br/>1626<br/>1627<br/>1628<br/>1629<br/>1630<br/>1631<br/>1632<br/>1633<br/>1634<br/>1635<br/>1636<br/>1637<br/>1638<br/>1639<br/>1640<br/>1641<br/>1642<br/>1643<br/>1644<br/>1645<br/>1646<br/>1647<br/>1648<br/>1649<br/>1650<br/>1651<br/>1652<br/>1653<br/>1654<br/>1655<br/>1656<br/>1657<br/>1658<br/>1659<br/>1660<br/>1661<br/>1662<br/>1663<br/>1664<br/>1665<br/>1666<br/>1667<br/>1668<br/>1669<br/>1670<br/>1671<br/>1672<br/>1673<br/>1674<br/>1675<br/>1676<br/>1677<br/>1678<br/>1679<br/>1680<br/>1681<br/>1682<br/>1683<br/>1684<br/>1685<br/>1686<br/>1687<br/>1688<br/>1689<br/>1690<br/>1691<br/>1692<br/>1693<br/>1694<br/>1695<br/>1696<br/>1697<br/>1698<br/>1699<br/>1700<br/>1701<br/>1702<br/>1703<br/>1704<br/>1705<br/>1706<br/>1707<br/>1708<br/>1709<br/>1710<br/>1711<br/>1712<br/>1713<br/>1714<br/>1715<br/>1716<br/>1717<br/>1718<br/>1719<br/>1720<br/>1721<br/>1722<br/>1723<br/>1724<br/>1725<br/>1726<br/>1727<br/>1728<br/>1729<br/>1730<br/>1731<br/>1732<br/>1733<br/>1734<br/>1735<br/>1736<br/>1737<br/>1738<br/>1739<br/>1740<br/>1741<br/>1742<br/>1743<br/>1744<br/>1745<br/>1746<br/>1747<br/>1748<br/>1749<br/>1750<br/>1751<br/>1752<br/>1753<br/>1754<br/>1755<br/>1756<br/>1757<br/>1758<br/>1759<br/>1760<br/>1761<br/>1762<br/>1763<br/>1764<br/>1765<br/>1766<br/>1767<br/>1768<br/>1769<br/>1770<br/>1771<br/>1772<br/>1773<br/>1774<br/>1775<br/>1776<br/>1777<br/>1778<br/>1779<br/>1780<br/>1781<br/>1782<br/>1783<br/>1784<br/>1785<br/>1786<br/>1787<br/>1788<br/>1789<br/>1790<br/>1791<br/>1792<br/>1793<br/>1794<br/>1795<br/>1796<br/>1797<br/>1798<br/>1799<br/>1800<br/>1801<br/>1802<br/>1803<br/>1804<br/>1805<br/>1806<br/>1807<br/>1808<br/>1809<br/>1810<br/>1811<br/>1812<br/>1813<br/>1814<br/>1815<br/>1816<br/>1817<br/>1818<br/>1819<br/>1820<br/>1821<br/>1822<br/>1823<br/>1824<br/>1825<br/>1826<br/>1827<br/>1828<br/>1829<br/>1830<br/>1831<br/>1832<br/>1833<br/>1834<br/>1835<br/>1836<br/>1837<br/>1838<br/>1839<br/>1840<br/>1841<br/>1842<br/>1843<br/>1844<br/>1845<br/>1846<br/>1847<br/>1848<br/>1849<br/>1850<br/>1851<br/>1852<br/>1853<br/>1854<br/>1855<br/>1856<br/>1857<br/>1858<br/>1859<br/>1860<br/>1861<br/>1862<br/>1863<br/>1864<br/>1865<br/>1866<br/>1867<br/>1868<br/>1869<br/>1870<br/>1871<br/>1872<br/>1873<br/>1874<br/>1875<br/>1876<br/>1877<br/>1878<br/>1879<br/>1880<br/>1881<br/>1882<br/>1883<br/>1884<br/>1885<br/>1886<br/>1887<br/>1888<br/>1889<br/>1890<br/>1891<br/>1892<br/>1893<br/>1894<br/>1895<br/>1896<br/>1897<br/>1898<br/>1899<br/>1900<br/>1901<br/>1902<br/>1903<br/>1904<br/>1905<br/>1906<br/>1907<br/>1908<br/>1909<br/>1910<br/>1911<br/>1912<br/>1913<br/>1914<br/>1915<br/>1916<br/>1917<br/>1918<br/>1919<br/>1920<br/>1921<br/>1922<br/>1923<br/>1924<br/>1925<br/>1926<br/>1927<br/>1928<br/>1929<br/>1930<br/>1931<br/>1932<br/>1933<br/>1934<br/>1935<br/>1936<br/>1937<br/>1938<br/>1939<br/>1940<br/>1941<br/>1942<br/>1943<br/>1944<br/>1945<br/>1946<br/>1947<br/>1948<br/>1949<br/>1950<br/>1951<br/>1952<br/>1953<br/>1954<br/>1955<br/>1956<br/>1957<br/>1958<br/>1959<br/>1960<br/>1961<br/>1962<br/>1963<br/>1964<br/>1965<br/>1966<br/>1967<br/>1968<br/>1969<br/>1970<br/>1971<br/>1972<br/>1973<br/>1974<br/>1975<br/>1976<br/>1977<br/>1978<br/>1979<br/>1980<br/>1981<br/>1982<br/>1983<br/>1984<br/>1985<br/>1986<br/>1987<br/>1988<br/>1989<br/>1990<br/>1991<br/>1992<br/>1993<br/>1994<br/>1995<br/>1996<br/>1997<br/>1998<br/>1999<br/>2000<br/>2001<br/>2002<br/>2003<br/>2004<br/>2005<br/>2006<br/>2007<br/>2008<br/>2009<br/>2010<br/>2011<br/>2012<br/>2013<br/>2014<br/>2015<br/>2016<br/>2017<br/>2018<br/>2019<br/>2020<br/>2021<br/>2022<br/>2023<br/>2024<br/>2025<br/>2026<br/>2027<br/>2028<br/>2029<br/>2030<br/>2031<br/>2032<br/>2033<br/>2034<br/>2035<br/>2036<br/>2037<br/>2038<br/>2039<br/>2040<br/>2041<br/>2042<br/>2043<br/>2044<br/>2045<br/>2046<br/>2047<br/>2048<br/>2049<br/>2050<br/>2051<br/>2052<br/>2053<br/>2054<br/>2055<br/>2056<br/>2057<br/>2058<br/>2059<br/>2060<br/>2061<br/>2062<br/>2063<br/>2064<br/>2065<br/>2066<br/>2067<br/>2068<br/>2069<br/>2070<br/>2071<br/>2072<br/>2073<br/>2074<br/>2075<br/>2076<br/>2077<br/>2078<br/>2079<br/>2080<br/>2081<br/>2082<br/>2083<br/>2084<br/>2085<br/>2086<br/>2087<br/>2088<br/>2089<br/>2090<br/>2091<br/>2092<br/>2093<br/>2094<br/>2095<br/>2096<br/>2097<br/>2098<br/>2099<br/>2100<br/>2101<br/>2102<br/>2103<br/>2104<br/>2105<br/>2106<br/>2107<br/>2108<br/>2109<br/>2110<br/>2111<br/>2112<br/>2113<br/>2114<br/>2115<br/>2116<br/>2117<br/>2118<br/>2119<br/>2120<br/>2121<br/>2122<br/>2123<br/>2124<br/>2125<br/>2126<br/>2127<br/>2128<br/>2129<br/>2130<br/>2131<br/>2132<br/>2133<br/>2134<br/>2135<br/>2136<br/>2137<br/>2138<br/>2139<br/>2140<br/>2141<br/>2142<br/>2143<br/>2144<br/>2145<br/>2146<br/>2147<br/>2148<br/>2149<br/>2150<br/>2151<br/>2152<br/>2153<br/>2154<br/>2155<br/>2156<br/>2157<br/>2158<br/>2159<br/>2160<br/>2161<br/>2162<br/>2163<br/>2164<br/>2165<br/>2166<br/>2167<br/>2168<br/>2169<br/>2170<br/>2171<br/>2172<br/>2173<br/>2174<br/>2175<br/>2176<br/>2177<br/>2178<br/>2179<br/>2180<br/>2181<br/>2182<br/>2183<br/>2184<br/>2185<br/>2186<br/>2187<br/>2188<br/>2189<br/>2190<br/>2191<br/>2192<br/>2193<br/>2194<br/>2195<br/>2196<br/>2197<br/>2198<br/>2199<br/>2200<br/>2201<br/>2202<br/>2203<br/>2204<br/>2205<br/>2206<br/>2207<br/>2208<br/>2209<br/>2210<br/>2211<br/>2212<br/>2213<br/>2214<br/>2215<br/>2216<br/>2217<br/>2218<br/>2219<br/>2220<br/>2221<br/>2222<br/>2223<br/>2224<br/>2225<br/>2226<br/>2227<br/>2228<br/>2229<br/>2230<br/>2231<br/>2232<br/>2233<br/>2234<br/>2235<br/>2236<br/>2237<br/>2238<br/>2239<br/>2240<br/>2241<br/>2242<br/>2243<br/>2244<br/>2245<br/>2246<br/>2247<br/>2248<br/>2249<br/>2250<br/>2251<br/>2252<br/>2253<br/>2254<br/>2255<br/>2256<br/>2257<br/>2258<br/>2259<br/>2260<br/>2261<br/>2262<br/>2263<br/>2264<br/>2265<br/>2266<br/>2267<br/>2268<br/>2269<br/>2270<br/>2271<br/>2272<br/>2273<br/>2274<br/>2275<br/>2276<br/>2277<br/>2278<br/>2279<br/>2280<br/>2281<br/>2282<br/>2283<br/>2284<br/>2285<br/>2286<br/>2287<br/>2288<br/>2289<br/>2290<br/>2291<br/>2292<br/>2293<br/>2294<br/>2295<br/>2296<br/>2297<br/>2298<br/>2299<br/>2300<br/>2301<br/>2302<br/>2303<br/>2304<br/>2305<br/>2306<br/>2307<br/>2308<br/>2309<br/>2310<br/>2311<br/>2312<br/>2313<br/>2314<br/>2315<br/>2316<br/>2317<br/>2318<br/>2319<br/>2320<br/>2321<br/>2322<br/>2323<br/>2324<br/>2325<br/>2326<br/>2327<br/>2328<br/>2329<br/>2330<br/>2331<br/>2332<br/>2333<br/>2334<br/>2335<br/>2336<br/>2337<br/>2338<br/>2339<br/>2340<br/>2341<br/>2342<br/>2343<br/>2344<br/>2345<br/>2346<br/>2347<br/>2348<br/>2349<br/>2350<br/>2351<br/>2352<br/>2353<br/>2354<br/>2355<br/>2356<br/>2357<br/>2358<br/>2359<br/>2360<br/>2361<br/>2362<br/>2363<br/>2364<br/>2365<br/>2366<br/>2367<br/>2368<br/>2369<br/>2370<br/>2371<br/>2372<br/>2373<br/>2374<br/>2375<br/>2376<br/>2377<br/>2378<br/>2379<br/>2380<br/>2381<br/>2382<br/>2383<br/>2384<br/>2385<br/>2386<br/>2387<br/>2388<br/>2389<br/>2390<br/>2391<br/>2392<br/>2393<br/>2394<br/>2395<br/>2396<br/>2397<br/>2398<br/>2399<br/>2400<br/>2401<br/>2402<br/>2403<br/>2404<br/>2405<br/>2406<br/>2407<br/>2408<br/>2409<br/>2410<br/>2411<br/>2412<br/>2413<br/>2414<br/>2415<br/>2416<br/>2417<br/>2418<br/>2419<br/>2420<br/>2421<br/>2422<br/>2423<br/>2424<br/>2425<br/>2426<br/>2427<br/>2428<br/>2429<br/>2430<br/>2431<br/>2432<br/>2433<br/>2434<br/>2435<br/>2436<br/>2437<br/>2438<br/>2439<br/>2440<br/>2441<br/>2442<br/>2443<br/>2444<br/>2445<br/>2446<br/>2447<br/>2448<br/>2449<br/>2450<br/>2451<br/>2452<br/>2453<br/>2454<br/>2455<br/>2456<br/>2457<br/>2458<br/>2459<br/>2460<br/>2461<br/>2462<br/>2463<br/>2464<br/>2465<br/>2466<br/>2467<br/>2468<br/>2469<br/>2470<br/>2471<br/>2472<br/>2473<br/>2474<br/>2475<br/>2476<br/>2477<br/>2478<br/>2479<br/>2480<br/>2481<br/>2482<br/>2483<br/>2484<br/>2485<br/>2486<br/>2487<br/>2488<br/>2489<br/>2490<br/>2491<br/>2492<br/>2493<br/>2494<br/>2495<br/>2496<br/>2497<br/>2498<br/>2499<br/>2500<br/>2501<br/>2502<br/>2503<br/>2504<br/>2505<br/>2506<br/>2507<br/>2508<br/>2509<br/>2510<br/>2511<br/>2512<br/>2513<br/>2514<br/>2515<br/>2516<br/>2517<br/>2518<br/>2519<br/>2520<br/>2521<br/>2522<br/>2523<br/>2524<br/>2525<br/>2526<br/>2527<br/>2528<br/>2529<br/>2530<br/>2531<br/>2532<br/>2533<br/>2534<br/>2535<br/>2536<br/>2537<br/>2538<br/>2539<br/>2540<br/>2541<br/>2542<br/>2543<br/>2544<br/>2545<br/>2546<br/>2547<br/>2548<br/>2549<br/>2550<br/>2551<br/>2552<br/>2553<br/>2554<br/>2555<br/>2556<br/>2557<br/>2558<br/>2559<br/>2560<br/>2561<br/>2562<br/>2563<br/>2564<br/>2565<br/>2566<br/>2567<br/>2568<br/>2569<br/>2570<br/>2571<br/>2572<br/>2573<br/>2574<br/>2575<br/>2576<br/>2577<br/>2578<br/>2579<br/>2580<br/>2581<br/>2582<br/>2583<br/>2584<br/>2585<br/>2586<br/>2587<br/>2588<br/>2589<br/>2590<br/>2591<br/>2592<br/>2593<br/>2594<br/>2595<br/>2596<br/>2597<br/>2598<br/>2599<br/>2600<br/>2601<br/>2602<br/>2603<br/>2604<br/>2605<br/>2606<br/>2607<br/>2608<br/>2609<br/>2610<br/>2611<br/>2612<br/>2613<br/>2614<br/>2615<br/>2616<br/>2617<br/>2618<br/>2619<br/>2620<br/>2621<br/>2622<br/>2623<br/>2624<br/>2625<br/>2626<br/>2627<br/>2628<br/>2629<br/>2630<br/>2631<br/>2632<br/>2633<br/>2634<br/>2635<br/>2636<br/>2637<br/>2638<br/>2639<br/>2640<br/>2641<br/>2642<br/>2643<br/>2644<br/>2645<br/>2646<br/>2647<br/>2648<br/>2649<br/>2650<br/>2651<br/>2652<br/>2653<br/>2654<br/>2655<br/>2656<br/>2657<br/>2658<br/>2659<br/>2660<br/>2661<br/>2662<br/>2663<br/>2664<br/>2665<br/>2666<br/>2667<br/>2668<br/>2669<br/>2670<br/>2671<br/>2672<br/>2673<br/>2674<br/>2675<br/>2676<br/>2677<br/>2678<br/>2679<br/>2680<br/>2681<br/>2682<br/>2683<br/>2684<br/>2685<br/>2686<br/>2687<br/>2688<br/>2689<br/>2690<br/>2691<br/>2692<br/>2693<br/>2694<br/>2695<br/>2696<br/>2697<br/>2698<br/>2699<br/>2700<br/>2701<br/>2702<br/>2703<br/>2704<br/>2705<br/>2706<br/>2707<br/>2708<br/>2709<br/>2710<br/>2711<br/>2712<br/>2713<br/>2714<br/>2715<br/>2716<br/>2717<br/>2718<br/>2719<br/>2720<br/>2721<br/>2722<br/>2723<br/>2724<br/>2725<br/>2726<br/>2727<br/>2728<br/>2729<br/>2730<br/>2731<br/>2732<br/>2733<br/>2734<br/>2735<br/>2736<br/>2737<br/>2738<br/>2739<br/>2740<br/>2741<br/>2742<br/>2743<br/>2744<br/>2745<br/>2746<br/>2747<br/>2748<br/>2749<br/>2750<br/>2751<br/>2752<br/>2753<br/>2754<br/>2755<br/>2756<br/>2757<br/>2758<br/>2759<br/>2760<br/>2761<br/>2762<br/>2763<br/>2764<br/>2765<br/>2766<br/>2767<br/>2768<br/>2769<br/>2770<br/>2771<br/>2772<br/>2773<br/>2774<br/>2775<br/>2776<br/>2777<br/>2778<br/>2779<br/>2780<br/>2781<br/>2782<br/>2783<br/>2784<br/>2785<br/>2786<br/>2787<br/>2788<br/>2789<br/>2790<br/>2791<br/>2792<br/>2793<br/>2794<br/>2795<br/>2796<br/>2797<br/>2798<br/>2799<br/>2800<br/>2801<br/>2802<br/>2803<br/>2804<br/>2805<br/>2806<br/>2807<br/>2808<br/>2809<br/>2810<br/>2811<br/>2812<br/>2813<br/>2814<br/>2815<br/>2816<br/>2817<br/>2818<br/>2819<br/>2820<br/>2821<br/>2822<br/>2823<br/>2824<br/>2825<br/>2826<br/>2827<br/>2828<br/>2829<br/>2830<br/>2831<br/>2832<br/>2833<br/>2834<br/>2835<br/>2836<br/>2837<br/>2838<br/>2839<br/>2840<br/>2841<br/>2842<br/>2843<br/>2844<br/>2845<br/>2846<br/>2847<br/>2848<br/>2849<br/>2850<br/>2851<br/>2852<br/>2853<br/>2854<br/>2855<br/>2856<br/>2857<br/>2858<br/>2859<br/>2860<br/>2861<br/>2862<br/>2863<br/>2864<br/>2865<br/>2866<br/>2867<br/>2868<br/>2869<br/>2870<br/>2871<br/>2872<br/>2873<br/>2874<br/>2875<br/>2876<br/>2877<br/>2878<br/>2879<br/>2880<br/>2881<br/>2882<br/>2883<br/>2884<br/>2885<br/>2886<br/>2887<br/>2888<br/>2889<br/>2890<br/>2891<br/>2892<br/>2893<br/>2894<br/>2895<br/>2896<br/>2897<br/>2898<br/>2899<br/>2900<br/>2901<br/>2902<br/>2903<br/>2904<br/>2905<br/>2906<br/>2907<br/>2908<br/>2909<br/>2910<br/>2911<br/>2912<br/>2913<br/>2914<br/>2915<br/>2916<br/>2917<br/>2918<br/>2919<br/>2920<br/>2921<br/>2922<br/>2923<br/>2924<br/>2925<br/>2926<br/>2927<br/>2928<br/>2929<br/>2930<br/>2931<br/>2932<br/>2933<br/>2934<br/>2935<br/>2936<br/>2937<br/>2938<br/>2939<br/>2940<br/>2941<br/>2942<br/>2943<br/>2944<br/>2945<br/>2946<br/>2947<br/>2948<br/>2949<br/>2950<br/>2951<br/>2952<br/>2953<br/>2954<br/>2955<br/>2956<br/>2957<br/>2958<br/>2959<br/>2960<br/>2961<br/>2962<br/>2963<br/>2964<br/>2965<br/>2966<br/>2967<br/>2968<br/>2969<br/>2970<br/>2971<br/>2972<br/>2973<br/>2974<br/>2975<br/>2976<br/>2977<br/>2978<br/>2979<br/>2980<br/>2981<br/>2982<br/>2983<br/>2984<br/>2985<br/>2986<br/>2987<br/>2988<br/>2989<br/>2990<br/>2991<br/>2992<br/>2993<br/>2994<br/>2995<br/>2996<br/>2997<br/>2998<br/>2999<br/>3000<br/>3001<br/>3002<br/>3003<br/>3004<br/>3005<br/>3006<br/>3007<br/>3008<br/>3009<br/>3010<br/>3011<br/>3012<br/>3013<br/>3014<br/>3015<br/>3016<br/>3017<br/>3018<br/>3019<br/>3020<br/>3021<br/>3022<br/>3023<br/>3024<br/>3025<br/>3026<br/>3027<br/>3028<br/>3029<br/>3030<br/>3031<br/>3032<br/>3033<br/>3034<br/>3035<br/>3036<br/>3037<br/>3038<br/>3039<br/>3040<br/>3041<br/>3042<br/>3043<br/>3044<br/>3045<br/>3046<br/>3047<br/>3048<br/>3049<br/>3050<br/>3051<br/>3052<br/>3053<br/>3054<br/>3055<br/>3056<br/>3057<br/>3058<br/>3059<br/>3060<br/>3061<br/>3062<br/>3063<br/>3064<br/>3065<br/>3066<br/>3067<br/>3068<br/>3069<br/>3070<br/>3071<br/>3072<br/>3073<br/>3074<br/>3075<br/>3076<br/>3077<br/>3078<br/>3079<br/>3080<br/>3081<br/>3082<br/>3083<br/>3084<br/>3085<br/>3086<br/>3087<br/>3088<br/>3089<br/>3090<br/>3091<br/>3092<br/>3093<br/>3094<br/>3095<br/>3096<br/>3097<br/>3098<br/>3099<br/>3100<br/>3101<br/>3102<br/>3103<br/>3104<br/>3105<br/>3106<br/>3107<br/>3108<br/>3109<br/>3110<br/>3111<br/>3112<br/>3113<br/>3114<br/>3115<br/>3116<br/>3117<br/>3118<br/>3119<br/>3120<br/>3121<br/>3122<br/>3123<br/>3124<br/>3125<br/>3126<br/>3127<br/>3128<br/>3129<br/>3130<br/>3131<br/>3132<br/>3133<br/>3134<br/>3135<br/>3136<br/>3137<br/>3138<br/>3139<br/>3140<br/>3141<br/>3142<br/>3143<br/>3144<br/>3145<br/>3146<br/>3147<br/>3148<br/>3149<br/>3150<br/>3151<br/>3152<br/>3153<br/>3154<br/>3155<br/>3156<br/>3157<br/>3158<br/>3159<br/>3160<br/>3161<br/>3162<br/>3163<br/>3164<br/>3165<br/>3166<br/>3167<br/>3168<br/>3169<br/>3170<br/>3171<br/>3172<br/>3173<br/>3174<br/>3175<br/>3176<br/>3177<br/>3178<br/>3179<br/>3180<br/>3181<br/>3182<br/>3183<br/>3184<br/>3185<br/>3186<br/>3187<br/>3188<br/>3189<br/>3190<br/>3191<br/>3192<br/>3193<br/>3194<br/>3195<br/>3196<br/>3197<br/>3198<br/>3199<br/>3200<br/>3201<br/>3202<br/>3203<br/>3204<br/>3205<br/>3206<br/>3207<br/>3208<br/>3209<br/>3210<br/>3211<br/>3212<br/>3213<br/>3214<br/>3215<br/>3216<br/>3217<br/>3218<br/>3219<br/>3220<br/>3221<br/>3222<br/>3223<br/>3224<br/>3225<br/>3226<br/>3227<br/>3228<br/>3229<br/>3230<br/>3231<br/>3232<br/>3233<br/>3234<br/>3235<br/>3236<br/>3237<br/>3238<br/>3239<br/>3240<br/>3241<br/>3242<br/>3243<br/>3244<br/>3245<br/>3246<br/>3247<br/>3248<br/>3249<br/>3250<br/>3251<br/>3252<br/>3253<br/>3254<br/>3255<br/>3256<br/>3257<br/>3258<br/>3259<br/>3260<br/>3261<br/>3262<br/>3263<br/>3264<br/>3265<br/>3266<br/>3267<br/>3268<br/>3269<br/>3270<br/>3271<br/>3272<br/>3273<br/>3274<br/>3275<br/>3276<br/>3277<br/>3278<br/>3279<br/>3280<br/>3281<br/>3282<br/>3283<br/>3284<br/>3285<br/>3286<br/>3287<br/>3288<br/>3289<br/>3290<br/>3291<br/>3292<br/>3293<br/>3294<br/>3295<br/>3296<br/>3297<br/>3298<br/>3299<br/>3300<br/>3301<br/>3302<br/>3303<br/>3304<br/>3305<br/>3306<br/>3307<br/>3308<br/>3309<br/>3310<br/>3311<br/>3312<br/>3313<br/>3314<br/>3315<br/>3316<br/>3317<br/>3318<br/>3319<br/>3320<br/>3321<br/>3322<br/>3323<br/>3324<br/>3325<br/>3326<br/>3327<br/>3328<br/>3329<br/>3330<br/>3331<br/>3332<br/>3333<br/>3334<br/>3335<br/>3336<br/>3337<br/>3338<br/>3339<br/>3340<br/>3341<br/>3342<br/>3343<br/>3344<br/>3345<br/>3346<br/>3347<br/>3348<br/>3349<br/>3350<br/>3351<br/>3352<br/>3353<br/>3354<br/>3355<br/>3356<br/>3357<br/>3358<br/>3359<br/>3360<br/>3361<br/>3362<br/>3363<br/>3364<br/>3365<br/>3366<br/>3367<br/>3368<br/>3369<br/>3370<br/>3371<br/>3372<br/>3373<br/>3374<br/>3375<br/>3376<br/>3377<br/>3378<br/>3379<br/>3380<br/>3381<br/>3382<br/>3383<br/>3384<br/>3385<br/>3386<br/>3387<br/>3388<br/>3389<br/>3390<br/>3391<br/>3392<br/>3393<br/>3394<br/>3395<br/>3396<br/>3397<br/>3398<br/>3399<br/>3400<br/>3401<br/>3402<br/>3403<br/>3404<br/>3405<br/>3406<br/>3407<br/>3408<br/>3409<br/>3410<br/>3411<br/>3412<br/>3413<br/>3414<br/>3415<br/>3416<br/>3417<br/>3418<br/>3419<br/>3420<br/>3421<br/>3422<br/>3423<br/>3424<br/>3425<br/>3426<br/>3427<br/>3428<br/>3429<br/>3430<br/>3431<br/>3432<br/>3433<br/>3434<br/>3435<br/>3436<br/>3437<br/>3438<br/>3439<br/>3440<br/>3441<br/>3442<br/>3443<br/>3444<br/>3445<br/>3446<br/>3447<br/>3448<br/>3449<br/>3450<br/>3451<br/>3452<br/>3453<br/>3454<br/>3455<br/>3456<br/>3457<br/>3458<br/>3459<br/>3460<br/>3461<br/>3462<br/>3463<br/>3464<br/>3465<br/>3466<br/>3467<br/>3468<br/>3469<br/>3470<br/>3471<br/>3472<br/>3473<br/>3474<br/>3475<br/>3476<br/>3477<br/>3478<br/>3479<br/>3480<br/>3481<br/>3482<br/>3483<br/>3484<br/>3485<br/>3486<br/>3487<br/>3488<br/>3489<br/>3490<br/>3491<br/>3492<br/>3493<br/>3494<br/>3495<br/>3496<br/>3497<br/>3498<br/>3499<br/>3500<br/>3501<br/>3502<br/>3503<br/>3504<br/>3505<br/>3506<br/>3507<br/>3508<br/>3509<br/>3510<br/>3511<br/>3512<br/>3513<br/>3514<br/>3515<br/>3516<br/>3517<br/>3518<br/>3519<br/>3520<br/>3521<br/>3522<br/>3523<br/>3524<br/>3525<br/>3526<br/>3527<br/>3528<br/>3529<br/>3530<br/>3531<br/>3532<br/>3533<br/>3534<br/>3535<br/>3536<br/>3537<br/>3538<br/>3539<br/>3540<br/>3541<br/>3542<br/>3543<br/>3544<br/>3545<br/>3546<br/>3547<br/>3548<br/>3549<br/>3550<br/>3551<br/>3552<br/>3553<br/>3554<br/>3555<br/>3556<br/>3557<br/>3558<br/>3559<br/>3560<br/>3561<br/>3562<br/>3563<br/>3564<br/>3565<br/>3566<br/>3567<br/>3568<br/>3569<br/>3570<br/>3571<br/>3572<br/>3573<br/>3574<br/>3575<br/>3576<br/>3577<br/>3578<br/>3579<br/>3580<br/>3581<br/>3582<br/>3583<br/>3584<br/>3585<br/>3586<br/>3587<br/>3588<br/>3589<br/>3590<br/>3591<br/>3592<br/>3593<br/>3594<br/>3595<br/>3596<br/>3597<br/>3598<br/>3599<br/>3600<br/>3601<br/>3602<br/>3603<br/>3604<br/>3605<br/>3606<br/>3607<br/>3608<br/>3609<br/>3610<br/>3611<br/>3612<br/>3613<br/>3614<br/>3615<br/>3616<br/>3617<br/>3618<br/>3619<br/>3620<br/>3621<br/>3622<br/>3623<br/>3624<br/>3625<br/>3626<br/>3627<br/>3628<br/>3629<br/>3630<br/>3631<br/>3632<br/>3633<br/>3634<br/>3635<br/>3636<br/>3637<br/>3638<br/>3639<br/>3640<br/>3641<br/>3642<br/>3643<br/>3644<br/>3645<br/>3646<br/>3647<br/>3648<br/>3649<br/>3650<br/>3651<br/>3652<br/>3653<br/>3654<br/>3655<br/>3656<br/>3657<br/>3658<br/>3659<br/>3660<br/>3661<br/>3662<br/>3663<br/>3664<br/>3665<br/>3666<br/>3667<br/>3668<br/>3669<br/>3670<br/>3671<br/>3672<br/>3673<br/>3674<br/>3675<br/>3676<br/>3677<br/>3678<br/>3679<br/>3680<br/>3681<br/>3682<br/>3683<br/>3684<br/>3685<br/>3686<br/>3687<br/>3688<br/>3689<br/>3690<br/>3691<br/>3692<br/>3693<br/>3694<br/>3695<br/>3696<br/>3697<br/>3698<br/>3699<br/>3700<br/>3701<br/>3702<br/>3703<br/>3704<br/>3705<br/>3706<br/>3707<br/>3708<br/>3709<br/>3710<br/>3711<br/>3712<br/>3713<br/>3714<br/>3715<br/>3716<br/>3717<br/>3718<br/>3719<br/>3720<br/>3721<br/>3722<br/>3723<br/>3724<br/>3725<br/>3726<br/>3727<br/>3728<br/>3729<br/>3730<br/>3731<br/>3732<br/>3733<br/>3734<br/>3735<br/>3736<br/>3737<br/>3738<br/>3739<br/>3740<br/>3741<br/>3742<br/>3743<br/>3744<br/>3745<br/>3746<br/>3747<br/>3748<br/>3749<br/>3750<br/>3751<br/>3752<br/>3753<br/>3754<br/>3755<br/>3756<br/>3757<br/>3758<br/>3759<br/>3760<br/>3761<br/>3762<br/>3763<br/>3764<br/>3765<br/>3766<br/>3767<br/>3768<br/>3769<br/>3770<br/>3771<br/>3772<br/>3773<br/>3774<br/>3775<br/>3776<br/>3777<br/>3778<br/>3779<br/>3780<br/>3781<br/>3782<br/>3783<br/>3784<br/>3785<br/>3786<br/>3787<br/>3788<br/>3789<br/>3790<br/>3791<br/>3792<br/>3793<br/>3794<br/>3795<br/>3796<br/>3797<br/>3798<br/>3799<br/>3800<br/>3801<br/>3802<br/>3803<br/>3804<br/>3805<br/>3806<br/>3807<br/>3808<br/>3809<br/>3810<br/>3811<br/>3812<br/>3813<br/>3814<br/>3815<br/>3816<br/>3817<br/>3818<br/>3819<br/>3820<br/>3821<br/>3822<br/>3823<br/>3824<br/>3825<br/>3826<br/>3827<br/>3828<br/>3829<br/>3830<br/>3831<br/>3832<br/>3833<br/>3834<br/>3835<br/>3836<br/>3837<br/>3838<br/>3839<br/>3840<br/>3841<br/>3842<br/>3843<br/>3844<br/>3845<br/>3846<br/>3847<br/>3848<br/>3849<br/>3850<br/>3851<br/>3852<br/>3853<br/>3854<br/>3855<br/>3856<br/>3857<br/>3858<br/>3859<br/>3860<br/>3861<br/>3862<br/>3863<br/>3864<br/>3865<br/>3866<br/>3867<br/>3868<br/>3869<br/>3870<br/>3871<br/>3872<br/>3873<br/>3874<br/>3875<br/>3876<br/>3877<br/>3878<br/>3879<br/>3880<br/>3881<br/>3882<br/>3883<br/>3884<br/>3885<br/>3886<br/>3887<br/>3888<br/>3889<br/>3890<br/>3891<br/>3892<br/>3893<br/>3894<br/>3895<br/>3896<br/>3897<br/>3898<br/>3899<br/>3900<br/>3901<br/>3902<br/>3903<br/>3904<br/>3905<br/>3906<br/>3907<br/>3908<br/>3909<br/>3910<br/>3911<br/>3912<br/>3913<br/>3914<br/>3915<br/>3916<br/>3917<br/>3918<br/>3919<br/>3920<br/>3921<br/>3922<br/>3923<br/>3924<br/>3925<br/>3926<br/>3927<br/>3928<br/>3929<br/>3930<br/>3931<br/>3932<br/>3933<br/>3934<br/>3935<br/>3936<br/>3937<br/>3938<br/>3939<br/>3940<br/>3941<br/>3942<br/>3943<br/>3944<br/>3945<br/>3946<br/>3947<br/>3948<br/>3949<br/>3950<br/>3951<br/>3952<br/>3953<br/>3954<br/>3955<br/>3956<br/>3957<br/>3958<br/>3959<br/>3960<br/>3961<br/>3962<br/>3963<br/>3964<br/>3965<br/>3966<br/>3967<br/>3968<br/>3969<br/>3970<br/>3971<br/>3972<br/>3973<br/>3974<br/>3975<br/>3976<br/>3977<br/>3978<br/>3979<br/>3980<br/>3981<br/>3982<br/>3983<br/>3984<br/>3985<br/>3986<br/>3987<br/>3988<br/>3989<br/>3990<br/>3991<br/>3992<br/>3993<br/>3994<br/>3995<br/>3996<br/>3997<br/>3998<br/>3999<br/>4000<br/>4001<br/>4002<br/>4003<br/>4004<br/>4005<br/>4006<br/>4007<br/>4008<br/>4009<br/>4010<br/>4011<br/>4012<br/>4013<br/>4014<br/>4015<br/>4016<br/>4017<br/>4018<br/>4019<br/>4020<br/>4021<br/>4022<br/>4023<br/>4024<br/>4025<br/>4026<br/>4027<br/>4028<br/>4029<br/>4030<br/>4031<br/>4032<br/>4033<br/>4034<br/>4035<br/>4036<br/>4037<br/>4038<br/>4039<br/>4040<br/>4041<br/>4042<br/>4043<br/>4044<br/>4045<br/>4046<br/>4047<br/>4048<br/>4049<br/>4050<br/>4051<br/>4052<br/>4053<br/>4054<br/>4055<br/>4056<br/>4057<br/>4058<br/>4059<br/>4060<br/>4061<br/>4062<br/>4063<br/>4064<br/>4065<br/>4066<br/>4067<br/>4068<br/>4069<br/>4070<br/>4071<br/>4072<br/>4073<br/>4074<br/>4075<br/>4076<br/>4077<br/>4078<br/>4079<br/>4080<br/>4081<br/>4082<br/>4083<br/>4084<br/>4085<br/>4086<br/>4087<br/>4088<br/>4089<br/>4090<br/>4091<br/>4092<br/>4093<br/>4094<br/>4095<br/>4096<br/>4097<br/>4098<br/>4099<br/>4100<br/>4101<br/>4102<br/>4103<br/>4104<br/>4105<br/>4106<br/>4107<br/>4108<br/>4109<br/>4110<br/>4111<br/>4112<br/>4113<br/>4114<br/>4115<br/>4116<br/>4117<br/>4118<br/>4119<br/>4120<br/>4121<br/>4122<br/>4123<br/>4124<br/>4125<br/>4126<br/>4127<br/>4128<br/>4129<br/>4130<br/>4131<br/>4132<br/>4133<br/>4134<br/>4135<br/>4136<br/>4137<br/>4138<br/>4139<br/>4140<br/>4141<br/>4142<br/>4143<br/>4144<br/>4145<br/>4146<br/>4147<br/>4148<br/>4149<br/>4150<br/>4151<br/>4152<br/>4153<br/>4154<br/>4155<br/>4156<br/>4157<br/>4158<br/>4159<br/>4160<br/>4161<br/>4162<br/>4163<br/>4164<br/>4165<br/>4166<br/>4167<br/>4168<br/>4169<br/>4170<br/>4171<br/>4172<br/>4173<br/>4174<br/>4175<br/>4176<br/>4177<br/>4178<br/>4179<br/>4180<br/>4181<br/>4182<br/>4183<br/>4184<br/>4185<br/>4186<br/>4187<br/>4188<br/>4189<br/>4190<br/>4191<br/>4192<br/>4193<br/>4194<br/>4195<br/>4196<br/>4197<br/>4198<br/>4199<br/>4200<br/>4201<br/>4202<br/>4203<br/>4204<br/>4205<br/>4206<br/>4207<br/>4208<br/>4209<br/>4210<br/>4211<br/>4212<br/>4213<br/>4214<br/>4215<br/>4216<br/>4217<br/>4218<br/>4219<br/>4220<br/>4221<br/>4222<br/>4223<br/>4224<br/>4225<br/>4226<br/>4227<br/>4228<br/>4229<br/>4230<br/>4231<br/>4232<br/>4233<br/>4234<br/>4235<br/>4236<br/>4237<br/>4238<br/>4239<br/>4240<br/>4241<br/>4242<br/>4243<br/>4244<br/>4245<br/>4246<br/>4247<br/>4248<br/>4249<br/>4250<br/>4251<br/>4252<br/>4253<br/>4254<br/>4255<br/>4256<br/>4257<br/>4258<br/>4259<br/>4260<br/>4261<br/>4262<br/>4263<br/>4264<br/>4265<br/>4266<br/>4267<br/>4268<br/>4269<br/>4270<br/>4271<br/>4272<br/>4273<br/>4274<br/>4275<br/>4276<br/>4277<br/>4278<br/>4279<br/>4280<br/>4281<br/>4282<br/>4283<br/>4284<br/>4285<br/>4286<br/>4287<br/>4288<br/>4289<br/>4290<br/>4291<br/>4292<br/>4293<br/>4294<br/>4295<br/>4296<br/>4297<br/>4298<br/>4299<br/>4300<br/>4301<br/>4302<br/>4303<br/>4304<br/>4305<br/>4306<br/>4307<br/>4308<br/>4309<br/>4310<br/>4311<br/>4312<br/>4313<br/>4314<br/>4315<br/>4316<br/>4317<br/>4318<br/>4319<br/>4320<br/>4321<br/>4322<br/>4323<br/>4324<br/>4325<br/>4326<br/>4327<br/>4328<br/>4329<br/>4330<br/>4331<br/>4332<br/>4333<br/>4334<br/>4335<br/>4336<br/>4337<br/>4338<br/>4339<br/>4340<br/>4341<br/>4342<br/>4343<br/>4344<br/>4345<br/>4346<br/>4347<br/>4348<br/>4349<br/>4350<br/>4351<br/>4352<br/>4353<br/>4354<br/>4355<br/>4356<br/>4357<br/>4358<br/>4359<br/>4360<br/>4361<br/>4362<br/>4363<br/>4364<br/>4365<br/>4366<br/>4367<br/>4368<br/>4369<br/>4370<br/>4371<br/>4372<br/>4373<br/>4374<br/>4375<br/>4376<br/>4377<br/>4378<br/>4379<br/>4380<br/>4381<br/>4382<br/>4383<br/>4384<br/>4385<br/>4386<br/>4387<br/>4388<br/>4389<br/>4390<br/>4391<br/>4392<br/>4393<br/>4394<br/>4395<br/>4396<br/>4397<br/>4398<br/>4399<br/>4400<br/>4401<br/>4402<br/>4403<br/>4404<br/>4405<br/>4406<br/>4407<br/>4408<br/>4409<br/>4410<br/>4411<br/>4412<br/>4413<br/>4414<br/>4415<br/>4416<br/>4417<br/>4418<br/>4419<br/>4420<br/>4421<br/>4422<br/>4423<br/>4424<br/>4425<br/>4426<br/>4427<br/>4428<br/>4429<br/>4430<br/>4431<br/>4432<br/>4433<br/>4434<br/>4435<br/>4436<br/>4437<br/>4438<br/>4439<br/>4440<br/>4441<br/>4442<br/>4443<br/>4444<br/>4445<br/>4446<br/>4447<br/>4448<br/>4449<br/>4450<br/>4451<br/>4452<br/>4453<br/>4454<br/>4455<br/>4456<br/>4457<br/>4458<br/>4459<br/>4460<br/>4461<br/>4462<br/>4463<br/>4464<br/>4465<br/>4466<br/>4467<br/>4468<br/>4469<br/>4470<br/>4471<br/>4472<br/>4473<br/>4474<br/>4475<br/>4476<br/>4477<br/>4478<br/>4479<br/>4480<br/>4481<br/>4482<br/>4483<br/>4484<br/>4485<br/>4486<br/>4487<br/>4488<br/>4489<br/>4490<br/>4491<br/>4492<br/>4493<br/>4494<br/>4495<br/>4496<br/>4497<br/>4498<br/>4499<br/>4500<br/>4501<br/>4502<br/>4503<br/>4504<br/>4505<br/>4506<br/>4507<br/>4508<br/>4509<br/>4510<br/>4511<br/>4512<br/>4513<br/>4514<br/>4515<br/>4516<br/>4517<br/>4518<br/>4519<br/>4520<br/>4521<br/>4522<br/>4523<br/>4524<br/>4525<br/>4526<br/>4527<br/>4528<br/>4529<br/>4530<br/>4531<br/>4532<br/>4533<br/>4534<br/>4535<br/>4536<br/>4537<br/>4538<br/>4539<br/>4540<br/>4541<br/>4542<br/>4543<br/>4544<br/>4545<br/>4546<br/>4547<br/>4548<br/>4549<br/>4550<br/>4551<br/>4552<br/>4553<br/>4554<br/>4555<br/>4556<br/>4557<br/>4558<br/>4559<br/>4560<br/>4561<br/>4562<br/>4563<br/>4564<br/>4565<br/>4566<br/>4567<br/>4568<br/>4569<br/>4570<br/>4571<br/>4572<br/>4573<br/>4574<br/>4575<br/>4576<br/>4577<br/>4578<br/>4579<br/>4580<br/>4581<br/>4582<br/>4583<br/>4584<br/>4585<br/>4586<br/>4587<br/>4588<br/>4589<br/>4590<br/>4591<br/>4592<br/>4593<br/>4594<br/>4595<br/>4596<br/>4597<br/>4598<br/>4599<br/>4600<br/>4601<br/>4602<br/>4603<br/>4604<br/>4605<br/>4606<br/>4607<br/>4608<br/>4609<br/>4610<br/>4611<br/>4612<br/>4613<br/>4614<br/>4615<br/>4616<br/>4617<br/>4618<br/>4619<br/>4620<br/>4621<br/>4622<br/>4623<br/>4624<br/>4625<br/>4626<br/>4627<br/>4628<br/>4629<br/>4630<br/>4631<br/>4632<br/>4633<br/>4634<br/>4635<br/>4636<br/>4637<br/>4638<br/>4639<br/>4640<br/>4641<br/>4642<br/>4643<br/>4644<br/>4645<br/>4646<br/>4647<br/>4648<br/>4649<br/>4650<br/>4651<br/>4652<br/>4653<br/>4654<br/>4655<br/>4656<br/>4657<br/>4658<br/>4659<br/>4660<br/>4661<br/>4662<br/>4663<br/>4664<br/>4665<br/>4666<br/>4667<br/>4668<br/>4669<br/>4670<br/>4671<br/>4672<br/>4673<br/>4674<br/>4675<br/>4676<br/>4677<br/>4678<br/>4679<br/>4680<br/>4681<br/>4682<br/>4683<br/>4684<br/>4685<br/>4686<br/>4687<br/>4688<br/>4689<br/>4690<br/>4691<br/>4692<br/>4693<br/>4694<br/>4695<br/>4696<br/>4697<br/>4698<br/>4699<br/>4700<br/>4701<br/>4702<br/>4703<br/>4704<br/>4705<br/>4706<br/>4707<br/>4708<br/>4709<br/>4710<br/>4711<br/>4712<br/>4713<br/>4714<br/>4715<br/>4716<br/>4717<br/>4718<br/>4719<br/>4720<br/>4721<br/>4722<br/>4723<br/>4724<br/>4725<br/>4726<br/>4727<br/>4728<br/>4729<br/>4730<br/>4731<br/>4732<br/>4733<br/>4734<br/>4735<br/>4736<br/>4737<br/>4738<br/>4739<br/>4740<br/>4741<br/>4742<br/>4743<br/>4744<br/>4745<br/>4746<br/>4747<br/>4748<br/>4749<br/>4750<br/>4751<br/>4752<br/>4753<br/>4754<br/>4755<br/>4756<br/>4757<br/>4758<br/>4759<br/>4760<br/>4761<br/>4762<br/>4763<br/>4764<br/>4765<br/>4766<br/>4767<br/>4768<br/>4769<br/>4770<br/>4771<br/>4772<br/>4773<br/>4774<br/>4775<br/>4776<br/>4777<br/>4778<br/>4779<br/>4780<br/>4781<br/>4782<br/>4783<br/>4784<br/>4785<br/>4786<br/>4787<br/>4788<br/>4789<br/>4790<br/>4791<br/>4792<br/>4793<br/>4794<br/>4795<br/>4796<br/>4797<br/>4798<br/>4799<br/>4800<br/>4801<br/>4802<br/>4803<br/>4804<br/>4805<br/>4806<br/>4807<br/>4808<br/>4809<br/>4810<br/>4811<br/>4812<br/>4813<br/>4814<br/>4815<br/>4816<br/>4817<br/>4818<br/>4819<br/>4820<br/>4821<br/>4822<br/>4823<br/>4824<br/>4825<br/>4826<br/>4827<br/>4828<br/>4829<br/>4830<br/>4831<br/>4832<br/>4833<br/>4834<br/>4835<br/>4836<br/>4837<br/>4838<br/>4839<br/>4840<br/>4841<br/>4842<br/>4843<br/>4844<br/>4845<br/>4846<br/>4847<br/>4848<br/>4849<br/>4850<br/>4851<br/>4852<br/>4853<br/>4854<br/>4855<br/>4856<br/>4857<br/>4858<br/>4859<br/>4860<br/>4861<br/>4862<br/>4863<br/>4864<br/>4865<br/>4866<br/>4867<br/>4868<br/>4869<br/>4870<br/>4871<br/>4872<br/>4873<br/>4874<br/>4875<br/>4876<br/>4877<br/>4878<br/>4879<br/>4880<br/>4881<br/>4882<br/>4883<br/>4884<br/>4885<br/>4886<br/>4887<br/>4888<br/>4889<br/>4890<br/>4891<br/>4892<br/>4893<br/>4894<br/>4895<br/>4896<br/>4897<br/>4898<br/>4899<br/>4900<br/>4901<br/>4902<br/>4903<br/>4904<br/>4905<br/>4906<br/>4907<br/>4908<br/>4909<br/>4910<br/>4911<br/>4912<br/>4913<br/>4914<br/>4915<br/>4916<br/>4917<br/>4918<br/>4919<br/>4920<br/>4921<br/>4922<br/>4923<br/>4924<br/>4925<br/>4926<br/>4927<br/>4928<br/>4929<br/>4930<br/>4931<br/>4932<br/>4933<br/>4934<br/>4935<br/>4936<br/>4937<br/>4938<br/>4939<br/>4940<br/>4941<br/>4942<br/>4943<br/>4944<br/>4945<br/>4946<br/>4947<br/>4948<br/>4949<br/>4950<br/>4951<br/>4952<br/>4953<br/>4954<br/>4955<br/>4956<br/>4957<br/>4958<br/>4959<br/>4960<br/>4961<br/>4962<br/>4963<br/>4964<br/>4965<br/>4966<br/>4967<br/>4968<br/>4969<br/>4970<br/>4971<br/>4972<br/>4973<br/>4974<br/>4975<br/>4976<br/>4977<br/>4978<br/>4979<br/>4980<br/>4981<br/>4982<br/>4983<br/>4984<br/>4985<br/>4986<br/>4987<br/>4988<br/>4989<br/>4990<br/>4991<br/>4992<br/>4993<br/>4994<br/>4995<br/>4996<br/>4997<br/>4998<br/>4999<br/>5000<br/>5001<br/>5002<br/>5003<br/>5004<br/>5005<br/>5006<br/>5007<br/>5008<br/>5009<br/>5010<br/>5011<br/>5012<br/>5013<br/>5014<br/>5015<br/>5016<br/>5017<br/>5018<br/>5019<br/>5020<br/>5021<br/>5022<br/>5023<br/>5024<br/>5025<br/>5026<br/>5027<br/>5028<br/>5029<br/>5030<br/>5031<br/>5032<br/>5033<br/>5034<br/>5035<br/>5036<br/>5037<br/>5038<br/>5039<br/>5040<br/>5041<br/>5042<br/>5043<br/>5044<br/>5045<br/>5046<br/>5047<br/>5048<br/>5049<br/>5050<br/>5051<br/>5052<br/>5053<br/>5054<br/>5055<br/>5056<br/>5057<br/>5058<br/>5059<br/>5060<br/>5061<br/>5062<br/>5063<br/>5064<br/>5065<br/>5066<br/>5067<br/>5068<br/>5069<br/>5070<br/>5071<br/>5072<br/>5073<br/>5074<br/>5075<br/>5076<br/>5077<br/>5078<br/>5079<br/>5080<br/>5081<br/>5082<br/>5083<br/>5084<br/>5085<br/>5086<br/>5087<br/>5088<br/>5089<br/>5090<br/>5091<br/>5092<br/>5093<br/>5094<br/>5095<br/>5096<br/>5097<br/>5098<br/>5099<br/>5100<br/>5101<br/>5102<br/>5103<br/>5104<br/>5105<br/>5106<br/>5107<br/>5108<br/>5109<br/>5110<br/>5111<br/>5112<br/>5113<br/>5114<br/>5115<br/>5116<br/>5117<br/>5118<br/>5119<br/>5120<br/>5121<br/>5122<br/>5123<br/>5124<br/>5125<br/>5126<br/>5127<br/>5128<br/>5129<br/>5130<br/>5131<br/>5132<br/>5133<br/>5134<br/>5135<br/>5136<br/>5137<br/>5138<br/>5139<br/>5140<br/>5141<br/>5142<br/>5143<br/>5144<br/>5145<br/>5146<br/>5147<br/>5148<br/>5149<br/>5150<br/>5151<br/>5152<br/>5153<br/>5154<br/>5155<br/>5156<br/>5157<br/>5158<br/>5159<br/>5160<br/>5161<br/>5162<br/>5163<br/>5164<br/>5165<br/>5166<br/>5167<br/>5168<br/>5169<br/>5170<br/>5171<br/>5172<br/>5173<br/>5174<br/>5175<br/>5176<br/>5177<br/>5178<br/>5179<br/>5180<br/>5181<br/>5182<br/>5183<br/>5184<br/>5185<br/>5186<br/>5187<br/>5188<br/>5189<br/>5190<br/>5191<br/>5192<br/>5193<br/>5194<br/>5195<br/>5196<br/>5197<br/>5198<br/>5199<br/>5200<br/>5201<br/>5202<br/>5203<br/>5204<br/>5205<br/>5206<br/>5207<br/>5208<br/>5209<br/>5210<br/>5211<br/>5212<br/>5213<br/>5214<br/>5215<br/>5216<br/>5217<br/>5218<br/>5219<br/>5220<br/>5221<br/>5222<br/>5223<br/>5224<br/>5225<br/>5226<br/>5227<br/>5228<br/>5229<br/>5230<br/>5231<br/>5232<br/>5233<br/>5234<br/>5235<br/>5236<br/>5237<br/>5238<br/>5239<br/>5240<br/>5241<br/>5242<br/>5243<br/>5244<br/>5245<br/>5246<br/>5247<br/>5248<br/>5249<br/>5250<br/>5251<br/>5252<br/>5253<br/>5254<br/>5255<br/>5256<br/>5257<br/>5258<br/>5259<br/>5260<br/>5261<br/>5262<br/>5263<br/>5264<br/>5265<br/>5266<br/>5267<br/>5268<br/>5269<br/>5270<br/>5271<br/>5272<br/>5273<br/>5274<br/>5275<br/>5276<br/>5277<br/>5278<br/>5279<br/>5280<br/>5281<br/>5282<br/>5283<br/>5284<br/>5285<br/>5286<br/>5287<br/>5288<br/>5289<br/>5290<br/>5291<br/>5292<br/>5293<br/>5294<br/>5295<br/>5296<br/>5297<br/>5298<br/>5299<br/>5300<br/>5301<br/>5302<br/>5303<br/>5304<br/>5305<br/>5306<br/>5307<br/>5308<br/>5309<br/>5310<br/>5311<br/>5312<br/>5313<br/>5314<br/>5315<br/>5316<br/>5317<br/>5318<br/>5319<br/>5320<br/>5321<br/>5322<br/>5323<br/>5324<br/>5325<br/>5326<br/>5327<br/>5328<br/>5329<br/>5330<br/>5331<br/>5332<br/>5333<br/>5334<br/>5335<br/>5336<br/>5337<br/>5338<br/>5339<br/>5340<br/>5341<br/>5342<br/>5343<br/>5344<br/>5345<br/>5346<br/>5347<br/>5348<br/>5349<br/>5350<br/>5351<br/>5352<br/>5353<br/>5354<br/>5355<br/>5356<br/>5357<br/>5358<br/>5359<br/>5360<br/>5361<br/>5362<br/>5363<br/>5364<br/>5365<br/>5366<br/>5367<br/>5368<br/>5369<br/>5370<br/>5371<br/>5372<br/>5373<br/>5374<br/>5375<br/>5376<br/>5377<br/>5378<br/>5379<br/>5380<br/>5381<br/>5382<br/>5383<br/>5384<br/>5385<br/>5386<br/>5387<br/>5388<br/>5389<br/>5390<br/>5391<br/>5392<br/>5393<br/>5394<br/>5395<br/>5396<br/>5397<br/>5398<br/>5399<br/>5400<br/>5401<br/>5402<br/>5403<br/>5404<br/>5405<br/>5406<br/>5407<br/>5408<br/>5409<br/>5410<br/>5411<br/>5412<br/>5413<br/>5414<br/>5415<br/>5416<br/>5417<br/>5418<br/>5419<br/>5420<br/>5421<br/>5422<br/>5423<br/>5424<br/>5425<br/>5426<br/>5427<br/>5428<br/>5429<br/>5430<br/>5431<br/>5432<br/>5433<br/>5434<br/>5435<br/>5436<br/>5437<br/>5438<br/>5439<br/>5440<br/>5441<br/>5442<br/>5443<br/>5444<br/>5445<br/>5446<br/>5447<br/>5448<br/>5449<br/>5450<br/>5451<br/>5452<br/>5453<br/>5454<br/>5455<br/>5456<br/>5457<br/>5458<br/>5459<br/>5460<br/>5461<br/>5462<br/>5463<br/>5464<br/>5465<br/>5466<br/>5467<br/>5468<br/>5469<br/>5470<br/>5471<br/>5472<br/>5473<br/>5474<br/>5475<br/>5476<br/>5477<br/>5478<br/>5479<br/>5480<br/>5481<br/>5482<br/>5483<br/>5484<br/>5485<br/>5486<br/>5487<br/>5488<br/>5489<br/>5490<br/>5491<br/>5492<br/>5493<br/>5494<br/>5495<br/>5496<br/>5497<br/>5498<br/>5499<br/>5500<br/>5501<br/>5502<br/>5503<br/>5504<br/>5505<br/>5506<br/>5507<br/>5508<br/>5509<br/>5510<br/>5511<br/>5512<br/>5513<br/>5514<br/>5515<br/>5516<br/>5517<br/>5518<br/>5519<br/>5520<br/>5521<br/>5522<br/>5523<br/>5524<br/>5525<br/>5526<br/>5527<br/>5528<br/>5529<br/>5530<br/>5531<br/>5532<br/>5533<br/>5534<br/>5535<br/>5536<br/>5537<br/>5538<br/>5539<br/>5540<br/>5541<br/>5542<br/>5543<br/>5544<br/>5545<br/>5546<br/>5547<br/>5548<br/>5549<br/>5550<br/>5551<br/>5552<br/>5553<br/>5554<br/>5555<br/>5556<br/>5557<br/>5558<br/>5559<br/>5560<br/>5561<br/>5562<br/>5563<br/>5564<br/>5565<br/>5566<br/>5567<br/>5568<br/>5569<br/>5570<br/>5571<br/>5572<br/>5573<br/>5574<br/>5575<br/>5576<br/>5577<br/>5578<br/>5579<br/>5580<br/>5581<br/>5582<br/>5583<br/>5584<br/>5585<br/>5586<br/>5587<br/>5588<br/>5589<br/>5590<br/>5591<br/>5592<br/>5593<br/>5594<br/>5595<br/>5596<br/>5597<br/>5598<br/>5599<br/>5600<br/>5601<br/>5602<br/>5603<br/>5604<br/>5605<br/>5606<br/>5607<br/>5608<br/>5609<br/>5610<br/>5611<br/>5612<br/>5613<br/>5614<br/>5615<br/>5616<br/>5617<br/>5618<br/>5619<br/>5620<br/>5621<br/>5622<br/>5623<br/>5624<br/>5625<br/>5626<br/>5627<br/>5628<br/>5629<br/>5630<br/>5631<br/>5632<br/>5633<br/>5634<br/>5635<br/>5636<br/>5637<br/>5638<br/>5639<br/>5640<br/>5641<br/>5642<br/>5643<br/>5644<br/>5645<br/>5646<br/>5647<br/>5648<br/>5649<br/>5650<br/>5651<br/>5652<br/>5653<br/>5654<br/>5655<br/>5656<br/>5657<br/>5658<br/>5659<br/>5660<br/>5661<br/>5662<br/>5663<br/>5664<br/>5665<br/>5666<br/>5667<br/>5668<br/>5669<br/>5670<br/>5671<br/>5672<br/>5673<br/>5674<br/>5675<br/>5676<br/>5677<br/>5678<br/>5679<br/>5680<br/>5681<br/>5682<br/>5683<br/>5684<br/>5685<br/>5686<br/>5687<br/>5688<br/>5689<br/>5690<br/>5691<br/>5692<br/>5693<br/>5694<br/>5695<br/>5696<br/>5697<br/>5698<br/>5699<br/>5700<br/>5701<br/>5702<br/>5703<br/>5704<br/>5705<br/>5706<br/>5707<br/>5708<br/>5709<br/>5710<br/>5711<br/>5712<br/>5713<br/>5714<br/>5715<br/>5716<br/>5717<br/>5718<br/>5719<br/>5720<br/>5721<br/>5722<br/>5723<br/>5724<br/>5725<br/>5726<br/>5727<br/>5728<br/>5729<br/>5730<br/>5731<br/>5732<br/>5733<br/>5734<br/>5735<br/>5736<br/>5737<br/>5738<br/>5739<br/>5740<br/>5741<br/>5742<br/>5743<br/>5744<br/>5745<br/>5746<br/>5747<br/>5748<br/>5749<br/>5750<br/>5751<br/>5752<br/>5753<br/>5754<br/>5755<br/>5756<br/>5757<br/>5758<br/>5759<br/>5760<br/>5761<br/>5762<br/>5763<br/>5764<br/>5765<br/>5766<br/>5767<br/>5768<br/>5769<br/>5770<br/>5771<br/>5772<br/>5773<br/>5774<br/>5775<br/>5776<br/>5777<br/>5778<br/>5779<br/>5780<br/>5781<br/>5782<br/>5783<br/>5784<br/>5785<br/>5786<br/>5787<br/>5788<br/>5789<br/>5790<br/>5791<br/>5792<br/>5793<br/>5794<br/>5795<br/>5796<br/>5797<br/>5798<br/>5799<br/>5800<br/>5801<br/>5802<br/>5803<br/>5804<br/>5805<br/>5806<br/>5807<br/>5808<br/>5809<br/>5810<br/>5811<br/>5812<br/>5813<br/>5814<br/>5815<br/>5816<br/>5817<br/>5818<br/>5819<br/>5820<br/>5821<br/>5822<br/>5823<br/>5824<br/>5825<br/>5826<br/>5827<br/>5828<br/>5829<br/>5830<br/>5831<br/>5832<br/>5833<br/>5834<br/>5835<br/>5836<br/>5837<br/>5838<br/>5839<br/>5840<br/>5841<br/>5842<br/>5843<br/>5844<br/>5845<br/>5846<br/>5847<br/>5848<br/>5849<br/>5850<br/>5851<br/>5852<br/>5853<br/>5854<br/>5855<br/>5856<br/>5857<br/>5858<br/>5859<br/>5860<br/>5861<br/>5862<br/>5863<br/>5864<br/>5865<br/>5866<br/>5867<br/>5868<br/>5869<br/>5870<br/>5871<br/>5872<br/>5873<br/>5874<br/>5875<br/>5876<br/>5877<br/>5878<br/>5879<br/>5880<br/>5881<br/>5882<br/>5883<br/>5884<br/>5885<br/>5886<br/>5887<br/>5888<br/>5889<br/>5890<br/>5891<br/>5892<br/>5893<br/>5894<br/>5895<br/>5896<br/>5897<br/>5898<br/>5899<br/>5900<br/>5901<br/>5902<br/>5903<br/>5904<br/>5905<br/>5906<br/>5907<br/>5908<br/>5909<br/>5910<br/>5911<br/>5912<br/>5913<br/>5914<br/>5915<br/>5916<br/>5917<br/>5918<br/>5919<br/>5920<br/>5921<br/>5922<br/>5923<br/>5924<br/>5925<br/>5926<br/>5927<br/>5928<br/>5929<br/>5930<br/>5931<br/>5932<br/>5933<br/>5934<br/>5935<br/>5936<br/>5937<br/>5938<br/>5939<br/>5940<br/>5941<br/>5942<br/>5943<br/>5944<br/>5945<br/>5946<br/>5947<br/>5948<br/>5949<br/>5950<br/>5951<br/>5952<br/>5953<br/>5954<br/>5955<br/>5956<br/>5957<br/>5958<br/>5959<br/>5960<br/>5961<br/>5962<br/>5963<br/>5964<br/>5965<br/>5966<br/>5967<br/>5968<br/>5969<br/>5970<br/>5971<br/>5972<br/>5973<br/>5974<br/>5975<br/>5976<br/>5977<br/>5978<br/>5979<br/>5980<br/>5981<br/>5982<br/>5983<br/>5984<br/>5985<br/>5986<br/>5987<br/>5988<br/>5989<br/>5990<br/>5991<br/>5992<br/>5993<br/>5994<br/>5995<br/>5996<br/>5997<br/>5998<br/>5999<br/>6000<br/>6001<br/>6002<br/>6003<br/>6004<br/>6005<br/>6006<br/>6007<br/>6008<br/>6009<br/>6010<br/>6011<br/>6012<br/>6013<br/>6014<br/>6015<br/>6016<br/>6017<br/>6018<br/>6019<br/>6020<br/>6021<br/>6022<br/>6023<br/>6024<br/>6025<br/>6026<br/>6027<br/>6028<br/>6029<br/>6030<br/>6031<br/>6032<br/>6033<br/>6034<br/>6035<br/>6036<br/>6037<br/>6038<br/>6039<br/>6040<br/>6041<br/>6042<br/>6043<br/>6044<br/>6045<br/>6046<br/>6047<br/>6048<br/>6049<br/>6050<br/>6051<br/>6052<br/>6053<br/>6054<br/>6055<br/>6056<br/>6057<br/>6058<br/>6059<br/>6060<br/>6061<br/>6062<br/>6063<br/>6064<br/>6065<br/>6066<br/>6067<br/>6068<br/>6069<br/>6070<br/>6071<br/>6072<br/>6073<br/>6074<br/>6075<br/>6076<br/>6077<br/>6078<br/>6079<br/>6080<br/>6081<br/>6082<br/>6083<br/>6084<br/>6085<br/>6086<br/>6087<br/>6088<br/>6089<br/>6090<br/>6091<br/>6092<br/>6093<br/>6094<br/>6095<br/>6096<br/>6097<br/>6098<br/>6099<br/>6100<br/>6101<br/>6102<br/>6103<br/>6104<br/>6105<br/>6106<br/>6107<br/>6108<br/>6109<br/>6110<br/>6111<br/>6112<br/>6113<br/>6114<br/>6115<br/>6116<br/>6117<br/>6118<br/>6119<br/>6120<br/>6121<br/>6122<br/>6123<br/>6124<br/>6125<br/>6126<br/>6127<br/>6128<br/>6129<br/>6130<br/>6131<br/>6132<br/>6133<br/>6134<br/>6135<br/>6136<br/>6137<br/>6138<br/>6139<br/>6140<br/>6141<br/>6142<br/>6143<br/>6144<br/>6145<br/>6146<br/>6147<br/>6148<br/>6149<br/>6150<br/>6151<br/>6152<br/>6153<br/>6154<br/>6155<br/>6156<br/>6157<br/>6158<br/>6159<br/>6160<br/>6161<br/>6162<br/>6163<br/>6164<br/>6165<br/>6166<br/>6167<br/>6168<br/>6169<br/>6170<br/>6171<br/>6172<br/>6173<br/>6174<br/>6175<br/>6176<br/>6177<br/>6178<br/>6179<br/>6180<br/>6181<br/>6182<br/>6183<br/>6184<br/>6185<br/>6186<br/>6187<br/>6188<br/>6189<br/>6190<br/>6191<br/>6192<br/>6193<br/>6194<br/>6195<br/>6196<br/>6197<br/>6198<br/>6199<br/>6200<br/>6201<br/>6202<br/>6203<br/>6204<br/>6205<br/>6206<br/>6207<br/>6208<br/>6209<br/>6210<br/>6211<br/>6212<br/>6213<br/>6214<br/>6215<br/>6216<br/>6217<br/>6218<br/>6219<br/>6220<br/>6221<br/>6222<br/>6223<br/>6224<br/>6225<br/>6226<br/>6227<br/>6228<br/>6229<br/>6230<br/>6231<br/>6232<br/>6233<br/>6234<br/>6235<br/>6236<br/>6237<br/>6238<br/>6239<br/>6240<br/>6241<br/>6242<br/>6243<br/>6244<br/>6245<br/>6246<br/>6247<br/>6248<br/>6249<br/>6250<br/>6251<br/>6252<br/>6253<br/>6254<br/>6255<br/>6256<br/>6257<br/>6258<br/>6259<br/>6260<br/>6261<br/>6262<br/>6263<br/>6264<br/>6265<br/>6266<br/>6267<br/>6268<br/>6269<br/>6270<br/>6271<br/>6272<br/>6273<br/>6274<br/>6275<br/>6276<br/>6277<br/>6278<br/>6279<br/>6280<br/>6281<br/>6282<br/>6283<br/>6284<br/>6285<br/>6286<br/>6287<br/>6288<br/>6289<br/>6290<br/>6291<br/>6292<br/>6293<br/>6294<br/>6295<br/>6296<br/>6297<br/>6298<br/>6299<br/>6300<br/>6301<br/>6302<br/>6303<br/>6304<br/>6305<br/>6306<br/>6307<br/>6308<br/>6309<br/>6310<br/>6311<br/>6312<br/>6313<br/>6314<br/>6315<br/>6316<br/>6317<br/>6318<br/>6319<br/>6320<br/>6321<br/>6322<br/>6323<br/>6324<br/>6325<br/>6326<br/>6327<br/>6328<br/>6329<br/>6330<br/>6331<br/>6332<br/>6333<br/>6334<br/>6335<br/>6336<br/>6337<br/>6338<br/>6339<br/>6340<br/>6341<br/>6342<br/>6343<br/>6344<br/>6345<br/>6346<br/>6347<br/>6348<br/>6349<br/>6350<br/>6351<br/>6352<br/>6353<br/>6354<br/>6355<br/>6356<br/>6357<br/>6358<br/>6359<br/>6360<br/>6361<br/>6362<br/>6363<br/>6364<br/>6365<br/>6366<br/>6367<br/>6368<br/>6369<br/>6370<br/>6371<br/>6372<br/>6373<br/>6374<br/>6375<br/>6376<br/>6377<br/>6378<br/>6379<br/>6380<br/>6381<br/>6382<br/>6383<br/>6384<br/>6385<br/>6386<br/>6387<br/>6388<br/>6389<br/>6390<br/>6391<br/>6392<br/>6393<br/>6394<br/>6395<br/>6396<br/>6397<br/>6398<br/>6399<br/>6400<br/>6401<br/>6402<br/>6403<br/>6404<br/>6405<br/>6406<br/>6407<br/>6408<br/>6409<br/>6410<br/>6411<br/>6412<br/>6413<br/>6414<br/>6415<br/>6416<br/>6417<br/>6418<br/>6419<br/>6420<br/>6421<br/>6422<br/>6423<br/>6424<br/>6425<br/>6426<br/>6427<br/>6428<br/>6429<br/>6430<br/>6431<br/>6432<br/>6433<br/>6434<br/>6435<br/>6436<br/>6437<br/>6438<br/>6439<br/>6440<br/>6441<br/>6442<br/>6443<br/>6444<br/>6445<br/>6446<br/>6447<br/>6448<br/>6449<br/>6450<br/>6451<br/>6452<br/>6453<br/>6454<br/>6455<br/>6456<br/>6457<br/>6458<br/>6459<br/>6460<br/>6461<br/>6462<br/>6463<br/>6464<br/>6465<br/>6466<br/>6467<br/>6468<br/>6469<br/>6470<br/>6471<br/>6472<br/>6473<br/>6474<br/>6475<br/>6476<br/>6477<br/>6478<br/>6479<br/>6480<br/>6481<br/>6482<br/>6483<br/>6484<br/>6485<br/>6486<br/>6487<br/>6488<br/>6489<br/>6490<br/>6491<br/>6492<br/>6493<br/>6494<br/>6495<br/>6496<br/>6497<br/>6498<br/>6499<br/>6500<br/>6501<br/>6502<br/>6503<br/>6504<br/>6505<br/>6506<br/>6507<br/>6508<br/>6509<br/>6510<br/>6511<br/>6512<br/>6513<br/>6514<br/>6515<br/>6516<br/>6517<br/>6518<br/>6519<br/>6520<br/>6521<br/>6522<br/>6523<br/>6524<br/>6525<br/>6526<br/>6527<br/>6528<br/>6529<br/>6530<br/>6531<br/>6532<br/>6533<br/>6534<br/>6535<br/>6536<br/>6537<br/>6538<br/>6539<br/>6540<br/>6541<br/>6542<br/>6543<br/>6544<br/>6545<br/>6546<br/>6547<br/>6548<br/>6549<br/>6550<br/>6551<br/>6552<br/>6553<br/>6554<br/>6555<br/>6556<br/>6557<br/>6558<br/>6559<br/>6560<br/>6561<br/>6562<br/>6563<br/>6564<br/>6565<br/>6566<br/>6567<br/>6568<br/>6569<br/>6570<br/>6571<br/>6572<br/>6573<br/>6574<br/>6575<br/>6576<br/>6577<br/>6578<br/>6579<br/>6580<br/>6581<br/>6582<br/>6583<br/>6584<br/>6585<br/>6586<br/>6587<br/>6588<br/>6589<br/>6590<br/>6591<br/>6592<br/>6593<br/>6594<br/>6595<br/>6596<br/>6597<br/>6598<br/>6599<br/>6600<br/>6601<br/>6602<br/>6603<br/>6604<br/>6605<br/>6606<br/>6607<br/>6608<br/>6609<br/>6610<br/>6611<br/>6612<br/>6613<br/>6614<br/>6615<br/>6616<br/>6617<br/>6618<br/>6619<br/>6620<br/>6621<br/>6622<br/>6623<br/>6624<br/>6625<br/>6626<br/>6627<br/>6628<br/>6629<br/>6630<br/>6631<br/>6632<br/>6633<br/>6634<br/>6635<br/>6636<br/>6637<br/>6638<br/>6639<br/>6640<br/>6641<br/>6642<br/>6643<br/>6644<br/>6645<br/>6646<br/>6647<br/>6648<br/>6649<br/>6650<br/>6651<br/>6652<br/>6653<br/>6654<br/>6655<br/>6656<br/>6657<br/>6658<br/>6659<br/>6660<br/>6661<br/>6662<br/>6663<br/>6664<br/>6665<br/>6666<br/>6667<br/>6668<br/>6669<br/>6670<br/>6671<br/>6672<br/>6673<br/>6674<br/>6675<br/>6676<br/>6677<br/>6678<br/>6679<br/>6680<br/>6681<br/>6682<br/>6683<br/>6684<br/>6685<br/>6686<br/>6687<br/>6688<br/>6689<br/>6690<br/>6691<br/>6692<br/>6693<br/>6694<br/>6695<br/>6696<br/>6697<br/>6698<br/>6699<br/>6700<br/>6701<br/>6702<br/>6703<br/>6704<br/>6705<br/>6706<br/>6707<br/>6708<br/>6709<br/>6710<br/>6711<br/>6712<br/>6713<br/>6714<br/>6715<br/>6716<br/>6717<br/>6718<br/>6719<br/>6720<br/>6721<br/>6722<br/>6723<br/>6724<br/>6725<br/>6726<br/>6727<br/>6728<br/>6729<br/>6730<br/>6731<br/>6732<br/>6733<br/>6734<br/>6735<br/>6736<br/>6737<br/>6738<br/>6739<br/>6740<br/>6741<br/>6742<br/>6743<br/>6744<br/>6745<br/>6746<br/>6747<br/>6748<br/>6749<br/>6750<br/>6751<br/>6752<br/>6753<br/>6754<br/>6755<br/>6756<br/>6757<br/>6758<br/>6759<br/>6760<br/>6761<br/>6762<br/>6763<br/>6764<br/>6765<br/>6766<br/>6767<br/>6768<br/>6769<br/>6770<br/>6771<br/>6772<br/>6773<br/>6774<br/>6775<br/>6776<br/>6777<br/>6778<br/>6779<br/>6780<br/>6781<br/>6782<br/>6783<br/>6784<br/>6785<br/>6786<br/>6787<br/>6788<br/>6789<br/>6790<br/>6791<br/>6792<br/>6793<br/>6794<br/>6795<br/>6796<br/>6797<br/>6798<br/>6799<br/>6800<br/>6801<br/>6802<br/>6803<br/>6804<br/>6805<br/>6806<br/>6807<br/>6808<br/>6809<br/>6810<br/>6811<br/>6812<br/>6813<br/>6814<br/>6815<br/>6816<br/>6817<br/>6818<br/>6819<br/>6820<br/>6821<br/>6822<br/>6823<br/>6824<br/>6825<br/>6826<br/>6827<br/>6828<br/>6829<br/>6830<br/>6831<br/>6832<br/>6833<br/>6834<br/>6835<br/>6836<br/>6837<br/>6838<br/>6839<br/>6840<br/>6841<br/>6842<br/>6843<br/>6844<br/>6845<br/>6846<br/>6847<br/>6848<br/>6849<br/>6850<br/>6851<br/>6852<br/>6853<br/>6854<br/>6855<br/>6856<br/>6857<br/>6858<br/>6859<br/>6860<br/>6861<br/>6862<br/>6863<br/>6864<br/>6865<br/>6866<br/>6867<br/>6868<br/>6869<br/>6870<br/>6871<br/>6872<br/>6873<br/>6874<br/>6875<br/>6876<br/>6877<br/>6878<br/>6879<br/>6880<br/>6881<br/>6882<br/>6883<br/>6884<br/>6885<br/>6886<br/>6887<br/>6888<br/>6889<br/>6890<br/>6891<br/>6892<br/>6893<br/>6894<br/>6895<br/>6896<br/>6897<br/>6898<br/>6899<br/>6900<br/>6901<br/>6902<br/>6903<br/>6904<br/>6905<br/>6906<br/>6907<br/>6908<br/>6909<br/>6910<br/>6911<br/>6912<br/>6913<br/>6914<br/>6915<br/>6916<br/>6917<br/>6918<br/>6919<br/>6920<br/>6921<br/>6922<br/>6923<br/>6924<br/>6925<br/>6926<br/>6927<br/>6928<br/>6929<br/>6930<br/>6931<br/>6932<br/>6933<br/>6934<br/>6935<br/>6936<br/>6937<br/>6938<br/>6939<br/>6940<br/>6941<br/>6942<br/>6943<br/>6944<br/>6945<br/>6946<br/>6947<br/>6948<br/>6949<br/>6950<br/>6951<br/>6952<br/>6953<br/>6954<br/>6955<br/>6956<br/>6957<br/>6958<br/>6959<br/>6960<br/>6961<br/>6962<br/>6963<br/>6964<br/>6965<br/>6966<br/>6967<br/>6968<br/>6969<br/>6970<br/>6971<br/>6972<br/>6973<br/>6974<br/>6975<br/>6976<br/>6977<br/>6978<br/>6979<br/>6980<br/>6981<br/>6982<br/>6983<br/>6984<br/>6985<br/>6986<br/>6987<br/>6988<br/>6989<br/>6990<br/>6991<br/>6992<br/>6993<br/>6994<br/>6995<br/>6996<br/>6997<br/>6998<br/>6999<br/>7000<br/>7001<br/>7002<br/>7003<br/>7004<br/>7005<br/>7006<br/>7007<br/>7008<br/>7009<br/>7010<br/>7011<br/>7012<br/>7013<br/>7014<br/>7015<br/>7016<br/>7017<br/>7018<br/>7019<br/>7020<br/>7021<br/>7022<br/>7023<br/>7024<br/>7025<br/>7026<br/>7027<br/>7028<br/>7029<br/>7030<br/>7031<br/>7032<br/>7033<br/>7034<br/>7035<br/>7036<br/>7037<br/>7038<br/>7039<br/>7040<br/>7041<br/>7042<br/>7043<br/>7044<br/>7045<br/>7046<br/>7047<br/>7048<br/>7049<br/>7050<br/>7051<br/>7052<br/>7053<br/>7054<br/>7055<br/>7056<br/>7057<br/>7058<br/>7059<br/>7060<br/>7061<br/>7062<br/>7063<br/>7064<br/>7065<br/>7066<br/>7067<br/>7068<br/>7069<br/>7070<br/>7071<br/>7072<br/>7073<br/>7074<br/>7075<br/>7076<br/>7077<br/>7078<br/>7079<br/>7080<br/>7081<br/>7082<br/>7083<br/>7084<br/>7085<br/>7086<br/>7087<br/>7088<br/>7089<br/>7090<br/>7091<br/>7092<br/>7093<br/>7094<br/>7095<br/>7096<br/>7097<br/>7098<br/>7099<br/>7100<br/>7101<br/>7102<br/>7103<br/>7104<br/>7105<br/>7106<br/>7107<br/>7108<br/>7109<br/>7110<br/>7111<br/>7112<br/>7113<br/>7114<br/>7115<br/>7116<br/>7117<br/>7118<br/>7119<br/>7120<br/>7121<br/>7122<br/>7123<br/>7124<br/>7125<br/>7126<br/>7127<br/>7128<br/>7129<br/>7130<br/>7131<br/>7132<br/>7133<br/>7134<br/>7135<br/>7136<br/>7137<br/>7138<br/>7139<br/>7140<br/>7141<br/>7142<br/>7143<br/>7144<br/>7145<br/>7146<br/>7147<br/>7148<br/>7149<br/>7150<br/>7151<br/>7152<br/>7153<br/>7154<br/>7155<br/>7156<br/>7157<br/>7158<br/>7159<br/>7160<br/>7161<br/>7162<br/>7163<br/>7164<br/>7165<br/>7166<br/>7167<br/>7168<br/>7169<br/>7170<br/>7171<br/>7172<br/>7173<br/>7174<br/>7175<br/>7176<br/>7177<br/>7178<br/>7179<br/>7180<br/>7181<br/>7182<br/>7183<br/>7184<br/>7185<br/>7186<br/>7187<br/>7188<br/>7189<br/>7190<br/>7191<br/>7192<br/>7193<br/>7194<br/>7195<br/>7196<br/>7197<br/>7198<br/>7199<br/>7200<br/>7201<br/>7202<br/>7203<br/>7204<br/>7205<br/>7206<br/>7207<br/>7208<br/>7209<br/>7210<br/>7211<br/>7212<br/>7213<br/>7214<br/>7215<br/>7216<br/>7217<br/>7218<br/>7219<br/>7220<br/>7221<br/>7222<br/>7223<br/>7224<br/>7225<br/>7226<br/>7227<br/>7228<br/>7229<br/>7230<br/>7231<br/>7232<br/>7233<br/>7234<br/>7235<br/>7236<br/>7237<br/>7238<br/>7239<br/>7240<br/>7241<br/>7242<br/>7243<br/>7244<br/>7245<br/>7246<br/>7247<br/>7248<br/>7249<br/>7250<br/>7251<br/>7252<br/>7253<br/>7254<br/>7255<br/>7256<br/>7257<br/>7258<br/>7259<br/>7260<br/>7261<br/>7262<br/>7263<br/>7264<br/>7265<br/>7266<br/>7267<br/>7268<br/>7269<br/>7270<br/>7271<br/>7272<br/>7273<br/>7274<br/>7275<br/>7276<br/>7277<br/>7278<br/>7279<br/>7280<br/>7281<br/>7282<br/>7283<br/>7284<br/>7285<br/>7286<br/>7287<br/>7288<br/>7289<br/>7290<br/>7291<br/>7292<br/>7293<br/>7294<br/>7295<br/>7296<br/>7297<br/>7298<br/>7299<br/>7300<br/>7301<br/>7302<br/>7303<br/>7304<br/>7305<br/>7306<br/>7307<br/>7308<br/>7309<br/>7310<br/>7311<br/>7312<br/>7313<br/>7314<br/>7315<br/>7316<br/>7317<br/>7318<br/>7319<br/>7320<br/>7321<br/>7322<br/>7323<br/>7324<br/>7325<br/>7326<br/>7327<br/>7328<br/>7329<br/>7330<br/>7331<br/>7332<br/>7333<br/>7334<br/>7335<br/>7336<br/>7337<br/>7338<br/>7339<br/>7340<br/>7341<br/>7342<br/>7343<br/>7344<br/>7345<br/>7346<br/>7347<br/>7348<br/>7349<br/>7350<br/>7351<br/>7352<br/>7353<br/>7354<br/>7355<br/>7356<br/>7357<br/>7358<br/>7359<br/>7360<br/>7361<br/>7362<br/>7363<br/>7364<br/>7365<br/>7366<br/>7367<br/>7368<br/>7369<br/>7370<br/>7371<br/>7372<br/>7373<br/>7374<br/>7375<br/>7376<br/>7377<br/>7378<br/>7379<br/>7380<br/>7381<br/>7382<br/>7383<br/>7384<br/>7385<br/>7386<br/>7387<br/>7388<br/>7389<br/>7390<br/>7391<br/>7392<br/>7393<br/>7394<br/>7395<br/>7396<br/>7397<br/>7398<br/>7399<br/>7400<br/>7401<br/>7402<br/>7403<br/>7404<br/>7405<br/>7406<br/>7407<br/>7408<br/>7409<br/>7410<br/>7411<br/>7412<br/>7413<br/>7414<br/>7415<br/>7416<br/>7417<br/>7418<br/>7419<br/>7420<br/>7421<br/>7422<br/>7423<br/>7424<br/>7425<br/>7426<br/>7427<br/>7428<br/>7429<br/>7430<br/>7431<br/>7432<br/>7433<br/>7434<br/>7435<br/>7436<br/>7437<br/>7438<br/>7439<br/>7440<br/>7441<br/>7442<br/>7443<br/>7444<br/>7445<br/>7446<br/>7447<br/>7448<br/>7449<br/>7450<br/>7451<br/>7452<br/>7453<br/>7454<br/>7455<br/>7456<br/>7457<br/>7458<br/>7459<br/>7460<br/>7461<br/>7462<br/>7463<br/>7464<br/>7465<br/>7466<br/>7467<br/>7468<br/>7469<br/>7470<br/>7471<br/>7472<br/>7473<br/>7474<br/>7475<br/>7476<br/>7477<br/>7478<br/>7479<br/>7480<br/>7481<br/>7482<br/>7483<br/>7484<br/>7485<br/>7486<br/>7487<br/>7488<br/>7489<br/>7490<br/>7491<br/>7492<br/>7493<br/>7494<br/>7495<br/>7496<br/>7497<br/>7498<br/>7499<br/>7500<br/>7501<br/>7502<br/>7503<br/>7504<br/>7505<br/>7506<br/>7507<br/>7508<br/>7509<br/>7510<br/>7511<br/>7512<br/>7513<br/>7514<br/>7515<br/>7516<br/>7517<br/>7518<br/>7519<br/>7520<br/>7521<br/>7522<br/>7523<br/>7524<br/>7525<br/>7526<br/>7527<br/>7528<br/>7529<br/>7530<br/>7531<br/>7532<br/>7533<br/>7534<br/>7535<br/>7536<br/>7537<br/>7538<br/>7539<br/>7540<br/>7541<br/>7542<br/>7543<br/>7544<br/>7545<br/>7546<br/>7547<br/>7548<br/>7549<br/>7550<br/>7551<br/>7552<br/>7553<br/>7554<br/>7555<br/>7556<br/>7557<br/>7558<br/>7559<br/>7560<br/>7561<br/>7562<br/>7563<br/>7564<br/>7565<br/>7566<br/>7567<br/>7568<br/>7569<br/>7570<br/>7571<br/>7572<br/>7573<br/>7574<br/>7575<br/>7576<br/>7577<br/>7578<br/>7579<br/>7580<br/>7581<br/>7582<br/>7583<br/>7584<br/>7585<br/>7586<br/>7587<br/>7588<br/>7589<br/>7590<br/>7591<br/>7592<br/>7593<br/>7594<br/>7595<br/>7596<br/>7597<br/>7598<br/>7599<br/>7600<br/>7601<br/>7602<br/>7603<br/>7604<br/>7605<br/>7606<br/>7607<br/>7608<br/>7609<br/>7610<br/>7611<br/>7612<br/>7613<br/>7614<br/>7615<br/>7616<br/>7617<br/>7618<br/>7619<br/>7620<br/>7621<br/>7622<br/>7623<br/>7624<br/>7625<br/>7626<br/>7627<br/>7628<br/>7629<br/>7630<br/>7631<br/>7632<br/>7633<br/>7634<br/>7635<br/>7636<br/>7637<br/>7638<br/>7639<br/>7640<br/>7641<br/>7642<br/>7643<br/>7644<br/>7645<br/>7646<br/>7647<br/>7648<br/>7649<br/>7650<br/>7651<br/>7652<br/>7653<br/>7654<br/>7655<br/>7656<br/>7657<br/>7658<br/>7659<br/>7660<br/>7661<br/>7662<br/>7663<br/>7664<br/>7665<br/>7666<br/>7667<br/>7668<br/>7669<br/>7670<br/>7671<br/>7672<br/>7673<br/>7674<br/>7675<br/>7676<br/>7677<br/>7678<br/>7679<br/>7680<br/>7681<br/>7682<br/>7683<br/>7684<br/>7685<br/>7686<br/>7687<br/>7688<br/>7689<br/>7690<br/>7691<br/>7692<br/>7693<br/>7694<br/>7695<br/>7696<br/>7697<br/>7698<br/>7699<br/>7700<br/>7701<br/>7702<br/>7703<br/>7704<br/>7705<br/>7706<br/>7707<br/>7708<br/>7709<br/>7710<br/>7711<br/>7712<br/>7713<br/>7714<br/>7715<br/>7716<br/>7717<br/>7718<br/>7719<br/>7720<br/>7721<br/>7722<br/>7723<br/>7724<br/>7725<br/>7726<br/>7727<br/>7728<br/>7729<br/>7730<br/>7731<br/>7732<br/>7733<br/>7734<br/>7735<br/>7736<br/>7737<br/>7738<br/>7739<br/>7740<br/>7741<br/>7742<br/>7743<br/>7744<br/>7745<br/>7746<br/>7747<br/>7748<br/>7749<br/>7750<br/>7751<br/>7752<br/>7753<br/>7754<br/>7755<br/>7756<br/>7757<br/>7758<br/>7759<br/>7760<br/>7761<br/>7762<br/>7763<br/>7764<br/>7765<br/>7766<br/>7767<br/>7768<br/>7769<br/>7770<br/>7771<br/>7772<br/>7773<br/>7774<br/>7775<br/>7776<br/>7777<br/>7778<br/>7779<br/>7780<br/>7781<br/>7782<br/>7783<br/>7784<br/>7785<br/>7786<br/>7787<br/>7788<br/>7789<br/>7790<br/>7791<br/>7792<br/>7793<br/>7794<br/>7795<br/>7796<br/>7797<br/>7798<br/>7799<br/>7800<br/>7801<br/>7802<br/>7803<br/>7804<br/>7805<br/>7806<br/>7807<br/>7808<br/>7809<br/>7810<br/>7811<br/>7812<br/>7813<br/>7814<br/>7815<br/>7816<br/>7817<br/>7818<br/>7819<br/>7820<br/>7821<br/>7822<br/>7823<br/>7824<br/>7825<br/>7826<br/>7827<br/>7828<br/>7829<br/>7830<br/>7831<br/>7832<br/>7833<br/>7834<br/>7835<br/>7836<br/>7837<br/>7838<br/>7839<br/>7840<br/>7841<br/>7842<br/>7843<br/>7844<br/>7845<br/>7846<br/>7847<br/>7848<br/>7849<br/>7850<br/>7851<br/>7852<br/>7853<br/>7854<br/>7855<br/>7856<br/>7857<br/>7858<br/>7859<br/>7860<br/>7861<br/>7862<br/>7863<br/>7864<br/>7865<br/>7866<br/>7867<br/>7868<br/>7869<br/>7870<br/>7871<br/>7872<br/>7873<br/>7874<br/>7875<br/>7876<br/>7877<br/>7878<br/>7879<br/>7880<br/>7881<br/>7882<br/>7883<br/>7884<br/>7885<br/>7886<br/>7887<br/>7888<br/>7889<br/>7890<br/>7891<br/>7892<br/>7893<br/>7894<br/>7895<br/>7896<br/>7897<br/>7898<br/>7899<br/>7900<br/>7901<br/>7902<br/>7903<br/>7904<br/>7905<br/>7906<br/>7907<br/>7908<br/>7909<br/>7910<br/>7911<br/>7912<br/>7913<br/>7914<br/>7915<br/>7916<br/>7917<br/>7918<br/>7919<br/>7920<br/>7921<br/>7922<br/>7923<br/>7924<br/>7925<br/>7926<br/>7927<br/>7928<br/>7929<br/>7930<br/>7931<br/>7932<br/>7933<br/>7934<br/>7935<br/>7936<br/>7937<br/>7938<br/>7939<br/>7940<br/>7941<br/>7942<br/>7943<br/>7944<br/>7945<br/>7946<br/>7947<br/>7948<br/>7949<br/>7950<br/>7951<br/>7952<br/>7953<br/>7954<br/>7955<br/>7956<br/>7957<br/>7958<br/>7959<br/>7960<br/>7961<br/>7962<br/>7963<br/>7964<br/>7965<br/>7966<br/>7967<br/>7968<br/>7969<br/>7970<br/>7971<br/>7972<br/>7973<br/>7974<br/>7975<br/>7976<br/>7977<br/>7978<br/>7979<br/>7980<br/>7981<br/>7982<br/>7983<br/>7984<br/>7985<br/>7986<br/>7987<br/>7988<br/>7989<br/>7990<br/>7991<br/>7992<br/>7993<br/>7994<br/>7995<br/>7996<br/>7997<br/>7998<br/>7999<br/>8000<br/>8001<br/>8002<br/>8003<br/>8004<br/>8005<br/>8006<br/>8007<br/>8008<br/>8009<br/>8010<br/>8011<br/>8012<br/>8013<br/>8014<br/>8015<br/>8016<br/>8017<br/>8018<br/>8019<br/>8020<br/>8021<br/>8022<br/>8023<br/>8024<br/>8025<br/>8026<br/>8027<br/>8028<br/>8029<br/>8030<br/>8031<br/>8032<br/>8033<br/>8034<br/>8035<br/>8036<br/>8037<br/>8038<br/>8039<br/>8040<br/>8041<br/>8042<br/>8043<br/>8044<br/>8045<br/>8046<br/>8047<br/>8048<br/>8049<br/>8050<br/>8051<br/>8052<br/>8053<br/>8054<br/>8055<br/>8056<br/>8057<br/>8058<br/>8059<br/>8060<br/>8061<br/>8062<br/>8063<br/>8064<br/>8065<br/>8066<br/>8067<br/>8068<br/>8069<br/>8070<br/>8071<br/>8072<br/>8073<br/>8074<br/>8075<br/>8076<br/>8077<br/>8078<br/>8079<br/>8080<br/>8081<br/>8082<br/>8083<br/>8084<br/>8085<br/>8086<br/>8087<br/>8088<br/>8089<br/>8090<br/>8091<br/>8092<br/>8093<br/>8094<br/>8095<br/>8096<br/>8097<br/>8098<br/>8099<br/>8100<br/>8101<br/>8102<br/>8103<br/>8104<br/>8105<br/>8106<br/>8107<br/>8108<br/>8109<br/>8110<br/>8111<br/>8112<br/>8113<br/>8114<br/>8115<br/>8116<br/>8117<br/>8118<br/>8119<br/>8120<br/>8121<br/>8122<br/>8123<br/>8124<br/>8125<br/>8126<br/>8127<br/>8128<br/>8129<br/>8130<br/>8131<br/>8132<br/>8133<br/>8134<br/>8135<br/>8136<br/>8137<br/>8138<br/>8139<br/>8140<br/>8141<br/>8142<br/>8143<br/>8144<br/>8145<br/>8146<br/>8147<br/>8148<br/>8149<br/>8150<br/>8151<br/>8152<br/>8153<br/>8154<br/>8155<br/>8156<br/>8157<br/>8158<br/>8159<br/>8160<br/>8161<br/>8162<br/>8163<br/>8164<br/>8165<br/>8166<br/>8167<br/>8168<br/>8169<br/>8170<br/>8171<br/>8172<br/>8173<br/>8174<br/>8175<br/>8176<br/>8177<br/>8178<br/>8179<br/>8180<br/>8181<br/>8182<br/>8183<br/>8184<br/>8185<br/>8186<br/>8187<br/>8188<br/>8189<br/>8190<br/>8191<br/>8192<br/>8193<br/>8194<br/>8195<br/>8196<br/>8197<br/>8198<br/>8199<br/>8200<br/>8201<br/>8202<br/>8203<br/>8204<br/>8205<br/>8206<br/>8207<br/>8208<br/>8209<br/>8210<br/>8211<br/>8212<br/>8213<br/>8214<br/>8215<br/>8216<br/>8217<br/>8218<br/>8219<br/>8220<br/>8221<br/>8222<br/>8223<br/>8224<br/>8225<br/>8226<br/>8227<br/>8228<br/>8229<br/>8230<br/>8231<br/>8232<br/>8233<br/>8234<br/>8235<br/>8236<br/>8237<br/>8238<br/>8239<br/>8240<br/>8241<br/>8242<br/>8243<br/>8244<br/>8245<br/>8246<br/>8247<br/>8248<br/>8249<br/>8250<br/>8251<br/>8252<br/>8253<br/>8254<br/>8255<br/>8256<br/>8257<br/>8258<br/>8259<br/>8260<br/>8261<br/>8262<br/>8263<br/>8264<br/>8265<br/>8266<br/>8267<br/>8268<br/>8269<br/>8270<br/>8271<br/>8272<br/>8273<br/>8274<br/>8275<br/>8276<br/>8277<br/>8278<br/>8279<br/>8280<br/>8281<br/>8282<br/>8283<br/>8284<br/>8285<br/>8286<br/>8287<br/>8288<br/>8289<br/>8290<br/>8291<br/>8292<br/>8293<br/>8294<br/>8295<br/>8296<br/>8297<br/>8298<br/>8299<br/>8300<br/>8301<br/>8302<br/>8303<br/>8304<br/>8305<br/>8306<br/>8307<br/>8308<br/>8309<br/>8310<br/>8311<br/>8312<br/>8313<br/>8314<br/>8315<br/>8316<br/>8317<br/>8318<br/>8319<br/>8320<br/>8321<br/>8322<br/>8323<br/>8324<br/>8325<br/>8326<br/>8327<br/>8328<br/>8329<br/>8330<br/>8331<br/>8332<br/>8333<br/>8334<br/>8335<br/>8336<br/>8337<br/>8338<br/>8339<br/>8340<br/>8341<br/>8342<br/>8343<br/>8344<br/>8345<br/>8346<br/>8347<br/>8348<br/>8349<br/>8350<br/>8351<br/>8352<br/>8353<br/>8354<br/>8355<br/>8356<br/>8357<br/>8358<br/>8359<br/>8360<br/>8361<br/>8362<br/>8363<br/>8364<br/>8365<br/>8366<br/>8367<br/>8368<br/>8369<br/>8370<br/>8371<br/>8372<br/>8373<br/>8374<br/>8375<br/>8376<br/>8377<br/>8378<br/>8379<br/>8380<br/>8381<br/>8382<br/>8383<br/>8384<br/>8385<br/>8386<br/>8387<br/>8388<br/>8389<br/>8390<br/>8391<br/>8392<br/>8393<br/>8394<br/>8395<br/>8396<br/>8397<br/>8398<br/>8399<br/>8400<br/>8401<br/>8402<br/>8403<br/>8404<br/>8405<br/>8406<br/>8407<br/>8408<br/>8409<br/>8410<br/>8411<br/>8412<br/>8413<br/>8414<br/>8415<br/>8416<br/>8417<br/>8418<br/>8419<br/>8420<br/>8421<br/>8422<br/>8423<br/>8424<br/>8425<br/>8426<br/>8427<br/>8428<br/>8429<br/>8430<br/>8431<br/>8432<br/>8433<br/>8434<br/>8435<br/>8436<br/>8437<br/>8438<br/>8439<br/>8440<br/>8441<br/>8442<br/>8443<br/>8444<br/>8445<br/>8446<br/>8447<br/>8448<br/>8449<br/>8450<br/>8451<br/>8452<br/>8453<br/>8454<br/>8455<br/>8456<br/>8457<br/>8458<br/>8459<br/>8460<br/>8461<br/>8462<br/>8463<br/>8464<br/>8465<br/>8466<br/>8467<br/>8468<br/>8469<br/>8470<br/>8471<br/>8472<br/>8473<br/>8474<br/>8475<br/>8476<br/>8477<br/>8478<br/>8479<br/>8480<br/>8481<br/>8482<br/>8483<br/>8484<br/>8485<br/>8486<br/>8487<br/>8488<br/>8489<br/>8490<br/>8491<br/>8492<br/>8493<br/>8494<br/>8495<br/>8496<br/>8497<br/>8498<br/>8499<br/>8500<br/>8501<br/>8502<br/>8503<br/>8504<br/>8505<br/>8506<br/>8507<br/>8508<br/>8509<br/>8510<br/>8511<br/>8512<br/>8513<br/>8514<br/>8515<br/>8516<br/>8517<br/>8518<br/>8519<br/>8520<br/>8521<br/>8522<br/>8523<br/>8524<br/>8525<br/>8526<br/>8527<br/>8528<br/>8529<br/>8530<br/>8531<br/>8532<br/>8533<br/>8534<br/>8535<br/>8536<br/>8537<br/>8538<br/>8539<br/>8540<br/>8541<br/>8542<br/>8543<br/>8544<br/>8545<br/>8546<br/>8547<br/>8548<br/>8549<br/>8550<br/>8551<br/>8552<br/>8553<br/>8554<br/>8555<br/>8556<br/>8557<br/>8558<br/>8559<br/>8560<br/>8561<br/>8562<br/>8563<br/>8564<br/>8565<br/>8566<br/>8567<br/>8568<br/>8569<br/>8570<br/>8571<br/>8572<br/>8573<br/>8574<br/>8575<br/>8576<br/>8577<br/>8578<br/>8579<br/>8580<br/>8581<br/>8582<br/>8583<br/>8584<br/>8585<br/>8586<br/>8587<br/>8588<br/>8589<br/>8590<br/>8591<br/>8592<br/>8593<br/>8594<br/>8595<br/>8596<br/>8597<br/>8598<br/>8599<br/>8600<br/>8601<br/>8602<br/>8603<br/>8604<br/>8605<br/>8606<br/>8607<br/>8608<br/>8609<br/>8610<br/>8611<br/>8612<br/>8613<br/>8614<br/>8615<br/>8616<br/>8617<br/>8618<br/>8619<br/>8620<br/>8621<br/>8622<br/>8623<br/>8624<br/>8625<br/>8626<br/>8627<br/>8628<br/>8629<br/>8630<br/>8631<br/>8632<br/>8633<br/>8634<br/>8635<br/>8636<br/>8637<br/>8638<br/>8639<br/>8640<br/>8641<br/>8642<br/>8643<br/>8644<br/>8645<br/>8646<br/>8647<br/>8648<br/>8649<br/>8650<br/>8651<br/>8652<br/>8653<br/>8654<br/>8655<br/>8656<br/>8657<br/>8658<br/>8659<br/>8660<br/>8661<br/>8662<br/>8663<br/>8664<br/>8665<br/>8666<br/>8667<br/>8668<br/>8669<br/>8670<br/>8671<br/>8672<br/>8673<br/>8674<br/>8675<br/>8676<br/>8677<br/>8678<br/>8679<br/>8680<br/>8681<br/>8682<br/>8683<br/>8684<br/>8685<br/>8686<br/>8687<br/>8688<br/>8689<br/>8690<br/>8691<br/>8692<br/>8693<br/>8694<br/>8695<br/>8696<br/>8697<br/>8698<br/>8699<br/>8700<br/>8701<br/>8702<br/>8703<br/>8704<br/>8705<br/>8706<br/>8707<br/>8708<br/>8709<br/>8710<br/>8711<br/>8712<br/>8713<br/>8714<br/>8715<br/>8716<br/>8717<br/>8718<br/>8719<br/>8720<br/>8721<br/>8722<br/>8723<br/>8724<br/>8725<br/>8726<br/>8727<br/>8728<br/>8729<br/>8730<br/>8731<br/>8732<br/>8733<br/>8734<br/>8735<br/>8736<br/>8737<br/>8738<br/>8739<br/>8740<br/>8741<br/>8742<br/>8743<br/>8744<br/>8745<br/>8746<br/>8747<br/>8748<br/>8749<br/>8750<br/>8751<br/>8752<br/>8753<br/>8754<br/>8755<br/>8756<br/>8757<br/>8758<br/>8759<br/>8760<br/>8761<br/>8762<br/>8763<br/>8764<br/>8765<br/>8766<br/>8767<br/>8768<br/>8769<br/>8770<br/>8771<br/>8772<br/>8773<br/>8774<br/>8775<br/>8776<br/>8777<br/>8778<br/>8779<br/>8780<br/>8781<br/>8782<br/>8783<br/>8784<br/>8785<br/>8786<br/>8787<br/>8788<br/>8789<br/>8790<br/>8791<br/>8792<br/>8793<br/>8794<br/>8795<br/>8796<br/>8797<br/>8798<br/>8799<br/>8800<br/>8801<br/>8802<br/>8803<br/>8804<br/>8805<br/>8806<br/>8807<br/>8808<br/>8809<br/>8810<br/>8811<br/>8812<br/>8813<br/>8814<br/>8815<br/>8816<br/>8817<br/>8818<br/>8819<br/>8820<br/>8821<br/>8822<br/>8823<br/>8824<br/>8825<br/>8826<br/>8827<br/>8828<br/>8829<br/>8830<br/>8831<br/>8832<br/>8833<br/>8834<br/>8835<br/>8836<br/>8837<br/>8838<br/>8839<br/>8840<br/>8841<br/>8842<br/>8843<br/>8844<br/>8845<br/>8846<br/>8847<br/>8848<br/>8849<br/>8850<br/>8851<br/>8852<br/>8853<br/>8854<br/>8855<br/>8856<br/>8857<br/>8858<br/>8859<br/>8860<br/>8861<br/>8862<br/>8863<br/>8864<br/>8865<br/>8866<br/>8867<br/>8868<br/>8869<br/>8870<br/>8871<br/>8872<br/>8873<br/>8874<br/>8875<br/>8876<br/>8877<br/>8878<br/>8879<br/>8880<br/>8881<br/>8882<br/>8883<br/>8884<br/>8885<br/>8886<br/>8887<br/>8888<br/>8889<br/>8890<br/>8891<br/>8892<br/>8893<br/>8894<br/>8895<br/>8896<br/>8897<br/>8898<br/>8899<br/>8900<br/>8901<br/>8902<br/>8903<br/>8904<br/>8905<br/>8906<br/>8907<br/>8908<br/>8909<br/>8910<br/>8911<br/>8912<br/>8913<br/>8914<br/>8915<br/>8916<br/>8917<br/>8918<br/>8919<br/>8920<br/>8921<br/>8922<br/>8923<br/>8924<br/>8925<br/>8926<br/>8927<br/>8928<br/>8929<br/>8930<br/>8931<br/>8932<br/>8933<br/>8934<br/>8935<br/>8936<br/>8937<br/>8938<br/>8939<br/>8940<br/>8941<br/>8942<br/>8943<br/>8944<br/>8945<br/>8946<br/>8947<br/>8948<br/>8949<br/>8950<br/>8951<br/>8952<br/>8953<br/>8954<br/>8955<br/>8956<br/>8957<br/>8958<br/>8959<br/>8960<br/>8961<br/>8962<br/>8963<br/>8964<br/>8965<br/>8966<br/>8967<br/>8968<br/>8969<br/>8970<br/>8971<br/>8972<br/>8973<br/>8974<br/>8975<br/>8976<br/>8977<br/>8978<br/>8979<br/>8980<br/>8981<br/>8982<br/>8983<br/>8984<br/>8985<br/>8986<br/>8987<br/>8988<br/>8989<br/>8990<br/>8991<br/>8992<br/>8993<br/>8994<br/>8995<br/>8996<br/>8997<br/>8998<br/>8999<br/>9000<br/>9001<br/>9002<br/>9003<br/>9004<br/>9005<br/>9006<br/>9007<br/>9008<br/>9009<br/>9010<br/>9011<br/>9012<br/>9013<br/>9014<br/>9015<br/>9016<br/>9017<br/>9018<br/>9019<br/>9020<br/>9021<br/>9022<br/>9023<br/>9024<br/>9025<br/>9026<br/>9027<br/>9028<br/>9029<br/>9030<br/>9031<br/>9032<br/>9033<br/>9034<br/>9035<br/>9036<br/>9037<br/>9038<br/>9039<br/>9040<br/>9041<br/>9042<br/>9043<br/>9044<br/>9045<br/>9046<br/>9047<br/>9048<br/>9049<br/>9050<br/>9051<br/>9052<br/>9053<br/>9054<br/>9055<br/>9056<br/>9057<br/>9058<br/>9059<br/>9060<br/>9061<br/>9062<br/>9063<br/>9064<br/>9065<br/>9066<br/>9067<br/>9068<br/>9069<br/>9070<br/>9071<br/>9072<br/>9073<br/>9074<br/>9075<br/>9076<br/>9077<br/>9078<br/>9079<br/>9080<br/>9081<br/>9082<br/>9083<br/>9084<br/>9085<br/>9086<br/>9087<br/>9088<br/>9089<br/>9090<br/>9091<br/>9092<br/>9093<br/>9094<br/>9095<br/>9096<br/>9097<br/>9098<br/>9099<br/>9100<br/>9101<br/>9102<br/>9103<br/>9104<br/>9105<br/>9106<br/>9107<br/>9108<br/>9109<br/>9110<br/>9111<br/>9112<br/>9113<br/>9114<br/>9115<br/>9116<br/>9117<br/>9118<br/>9119<br/>9120<br/>9121<br/>9122<br/>9123<br/>9124<br/>9125<br/>9126<br/>9127<br/>9128<br/>9129<br/>9130<br/>9131<br/>9132<br/>9133<br/>9134<br/>9135<br/>9136<br/>9137<br/>9138<br/>9139<br/>9140<br/>9141<br/>9142<br/>9143<br/>9144<br/>9145<br/>9146<br/>9147<br/>9148<br/>9149<br/>9150<br/>9151<br/>9152<br/>9153<br/>9154<br/>9155<br/>9156<br/>9157<br/>9158<br/>9159<br/>9160<br/>9161<br/>9162<br/>9163<br/>9164<br/>9165<br/>9166<br/>9167<br/>9168<br/>9169<br/>9170<br/>9171<br/>9172<br/>9173<br/>9174<br/>9175<br/>9176<br/>9177<br/>9178<br/>9179<br/>9180<br/>9181<br/>9182<br/>9183<br/>9184<br/>9185<br/>9186<br/>9187<br/>9188<br/>9189<br/>9190<br/>9191<br/>9192<br/>9193<br/>9194<br/>9195<br/>9196<br/>9197<br/>9198<br/>9199<br/>9200<br/>9201<br/>9202<br/>9203<br/>9204<br/>9205<br/>9206<br/>9207<br/>9208<br/>9209<br/>9210<br/>9211<br/>9212<br/>9213<br/>9214<br/>9215<br/>9216<br/>9217<br/>9218<br/>9219<br/>9220<br/>9221<br/>9222<br/>9223<br/>9224<br/>9225<br/>9226<br/>9227<br/>9228<br/>9229<br/>9230<br/>9231<br/>9232<br/>9233<br/>9234<br/>9235<br/>9236<br/>9237<br/>9238<br/>9239<br/>9240<br/>9241<br/>9242<br/>9243<br/>9244<br/>9245<br/>9246<br/>9247<br/>9248<br/>9249<br/>9250<br/>9251<br/>9252<br/>9253<br/>9254<br/>9255<br/>9256<br/>9257<br/>9258<br/>9259<br/>9260<br/>9261<br/>9262<br/>9263<br/>9264<br/>9265<br/>9266<br/>9267<br/>9268<br/>9269<br/>9270<br/>9271<br/>9272<br/>9273<br/>9274<br/>9275<br/>9276<br/>9277<br/>9278<br/>9279<br/>9280<br/>9281<br/>9282<br/>9283<br/>9284<br/>9285<br/>9286<br/>9287<br/>9288<br/>9289<br/>9290<br/>9291<br/>9292<br/>9293<br/>9294<br/>9295<br/>9296<br/>9297<br/>9298<br/>9299<br/>9300<br/>9301<br/>9302<br/>9303<br/>9304<br/>9305<br/>9306<br/>9307<br/>9308<br/>9309<br/>9310<br/>9311<br/>9312<br/>9313<br/>9314<br/>9315<br/>9316<br/>9317<br/>9318<br/>9319<br/>9320<br/>9321<br/>9322<br/>9323<br/>9324<br/>9325<br/>9326<br/>9327<br/>9328<br/>9329<br/>9330<br/>9331<br/>9332<br/>9333<br/>9334<br/>9335<br/>9336<br/>9337<br/>9338<br/>9339<br/>9340<br/>9341<br/>9342<br/>9343<br/>9344<br/>9345<br/>9346<br/>9347<br/>9348<br/>9349<br/>9350<br/>9351<br/>9352<br/>9353<br/>9354<br/>9355<br/>9356<br/>9357<br/>9358<br/>9359<br/>9360<br/>9361<br/>9362<br/>9363<br/>9364<br/>9365<br/>9366<br/>9367<br/>9368<br/>9369<br/>9370<br/>9371<br/>9372<br/>9373<br/>9374<br/>9375<br/>9376<br/>9377<br/>9378<br/>9379<br/>9380<br/>9381<br/>9382<br/>9383<br/>9384<br/>9385<br/>9386<br/>9387<br/>9388<br/>9389<br/>9390<br/>9391<br/>9392<br/>9393<br/>9394<br/>9395<br/>9396<br/>9397<br/>9398<br/>9399<br/>9400<br/>9401<br/>9402<br/>9403<br/>9404<br/>9405<br/>9406<br/>9407<br/>9408<br/>9409<br/>9410<br/>9411<br/>9412<br/>9413<br/>9414<br/>9415<br/>9416<br/>9417<br/>9418<br/>9419<br/>9420<br/>9421<br/>9422<br/>9423<br/>9424<br/>9425<br/>9426<br/>9427<br/>9428<br/>9429<br/>9430<br/>9431<br/>9432<br/>9433<br/>9434<br/>9435<br/>9436<br/>9437<br/>9438<br/>9439<br/>9440<br/>9441<br/>9442<br/>9443<br/>9444<br/>9445<br/>9446<br/>9447<br/>9448<br/>9449<br/>9450<br/>9451<br/>9452<br/>9453<br/>9454<br/>9455<br/>9456<br/>9457<br/>9458<br/>9459<br/>9460<br/>9461<br/>9462<br/>9463<br/>9464<br/>9465<br/>9466<br/>9467<br/>9468<br/>9469<br/>9470<br/>9471<br/>9472<br/>9473<br/>9474<br/>9475<br/>9476<br/>9477<br/>9478<br/>9479<br/>9480<br/>9481<br/>9482<br/>9483<br/>9484<br/>9485<br/>9486<br/>9487<br/>9488<br/>9489<br/>9490<br/>9491<br/>9492<br/>9493<br/>9494<br/>9495<br/>9496<br/>9497<br/>9498<br/>9499<br/>9500<br/>9501<br/>9502<br/>9503<br/>9504<br/>9505<br/>9506<br/>9507<br/>9508<br/>9509<br/>9510<br/>9511<br/>9512<br/>9513<br/>9514<br/>9515<br/>9516<br/>9517<br/>9518<br/>9519<br/>9520<br/>9521<br/>9522<br/>9523<br/>9524<br/>9525<br/>9526<br/>9527<br/>9528<br/>9529<br/>9530<br/>9531<br/>9532<br/>9533<br/>9534<br/>9535<br/>9536<br/>9537<br/>9538<br/>9539<br/>9540<br/>9541<br/>9542<br/>9543<br/>9544<br/>9545<br/>9546<br/>9547<br/>9548<br/>9549<br/>9550<br/>9551<br/>9552<br/>9553<br/>9554<br/>9555<br/>9556<br/>9557<br/>9558<br/>9559<br/>9560<br/>9561<br/>9562<br/>9563<br/>9564<br/>9565<br/>9566<br/>9567<br/>9568<br/>9569<br/>9570<br/>9571<br/>9572<br/>9573<br/>9574<br/>9575<br/>9576<br/>9577<br/>9578<br/>9579<br/>9580<br/>9581<br/>9582<br/>9583<br/>9584<br/>9585<br/>9586<br/>9587<br/>9588<br/>9589<br/>9590<br/>9591<br/>9592<br/>9593<br/>9594<br/>9595<br/>9596<br/>9597<br/>9598<br/>9599<br/>9600<br/>9601<br/>9602<br/>9603<br/>9604<br/>9605<br/>9606<br/>9607<br/>9608<br/>9609<br/>9610<br/>9611<br/>9612<br/>9613<br/>9614<br/>9615<br/>9616<br/>9617<br/>9618<br/>9619<br/>9620<br/>9621<br/>9622<br/>9623<br/>9624<br/>9625<br/>9626<br/>9627<br/>9628<br/>9629<br/>9630<br/>9631<br/>9632<br/>9633<br/>9634<br/>9635<br/>9636<br/>9637<br/>9638<br/>9639<br/>9640<br/>9641<br/>9642<br/>9643<br/>9644<br/>9645<br/>9646<br/>9647<br/>9648<br/>9649<br/>9650<br/>9651<br/>9652<br/>9653<br/>9654<br/>9655<br/>9656<br/>9657<br/>9658<br/>9659<br/>9660<br/>9661<br/>9662<br/>9663<br/>9664<br/>9665<br/>9666<br/>9667<br/>9668<br/>9669<br/>9670<br/>9671<br/>9672<br/>9673<br/>9674<br/>9675<br/>9676<br/>9677<br/>9678<br/>9679<br/>9680<br/>9681<br/>9682<br/>9683<br/>9684<br/>9685<br/>9686<br/>9687<br/>9688<br/>9689<br/>9690<br/>9691<br/>9692<br/>9693<br/>9694<br/>9695<br/>9696<br/>9697<br/>9698<br/>9699<br/>9700<br/>9701<br/>9702<br/>9703<br/>9704<br/>9705<br/>9706<br/>9707<br/>9708<br/>9709<br/>9710<br/>9711<br/>9712<br/>9713<br/>9714<br/>9715<br/>9716<br/>9717<br/>9718<br/>9719<br/>9720<br/>9721<br/>9722<br/>9723<br/>9724<br/>9725<br/>9726<br/>9727<br/>9728<br/>9729<br/>9730<br/>9731<br/>9732<br/>9733<br/>9734<br/>9735<br/>9736<br/>9737<br/>9738<br/>9739<br/>9740<br/>9741<br/>9742<br/>9743<br/>9744<br/>9745<br/>9746<br/>9747<br/>9748<br/>9749<br/>9750<br/>9751<br/>9752<br/>9753<br/>9754<br/>9755<br/>9756<br/>9757<br/>9758<br/>9759<br/>9760<br/>9761<br/>9762<br/>9763<br/>9764<br/>9765<br/>9766<br/>9767<br/>9768<br/>9769<br/>9770<br/>9771<br/>9772<br/>9773<br/>9774<br/>9775<br/>9776<br/>9777<br/>9778<br/>9779<br/>9780<br/>9781<br/>9782<br/>9783<br/>9784<br/>9785<br/>9786<br/>9787<br/>9788<br/>9789<br/>9790<br/>9791<br/>9792<br/>9793<br/>9794<br/>9795<br/>9796<br/>9797<br/>9798<br/>9799<br/>9800<br/>9801<br/>9802<br/>9803<br/>9804<br/>9805<br/>9806<br/>9807<br/>9808<br/>9809<br/>9810<br/>9811<br/>9812<br/>9813<br/>9814<br/>9815<br/>9816<br/>9817<br/>9818<br/>9819<br/>9820<br/>9821<br/>9822<br/>9823<br/>9824<br/>9825<br/>9826<br/>9827<br/>9828<br/>9829<br/>9830<br/>9831<br/>9832<br/>9833<br/>9834<br/>9835<br/>9836<br/>9837<br/>9838<br/>9839<br/>9840<br/>9841<br/>9842<br/>9843<br/>9844<br/>9845<br/>9846<br/>9847<br/>9848<br/>9849<br/>9850<br/>9851<br/>9852<br/>9853<br/>9854<br/>9855<br/>9856<br/>9857<br/>9858<br/>9859<br/>9860<br/>9861<br/>9862<br/>9863<br/>9864<br/>9865<br/>9866<br/>9867<br/>9868<br/>9869<br/>9870<br/>9871<br/>9872<br/>9873<br/>9874<br/>9875<br/>9876<br/>9877<br/>9878<br/>9879<br/>9880<br/>9881<br/>9882<br/>9883<br/>9884<br/>9885<br/>9886<br/>9887<br/>9888<br/>9889<br/>9890<br/>9891<br/>9892<br/>9893<br/>9894<br/>9895<br/>9896<br/>9897<br/>9898<br/>9899<br/>9900<br/>9901<br/>9902<br/>9903<br/>9904<br/>9905<br/>9906<br/>9907<br/>9908<br/>9909<br/>9910<br/>9911<br/>9912<br/>9913<br/>9914<br/>9915<br/>9916<br/>9917<br/>9918<br/>9919<br/>9920<br/>9921<br/>9922<br/>9923<br/>9924<br/>9925<br/>9926<br/>9927<br/>9928<br/>9929<br/>9930<br/>9931<br/>9932<br/>9933<br/>9934<br/>9935<br/>9936<br/>9937<br/>9938<br/>9939<br/>9940<br/>9941<br/>9942<br/>9943<br/>9944<br/>9945<br/>9946<br/>9947<br/>9948<br/>9949<br/>9950<br/>9951<br/>9952<br/>9953<br/>9954<br/>9955<br/>9956<br/>9957<br/>9958<br/>9959<br/>9960<br/>9961<br/>9962<br/>9963<br/>9964<br/>9965<br/>9966<br/>9967<br/>9968<br/>9969<br/>9970<br/>9971<br/>9972<br/>9973<br/>9974<br/>9975<br/>9976<br/>9977<br/>9978<br/>9979<br/>9980<br/>9981<br/>9982<br/>9983<br/>9984<br/>9985<br/>9986<br/>9987<br/>9988<br/>9989<br/>9990<br/>9991<br/>9992<br/>9993<br/>9994<br/>9995<br/>9996<br/>9997<br/>9998<br/>9999<br/>10000<br/>10001<br/>10002<br/>10003<br/>10004<br/>10005<br/>10006<br/>10007<br/>10008<br/>10009<br/>10010<br/>10011<br/>10012<br/>10013<br/>10014<br/>10015<br/>10016<br/>10017<br/>10018<br/>10019<br/>10020<br/>10021<br/>10022<br/>10023<br/>10024<br/>10025<br/>10026<br/>10027<br/>10028<br/>10029<br/>10030<br/>10031<br/>10032<br/>10033<br/>10034<br/>10035<br/>10036<br/>10037<br/>10038<br/>10039<br/>10040<br/>10041<br/>10042<br/>10043<br/>10044<br/>10045<br/>10046<br/>10047<br/>10048<br/>10049<br/>10050<br/>10051<br/>10052<br/>10053<br/>10054<br/>10055<br/>10056<br/>10057<br/>10058<br/>10059<br/>10060<br/>10061<br/>10062<br/>10063<br/>10064<br/>10065<br/>10066<br/>10067<br/>10068<br/>10069<br/>10070<br/>10071<br/>10072<br/>10073<br/>10074<br/>10075<br/>10076<br/>10077<br/>10078<br/>10079<br/>10080<br/>10081<br/>10082<br/>10083<br/>10084<br/>10085<br/>10086<br/>10087<br/>10088<br/>10089<br/>10090<br/>10091<br/>10092<br/>10093<br/>10094<br/>10095<br/>10096<br/>10097<br/>10098<br/>10099<br/>10100<br/>10101<br/>10102<br/>10103<br/>10104<br/>10105<br/>10106<br/>10107<br/>10108<br/>10109<br/>10110<br/>10111<br/>10112<br/>10113<br/>10114<br/>10115<br/>10116<br/>10117<br/>10118<br/>10119<br/>10120<br/>10121<br/>10122<br/>10123<br/>10124<br/>10125<br/>10126<br/>10127<br/>10128<br/>10129<br/>10130<br/>10131<br/>10132<br/>10133<br/>10134<br/>10135<br/>10136<br/>10137<br/>10138<br/>10139<br/>10140<br/>10141<br/>10142<br/>10143<br/>10144<br/>10145<br/>10146<br/>10147<br/>10148<br/>10149<br/>10150<br/>10151<br/>10152<br/>10153<br/>10154<br/>10155<br/>10156<br/>10157<br/>10158<br/>10159<br/>10160<br/>10161<br/>10162<br/>10163<br/>10164<br/>10165<br/>10166<br/>10167<br/>10168<br/>10169<br/>10170<br/>10171<br/>10172<br/>10173<br/>10174<br/>10175<br/>10176<br/>10177<br/>10178<br/>10179<br/>10180<br/>10181<br/>10182<br/>10183<br/>10184<br/>10185<br/>10186<br/>10187<br/>10188<br/>10189<br/>10190<br/>10191<br/>10192<br/>10193<br/>10194<br/>10195<br/>10196<br/>10197<br/>10198<br/>10199<br/>10200<br/>10201<br/>10202<br/>10203<br/>10204<br/>10205<br/>10206<br/>10207<br/>10208<br/>10209<br/>10210<br/>10211<br/>10212<br/>10213<br/>10214<br/>10215<br/>10216<br/>10217<br/>10218<br/>10219<br/>10220<br/>10221<br/>10222<br/>10223<br/>10224<br/>10225<br/>10226<br/>10227<br/>10228<br/>10229<br/>10230<br/>10231<br/>10232<br/>10233<br/>10234<br/>10235<br/>10236<br/>10237<br/>10238<br/>10239<br/>10240<br/>10241<br/>10242<br/>10243<br/>10244<br/>10245<br/>10246<br/>10247<br/>10248<br/>10249<br/>10250<br/>10251<br/>10252<br/>10253<br/>10254<br/>10255<br/>10256<br/>10257<br/>10258<br/>10259<br/>10260<br/>10261<br/>10262<br/>10263<br/>10264<br/>10265<br/>10266<br/>10267<br/>10268<br/>10269<br/>10270<br/>10271<br/>10272<br/>10273<br/>10274<br/>10275<br/>10276<br/>10277<br/>10278<br/>10279<br/>10280<br/>10281<br/>10282<br/>10283<br/>10284<br/>10285<br/>10286<br/>10287<br/>10288<br/>10289<br/>10290<br/>10291<br/>10292<br/>10293<br/>10294<br/>10295<br/>10296<br/>10297<br/>10298<br/>10299<br/>10300<br/>10301<br/>10302<br/>10303<br/>10304<br/>10305<br/>10306<br/>10307<br/>10308<br/>10309<br/>10310<br/>10311<br/>10312<br/>10313<br/>10314<br/>10315<br/>10316<br/>10317<br/>10318<br/>10319<br/>10320<br/>10321<br/>10322<br/>10323<br/>10324<br/>10325<br/>10326<br/>10327<br/>10328<br/>10329<br/>10330<br/>10331<br/>10332<br/>10333<br/>10334<br/>10335<br/>10336<br/>10337<br/>10338<br/>10339<br/>10340<br/>10341<br/>10342<br/>10343<br/>10344<br/>10345<br/>10346<br/>10347<br/>10348<br/>10349<br/>10350<br/>10351<br/>10352<br/>10353<br/>10354<br/>10355<br/>10356<br/>10357<br/>10358<br/>10359<br/>10360<br/>10361<br/>10362<br/>10363<br/>10364<br/>10365<br/>10366<br/>10367<br/>10368<br/>10369<br/>10370<br/>10371<br/>10372<br/>10373<br/>10374<br/>10375<br/>10376<br/>10377<br/>10378<br/>10379<br/>10380<br/>10381<br/>10382<br/>10383<br/>10384<br/>10385<br/>10386<br/>10387<br/>10388<br/>10389<br/>10390<br/>10391<br/>10392<br/>10393<br/>10394<br/>10395<br/>10396<br/>10397<br/>10398<br/>10399<br/>10400<br/>10401<br/>10402<br/>10403<br/>10404<br/>10405<br/>10406<br/>10407<br/>10408<br/>10409<br/>10410<br/>10411<br/>10412<br/>10413<br/>10414<br/>10415<br/>10416<br/>10417<br/>10418<br/>10419<br/>10420<br/>10421<br/>10422<br/>10423<br/>10424<br/>10425<br/>10426<br/>10427<br/>10428<br/>10429<br/>10430<br/>10431<br/>10432<br/>10433<br/>10434<br/>10435<br/>10436<br/>10437<br/>10438<br/>10439<br/>10440<br/>10441<br/>10442<br/>10443<br/>10444<br/>10445<br/>10446<br/>10447<br/>10448<br/>10449<br/>10450<br/>10451<br/>10452<br/>10453<br/>10454<br/>10455<br/>10456<br/>10457<br/>10458<br/>10459<br/>10460<br/>10461<br/>10462<br/>10463<br/>10464<br/>10465<br/>10466<br/>10467<br/>10468<br/>10469<br/>10470<br/>10471<br/>10472<br/>10473<br/>10474<br/>10475<br/>10476<br/>10477<br/>10478<br/>10479<br/>10480<br/>10481<br/>10482<br/>10483<br/>10484<br/>10485<br/>10486<br/>10487<br/>10488<br/>10489<br/>10490<br/>10491<br/>10492<br/>10493<br/>10494<br/>10495<br/>10496<br/>10497<br/>10498<br/>10499<br/>10500<br/>10501<br/>10502<br/>10503<br/>10504<br/>10505<br/>10506<br/>10507<br/>10508<br/>10509<br/>10510<br/>10511<br/>10512<br/>10513<br/>10514<br/>10515<br/>10516<br/>10517<br/>10518<br/>10519<br/>10520<br/>10521<br/>10522<br/>10523<br/>10524<br/>10525<br/>10526<br/>10527<br/>10528<br/>10529<br/>10530<br/>10531<br/>10532<br/>10533<br/>10534<br/>10535<br/>10536<br/>10537<br/>10538<br/>10539<br/>10540<br/>10541<br/>10542<br/>10543<br/>10544<br/>10545<br/>10546<br/>10547<br/>10548<br/>10549<br/>10550<br/>10551<br/>10552<br/>10553<br/>10554<br/>10555<br/>10556<br/>10557<br/>10558<br/>10559<br/>10560<br/>10561<br/>10562<br/>10563<br/>10564<br/>10565<br/>10566<br/>10567<br/>10568<br/>10569<br/>10570<br/>10571<br/>10572<br/>10573<br/>10574<br/>10575<br/>10576<br/>10577<br/>10578<br/>10579<br/>10580<br/>10581<br/>10582<br/>10583<br/>10584<br/>10585<br/>10586<br/>10587<br/>10588<br/>10589<br/>10590<br/>10591<br/>10592<br/>10593<br/>10594<br/>10595<br/>10596<br/>10597<br/>10598<br/>10599<br/>10600<br/>10601<br/>10602<br/>10603<br/>10604<br/>10605<br/>10606<br/>10607<br/>10608<br/>10609<br/>10610<br/>10611<br/>10612<br/>10613<br/>10614<br/>10615<br/>10616<br/>10617<br/>10618<br/>10619<br/>10620<br/>10621<br/>10622<br/>10623<br/>10624<br/>10625<br/>10626<br/>10627<br/>10628<br/>10629<br/>10630<br/>10631<br/>10632<br/>10633<br/>10634<br/>10635<br/>10636<br/>10637<br/>10638<br/>10639<br/>10640<br/>10641<br/>10642<br/>10643<br/>10644<br/>10645<br/>10646<br/>10647<br/>10648<br/>10649<br/>10650<br/>10651<br/>10652<br/>10653<br/>10654<br/>10655<br/>10656<br/>10657<br/>10658<br/>10659<br/>10660<br/>10661<br/>10662<br/>10663<br/>10664<br/>10665<br/>10666<br/>10667<br/>10668<br/>10669<br/>10670<br/>10671<br/>10672<br/>10673<br/>10674<br/>10675<br/>10676<br/>10677<br/>10678<br/>10679<br/>10680<br/>10681<br/>10682<br/>10683<br/>10684<br/>10685<br/>10686<br/>10687<br/>10688<br/>10689<br/>10690<br/>10691<br/>10692<br/>10693<br/>10694<br/>10695<br/>10696<br/>10697<br/>10698<br/>10699<br/>10700<br/>10701<br/>10702<br/>10703<br/>10704<br/>10705<br/>10706<br/>10707<br/>10708<br/>10709<br/>10710<br/>10711<br/>10712<br/>10713<br/>10714<br/>10715<br/>10716<br/>10717<br/>10718<br/>10719<br/>10720<br/>10721<br/>10722<br/>10723<br/>10724<br/>10725<br/>10726<br/>10727<br/>10728<br/>10729<br/>10730<br/>10731<br/>10732<br/>10733<br/>10734<br/>10735<br/>10736<br/>10737<br/>10738<br/>10739<br/>10740<br/>10741<br/>10742<br/>10743<br/>10744<br/>10745<br/>10746<br/>10747<br/>10748<br/>10749<br/>10750<br/>10751<br/>10752<br/>10753<br/>10754<br/>10755<br/>10756<br/>10757<br/>10758<br/>10759<br/>10760<br/>10761<br/>10762<br/>10763<br/>10764<br/>10765<br/>10766<br/>10767<br/>10768<br/>10769<br/>10770<br/>10771<br/>10772<br/>10773<br/>10774<br/>10775<br/>10776<br/>10777<br/>10778<br/>10779<br/>10780<br/>10781<br/>10782<br/>10783<br/>10784<br/>10785<br/>10786<br/>10787<br/>10788<br/>10789<br/>10790<br/>10791<br/>10792<br/>10793<br/>10794<br/>10795<br/>10796<br/>10797<br/>10798<br/>10799<br/>10800<br/>10801<br/>10802<br/>10803<br/>10804<br/>10805<br/>10806<br/>10807<br/>10808<br/>10809<br/>10810<br/>10811<br/>10812<br/>10813<br/>10814<br/>10815<br/>10816<br/>10817<br/>10818<br/>10819<br/>10820<br/>10821<br/>10822<br/>10823<br/>10824<br/>10825<br/>10826<br/>10827<br/>10828<br/>10829<br/>10830<br/>10831<br/>10832<br/>10833<br/>10834<br/>10835<br/>10836<br/>10837<br/>10838<br/>10839<br/>10840<br/>10841<br/>10842<br/>10843<br/>10844<br/>10845<br/>10846<br/>10847<br/>10848<br/>10849<br/>10850<br/>10851<br/>10852<br/>10853<br/>10854<br/>10855<br/>10856<br/>10857<br/>10858<br/>10859<br/>10860<br/>10861<br/>10862<br/>10863<br/>10864<br/>10865<br/>10866<br/>10867<br/>10868<br/>10869<br/>10870<br/>10871<br/>10872<br/>10873<br/>10874<br/>10875<br/>10876<br/>10877<br/>10878<br/>10879<br/>10880<br/>10881<br/>10882<br/>10883<br/>10884<br/>10885<br/>10886<br/>10887<br/>10888<br/>10889<br/>10890<br/>10891<br/>10892<br/>10893<br/>10894<br/>10895<br/>10896<br/>10897<br/>10898<br/>10899<br/>10900<br/>10901<br/>10902<br/>10903<br/>10904<br/>10905<br/>10906<br/>10907<br/>10908<br/>10909<br/>10910<br/>10911<br/>10912<br/>10913<br/>10914<br/>10915<br/>10916<br/>10917<br/>10918<br/>10919<br/>10920<br/>10921<br/>10922<br/>10923<br/>10924<br/>10925<br/>10926<br/>10927<br/>10928<br/>10929<br/>10930<br/>10931<br/>10932<br/>10933<br/>10934<br/>10935<br/>10936<br/>10937<br/>10938<br/>10939<br/>10940<br/>10941<br/>10942<br/>10943<br/>10944<br/>10945<br/>10946<br/>10947<br/>10948<br/>10949<br/>10950<br/>10951<br/>10952<br/>10953<br/>10954<br/>10955<br/>10956<br/>10957<br/>10958<br/>10959<br/>10960<br/>10961<br/>10962<br/>10963<br/>10964<br/>10965<br/>10966<br/>10967<br/>10968<br/>10969<br/>10970<br/>10971<br/>10972<br/>10973<br/>10974<br/>10975<br/>10976<br/>10977<br/>10978<br/>10979<br/>10980<br/>10981<br/>10982<br/>10983<br/>10984<br/>10985<br/>10986<br/>10987<br/>10988<br/>10989<br/>10990<br/>10991<br/>10992<br/>10993<br/>10994<br/>10995<br/>10996<br/>10997<br/>10998<br/>10999<br/>11000<br/>11001<br/>11002<br/>11003<br/>11004<br/>11005<br/>11006<br/>11007<br/>11008<br/>11009<br/>11010<br/>11011<br/>11012<br/>11013<br/>11014<br/>11015<br/>11016<br/>11017<br/>11018<br/>11019<br/>11020<br/>11021<br/>11022<br/>11023<br/>11024<br/>11025<br/>11026<br/>11027<br/>11028<br/>11029<br/>11030<br/>11031<br/>11032<br/>11033<br/>11034<br/>11035<br/>11036<br/>11037<br/>11038<br/>11039<br/>11040<br/>11041<br/>11042<br/>11043<br/>11044<br/>11045<br/>11046<br/>11047<br/>11048<br/>11049<br/>11050<br/>11051<br/>11052<br/>11053<br/>11054<br/>11055<br/>11056<br/>11057<br/>11058<br/>11059<br/>11060<br/>11061<br/>11062<br/>11063<br/>11064<br/>11065<br/>11066<br/>11067<br/>11068<br/>11069<br/>11070<br/>11071<br/>11072<br/>11073<br/>11074<br/>11075<br/>11076<br/>11077<br/>11078<br/>11079<br/>11080<br/>11081<br/>11082<br/>11083<br/>11084<br/>11085<br/>11086<br/>11087<br/>11088<br/>11089<br/>11090<br/>11091<br/>11092<br/>11093<br/>11094<br/>11095<br/>11096<br/>11097<br/>11098<br/>11099<br/>11100<br/>11101<br/>11102<br/>11103<br/>11104<br/>11105<br/>11106<br/>11107<br/>11108<br/>11109<br/>11110<br/>11111<br/>11112<br/>11113<br/>11114<br/>11115<br/>11116<br/>11117<br/>11118<br/>11119<br/>11120<br/>11121<br/>11122<br/>11123<br/>11124<br/>11125<br/>11126<br/>11127<br/>11128<br/>11129<br/>11130<br/>11131<br/>11132<br/>11133<br/>11134<br/>11135<br/>11136<br/>11137<br/>11138<br/>11139<br/>11140<br/>11141<br/>11142<br/>11143<br/>11144<br/>11145<br/>11146<br/>11147<br/>11148<br/>11149<br/>11150<br/>11151<br/>11152<br/>11153<br/>11154<br/>11155<br/>11156<br/>11157<br/>11158<br/>11159<br/>11160<br/>11161<br/>11162<br/>11163<br/>11164<br/>11165<br/>11166<br/>11167<br/>11168<br/>11169<br/>11170<br/>11171<br/>11172<br/>11173<br/>11174<br/>11175<br/>11176<br/>11177<br/>11178<br/>11179<br/>11180<br/>11181<br/>11182<br/>11183<br/>11184<br/>11185<br/>11186<br/>11187<br/>11188<br/>11189<br/>11190<br/>11191<br/>11192<br/>11193<br/>11194<br/>11195<br/>11196<br/>11197<br/>11198<br/>11199<br/>11200<br/>11201<br/>11202<br/>11203<br/>11204<br/>11205<br/>11206<br/>11207<br/>11208<br/>11209<br/>11210<br/>11211<br/>11212<br/>11213<br/>11214<br/>11215<br/>11216<br/>11217<br/>11218<br/>11219<br/>11220<br/>11221<br/>11222<br/>11223<br/>11224<br/>11225<br/>11226<br/>11227<br/>11228<br/>11229<br/>11230<br/>11231<br/>11232<br/>11233<br/>11234<br/>11235<br/>11236<br/>11237<br/>11238<br/>11239<br/>11240<br/>11241<br/>11242<br/>11243<br/>11244<br/>11245<br/>11246<br/>11247<br/>11248<br/>11249<br/>11250<br/>11251<br/>11252<br/>11253<br/>11254<br/>11255<br/>11256<br/>11257<br/>11258<br/>11259<br/>11260<br/>11261<br/>11262<br/>11263<br/>11264<br/>11265<br/>11266<br/>11267<br/>11268<br/>11269<br/>11270<br/>11271<br/>11272<br/>11273<br/>11274<br/>11275<br/>11276<br/>11277<br/>11278<br/>11279<br/>11280<br/>11281<br/>11282<br/>11283<br/>11284<br/>11285<br/>11286<br/>11287<br/>11288<br/>11289<br/>11290<br/>11291<br/>11292<br/>11293<br/>11294<br/>11295<br/>11296<br/>11297<br/>11298<br/>11299<br/>11300<br/>11301<br/>11302<br/>11303<br/>11304<br/>11305<br/>11306<br/>11307<br/>11308<br/>11309<br/>11310<br/>11311<br/>11312<br/>11313<br/>11314<br/>11315<br/>11316<br/>11317<br/>11318<br/>11319<br/>11320<br/>11321<br/>11322<br/>11323<br/>11324<br/>11325<br/>11326<br/>11327<br/>11328<br/>11329<br/>11330<br/>11331<br/>11332<br/>11333<br/>11334<br/>11335<br/>11336<br/>11337<br/>11338<br/>11339<br/>11340<br/>11341<br/>11342<br/>11343<br/>11344<br/>11345<br/>11346<br/>11347<br/>11348<br/>11349<br/>11350<br/>11351<br/>11352<br/>11353<br/>11354<br/>11355<br/>11356<br/>11357<br/>11358<br/>11359<br/>11360<br/>11361<br/>11362<br/>11363<br/>11364<br/>11365<br/>11366<br/>11367<br/>11368<br/>11369<br/>11370<br/>11371<br/>11372<br/>11373<br/>11374<br/>11375<br/>11376<br/>11377<br/>11378<br/>11379<br/>11380<br/>11381<br/>11382<br/>11383<br/>11384<br/>11385<br/>11386<br/>11387<br/>11388<br/>11389<br/>11390<br/>11391<br/>11392<br/>11393<br/>11394<br/>11395<br/>11396<br/>11397<br/>11398<br/>11399<br/>11400<br/>11401<br/>11402<br/>11403<br/>11404<br/>11405<br/>11406<br/>11407<br/>11408<br/>11409<br/>11410<br/>11411<br/>11412<br/>11413<br/>11414<br/>11415<br/>11416<br/>11417<br/>11418<br/>11419<br/>11420<br/>11421<br/>11422<br/>11423<br/>11424<br/>11425<br/>11426<br/>11427<br/>11428<br/>11429<br/>11430<br/>11431<br/>11432<br/>11433<br/>11434<br/>11435<br/>11436<br/>11437<br/>11438<br/>11439<br/>11440<br/>11441<br/>11442<br/>11443<br/>11444<br/>11445<br/>11446<br/>11447<br/>11448<br/>11449<br/>11450<br/>11451<br/>11452<br/>11453<br/>11454<br/>11455<br/>11456<br/>11457<br/>11458<br/>11459<br/>11460<br/>11461<br/>11462<br/>11463<br/>11464<br/>11465<br/>11466<br/>11467<br/>11468<br/>11469<br/>11470<br/>11471<br/>11472<br/>11473<br/>11474<br/>11475<br/>11476<br/>11477<br/>11478<br/>11479<br/>11480<br/>11481<br/>11482<br/>11483<br/>11484<br/>11485<br/>11486<br/>11487<br/>11488<br/>11489<br/>11490<br/>11491<br/>11492<br/>11493<br/>11494<br/>11495<br/>11496<br/>11497<br/>11498<br/>11499<br/>11500<br/>11501<br/>11502<br/>11503<br/>11504<br/>11505<br/>11506<br/>11507<br/>11508<br/>11509<br/>11510<br/>11511<br/>11512<br/>11513<br/>11514<br/>11515<br/>11516<br/>11517<br/>11518<br/>11519<br/>11520<br/>11521<br/>11522<br/>11523<br/>11524<br/>11525<br/>11526<br/>11527<br/>11528<br/>11529<br/>11530<br/>11531<br/>11532<br/>11533<br/>11534<br/>11535<br/>11536<br/>11537<br/>11538<br/>11539<br/>11540<br/>11541<br/>11542<br/>11543<br/>11544<br/>11545<br/>11546<br/>11547<br/>11548<br/>11549<br/>11550<br/>11551<br/>11552<br/>11553<br/>11554<br/>11555<br/>11556<br/>11557<br/>11558<br/>11559<br/>11560<br/>11561<br/>11562<br/>11563<br/>11564<br/>11565<br/>11566<br/>11567<br/>11568<br/>11569<br/>11570<br/>11571<br/>11572<br/>11573<br/>11574<br/>11575<br/>11576<br/>11577<br/>11578<br/>11579<br/>11580<br/>11581<br/>11582<br/>11583<br/>11584<br/>11585<br/>11586<br/>11587<br/>11588<br/>11589<br/>11590<br/>11591<br/>11592<br/>11593<br/>11594<br/>11595<br/>11596<br/>11597<br/>11598<br/>11599<br/>11600<br/>11601<br/>11602<br/>11603<br/>11604<br/>11605<br/>11606<br/>11607<br/>11608<br/>11609<br/>11610<br/>11611<br/>11612<br/>11613<br/>11614<br/>11615<br/>11616<br/>11617<br/>11618<br/>11619<br/>11620<br/>11621<br/>11622<br/>11623<br/>11624<br/>11625<br/>11626<br/>11627<br/>11628<br/>11629<br/>11630<br/>11631<br/>11632<br/>11633<br/>11634<br/>11635<br/>11636<br/>11637<br/>11638<br/>11639<br/>11640<br/>11641<br/>11642<br/>11643<br/>11644<br/>11645<br/>11646<br/>11647<br/>11648<br/>11649<br/>11650<br/>11651<br/>11652<br/>11653<br/>11654<br/>11655<br/>11656<br/>11657<br/>11658<br/>11659<br/>11660<br/>11661<br/>11662<br/>11663<br/>11664<br/>11665<br/>11666<br/>11667<br/>11668<br/>11669<br/>11670<br/>11671<br/>11672<br/>11673<br/>11674<br/>11675<br/>11676<br/>11677<br/>11678<br/>11679<br/>11680<br/>11681<br/>11682<br/>11683<br/>11684<br/>11685<br/>11686<br/>11687<br/>11688<br/>11689<br/>11690<br/>11691<br/>11692<br/>11693<br/>11694<br/>11695<br/>11696<br/>11697<br/>11698<br/>11699<br/>11700<br/>11701<br/>11702<br/>11703<br/>11704<br/>11705<br/>11706<br/>11707<br/>11708<br/>11709<br/>11710<br/>11711<br/>11712<br/>11713<br/>11714<br/>11715<br/>11716<br/>11717<br/>11718<br/>11719<br/>11720<br/>11721<br/>11722<br/>11723<br/>11724<br/>11725<br/>11726<br/>11727<br/>11728<br/>11729<br/>11730<br/>11731<br/>11732<br/>11733<br/>11734<br/>11735<br/>11736<br/>11737<br/>11738<br/>11739<br/>11740<br/>11741<br/>11742<br/>11743<br/>11744<br/>11745<br/>11746<br/>11747<br/>11748<br/>11749<br/>11750<br/>11751<br/>11752<br/>11753<br/>11754<br/>11755<br/>11756<br/>11757<br/>11758<br/>11759<br/>11760<br/>11761<br/>11762<br/>11763<br/>11764<br/>11765<br/>11766<br/>11767<br/>11768<br/>11769<br/>11770<br/>11771<br/>11772<br/>11773<br/>11774<br/>11775<br/>11776<br/>11777<br/>11778<br/>11779<br/>11780<br/>11781<br/>11782<br/>11783<br/>11784<br/>11785<br/>11786<br/>11787<br/>11788<br/>11789<br/>11790<br/>11791<br/>11792<br/>11793<br/>11794<br/>11795<br/>11796<br/>11797<br/>11798<br/>11799<br/>11800<br/>11801<br/>11802<br/>11803<br/>11804<br/>11805<br/>11806<br/>11807<br/>11808<br/>11809<br/>11810<br/>11811<br/>11812<br/>11813<br/>11814<br/>11815<br/>11816<br/>11817<br/>11818<br/>11819<br/>11820<br/>11821<br/>11822<br/>11823<br/>11824<br/>11825<br/>11826<br/>11827<br/>11828<br/>11829<br/>11830<br/>11831<br/>11832<br/>11833<br/>11834<br/>11835<br/>11836<br/>11837<br/>11838<br/>11839<br/>11840<br/>11841<br/>11842<br/>11843<br/>11844<br/>11845<br/>11846<br/>11847<br/>11848<br/>11849<br/>11850<br/>11851<br/>11852<br/>11853<br/>11854<br/>11855<br/>11856<br/>11857<br/>11858<br/>11859<br/>11860<br/>11861<br/>11862<br/>11863<br/>11864<br/>11865<br/>11866<br/>11867<br/>11868<br/>11869<br/>11870<br/>11871<br/>11872<br/>11873<br/>11874<br/>11875<br/>11876<br/>11877<br/>11878<br/>11879<br/>11880<br/>11881<br/>11882<br/>11883<br/>11884<br/>11885<br/>11886<br/>11887<br/>11888<br/>11889<br/>11890<br/>11891<br/>11892<br/>11893<br/>11894<br/>11895<br/>11896<br/>11897<br/>11898<br/>11899<br/>11900<br/>11901<br/>11902<br/>11903<br/>11904<br/>11905<br/>11906<br/>11907<br/>11908<br/>11909<br/>11910<br/>11911<br/>11912<br/>11913<br/>11914<br/>11915<br/>11916<br/>11917<br/>11918<br/>11919<br/>11920<br/>11921<br/>11922<br/>11923<br/>11924<br/>11925<br/>11926<br/>11927<br/>11928<br/>11929<br/>11930<br/>11931<br/>11932<br/>11933<br/>11934<br/>11935<br/>11936<br/>11937<br/>11938<br/>11939<br/>11940<br/>11941<br/>11942<br/>11943<br/>11944<br/>11945<br/>11946<br/>11947<br/>11948<br/>11949<br/>11950<br/>11951<br/>11952<br/>11953<br/>11954<br/>11955<br/>11956<br/>11957<br/>11958<br/>11959<br/>11960<br/>11961<br/>11962<br/>11963<br/>11964<br/>11965<br/>11966<br/>11967<br/>11968<br/>11969<br/>11970<br/>11971<br/>11972<br/>11973<br/>11974<br/>11975<br/>11976<br/>11977<br/>11978<br/>11979<br/>11980<br/>11981<br/>11982<br/>11983<br/>11984<br/>11985<br/>11986<br/>11987<br/>11988<br/>11989<br/>11990<br/>11991<br/>11992<br/>11993<br/>11994<br/>11995<br/>11996<br/>11997<br/>11998<br/>11999<br/>12000<br/>12001<br/>12002<br/>12003<br/>12004<br/>12005<br/>12006<br/>12007<br/>12008<br/>12009<br/>12010<br/>12011<br/>12012<br/>12013<br/>12014<br/>12015<br/>12016<br/>12017<br/>12018<br/>12019<br/>12020<br/>12021<br/>12022<br/>12023<br/>12024<br/>12025<br/>12026<br/>12027<br/>12028<br/>12029<br/>12030<br/>12031<br/>12032<br/>12033<br/>12034<br/>12035<br/>12036<br/>12037<br/>12038<br/>12039<br/>12040<br/>12041<br/>12042<br/>12043<br/>12044<br/>12045<br/>12046<br/>12047<br/>12048<br/>12049<br/>12050<br/>12051<br/>12052<br/>12053<br/>12054<br/>12055<br/>12056<br/>12057<br/>12058<br/>12059<br/>12060<br/>12061<br/>12062<br/>12063<br/>12064<br/>12065<br/>12066<br/>12067<br/>12068<br/>12069<br/>12070<br/>12071<br/>12072<br/>12073<br/>12074<br/>12075<br/>12076<br/>12077<br/>12078<br/>12079<br/>12080<br/>12081<br/>12082<br/>12083<br/>12084<br/>12085<br/>12086<br/>12087<br/>12088<br/>12089<br/>12090<br/>12091<br/>12092<br/>12093<br/>12094<br/>12095<br/>12096<br/>12097<br/>12098<br/>12099<br/>12100<br/>12101<br/>12102<br/>12103<br/>12104<br/>12105<br/>12106<br/>12107<br/>12108<br/>12109<br/>12110<br/>12111<br/>12112<br/>12113<br/>12114<br/>12115<br/>12116<br/>12117<br/>12118<br/>12119<br/>12120<br/>12121<br/>12122<br/>12123<br/>12124<br/>12125<br/>12126<br/>12127<br/>12128<br/>12129<br/>12130<br/>12131<br/>12132<br/>12133<br/>12134<br/>12135<br/>12136<br/>12137<br/>12138<br/>12139<br/>12140<br/>12141<br/>12142<br/>12143<br/>12144<br/>12145<br/>12146<br/>12147<br/>12148<br/>12149<br/>12150<br/>12151<br/>12152<br/>12153<br/>12154<br/>12155<br/>12156<br/>12157<br/>12158<br/>12159<br/>12160<br/>12161<br/>12162<br/>12163<br/>12164<br/>12165<br/>12166<br/>12167<br/>12168<br/>12169<br/>12170<br/>12171<br/>12172<br/>12173<br/>12174<br/>12175<br/>12176<br/>12177<br/>12178<br/>12179<br/>12180<br/>12181<br/>12182<br/>12183<br/>12184<br/>12185<br/>12186<br/>12187<br/>12188<br/>12189<br/>12190<br/>12191<br/>12192<br/>12193<br/>12194<br/>12195<br/>12196<br/>12197<br/>12198<br/>12199<br/>12200<br/>12201<br/>12202<br/>12203<br/>12204<br/>12205<br/>12206<br/></code></pre></td>
<td class=""source""><pre><code><cite>// arrays example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> foo [] = {16, 2, 77, 40, 12071};
<var>int</var> n, result=0;

<var>int</var> main ()
{
  <var>for</var> ( n=0 ; n&lt;5 ; ++n )
  {
    result += foo[n];
  }
  cout &lt;&lt; result;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>12206</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""multidimensional"">
<h3>Multidimensional arrays</h3>
Multidimensional arrays can be described as ""arrays of arrays"". For example, a bidimensional array can be imagined as a two-dimensional table made of elements, all of them of a same uniform data type.<br/>
<br/>
<img alt="""" src=""bidimensional_arrays1.png""/>
<br/>
<code>jimmy</code> represents a bidimensional array of 3 per 5 elements of type <code>int</code>. The C++ syntax for this is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> jimmy [3][5];</code></pre></td>
</tr></tbody></table></div>
<br/>
and, for example, the way to reference the second element vertically and fourth horizontally in an expression would be: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>jimmy[1][3]</code></pre></td>
</tr></tbody></table></div>
<br/>
<img alt="""" src=""bidimensional_arrays2.png""/>
<br/>
(remember that array indices always begin with zero).<br/>
<br/>
Multidimensional arrays are not limited to two indices (i.e., two dimensions). They can contain as many indices as needed. Although be careful: the amount of memory needed for an array increases exponentially with each dimension. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>char</var> century [100][365][24][60][60];</code></pre></td>
</tr></tbody></table></div>
<br/>
declares an array with an element of type <code>char</code> for each second in a century. This amounts to more than 3 billion <code>char</code>! So this declaration would consume more than 3 gigabytes of memory!<br/>
<br/>
At the end, multidimensional arrays are just an abstraction for programmers, since the same results can be achieved with a simple array, by multiplying its indices:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> jimmy [3][5];   <cite>// is equivalent to</cite>
<var>int</var> jimmy [15];     <cite>// (3 * 5 = 15)  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
With the only difference that with multidimensional arrays, the compiler automatically remembers the depth of each imaginary dimension. The following two pieces of code produce the exact same result, but one uses a bidimensional array while the other uses a simple array: <br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>multidimensional array</th><th>pseudo-multidimensional array</th></tr>
<tr><td><code><pre>#define WIDTH 5<br/>
#define HEIGHT 3<br/>
<br/>
int jimmy [HEIGHT][WIDTH];<br/>
int n,m;<br/>
<br/>
int main ()<br/>
{<br/>
  for (n=0; n
HEIGHT; n++)<br/>
    for (m=0; m
WIDTH; m++)<br/>
    {<br/>
      jimmy[n][m]=(n+1)*(m+1);<br/>
    }<br/>
}</pre></code></td>
<td><code><pre>#define WIDTH 5<br/>
#define HEIGHT 3<br/>
<br/>
int jimmy [HEIGHT * WIDTH];<br/>
int n,m;<br/>
<br/>
int main ()<br/>
{<br/>
  for (n=0; n
HEIGHT; n++)<br/>
    for (m=0; m
WIDTH; m++)<br/>
    {<br/>
      jimmy[n*WIDTH+m]=(n+1)*(m+1);<br/>
    }<br/>
}</pre></code></td></tr>
</tbody></table>
<br/>
None of the two code snippets above produce any output on the screen, but both assign values to the memory block called jimmy in the following way: <br/>
<br/>
<img alt="""" src=""bidimensional_arrays3.png""/>
<br/>
Note that the code uses defined constants for the width and height, instead of using directly their numerical values. This gives the code a better readability, and allows changes in the code to be made easily in one place.<br/>
</section>
<br/>
<section id=""arrayparameters"">
<h3>Arrays as parameters</h3>
At some point, we may need to pass an array to a function as a parameter. In C++, it is not possible to pass the entire block of memory represented by an array to a function directly as an argument. But what can be passed instead is its address. In practice, this has almost the same effect, and it is a much faster and more efficient operation.<br/>
<br/>
To accept an array as parameter for a function, the parameters can be declared as the array type, but with empty brackets, omitting the actual size of the array. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> procedure (<var>int</var> arg[])</code></pre></td>
</tr></tbody></table></div>
<br/>
This function accepts a parameter of type ""array of <code>int</code>"" called <code>arg</code>. In order to pass to this function an array declared as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myarray [40];</code></pre></td>
</tr></tbody></table></div>
<br/>
it would be enough to write a call like this:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>procedure (myarray);</code></pre></td>
</tr></tbody></table></div>
<br/>
Here you have a complete example: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// arrays as parameters</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> printarray (<var>int</var> arg[], <var>int</var> length) {
  <var>for</var> (<var>int</var> n=0; n&lt;length; ++n)
    cout &lt;&lt; arg[n] &lt;&lt; <kbd>' '</kbd>;
  cout &lt;&lt; <kbd>'\n'</kbd>;
}

<var>int</var> main ()
{
  <var>int</var> firstarray[] = {5, 10, 15};
  <var>int</var> secondarray[] = {2, 4, 6, 8, 10};
  printarray (firstarray,3);
  printarray (secondarray,5);
}</code></pre></td>
<td class=""output""><pre><samp>5 10 15
2 4 6 8 10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In the code above, the first parameter (<code>int arg[]</code>) accepts any array whose elements are of type <code>int</code>, whatever its length. For that reason, we have included a second parameter that tells the function the length of each array that we pass to it as its first parameter. This allows the for loop that prints out the array to know the range to iterate in the array passed, without going out of range.<br/>
<br/>
In a function declaration, it is also possible to include multidimensional arrays. The format for a tridimensional array parameter is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>base_type[][depth][depth]</code></pre></td>
</tr></tbody></table></div>
<br/>
For example, a function with a multidimensional array as argument could be: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> procedure (<var>int</var> myarray[][3][4])</code></pre></td>
</tr></tbody></table></div>
<br/>
Notice that the first brackets <code>[]</code> are left empty, while the following ones specify sizes for their respective dimensions. This is necessary in order for the compiler to be able to determine the depth of each additional dimension.<br/>
<br/>
In a way, passing an array as argument always loses a dimension. The reason behind is that, for historical reasons, arrays cannot be directly copied, and thus what is really passed is a pointer. This is a common source of errors for novice programmers. Although a clear understanding of pointers, explained in a coming chapter, helps a lot.<br/>
</section>
<br/>
<section id=""libraryarrays"">
<h3>Library arrays</h3>
The arrays explained above are directly implemented as a language feature, inherited from the C language. They are a great feature, but by restricting its copy and easily decay into pointers, they probably suffer from an excess of optimization.<br/>
<br/>
To overcome some of these issues with language built-in arrays, C++ provides an alternative array type as a standard container. It is a type template (a class template, in fact) defined in header <code><a href=""/&lt;array&gt;"">&lt;array&gt;</a></code>.<br/>
<br/>
Containers are a library feature that falls out of the scope of this tutorial, and thus the class will not be explained in detail here. Suffice it to say that they operate in a similar way to built-in arrays, except that they allow being copied (an actually expensive operation that copies the entire block of memory, and thus to use with care) and decay into pointers only when explicitly told to do so (by means of its member <code>data</code>).<br/>
<br/>
Just as an example, these are two versions of the same example using the language built-in array described in this chapter, and the container in the library:<br/>
<br/>
<table class=""boxed""><tbody><tr><th>language built-in array</th><th>container library array</th></tr>
<tr><td><code><pre>#include 
iostream&gt;<br/>
<br/>
using namespace std;<br/>
<br/>
int main()<br/>
{<br/>
  int myarray[3] = {10,20,30};<br/>
<br/>
  for (int i=0; i
3; ++i)<br/>
    ++myarray[i];<br/>
<br/>
  for (int elem : myarray)<br/>
    cout 

 elem 

 '\n';<br/>
}</pre></code></td>
<td><code><pre>#include 
iostream&gt;<br/>
#include 
array&gt;<br/>
using namespace std;<br/>
<br/>
int main()<br/>
{<br/>
  array
int,3&gt; myarray {10,20,30};<br/>
<br/>
  for (int i=0; i
myarray.size(); ++i)<br/>
    ++myarray[i];<br/>
<br/>
  for (int elem : myarray)<br/>
    cout 

 elem 

 '\n';<br/>
}<br/>
</pre></code></td></tr>
</tbody></table>
<br/>
As you can see, both kinds of arrays use the same syntax to access its elements: <code>myarray[i]</code>. Other than that, the main differences lay on the declaration of the array, and the inclusion of an additional header for the <i>library array</i>. Notice also how it is easy to access the size of the <i>library array</i>.<br/>
</section></div>"
Compound data types,Character sequences,"<div class=""C_doc""><h1>Character sequences</h1>
<section id=""intro"">
The <code>string</code> class has been briefly introduced in an earlier chapter. It is a very powerful class to handle and manipulate strings of characters. However, because strings are, in fact, sequences of characters, we can represent them also as plain arrays of elements of a character type.<br/>
<br/>
For example, the following array:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>char</var> foo [20];</code></pre></td>
</tr></tbody></table></div>
<br/>
is an array that can store up to 20 elements of type <code>char</code>. It can be represented as:<br/>
<br/>
<img alt="""" src=""c_strings1.png""/>
<br/>
Therefore, this array has a capacity to store sequences of up to 20 characters. But this capacity does not need to be fully exhausted: the array can also accommodate shorter sequences. For example, at some point in a program, either the sequence <code>""Hello""</code> or the sequence <code>""Merry Christmas""</code> can be stored in <code>foo</code>, since both would fit in a sequence with a capacity for 20 characters.<br/>
<br/>
By convention, the end of strings represented in character sequences is signaled by a special character: the <i>null character</i>, whose literal value can be written as <code>'\0'</code> (backslash, zero).<br/>
<br/>
In this case, the array of 20 elements of type <code>char</code> called <code>foo</code> can be represented storing the character sequences <code>""Hello""</code> and <code>""Merry Christmas""</code> as:<br/>
<br/>
<img alt="""" src=""c_strings2.png""/>
<br/>
Notice how after the content of the string itself, a null character (<code>'\0'</code>) has been added in order to indicate the end of the sequence. The panels in gray color represent <code>char</code> elements with undetermined values.<br/>
</section>
<br/>
<section id=""initialization"">
<h3>Initialization of null-terminated character sequences</h3>
Because arrays of characters are ordinary arrays, they follow the same rules as these. For example, to initialize an array of characters with some predetermined sequence of characters, we can do it just like any other array: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>char</var> myword[] = { <kbd>'H'</kbd>, <kbd>'e'</kbd>, <kbd>'l'</kbd>, <kbd>'l'</kbd>, <kbd>'o'</kbd>, <kbd>'\0'</kbd> };</code></pre></td>
</tr></tbody></table></div>
<br/>
The above declares an array of 6 elements of type <code>char</code> initialized with the characters that form the word <code>""Hello""</code> plus a <i>null character</i> <code>'\0'</code> at the end.<br/>
<br/>
But arrays of character elements have another way to be initialized: using <i>string literals</i> directly.<br/>
<br/>
In the expressions used in some examples in previous chapters, string literals have already shown up several times. These are specified by enclosing the </section></div>"
Compound data types,Pointers,"<div class=""C_doc""><h1>Pointers</h1>
<section id=""description"">
In earlier chapters, variables have been explained as locations in the computer's memory which can be accessed by their identifier (their name). This way, the program does not need to care about the physical address of the data in memory; it simply uses the identifier whenever it needs to refer to the variable.<br/>
<br/>
For a C++ program, the memory of a computer is like a succession of memory cells, each one byte in size, and each with a unique address. These single-byte memory cells are ordered in a way that allows data representations larger than one byte to occupy memory cells that have consecutive addresses.<br/>
<br/>
This way, each cell can be easily located in the memory by means of its unique address. For example, the memory cell with the address <code>1776</code> always follows immediately after the cell with address <code>1775</code> and precedes the one with <code>1777</code>, and is exactly one thousand cells after <code>776</code> and exactly one thousand cells before <code>2776</code>.<br/>
<br/>
When a variable is declared, the memory needed to store its value is assigned a specific location in memory (its memory address). Generally, C++ programs do not actively decide the exact memory addresses where its variables are stored. Fortunately, that task is left to the environment where the program is run - generally, an operating system that decides the particular memory locations on runtime. However, it may be useful for a program to be able to obtain the address of a variable during runtime in order to access data cells that are at a certain position relative to it.<br/>
</section>
<br/>
<section id=""reference"">
<h3>Address-of operator (&amp;)</h3>
The address of a variable can be obtained by preceding the name of a variable with an ampersand sign (<code>&amp;</code>), known as <i>address-of operator</i>. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>foo = &amp;myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
This would assign the address of variable <code>myvar</code> to <code>foo</code>; by preceding the name of the variable <code>myvar</code> with the <i>address-of operator</i> (<code>&amp;</code>), we are no longer assigning the content of the variable itself to <code>foo</code>, but its address.<br/>
<br/>
The actual address of a variable in memory cannot be known before runtime, but let's assume, in order to help clarify some concepts, that <code>myvar</code> is placed during runtime in the memory address <code>1776</code>.<br/>
<br/>
In this case, consider the following code fragment:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>myvar = 25;
foo = &amp;myvar;
bar = myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
The values contained in each variable after the execution of this are shown in the following diagram: <br/>
<br/>
<img alt="""" src=""reference_operator.png""/> <br/>
<br/>
First, we have assigned the value <code>25</code> to <code>myvar</code> (a variable whose address in memory we assumed to be <code>1776</code>).<br/>
<br/>
The second statement assigns <code>foo</code> the address of <code>myvar</code>, which we have assumed to be <code>1776</code>.<br/>
<br/>
Finally, the third statement, assigns the value contained in <code>myvar</code> to <code>bar</code>. This is a standard assignment operation, as already done many times in earlier chapters.<br/>
<br/>
The main difference between the second and third statements is the appearance of the <i>address-of operator</i> (<code>&amp;</code>).<br/>
<br/>
The variable that stores the address of another variable (like <code>foo</code> in the previous example) is what in C++ is called a <i>pointer</i>. Pointers are a very powerful feature of the language that has many uses in lower level programming. A bit later, we will see how to declare and use pointers.<br/>
</section>
<br/>
<section id=""dereference"">
<h3>Dereference operator (*)</h3>
As just seen, a variable which stores the address of another variable is called a <i>pointer</i>. Pointers are said to ""point to"" the variable whose address they store.<br/>
<br/>
An interesting property of pointers is that they can be used to access the variable they point to directly. This is done by preceding the pointer name with the <i>dereference operator</i> (<code>*</code>). The operator itself can be read as ""value pointed to by"".<br/>
<br/>
Therefore, following with the values of the previous example, the following statement: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>baz = *foo;</code></pre></td>
</tr></tbody></table></div>
<br/>
This could be read as: ""<code>baz</code> equal to value pointed to by <code>foo</code>"", and the statement would actually assign the value <code>25</code> to <code>baz</code>, since <code>foo</code> is <code>1776</code>, and the value pointed to by <code>1776</code> (following the example above) would be <code>25</code>.<br/>
<br/>
<img alt="""" src=""dereference_operator.png""/>
<br/>
It is important to clearly differentiate that <code>foo</code> refers to the value <code>1776</code>, while <code>*foo</code> (with an asterisk <code>*</code> preceding the identifier) refers to the value stored at address <code>1776</code>, which in this case is <code>25</code>. Notice the difference of including or not including the <i>dereference operator</i> (I have added an explanatory comment of how each of these two expressions could be read): <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>baz = foo;   <cite>// baz equal to foo (1776)</cite>
baz = *foo;  <cite>// baz equal to value pointed to by foo (25)  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The reference and dereference operators are thus complementary:<br/>
<ul>
<li><code>&amp;</code> is the <i>address-of operator</i>, and can be read simply as ""address of""</li>
<li><code>*</code> is the <i>dereference operator</i>, and can be read as ""value pointed to by""</li>
</ul>
<br/>
Thus, they have sort of opposite meanings: An address obtained with <code>&amp;</code> can be dereferenced with <code>*</code>.<br/>
<br/>
Earlier, we performed the following two assignment operations:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>myvar = 25;
foo = &amp;myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
Right after these two statements, all of the following expressions would give true as result:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>myvar == 25
&amp;myvar == 1776
foo == 1776
*foo ==</code></pre></td>
</tr></tbody></table></div>
<br/>
The first expression is quite clear, considering that the assignment operation performed on <code>myvar</code> was <code>myvar=25</code>. The second one uses the address-of operator (<code>&amp;</code>), which returns the address of <code>myvar</code>, which we assumed it to have a value of <code>1776</code>. The third one is somewhat obvious, since the second expression was true and the assignment operation performed on <code>foo</code> was <code>foo=&amp;myvar</code>. The fourth expression uses the <i>dereference operator</i> (<code>*</code>) that can be read as ""value pointed to by"", and the value pointed to by <code>foo</code> is indeed <code>25</code>.<br/>
<br/>
So, after all that, you may also infer that for as long as the address pointed to by <code>foo</code> remains unchanged, the following expression will also be true: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>*foo ==</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""declaration"">
<h3>Declaring pointers</h3>
Due to the ability of a pointer to directly refer to the value that it points to, a pointer has different properties when it points to a <code>char</code> than when it points to an <code>int</code> or a <code>float</code>. Once dereferenced, the type needs to be known. And for that, the declaration of a pointer needs to include the data type the pointer is going to point to.<br/>
<br/>
The declaration of pointers follows this syntax:<br/>
<br/>
<code>type * name;</code> <br/>
<br/>
where <code>type</code> is the data type pointed to by the pointer. This type is not the type of the pointer itself, but the type of the data the pointer points to. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * number;
<var>char</var> * character;
<var>double</var> * decimals;</code></pre></td>
</tr></tbody></table></div>
<br/>
These are three declarations of pointers. Each one is intended to point to a different data type, but, in fact, all of them are pointers and all of them are likely going to occupy the same amount of space in memory (the size in memory of a pointer depends on the platform where the program runs). Nevertheless, the data to which they point to do not occupy the same amount of space nor are of the same type: the first one points to an <code>int</code>, the second one to a <code>char</code>, and the last one to a <code>double</code>. Therefore, although these three example variables are all of them pointers, they actually have different types: <code>int*</code>, <code>char*</code>, and <code>double*</code> respectively, depending on the type they point to.<br/>
<br/>
Note that the asterisk (<code>*</code>) used when declaring a pointer only means that it is a pointer (it is part of its type compound specifier), and should not be confused with the <i>dereference operator</i> seen a bit earlier, but which is also written with an asterisk (<code>*</code>). They are simply two different things represented with the same sign.<br/>
<br/>
Let's see an example on pointers:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// my first pointer</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> firstvalue, secondvalue;
  <var>int</var> * mypointer;

  mypointer = &amp;firstvalue;
  *mypointer = 10;
  mypointer = &amp;secondvalue;
  *mypointer = 20;
  cout &lt;&lt; <kbd>""firstvalue is ""</kbd> &lt;&lt; firstvalue &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""secondvalue is ""</kbd> &lt;&lt; secondvalue &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>firstvalue is 10
secondvalue is 20</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice that even though neither <code>firstvalue</code> nor <code>secondvalue</code> are directly set any value in the program, both end up with a value set indirectly through the use of <code>mypointer</code>. This is how it happens:<br/>
<br/>
First, <code>mypointer</code> is assigned the address of firstvalue using the address-of operator (<code>&amp;</code>). Then, the value pointed to by <code>mypointer</code> is assigned a value of <code>10</code>. Because, at this moment, <code>mypointer</code> is pointing to the memory location of <code>firstvalue</code>, this in fact modifies the value of <code>firstvalue</code>.<br/>
<br/>
In order to demonstrate that a pointer may point to different variables during its lifetime in a program, the example repeats the process with <code>secondvalue</code> and that same pointer, <code>mypointer</code>.<br/>
<br/>
Here is an example a little bit more elaborated:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// more pointers</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> firstvalue = 5, secondvalue = 15;
  <var>int</var> * p1, * p2;

  p1 = &amp;firstvalue;  <cite>// p1 = address of firstvalue</cite>
  p2 = &amp;secondvalue; <cite>// p2 = address of secondvalue</cite>
  *p1 = 10;          <cite>// value pointed to by p1 = 10</cite>
  *p2 = *p1;         <cite>// value pointed to by p2 = value pointed to by p1</cite>
  p1 = p2;           <cite>// p1 = p2 (value of pointer is copied)</cite>
  *p1 = 20;          <cite>// value pointed to by p1 = 20</cite>
  
  cout &lt;&lt; <kbd>""firstvalue is ""</kbd> &lt;&lt; firstvalue &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""secondvalue is ""</kbd> &lt;&lt; secondvalue &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>firstvalue is 10
secondvalue is 20</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Each assignment operation includes a comment on how each line could be read: i.e., replacing ampersands (<code>&amp;</code>) by ""address of"", and asterisks (<code>*</code>) by ""value pointed to by"".<br/>
<br/>
Notice that there are expressions with pointers <code>p1</code> and <code>p2</code>, both with and without the <i>dereference operator</i> (<code>*</code>). The meaning of an expression using the <i>dereference operator</i> (*) is very different from one that does not. When this operator precedes the pointer name, the expression refers to the value being pointed, while when a pointer name appears without this operator, it refers to the value of the pointer itself (i.e., the address of what the pointer is pointing to).<br/>
<br/>
Another thing that may call your attention is the line: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * p1, * p2;</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares the two pointers used in the previous example. But notice that there is an asterisk (<code>*</code>) for each pointer, in order for both to have type <code>int*</code> (pointer to <code>int</code>). This is required due to the precedence rules. Note that if, instead, the code was:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * p1, p2;</code></pre></td>
</tr></tbody></table></div>
<br/>
<code>p1</code> would indeed be of type <code>int*</code>, but <code>p2</code> would be of type <code>int</code>. Spaces do not matter at all for this purpose. But anyway, simply remembering to put one asterisk per pointer is enough for most pointer users interested in declaring multiple pointers per statement. Or even better: use a different statement for each variable.<br/>
</section>
<br/>
<section id=""arrays"">
<h3>Pointers and arrays</h3>
The concept of arrays is related to that of pointers. In fact, arrays work very much like pointers to their first elements, and, actually, an array can always be implicitly converted to the pointer of the proper type. For example, consider these two declarations:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myarray [20];
<var>int</var> * mypointer;</code></pre></td>
</tr></tbody></table></div>
<br/>
The following assignment operation would be valid: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>mypointer = myarray;</code></pre></td>
</tr></tbody></table></div>
<br/>
After that, <code>mypointer</code> and <code>myarray</code> would be equivalent and would have very similar properties. The main difference being that <code>mypointer</code> can be assigned a different address, whereas <code>myarray</code> can never be assigned anything, and will always represent the same block of 20 elements of type <code>int</code>. Therefore, the following assignment would not be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>myarray = mypointer;</code></pre></td>
</tr></tbody></table></div>
<br/>
Let's see an example that mixes arrays and pointers:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// more pointers</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> numbers[5];
  <var>int</var> * p;
  p = numbers;  *p = 10;
  p++;  *p = 20;
  p = &amp;numbers[2];  *p = 30;
  p = numbers + 3;  *p = 40;
  p = numbers;  *(p+4) = 50;
  <var>for</var> (<var>int</var> n=0; n&lt;5; n++)
    cout &lt;&lt; numbers[n] &lt;&lt; <kbd>"", ""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>10, 20, 30, 40, 50, </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Pointers and arrays support the same set of operations, with the same meaning for both. The main difference being that pointers can be assigned new addresses, while arrays cannot.<br/>
<br/>
In the chapter about arrays, brackets (<code>[]</code>) were explained as specifying the index of an element of the array. Well, in fact these brackets are a dereferencing operator known as <i>offset operator</i>. They dereference the variable they follow just as <code>*</code> does, but they also add the number between brackets to the address being dereferenced. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>a[5] = 0;       <cite>// a [offset of 5] = 0</cite>
*(a+5) = 0;     <cite>// pointed to by (a+5) = 0  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
These two expressions are equivalent and valid, not only if <code>a</code> is a pointer, but also if <code>a</code> is an array. Remember that if an array, its name can be used just like a pointer to its first element.<br/>
</section>
<br/>
<section id=""initialization"">
<h3>Pointer initialization</h3>
Pointers can be initialized to point to specific locations at the very moment they are defined:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myvar;
<var>int</var> * myptr = &amp;myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
The resulting state of variables after this code is the same as after:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myvar;
<var>int</var> * myptr;
myptr = &amp;myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
When pointers are initialized, what is initialized is the address they point to (i.e., <code>myptr</code>), never the value being pointed (i.e., <code>*myptr</code>). Therefore, the code above shall not be confused with: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myvar;
<var>int</var> * myptr;
*myptr = &amp;myvar;</code></pre></td>
</tr></tbody></table></div>
<br/>
Which anyway would not make much sense (and is not valid code).<br/>
<br/>
The asterisk (<code>*</code>) in the pointer declaration (line 2) only indicates that it is a pointer, it is not the dereference operator (as in line 3). Both things just happen to use the same sign: <code>*</code>. As always, spaces are not relevant, and never change the meaning of an expression.<br/>
<br/>
Pointers can be initialized either to the address of a variable (such as in the case above), or to the value of another pointer (or array):<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myvar;
<var>int</var> *foo = &amp;myvar;
<var>int</var> *bar = foo;</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""arithmetics"">
<h3>Pointer arithmetics</h3>
To conduct arithmetical operations on pointers is a little different than to conduct them on regular integer types. To begin with, only addition and subtraction operations are allowed; the others make no sense in the world of pointers. But both addition and subtraction have a slightly different behavior with pointers, according to the size of the data type to which they point.<br/>
<br/>
When fundamental data types were introduced, we saw that types have different sizes. For example: <code>char</code> always has a size of 1 byte, <code>short</code> is generally larger than that, and <code>int</code> and <code>long</code> are even larger; the exact size of these being dependent on the system. For example, let's imagine that in a given system, <code>char</code> takes 1 byte, <code>short</code> takes 2 bytes, and <code>long</code> takes 4.<br/>
<br/>
Suppose now that we define three pointers in this compiler: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>char</var> *mychar;
<var>short</var> *myshort;
<var>long</var> *mylong;</code></pre></td>
</tr></tbody></table></div>
<br/>
and that we know that they point to the memory locations <code>1000</code>, <code>2000</code>, and <code>3000</code>, respectively. <br/>
<br/>
Therefore, if we write:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>++mychar;
++myshort;
++mylong;</code></pre></td>
</tr></tbody></table></div>
<br/>
<code>mychar</code>, as one would expect, would contain the value 1001. But not so obviously, <code>myshort</code> would contain the value 2002, and <code>mylong</code> would contain 3004, even though they have each been incremented only once. The reason is that, when adding one to a pointer, the pointer is made to point to the following element of the same type, and, therefore, the size in bytes of the type it points to is added to the pointer.<br/>
<br/>
<img alt="""" src=""pointer_arithmetics.png""/>
<br/>
This is applicable both when adding and subtracting any number to a pointer. It would happen exactly the same if we wrote: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>mychar = mychar + 1;
myshort = myshort + 1;
mylong = mylong + 1;</code></pre></td>
</tr></tbody></table></div>
<br/>
Regarding the increment (<code>++</code>) and decrement (<code>--</code>) operators, they both can be used as either prefix or suffix of an expression, with a slight difference in behavior: as a prefix, the increment happens before the expression is evaluated, and as a suffix, the increment happens after the expression is evaluated. This also applies to expressions incrementing and decrementing pointers, which can become part of more complicated expressions that also include dereference operators (<code>*</code>). Remembering operator precedence rules, we can recall that postfix operators, such as increment and decrement, have higher precedence than prefix operators, such as the dereference operator (<code>*</code>). Therefore, the following expression:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>*p++</code></pre></td>
</tr></tbody></table></div>
<br/>
is equivalent to <code>*(p++)</code>. And what it does is to increase the value of <code>p</code> (so it now points to the next element), but because <code>++</code> is used as postfix, the whole expression is evaluated as the value pointed originally by the pointer (the address it pointed to before being incremented).<br/>
<br/>
Essentially, these are the four possible combinations of the dereference operator with both the prefix and suffix versions of the increment operator (the same being applicable also to the decrement operator):<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>*p++   <cite>// same as *(p++): increment pointer, and dereference unincremented address</cite>
*++p   <cite>// same as *(++p): increment pointer, and dereference incremented address</cite>
++*p   <cite>// same as ++(*p): dereference pointer, and increment the value it points to</cite>
(*p)++ <cite>// dereference pointer, and post-increment the value it points to </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
A typical -but not so simple- statement involving these operators is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>*p++ = *q++;</code></pre></td>
</tr></tbody></table></div>
<br/>
Because <code>++</code> has a higher precedence than <code>*</code>, both <code>p</code> and <code>q</code> are incremented, but because both increment operators (<code>++</code>) are used as postfix and not prefix, the value assigned to <code>*p</code> is <code>*q</code> before both <code>p</code> and <code>q</code> are incremented. And then both are incremented. It would be roughly equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>*p = *q;
++p;
++q;</code></pre></td>
</tr></tbody></table></div>
<br/>
Like always, parentheses reduce confusion by adding legibility to expressions.<br/>
</section>
<br/>
<section id=""const"">
<h3>Pointers and const</h3>
Pointers can be used to access a variable by its address, and this access may include modifying the value pointed. But it is also possible to declare pointers that can access the pointed value to read it, but not to modify it. For this, it is enough with qualifying the type pointed to by the pointer as <code>const</code>. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x;
<var>int</var> y = 10;
<var>const</var> <var>int</var> * p = &amp;y;
x = *p;          <cite>// ok: reading p</cite>
*p = x;          <cite>// error: modifying p, which is const-qualified </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Here <code>p</code> points to a variable, but points to it in a <code>const</code>-qualified manner, meaning that it can read the value pointed, but it cannot modify it. Note also, that the expression <code>&amp;y</code> is of type <code>int*</code>, but this is assigned to a pointer of type <code>const int*</code>. This is allowed: a pointer to non-const can be implicitly converted to a pointer to const. But not the other way around! As a safety feature, pointers to <code>const</code> are not implicitly convertible to pointers to non-<code>const</code>.<br/>
<br/>
One of the use cases of pointers to <code>const</code> elements is as function parameters: a function that takes a pointer to non-<code>const</code> as parameter can modify the value passed as argument, while a function that takes a pointer to <code>const</code> as parameter cannot.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// pointers as arguments:</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> increment_all (<var>int</var>* start, <var>int</var>* stop)
{
  <var>int</var> * current = start;
  <var>while</var> (current != stop) {
    ++(*current);  <cite>// increment value pointed</cite>
    ++current;     <cite>// increment pointer</cite>
  }
}

<var>void</var> print_all (<var>const</var> <var>int</var>* start, <var>const</var> <var>int</var>* stop)
{
  <var>const</var> <var>int</var> * current = start;
  <var>while</var> (current != stop) {
    cout &lt;&lt; *current &lt;&lt; <kbd>'\n'</kbd>;
    ++current;     <cite>// increment pointer</cite>
  }
}

<var>int</var> main ()
{
  <var>int</var> numbers[] = {10,20,30};
  increment_all (numbers,numbers+3);
  print_all (numbers,numbers+3);
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>11
21
31</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Note that <code>print_all</code> uses pointers that point to constant elements. These pointers point to constant content they cannot modify, but they are not constant themselves: i.e., the pointers can still be incremented or assigned different addresses, although they cannot modify the content they point to.<br/>
<br/>
And this is where a second dimension to constness is added to pointers: Pointers can also be themselves const. And this is specified by appending const to the pointed type (after the asterisk):<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> x;
      <var>int</var> *       p1 = &amp;x;  <cite>// non-const pointer to non-const int</cite>
<var>const</var> <var>int</var> *       p2 = &amp;x;  <cite>// non-const pointer to const int</cite>
      <var>int</var> * <var>const</var> p3 = &amp;x;  <cite>// const pointer to non-const int</cite>
<var>const</var> <var>int</var> * <var>const</var> p4 = &amp;x;  <cite>// const pointer to const int </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The syntax with <code>const</code> and pointers is definitely tricky, and recognizing the cases that best suit each use tends to require some experience. In any case, it is important to get constness with pointers (and references) right sooner rather than later, but you should not worry too much about grasping everything if this is the first time you are exposed to the mix of <code>const</code> and pointers. More use cases will show up in coming chapters.<br/>
<br/>
To add a little bit more confusion to the syntax of <code>const</code> with pointers, the <code>const</code> qualifier can either precede or follow the pointed type, with the exact same meaning:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>const</var> <var>int</var> * p2a = &amp;x;  <cite>//      non-const pointer to const int</cite>
<var>int</var> <var>const</var> * p2b = &amp;x;  <cite>// also non-const pointer to const int </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
As with the spaces surrounding the asterisk, the order of const in this case is simply a matter of style. This chapter uses a prefix <code>const</code>, as for historical reasons this seems to be more extended, but both are exactly equivalent. The merits of each style are still intensely debated on the internet.<br/>
</section>
<br/>
<section id=""stringliterals"">
<h3>Pointers and string literals</h3>
As pointed earlier, <i>string literals</i> are arrays containing null-terminated character sequences. In earlier sections, string literals have been used to be directly inserted into <code>cout</code>, to initialize strings and to initialize arrays of characters.<br/>
<br/>
But they can also be accessed directly. String literals are arrays of the proper array type to contain all its characters plus the terminating null-character, with each of the elements being of type <code>const char</code> (as literals, they can never be modified). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>const</var> <var>char</var> * foo = <kbd>""hello""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares an array with the literal representation for <code>""hello""</code>, and then a pointer to its first element is assigned to <code>foo</code>. If we imagine that <code>""hello""</code> is stored at the memory locations that start at address 1702, we can represent the previous declaration as:<br/>
<br/>
<img alt="""" src=""pointer_assignment.png""/>
<br/>
Note that here <code>foo</code> is a pointer and contains the value 1702, and not <code>'h'</code>, nor <code>""hello""</code>, although 1702 indeed is the address of both of these.<br/>
<br/>
The pointer <code>foo</code> points to a sequence of characters. And because pointers and arrays behave essentially in the same way in expressions, <code>foo</code> can be used to access the characters in the same way arrays of null-terminated character sequences are. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>*(foo+4)
foo[4]</code></pre></td>
</tr></tbody></table></div>
<br/>
Both expressions have a value of <code>'o'</code> (the fifth element of the array).<br/>
</section>
<br/>
<section id=""pointerstopointers"">
<h3>Pointers to pointers</h3>
C++ allows the use of pointers that point to pointers, that these, in its turn, point to data (or even to other pointers). The syntax simply requires an asterisk (<code>*</code>) for each level of indirection in the declaration of the pointer:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>char</var> a;
<var>char</var> * b;
<var>char</var> ** c;
a = <kbd>'z'</kbd>;
b = &amp;a;
c = &amp;b;</code></pre></td>
</tr></tbody></table></div>
<br/>
This, assuming the randomly chosen memory locations for each variable of <code>7230</code>, <code>8092</code>, and <code>10502</code>, could be represented as:<br/>
<br/>
<img alt="""" src=""pointer_to_pointer.png""/>
<br/>
With the value of each variable represented inside its corresponding cell, and their respective addresses in memory represented by the value under them.<br/>
<br/>
The new thing in this example is variable <code>c</code>, which is a pointer to a pointer, and can be used in three different levels of indirection, each one of them would correspond to a different value:<br/>
<br/>
<ul>
<li><code>c</code> is of type <code>char**</code> and a value of <code>8092</code></li>
<li><code>*c</code> is of type <code>char*</code> and a value of <code>7230</code></li>
<li><code>**c</code> is of type <code>char</code> and a value of <code>'z'</code></li>
</ul>
</section>
<br/>
<section id=""void"">
<h3>void pointers</h3>
The <code>void</code> type of pointer is a special type of pointer. In C++, <code>void</code> represents the absence of type. Therefore, <code>void</code> pointers are pointers that point to a value that has no type (and thus also an undetermined length and undetermined dereferencing properties).<br/>
<br/>
This gives <code>void</code> pointers a great flexibility, by being able to point to any data type, from an integer value or a float to a string of characters. In exchange, they have a great limitation: the data pointed to by them cannot be directly dereferenced (which is logical, since we have no type to dereference to), and for that reason, any address in a <code>void</code> pointer needs to be transformed into some other pointer type that points to a concrete data type before being dereferenced.<br/>
<br/>
One of its possible uses may be to pass generic parameters to a function. For example: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// increaser</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> increase (<var>void</var>* data, <var>int</var> psize)
{
  <var>if</var> ( psize == <var>sizeof</var>(<var>char</var>) )
  { <var>char</var>* pchar; pchar=(<var>char</var>*)data; ++(*pchar); }
  <var>else</var> <var>if</var> (psize == <var>sizeof</var>(<var>int</var>) )
  { <var>int</var>* pint; pint=(<var>int</var>*)data; ++(*pint); }
}

<var>int</var> main ()
{
  <var>char</var> a = <kbd>'x'</kbd>;
  <var>int</var> b = 1602;
  increase (&amp;a,<var>sizeof</var>(a));
  increase (&amp;b,<var>sizeof</var>(b));
  cout &lt;&lt; a &lt;&lt; <kbd>"", ""</kbd> &lt;&lt; b &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>y, 1603</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
<code>sizeof</code> is an operator integrated in the C++ language that returns the size in bytes of its argument. For non-dynamic data types, this value is a constant. Therefore, for example, <code>sizeof(char)</code> is 1, because <code>char</code> has always a size of one byte. <br/>
</section>
<br/>
<section id=""null"">
<h3>Invalid pointers and null pointers</h3>
In principle, pointers are meant to point to valid addresses, such as the address of a variable or the address of an element in an array. But pointers can actually point to any address, including addresses that do not refer to any valid element. Typical examples of this are <i>uninitialized pointers</i> and pointers to nonexistent elements of an array:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * p;               <cite>// uninitialized pointer (local variable)</cite>

<var>int</var> myarray[10];
<var>int</var> * q = myarray+20;  <cite>// element out of bounds </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Neither <code>p</code> nor <code>q</code> point to addresses known to contain a value, but none of the above statements causes an error. In C++, pointers are allowed to take any address value, no matter whether there actually is something at that address or not. What can cause an error is to dereference such a pointer (i.e., actually accessing the value they point to). Accessing such a pointer causes undefined behavior, ranging from an error during runtime to accessing some random value.<br/>
<br/>
But, sometimes, a pointer really needs to explicitly point to nowhere, and not just an invalid address. For such cases, there exists a special value that any pointer type can take: the <i>null pointer value</i>. This value can be expressed in C++ in two ways: either with an integer value of zero, or with the <code>nullptr</code> keyword:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * p = 0;
<var>int</var> * q = <var>nullptr</var>;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, both <code>p</code> and <code>q</code> are <i>null pointers</i>, meaning that they explicitly point to nowhere, and they both actually compare equal: all <i>null pointers</i> compare equal to other <i>null pointers</i>. It is also quite usual to see the defined constant <code>NULL</code> be used in older code to refer to the <i>null pointer</i> value:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * r = NULL;</code></pre></td>
</tr></tbody></table></div>
<br/>
<code>NULL</code> is defined in several headers of the standard library, and is defined as an alias of some <i>null pointer</i> constant value (such as <code>0</code> or <code>nullptr</code>).<br/>
<br/>
Do not confuse <i>null pointers</i> with <code>void</code> pointers! A <i>null pointer</i> is a value that any pointer can take to represent that it is pointing to ""nowhere"", while a <code>void</code> pointer is a type of pointer that can point to somewhere without a specific type. One refers to the value stored in the pointer, and the other to the type of data it points to.<br/>
</section>
<br/>
<section id=""pointerstofunctions"">
<h3>Pointers to functions</h3>
C++ allows operations with pointers to functions. The typical use of this is for passing a function as an argument to another function. Pointers to functions are declared with the same syntax as a regular function declaration, except that the name of the function is enclosed between parentheses () and an asterisk (<code>*</code>) is inserted before the name:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/></code></pre></td>
<td class=""source""><pre><code><cite>// pointer to functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> addition (<var>int</var> a, <var>int</var> b)
{ <var>return</var> (a+b); }

<var>int</var> subtraction (<var>int</var> a, <var>int</var> b)
{ <var>return</var> (a-b); }

<var>int</var> operation (<var>int</var> x, <var>int</var> y, <var>int</var> (*functocall)(<var>int</var>,<var>int</var>))
{
  <var>int</var> g;
  g = (*functocall)(x,y);
  <var>return</var> (g);
}

<var>int</var> main ()
{
  <var>int</var> m,n;
  <var>int</var> (*minus)(<var>int</var>,<var>int</var>) = subtraction;

  m = operation (7, 5, addition);
  n = operation (20, m, minus);
  cout &lt;&lt;n;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>8</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In the example above, <code>minus</code> is a pointer to a function that has two parameters of type <code>int</code>. It is directly initialized to point to the function <code>subtraction</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> (* minus)(<var>int</var>,<var>int</var>) = subtraction;</code></pre></td>
</tr></tbody></table></div>
</section></div>"
Compound data types,Dynamic Memory,"<div class=""C_doc""><h1>Dynamic memory</h1>
<section id=""intro"">
In the programs seen in previous chapters, all memory needs were determined before program execution by defining the variables needed. But there may be cases where the memory needs of a program can only be determined during runtime. For example, when the memory needed depends on user input. On these cases, programs need to dynamically allocate memory, for which the C++ language integrates the operators <code>new</code> and <code>delete</code>.<br/>
</section>
<br/>
<section id=""new"">
<h3>Operators new and new[]</h3>
Dynamic memory is allocated using operator <code>new</code>. <code>new</code> is followed by a data type specifier and, if a sequence of more than one element is required, the number of these within brackets <code>[]</code>. It returns a pointer to the beginning of the new block of memory allocated. Its syntax is: <br/>
<br/>
<code>
pointer = new type<br/>
pointer = new type [number_of_elements]<br/>
</code>
<br/>
The first expression is used to allocate memory to contain one single element of type <code>type</code>. The second one is used to allocate a block (an array) of elements of type <code>type</code>, where <code>number_of_elements</code> is an integer value representing the amount of these. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * foo;
foo = <var>new</var> <var>int</var> [5];</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, the system dynamically allocates space for five elements of type <code>int</code> and returns a pointer to the first element of the sequence, which is assigned to <code>foo</code> (a pointer). Therefore, <code>foo</code> now points to a valid block of memory with space for five elements of type <code>int</code>.<br/>
<br/>
<img alt="""" src=""dynamic.png""/> <br/>
<br/>
Here, <code>foo</code> is a pointer, and thus, the first element pointed to by <code>foo</code> can be accessed either with the expression <code>foo[0]</code> or the expression <code>*foo</code> (both are equivalent). The second element can be accessed either with <code>foo[1]</code> or <code>*(foo+1)</code>, and so on...<br/>
<br/>
There is a substantial difference between declaring a normal array and allocating dynamic memory for a block of memory using <code>new</code>. The most important difference is that the size of a regular array needs to be a <i>constant expression</i>, and thus its size has to be determined at the moment of designing the program, before it is run, whereas the dynamic memory allocation performed by <code>new</code> allows to assign memory during runtime using any variable value as size.<br/>
<br/>
The dynamic memory requested by our program is allocated by the system from the memory heap. However, computer memory is a limited resource, and it can be exhausted. Therefore, there are no guarantees that all requests to allocate memory using operator <code>new</code> are going to be granted by the system. <br/>
<br/>
C++ provides two standard mechanisms to check if the allocation was successful:<br/>
<br/>
One is by handling exceptions. Using this method, an exception of type <code>bad_alloc</code> is thrown when the allocation fails. Exceptions are a powerful C++ feature explained later in these tutorials. But for now, you should know that if this exception is thrown and it is not handled by a specific handler, the program execution is terminated.<br/>
<br/>
This exception method is the method used by default by <code>new</code>, and is the one used in a declaration like:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>foo = <var>new</var> <var>int</var> [5];  <cite>// if allocation fails, an exception is thrown  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The other method is known as <code>nothrow</code>, and what happens when it is used is that when a memory allocation fails, instead of throwing a <code>bad_alloc</code> exception or terminating the program, the pointer returned by <code>new</code> is a <i>null pointer</i>, and the program continues its execution normally.<br/>
<br/>
This method can be specified by using a special object called <code>nothrow</code>, declared in header <code><a href=""/&lt;new&gt;"">&lt;new&gt;</a></code>, as argument for <code>new</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>foo = <var>new</var> (nothrow) <var>int</var> [5];</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, if the allocation of this block of memory fails, the failure can be detected by checking if <code>foo</code> is a null pointer:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> * foo;
foo = <var>new</var> (nothrow) <var>int</var> [5];
<var>if</var> (foo == <var>nullptr</var>) {
  <cite>// error assigning memory. Take measures.</cite>
}</code></pre></td>
</tr></tbody></table></div>
<br/>
This <code>nothrow</code> method is likely to produce less efficient code than exceptions, since it implies explicitly checking the pointer value returned after each and every allocation. Therefore, the exception mechanism is generally preferred, at least for critical allocations. Still, most of the coming examples will use the <code>nothrow</code> mechanism due to its simplicity.<br/>
</section>
<br/>
<section id=""delete"">
<h3>Operators delete and delete[]</h3>
In most cases, memory allocated dynamically is only needed during specific periods of time within a program; once it is no longer needed, it can be freed so that the memory becomes available again for other requests of dynamic memory. This is the purpose of operator <code>delete</code>, whose syntax is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>delete</var> pointer;
<var>delete</var>[] pointer;</code></pre></td>
</tr></tbody></table></div>
<br/>
The first statement releases the memory of a single element allocated using <code>new</code>, and the second one releases the memory allocated for arrays of elements using new and a size in brackets (<code>[]</code>).<br/>
<br/>
The value passed as argument to <code>delete</code> shall be either a pointer to a memory block previously allocated with <code>new</code>, or a <i>null pointer</i> (in the case of a <i>null pointer</i>, <code>delete</code> produces no effect).<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// rememb-o-matic</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;new&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main ()
{
  <var>int</var> i,n;
  <var>int</var> * p;
  cout &lt;&lt; <kbd>""How many numbers would you like to type? ""</kbd>;
  cin &gt;&gt; i;
  p= <var>new</var> (nothrow) <var>int</var>[i];
  <var>if</var> (p == <var>nullptr</var>)
    cout &lt;&lt; <kbd>""Error: memory could not be allocated""</kbd>;
  <var>else</var>
  {
    <var>for</var> (n=0; n&lt;i; n++)
    {
      cout &lt;&lt; <kbd>""Enter number: ""</kbd>;
      cin &gt;&gt; p[n];
    }
    cout &lt;&lt; <kbd>""You have entered: ""</kbd>;
    <var>for</var> (n=0; n&lt;i; n++)
      cout &lt;&lt; p[n] &lt;&lt; <kbd>"", ""</kbd>;
    <var>delete</var>[] p;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>How many numbers would you like to type? 5
Enter number : 75
Enter number : 436
Enter number : 1067
Enter number : 8
Enter number : 32
You have entered: 75, 436, 1067, 8, 32,</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice how the value within brackets in the new statement is a variable value entered by the user (<code>i</code>), not a constant expression:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>p= <var>new</var> (nothrow) <var>int</var>[i];</code></pre></td>
</tr></tbody></table></div>
<br/>
There always exists the possibility that the user introduces a value for <code>i</code> so big that the system cannot allocate enough memory for it. For example, when I tried to give a value of 1 billion to the ""How many numbers"" question, my system could not allocate that much memory for the program, and I got the text message we prepared for this case (<code>Error: memory could not be allocated</code>).<br/>
<br/>
It is considered good practice for programs to always be able to handle failures to allocate memory, either by checking the pointer value (if <code>nothrow</code>) or by catching the proper exception.<br/>
</section>
<br/>
<section id=""malloc"">
<h3>Dynamic memory in C</h3>
C++ integrates the operators <code>new</code> and <code>delete</code> for allocating dynamic memory. But these were not available in the C language; instead, it used a library solution, with the functions <code><a href=""/malloc"">malloc</a></code>, <code><a href=""/calloc"">calloc</a></code>, <code><a href=""/realloc"">realloc</a></code> and <code><a href=""/free"">free</a></code>, defined in the header <code><a href=""/&lt;cstdlib&gt;"">&lt;cstdlib&gt;</a></code> (known as <code>&lt;stdlib.h&gt;</code> in C). The functions are also available in C++ and can also be used to allocate and deallocate dynamic memory.<br/>
<br/>
Note, though, that the memory blocks allocated by these functions are not necessarily compatible with those returned by <code>new</code>, so they should not be mixed; each one should be handled with its own set of functions or operators.<br/>
</section> <br/>
</div>"
Compound data types,Data structures,"<div class=""C_doc""><h1>Data structures</h1>
<section id=""data_structures"">
<h3>Data structures</h3>
A <dfn>data structure</dfn> is a group of data elements grouped together under one name. These data elements, known as <i>members</i>, can have different types and different lengths. Data structures can be declared in C++ using the following syntax:<br/>
<br/>
<code>
struct type_name {<br/>
member_type1 member_name1;<br/>
member_type2 member_name2;<br/>
member_type3 member_name3;<br/>
.<br/>
.<br/>
} object_names;<br/>
</code>
<br/>
Where <code>type_name</code> is a name for the structure type, <code>object_name</code> can be a set of valid identifiers for objects that have the type of this structure. Within braces <code>{}</code>, there is a list with the data members, each one is specified with a type and a valid identifier as its name.<br/>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><var>struct</var> product {
  <var>int</var> weight;
  <var>double</var> price;
} ;

product apple;
product banana, melon;</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares a structure type, called <code>product</code>, and defines it having two members: <code>weight</code> and <code>price</code>, each of a different fundamental type. This declaration creates a new type (<code>product</code>), which is then used to declare three objects (variables) of this type: <code>apple</code>, <code>banana</code>, and <code>melon</code>. Note how once <code>product</code> is declared, it is used just like any other type.<br/>
<br/>
Right at the end of the <code>struct</code> definition, and before the ending semicolon (<code>;</code>), the optional field <code>object_names</code> can be used to directly declare objects of the structure type. For example, the structure objects <code>apple</code>, <code>banana</code>, and <code>melon</code> can be declared at the moment the data structure type is defined: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>struct</var> product {
  <var>int</var> weight;
  <var>double</var> price;
} apple, banana, melon;</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, where <code>object_names</code> are specified, the type name (<code>product</code>) becomes optional: <code>struct</code> requires either a <code>type_name</code> or at least one name in <code>object_names</code>, but not necessarily both.<br/>
<br/>
It is important to clearly differentiate between what is the structure type name (<code>product</code>), and what is an object of this type (<code>apple</code>, <code>banana</code>, and <code>melon</code>). Many objects (such as <code>apple</code>, <code>banana</code>, and <code>melon</code>) can be declared from a single structure type (<code>product</code>).<br/>
<br/>
Once the three objects of a determined structure type are declared (<code>apple</code>, <code>banana</code>, and <code>melon</code>) its members can be accessed directly. The syntax for that is simply to insert a dot (<code>.</code>) between the object name and the member name. For example, we could operate with any of these elements as if they were standard variables of their respective types: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code>apple.weight
apple.price
banana.weight
banana.price
melon.weight
melon.</code></pre></td>
</tr></tbody></table></div>
<br/>
Each one of these has the data type corresponding to the member they refer to: <code>apple.weight</code>, <code>banana.weight</code>, and <code>melon.weight</code> are of type <code>int</code>, while <code>apple.price</code>, <code>banana.price</code>, and <code>melon.price</code> are of type <code>double</code>.<br/>
<br/>
Here is a real example with structure types in action:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// example about structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
} mine, yours;

<var>void</var> printmovie (movies_t movie);

<var>int</var> main ()
{
  string mystr;

  mine.title = <kbd>""2001 A Space Odyssey""</kbd>;
  mine.year = 1968;

  cout &lt;&lt; <kbd>""Enter title: ""</kbd>;
  getline (cin,yours.title);
  cout &lt;&lt; <kbd>""Enter year: ""</kbd>;
  getline (cin,mystr);
  stringstream(mystr) &gt;&gt; yours.year;

  cout &lt;&lt; <kbd>""My favorite movie is:\n ""</kbd>;
  printmovie (mine);
  cout &lt;&lt; <kbd>""And yours is:\n ""</kbd>;
  printmovie (yours);
  <var>return</var> 0;
}

<var>void</var> printmovie (movies_t movie)
{
  cout &lt;&lt; movie.title;
  cout &lt;&lt; <kbd>"" (""</kbd> &lt;&lt; movie.year &lt;&lt; <kbd>"")\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>Enter title: Alien
Enter year: 1979

My favorite movie is:
 2001 A Space Odyssey (1968)
And yours is:
 Alien (1979)</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The example shows how the members of an object act just as regular variables. For example, the member <code>yours.year</code> is a valid variable of type <code>int</code>, and <code>mine.title</code> is a valid variable of type <code>string</code>.<br/>
<br/>
But the objects <code>mine</code> and <code>yours</code> are also variables with a type (of type <code>movies_t</code>). For example, both have been passed to function <code>printmovie</code> just as if they were simple variables. Therefore, one of the features of data structures is the ability to refer to both their members individually or to the entire structure as a whole. In both cases using the same identifier: the name of the structure.<br/>
<br/>
Because structures are types, they can also be used as the type of arrays to construct tables or databases of them:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// array of structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
} films [3];

<var>void</var> printmovie (movies_t movie);

<var>int</var> main ()
{
  string mystr;
  <var>int</var> n;

  <var>for</var> (n=0; n&lt;3; n++)
  {
    cout &lt;&lt; <kbd>""Enter title: ""</kbd>;
    getline (cin,films[n].title);
    cout &lt;&lt; <kbd>""Enter year: ""</kbd>;
    getline (cin,mystr);
    stringstream(mystr) &gt;&gt; films[n].year;
  }

  cout &lt;&lt; <kbd>""\nYou have entered these movies:\n""</kbd>;
  <var>for</var> (n=0; n&lt;3; n++)
    printmovie (films[n]);
  <var>return</var> 0;
}

<var>void</var> printmovie (movies_t movie)
{
  cout &lt;&lt; movie.title;
  cout &lt;&lt; <kbd>"" (""</kbd> &lt;&lt; movie.year &lt;&lt; <kbd>"")\n""</kbd>;
}</code></pre></td>
<td class=""output""><pre><samp>Enter title: Blade Runner
Enter year: 1982
Enter title: The Matrix
Enter year: 1999
Enter title: Taxi Driver
Enter year: 1976
 
You have entered these movies:
Blade Runner (1982)
The Matrix (1999)
Taxi Driver (1976)</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""pointers_to_structures"">
<h3>Pointers to structures</h3>
Like any other type, structures can be pointed to by its own type of pointers:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><var>struct</var> movies_t {
  string title;
  <var>int</var> year;
};

movies_t amovie;
movies_t * pmovie;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here <code>amovie</code> is an object of structure type <code>movies_t</code>, and <code>pmovie</code> is a pointer to point to objects of structure type <code>movies_t</code>. Therefore, the following code would also be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>pmovie = &amp;amovie;</code></pre></td>
</tr></tbody></table></div>
<br/>
The value of the pointer <code>pmovie</code> would be assigned the address of object <code>amovie</code>.<br/>
<br/>
Now, let's see another example that mixes pointers and structures, and will serve to introduce a new operator: the arrow operator (<code>-&gt;</code>):<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// pointers to structures</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;sstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>struct</var> movies_t {
  string title;
  <var>int</var> year;
};

<var>int</var> main ()
{
  string mystr;

  movies_t amovie;
  movies_t * pmovie;
  pmovie = &amp;amovie;

  cout &lt;&lt; <kbd>""Enter title: ""</kbd>;
  getline (cin, pmovie-&gt;title);
  cout &lt;&lt; <kbd>""Enter year: ""</kbd>;
  getline (cin, mystr);
  (stringstream) mystr &gt;&gt; pmovie-&gt;year;

  cout &lt;&lt; <kbd>""\nYou have entered:\n""</kbd>;
  cout &lt;&lt; pmovie-&gt;title;
  cout &lt;&lt; <kbd>"" (""</kbd> &lt;&lt; pmovie-&gt;year &lt;&lt; <kbd>"")\n""</kbd>;

  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>Enter title: Invasion of the body snatchers
Enter year: 1978
 
You have entered:
Invasion of the body snatchers (1978)</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The arrow operator (<code>-&gt;</code>) is a dereference operator that is used exclusively with pointers to objects that have members. This operator serves to access the member of an object directly from its address. For example, in the example above:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>pmovie-&gt;</code></pre></td>
</tr></tbody></table></div>
<br/>
is, for all purposes, equivalent to: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>(*pmovie).</code></pre></td>
</tr></tbody></table></div>
<br/>
Both expressions, <code>pmovie-&gt;title</code> and <code>(*pmovie).title</code> are valid, and both access the member <code>title</code> of the data structure pointed by a pointer called <code>pmovie</code>. It is definitely something different than:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>*pmovie.</code></pre></td>
</tr></tbody></table></div>
<br/>
which is rather equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>*(pmovie.title)</code></pre></td>
</tr></tbody></table></div>
<br/>
This would access the value pointed by a hypothetical pointer member called <code>title</code> of the structure object <code>pmovie</code> (which is not the case, since <code>title</code> is not a pointer type). The following panel summarizes possible combinations of the operators for pointers and for structure members:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Expression</th><th>What is evaluated</th><th>Equivalent</th></tr>
<tr><td><code>a.b</code></td><td>Member <code>b</code> of object <code>a</code></td><td></td></tr>
<tr><td><code>a-&gt;b</code></td><td>Member <code>b</code> of object pointed to by <code>a</code></td><td><code>(*a).b</code></td></tr>
<tr><td><code>*a.b</code></td><td>Value pointed to by member <code>b</code> of object <code>a</code></td><td><code>*(a.b)</code></td></tr>
</tbody></table>
</section>
<br/>
<section id=""nesting_structures"">
<h3>Nesting structures</h3>
Structures can also be nested in such a way that an element of a structure is itself another structure:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/></code></pre></td>
<td class=""source""><pre><code><var>struct</var> movies_t {
  string title;
  <var>int</var> year;
};

<var>struct</var> friends_t {
  string name;
  string email;
  movies_t favorite_movie;
} charlie, maria;

friends_t * pfriends = &amp;charlie;</code></pre></td>
</tr></tbody></table></div>
<br/>
After the previous declarations, all of the following expressions would be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>charlie.name
maria.favorite_movie.title
charlie.favorite_movie.year
pfriends-&gt;favorite_movie.</code></pre></td>
</tr></tbody></table></div>
<br/>
(where, by the way, the last two expressions refer to the same member). <br/>
</section></div>"
Compound data types,Other data types,"<div class=""C_doc""><h1>Other data types</h1>
<section id=""type_aliases"">
<h3>Type aliases (typedef / using)</h3>
A type alias is a different name by which a type can be identified. In C++, any valid type can be aliased so that it can be referred to with a different identifier.<br/>
<br/>
In C++, there are two syntaxes for creating such type aliases: The first, inherited from the C language, uses the <code>typedef</code> keyword:<br/>
<br/>
<code>
typedef existing_type new_type_name ;<br/>
</code>
<br/>
where <code>existing_type</code> is any type, either fundamental or compound, and <code>new_type_name</code> is an identifier with the new name given to the type.<br/>
<br/>
For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>typedef</var> <var>char</var> C;
<var>typedef</var> <var>unsigned</var> <var>int</var> WORD;
<var>typedef</var> <var>char</var> * pChar;
<var>typedef</var> <var>char</var> field [50];</code></pre></td>
</tr></tbody></table></div>
<br/>
This defines four type aliases: <code>C</code>, <code>WORD</code>, <code>pChar</code>, and <code>field</code> as <code>char</code>, <code>unsigned int</code>, <code>char*</code> and <code>char[50]</code>, respectively. Once these aliases are defined, they can be used in any declaration just like any other valid type:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>C mychar, anotherchar, *ptc1;
WORD myword;
pChar ptc2;
field name;</code></pre></td>
</tr></tbody></table></div>
<br/>
More recently, a second syntax to define type aliases was introduced in the C++ language:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>using</var> new_type_name = existing_type ;</code></pre></td>
</tr></tbody></table></div>
<br/>
For example, the same type aliases as above could be defined as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>using</var> C = <var>char</var>;
<var>using</var> WORD = <var>unsigned</var> <var>int</var>;
<var>using</var> pChar = <var>char</var> *;
<var>using</var> field = <var>char</var> [50];</code></pre></td>
</tr></tbody></table></div>
<br/>
Both aliases defined with <code>typedef</code> and aliases defined with <code>using</code> are semantically equivalent. The only difference being that <code>typedef</code> has certain limitations in the realm of templates that <code>using</code> has not. Therefore, <code>using</code> is more generic, although <code>typedef</code> has a longer history and is probably more common in existing code.<br/>
<br/>
Note that neither <code>typedef</code> nor <code>using</code> create new distinct data types. They only create synonyms of existing types. That means that the type of <code>myword</code> above, declared with type <code>WORD</code>, can as well be considered of type <code>unsigned int</code>; it does not really matter, since both are actually referring to the same type.<br/>
<br/>
Type aliases can be used to reduce the length of long or confusing type names, but they are most useful as tools to abstract programs from the underlying types they use. For example, by using an alias of <code>int</code> to refer to a particular kind of parameter instead of using <code>int</code> directly, it allows for the type to be easily replaced by <code>long</code> (or some other type) in a later version, without having to change every instance where it is used.<br/>
</section>
<br/>
<section id=""unions"">
<h3>Unions</h3>
Unions allow one portion of memory to be accessed as different data types. Its declaration and use is similar to the one of structures, but its functionality is totally different:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""output""><pre><samp>
union type_name {
  member_type1 member_name1;
  member_type2 member_name2;
  member_type3 member_name3;
  .
  .
} object_names;
</samp></pre></td></tr></tbody></table></div>
<br/>
<br/>
This creates a new union type, identified by <code>type_name</code>, in which all its member elements occupy the same physical space in memory. The size of this type is the one of the largest member element. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>union</var> mytypes_t {
  <var>char</var> c;
  <var>int</var> i;
  <var>float</var> f;
} mytypes;</code></pre></td>
</tr></tbody></table></div>
<br/>
declares an object (<code>mytypes</code>) with three members:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>mytypes.c
mytypes.i
mytypes.</code></pre></td>
</tr></tbody></table></div>
<br/>
Each of these members is of a different data type. But since all of them are referring to the same location in memory, the modification of one of the members will affect the value of all of them. It is not possible to store different values in them in a way that each is independent of the others.<br/>
<br/>
One of the uses of a union is to be able to access a value either in its entirety or as an array or structure of smaller elements. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/></code></pre></td>
<td class=""source""><pre><code><var>union</var> mix_t {
  <var>int</var> l;
  <var>struct</var> {
    <var>short</var> hi;
    <var>short</var> lo;
    } s;
  <var>char</var> c[4];
} mix;</code></pre></td>
</tr></tbody></table></div>
<br/>
If we assume that the system where this program runs has an <code>int</code> type with a size of 4 bytes, and a <code>short</code> type of 2 bytes, the union defined above allows the access to the same group of 4 bytes: <code>mix.l</code>, <code>mix.s</code> and <code>mix.c</code>, and which we can use according to how we want to access these bytes: as if they were a single value of type <code>int</code>, or as if they were two values of type <code>short</code>, or as an array of <code>char</code> elements, respectively. The example mixes types, arrays, and structures in the union to demonstrate different ways to access the data. For a little-endian system, this union could be represented as:<br/>
<br/>
<img alt="""" src=""union.png""/>
<br/>
The exact alignment and order of the members of a union in memory depends on the system, with the possibility of creating portability issues.<br/>
</section>
<br/>
<section id=""anonymous_unions"">
<h3>Anonymous unions</h3>
When unions are members of a class (or structure), they can be declared with no name. In this case, they become <i>anonymous unions</i>, and its members are directly accessible from objects by their member names. For example, see the differences between these two structure declarations: <br/>
<br/>
<table class=""boxed""><tbody><tr><th>structure with regular union</th><th>structure with anonymous union</th></tr>
<tr><td><code><pre>struct book1_t {<br/>
  char title[50];<br/>
  char author[50];<br/>
  union {<br/>
    float dollars;<br/>
    int yen;<br/>
  } price;<br/>
} book1;</pre></code></td>
<td><code><pre>struct book2_t {<br/>
  char title[50];<br/>
  char author[50];<br/>
  union {<br/>
    float dollars;<br/>
    int yen;<br/>
  };<br/>
} book2;</pre></code></td></tr>
</tbody></table>
<br/>
The only difference between the two types is that in the first one, the member union has a name (<code>price</code>), while in the second it has not. This affects the way to access members <code>dollars</code> and <code>yen</code> of an object of this type. For an object of the first type (with a regular union), it would be:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>book1.price.dollars
book1.price.</code></pre></td>
</tr></tbody></table></div>
<br/>
whereas for an object of the second type (which has an anonymous union), it would be: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>book2.dollars
book2.</code></pre></td>
</tr></tbody></table></div>
<br/>
Again, remember that because it is a member union (not a member structure), the members <code>dollars</code> and <code>yen</code> actually share the same memory location, so they cannot be used to store two different values simultaneously. The <code>price</code> can be set in <code>dollars</code> or in <code>yen</code>, but not in both simultaneously.<br/>
</section>
<br/>
<section id=""enumerated_types"">
<h3>Enumerated types (enum)</h3>
<dfn>Enumerated types</dfn> are types that are defined with a set of custom identifiers, known as <i>enumerators</i>, as possible values. Objects of these <i>enumerated types</i> can take any of these enumerators as value.<br/>
<br/>
Their syntax is:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""output""><pre><samp>
enum type_name {
  value1,
  value2,
  value3,
  .
  .
} object_names;
</samp></pre></td></tr></tbody></table></div>
<br/>
<br/>
This creates the type <code>type_name</code>, which can take any of <code>value1</code>, <code>value2</code>, <code>value3</code>, ... as value. Objects (variables) of this type can directly be instantiated as <code>object_names</code>.<br/>
<br/>
For example, a new type of variable called <code>colors_t</code> could be defined to store colors with the following declaration: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>enum</var> colors_t {black, blue, green, cyan, red, purple, yellow, white};</code></pre></td>
</tr></tbody></table></div>
<br/>
Notice that this declaration includes no other type, neither fundamental nor compound, in its definition. To say it another way, somehow, this creates a whole new data type from scratch without basing it on any other existing type. The possible values that variables of this new type <code>color_t</code> may take are the enumerators listed within braces. For example, once the <code>colors_t</code> enumerated type is declared, the following expressions will be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>colors_t mycolor;
 
mycolor = blue;
<var>if</var> (mycolor == green) mycolor = red;</code></pre></td>
</tr></tbody></table></div>
<br/>
Values of <i>enumerated types</i> declared with <code>enum</code> are implicitly convertible to an integer type. In fact, the elements of such an <code>enum</code> are always assigned an integer numerical equivalent internally, to which they can be implicitly converted to. If it is not specified otherwise, the integer value equivalent to the first possible value is <code>0</code>, the equivalent to the second is <code>1</code>, to the third is <code>2</code>, and so on... Therefore, in the data type <code>colors_t</code> defined above, <code>black</code> would be equivalent to <code>0</code>, <code>blue</code> would be equivalent to <code>1</code>, <code>green</code> to <code>2</code>, and so on...<br/>
<br/>
A specific integer value can be specified for any of the possible values in the enumerated type. And if the constant value that follows it is itself not given its own value, it is automatically assumed to be the same value plus one. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>enum</var> months_t { january=1, february, march, april,
                may, june, july, august,
                september, october, november, december} y2k;</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, the variable <code>y2k</code> of the enumerated type <code>months_t</code> can contain any of the 12 possible values that go from <code>january</code> to <code>december</code> and that are equivalent to the values between <code>1</code> and <code>12</code> (not between <code>0</code> and <code>11</code>, since <code>january</code> has been made equal to <code>1</code>).<br/>
</section>
<br/>
<section id=""enum_class"">
<h3>Enumerated types with enum class</h3>
But, in C++, it is possible to create real <code>enum</code> types that are neither implicitly convertible to <code>int</code> and that neither have enumerator values of type <code>int</code>, but of the <code>enum</code> type itself, thus preserving type safety. They are declared with <code>enum class</code> (or <code>enum struct</code>) instead of just <code>enum</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>enum</var> <var>class</var> Colors {black, blue, green, cyan, red, purple, yellow, white};</code></pre></td>
</tr></tbody></table></div>
<br/>
Each of the enumerator values of an <code>enum class</code> type needs to be scoped into its type (this is actually also possible with <code>enum</code> types, but it is only optional). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>Colors mycolor;
 
mycolor = Colors::blue;
<var>if</var> (mycolor == Colors::green) mycolor = Colors::red;</code></pre></td>
</tr></tbody></table></div>
<br/>
Enumerated types declared with <code>enum class</code> also have more control over their underlying type; it may be any integral data type, such as <code>char</code>, <code>short</code> or <code>unsigned int</code>, which essentially serves to determine the size of the type. This is specified by a colon and the underlying type following the enumerated type. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>enum</var> <var>class</var> EyeColor : <var>char</var> {blue, green, brown};</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, <code>Eyecolor</code> is a distinct type with the same size of a <code>char</code> (1 byte).<br/>
</section></div>"
Classes,Classes (I),"<div class=""C_doc""><h1>Classes (I)</h1>
<section id=""definition"">
<dfn>Classes</dfn> are an expanded concept of <i>data structures</i>: like data structures, they can contain data members, but they can also contain functions as members.<br/>
<br/>
An <dfn>object</dfn> is an instantiation of a class. In terms of variables, a class would be the type, and an object would be the variable.<br/>
<br/>
Classes are defined using either keyword <code>class</code> or keyword <code>struct</code>, with the following syntax:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""output""><pre><samp>class class_name {
  access_specifier_1:
    member1;
  access_specifier_2:
    member2;
  ...
} object_names;
</samp></pre></td></tr></tbody></table></div>
<br/>
<br/>
Where <code>class_name</code> is a valid identifier for the class, <code>object_names</code> is an optional list of names for objects of this class. The body of the declaration can contain <i>members</i>, which can either be data or function declarations, and optionally <i>access specifiers</i>.<br/>
<br/>
Classes have the same format as plain <i>data structures</i>, except that they can also include functions and have these new things called <i>access specifiers</i>. An <i>access specifier</i> is one of the following three keywords: <code>private</code>, <code>public</code> or <code>protected</code>. These specifiers modify the access rights for the members that follow them:<br/>
<br/>
<ul>
<li><code>private</code> members of a class are accessible only from within other members of the same class (or from their <i>""friends""</i>).</li>
<li><code>protected</code> members are accessible from other members of the same class (or from their <i>""friends""</i>), but also from members of their derived classes.</li>
<li>Finally, <code>public</code> members are accessible from anywhere where the object is visible.</li>
</ul>
<br/>
By default, all members of a class declared with the <code>class</code> keyword have private access for all its members. Therefore, any member that is declared before any other <i>access specifier</i> has private access automatically. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area (<var>void</var>);
} rect;</code></pre></td>
</tr></tbody></table></div>
<br/>
Declares a class (i.e., a type) called <code>Rectangle</code> and an object (i.e., a variable) of this class, called <code>rect</code>. This class contains four members: two data members of type <code>int</code> (member <code>width</code> and member <code>height</code>) with <i>private access</i> (because private is the default access level) and two member functions with <i>public access</i>: the functions <code>set_values</code> and <code>area</code>, of which for now we have only included their declaration, but not their definition.<br/>
<br/>
Notice the difference between the <i>class name</i> and the <i>object name</i>: In the previous example, <code>Rectangle</code> was the <i>class name</i> (i.e., the type), whereas <code>rect</code> was an object of type <code>Rectangle</code>. It is the same relationship <code>int</code> and <code>a</code> have in the following declaration:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a;</code></pre></td>
</tr></tbody></table></div>
<br/>
where <code>int</code> is the type name (the class) and <code>a</code> is the variable name (the object). <br/>
<br/>
After the declarations of <code>Rectangle</code> and <code>rect</code>, any of the public members of object <code>rect</code> can be accessed as if they were normal functions or normal variables, by simply inserting a dot (<code>.</code>) between <i>object name</i> and <i>member name</i>. This follows the same syntax as accessing the members of plain data structures. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>rect.set_values (3,4);
myarea = rect.area();</code></pre></td>
</tr></tbody></table></div>
<br/>
The only members of <code>rect</code> that cannot be accessed from outside the class are <code>width</code> and <code>height</code>, since they have private access and they can only be referred to from within other members of that same class.<br/>
<br/>
Here is the complete example of class Rectangle:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// classes example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area() {<var>return</var> width*height;}
};

<var>void</var> Rectangle::set_values (<var>int</var> x, <var>int</var> y) {
  width = x;
  height = y;
}

<var>int</var> main () {
  Rectangle rect;
  rect.set_values (3,4);
  cout &lt;&lt; <kbd>""area: ""</kbd> &lt;&lt; rect.area();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>area: 12</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This example reintroduces the <i>scope operator</i> (<code>::</code>, two colons), seen in earlier chapters in relation to namespaces. Here it is used in the definition of function <code>set_values</code> to define a member of a class outside the class itself.<br/>
<br/>
Notice that the definition of the member function <code>area</code> has been included directly within the definition of class <code>Rectangle</code> given its extreme simplicity. Conversely, <code>set_values</code> it is merely declared with its prototype within the class, but its definition is outside it. In this outside definition, the operator of scope (<code>::</code>) is used to specify that the function being defined is a member of the class <code>Rectangle</code> and not a regular non-member function.<br/>
<br/>
The scope operator (<code>::</code>) specifies the class to which the member being defined belongs, granting exactly the same scope properties as if this function definition was directly included within the class definition. For example, the function <code>set_values</code> in the previous example has access to the variables <code>width</code> and <code>height</code>, which are private members of class <code>Rectangle</code>, and thus only accessible from other members of the class, such as this.<br/>
<br/>
The only difference between defining a member function completely within the class definition or to just include its declaration in the function and define it later outside the class, is that in the first case the function is automatically considered an <i>inline</i> member function by the compiler, while in the second it is a normal (not-inline) class member function. This causes no differences in behavior, but only on possible compiler optimizations.<br/>
<br/>
Members <code>width</code> and <code>height</code> have private access (remember that if nothing else is specified, all members of a class defined with keyword <code>class</code> have private access). By declaring them private, access from outside the class is not allowed. This makes sense, since we have already defined a member function to set values for those members within the object: the member function <code>set_values</code>. Therefore, the rest of the program does not need to have direct access to them. Perhaps in a so simple example as this, it is difficult to see how restricting access to these variables may be useful, but in greater projects it may be very important that values cannot be modified in an unexpected way (unexpected from the point of view of the object).<br/>
<br/>
The most important property of a class is that it is a type, and as such, we can declare multiple objects of it. For example, following with the previous example of class <code>Rectangle</code>, we could have declared the object <code>rectb</code> in addition to object <code>rect</code>:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// example: one class, two objects</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var>,<var>int</var>);
    <var>int</var> area () {<var>return</var> width*height;}
};

<var>void</var> Rectangle::set_values (<var>int</var> x, <var>int</var> y) {
  width = x;
  height = y;
}

<var>int</var> main () {
  Rectangle rect, rectb;
  rect.set_values (3,4);
  rectb.set_values (5,6);
  cout &lt;&lt; <kbd>""rect area: ""</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>""rectb area: ""</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>rect area: 12
rectb area: 30  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this particular case, the class (type of the objects) is <code>Rectangle</code>, of which there are two instances (i.e., objects): <code>rect</code> and <code>rectb</code>. Each one of them has its own member variables and member functions.<br/>
<br/>
Notice that the call to <code>rect.area()</code> does not give the same result as the call to <code>rectb.area()</code>. This is because each object of class <code>Rectangle</code> has its own variables <code>width</code> and <code>height</code>, as they -in some way- have also their own function members <code>set_value</code> and <code>area</code> that operate on the object's own member variables.<br/>
<br/>
Classes allow programming using object-oriented paradigms: Data and functions are both members of the object, reducing the need to pass and carry handlers or other state variables as arguments to functions, because they are part of the object whose member is called. Notice that no arguments were passed on the calls to <code>rect.area</code> or <code>rectb.area</code>. Those member functions directly used the data members of their respective objects <code>rect</code> and <code>rectb</code>.<br/>
</section>
<br/>
<section id=""constructors"">
<h3>Constructors</h3>
What would happen in the previous example if we called the member function <code>area</code> before having called <code>set_values</code>? An undetermined result, since the members <code>width</code> and <code>height</code> had never been assigned a value.<br/>
<br/>
In order to avoid that, a class can include a special function called its <i>constructor</i>, which is automatically called whenever a new object of this class is created, allowing the class to initialize member variables or allocate storage.<br/>
<br/>
This constructor function is declared just like a regular member function, but with a name that matches the class name and without any return type; not even <code>void</code>.<br/>
<br/>
The <code>Rectangle</code> class above can easily be improved by implementing a constructor:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// example: class constructor</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    Rectangle (<var>int</var>,<var>int</var>);
    <var>int</var> area () {<var>return</var> (width*height);}
};

Rectangle::Rectangle (<var>int</var> a, <var>int</var> b) {
  width = a;
  height = b;
}

<var>int</var> main () {
  Rectangle rect (3,4);
  Rectangle rectb (5,6);
  cout &lt;&lt; <kbd>""rect area: ""</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>""rectb area: ""</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>rect area: 12
rectb area: 30  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The results of this example are identical to those of the previous example. But now, class <code>Rectangle</code> has no member function <code>set_values</code>, and has instead a constructor that performs a similar action: it initializes the values of <code>width</code> and <code>height</code> with the arguments passed to it.<br/>
<br/>
Notice how these arguments are passed to the constructor at the moment at which the objects of this class are created:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle rect (3,4);
Rectangle rectb (5,6);</code></pre></td>
</tr></tbody></table></div>
<br/>
Constructors cannot be called explicitly as if they were regular member functions. They are only executed once, when a new object of that class is created.<br/>
<br/>
Notice how neither the constructor prototype declaration (within the class) nor the latter constructor definition, have return values; not even <code>void</code>: Constructors never return values, they simply initialize the object.<br/>
</section>
<br/>
<section id=""overloading_constructors"">
<h3>Overloading constructors</h3>
Like any other function, a constructor can also be overloaded with different versions taking different parameters: with a different number of parameters and/or parameters of different types. The compiler will automatically call the one whose parameters match the arguments:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// overloading class constructors</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    Rectangle ();
    Rectangle (<var>int</var>,<var>int</var>);
    <var>int</var> area (<var>void</var>) {<var>return</var> (width*height);}
};

Rectangle::Rectangle () {
  width = 5;
  height = 5;
}

Rectangle::Rectangle (<var>int</var> a, <var>int</var> b) {
  width = a;
  height = b;
}

<var>int</var> main () {
  Rectangle rect (3,4);
  Rectangle rectb;
  cout &lt;&lt; <kbd>""rect area: ""</kbd> &lt;&lt; rect.area() &lt;&lt; endl;
  cout &lt;&lt; <kbd>""rectb area: ""</kbd> &lt;&lt; rectb.area() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>rect area: 12
rectb area: 25  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In the above example, two objects of class <code>Rectangle</code> are constructed: <code>rect</code> and <code>rectb</code>. <code>rect</code> is constructed with two arguments, like in the example before.<br/>
<br/>
But this example also introduces a special kind constructor: the <i>default constructor</i>. The <i>default constructor</i> is the constructor that takes no parameters, and it is special because it is called when an object is declared but is not initialized with any arguments. In the example above, the <i>default constructor</i> is called for <code>rectb</code>. Note how <code>rectb</code> is not even constructed with an empty set of parentheses - in fact, empty parentheses cannot be used to call the default constructor:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle rectb;   <cite>// ok, default constructor called</cite>
Rectangle rectc(); <cite>// oops, default constructor NOT called </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
This is because the empty set of parentheses would make of <code>rectc</code> a function declaration instead of an object declaration: It would be a function that takes no arguments and returns a value of type <code>Rectangle</code>.<br/>
</section>
<br/>
<section id=""uniform_initialization"">
<h3>Uniform initialization</h3>
The way of calling constructors by enclosing their arguments in parentheses, as shown above, is known as <i>functional form</i>. But constructors can also be called with other syntaxes:<br/>
<br/>
First, constructors with a single parameter can be called using the variable initialization syntax (an equal sign followed by the argument):<br/>
<br/>
<code>class_name  object_name = initialization_value;</code> <br/>
<br/>
More recently, C++ introduced the possibility of constructors to be called using <i>uniform initialization</i>, which essentially is the same as the functional form, but using braces (<code>{}</code>) instead of parentheses (<code>()</code>):<br/>
<br/>
<code>class_name object_name { value, value, value, ... }</code> <br/>
<br/>
Optionally, this last syntax can include an equal sign before the braces.<br/>
<br/>
Here is an example with four ways to construct objects of a class whose constructor takes a single parameter:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// classes and uniform initialization</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Circle {
    <var>double</var> radius;
  <var>public</var>:
    Circle(<var>double</var> r) { radius = r; }
    <var>double</var> circum() {<var>return</var> 2*radius*3.14159265;}
};

<var>int</var> main () {
  Circle foo (10.0);   <cite>// functional form</cite>
  Circle bar = 20.0;   <cite>// assignment init.</cite>
  Circle baz {30.0};   <cite>// uniform init.</cite>
  Circle qux = {40.0}; <cite>// POD-like</cite>

  cout &lt;&lt; <kbd>""foo's circumference: ""</kbd> &lt;&lt; foo.circum() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>foo's circumference: 62.8319</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
An advantage of uniform initialization over functional form is that, unlike parentheses, braces cannot be confused with function declarations, and thus can be used to explicitly call default constructors:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle rectb;   <cite>// default constructor called</cite>
Rectangle rectc(); <cite>// function declaration (default constructor NOT called)</cite>
Rectangle rectd{}; <cite>// default constructor called </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The choice of syntax to call constructors is largely a matter of style. Most existing code currently uses functional form, and some newer style guides suggest to choose uniform initialization over the others, even though it also has its potential pitfalls for its preference of <code><a href=""/initializer_list"">initializer_list</a></code> as its type.<br/>
</section>
<br/>
<section id=""member_initialization"">
<h3>Member initialization in constructors</h3>
When a constructor is used to initialize other members, these other members can be initialized directly, without resorting to statements in its body. This is done by inserting, before the constructor's body, a colon (<code>:</code>) and a list of initializations for class members. For example, consider a class with the following declaration:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Rectangle {
    <var>int</var> width,height;
  <var>public</var>:
    Rectangle(<var>int</var>,<var>int</var>);
    <var>int</var> area() {<var>return</var> width*height;}
};</code></pre></td>
</tr></tbody></table></div>
<br/>
The constructor for this class could be defined, as usual, as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle::Rectangle (<var>int</var> x, <var>int</var> y) { width=x; height=y; }</code></pre></td>
</tr></tbody></table></div>
<br/>
But it could also be defined using <i>member initialization</i> as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle::Rectangle (<var>int</var> x, <var>int</var> y) : width(x) { height=y; }</code></pre></td>
</tr></tbody></table></div>
<br/>
Or even:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle::Rectangle (<var>int</var> x, <var>int</var> y) : width(x), height(y) { }</code></pre></td>
</tr></tbody></table></div>
<br/>
Note how in this last case, the constructor does nothing else than initialize its members, hence it has an empty function body.<br/>
<br/>
For members of fundamental types, it makes no difference which of the ways above the constructor is defined, because they are not initialized by default, but for member objects (those whose type is a class), if they are not initialized after the colon, they are default-constructed.<br/>
<br/>
Default-constructing all members of a class may or may always not be convenient: in some cases, this is a waste (when the member is then reinitialized otherwise in the constructor), but in some other cases, default-construction is not even possible (when the class does not have a default constructor). In these cases, members shall be initialized in the member initialization list. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// member initialization</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Circle {
    <var>double</var> radius;
  <var>public</var>:
    Circle(<var>double</var> r) : radius(r) { }
    <var>double</var> area() {<var>return</var> radius*radius*3.14159265;}
};

<var>class</var> Cylinder {
    Circle base;
    <var>double</var> height;
  <var>public</var>:
    Cylinder(<var>double</var> r, <var>double</var> h) : base (r), height(h) {}
    <var>double</var> volume() {<var>return</var> base.area() * height;}
};

<var>int</var> main () {
  Cylinder foo (10,20);

  cout &lt;&lt; <kbd>""foo's volume: ""</kbd> &lt;&lt; foo.volume() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>foo's volume: 6283.19</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, class <code>Cylinder</code> has a member object whose type is another class (<code>base</code>'s type is <code>Circle</code>). Because objects of class <code>Circle</code> can only be constructed with a parameter, <code>Cylinder</code>'s constructor needs to call <code>base</code>'s constructor, and the only way to do this is in the <i>member initializer list</i>.<br/>
<br/>
These initializations can also use uniform initializer syntax, using braces <code>{}</code> instead of parentheses <code>()</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Cylinder::Cylinder (<var>double</var> r, <var>double</var> h) : base{r}, height{h} { }</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""pointers_to_classes"">
<h3>Pointers to classes</h3>
Objects can also be pointed to by pointers: Once declared, a class becomes a valid type, so it can be used as the type pointed to by a pointer. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle * prect;</code></pre></td>
</tr></tbody></table></div>
<br/>
is a pointer to an object of class <code>Rectangle</code>.<br/>
<br/>
Similarly as with plain data structures, the members of an object can be accessed directly from a pointer by using the arrow operator (<code>-&gt;</code>). Here is an example with some possible combinations:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/></code></pre></td>
<td class=""source""><pre><code><cite>// pointer to classes example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
  <var>int</var> width, height;
<var>public</var>:
  Rectangle(<var>int</var> x, <var>int</var> y) : width(x), height(y) {}
  <var>int</var> area(<var>void</var>) { <var>return</var> width * height; }
};


<var>int</var> main() {
  Rectangle obj (3, 4);
  Rectangle * foo, * bar, * baz;
  foo = &amp;obj;
  bar = <var>new</var> Rectangle (5, 6);
  baz = <var>new</var> Rectangle[2] { {2,5}, {3,6} };
  cout &lt;&lt; <kbd>""obj's area: ""</kbd> &lt;&lt; obj.area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""*foo's area: ""</kbd> &lt;&lt; foo-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""*bar's area: ""</kbd> &lt;&lt; bar-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""baz[0]'s area:""</kbd> &lt;&lt; baz[0].area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; <kbd>""baz[1]'s area:""</kbd> &lt;&lt; baz[1].area() &lt;&lt; <kbd>'\n'</kbd>;       
  <var>delete</var> bar;
  <var>delete</var>[] baz;
  <var>return</var> 0;
}	</code></pre></td>
</tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This example makes use of several operators to operate on objects and pointers (operators <code>*</code>, <code>&amp;</code>, <code>.</code>, <code>-&gt;</code>, <code>[]</code>). They can be interpreted as:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>expression</th><th>can be read as</th></tr>
<tr><td><code>*x</code></td><td>pointed to by <code>x</code></td></tr>
<tr><td><code>&amp;x</code></td><td>address of <code>x</code></td></tr>
<tr><td><code>x.y</code></td><td>member <code>y</code> of object <code>x</code></td></tr>
<tr><td><code>x-&gt;y</code></td><td>member <code>y</code> of object pointed to by <code>x</code></td></tr>
<tr><td><code>(*x).y</code></td><td>member <code>y</code> of object pointed to by <code>x</code> (equivalent to the previous one)</td></tr>
<tr><td><code>x[0]</code></td><td>first object pointed to by <code>x</code></td></tr>
<tr><td><code>x[1]</code></td><td>second object pointed to by <code>x</code></td></tr>
<tr><td><code>x[n]</code></td><td>(<code>n+1</code>)th object pointed to by <code>x</code></td></tr>
</tbody></table>
<br/>
Most of these expressions have been introduced in earlier chapters. Most notably, the chapter about arrays introduced the offset operator (<code>[]</code>) and the chapter about plain data structures introduced the arrow operator (<code>-&gt;</code>).<br/>
</section>
<br/>
<section id=""struct_and_union"">
<h3>Classes defined with struct and union</h3>
Classes can be defined not only with keyword <code>class</code>, but also with keywords <code>struct</code> and <code>union</code>.<br/>
<br/>
The keyword <code>struct</code>, generally used to declare plain data structures, can also be used to declare classes that have member functions, with the same syntax as with keyword <code>class</code>. The only difference between both is that members of classes declared with the keyword <code>struct</code> have <code>public</code> access by default, while members of classes declared with the keyword <code>class</code> have <code>private</code> access by default. For all other purposes both keywords are equivalent in this context.<br/>
<br/>
Conversely, the concept of <i>unions</i> is different from that of classes declared with <code>struct</code> and <code>class</code>, since unions only store one data member at a time, but nevertheless they are also classes and can thus also hold member functions. The default access in union classes is <code>public</code>.<br/>
</section></div>"
Classes,Classes (II),"<div class=""C_doc""><h1>Classes (II)</h1>
<section id=""overloading_operators"">
<h3>Overloading operators</h3>
Classes, essentially, define new types to be used in C++ code. And types in C++ not only interact with code by means of constructions and assignments. They also interact by means of operators. For example, take the following operation on fundamental types:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> a, b, c;
a = b + c;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, different variables of a fundamental type (<code>int</code>) are applied the addition operator, and then the assignment operator. For a fundamental arithmetic type, the meaning of such operations is generally obvious and unambiguous, but it may not be so for certain class types. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>struct</var> myclass {
  string product;
  <var>float</var> price;
} a, b, c;
a = b + c;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, it is not obvious what the result of the addition operation on <code>b</code> and <code>c</code> does. In fact, this code alone would cause a compilation error, since the type <code>myclass</code> has no defined behavior for additions. However, C++ allows most operators to be overloaded so that their behavior can be defined for just about any type, including classes. Here is a list of all the operators that can be overloaded:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Overloadable operators</th></tr>
<tr><td><code><pre>+    -    *    /    =    
    &gt;    +=   -=   *=   /=   

   &gt;&gt;<br/>


=  &gt;&gt;=  ==   !=   
=   &gt;=   ++   --   %    &amp;    ^    !    |<br/>
~    &amp;=   ^=   |=   &amp;&amp;   ||   %=   []   ()   ,    -&gt;*  -&gt;   new <br/>
delete    new[]     delete[]</pre></code></td></tr>
</tbody></table>
<br/>
Operators are overloaded by means of <code>operator</code> functions, which are regular functions with special names: their name begins by the <code>operator</code> keyword followed by the <i>operator sign</i> that is overloaded. The syntax is:<br/>
<br/>
<code>type operator sign (parameters) { /*... body ...*/ }</code>
<br/>
For example, <i>cartesian vectors</i> are sets of two coordinates: <code>x</code> and <code>y</code>. The addition operation of two <i>cartesian vectors</i> is defined as the addition both <code>x</code> coordinates together, and both <code>y</code> coordinates together. For example, adding the <i>cartesian vectors</i> <code>(3,1)</code> and <code>(1,2)</code> together would result in <code>(3+1,1+2) = (4,3)</code>. This could be implemented in C++ with the following code:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// overloading operators example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CVector {
  <var>public</var>:
    <var>int</var> x,y;
    CVector () {};
    CVector (<var>int</var> a,<var>int</var> b) : x(a), y(b) {}
    CVector <var>operator</var> + (<var>const</var> CVector&amp;);
};

CVector CVector::<var>operator</var>+ (<var>const</var> CVector&amp; param) {
  CVector temp;
  temp.x = x + param.x;
  temp.y = y + param.y;
  <var>return</var> temp;
}

<var>int</var> main () {
  CVector foo (3,1);
  CVector bar (1,2);
  CVector result;
  result = foo + bar;
  cout &lt;&lt; result.x &lt;&lt; <kbd>','</kbd> &lt;&lt; result.y &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>4,3</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
If confused about so many appearances of <code>CVector</code>, consider that some of them refer to the class name (i.e., the type) <code>CVector</code> and some others are functions with that name (i.e., constructors, which must have the same name as the class). For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>CVector (<var>int</var>, <var>int</var>) : x(a), y(b) {}  <cite>// function name CVector (constructor)</cite>
CVector <var>operator</var>+ (<var>const</var> CVector&amp;); <cite>// function that returns a CVector  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The function <code>operator+</code> of class <code>CVector</code> overloads the addition operator (<code>+</code>) for that type. Once declared, this function can be called either implicitly using the operator, or explicitly using its functional name:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>c = a + b;
c = a.<var>operator</var>+ (b);</code></pre></td>
</tr></tbody></table></div>
<br/>
Both expressions are equivalent.<br/>
<br/>
The operator overloads are just regular functions which can have any behavior; there is actually no requirement that the operation performed by that overload bears a relation to the mathematical or usual meaning of the operator, although it is strongly recommended. For example, a class that overloads <code>operator+</code> to actually subtract or that overloads <code>operator==</code> to fill the object with zeros, is perfectly valid, although using such a class could be challenging.<br/>
<br/>
The parameter expected for a member function overload for operations such as <code>operator+</code> is naturally the operand to the right hand side of the operator. This is common to all binary operators (those with an operand to its left and one operand to its right). But operators can come in diverse forms. Here you have a table with a summary of the parameters needed for each of the different operators than can be overloaded (please, replace <code>@</code> by the operator in each case):<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Expression</th><th>Operator</th><th>Member function</th><th>Non-member function</th></tr>
<tr><td><code>@a</code></td><td><code>+ - * &amp; ! ~ ++ --</code></td><td><code>A::operator@()</code></td><td><code>operator@(A)</code></td></tr>
<tr><td><code>a@</code></td><td><code>++ --</code></td><td><code>A::operator@(int)</code></td><td><code>operator@(A,int)</code></td></tr>
<tr><td><code>a@b</code></td><td><code>+ - * / % ^ &amp; | &lt; &gt; == != &lt;= &gt;= &lt;&lt; &gt;&gt; &amp;&amp; || ,</code></td><td><code>A::operator@(B)</code></td><td><code>operator@(A,B)</code></td></tr>
<tr><td><code>a@b</code></td><td><code>= += -= *= /= %= ^= &amp;= |= &lt;&lt;= &gt;&gt;= []</code></td><td><code>A::operator@(B)</code></td><td>-</td></tr>
<tr><td><code>a(b,c...)</code></td><td><code>()</code></td><td><code>A::operator()(B,C...)</code></td><td>-</td></tr>
<tr><td><code>a-&gt;b</code></td><td><code>-&gt;</code></td><td><code>A::operator-&gt;()</code></td><td>-</td></tr>
<tr><td><code>(TYPE) a</code></td><td><code>TYPE</code></td><td><code>A::operator TYPE()</code></td><td>-</td></tr>
</tbody></table>
Where <code>a</code> is an object of class <code>A</code>, <code>b</code> is an object of class <code>B</code> and <code>c</code> is an object of class <code>C</code>. <code>TYPE</code> is just any type (that operators overloads the conversion to type <code>TYPE</code>).<br/>
<br/>
Notice that some operators may be overloaded in two forms: either as a member function or as a non-member function: The first case has been used in the example above for <code>operator+</code>. But some operators can also be overloaded as non-member functions; In this case, the operator function takes an object of the proper class as first argument.<br/>
<br/>
For example:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// non-member operator overloads</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> CVector {
  <var>public</var>:
    <var>int</var> x,y;
    CVector () {}
    CVector (<var>int</var> a, <var>int</var> b) : x(a), y(b) {}
};


CVector <var>operator</var>+ (<var>const</var> CVector&amp; lhs, <var>const</var> CVector&amp; rhs) {
  CVector temp;
  temp.x = lhs.x + rhs.x;
  temp.y = lhs.y + rhs.y;
  <var>return</var> temp;
}

<var>int</var> main () {
  CVector foo (3,1);
  CVector bar (1,2);
  CVector result;
  result = foo + bar;
  cout &lt;&lt; result.x &lt;&lt; <kbd>','</kbd> &lt;&lt; result.y &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>4,3</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""this"">
<h3>The keyword this</h3>
The keyword <code>this</code> represents a pointer to the object whose member function is being executed. It is used within a class's member function to refer to the object itself.<br/>
<br/>
One of its uses can be to check if a parameter passed to a member function is the object itself. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// example on this</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Dummy {
  <var>public</var>:
    <var>bool</var> isitme (Dummy&amp; param);
};

<var>bool</var> Dummy::isitme (Dummy&amp; param)
{
  <var>if</var> (&amp;param == <var>this</var>) <var>return</var> <var>true</var>;
  <var>else</var> <var>return</var> <var>false</var>;
}

<var>int</var> main () {
  Dummy a;
  Dummy* b = &amp;a;
  <var>if</var> ( b-&gt;isitme(a) )
    cout &lt;&lt; <kbd>""yes, &amp;a is b\n""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>yes, &amp;a is b</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
It is also frequently used in <code>operator=</code> member functions that return objects by reference. Following with the examples on <i>cartesian vector</i> seen before, its <code>operator=</code> function could have been defined as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code>CVector&amp; CVector::<var>operator</var>= (<var>const</var> CVector&amp; param)
{
  x=param.x;
  y=param.y;
  <var>return</var> *<var>this</var>;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
In fact, this function is very similar to the code that the compiler generates implicitly for this class for <code>operator=</code>.<br/>
</section>
<br/>
<section id=""static_members"">
<h3>Static members</h3>
A class can contain static members, either data or functions.<br/>
<br/>
A static data member of a class is also known as a ""class variable"", because there is only one common variable for all the objects of that same class, sharing the same value: i.e., its value is not different from one object of this class to another.<br/>
<br/>
For example, it may be used for a variable within a class that can contain a counter with the number of objects of that class that are currently allocated, as in the following example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// static members in classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Dummy {
  <var>public</var>:
    <var>static</var> <var>int</var> n;
    Dummy () { n++; };
};

<var>int</var> Dummy::n=0;

<var>int</var> main () {
  Dummy a;
  Dummy b[5];
  cout &lt;&lt; a.n &lt;&lt; <kbd>'\n'</kbd>;
  Dummy * c = <var>new</var> Dummy;
  cout &lt;&lt; Dummy::n &lt;&lt; <kbd>'\n'</kbd>;
  <var>delete</var> c;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>6
7</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In fact, static members have the same properties as non-member variables but they enjoy class scope. For that reason, and to avoid them to be declared several times, they cannot be initialized directly in the class, but need to be initialized somewhere outside it. As in the previous example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> Dummy::n=0;</code></pre></td>
</tr></tbody></table></div>
<br/>
Because it is a common variable value for all the objects of the same class, it can be referred to as a member of any object of that class or even directly by the class name (of course this is only valid for static members):<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; a.n;
cout &lt;&lt; Dummy::n;</code></pre></td>
</tr></tbody></table></div>
<br/>
These two calls above are referring to the same variable: the static variable <code>n</code> within class <code>Dummy</code> shared by all objects of this class.<br/>
<br/>
Again, it is just like a non-member variable, but with a name that requires to be accessed like a member of a class (or an object).<br/>
<br/>
Classes can also have static member functions. These represent the same: members of a class that are common to all object of that class, acting exactly as non-member functions but being accessed like members of the class. Because they are like non-member functions, they cannot access non-static members of the class (neither member variables nor member functions). They neither can use the keyword <code>this</code>.<br/>
</section>
<br/>
<section id=""const_member_functions"">
<h3>Const member functions</h3>
When an object of a class is qualified as a <code>const</code> object:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>const</var> MyClass myobject;</code></pre></td>
</tr></tbody></table></div>
<br/>
The access to its data members from outside the class is restricted to read-only, as if all its data members were <code>const</code> for those accessing them from outside the class. Note though, that the constructor is still called and is allowed to initialize and modify these data members:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/></code></pre></td>
<td class=""source""><pre><code><cite>// constructor on const object</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> MyClass {
  <var>public</var>:
    <var>int</var> x;
    MyClass(<var>int</var> val) : x(val) {}
    <var>int</var> get() {<var>return</var> x;}
};

<var>int</var> main() {
  <var>const</var> MyClass foo(10);
<cite>// foo.x = 20;            // not valid: x cannot be modified</cite>
  cout &lt;&lt; foo.x &lt;&lt; <kbd>'\n'</kbd>;  <cite>// ok: data member x can be read</cite>
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The member functions of a <code>const</code> object can only be called if they are themselves specified as <code>const</code> members; in the example above, member <code>get</code> (which is not specified as <code>const</code>) cannot be called from <code>foo</code>. To specify that a member is a <code>const</code> member, the <code>const</code> keyword shall follow the function prototype, after the closing parenthesis for its parameters:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> get() <var>const</var> {<var>return</var> x;}</code></pre></td>
</tr></tbody></table></div>
<br/>
Note that <code>const</code> can be used to qualify the type returned by a member function. This <code>const</code> is not the same as the one which specifies a member as <code>const</code>. Both are independent and are located at different places in the function prototype:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> get() <var>const</var> {<var>return</var> x;}        <cite>// const member function</cite>
<var>const</var> <var>int</var>&amp; get() {<var>return</var> x;}       <cite>// member function returning a const&amp;</cite>
<var>const</var> <var>int</var>&amp; get() <var>const</var> {<var>return</var> x;} <cite>// const member function returning a const&amp; </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Member functions specified to be <code>const</code> cannot modify non-static data members nor call other non-<code>const</code> member functions. In essence, <code>const</code> members shall not modify the state of an object.<br/>
<br/>
<code>const</code> objects are limited to access only member functions marked as <code>const</code>, but non-<code>const</code> objects are not restricted and thus can access both <code>const</code> and non-<code>const</code> member functions alike.<br/>
<br/>
You may think that anyway you are seldom going to declare <code>const</code> objects, and thus marking all members that don't modify the object as const is not worth the effort, but const objects are actually very common. Most functions taking classes as parameters actually take them by <code>const</code> reference, and thus, these functions can only access their <code>const</code> members:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/></code></pre></td>
<td class=""source""><pre><code><cite>// const objects</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> MyClass {
    <var>int</var> x;
  <var>public</var>:
    MyClass(<var>int</var> val) : x(val) {}
    <var>const</var> <var>int</var>&amp; get() <var>const</var> {<var>return</var> x;}
};

<var>void</var> print (<var>const</var> MyClass&amp; arg) {
  cout &lt;&lt; arg.get() &lt;&lt; <kbd>'\n'</kbd>;
}

<var>int</var> main() {
  MyClass foo (10);
  print(foo);

  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
If in this example, <code>get</code> was not specified as a <code>const</code> member, the call to <code>arg.get()</code> in the <code>print</code> function would not be possible, because <code>const</code> objects only have access to <code>const</code> member functions.<br/>
<br/>
Member functions can be overloaded on their constness: i.e., a class may have two member functions with identical signatures except that one is <code>const</code> and the other is not: in this case, the <code>const</code> version is called only when the object is itself const, and the non-<code>const</code> version is called when the object is itself non-<code>const</code>.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// overloading members on constness</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> MyClass {
    <var>int</var> x;
  <var>public</var>:
    MyClass(<var>int</var> val) : x(val) {}
    <var>const</var> <var>int</var>&amp; get() <var>const</var> {<var>return</var> x;}
    <var>int</var>&amp; get() {<var>return</var> x;}
};

<var>int</var> main() {
  MyClass foo (10);
  <var>const</var> MyClass bar (20);
  foo.get() = 15;         <cite>// ok: get() returns int&amp;</cite>
<cite>// bar.get() = 25;        // not valid: get() returns const int&amp;</cite>
  cout &lt;&lt; foo.get() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; bar.get() &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>15
20</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section>
<br/>
<section id=""class_templates"">
<h3>Class templates</h3>
Just like we can create function templates, we can also create class templates, allowing classes to have members that use template parameters as types. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/></code></pre></td>
<td class=""source""><pre><code><var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> mypair {
    T values [2];
  <var>public</var>:
    mypair (T first, T second)
    {
      values[0]=first; values[1]=second;
    }
};</code></pre></td>
</tr></tbody></table></div>
<br/>
The class that we have just defined serves to store two elements of any valid type. For example, if we wanted to declare an object of this class to store two integer values of type <code>int</code> with the values 115 and 36 we would write:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>mypair&lt;<var>int</var>&gt; myobject (115, 36);</code></pre></td>
</tr></tbody></table></div>
<br/>
This same class could also be used to create an object to store any other type, such as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>mypair&lt;<var>double</var>&gt; myfloats (3.0, 2.18);</code></pre></td>
</tr></tbody></table></div>
<br/>
The constructor is the only member function in the previous class template and it has been defined inline within the class definition itself. In case that a member function is defined outside the defintion of the class template, it shall be preceded with the <code>template &lt;...&gt;</code> prefix:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/>29<br/>30<br/>31<br/>32<br/>33<br/>34<br/>35<br/>36<br/>37<br/>38<br/>39<br/>40<br/>41<br/>42<br/>43<br/>44<br/>45<br/>46<br/>47<br/>48<br/>49<br/>50<br/>51<br/>52<br/>53<br/>54<br/>55<br/>56<br/>57<br/>58<br/>59<br/>60<br/>61<br/>62<br/>63<br/>64<br/>65<br/>66<br/>67<br/>68<br/>69<br/>70<br/>71<br/>72<br/>73<br/>74<br/>75<br/>76<br/>77<br/>78<br/>79<br/>80<br/>81<br/>82<br/>83<br/>84<br/>85<br/>86<br/>87<br/>88<br/>89<br/>90<br/>91<br/>92<br/>93<br/>94<br/>95<br/>96<br/>97<br/>98<br/>99<br/>100<br/></code></pre></td>
<td class=""source""><pre><code><cite>// class templates</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> mypair {
    T a, b;
  <var>public</var>:
    mypair (T first, T second)
      {a=first; b=second;}
    T getmax ();
};

<var>template</var> &lt;<var>class</var> T&gt;
T mypair&lt;T&gt;::getmax ()
{
  T retval;
  retval = a&gt;b? a : b;
  <var>return</var> retval;
}

<var>int</var> main () {
  mypair &lt;<var>int</var>&gt; myobject (100, 75);
  cout &lt;&lt; myobject.getmax();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>100</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice the syntax of the definition of member function <code>getmax</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>template</var> &lt;<var>class</var> T&gt;
T mypair&lt;T&gt;::getmax ()</code></pre></td>
</tr></tbody></table></div>
<br/>
Confused by so many <code>T</code>'s? There are three <code>T</code>'s in this declaration: The first one is the template parameter. The second <code>T</code> refers to the type returned by the function. And the third <code>T</code> (the one between angle brackets) is also a requirement: It specifies that this function's template parameter is also the class template parameter.<br/>
</section>
<br/>
<section id=""template_specialization"">
<h3>Template specialization</h3>
It is possible to define a different implementation for a template when a specific type is passed as template argument. This is called a <i>template specialization</i>.<br/>
<br/>
For example, let's suppose that we have a very simple class called <code>mycontainer</code> that can store one element of any type and that has just one member function called <code>increase</code>, which increases its value. But we find that when it stores an element of type <code>char</code> it would be more convenient to have a completely different implementation with a function member <code>uppercase</code>, so we decide to declare a class template specialization for that type:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// template specialization</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<cite>// class template:</cite>
<var>template</var> &lt;<var>class</var> T&gt;
<var>class</var> mycontainer {
    T element;
  <var>public</var>:
    mycontainer (T arg) {element=arg;}
    T increase () {<var>return</var> ++element;}
};

<cite>// class template specialization:</cite>
<var>template</var> &lt;&gt;
<var>class</var> mycontainer &lt;<var>char</var>&gt; {
    <var>char</var> element;
  <var>public</var>:
    mycontainer (<var>char</var> arg) {element=arg;}
    <var>char</var> uppercase ()
    {
      <var>if</var> ((element&gt;=<kbd>'a'</kbd>)&amp;&amp;(element&lt;=<kbd>'z'</kbd>))
      element+=<kbd>'A'</kbd>-<kbd>'a'</kbd>;
      <var>return</var> element;
    }
};

<var>int</var> main () {
  mycontainer&lt;<var>int</var>&gt; myint (7);
  mycontainer&lt;<var>char</var>&gt; mychar (<kbd>'j'</kbd>);
  cout &lt;&lt; myint.increase() &lt;&lt; endl;
  cout &lt;&lt; mychar.uppercase() &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>8
J</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This is the syntax used for the class template specialization:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>template</var> &lt;&gt; <var>class</var> mycontainer &lt;<var>char</var>&gt; { ... };</code></pre></td>
</tr></tbody></table></div>
<br/>
First of all, notice that we precede the class name with <code>template&lt;&gt;</code> , including an empty parameter list. This is because all types are known and no template arguments are required for this specialization, but still, it is the specialization of a class template, and thus it requires to be noted as such.<br/>
<br/>
But more important than this prefix, is the <code>&lt;char&gt;</code> specialization parameter after the class template name. This specialization parameter itself identifies the type for which the template class is being specialized (<code>char</code>). Notice the differences between the generic class template and the specialization:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>template</var> &lt;<var>class</var> T&gt; <var>class</var> mycontainer { ... };
<var>template</var> &lt;&gt; <var>class</var> mycontainer &lt;<var>char</var>&gt; { ... };</code></pre></td>
</tr></tbody></table></div>
<br/>
The first line is the generic template, and the second one is the specialization.<br/>
<br/>
When we declare specializations for a template class, we must also define all its members, even those identical to the generic template class, because there is no ""inheritance"" of members from the generic template to the specialization.<br/>
</section></div>"
Classes,Special members,"<div class=""C_doc""><h1>Special members</h1>
<section id=""special_member_functions"">
[NOTE: This chapter requires proper understanding of <i><a href=""/doc/tutorial/dynamic/"">dynamically allocated memory</a></i>]<br/>
<br/>
<dfn>Special member functions</dfn> are member functions that are implicitly defined as member of classes under certain circumstances. There are six:<br/>
<br/>
<table class=""boxed""><tbody><tr><th>Member function</th><th>typical form for class <code>C</code>:</th></tr>
<tr><td><a href=""#default_constructor"">Default constructor</a></td><td><code>C::C();</code></td></tr>
<tr><td><a href=""#destructor"">Destructor</a></td><td><code>C::~C();</code></td></tr>
<tr><td><a href=""#copy_constructor"">Copy constructor</a></td><td><code>C::C (const C&amp;);</code></td></tr>
<tr><td><a href=""#copy_assignment"">Copy assignment</a></td><td><code>C&amp; operator= (const C&amp;);</code></td></tr>
<tr><td><a href=""#move"">Move constructor</a></td><td><code>C::C (C&amp;&amp;);</code></td></tr>
<tr><td><a href=""#move"">Move assignment</a></td><td><code>C&amp; operator= (C&amp;&amp;);</code></td></tr>
</tbody></table>
<br/>
Let's examine each of these:<br/>
</section>
<br/>
<section id=""default_constructor"">
<h3>Default constructor</h3>
The <dfn>default constructor</dfn> is the constructor called when objects of a class are declared, but are not initialized with any arguments.<br/>
<br/>
If a class definition has no constructors, the compiler assumes the class to have an implicitly defined <i>default constructor</i>. Therefore, after declaring a class like this:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Example {
  <var>public</var>:
    <var>int</var> total;
    <var>void</var> accumulate (<var>int</var> x) { total += x; }
};</code></pre></td>
</tr></tbody></table></div>
<br/>
The compiler assumes that <code>Example</code> has a <i>default constructor</i>. Therefore, objects of this class can be constructed by simply declaring them without any arguments:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Example ex;</code></pre></td>
</tr></tbody></table></div>
<br/>
But as soon as a class has some constructor taking any number of parameters explicitly declared, the compiler no longer provides an implicit default constructor, and no longer allows the declaration of new objects of that class without arguments. For example, the following class:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Example2 {
  <var>public</var>:
    <var>int</var> total;
    Example2 (<var>int</var> initial_value) : total(initial_value) { };
    <var>void</var> accumulate (<var>int</var> x) { total += x; };
};</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, we have declared a constructor with a parameter of type <code>int</code>. Therefore the following object declaration would be correct:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Example2 ex (100);   <cite>// ok: calls constructor </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
But the following:<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Example2 ex;         <cite>// not valid: no default constructor </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Would not be valid, since the class has been declared with an explicit constructor taking one argument and that replaces the implicit <i>default constructor</i> taking none.<br/>
<br/>
Therefore, if objects of this class need to be constructed without arguments, the proper <i>default constructor</i> shall also be declared in the class. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// classes and default constructors</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Example3 {
    string data;
  <var>public</var>:
    Example3 (<var>const</var> string&amp; str) : data(str) {}
    Example3() {}
    <var>const</var> string&amp; content() <var>const</var> {<var>return</var> data;}
};

<var>int</var> main () {
  Example3 foo;
  Example3 bar (<kbd>""Example""</kbd>);

  cout &lt;&lt; <kbd>""bar's content: ""</kbd> &lt;&lt; bar.content() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>bar's content: Example</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Here, <code>Example3</code> has a <i>default constructor</i> (i.e., a constructor without parameters) defined as an empty block:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Example3() {}</code></pre></td>
</tr></tbody></table></div>
<br/>
This allows objects of class <code>Example3</code> to be constructed without arguments (like <code>foo</code> was declared in this example). Normally, a default constructor like this is implicitly defined for all classes that have no other constructors and thus no explicit definition is required. But in this case, <code>Example3</code> has another constructor:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Example3 (<var>const</var> string&amp; str);</code></pre></td>
</tr></tbody></table></div>
<br/>
And when any constructor is explicitly declared in a class, no implicit <i>default constructors</i> is automatically provided.<br/>
</section>
<br/>
<section id=""destructor"">
<h3>Destructor</h3>
Destructors fulfill the opposite functionality of <i>constructors</i>: They are responsible for the necessary cleanup needed by a class when its lifetime ends. The classes we have defined in previous chapters did not allocate any resource and thus did not really require any clean up.<br/>
<br/>
But now, let's imagine that the class in the last example allocates dynamic memory to store the string it had as data member; in this case, it would be very useful to have a function called automatically at the end of the object's life in charge of releasing this memory. To do this, we use a <i>destructor</i>. A destructor is a member function very similar to a <i>default constructor</i>: it takes no arguments and returns nothing, not even <code>void</code>. It also uses the class name as its own name, but preceded with a tilde sign (<code>~</code>):<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// destructors</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Example4 {
    string* ptr;
  <var>public</var>:
    <cite>// constructors:</cite>
    Example4() : ptr(<var>new</var> string) {}
    Example4 (<var>const</var> string&amp; str) : ptr(<var>new</var> string(str)) {}
    <cite>// destructor:</cite>
    ~Example4 () {<var>delete</var> ptr;}
    <cite>// access content:</cite>
    <var>const</var> string&amp; content() <var>const</var> {<var>return</var> *ptr;}
};

<var>int</var> main () {
  Example4 foo;
  Example4 bar (<kbd>""Example""</kbd>);

  cout &lt;&lt; <kbd>""bar's content: ""</kbd> &lt;&lt; bar.content() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>bar's content: Example</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
On construction, <code>Example4</code> allocates storage for a <code>string</code>. Storage that is later released by the destructor.<br/>
<br/>
The destructor for an object is called at the end of its lifetime; in the case of <code>foo</code> and <code>bar</code> this happens at the end of function <code>main</code>.<br/>
</section>
<br/>
<section id=""copy_constructor"">
<h3>Copy constructor</h3>
When an object is passed a named object of its own type as argument, its <i>copy constructor</i> is invoked in order to construct a copy.<br/>
<br/>
A <i>copy constructor</i> is a constructor whose first parameter is of type <i>reference to the class</i> itself (possibly <code>const</code> qualified) and which can be invoked with a single argument of this type. For example, for a class <code>MyClass</code>, the <i>copy constructor</i> may have the following signature:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>MyClass::MyClass (<var>const</var> MyClass&amp;);</code></pre></td>
</tr></tbody></table></div>
<br/>
If a class has no custom <i>copy</i> nor <i>move</i> constructors (or assignments) defined, an implicit <i>copy constructor</i> is provided. This copy constructor simply performs a copy of its own members. For example, for a class such as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> MyClass {
  <var>public</var>:
    <var>int</var> a, b; string c;
};</code></pre></td>
</tr></tbody></table></div>
<br/>
An implicit <i>copy constructor</i> is automatically defined. The definition assumed for this function performs a <i>shallow copy</i>, roughly equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>MyClass::MyClass(<var>const</var> MyClass&amp; x) : a(x.a), b(x.b), c(x.c) {}</code></pre></td>
</tr></tbody></table></div>
<br/>
This default <i>copy constructor</i> may suit the needs of many classes. But <i>shallow copies</i> only copy the members of the class themselves, and this is probably not what we expect for classes like class <code>Example4</code> we defined above, because it contains pointers of which it handles its storage. For that class, performing a <i>shallow copy</i> means that the pointer value is copied, but not the content itself; This means that both objects (the copy and the original) would be sharing a single <code>string</code> object (they would both be pointing to the same object), and at some point (on destruction) both objects would try to delete the same block of memory, probably causing the program to crash on runtime. This can be solved by defining the following custom <i>copy constructor</i> that performs a <i>deep copy</i>:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// copy constructor: deep copy</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Example5 {
    string* ptr;
  <var>public</var>:
    Example5 (<var>const</var> string&amp; str) : ptr(<var>new</var> string(str)) {}
    ~Example5 () {<var>delete</var> ptr;}
    <cite>// copy constructor:</cite>
    Example5 (<var>const</var> Example5&amp; x) : ptr(<var>new</var> string(x.content())) {}
    <cite>// access content:</cite>
    <var>const</var> string&amp; content() <var>const</var> {<var>return</var> *ptr;}
};

<var>int</var> main () {
  Example5 foo (<kbd>""Example""</kbd>);
  Example5 bar = foo;

  cout &lt;&lt; <kbd>""bar's content: ""</kbd> &lt;&lt; bar.content() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>bar's content: Example</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The <i>deep copy</i> performed by this <i>copy constructor</i> allocates storage for a new string, which is initialized to contain a copy of the original object. In this way, both objects (copy and original) have distinct copies of the content stored in different locations.<br/>
</section>
<br/>
<section id=""copy_assignment"">
<h3>Copy assignment</h3>
Objects are not only copied on construction, when they are initialized: They can also be copied on any assignment operation. See the difference:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>MyClass foo;
MyClass bar (foo);       <cite>// object initialization: copy constructor called</cite>
MyClass baz = foo;       <cite>// object initialization: copy constructor called</cite>
foo = bar;               <cite>// object already initialized: copy assignment called </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Note that <code>baz</code> is initialized on construction using an <i>equal sign</i>, but this is not an assignment operation! (although it may look like one): The declaration of an object is not an assignment operation, it is just another of the syntaxes to call single-argument constructors.<br/>
<br/>
The assignment on <code>foo</code> is an assignment operation. No object is being declared here, but an operation is being performed on an existing object; <code>foo</code>.<br/>
<br/>
The <i>copy assignment operator</i> is an overload of <code>operator=</code> which takes a <i>value</i> or <i>reference</i> of the class itself as parameter. The return value is generally a reference to <code>*this</code> (although this is not required). For example, for a class <code>MyClass</code>, the <i>copy assignment</i> may have the following signature:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>MyClass&amp; <var>operator</var>= (<var>const</var> MyClass&amp;);</code></pre></td>
</tr></tbody></table></div>
<br/>
The <i>copy assignment operator</i> is also a <i>special function</i> and is also defined implicitly if a class has no custom <i>copy</i> nor <i>move</i> assignments (nor move constructor) defined.<br/>
<br/>
But again, the <i>implicit</i> version performs a <i>shallow copy</i> which is suitable for many classes, but not for classes with pointers to objects they handle its storage, as is the case in <code>Example5</code>. In this case, not only the class incurs the risk of deleting the pointed object twice, but the assignment creates memory leaks by not deleting the object pointed by the object before the assignment. These issues could be solved with a <i>copy assignment</i> that deletes the previous object and performs a <i>deep copy</i>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code>Example5&amp; <var>operator</var>= (<var>const</var> Example5&amp; x) {
  <var>delete</var> ptr;                      <cite>// delete currently pointed string</cite>
  ptr = <var>new</var> string (x.content());  <cite>// allocate space for new string, and copy</cite>
  <var>return</var> *<var>this</var>;
}
</code></pre></td>
</tr></tbody></table></div>
<br/>
Or even better, since its <code>string</code> member is not constant, it could re-utilize the same <code>string</code> object:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code>Example5&amp; <var>operator</var>= (<var>const</var> Example5&amp; x) {
  *ptr = x.content();
  <var>return</var> *<var>this</var>;
}</code></pre></td>
</tr></tbody></table></div>
<br/>
</section>
<br/>
<section id=""move"">
<h3>Move constructor and assignment</h3>
Similar to copying, moving also uses the value of an object to set the value to another object. But, unlike copying, the content is actually transferred from one object (the source) to the other (the destination): the source loses that content, which is taken over by the destination. This moving only happens when the source of the value is an <i>unnamed object</i>. <br/>
<br/>
<i>Unnamed objects</i> are objects that are temporary in nature, and thus haven't even been given a name. Typical examples of <i>unnamed objects</i> are return values of functions or type-casts.<br/>
<br/>
Using the value of a temporary object such as these to initialize another object or to assign its value, does not really require a copy: the object is never going to be used for anything else, and thus, its value can be <i>moved into</i> the destination object. These cases trigger the <i>move constructor</i> and <i>move assignments</i>:<br/>
<br/>
The <i>move constructor</i> is called when an object is initialized on construction using an unnamed temporary. Likewise, the <i>move assignment</i> is called when an object is assigned the value of an unnamed temporary:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code>MyClass fn();            <cite>// function returning a MyClass object</cite>
MyClass foo;             <cite>// default constructor</cite>
MyClass bar = foo;       <cite>// copy constructor</cite>
MyClass baz = fn();      <cite>// move constructor</cite>
foo = bar;               <cite>// copy assignment</cite>
baz = MyClass();         <cite>// move assignment </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
Both the value returned by <code>fn</code> and the value constructed with <code>MyClass</code> are unnamed temporaries. In these cases, there is no need to make a copy, because the unnamed object is very short-lived and can be acquired by the other object when this is a more efficient operation.<br/>
<br/>
The move constructor and move assignment are members that take a parameter of type <i>rvalue reference to the class</i> itself:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>MyClass (MyClass&amp;&amp;);             <cite>// move-constructor</cite>
MyClass&amp; <var>operator</var>= (MyClass&amp;&amp;);  <cite>// move-assignment </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
An <i>rvalue reference</i> is specified by following the type with two ampersands (<code>&amp;&amp;</code>). As a parameter, an <i>rvalue reference</i> matches arguments of temporaries of this type.<br/>
<br/>
The concept of moving is most useful for objects that manage the storage they use, such as objects that allocate storage with new and delete. In such objects, copying and moving are really different operations:<br/>
- Copying from A to B means that new memory is allocated to B and then the entire content of A is copied to this new memory allocated for B.<br/>
- Moving from A to B means that the memory already allocated to A is transferred to B without allocating any new storage. It involves simply copying the pointer.<br/>
<br/>
For example:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// move constructor/assignment</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Example6 {
    string* ptr;
  <var>public</var>:
    Example6 (<var>const</var> string&amp; str) : ptr(<var>new</var> string(str)) {}
    ~Example6 () {<var>delete</var> ptr;}
    <cite>// move constructor</cite>
    Example6 (Example6&amp;&amp; x) : ptr(x.ptr) {x.ptr=<var>nullptr</var>;}
    <cite>// move assignment</cite>
    Example6&amp; <var>operator</var>= (Example6&amp;&amp; x) {
      <var>delete</var> ptr; 
      ptr = x.ptr;
      x.ptr=<var>nullptr</var>;
      <var>return</var> *<var>this</var>;
    }
    <cite>// access content:</cite>
    <var>const</var> string&amp; content() <var>const</var> {<var>return</var> *ptr;}
    <cite>// addition:</cite>
    Example6 <var>operator</var>+(<var>const</var> Example6&amp; rhs) {
      <var>return</var> Example6(content()+rhs.content());
    }
};


<var>int</var> main () {
  Example6 foo (<kbd>""Exam""</kbd>);
  Example6 bar = Example6(<kbd>""ple""</kbd>);   <cite>// move-construction</cite>
  
  foo = foo + bar;                  <cite>// move-assignment</cite>

  cout &lt;&lt; <kbd>""foo's content: ""</kbd> &lt;&lt; foo.content() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>foo's content: Example</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Compilers already optimize many cases that formally require a move-construction call in what is known as <i>Return Value Optimization</i>. Most notably, when the value returned by a function is used to initialize an object. In these cases, the <i>move constructor</i> may actually never get called.<br/>
<br/>
Note that even though <i>rvalue references</i> can be used for the type of any function parameter, it is seldom useful for uses other than the <i>move constructor</i>. Rvalue references are tricky, and unnecessary uses may be the source of errors quite difficult to track.<br/>
</section>
<br/>
<section id=""implicit"">
<h3>Implicit members</h3>
The six <i>special members functions</i> described above are members implicitly declared on classes under certain circumstances:<br/>
<br/>
<table class=""boxed""><tbody><tr><th>Member function</th><th>implicitly defined:</th><th>default definition:</th></tr>
<tr><td><a href=""#default_constructor"">Default constructor</a></td><td>if no other constructors</td><td>does nothing</td></tr>
<tr><td><a href=""#destructor"">Destructor</a></td><td>if no destructor</td><td>does nothing</td></tr>
<tr><td><a href=""#copy_constructor"">Copy constructor</a></td><td>if no move constructor and no move assignment</td><td>copies all members</td></tr>
<tr><td><a href=""#copy_assignment"">Copy assignment</a></td><td>if no move constructor and no move assignment</td><td>copies all members</td></tr>
<tr><td><a href=""#move"">Move constructor</a></td><td>if no destructor, no copy constructor and no copy nor move assignment</td><td>moves all members</td></tr>
<tr><td><a href=""#move"">Move assignment</a></td><td>if no destructor, no copy constructor and no copy nor move assignment</td><td>moves all members</td></tr>
</tbody></table>
<br/>
Notice how not all <i>special member functions</i> are implicitly defined in the same cases. This is mostly due to backwards compatibility with C structures and earlier C++ versions, and in fact some include deprecated cases. Fortunately, each class can select explicitly which of these members exist with their default definition or which are deleted by using the keywords <code>default</code> and <code>delete</code>, respectively. The syntax is either one of:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""output""><pre><samp>
function_declaration = default;
function_declaration = delete;
</samp></pre></td></tr></tbody></table></div>
<br/>
<br/>
For example:<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// default and delete implicit members</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    Rectangle (<var>int</var> x, <var>int</var> y) : width(x), height(y) {}
    Rectangle() = <var>default</var>;
    Rectangle (<var>const</var> Rectangle&amp; other) = <var>delete</var>;
    <var>int</var> area() {<var>return</var> width*height;}
};

<var>int</var> main () {
  Rectangle foo;
  Rectangle bar (10,20);

  cout &lt;&lt; <kbd>""bar's area: ""</kbd> &lt;&lt; bar.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>bar's area: 200</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Here, <code>Rectangle</code> can be constructed either with two <code>int</code> arguments or be <i>default-constructed</i> (with no arguments). It cannot however be <i>copy-constructed</i> from another <code>Rectangle</code> object, because this function has been deleted. Therefore, assuming the objects of the last example, the following statement would not be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle baz (foo);</code></pre></td>
</tr></tbody></table></div>
<br/>
It could, however, be made explicitly valid by defining its copy constructor as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle::Rectangle (<var>const</var> Rectangle&amp; other) = <var>default</var>;</code></pre></td>
</tr></tbody></table></div>
<br/>
Which would be essentially equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Rectangle::Rectangle (<var>const</var> Rectangle&amp; other) : width(other.width), height(other.height) {}</code></pre></td>
</tr></tbody></table></div>
<br/>
Note that, the keyword <code>default</code> does not define a member function equal to the <i>default constructor</i> (i.e., where <i>default constructor</i> means constructor with no parameters), but equal to the constructor that would be implicitly defined if not deleted.<br/>
<br/>
In general, and for future compatibility, classes that explicitly define one copy/move constructor or one copy/move assignment but not both, are encouraged to specify either <code>delete</code> or <code>default</code> on the other special member functions they don't explicitly define.<br/>
</section></div>"
Classes,Friendship and inheritance,"<div class=""C_doc""><h1>Friendship and inheritance</h1>
<section id=""friend_functions"">
<h3>Friend functions</h3>
In principle, private and protected members of a class cannot be accessed from outside the same class in which they are declared. However, this rule does not apply to <i>""friends""</i>.<br/>
<br/>
<dfn>Friends</dfn> are functions or classes declared with the <code>friend</code> keyword.<br/>
<br/>
A non-member function can access the private and protected members of a class if it is declared a <i>friend</i> of that class. That is done by including a declaration of this external function within the class, and preceding it with the keyword <code>friend</code>:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/></code></pre></td>
<td class=""source""><pre><code><cite>// friend functions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    Rectangle() {}
    Rectangle (<var>int</var> x, <var>int</var> y) : width(x), height(y) {}
    <var>int</var> area() {<var>return</var> width * height;}
    <var>friend</var> Rectangle duplicate (<var>const</var> Rectangle&amp;);
};

Rectangle duplicate (<var>const</var> Rectangle&amp; param)
{
  Rectangle res;
  res.width = param.width*2;
  res.height = param.height*2;
  <var>return</var> res;
}

<var>int</var> main () {
  Rectangle foo;
  Rectangle bar (2,3);
  foo = duplicate (bar);
  cout &lt;&lt; foo.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>24</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The <code>duplicate</code> function is a <i>friend</i> of class <code>Rectangle</code>. Therefore, function <code>duplicate</code> is able to access the members <code>width</code> and <code>height</code> (which are private) of different objects of type <code>Rectangle</code>. Notice though that neither in the declaration of <code>duplicate</code> nor in its later use in <code>main</code>, function <code>duplicate</code> is considered a member of class <code>Rectangle</code>. It isn't! It simply has access to its private and protected members without being a member.<br/>
<br/>
Typical use cases of friend functions are operations that are conducted between two different classes accessing private or protected members of both. <br/>
</section>
<br/>
<section id=""friend_classes"">
<h3>Friend classes</h3>
Similar to friend functions, a friend class is a class whose members have access to the private or protected members of another class:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/>28<br/>29<br/>30<br/>31<br/>32<br/>33<br/>34<br/></code></pre></td>
<td class=""source""><pre><code><cite>// friend class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Square;

<var>class</var> Rectangle {
    <var>int</var> width, height;
  <var>public</var>:
    <var>int</var> area ()
      {<var>return</var> (width * height);}
    <var>void</var> convert (Square a);
};

<var>class</var> Square {
  <var>friend</var> <var>class</var> Rectangle;
  <var>private</var>:
    <var>int</var> side;
  <var>public</var>:
    Square (<var>int</var> a) : side(a) {}
};

<var>void</var> Rectangle::convert (Square a) {
  width = a.side;
  height = a.side;
}
  
<var>int</var> main () {
  Rectangle rect;
  Square sqr (4);
  rect.convert(sqr);
  cout &lt;&lt; rect.area();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>16</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, class <code>Rectangle</code> is a friend of class <code>Square</code> allowing <code>Rectangle</code>'s member functions to access private and protected members of <code>Square</code>. More concretely, <code>Rectangle</code> accesses the member variable <code>Square::side</code>, which describes the side of the square.<br/>
<br/>
There is something else new in this example: at the beginning of the program, there is an empty declaration of class <code>Square</code>. This is necessary because class <code>Rectangle</code> uses <code>Square</code> (as a parameter in member <code>convert</code>), and <code>Square</code> uses <code>Rectangle</code> (declaring it a friend). <br/>
<br/>
Friendships are never corresponded unless specified: In our example, <code>Rectangle</code> is considered a friend class by <code>Square</code>, but Square is not considered a friend by <code>Rectangle</code>. Therefore, the member functions of <code>Rectangle</code> can access the protected and private members of <code>Square</code> but not the other way around. Of course, <code>Square</code> could also be declared friend of <code>Rectangle</code>, if needed, granting such an access.<br/>
<br/>
Another property of friendships is that they are not transitive: The friend of a friend is not considered a friend unless explicitly specified.<br/>
</section>
<br/>
<section id=""inheritance"">
<h3>Inheritance between classes</h3>
Classes in C++ can be extended, creating new classes which retain characteristics of the base class. This process, known as inheritance, involves a <i>base class</i> and a <i>derived class</i>: The <i>derived class</i> inherits the members of the <i>base class</i>, on top of which it can add its own members.<br/>
<br/>
For example, let's imagine a series of classes to describe two kinds of polygons: rectangles and triangles. These two polygons have certain common properties, such as the values needed to calculate their areas: they both can be described simply with a height and a width (or base).<br/>
<br/>
This could be represented in the world of classes with a class <code>Polygon</code> from which we would derive the two other ones: <code>Rectangle</code> and <code>Triangle</code>:<br/>
<br/>
<img alt="""" src=""inheritance.png""/>
<br/>
The <code>Polygon</code> class would contain members that are common for both types of polygon. In our case: <code>width</code> and <code>height</code>. And <code>Rectangle</code> and <code>Triangle</code> would be its derived classes, with specific features that are different from one type of polygon to the other.<br/>
<br/>
Classes that are derived from others inherit all the accessible members of the base class. That means that if a base class includes a member <code>A</code> and we derive a class from it with another member called <code>B</code>, the derived class will contain both member <code>A</code> and member <code>B</code>.<br/>
<br/>
The inheritance relationship of two classes is declared in the derived class. Derived classes definitions use the following syntax:<br/>
<br/>
<code>
class derived_class_name: public base_class_name<br/>
{ /*...*/ };<br/>
</code>
<br/>
Where <code>derived_class_name</code> is the name of the derived class and <code>base_class_name</code> is the name of the class on which it is based. The <code>public</code> access specifier may be replaced by any one of the other access specifiers (<code>protected</code> or <code>private</code>). This access specifier limits the most accessible level for the members inherited from the base class: The members with a more accessible level are inherited with this level instead, while the members with an equal or more restrictive access level keep their restrictive level in the derived class.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// derived classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b;}
 };

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> width * height; }
 };

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> width * height / 2; }
  };
  
<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  rect.set_values (4,5);
  trgl.set_values (4,5);
  cout &lt;&lt; rect.area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; trgl.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The objects of the classes <code>Rectangle</code> and <code>Triangle</code> each contain members inherited from <code>Polygon</code>. These are: <code>width</code>, <code>height</code> and <code>set_values</code>.<br/>
<br/>
The <code>protected</code> access specifier used in class <code>Polygon</code> is similar to <code>private</code>. Its only difference occurs in fact with inheritance: When a class inherits another one, the members of the derived class can access the protected members inherited from the base class, but not its private members.<br/>
<br/>
By declaring <code>width</code> and <code>height</code> as <code>protected</code> instead of <code>private</code>, these members are also accessible from the derived classes <code>Rectangle</code> and <code>Triangle</code>, instead of just from members of <code>Polygon</code>. If they were public, they could be accessed just from anywhere.<br/>
<br/>
We can summarize the different access types according to which functions can access them in the following way: <br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Access</th><th><code>public</code></th><th><code>protected</code></th><th><code>private</code></th></tr>
<tr><td>members of the same class</td><td class=""yes"">yes</td><td class=""yes"">yes</td><td class=""yes"">yes</td></tr>
<tr><td>members of derived class</td><td class=""yes"">yes</td><td class=""yes"">yes</td><td class=""no"">no</td></tr>
<tr><td>not members</td><td class=""yes"">yes</td><td class=""no"">no</td><td class=""no"">no</td></tr>
</tbody></table>
<br/>
Where ""not members"" represents any access from outside the class, such as from <code>main</code>, from another class or from a function.<br/>
<br/>
In the example above, the members inherited by <code>Rectangle</code> and <code>Triangle</code> have the same access permissions as they had in their base class <code>Polygon</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code>Polygon::width           <cite>// protected access</cite>
Rectangle::width         <cite>// protected access</cite>

Polygon::set_values()    <cite>// public access</cite>
Rectangle::set_values()  <cite>// public access  </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
This is because the inheritance relation has been declared using the <code>public</code> keyword on each of the derived classes:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Rectangle: <var>public</var> Polygon { <cite>/* ... */</cite> }</code></pre></td>
</tr></tbody></table></div>
<br/>
This <code>public</code> keyword after the colon (<code>:</code>) denotes the most accessible level the members inherited from the class that follows it (in this case <code>Polygon</code>) will have from the derived class (in this case <code>Rectangle</code>). Since <code>public</code> is the most accessible level, by specifying this keyword the derived class will inherit all the members with the same levels they had in the base class.<br/>
<br/>
With <code>protected</code>, all public members of the base class are inherited as <code>protected</code> in the derived class. Conversely, if the most restricting access level is specified (<code>private</code>), all the base class members are inherited as <code>private</code>.<br/>
<br/>
For example, if daughter were a class derived from mother that we defined as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Daughter: <var>protected</var> Mother;</code></pre></td>
</tr></tbody></table></div>
<br/>
This would set <code>protected</code> as the less restrictive access level for the members of <code>Daughter</code> that it inherited from mother. That is, all members that were <code>public</code> in <code>Mother</code> would become <code>protected</code> in <code>Daughter</code>. Of course, this would not restrict <code>Daughter</code> from declaring its own public members. That <i>less restrictive access level</i> is only set for the members inherited from <code>Mother</code>.<br/>
<br/>
If no access level is specified for the inheritance, the compiler assumes private for classes declared with keyword <code>class</code> and public for those declared with <code>struct</code>.<br/>
<br/>
Actually, most use cases of inheritance in C++ should use public inheritance. When other access levels are needed for base classes, they can usually be better represented as member variables instead.<br/>
</section>
<br/>
<section id=""what_is_inherited"">
<h3>What is inherited from the base class?</h3>
In principle, a publicly derived class inherits access to every member of a base class except:<br/>
<br/>
<ul>
<li>its constructors and its destructor</li>
<li>its assignment operator members (operator=)</li>
<li>its friends</li>
<li>its private members</li>
</ul>
<br/>
Even though access to the constructors and destructor of the base class is not inherited as such, they are automatically called by the constructors and destructor of the derived class.<br/>
<br/>
Unless otherwise specified, the constructors of a derived class calls the default constructor of its base classes (i.e., the constructor taking no arguments). Calling a different constructor of a base class is possible, using the same syntax used to initialize member variables in the initialization list:<br/>
<br/>
<code>
derived_constructor_name (parameters) : base_constructor_name (parameters) {...}<br/>
</code>
<br/>
For example: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// constructors and derived classes</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Mother {
  <var>public</var>:
    Mother ()
      { cout &lt;&lt; <kbd>""Mother: no parameters\n""</kbd>; }
    Mother (<var>int</var> a)
      { cout &lt;&lt; <kbd>""Mother: int parameter\n""</kbd>; }
};

<var>class</var> Daughter : <var>public</var> Mother {
  <var>public</var>:
    Daughter (<var>int</var> a)
      { cout &lt;&lt; <kbd>""Daughter: int parameter\n\n""</kbd>; }
};

<var>class</var> Son : <var>public</var> Mother {
  <var>public</var>:
    Son (<var>int</var> a) : Mother (a)
      { cout &lt;&lt; <kbd>""Son: int parameter\n\n""</kbd>; }
};

<var>int</var> main () {
  Daughter kelly(0);
  Son bud(0);
  
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>Mother: no parameters
Daughter: int parameter

Mother: int parameter
Son: int parameter</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice the difference between which <code>Mother</code>'s constructor is called when a new <code>Daughter</code> object is created and which when it is a <code>Son</code> object. The difference is due to the different constructor declarations of <code>Daughter</code> and <code>Son</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Daughter (<var>int</var> a)          <cite>// nothing specified: call default constructor</cite>
Son (<var>int</var> a) : Mother (a)  <cite>// constructor specified: call this specific constructor </cite></code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""multiple_inheritance"">
<h3>Multiple inheritance</h3>
A class may inherit from more than one class by simply specifying more base classes, separated by commas, in the list of a class's base classes (i.e., after the colon). For example, if the program had a specific class to print on screen called <code>Output</code>, and we wanted our classes <code>Rectangle</code> and <code>Triangle</code> to also inherit its members in addition to those of <code>Polygon</code> we could write:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Rectangle: <var>public</var> Polygon, <var>public</var> Output;
<var>class</var> Triangle: <var>public</var> Polygon, <var>public</var> Output;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here is the complete example: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// multiple inheritance</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    Polygon (<var>int</var> a, <var>int</var> b) : width(a), height(b) {}
};

<var>class</var> Output {
  <var>public</var>:
    <var>static</var> <var>void</var> print (<var>int</var> i);
};

<var>void</var> Output::print (<var>int</var> i) {
  cout &lt;&lt; i &lt;&lt; <kbd>'\n'</kbd>;
}

<var>class</var> Rectangle: <var>public</var> Polygon, <var>public</var> Output {
  <var>public</var>:
    Rectangle (<var>int</var> a, <var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area ()
      { <var>return</var> width*height; }
};

<var>class</var> Triangle: <var>public</var> Polygon, <var>public</var> Output {
  <var>public</var>:
    Triangle (<var>int</var> a, <var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area ()
      { <var>return</var> width*height/2; }
};
  
<var>int</var> main () {
  Rectangle rect (4,5);
  Triangle trgl (4,5);
  rect.print (rect.area());
  Triangle::print (trgl.area());
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section></div>"
Classes,Polymorphism,"<div class=""C_doc""><h1>Polymorphism</h1>
<section id=""requirements"">
Before getting any deeper into this chapter, you should have a proper understanding of pointers and class inheritance. If you are not really sure of the meaning of any of the following expressions, you should review the indicated sections:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Statement:</th><th>Explained in:</th></tr>
<tr><td><code>int A::b(int c) { }</code></td><td><a href=""/doc/tutorial/classes/"">Classes</a></td></tr>
<tr><td><code>a-&gt;b</code></td><td><a href=""/doc/tutorial/structures/"">Data structures</a></td></tr>
<tr><td><code>class A: public B {};</code></td><td><a href=""/doc/tutorial/inheritance/"">Friendship and inheritance</a></td></tr>
</tbody></table>
</section>
<br/>
<section id=""pointers_to_base_class"">
<h3>Pointers to base class</h3>
One of the key features of class inheritance is that a pointer to a derived class is type-compatible with a pointer to its base class. <i>Polymorphism</i> is the art of taking advantage of this simple but powerful and versatile feature.<br/>
<br/>
The example about the rectangle and triangle classes can be rewritten using pointers taking this feature into account:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// pointers to base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
};

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area()
      { <var>return</var> width*height; }
};

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area()
      { <var>return</var> width*height/2; }
};

<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  Polygon * ppoly1 = &amp;rect;
  Polygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  cout &lt;&lt; rect.area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; trgl.area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Function <code>main</code> declares two pointers to <code>Polygon</code> (named <code>ppoly1</code> and <code>ppoly2</code>). These are assigned the addresses of <code>rect</code> and <code>trgl</code>, respectively, which are objects of type <code>Rectangle</code> and <code>Triangle</code>. Such assignments are valid, since both <code>Rectangle</code> and <code>Triangle</code> are classes derived from <code>Polygon</code>.<br/>
<br/>
Dereferencing <code>ppoly1</code> and <code>ppoly2</code> (with <code>ppoly1-&gt;</code> and <code>ppoly2-&gt;</code>) is valid and allows us to access the members of their pointed objects. For example, the following two statements would be equivalent in the previous example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>ppoly1-&gt;set_values (4,5);
rect.set_values (4,5);</code></pre></td>
</tr></tbody></table></div>
<br/>
But because the type of both <code>ppoly1</code> and <code>ppoly2</code> is pointer to <code>Polygon</code> (and not pointer to <code>Rectangle</code> nor pointer to <code>Triangle</code>), only the members inherited from <code>Polygon</code> can be accessed, and not those of the derived classes <code>Rectangle</code> and <code>Triangle</code>. That is why the program above accesses the <code>area</code> members of both objects using <code>rect</code> and <code>trgl</code> directly, instead of the pointers; the pointers to the base class cannot access the <code>area</code> members.<br/>
<br/>
Member <code>area</code> could have been accessed with the pointers to <code>Polygon</code> if <code>area</code> were a member of <code>Polygon</code> instead of a member of its derived classes, but the problem is that <code>Rectangle</code> and <code>Triangle</code> implement different versions of <code>area</code>, therefore there is not a single common version that could be implemented in the base class. <br/>
</section>
<br/>
<section id=""virtual_members"">
<h3>Virtual members</h3>
A virtual member is a member function that can be redefined in a derived class, while preserving its calling properties through references. The syntax for a function to become virtual is to precede its declaration with the <code>virtual</code> keyword:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// virtual members</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area ()
      { <var>return</var> 0; }
};

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> width * height; }
};

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area ()
      { <var>return</var> (width * height / 2); }
};

<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  Polygon poly;
  Polygon * ppoly1 = &amp;rect;
  Polygon * ppoly2 = &amp;trgl;
  Polygon * ppoly3 = &amp;poly;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  ppoly3-&gt;set_values (4,5);
  cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; ppoly3-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10
0</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, all three classes (<code>Polygon</code>, <code>Rectangle</code> and <code>Triangle</code>) have the same members: <code>width</code>, <code>height</code>, and functions <code>set_values</code> and <code>area</code>.<br/>
<br/>
The member function <code>area</code> has been declared as <code>virtual</code> in the base class because it is later redefined in each of the derived classes. Non-virtual members can also be redefined in derived classes, but non-virtual members of derived classes cannot be accessed through a reference of the base class: i.e., if <code>virtual</code> is removed from the declaration of <code>area</code> in the example above, all three calls to <code>area</code> would return zero, because in all cases, the version of the base class would have been called instead.<br/>
<br/>
Therefore, essentially, what the <code>virtual</code> keyword does is to allow a member of a derived class with the same name as one in the base class to be appropriately called from a pointer, and more precisely when the type of the pointer is a pointer to the base class that is pointing to an object of the derived class, as in the above example.<br/>
<br/>
A class that declares or inherits a virtual function is called a <i>polymorphic class</i>.<br/>
<br/>
Note that despite of the virtuality of one of its members, <code>Polygon</code> was a regular class, of which even an object was instantiated (<code>poly</code>), with its own definition of member <code>area</code> that always returns 0.<br/>
</section>
<br/>
<section id=""abstract_base_classes"">
<h3>Abstract base classes</h3>
Abstract base classes are something very similar to the <code>Polygon</code> class in the previous example. They are classes that can only be used as base classes, and thus are allowed to have virtual member functions without definition (known as pure virtual functions). The syntax is to replace their definition by <code>=0</code> (an equal sign and a zero):<br/>
<br/>
An abstract base <code>Polygon</code> class could look like this:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/></code></pre></td>
<td class=""source""><pre><code><cite>// abstract class CPolygon</cite>
<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area () =0;
};</code></pre></td>
</tr></tbody></table></div>
<br/>
Notice that <code>area</code> has no definition; this has been replaced by <code>=0</code>, which makes it a <i>pure virtual function</i>. Classes that contain at least one <i>pure virtual function</i> are  known as <i>abstract base classes</i>.<br/>
<br/>
Abstract base classes cannot be used to instantiate objects. Therefore, this last abstract base class version of <code>Polygon</code> could not be used to declare objects like:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>Polygon mypolygon;   <cite>// not working if Polygon is abstract base class </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
But an <i>abstract base class</i> is not totally useless. It can be used to create pointers to it, and take advantage of all its polymorphic abilities. For example, the following pointer declarations would be valid:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Polygon * ppoly1;
Polygon * ppoly2;</code></pre></td>
</tr></tbody></table></div>
<br/>
And can actually be dereferenced when pointing to objects of derived (non-abstract) classes. Here is the entire example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// abstract base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area (<var>void</var>) =0;
};

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height); }
};

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height / 2); }
};

<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  Polygon * ppoly1 = &amp;rect;
  Polygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  cout &lt;&lt; ppoly1-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  cout &lt;&lt; ppoly2-&gt;area() &lt;&lt; <kbd>'\n'</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, objects of different but related types are referred to using a unique type of pointer (<code>Polygon*</code>) and the proper member function is called every time, just because they are virtual. This can be really useful in some circumstances. For example, it is even possible for a member of the abstract base class <code>Polygon</code> to use the special pointer <code>this</code> to access the proper virtual members, even though <code>Polygon</code> itself has no implementation for this function:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// pure virtual members can be called</cite>
<cite>// from the abstract base class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    <var>void</var> set_values (<var>int</var> a, <var>int</var> b)
      { width=a; height=b; }
    <var>virtual</var> <var>int</var> area() =0;
    <var>void</var> printarea()
      { cout &lt;&lt; <var>this</var>-&gt;area() &lt;&lt; <kbd>'\n'</kbd>; }
};

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height); }
};

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    <var>int</var> area (<var>void</var>)
      { <var>return</var> (width * height / 2); }
};

<var>int</var> main () {
  Rectangle rect;
  Triangle trgl;
  Polygon * ppoly1 = &amp;rect;
  Polygon * ppoly2 = &amp;trgl;
  ppoly1-&gt;set_values (4,5);
  ppoly2-&gt;set_values (4,5);
  ppoly1-&gt;printarea();
  ppoly2-&gt;printarea();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Virtual members and abstract classes grant C++ polymorphic characteristics, most useful for object-oriented projects. Of course, the examples above are very simple use cases, but these features can be applied to arrays of objects or dynamically allocated objects.<br/>
<br/>
Here is an example that combines some of the features in the latest chapters, such as dynamic memory, constructor initializers and polymorphism:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// dynamic allocation and polymorphism</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Polygon {
  <var>protected</var>:
    <var>int</var> width, height;
  <var>public</var>:
    Polygon (<var>int</var> a, <var>int</var> b) : width(a), height(b) {}
    <var>virtual</var> <var>int</var> area (<var>void</var>) =0;
    <var>void</var> printarea()
      { cout &lt;&lt; <var>this</var>-&gt;area() &lt;&lt; <kbd>'\n'</kbd>; }
};

<var>class</var> Rectangle: <var>public</var> Polygon {
  <var>public</var>:
    Rectangle(<var>int</var> a,<var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area()
      { <var>return</var> width*height; }
};

<var>class</var> Triangle: <var>public</var> Polygon {
  <var>public</var>:
    Triangle(<var>int</var> a,<var>int</var> b) : Polygon(a,b) {}
    <var>int</var> area()
      { <var>return</var> width*height/2; }
};

<var>int</var> main () {
  Polygon * ppoly1 = <var>new</var> Rectangle (4,5);
  Polygon * ppoly2 = <var>new</var> Triangle (4,5);
  ppoly1-&gt;printarea();
  ppoly2-&gt;printarea();
  <var>delete</var> ppoly1;
  <var>delete</var> ppoly2;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>20
10</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice that the <code>ppoly</code> pointers:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Polygon * ppoly1 = <var>new</var> Rectangle (4,5);
Polygon * ppoly2 = <var>new</var> Triangle (4,5);</code></pre></td>
</tr></tbody></table></div>
<br/>
are declared being of type ""pointer to <code>Polygon</code>"", but the objects allocated have been declared having the derived class type directly (<code>Rectangle</code> and <code>Triangle</code>).<br/>
</section></div>"
Other language features,Type conversions,"<div class=""C_doc""><h1>Type conversions</h1>
<section id=""implicit_conversion"">
<h3>Implicit conversion</h3>
Implicit conversions are automatically performed when a value is copied to a compatible type. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><var>short</var> a=2000;
<var>int</var> b;
b=a;</code></pre></td>
</tr></tbody></table></div>
<br/>
Here, the value of <code>a</code> is promoted from <code>short</code> to <code>int</code> without the need of any explicit operator. This is known as a <i>standard conversion</i>. Standard conversions affect fundamental data types, and allow the conversions between numerical types (<code>short</code> to <code>int</code>, <code>int</code> to <code>float</code>, <code>double</code> to <code>int</code>...), to or from <code>bool</code>, and some pointer conversions.<br/>
<br/>
Converting to <code>int</code> from some smaller integer type, or to <code>double</code> from <code>float</code> is known as <i>promotion</i>, and is guaranteed to produce the exact same value in the destination type. Other conversions between arithmetic types may not always be able to represent the same value exactly:<br/>
<ul>
<li>If a negative integer value is converted to an unsigned type, the resulting value corresponds to its 2's complement bitwise representation (i.e., <code>-1</code> becomes the largest value representable by the type, <code>-2</code> the second largest, ...).</li>
<li>The conversions from/to <code>bool</code> consider <code>false</code> equivalent to <i>zero</i> (for numeric types) and to <i>null pointer</i> (for pointer types); <code>true</code> is equivalent to all other values and is converted to the equivalent of <code>1</code>.</li>
<li>If the conversion is from a floating-point type to an integer type, the value is truncated (the decimal part is removed). If the result lies outside the range of representable values by the type, the conversion causes <i>undefined behavior</i>.</li>
<li>Otherwise, if the conversion is between numeric types of the same kind (integer-to-integer or floating-to-floating), the conversion is valid, but the value is <i>implementation-specific</i> (and may not be portable).</li>
</ul>
<br/>
Some of these conversions may imply a loss of precision, which the compiler can signal with a warning. This warning can be avoided with an explicit conversion.<br/>
<br/>
For non-fundamental types, arrays and functions implicitly convert to pointers, and pointers in general allow the following conversions:<br/>
<ul>
<li><i>Null pointers</i> can be converted to pointers of any type</li>
<li>Pointers to any type can be converted to <code>void</code> pointers.</li>
<li>Pointer <i>upcast</i>: pointers to a derived class can be converted to a pointer of an <i>accessible</i> and <i>unambiguous</i> base class, without modifying its <code>const</code> or <code>volatile</code> qualification.<br/>
</li></ul>
</section>
<br/>
<section id=""implicit_in_classes"">
<h3>Implicit conversions with classes</h3>
In the world of classes, implicit conversions can be controlled by means of three member functions:<br/>
<ul>
<li><b>Single-argument constructors:</b> allow implicit conversion from a particular type to initialize an object.</li>
<li><b>Assignment operator:</b> allow implicit conversion from a particular type on assignments.</li>
<li><b>Type-cast operator:</b> allow implicit conversion to a particular type.</li>
</ul>
<br/>
For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/></code></pre></td>
<td class=""source""><pre><code><cite>// implicit conversion of classes:</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> A {};

<var>class</var> B {
<var>public</var>:
  <cite>// conversion from A (constructor):</cite>
  B (<var>const</var> A&amp; x) {}
  <cite>// conversion from A (assignment):</cite>
  B&amp; <var>operator</var>= (<var>const</var> A&amp; x) {<var>return</var> *<var>this</var>;}
  <cite>// conversion to A (type-cast operator)</cite>
  <var>operator</var> A() {<var>return</var> A();}
};

<var>int</var> main ()
{
  A foo;
  B bar = foo;    <cite>// calls constructor</cite>
  bar = foo;      <cite>// calls assignment</cite>
  foo = bar;      <cite>// calls type-cast operator</cite>
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp> </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The type-cast operator uses a particular syntax: it uses the <code>operator</code> keyword followed by the destination type and an empty set of parentheses. Notice that the return type is the destination type and thus is not specified before the <code>operator</code> keyword.<br/>
</section>
<br/>
<section id=""explicit"">
<h3>Keyword explicit</h3>
On a function call, C++ allows one implicit conversion to happen for each argument. This may be somewhat problematic for classes, because it is not always what is intended. For example, if we add the following function to the last example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>void</var> fn (B arg) {}</code></pre></td>
</tr></tbody></table></div>
<br/>
This function takes an argument of type <code>B</code>, but it could as well be called with an object of type <code>A</code> as argument:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>fn (foo);</code></pre></td>
</tr></tbody></table></div>
<br/>
This may or may not be what was intended. But, in any case, it can be prevented by marking the affected constructor with the <code>explicit</code> keyword:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/>23<br/>24<br/>25<br/>26<br/>27<br/></code></pre></td>
<td class=""source""><pre><code><cite>// explicit:</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> A {};

<var>class</var> B {
<var>public</var>:
  <var>explicit</var> B (<var>const</var> A&amp; x) {}
  B&amp; <var>operator</var>= (<var>const</var> A&amp; x) {<var>return</var> *<var>this</var>;}
  <var>operator</var> A() {<var>return</var> A();}
};

<var>void</var> fn (B x) {}

<var>int</var> main ()
{
  A foo;
  B bar (foo);
  bar = foo;
  foo = bar;
  
<cite>//  fn (foo);  // not allowed for explicit ctor.</cite>
  fn (bar);  

  <var>return</var> 0;
}</code></pre></td>
</tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Additionally, constructors marked with <code>explicit</code> cannot be called with the assignment-like syntax; In the above example, <code>bar</code> could not have been constructed with:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>B bar = foo;</code></pre></td>
</tr></tbody></table></div>
<br/>
Type-cast member functions (those described in the previous section) can also be specified as <code>explicit</code>. This prevents implicit conversions in the same way as <code>explicit</code>-specified constructors do for the destination type.<br/>
</section>
<br/>
<section id=""type_casting"">
<h3>Type casting</h3>
C++ is a strong-typed language. Many conversions, specially those that imply a different interpretation of the value, require an explicit conversion, known in C++ as <i>type-casting</i>. There exist two main syntaxes for generic type-casting: <i>functional</i> and <i>c-like</i>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>double</var> x = 10.3;
<var>int</var> y;
y = <var>int</var> (x);    <cite>// functional notation</cite>
y = (<var>int</var>) x;    <cite>// c-like cast notation </cite></code></pre></td>
</tr></tbody></table></div>
<br/>
The functionality of these generic forms of type-casting is enough for most needs with fundamental data types. However, these operators can be applied indiscriminately on classes and pointers to classes, which can lead to code that -while being syntactically correct- can cause runtime errors. For example, the following code compiles without errors: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/>17<br/>18<br/>19<br/>20<br/>21<br/>22<br/></code></pre></td>
<td class=""source""><pre><code><cite>// class type-casting</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Dummy {
    <var>double</var> i,j;
};

<var>class</var> Addition {
    <var>int</var> x,y;
  <var>public</var>:
    Addition (<var>int</var> a, <var>int</var> b) { x=a; y=b; }
    <var>int</var> result() { <var>return</var> x+y;}
};

<var>int</var> main () {
  Dummy d;
  Addition * padd;
  padd = (Addition*) &amp;d;
  cout &lt;&lt; padd-&gt;result();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp> </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The program declares a pointer to <code>Addition</code>, but then it assigns to it a reference to an object of another unrelated type using explicit type-casting:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>padd = (Addition*) &amp;d;</code></pre></td>
</tr></tbody></table></div>
<br/>
Unrestricted explicit type-casting allows to convert any pointer into any other pointer type, independently of the types they point to. The subsequent call to member <code>result</code> will produce either a run-time error or some other unexpected results.<br/>
<br/>
In order to control these types of conversions between classes, we have four specific casting operators: <code>dynamic_cast</code>, <code>reinterpret_cast</code>, <code>static_cast</code> and <code>const_cast</code>. Their format is to follow the new type enclosed between angle-brackets (<code>&lt;&gt;</code>) and immediately after, the expression to be converted between parentheses.<br/>
<br/>
<code>
dynamic_cast &lt;new_type&gt; (expression)<br/>
reinterpret_cast &lt;new_type&gt; (expression)<br/>
static_cast &lt;new_type&gt; (expression)<br/>
const_cast &lt;new_type&gt; (expression)<br/>
</code>
<br/>
The traditional type-casting equivalents to these expressions would be:<br/>
<br/>
<code>
(new_type) expression<br/>
new_type (expression)<br/>
</code>
<br/>
but each one with its own special characteristics:<br/>
</section>
<br/>
<section id=""dynamic_cast"">
<h3>dynamic_cast</h3>
<code>dynamic_cast</code> can only be used with pointers and references to classes (or with <code>void*</code>). Its purpose is to ensure that the result of the type conversion points to a valid complete object of the destination pointer type.<br/>
<br/>
This naturally includes <i>pointer upcast</i> (converting from pointer-to-derived to pointer-to-base), in the same way as allowed as an <i>implicit conversion</i>.<br/>
<br/>
But <code>dynamic_cast</code> can also <i>downcast</i> (convert from pointer-to-base to pointer-to-derived) polymorphic classes (those with virtual members) if -and only if- the pointed object is a valid complete object of the target type. For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// dynamic_cast</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Base { <var>virtual</var> <var>void</var> dummy() {} };
<var>class</var> Derived: <var>public</var> Base { <var>int</var> a; };

<var>int</var> main () {
  <var>try</var> {
    Base * pba = <var>new</var> Derived;
    Base * pbb = <var>new</var> Base;
    Derived * pd;

    pd = <var>dynamic_cast</var>&lt;Derived*&gt;(pba);
    <var>if</var> (pd==0) cout &lt;&lt; <kbd>""Null pointer on first type-cast.\n""</kbd>;

    pd = <var>dynamic_cast</var>&lt;Derived*&gt;(pbb);
    <var>if</var> (pd==0) cout &lt;&lt; <kbd>""Null pointer on second type-cast.\n""</kbd>;

  } <var>catch</var> (exception&amp; e) {cout &lt;&lt; <kbd>""Exception: ""</kbd> &lt;&lt; e.what();}
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>Null pointer on second type-cast.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
<table class=""boxed""><tbody><tr><td>
<b>Compatibility note:</b> This type of <code>dynamic_cast</code> requires <i>Run-Time Type Information (RTTI)</i> to keep track of dynamic types. Some compilers support this feature as an option which is disabled by default. This needs to be enabled for runtime type checking using <code>dynamic_cast</code> to work properly with these types.<br/>
</td></tr></tbody></table>
<br/>
The code above tries to perform two dynamic casts from pointer objects of type <code>Base*</code> (<code>pba</code> and <code>pbb</code>) to a pointer object of type <code>Derived*</code>, but only the first one is successful. Notice their respective initializations:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>Base * pba = <var>new</var> Derived;
Base * pbb = <var>new</var> Base;</code></pre></td>
</tr></tbody></table></div>
<br/>
Even though both are pointers of type <code>Base*</code>, <code>pba</code> actually points to an object of type <code>Derived</code>, while <code>pbb</code> points to an object of type <code>Base</code>. Therefore, when their respective type-casts are performed using <code>dynamic_cast</code>, <code>pba</code> is pointing to a full object of class <code>Derived</code>, whereas <code>pbb</code> is pointing to an object of class <code>Base</code>, which is an incomplete object of class <code>Derived</code>.<br/>
<br/>
When <code>dynamic_cast</code> cannot cast a pointer because it is not a complete object of the required class -as in the second conversion in the previous example- it returns a <i>null pointer</i> to indicate the failure. If <code>dynamic_cast</code> is used to convert to a reference type and the conversion is not possible, an exception of type <code>bad_cast</code> is thrown instead.<br/>
<br/>
<code>dynamic_cast</code> can also perform the other implicit casts allowed on pointers: casting null pointers between pointers types (even between unrelated classes), and casting any pointer of any type to a <code>void*</code> pointer.<br/>
</section>
<br/>
<section id=""static_cast"">
<h3>static_cast</h3>
<code>static_cast</code> can perform conversions between pointers to related classes, not only <i>upcasts</i> (from pointer-to-derived to pointer-to-base), but also <i>downcasts</i> (from pointer-to-base to pointer-to-derived). No checks are performed during runtime to guarantee that the object being converted is in fact a full object of the destination type. Therefore, it is up to the programmer to ensure that the conversion is safe. On the other side, it does not incur the overhead of the type-safety checks of <code>dynamic_cast</code>.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> Base {};
<var>class</var> Derived: <var>public</var> Base {};
Base * a = <var>new</var> Base;
Derived * b = <var>static_cast</var>&lt;Derived*&gt;(a);</code></pre></td>
</tr></tbody></table></div>
<br/>
This would be valid code, although <code>b</code> would point to an incomplete object of the class and could lead to runtime errors if dereferenced.<br/>
<br/>
Therefore, <code>static_cast</code> is able to perform with pointers to classes not only the conversions allowed implicitly, but also their opposite conversions.<br/>
<br/>
<code>static_cast</code> is also able to perform all conversions allowed implicitly (not only those with pointers to classes), and is also able to perform the opposite of these. It can:<br/>
<ul>
<li>Convert from <code>void*</code> to any pointer type. In this case, it guarantees that if the <code>void*</code> value was obtained by converting from that same pointer type, the resulting pointer value is the same.</li>
<li>Convert integers, floating-point values and enum types to enum types.</li>
</ul>
<br/>
Additionally, <code>static_cast</code> can also perform the following:<br/>
<ul>
<li>Explicitly call a single-argument constructor or a conversion operator.</li>
<li>Convert to <i>rvalue references</i>.</li>
<li>Convert <code>enum class</code> values into integers or floating-point values.</li>
<li>Convert any type to <code>void</code>, evaluating and discarding the value.</li>
</ul>
</section>
<br/>
<section id=""reinterpret_cast"">
<h3>reinterpret_cast</h3>
<code>reinterpret_cast</code> converts any pointer type to any other pointer type, even of unrelated classes. The operation result is a simple binary copy of the value from one pointer to the other. All pointer conversions are allowed: neither the content pointed nor the pointer type itself is checked.<br/>
<br/>
It can also cast pointers to or from integer types. The format in which this integer value represents a pointer is platform-specific. The only guarantee is that a pointer cast to an integer type large enough to fully contain it (such as <code><a href=""/intptr_t"">intptr_t</a></code>), is guaranteed to be able to be cast back to a valid pointer.<br/>
<br/>
The conversions that can be performed by <code>reinterpret_cast</code> but not by <code>static_cast</code> are low-level operations based on reinterpreting the binary representations of the types, which on most cases results in code which is system-specific, and thus non-portable. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><var>class</var> A { <cite>/* ... */</cite> };
<var>class</var> B { <cite>/* ... */</cite> };
A * a = <var>new</var> A;
B * b = <var>reinterpret_cast</var>&lt;B*&gt;(a);</code></pre></td>
</tr></tbody></table></div>
<br/>
This code compiles, although it does not make much sense, since now <code>b</code> points to an object of a totally unrelated and likely incompatible class. Dereferencing <code>b</code> is unsafe.<br/>
</section>
<br/>
<section id=""const_cast"">
<h3>const_cast</h3>
This type of casting manipulates the constness of the object pointed by a pointer, either to be set or to be removed. For example, in order to pass a const pointer to a function that expects a non-const argument:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// const_cast</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>void</var> print (<var>char</var> * str)
{
  cout &lt;&lt; str &lt;&lt; <kbd>'\n'</kbd>;
}

<var>int</var> main () {
  <var>const</var> <var>char</var> * c = <kbd>""sample text""</kbd>;
  print ( <var>const_cast</var>&lt;<var>char</var> *&gt; (c) );
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>sample text</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The example above is guaranteed to work because function <code>print</code> does not write to the pointed object. Note though, that removing the constness of a pointed object to actually write to it causes <i>undefined behavior</i>.<br/>
</section>
<br/>
<section id=""typeid"">
<h3>typeid</h3>
<code>typeid</code> allows to check the type of an expression: <br/>
<br/>
<code>
typeid (expression)<br/>
</code>
<br/>
This operator returns a reference to a constant object of type <code><a href=""/type_info"">type_info</a></code> that is defined in the standard header <code><a href=""/&lt;typeinfo&gt;"">&lt;typeinfo&gt;</a></code>. A value returned by <code>typeid</code> can be compared with another value returned by <code>typeid</code> using operators <code>==</code> and <code>!=</code> or can serve to obtain a null-terminated character sequence representing the data type or class name by using its <code>name()</code> member.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// typeid</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;typeinfo&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>int</var> * a,b;
  a=0; b=0;
  <var>if</var> (<var>typeid</var>(a) != <var>typeid</var>(b))
  {
    cout &lt;&lt; <kbd>""a and b are of different types:\n""</kbd>;
    cout &lt;&lt; <kbd>""a is: ""</kbd> &lt;&lt; <var>typeid</var>(a).name() &lt;&lt; <kbd>'\n'</kbd>;
    cout &lt;&lt; <kbd>""b is: ""</kbd> &lt;&lt; <var>typeid</var>(b).name() &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>a and b are of different types:
a is: int *
b is: int  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
When <code>typeid</code> is applied to classes, <code>typeid</code> uses the RTTI to keep track of the type of dynamic objects. When <code>typeid</code> is applied to an expression whose type is a polymorphic class, the result is the type of the most derived complete object:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// typeid, polymorphic class</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;typeinfo&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> Base { <var>virtual</var> <var>void</var> f(){} };
<var>class</var> Derived : <var>public</var> Base {};

<var>int</var> main () {
  <var>try</var> {
    Base* a = <var>new</var> Base;
    Base* b = <var>new</var> Derived;
    cout &lt;&lt; <kbd>""a is: ""</kbd> &lt;&lt; <var>typeid</var>(a).name() &lt;&lt; <kbd>'\n'</kbd>;
    cout &lt;&lt; <kbd>""b is: ""</kbd> &lt;&lt; <var>typeid</var>(b).name() &lt;&lt; <kbd>'\n'</kbd>;
    cout &lt;&lt; <kbd>""*a is: ""</kbd> &lt;&lt; <var>typeid</var>(*a).name() &lt;&lt; <kbd>'\n'</kbd>;
    cout &lt;&lt; <kbd>""*b is: ""</kbd> &lt;&lt; <var>typeid</var>(*b).name() &lt;&lt; <kbd>'\n'</kbd>;
  } <var>catch</var> (exception&amp; e) { cout &lt;&lt; <kbd>""Exception: ""</kbd> &lt;&lt; e.what() &lt;&lt; <kbd>'\n'</kbd>; }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>a is: class Base *
b is: class Base *
*a is: class Base
*b is: class Derived</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
<i>Note: The string returned by member <code>name</code> of <code><a href=""/type_info"">type_info</a></code> depends on the specific implementation of your compiler and library. It is not necessarily a simple string with its typical type name, like in the compiler used to produce this output.</i> <br/>
<br/>
Notice how the type that <code>typeid</code> considers for pointers is the pointer type itself (both <code>a</code> and <code>b</code> are of type <code>class Base *</code>). However, when <code>typeid</code> is applied to objects (like <code>*a</code> and <code>*b</code>) <code>typeid</code> yields their dynamic type (i.e. the type of their most derived complete object).<br/>
<br/>
If the type <code>typeid</code> evaluates is a pointer preceded by the dereference operator (<code>*</code>), and this pointer has a null value, <code>typeid</code> throws a <code><a href=""/bad_typeid"">bad_typeid</a></code> exception.<br/>
</section></div>"
Other language features,Exceptions,"<div class=""C_doc""><h1>Exceptions</h1>
<section id=""exceptions"">
Exceptions provide a way to react to exceptional circumstances (like runtime errors) in programs by transferring control to special functions called <i>handlers</i>.<br/>
<br/>
To catch exceptions, a portion of code is placed under exception inspection. This is done by enclosing that portion of code in a <i>try-block</i>. When an exceptional circumstance arises within that block, an exception is thrown that transfers the control to the exception handler. If no exception is thrown, the code continues normally and all handlers are ignored.<br/>
<br/>
An exception is thrown by using the <code>throw</code> keyword from inside the <code>try</code> block. Exception handlers are declared with the keyword <code>catch</code>, which must be placed immediately after the <code>try</code> block:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// exceptions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>try</var>
  {
    <var>throw</var> 20;
  }
  <var>catch</var> (<var>int</var> e)
  {
    cout &lt;&lt; <kbd>""An exception occurred. Exception Nr. ""</kbd> &lt;&lt; e &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>An exception occurred. Exception Nr. 20</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The code under exception handling is enclosed in a <code>try</code> block. In this example this code simply throws an exception:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>throw</var> 20;</code></pre></td>
</tr></tbody></table></div>
<br/>
A <code>throw</code> expression accepts one parameter (in this case the integer value <code>20</code>), which is passed as an argument to the exception handler.<br/>
<br/>
The exception handler is declared with the <code>catch</code> keyword immediately after the closing brace of the <code>try</code> block. The syntax for <code>catch</code> is similar to a regular function with one parameter. The type of this parameter is very important, since the type of the argument passed by the <code>throw</code> expression is checked against it, and only in the case they match, the exception is caught by that handler.<br/>
<br/>
Multiple handlers (i.e., <code>catch</code> expressions) can be chained; each one with a different parameter type. Only the handler whose argument type matches the type of the exception specified in the <code>throw</code> statement is executed.<br/>
<br/>
If an ellipsis (<code>...</code>) is used as the parameter of <code>catch</code>, that handler will catch any exception no matter what the type of the exception thrown. This can be used as a default handler that catches all exceptions not caught by other handlers:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/></code></pre></td>
<td class=""source""><pre><code><var>try</var> {
  <cite>// code here</cite>
}
<var>catch</var> (<var>int</var> param) { cout &lt;&lt; <kbd>""int exception""</kbd>; }
<var>catch</var> (<var>char</var> param) { cout &lt;&lt; <kbd>""char exception""</kbd>; }
<var>catch</var> (...) { cout &lt;&lt; <kbd>""default exception""</kbd>; }</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, the last handler would catch any exception thrown of a type that is neither <code>int</code> nor <code>char</code>.<br/>
<br/>
After an exception has been handled the program, execution resumes after the <i>try-catch</i> block, not after the <code>throw</code> statement!.<br/>
<br/>
It is also possible to nest <code>try-catch</code> blocks within more external <code>try</code> blocks. In these cases, we have the possibility that an internal <code>catch</code> block forwards the exception to its external level. This is done with the expression <code>throw;</code> with no arguments. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/></code></pre></td>
<td class=""source""><pre><code><var>try</var> {
  <var>try</var> {
      <cite>// code here</cite>
  }
  <var>catch</var> (<var>int</var> n) {
      <var>throw</var>;
  }
}
<var>catch</var> (...) {
  cout &lt;&lt; <kbd>""Exception occurred""</kbd>;
}</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""exception_specification"">
<h3>Exception specification</h3>
Older code may contain <i>dynamic exception specifications</i>. They are now deprecated in C++, but still supported. A <i>dynamic exception specification</i> follows the declaration of a function, appending a <code>throw</code> specifier to it. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>double</var> myfunction (<var>char</var> param) <var>throw</var> (<var>int</var>);</code></pre></td>
</tr></tbody></table></div>
<br/>
This declares a function called <code>myfunction</code>, which takes one argument of type <code>char</code> and returns a value of type <code>double</code>. If this function throws an exception of some type other than <code>int</code>, the function calls <samp><a href=""/unexpected"">std::unexpected</a></samp> instead of looking for a handler or calling <samp><a href=""/terminate"">std::terminate</a></samp>.<br/>
<br/>
If this <code>throw</code> specifier is left empty with no type, this means that <samp><a href=""/unexpected"">std::unexpected</a></samp> is called for any exception. Functions with no <code>throw</code> specifier (regular functions) never call <samp><a href=""/unexpected"">std::unexpected</a></samp>, but follow the normal path of looking for their exception handler.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> myfunction (<var>int</var> param) <var>throw</var>(); <cite>// all exceptions call unexpected</cite>
<var>int</var> myfunction (<var>int</var> param);         <cite>// normal exception handling </cite></code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""standard_exceptions"">
<h3>Standard exceptions</h3>
The C++ Standard library provides a base class specifically designed to declare objects to be thrown as exceptions. It is called <code><a href=""/exception"">std::exception</a></code> and is defined in the <code><a href=""/&lt;exception&gt;"">&lt;exception&gt;</a></code> header. This class has a virtual member function called <code>what</code> that returns a null-terminated character sequence (of type <code>char *</code>) and that can be overwritten in derived classes to contain some sort of description of the exception.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// using standard exceptions</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>class</var> myexception: <var>public</var> exception
{
  <var>virtual</var> <var>const</var> <var>char</var>* what() <var>const</var> <var>throw</var>()
  {
    <var>return</var> <kbd>""My exception happened""</kbd>;
  }
} myex;

<var>int</var> main () {
  <var>try</var>
  {
    <var>throw</var> myex;
  }
  <var>catch</var> (exception&amp; e)
  {
    cout &lt;&lt; e.what() &lt;&lt; <kbd>'\n'</kbd>;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>My exception happened.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
We have placed a handler that catches exception objects by reference (notice the ampersand <code>&amp;</code> after the type), therefore this catches also classes derived from <code>exception</code>, like our <code>myex</code> object of type <code>myexception</code>.<br/>
<br/>
All exceptions thrown by components of the C++ Standard library throw exceptions derived from this <code>exception</code> class. These are:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>exception</th><th>description</th></tr>
<tr><td><code><a href=""/bad_alloc"">bad_alloc</a></code></td><td>thrown by <code>new</code> on allocation failure</td></tr>
<tr><td><code><a href=""/bad_cast"">bad_cast</a></code></td><td>thrown by <code>dynamic_cast</code> when it fails in a dynamic cast</td></tr>
<tr><td><code><a href=""/bad_exception"">bad_exception</a></code></td><td>thrown by certain dynamic exception specifiers</td></tr>
<tr><td><code><a href=""/bad_typeid"">bad_typeid</a></code></td><td>thrown by <code>typeid</code></td></tr>
<tr><td><code><a href=""/bad_function_call"">bad_function_call</a></code></td><td>thrown by empty <code><a href=""/function"">function</a></code> objects</td></tr>
<tr><td><code><a href=""/bad_weak_ptr"">bad_weak_ptr</a></code></td><td>thrown by <code><a href=""/shared_ptr"">shared_ptr</a></code> when passed a bad <code><a href=""/weak_ptr"">weak_ptr</a></code></td></tr>
</tbody></table>
<br/>
Also deriving from <code>exception</code>, header <code><a href=""/&lt;exception&gt;"">&lt;exception&gt;</a></code> defines two generic exception types that can be inherited by custom exceptions to report errors:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>exception</th><th>description</th></tr>
<tr><td><code><a href=""/logic_error"">logic_error</a></code></td><td>error related to the internal logic of the program</td></tr>
<tr><td><code><a href=""/runtime_error"">runtime_error</a></code></td><td>error detected during runtime</td></tr>
</tbody></table>
<br/>
A typical example where standard exceptions need to be checked for is on memory allocation:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/>15<br/>16<br/></code></pre></td>
<td class=""source""><pre><code><cite>// bad_alloc standard exception</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;exception&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  <var>try</var>
  {
    <var>int</var>* myarray= <var>new</var> <var>int</var>[1000];
  }
  <var>catch</var> (exception&amp; e)
  {
    cout &lt;&lt; <kbd>""Standard exception: ""</kbd> &lt;&lt; e.what() &lt;&lt; endl;
  }
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp> </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
The exception that may be caught by the exception handler in this example is a <code>bad_alloc</code>. Because <code>bad_alloc</code> is derived from the standard base class <code>exception</code>, it can be caught (capturing by reference, captures all related classes).<br/>
</section></div>"
Other language features,Preprocessor directives,"<div class=""C_doc""><h1>Preprocessor directives</h1>
<section id=""description"">
Preprocessor directives are lines included in the code of programs preceded by a hash sign (<code>#</code>). These lines are not program statements but directives for the <i>preprocessor</i>. The preprocessor examines the code before actual compilation of code begins and resolves all these directives before any code is actually generated by regular statements.<br/>
<br/>
These <i>preprocessor directives</i> extend only across a single line of code. As soon as a newline character is found, the preprocessor directive is ends. No semicolon (<code>;</code>) is expected at the end of a preprocessor directive. The only way a preprocessor directive can extend through more than one line is by preceding the newline character at the end of the line by a backslash (<code>\</code>).<br/>
</section>
<br/>
<section id=""define_undef"">
<h3>macro definitions (#define, #undef)</h3>
To define preprocessor macros we can use <code>#define</code>. Its syntax is:<br/>
<br/>
<code>
#define identifier replacement<br/>
</code>
<br/>
When the preprocessor encounters this directive, it replaces any occurrence of <code>identifier</code> in the rest of the code by <code>replacement</code>. This <code>replacement</code> can be an expression, a statement, a block or simply anything. The preprocessor does not understand C++ proper, it simply replaces any occurrence of <code>identifier</code> by <code>replacement</code>.<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#define TABLE_SIZE 100</dfn>
<var>int</var> table1[TABLE_SIZE];
<var>int</var> table2[TABLE_SIZE];</code></pre></td>
</tr></tbody></table></div>
<br/>
After the preprocessor has replaced <code>TABLE_SIZE</code>, the code becomes equivalent to:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> table1[100];
<var>int</var> table2[100];</code></pre></td>
</tr></tbody></table></div>
<br/>
<code>#define</code> can work also with parameters to define function macros:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#define getmax(a,b) a&gt;b?a:b </dfn></code></pre></td>
</tr></tbody></table></div>
<br/>
This would replace any occurrence of <code>getmax</code> followed by two arguments by the replacement expression, but also replacing each argument by its identifier, exactly as you would expect if it was a function:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// function macro</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<dfn>#define getmax(a,b) ((a)&gt;(b)?(a):(b))</dfn>

<var>int</var> main()
{
  <var>int</var> x=5, y;
  y= getmax(x,2);
  cout &lt;&lt; y &lt;&lt; endl;
  cout &lt;&lt; getmax(7,x) &lt;&lt; endl;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>5
7</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Defined macros are not affected by block structure. A macro lasts until it is undefined with the <code>#undef</code> preprocessor directive:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#define TABLE_SIZE 100</dfn>
<var>int</var> table1[TABLE_SIZE];
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 200</dfn>
<var>int</var> table2[TABLE_SIZE];</code></pre></td>
</tr></tbody></table></div>
<br/>
This would generate the same code as:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><var>int</var> table1[100];
<var>int</var> table2[200];</code></pre></td>
</tr></tbody></table></div>
<br/>
Function macro definitions accept two special operators (<code>#</code> and <code>##</code>) in the replacement sequence:<br/>
The operator <code>#</code>, followed by a parameter name, is replaced by a string literal that contains the argument passed (as if enclosed between double quotes):<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#define str(x) #x</dfn>
cout &lt;&lt; str(test);</code></pre></td>
</tr></tbody></table></div>
<br/>
This would be translated into:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""test""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
The operator <code>##</code> concatenates two arguments leaving no blank spaces between them:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#define glue(a,b) a ## b</dfn>
glue(c,out) &lt;&lt; <kbd>""test""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
This would also be translated into:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>cout &lt;&lt; <kbd>""test""</kbd>;</code></pre></td>
</tr></tbody></table></div>
<br/>
Because preprocessor replacements happen before any C++ syntax check, macro definitions can be a tricky feature. But, be careful: code that relies heavily on complicated macros become less readable, since the syntax expected is on many occasions different from the normal expressions programmers expect in C++.<br/>
</section>
<br/>
<section id=""conditional_inclusions"">
<h3>Conditional inclusions (#ifdef, #ifndef, #if, #endif, #else and #elif)</h3>
<br/>
These directives allow to include or discard part of the code of a program if a certain condition is met.<br/>
<br/>
<code>#ifdef</code> allows a section of a program to be compiled only if the macro that is specified as the parameter has been defined, no matter which its value is. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#ifdef TABLE_SIZE</dfn>
<var>int</var> table[TABLE_SIZE];
<dfn>#endif  </dfn></code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, the line of code <code>int table[TABLE_SIZE];</code> is only compiled if <code>TABLE_SIZE</code> was previously defined with <code>#define</code>, independently of its value. If it was not defined, that line will not be included in the program compilation.<br/>
<br/>
<code>#ifndef</code> serves for the exact opposite: the code between <code>#ifndef</code> and <code>#endif</code> directives is only compiled if the specified identifier has not been previously defined. For example:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#ifndef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 100</dfn>
<dfn>#endif</dfn>
<var>int</var> table[TABLE_SIZE];</code></pre></td>
</tr></tbody></table></div>
<br/>
In this case, if when arriving at this piece of code, the <code>TABLE_SIZE</code> macro has not been defined yet, it would be defined to a value of 100. If it already existed it would keep its previous value since the <code>#define</code> directive would not be executed.<br/>
<br/>
The <code>#if</code>, <code>#else</code> and <code>#elif</code> (i.e., ""else if"") directives serve to specify some condition to be met in order for the portion of code they surround to be compiled. The condition that follows <code>#if</code> or <code>#elif</code> can only evaluate constant expressions, including macro expressions. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/>8<br/>9<br/>10<br/>11<br/>12<br/>13<br/>14<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#if TABLE_SIZE&gt;200</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 200</dfn>
 
<dfn>#elif TABLE_SIZE&lt;50</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 50</dfn>
 
<dfn>#else</dfn>
<dfn>#undef TABLE_SIZE</dfn>
<dfn>#define TABLE_SIZE 100</dfn>
<dfn>#endif</dfn>
 
<var>int</var> table[TABLE_SIZE];</code></pre></td>
</tr></tbody></table></div>
<br/>
Notice how the entire structure of <code>#if</code>, <code>#elif</code> and <code>#else</code> chained directives ends with <code>#endif</code>.<br/>
<br/>
The behavior of <code>#ifdef</code> and <code>#ifndef</code> can also be achieved by using the special operators <code>defined</code> and <code>!defined</code> respectively in any <code>#if</code> or <code>#elif</code> directive:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/>4<br/>5<br/>6<br/>7<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#if defined ARRAY_SIZE</dfn>
<dfn>#define TABLE_SIZE ARRAY_SIZE</dfn>
<dfn>#elif !defined BUFFER_SIZE</dfn>
<dfn>#define TABLE_SIZE 128</dfn>
<dfn>#else</dfn>
<dfn>#define TABLE_SIZE BUFFER_SIZE</dfn>
<dfn>#endif </dfn></code></pre></td>
</tr></tbody></table></div>
<section>
<br/>
<section id=""line_control"">
<h3>Line control (#line)</h3>
When we compile a program and some error happens during the compiling process, the compiler shows an error message with references to the name of the file where the error happened and a line number, so it is easier to find the code generating the error.<br/>
<br/>
The <code>#line</code> directive allows us to control both things, the line numbers within the code files as well as the file name that we want that appears when an error takes place. Its format is: <br/>
<br/>
<code>
#line number ""filename""<br/>
</code>
<br/>
Where <code>number</code> is the new line number that will be assigned to the next code line. The line numbers of successive lines will be increased one by one from this point on.<br/>
<br/>
<code>""filename""</code> is an optional parameter that allows to redefine the file name that will be shown. For example: <br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#line 20 ""assigning variable""</dfn>
<var>int</var> a?;</code></pre></td>
</tr></tbody></table></div>
<br/>
This code will generate an error that will be shown as error in file <code>""assigning variable""</code>, line 20.<br/>
</section>
<br/>
<section id=""error_directive"">
<h3>Error directive (#error)</h3>
This directive aborts the compilation process when it is found, generating a compilation error that can be specified as its parameter:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#ifndef __cplusplus</dfn>
<dfn>#error A C++ compiler is required!</dfn>
<dfn>#endif </dfn></code></pre></td>
</tr></tbody></table></div>
<br/>
This example aborts the compilation process if the macro name <code>__cplusplus</code> is not defined (this macro name is defined by default in all C++ compilers).<br/>
</section>
<br/>
<section id=""include"">
<h3>Source file inclusion (#include)</h3>
This directive has been used assiduously in other sections of this tutorial. When the preprocessor finds an <code>#include</code> directive it replaces it by the entire content of the specified header or file. There are two ways to use <code>#include</code>: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code><dfn>#include &lt;header&gt;</dfn>
<dfn>#include ""file"" </dfn></code></pre></td>
</tr></tbody></table></div>
<br/>
In the first case, a <i>header</i> is specified between angle-brackets <code>&lt;&gt;</code>. This is used to include headers provided by the implementation, such as the headers that compose the standard library (<code>iostream</code>, <code>string</code>,...). Whether the headers are actually files or exist in some other form is <i>implementation-defined</i>, but in any case they shall be properly included with this directive.<br/>
<br/>
The syntax used in the second <code>#include</code> uses quotes, and includes a <i>file</i>. The <i>file</i> is searched for in an <i>implementation-defined</i> manner, which generally includes the current path. In the case that the file is not found, the compiler interprets the directive as a <i>header</i> inclusion, just as if the quotes (<code>""""</code>) were replaced by angle-brackets (<code>&lt;&gt;</code>).<br/>
</section>
<br/>
<section id=""pragma"">
<h3>Pragma directive (#pragma)</h3>
This directive is used to specify diverse options to the compiler. These options are specific for the platform and the compiler you use. Consult the manual or the reference of your compiler for more information on the possible parameters that you can define with <code>#pragma</code>.<br/>
<br/>
If the compiler does not support a specific argument for <code>#pragma</code>, it is ignored - no syntax error is generated.<br/>
</section>
<br/>
<section id=""predefined_macro_names"">
<h3>Predefined macro names</h3>
The following macro names are always defined (they all begin and end with two underscore characters, <code>_</code>):<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>macro</th><th>value</th></tr>
<tr><td><code>__LINE__</code></td><td>Integer value representing the current line in the source code file being compiled.</td></tr>
<tr><td><code>__FILE__</code></td><td>A string literal containing the presumed name of the source file being compiled.</td></tr>
<tr><td><code>__DATE__</code></td><td>A string literal in the form ""Mmm dd yyyy"" containing the date in which the compilation process began.</td></tr>
<tr><td><code>__TIME__</code></td><td>A string literal in the form ""hh:mm:ss"" containing the time at which the compilation process began.</td></tr>
<tr><td><code>__cplusplus</code></td><td>An integer value. All C++ compilers have this constant defined to some value. Its value depends on the version of the standard supported by the compiler:<br/>
<ul>
<li><b><code>199711L</code></b>: ISO C++ 1998/2003</li>
<li><b><code>201103L</code></b>: ISO C++ 2011</li>
</ul>
Non conforming compilers define this constant as some value at most five digits long. Note that many compilers are not fully conforming and thus will have this constant defined as neither of the values above.<br/>
</td></tr>
<tr class=""cpp11""><td><code>__STDC_HOSTED__</code></td><td><code>1</code> if the implementation is a <i>hosted implementation</i> (with all standard headers available)<br/>
<code>0</code> otherwise.</td></tr>
</tbody></table>
<br/>
The following macros are optionally defined, generally depending on whether a feature is available:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>macro</th><th>value</th></tr>
<tr class=""cpp11""><td><code>__STDC__</code></td><td>In C: if defined to <code>1</code>, the implementation conforms to the C standard.<br/>
In C++: Implementation defined.</td></tr>
<tr class=""cpp11""><td><code>__STDC_VERSION__</code></td><td>In C:<br/>
<ul>
<li><b><code>199401L</code></b>: ISO C 1990, Ammendment 1</li>
<li><b><code>199901L</code></b>: ISO C 1999</li>
<li><b><code>201112L</code></b>: ISO C 2011</li>
</ul>
In C++: Implementation defined.</td></tr>
<tr class=""cpp11""><td><code>__STDC_MB_MIGHT_NEQ_WC__</code></td><td><code>1</code> if multibyte encoding might give a character a different value in character literals</td></tr>
<tr class=""cpp11""><td><code>__STDC_ISO_10646__</code></td><td>A value in the form <code>yyyymmL</code>, specifying the date of the Unicode standard followed by the encoding of <code>wchar_t</code> characters</td></tr>
<tr class=""cpp11""><td><code>__STDCPP_STRICT_POINTER_SAFETY__</code></td><td><code>1</code> if the implementation has <i>strict pointer safety</i> (see <code><a href=""/get_pointer_safety"">get_pointer_safety</a></code>)</td></tr>
<tr class=""cpp11""><td><code>__STDCPP_THREADS__</code></td><td><code>1</code> if the program can have more than one thread</td></tr>
</tbody></table>
<br/>
Particular implementations may define additional constants.<br/>
<br/>
For example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// standard macro names</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main()
{
  cout &lt;&lt; <kbd>""This is the line number ""</kbd> &lt;&lt; __LINE__;
  cout &lt;&lt; <kbd>"" of file ""</kbd> &lt;&lt; __FILE__ &lt;&lt; <kbd>"".\n""</kbd>;
  cout &lt;&lt; <kbd>""Its compilation began ""</kbd> &lt;&lt; __DATE__;
  cout &lt;&lt; <kbd>"" at ""</kbd> &lt;&lt; __TIME__ &lt;&lt; <kbd>"".\n""</kbd>;
  cout &lt;&lt; <kbd>""The compiler gives a __cplusplus value of ""</kbd> &lt;&lt; __cplusplus;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>This is the line number 7 of file /home/jay/stdmacronames.cpp.
Its compilation began Nov  1 2005 at 10:12:29.
The compiler gives a __cplusplus value of 1</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
</section><table class=""C_docPrevNext""><tbody><tr><td class=""prev""><a href=""/doc/tutorial/exceptions/"" rel=""prev""><img alt=""Previous"" height=""32"" src=""/ico/32arrowleft.png"" width=""32""/>Previous:<br/><b>Exceptions</b></a></td><td class=""index""><a href=""/doc/tutorial/"" rel=""index""><img alt=""Index"" height=""32"" src=""/ico/32doc.png"" width=""32""/><br/>Index</a></td><td class=""next""><a href=""/doc/tutorial/files/"" rel=""next""><img alt=""Next"" height=""32"" src=""/ico/32arrowright.png"" width=""32""/>Next:<br/><b>Input/output with files</b></a></td></tr></tbody></table></section></section></div>"
C++ Standard Library,Input/Output with files,"<div class=""C_doc""><h1>Input/output with files</h1>
<section id=""intro"">
C++ provides the following classes to perform output and input of characters to/from files: <br/>
<br/>
<ul>
<li><b><code><a href=""/ofstream"">ofstream</a></code>:</b> Stream class to write on files</li>
<li><b><code><a href=""/ifstream"">ifstream</a></code>:</b> Stream class to read from files</li>
<li><b><code><a href=""/fstream"">fstream</a></code>:</b> Stream class to both read and write from/to files.</li>
</ul>
<br/>
These classes are derived directly or indirectly from the classes <code>istream</code> and <code>ostream</code>. We have already used objects whose types were these classes: <code>cin</code> is an object of class <code>istream</code> and <code>cout</code> is an object of class <code>ostream</code>. Therefore, we have already been using classes that are related to our file streams. And in fact, we can use our file streams the same way we are already used to use <code>cin</code> and <code>cout</code>, with the only difference that we have to associate these streams with physical files. Let's see an example:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// basic file operations</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  ofstream myfile;
  myfile.open (<kbd>""example.txt""</kbd>);
  myfile &lt;&lt; <kbd>""Writing this to a file.\n""</kbd>;
  myfile.close();
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>[file example.txt]
Writing this to a file.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This code creates a file called <code>example.txt</code> and inserts a sentence into it in the same way we are used to do with <code>cout</code>, but using the file stream <code>myfile</code> instead.<br/>
<br/>
But let's go step by step:<br/>
</section>
<br/>
<section id=""opean_a_file"">
<h3>Open a file</h3>
The first operation generally performed on an object of one of these classes is to associate it to a real file. This procedure is known as to <i>open a file</i>. An open file is represented within a program by a <i>stream</i> (i.e., an object of one of these classes; in the previous example, this was <code>myfile</code>) and any input or output operation performed on this stream object will be applied to the physical file associated to it.<br/>
<br/>
In order to open a file with a stream object we use its member function <code>open</code>:<br/>
<br/>
<code>
open (filename, mode);<br/>
</code>
<br/>
Where <code>filename</code> is a string representing the name of the file to be opened, and <code>mode</code> is an optional parameter with a combination of the following flags:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><td><code>ios::in</code></td><td>Open for input operations.</td></tr>
<tr><td><code>ios::out</code></td><td>Open for output operations.</td></tr>
<tr><td><code>ios::binary</code></td><td>Open in binary mode.</td></tr>
<tr><td><code>ios::ate</code></td><td>Set the initial position at the end of the file.<br/>
If this flag is not set, the initial position is the beginning of the file.</td></tr>
<tr><td><code>ios::app</code></td><td>All output operations are performed at the end of the file, appending the content to the current content of the file.</td></tr>
<tr><td><code>ios::trunc</code></td><td>If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.</td></tr>
</tbody></table>
<br/>
All these flags can be combined using the bitwise operator OR (<code>|</code>). For example, if we want to open the file <code>example.bin</code> in binary mode to add data we could do it by the following call to member function <code>open</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/></code></pre></td>
<td class=""source""><pre><code>ofstream myfile;
myfile.open (<kbd>""example.bin""</kbd>, ios::out | ios::app | ios::binary);</code></pre></td>
</tr></tbody></table></div>
<br/>
Each of the <code>open</code> member functions of classes <code>ofstream</code>, <code>ifstream</code> and <code>fstream</code> has a default mode that is used if the file is opened without a second argument:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>class</th><th>default mode parameter</th></tr>
<tr><td><code>ofstream</code></td><td>ios::out</td></tr>
<tr><td><code>ifstream</code></td><td>ios::in</td></tr>
<tr><td><code>fstream</code></td><td>ios::in | ios::out</td></tr>
</tbody></table>
<br/>
For <code>ifstream</code> and <code>ofstream</code> classes, <code>ios::in</code> and <code>ios::out</code> are automatically and respectively assumed, even if a mode that does not include them is passed as second argument to the <code>open</code> member function (the flags are combined).<br/>
<br/>
For <code>fstream</code>, the default value is only applied if the function is called without specifying any value for the mode parameter. If the function is called with any value in that parameter the default mode is overridden, not combined.<br/>
<br/>
File streams opened in <i>binary mode</i> perform input and output operations independently of any format considerations. Non-binary files are known as <i>text files</i>, and some translations may occur due to formatting of some special characters (like newline and carriage return characters).<br/>
<br/>
Since the first task that is performed on a file stream is generally to open a file, these three classes include a constructor that automatically calls the <code>open</code> member function and has the exact same parameters as this member. Therefore, we could also have declared the previous <code>myfile</code> object and conduct the same opening operation in our previous example by writing:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>ofstream myfile (<kbd>""example.bin""</kbd>, ios::out | ios::app | ios::binary);</code></pre></td>
</tr></tbody></table></div>
<br/>
Combining object construction and stream opening in a single statement. Both forms to open a file are valid and equivalent.<br/>
<br/>
To check if a file stream was successful opening a file, you can do it by calling to member <code>is_open</code>. This member function returns a <code>bool</code> value of <code>true</code> in the case that indeed the stream object is associated with an open file, or <code>false</code> otherwise:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code><var>if</var> (myfile.is_open()) { <cite>/* ok, proceed with output */</cite> }</code></pre></td>
</tr></tbody></table></div>
</section>
<br/>
<section id=""closing_a_file"">
<h3>Closing a file</h3>
When we are finished with our input and output operations on a file we shall close it so that the operating system is notified and its resources become available again. For that, we call the stream's member function <code>close</code>. This member function takes flushes the associated buffers and closes the file:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>myfile.close();</code></pre></td>
</tr></tbody></table></div>
<br/>
Once this member function is called, the stream object can be re-used to open another file, and the file is available again to be opened by other processes.<br/>
<br/>
In case that an object is destroyed while still associated with an open file, the destructor automatically calls the member function <code>close</code>.<br/>
</section>
<br/>
<section id=""text_files"">
<h3>Text files</h3>
Text file streams are those where the <code>ios::binary</code> flag is not included in their opening mode. These files are designed to store text and thus all values that are input or output from/to them can suffer some formatting transformations, which do not necessarily correspond to their literal binary value.<br/>
<br/>
Writing operations on text files are performed in the same way we operated with <code>cout</code>:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// writing on a text file</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  ofstream myfile (<kbd>""example.txt""</kbd>);
  <var>if</var> (myfile.is_open())
  {
    myfile &lt;&lt; <kbd>""This is a line.\n""</kbd>;
    myfile &lt;&lt; <kbd>""This is another line.\n""</kbd>;
    myfile.close();
  }
  <var>else</var> cout &lt;&lt; <kbd>""Unable to open file""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>[file example.txt]
This is a line.
This is another line.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Reading from a file can also be performed in the same way that we did with <code>cin</code>:<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// reading a text file</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  string line;
  ifstream myfile (<kbd>""example.txt""</kbd>);
  <var>if</var> (myfile.is_open())
  {
    <var>while</var> ( getline (myfile,line) )
    {
      cout &lt;&lt; line &lt;&lt; <kbd>'\n'</kbd>;
    }
    myfile.close();
  }

  <var>else</var> cout &lt;&lt; <kbd>""Unable to open file""</kbd>; 

  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>This is a line.
This is another line.  </samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
This last example reads a text file and prints out its content on the screen. We have created a while loop that reads the file line by line, using <samp><a href=""/getline"">getline</a></samp>. The value returned by <samp><a href=""/getline"">getline</a></samp> is a reference to the stream object itself, which when evaluated as a boolean expression (as in this while-loop) is <code>true</code> if the stream is ready for more operations, and <code>false</code> if either the end of the file has been reached or if some other error occurred.<br/>
</section>
<br/>
<section id=""checking_state_flags"">
<h3>Checking state flags</h3>
The following member functions exist to check for specific states of a stream (all of them return a <code>bool</code> value): <br/>
<br/>
<dl>
<dt><code>bad()</code></dt>
<dd>Returns <code>true</code> if a reading or writing operation fails. For example, in the case that we try to write to a file that is not open for writing or if the device where we try to write has no space left.</dd>
<dt><code>fail()</code></dt>
<dd>Returns <code>true</code> in the same cases as <code>bad()</code>, but also in the case that a format error happens, like when an alphabetical character is extracted when we are trying to read an integer number.</dd>
<dt><code>eof()</code></dt>
<dd>Returns <code>true</code> if a file open for reading has reached the end.</dd>
<dt><code>good()</code></dt>
<dd>It is the most generic state flag: it returns <code>false</code> in the same cases in which calling any of the previous functions would return <code>true</code>. Note that <code>good</code> and <code>bad</code> are not exact opposites (<code>good</code> checks more state flags at once).</dd>
</dl>
<br/>
The member function <code>clear()</code> can be used to reset the state flags.<br/>
</section>
<br/>
<section id=""get_and_put"">
<h3>get and put stream positioning</h3>
All i/o streams objects keep internally -at least- one internal position:<br/>
<br/>
<code>ifstream</code>, like <code>istream</code>, keeps an internal <i>get position</i> with the location of the element to be read in the next input operation.<br/>
<br/>
<code>ofstream</code>, like <code>ostream</code>, keeps an internal <i>put position</i> with the location where the next element has to be written.<br/>
<br/>
Finally, <code>fstream</code>, keeps both, the <i>get</i> and the <i>put position</i>, like <code>iostream</code>.<br/>
<br/>
These internal stream positions point to the locations within the stream where the next reading or writing operation is performed. These positions can be observed and modified using the following member functions: <br/>
<br/>
<h4>tellg() and tellp()</h4>
These two member functions with no parameters return a value of the member type <code>streampos</code>, which is a type representing the current <i>get position</i> (in the case of <code>tellg</code>) or the <i>put position</i> (in the case of <code>tellp</code>).<br/>
<br/>
<h4>seekg() and seekp()</h4>
These functions allow to change the location of the <i>get</i> and <i>put positions</i>. Both functions are overloaded with two different prototypes. The first form is:<br/>
<br/>
<code>
seekg ( position );<br/>
seekp ( position );<br/>
</code>
<br/>
Using this prototype, the stream pointer is changed to the absolute position <code>position</code> (counting from the beginning of the file). The type for this parameter is <code>streampos</code>, which is the same type as returned by functions <code>tellg</code> and <code>tellp</code>.<br/>
<br/>
The other form for these functions is:<br/>
<br/>
<code>
seekg ( offset, direction );<br/>
seekp ( offset, direction );<br/>
</code>
<br/>
Using this prototype, the <i>get</i> or <i>put position</i> is set to an offset value relative to some specific point determined by the parameter <code>direction</code>. <code>offset</code> is of type <code>streamoff</code>. And <code>direction</code> is of type <code>seekdir</code>, which is an <i>enumerated type</i> that determines the point from where offset is counted from, and that can take any of the following values:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><td><code>ios::beg</code></td><td>offset counted from the beginning of the stream</td></tr>
<tr><td><code>ios::cur</code></td><td>offset counted from the current position</td></tr>
<tr><td><code>ios::end</code></td><td>offset counted from the end of the stream</td></tr>
</tbody></table>
<br/>
The following example uses the member functions we have just seen to obtain the size of a file: <br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// obtaining file size</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  streampos begin,end;
  ifstream myfile (<kbd>""example.bin""</kbd>, ios::binary);
  begin = myfile.tellg();
  myfile.seekg (0, ios::end);
  end = myfile.tellg();
  myfile.close();
  cout &lt;&lt; <kbd>""size is: ""</kbd> &lt;&lt; (end-begin) &lt;&lt; <kbd>"" bytes.\n""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>size is: 40 bytes.</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
Notice the type we have used for variables <code>begin</code> and <code>end</code>:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>streampos size;</code></pre></td>
</tr></tbody></table></div>
<br/>
<code>streampos</code> is a specific type used for buffer and file positioning and is the type returned by <code>file.tellg()</code>. Values of this type can safely be subtracted from other values of the same type, and can also be converted to an integer type large enough to contain the size of the file.<br/>
<br/>
These stream positioning functions use two particular types: <code>streampos</code> and <code>streamoff</code>. These types are also defined as member types of the stream class:<br/>
<br/>
<table class=""boxed"">
<tbody><tr><th>Type</th><th>Member type</th><th>Description</th></tr>
<tr><td><code><a href=""/streampos"">streampos</a></code></td><td><code><a href=""/ios#types"">ios::pos_type</a></code></td><td>Defined as <code><a href=""/fpos"">fpos&lt;mbstate_t&gt;</a></code>.<br/>
It can be converted to/from <code><a href=""/streamoff"">streamoff</a></code> and can be added or subtracted values of these types.</td></tr>
<tr><td><code><a href=""/streamoff"">streamoff</a></code></td><td><code><a href=""/ios#types"">ios::off_type</a></code></td><td>It is an alias of one of the fundamental integral types (such as <code>int</code> or <code>long long</code>).</td></tr>
</tbody></table>
<br/>
Each of the member types above is an alias of its non-member equivalent (they are the exact same type). It does not matter which one is used. The member types are more generic, because they are the same on all stream objects (even on streams using exotic types of characters), but the non-member types are widely used in existing code for historical reasons.<br/>
</section>
<br/>
<section id=""binary_files"">
<h3>Binary files</h3>
For binary files, reading and writing data with the extraction and insertion operators (<code>&lt;&lt;</code> and <code>&gt;&gt;</code>) and functions like <code>getline</code> is not efficient, since we do not need to format any data and data is likely not formatted in lines.<br/>
<br/>
File streams include two member functions specifically designed to read and write binary data sequentially: <code>write</code> and <code>read</code>. The first one (<code>write</code>) is a member function of <code>ostream</code> (inherited by <code>ofstream</code>). And <code>read</code> is a member function of <code>istream</code> (inherited by <code>ifstream</code>). Objects of class <code>fstream</code> have both. Their prototypes are:<br/>
<br/>
<tt>
write ( memory_block, size );<br/>
read ( memory_block, size );<br/>
</tt>
<br/>
Where <code>memory_block</code> is of type <code>char*</code> (pointer to <code>char</code>), and represents the address of an array of bytes where the read data elements are stored or from where the data elements to be written are taken. The <code>size</code> parameter is an integer value that specifies the number of characters to be read or written from/to the memory block.<br/>
<br/>
<div class=""auto C_CodeBox""><table class=""split""><tbody><tr><td class=""rownum""><pre><code></code></pre></td>
<td class=""source""><pre><code><cite>// reading an entire binary file</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>
<var>using</var> <var>namespace</var> std;

<var>int</var> main () {
  streampos size;
  <var>char</var> * memblock;

  ifstream file (<kbd>""example.bin""</kbd>, ios::in|ios::binary|ios::ate);
  <var>if</var> (file.is_open())
  {
    size = file.tellg();
    memblock = <var>new</var> <var>char</var> [size];
    file.seekg (0, ios::beg);
    file.read (memblock, size);
    file.close();

    cout &lt;&lt; <kbd>""the entire file content is in memory""</kbd>;

    <var>delete</var>[] memblock;
  }
  <var>else</var> cout &lt;&lt; <kbd>""Unable to open file""</kbd>;
  <var>return</var> 0;
}</code></pre></td>
<td class=""output""><pre><samp>the entire file content is in memory</samp></pre></td></tr></tbody></table><div class=""C_shell""></div></div>
<br/>
In this example, the entire file is read and stored in a memory block. Let's examine how this is done:<br/>
<br/>
First, the file is open with the <code>ios::ate</code> flag, which means that the get pointer will be positioned at the end of the file. This way, when we call to member <code>tellg()</code>, we will directly obtain the size of the file.<br/>
<br/>
Once we have obtained the size of the file, we request the allocation of a memory block large enough to hold the entire file:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/></code></pre></td>
<td class=""source""><pre><code>memblock = <var>new</var> <var>char</var>[size];</code></pre></td>
</tr></tbody></table></div>
<br/>
Right after that, we proceed to set the <i>get position</i> at the beginning of the file (remember that we opened the file with this pointer at the end), then we read the entire file, and finally close it:<br/>
<br/>
<div class=""auto""><table class=""snippet""><tbody><tr><td class=""rownum""><pre><code>1<br/>2<br/>3<br/></code></pre></td>
<td class=""source""><pre><code>file.seekg (0, ios::beg);
file.read (memblock, size);
file.close();</code></pre></td>
</tr></tbody></table></div>
<br/>
At this point we could operate with the data obtained from the file. But our program simply announces that the content of the file is in memory and then finishes.<br/>
</section>
<br/>
<section id=""buffers_and_sync"">
<h3>Buffers and Synchronization</h3>
When we operate with file streams, these are associated to an internal buffer object of type <code>streambuf</code>. This buffer object may represent a memory block that acts as an intermediary between the stream and the physical file. For example, with an <code>ofstream</code>, each time the member function <code>put</code> (which writes a single character) is called, the character may be inserted in this intermediate buffer instead of being written directly to the physical file with which the stream is associated.<br/>
<br/>
The operating system may also define other layers of buffering for reading and writing to files.<br/>
<br/>
When the buffer is flushed, all the data contained in it is written to the physical medium (if it is an output stream). This process is called <i>synchronization</i> and takes place under any of the following circumstances: <br/>
<br/>
<ul>
<li><b>When the file is closed:</b> before closing a file, all buffers that have not yet been flushed are synchronized and all pending data is written or read to the physical medium.</li>
<li><b>When the buffer is full:</b> Buffers have a certain size. When the buffer is full it is automatically synchronized.</li>
<li><b>Explicitly, with manipulators:</b> When certain manipulators are used on streams, an explicit synchronization takes place. These manipulators are: <code><a href=""/flush"">flush</a></code> and <code><a href=""/endl"">endl</a></code>.</li>
<li><b>Explicitly, with member function sync():</b> Calling the stream's member function <code>sync()</code> causes an immediate synchronization. This function returns an <code>int</code> value equal to <tt>-1</tt> if the stream has no associated buffer or in case of failure. Otherwise (if the stream buffer was successfully synchronized) it returns <code>0</code>.</li>
</ul>
</section></div>"
