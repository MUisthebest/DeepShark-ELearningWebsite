Title,Inner Title,Link,Content
4. SQL Syntax,4.1. Lexical Structure,https://www.postgresql.org/docs/17/sql-syntax-lexical.html,"<div class=""sect1"" id=""SQL-SYNTAX-LEXICAL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     4.1. Lexical Structure
     <a class=""id_link"" href=""#SQL-SYNTAX-LEXICAL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS"">
      4.1.1. Identifiers and Key Words
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS"">
      4.1.2. Constants
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-SYNTAX-OPERATORS"">
      4.1.3. Operators
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS"">
      4.1.4. Special Characters
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-SYNTAX-COMMENTS"">
      4.1.5. Comments
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-lexical.html#SQL-PRECEDENCE"">
      4.1.6. Operator Precedence
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.3.5.2"" name=""id-1.5.3.5.2"">
 </a>
 <p>
  SQL input consists of a sequence of
  <em class=""firstterm"">
   commands
  </em>
  . A command is composed of a sequence of
  <em class=""firstterm"">
   tokens
  </em>
  , terminated by a semicolon (
  <span class=""quote"">
   “
   <span class=""quote"">
    ;
   </span>
   ”
  </span>
  ). The end of the input stream also terminates a command. Which tokens are valid depends on the syntax of the particular command.
 </p>
 <p>
  A token can be a
  <em class=""firstterm"">
   key word
  </em>
  , an
  <em class=""firstterm"">
   identifier
  </em>
  , a
  <em class=""firstterm"">
   quoted identifier
  </em>
  , a
  <em class=""firstterm"">
   literal
  </em>
  (or constant), or a special character symbol. Tokens are normally separated by whitespace (space, tab, newline), but need not be if there is no ambiguity (which is generally only the case if a special character is adjacent to some other token type).
 </p>
 <p>
  For example, the following is (syntactically) valid SQL input:
 </p>
 <pre class=""programlisting"">
SELECT * FROM MY_TABLE;
UPDATE MY_TABLE SET A = 5;
INSERT INTO MY_TABLE VALUES (3, 'hi there');
</pre>
 <p>
  This is a sequence of three commands, one per line (although this is not required; more than one command can be on a line, and commands can usefully be split across lines).
 </p>
 <p>
  Additionally,
  <em class=""firstterm"">
   comments
  </em>
  can occur in SQL input. They are not tokens, they are effectively equivalent to whitespace.
 </p>
 <p>
  The SQL syntax is not very consistent regarding what tokens identify commands and which are operands or parameters. The first few tokens are generally the command name, so in the above example we would usually speak of a
  <span class=""quote"">
   “
   <span class=""quote"">
    SELECT
   </span>
   ”
  </span>
  , an
  <span class=""quote"">
   “
   <span class=""quote"">
    UPDATE
   </span>
   ”
  </span>
  , and an
  <span class=""quote"">
   “
   <span class=""quote"">
    INSERT
   </span>
   ”
  </span>
  command. But for instance the
  <code class=""command"">
   UPDATE
  </code>
  command always requires a
  <code class=""token"">
   SET
  </code>
  token to appear in a certain position, and this particular variation of
  <code class=""command"">
   INSERT
  </code>
  also requires a
  <code class=""token"">
   VALUES
  </code>
  in order to be complete. The precise syntax rules for each command are described in
  <a class=""xref"" href=""reference.html"" title=""Part VI. Reference"">
   Part VI
  </a>
  .
 </p>
 <div class=""sect2"" id=""SQL-SYNTAX-IDENTIFIERS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.1. Identifiers and Key Words
      <a class=""id_link"" href=""#SQL-SYNTAX-IDENTIFIERS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.5.8.2"" name=""id-1.5.3.5.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.5.8.3"" name=""id-1.5.3.5.8.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.5.8.4"" name=""id-1.5.3.5.8.4"">
  </a>
  <p>
   Tokens such as
   <code class=""token"">
    SELECT
   </code>
   ,
   <code class=""token"">
    UPDATE
   </code>
   , or
   <code class=""token"">
    VALUES
   </code>
   in the example above are examples of
   <em class=""firstterm"">
    key words
   </em>
   , that is, words that have a fixed meaning in the SQL language. The tokens
   <code class=""token"">
    MY_TABLE
   </code>
   and
   <code class=""token"">
    A
   </code>
   are examples of
   <em class=""firstterm"">
    identifiers
   </em>
   . They identify names of tables, columns, or other database objects, depending on the command they are used in. Therefore they are sometimes simply called
   <span class=""quote"">
    “
    <span class=""quote"">
     names
    </span>
    ”
   </span>
   . Key words and identifiers have the same lexical structure, meaning that one cannot know whether a token is an identifier or a key word without knowing the language. A complete list of key words can be found in
   <a class=""xref"" href=""sql-keywords-appendix.html"" title=""Appendix C. SQL Key Words"">
    Appendix C
   </a>
   .
  </p>
  <p>
   SQL identifiers and key words must begin with a letter (
   <code class=""literal"">
    a
   </code>
   -
   <code class=""literal"">
    z
   </code>
   , but also letters with diacritical marks and non-Latin letters) or an underscore (
   <code class=""literal"">
    _
   </code>
   ). Subsequent characters in an identifier or key word can be letters, underscores, digits (
   <code class=""literal"">
    0
   </code>
   -
   <code class=""literal"">
    9
   </code>
   ), or dollar signs (
   <code class=""literal"">
    $
   </code>
   ). Note that dollar signs are not allowed in identifiers according to the letter of the SQL standard, so their use might render applications less portable. The SQL standard will not define a key word that contains digits or starts or ends with an underscore, so identifiers of this form are safe against possible conflict with future extensions of the standard.
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.3.5.8.7.1"" name=""id-1.5.3.5.8.7.1"">
   </a>
   The system uses no more than
   <code class=""symbol"">
    NAMEDATALEN
   </code>
   -1 bytes of an identifier; longer names can be written in commands, but they will be truncated. By default,
   <code class=""symbol"">
    NAMEDATALEN
   </code>
   is 64 so the maximum identifier length is 63 bytes. If this limit is problematic, it can be raised by changing the
   <code class=""symbol"">
    NAMEDATALEN
   </code>
   constant in
   <code class=""filename"">
    src/include/pg_config_manual.h
   </code>
   .
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.3.5.8.8.1"" name=""id-1.5.3.5.8.8.1"">
   </a>
   Key words and unquoted identifiers are case-insensitive. Therefore:
  </p>
  <pre class=""programlisting"">
UPDATE MY_TABLE SET A = 5;
</pre>
  <p>
   can equivalently be written as:
  </p>
  <pre class=""programlisting"">
uPDaTE my_TabLE SeT a = 5;
</pre>
  <p>
   A convention often used is to write key words in upper case and names in lower case, e.g.:
  </p>
  <pre class=""programlisting"">
UPDATE my_table SET a = 5;
</pre>
  <p>
   <a class=""indexterm"" id=""id-1.5.3.5.8.9.1"" name=""id-1.5.3.5.8.9.1"">
   </a>
   There is a second kind of identifier: the
   <em class=""firstterm"">
    delimited identifier
   </em>
   or
   <em class=""firstterm"">
    quoted identifier
   </em>
   . It is formed by enclosing an arbitrary sequence of characters in double-quotes (
   <code class=""literal"">
    ""
   </code>
   ). A delimited identifier is always an identifier, never a key word. So
   <code class=""literal"">
    ""select""
   </code>
   could be used to refer to a column or table named
   <span class=""quote"">
    “
    <span class=""quote"">
     select
    </span>
    ”
   </span>
   , whereas an unquoted
   <code class=""literal"">
    select
   </code>
   would be taken as a key word and would therefore provoke a parse error when used where a table or column name is expected. The example can be written with quoted identifiers like this:
  </p>
  <pre class=""programlisting"">
UPDATE ""my_table"" SET ""a"" = 5;
</pre>
  <p>
   Quoted identifiers can contain any character, except the character with code zero. (To include a double quote, write two double quotes.) This allows constructing table or column names that would otherwise not be possible, such as ones containing spaces or ampersands. The length limitation still applies.
  </p>
  <p>
   Quoting an identifier also makes it case-sensitive, whereas unquoted names are always folded to lower case. For example, the identifiers
   <code class=""literal"">
    FOO
   </code>
   ,
   <code class=""literal"">
    foo
   </code>
   , and
   <code class=""literal"">
    ""foo""
   </code>
   are considered the same by
   <span class=""productname"">
    PostgreSQL
   </span>
   , but
   <code class=""literal"">
    ""Foo""
   </code>
   and
   <code class=""literal"">
    ""FOO""
   </code>
   are different from these three and each other. (The folding of unquoted names to lower case in
   <span class=""productname"">
    PostgreSQL
   </span>
   is incompatible with the SQL standard, which says that unquoted names should be folded to upper case. Thus,
   <code class=""literal"">
    foo
   </code>
   should be equivalent to
   <code class=""literal"">
    ""FOO""
   </code>
   not
   <code class=""literal"">
    ""foo""
   </code>
   according to the standard. If you want to write portable applications you are advised to always quote a particular name or never quote it.)
  </p>
  <a class=""indexterm"" id=""id-1.5.3.5.8.12"" name=""id-1.5.3.5.8.12"">
  </a>
  <p>
   A variant of quoted identifiers allows including escaped Unicode characters identified by their code points. This variant starts with
   <code class=""literal"">
    U&amp;
   </code>
   (upper or lower case U followed by ampersand) immediately before the opening double quote, without any spaces in between, for example
   <code class=""literal"">
    U&amp;""foo""
   </code>
   . (Note that this creates an ambiguity with the operator
   <code class=""literal"">
    &amp;
   </code>
   . Use spaces around the operator to avoid this problem.) Inside the quotes, Unicode characters can be specified in escaped form by writing a backslash followed by the four-digit hexadecimal code point number or alternatively a backslash followed by a plus sign followed by a six-digit hexadecimal code point number. For example, the identifier
   <code class=""literal"">
    ""data""
   </code>
   could be written as
  </p>
  <pre class=""programlisting"">
U&amp;""d\0061t\+000061""
</pre>
  <p>
   The following less trivial example writes the Russian word
   <span class=""quote"">
    “
    <span class=""quote"">
     slon
    </span>
    ”
   </span>
   (elephant) in Cyrillic letters:
  </p>
  <pre class=""programlisting"">
U&amp;""\0441\043B\043E\043D""
</pre>
  <p>
   If a different escape character than backslash is desired, it can be specified using the
   <code class=""literal"">
    UESCAPE
   </code>
   <a class=""indexterm"" id=""id-1.5.3.5.8.14.2"" name=""id-1.5.3.5.8.14.2"">
   </a>
   clause after the string, for example:
  </p>
  <pre class=""programlisting"">
U&amp;""d!0061t!+000061"" UESCAPE '!'
</pre>
  <p>
   The escape character can be any single character other than a hexadecimal digit, the plus sign, a single quote, a double quote, or a whitespace character. Note that the escape character is written in single quotes, not double quotes, after
   <code class=""literal"">
    UESCAPE
   </code>
   .
  </p>
  <p>
   To include the escape character in the identifier literally, write it twice.
  </p>
  <p>
   Either the 4-digit or the 6-digit escape form can be used to specify UTF-16 surrogate pairs to compose characters with code points larger than U+FFFF, although the availability of the 6-digit form technically makes this unnecessary. (Surrogate pairs are not stored directly, but are combined into a single code point.)
  </p>
  <p>
   If the server encoding is not UTF-8, the Unicode code point identified by one of these escape sequences is converted to the actual server encoding; an error is reported if that's not possible.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-CONSTANTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.2. Constants
      <a class=""id_link"" href=""#SQL-SYNTAX-CONSTANTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.5.9.2"" name=""id-1.5.3.5.9.2"">
  </a>
  <p>
   There are three kinds of
   <em class=""firstterm"">
    implicitly-typed constants
   </em>
   in
   <span class=""productname"">
    PostgreSQL
   </span>
   : strings, bit strings, and numbers. Constants can also be specified with explicit types, which can enable more accurate representation and more efficient handling by the system. These alternatives are discussed in the following subsections.
  </p>
  <div class=""sect3"" id=""SQL-SYNTAX-STRINGS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.1. String Constants
       <a class=""id_link"" href=""#SQL-SYNTAX-STRINGS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.4.2"" name=""id-1.5.3.5.9.4.2"">
   </a>
   <p>
    <a class=""indexterm"" id=""id-1.5.3.5.9.4.3.1"" name=""id-1.5.3.5.9.4.3.1"">
    </a>
    A string constant in SQL is an arbitrary sequence of characters bounded by single quotes (
    <code class=""literal"">
     '
    </code>
    ), for example
    <code class=""literal"">
     'This is a string'
    </code>
    . To include a single-quote character within a string constant, write two adjacent single quotes, e.g.,
    <code class=""literal"">
     'Dianne''s horse'
    </code>
    . Note that this is
    <span class=""emphasis"">
     <em>
      not
     </em>
    </span>
    the same as a double-quote character (
    <code class=""literal"">
     ""
    </code>
    ).
   </p>
   <p>
    Two string constants that are only separated by whitespace
    <span class=""emphasis"">
     <em>
      with at least one newline
     </em>
    </span>
    are concatenated and effectively treated as if the string had been written as one constant. For example:
   </p>
   <pre class=""programlisting"">
SELECT 'foo'
'bar';
</pre>
   <p>
    is equivalent to:
   </p>
   <pre class=""programlisting"">
SELECT 'foobar';
</pre>
   <p>
    but:
   </p>
   <pre class=""programlisting"">
SELECT 'foo'      'bar';
</pre>
   <p>
    is not valid syntax. (This slightly bizarre behavior is specified by
    <acronym class=""acronym"">
     SQL
    </acronym>
    ;
    <span class=""productname"">
     PostgreSQL
    </span>
    is following the standard.)
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-STRINGS-ESCAPE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.2. String Constants with C-Style Escapes
       <a class=""id_link"" href=""#SQL-SYNTAX-STRINGS-ESCAPE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.5.2"" name=""id-1.5.3.5.9.5.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.3.5.9.5.3"" name=""id-1.5.3.5.9.5.3"">
   </a>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    also accepts
    <span class=""quote"">
     “
     <span class=""quote"">
      escape
     </span>
     ”
    </span>
    string constants, which are an extension to the SQL standard. An escape string constant is specified by writing the letter
    <code class=""literal"">
     E
    </code>
    (upper or lower case) just before the opening single quote, e.g.,
    <code class=""literal"">
     E'foo'
    </code>
    . (When continuing an escape string constant across lines, write
    <code class=""literal"">
     E
    </code>
    only before the first opening quote.) Within an escape string, a backslash character (
    <code class=""literal"">
     \
    </code>
    ) begins a C-like
    <em class=""firstterm"">
     backslash escape
    </em>
    sequence, in which the combination of backslash and following character(s) represent a special byte value, as shown in
    <a class=""xref"" href=""sql-syntax-lexical.html#SQL-BACKSLASH-TABLE"" title=""Table 4.1. Backslash Escape Sequences"">
     Table 4.1
    </a>
    .
   </p>
   <div class=""table"" id=""SQL-BACKSLASH-TABLE"">
    <p class=""title"">
     <strong>
      Table 4.1. Backslash Escape Sequences
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Backslash Escape Sequences"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Backslash Escape Sequence
        </th>
        <th>
         Interpretation
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          \b
         </code>
        </td>
        <td>
         backspace
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \f
         </code>
        </td>
        <td>
         form feed
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \n
         </code>
        </td>
        <td>
         newline
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \r
         </code>
        </td>
        <td>
         carriage return
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \t
         </code>
        </td>
        <td>
         tab
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
          <em class=""replaceable"">
           <code>
            o
           </code>
          </em>
         </code>
         ,
         <code class=""literal"">
          \
          <em class=""replaceable"">
           <code>
            oo
           </code>
          </em>
         </code>
         ,
         <code class=""literal"">
          \
          <em class=""replaceable"">
           <code>
            ooo
           </code>
          </em>
         </code>
         (
         <em class=""replaceable"">
          <code>
           o
          </code>
         </em>
         = 0–7)
        </td>
        <td>
         octal byte value
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \x
          <em class=""replaceable"">
           <code>
            h
           </code>
          </em>
         </code>
         ,
         <code class=""literal"">
          \x
          <em class=""replaceable"">
           <code>
            hh
           </code>
          </em>
         </code>
         (
         <em class=""replaceable"">
          <code>
           h
          </code>
         </em>
         = 0–9, A–F)
        </td>
        <td>
         hexadecimal byte value
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \u
          <em class=""replaceable"">
           <code>
            xxxx
           </code>
          </em>
         </code>
         ,
         <code class=""literal"">
          \U
          <em class=""replaceable"">
           <code>
            xxxxxxxx
           </code>
          </em>
         </code>
         (
         <em class=""replaceable"">
          <code>
           x
          </code>
         </em>
         = 0–9, A–F)
        </td>
        <td>
         16 or 32-bit hexadecimal Unicode character value
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Any other character following a backslash is taken literally. Thus, to include a backslash character, write two backslashes (
    <code class=""literal"">
     \\
    </code>
    ). Also, a single quote can be included in an escape string by writing
    <code class=""literal"">
     \'
    </code>
    , in addition to the normal way of
    <code class=""literal"">
     ''
    </code>
    .
   </p>
   <p>
    It is your responsibility that the byte sequences you create, especially when using the octal or hexadecimal escapes, compose valid characters in the server character set encoding. A useful alternative is to use Unicode escapes or the alternative Unicode escape syntax, explained in
    <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-UESCAPE"" title=""4.1.2.3. String Constants with Unicode Escapes"">
     Section 4.1.2.3
    </a>
    ; then the server will check that the character conversion is possible.
   </p>
   <div class=""caution"">
    <h3 class=""title"">
     Caution
    </h3>
    <p>
     If the configuration parameter
     <a class=""xref"" href=""runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS"">
      standard_conforming_strings
     </a>
     is
     <code class=""literal"">
      off
     </code>
     , then
     <span class=""productname"">
      PostgreSQL
     </span>
     recognizes backslash escapes in both regular and escape string constants. However, as of
     <span class=""productname"">
      PostgreSQL
     </span>
     9.1, the default is
     <code class=""literal"">
      on
     </code>
     , meaning that backslash escapes are recognized only in escape string constants. This behavior is more standards-compliant, but might break applications which rely on the historical behavior, where backslash escapes were always recognized. As a workaround, you can set this parameter to
     <code class=""literal"">
      off
     </code>
     , but it is better to migrate away from using backslash escapes. If you need to use a backslash escape to represent a special character, write the string constant with an
     <code class=""literal"">
      E
     </code>
     .
    </p>
    <p>
     In addition to
     <code class=""varname"">
      standard_conforming_strings
     </code>
     , the configuration parameters
     <a class=""xref"" href=""runtime-config-compatible.html#GUC-ESCAPE-STRING-WARNING"">
      escape_string_warning
     </a>
     and
     <a class=""xref"" href=""runtime-config-compatible.html#GUC-BACKSLASH-QUOTE"">
      backslash_quote
     </a>
     govern treatment of backslashes in string constants.
    </p>
   </div>
   <p>
    The character with the code zero cannot be in a string constant.
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-STRINGS-UESCAPE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.3. String Constants with Unicode Escapes
       <a class=""id_link"" href=""#SQL-SYNTAX-STRINGS-UESCAPE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.6.2"" name=""id-1.5.3.5.9.6.2"">
   </a>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    also supports another type of escape syntax for strings that allows specifying arbitrary Unicode characters by code point. A Unicode escape string constant starts with
    <code class=""literal"">
     U&amp;
    </code>
    (upper or lower case letter U followed by ampersand) immediately before the opening quote, without any spaces in between, for example
    <code class=""literal"">
     U&amp;'foo'
    </code>
    . (Note that this creates an ambiguity with the operator
    <code class=""literal"">
     &amp;
    </code>
    . Use spaces around the operator to avoid this problem.) Inside the quotes, Unicode characters can be specified in escaped form by writing a backslash followed by the four-digit hexadecimal code point number or alternatively a backslash followed by a plus sign followed by a six-digit hexadecimal code point number. For example, the string
    <code class=""literal"">
     'data'
    </code>
    could be written as
   </p>
   <pre class=""programlisting"">
U&amp;'d\0061t\+000061'
</pre>
   <p>
    The following less trivial example writes the Russian word
    <span class=""quote"">
     “
     <span class=""quote"">
      slon
     </span>
     ”
    </span>
    (elephant) in Cyrillic letters:
   </p>
   <pre class=""programlisting"">
U&amp;'\0441\043B\043E\043D'
</pre>
   <p>
    If a different escape character than backslash is desired, it can be specified using the
    <code class=""literal"">
     UESCAPE
    </code>
    <a class=""indexterm"" id=""id-1.5.3.5.9.6.4.2"" name=""id-1.5.3.5.9.6.4.2"">
    </a>
    clause after the string, for example:
   </p>
   <pre class=""programlisting"">
U&amp;'d!0061t!+000061' UESCAPE '!'
</pre>
   <p>
    The escape character can be any single character other than a hexadecimal digit, the plus sign, a single quote, a double quote, or a whitespace character.
   </p>
   <p>
    To include the escape character in the string literally, write it twice.
   </p>
   <p>
    Either the 4-digit or the 6-digit escape form can be used to specify UTF-16 surrogate pairs to compose characters with code points larger than U+FFFF, although the availability of the 6-digit form technically makes this unnecessary. (Surrogate pairs are not stored directly, but are combined into a single code point.)
   </p>
   <p>
    If the server encoding is not UTF-8, the Unicode code point identified by one of these escape sequences is converted to the actual server encoding; an error is reported if that's not possible.
   </p>
   <p>
    Also, the Unicode escape syntax for string constants only works when the configuration parameter
    <a class=""xref"" href=""runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS"">
     standard_conforming_strings
    </a>
    is turned on. This is because otherwise this syntax could confuse clients that parse the SQL statements to the point that it could lead to SQL injections and similar security issues. If the parameter is set to off, this syntax will be rejected with an error message.
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-DOLLAR-QUOTING"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.4. Dollar-Quoted String Constants
       <a class=""id_link"" href=""#SQL-SYNTAX-DOLLAR-QUOTING"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.7.2"" name=""id-1.5.3.5.9.7.2"">
   </a>
   <p>
    While the standard syntax for specifying string constants is usually convenient, it can be difficult to understand when the desired string contains many single quotes, since each of those must be doubled. To allow more readable queries in such situations,
    <span class=""productname"">
     PostgreSQL
    </span>
    provides another way, called
    <span class=""quote"">
     “
     <span class=""quote"">
      dollar quoting
     </span>
     ”
    </span>
    , to write string constants. A dollar-quoted string constant consists of a dollar sign (
    <code class=""literal"">
     $
    </code>
    ), an optional
    <span class=""quote"">
     “
     <span class=""quote"">
      tag
     </span>
     ”
    </span>
    of zero or more characters, another dollar sign, an arbitrary sequence of characters that makes up the string content, a dollar sign, the same tag that began this dollar quote, and a dollar sign. For example, here are two different ways to specify the string
    <span class=""quote"">
     “
     <span class=""quote"">
      Dianne's horse
     </span>
     ”
    </span>
    using dollar quoting:
   </p>
   <pre class=""programlisting"">
$$Dianne's horse$$
$SomeTag$Dianne's horse$SomeTag$
</pre>
   <p>
    Notice that inside the dollar-quoted string, single quotes can be used without needing to be escaped. Indeed, no characters inside a dollar-quoted string are ever escaped: the string content is always written literally. Backslashes are not special, and neither are dollar signs, unless they are part of a sequence matching the opening tag.
   </p>
   <p>
    It is possible to nest dollar-quoted string constants by choosing different tags at each nesting level. This is most commonly used in writing function definitions. For example:
   </p>
   <pre class=""programlisting"">
$function$
BEGIN
    RETURN ($1 ~ $q$[\t\r\n\v\\]$q$);
END;
$function$
</pre>
   <p>
    Here, the sequence
    <code class=""literal"">
     $q$[\t\r\n\v\\]$q$
    </code>
    represents a dollar-quoted literal string
    <code class=""literal"">
     [\t\r\n\v\\]
    </code>
    , which will be recognized when the function body is executed by
    <span class=""productname"">
     PostgreSQL
    </span>
    . But since the sequence does not match the outer dollar quoting delimiter
    <code class=""literal"">
     $function$
    </code>
    , it is just some more characters within the constant so far as the outer string is concerned.
   </p>
   <p>
    The tag, if any, of a dollar-quoted string follows the same rules as an unquoted identifier, except that it cannot contain a dollar sign. Tags are case sensitive, so
    <code class=""literal"">
     $tag$String content$tag$
    </code>
    is correct, but
    <code class=""literal"">
     $TAG$String content$tag$
    </code>
    is not.
   </p>
   <p>
    A dollar-quoted string that follows a keyword or identifier must be separated from it by whitespace; otherwise the dollar quoting delimiter would be taken as part of the preceding identifier.
   </p>
   <p>
    Dollar quoting is not part of the SQL standard, but it is often a more convenient way to write complicated string literals than the standard-compliant single quote syntax. It is particularly useful when representing string constants inside other constants, as is often needed in procedural function definitions. With single-quote syntax, each backslash in the above example would have to be written as four backslashes, which would be reduced to two backslashes in parsing the original string constant, and then to one when the inner string constant is re-parsed during function execution.
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-BIT-STRINGS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.5. Bit-String Constants
       <a class=""id_link"" href=""#SQL-SYNTAX-BIT-STRINGS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.8.2"" name=""id-1.5.3.5.9.8.2"">
   </a>
   <p>
    Bit-string constants look like regular string constants with a
    <code class=""literal"">
     B
    </code>
    (upper or lower case) immediately before the opening quote (no intervening whitespace), e.g.,
    <code class=""literal"">
     B'1001'
    </code>
    . The only characters allowed within bit-string constants are
    <code class=""literal"">
     0
    </code>
    and
    <code class=""literal"">
     1
    </code>
    .
   </p>
   <p>
    Alternatively, bit-string constants can be specified in hexadecimal notation, using a leading
    <code class=""literal"">
     X
    </code>
    (upper or lower case), e.g.,
    <code class=""literal"">
     X'1FF'
    </code>
    . This notation is equivalent to a bit-string constant with four binary digits for each hexadecimal digit.
   </p>
   <p>
    Both forms of bit-string constant can be continued across lines in the same way as regular string constants. Dollar quoting cannot be used in a bit-string constant.
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-CONSTANTS-NUMERIC"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.6. Numeric Constants
       <a class=""id_link"" href=""#SQL-SYNTAX-CONSTANTS-NUMERIC"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.9.2"" name=""id-1.5.3.5.9.9.2"">
   </a>
   <p>
    Numeric constants are accepted in these general forms:
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>digits</code></em>
<em class=""replaceable""><code>digits</code></em>.[<span class=""optional""><em class=""replaceable""><code>digits</code></em></span>][<span class=""optional"">e[<span class=""optional"">+-</span>]<em class=""replaceable""><code>digits</code></em></span>]
[<span class=""optional""><em class=""replaceable""><code>digits</code></em></span>].<em class=""replaceable""><code>digits</code></em>[<span class=""optional"">e[<span class=""optional"">+-</span>]<em class=""replaceable""><code>digits</code></em></span>]
<em class=""replaceable""><code>digits</code></em>e[<span class=""optional"">+-</span>]<em class=""replaceable""><code>digits</code></em>
</pre>
   <p>
    where
    <em class=""replaceable"">
     <code>
      digits
     </code>
    </em>
    is one or more decimal digits (0 through 9). At least one digit must be before or after the decimal point, if one is used. At least one digit must follow the exponent marker (
    <code class=""literal"">
     e
    </code>
    ), if one is present. There cannot be any spaces or other characters embedded in the constant, except for underscores, which can be used for visual grouping as described below. Note that any leading plus or minus sign is not actually considered part of the constant; it is an operator applied to the constant.
   </p>
   <p>
    These are some examples of valid numeric constants:
   </p>
   <div class=""literallayout"">
    <p>
     <br/>
     42
     <br/>
     3.5
     <br/>
     4.
     <br/>
     .001
     <br/>
     5e2
     <br/>
     1.925e-3
     <br/>
    </p>
   </div>
   <p>
    Additionally, non-decimal integer constants are accepted in these forms:
   </p>
   <pre class=""synopsis"">
0x<em class=""replaceable""><code>hexdigits</code></em>
0o<em class=""replaceable""><code>octdigits</code></em>
0b<em class=""replaceable""><code>bindigits</code></em>
</pre>
   <p>
    where
    <em class=""replaceable"">
     <code>
      hexdigits
     </code>
    </em>
    is one or more hexadecimal digits (0-9, A-F),
    <em class=""replaceable"">
     <code>
      octdigits
     </code>
    </em>
    is one or more octal digits (0-7), and
    <em class=""replaceable"">
     <code>
      bindigits
     </code>
    </em>
    is one or more binary digits (0 or 1). Hexadecimal digits and the radix prefixes can be in upper or lower case. Note that only integers can have non-decimal forms, not numbers with fractional parts.
   </p>
   <p>
    These are some examples of valid non-decimal integer constants:
   </p>
   <div class=""literallayout"">
    <p>
     <br/>
     0b100101
     <br/>
     0B10011001
     <br/>
     0o273
     <br/>
     0O755
     <br/>
     0x42f
     <br/>
     0XFFFF
     <br/>
    </p>
   </div>
   <p>
    For visual grouping, underscores can be inserted between digits. These have no further effect on the value of the constant. For example:
   </p>
   <div class=""literallayout"">
    <p>
     <br/>
     1_500_000_000
     <br/>
     0b10001000_00000000
     <br/>
     0o_1_755
     <br/>
     0xFFFF_FFFF
     <br/>
     1.618_034
     <br/>
    </p>
   </div>
   <p>
    Underscores are not allowed at the start or end of a numeric constant or a group of digits (that is, immediately before or after the decimal point or the exponent marker), and more than one underscore in a row is not allowed.
   </p>
   <p>
    <a class=""indexterm"" id=""id-1.5.3.5.9.9.8.1"" name=""id-1.5.3.5.9.9.8.1"">
    </a>
    <a class=""indexterm"" id=""id-1.5.3.5.9.9.8.2"" name=""id-1.5.3.5.9.9.8.2"">
    </a>
    <a class=""indexterm"" id=""id-1.5.3.5.9.9.8.3"" name=""id-1.5.3.5.9.9.8.3"">
    </a>
    A numeric constant that contains neither a decimal point nor an exponent is initially presumed to be type
    <code class=""type"">
     integer
    </code>
    if its value fits in type
    <code class=""type"">
     integer
    </code>
    (32 bits); otherwise it is presumed to be type
    <code class=""type"">
     bigint
    </code>
    if its value fits in type
    <code class=""type"">
     bigint
    </code>
    (64 bits); otherwise it is taken to be type
    <code class=""type"">
     numeric
    </code>
    . Constants that contain decimal points and/or exponents are always initially presumed to be type
    <code class=""type"">
     numeric
    </code>
    .
   </p>
   <p>
    The initially assigned data type of a numeric constant is just a starting point for the type resolution algorithms. In most cases the constant will be automatically coerced to the most appropriate type depending on context. When necessary, you can force a numeric value to be interpreted as a specific data type by casting it.
    <a class=""indexterm"" id=""id-1.5.3.5.9.9.9.1"" name=""id-1.5.3.5.9.9.9.1"">
    </a>
    For example, you can force a numeric value to be treated as type
    <code class=""type"">
     real
    </code>
    (
    <code class=""type"">
     float4
    </code>
    ) by writing:
   </p>
   <pre class=""programlisting"">
REAL '1.23'  -- string style
1.23::REAL   -- PostgreSQL (historical) style
</pre>
   <p>
    These are actually just special cases of the general casting notations discussed next.
   </p>
  </div>
  <div class=""sect3"" id=""SQL-SYNTAX-CONSTANTS-GENERIC"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       4.1.2.7. Constants of Other Types
       <a class=""id_link"" href=""#SQL-SYNTAX-CONSTANTS-GENERIC"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.3.5.9.10.2"" name=""id-1.5.3.5.9.10.2"">
   </a>
   <p>
    A constant of an
    <span class=""emphasis"">
     <em>
      arbitrary
     </em>
    </span>
    type can be entered using any one of the following notations:
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>type</code></em> '<em class=""replaceable""><code>string</code></em>'
'<em class=""replaceable""><code>string</code></em>'::<em class=""replaceable""><code>type</code></em>
CAST ( '<em class=""replaceable""><code>string</code></em>' AS <em class=""replaceable""><code>type</code></em> )
</pre>
   <p>
    The string constant's text is passed to the input conversion routine for the type called
    <em class=""replaceable"">
     <code>
      type
     </code>
    </em>
    . The result is a constant of the indicated type. The explicit type cast can be omitted if there is no ambiguity as to the type the constant must be (for example, when it is assigned directly to a table column), in which case it is automatically coerced.
   </p>
   <p>
    The string constant can be written using either regular SQL notation or dollar-quoting.
   </p>
   <p>
    It is also possible to specify a type coercion using a function-like syntax:
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>typename</code></em> ( '<em class=""replaceable""><code>string</code></em>' )
</pre>
   <p>
    but not all type names can be used in this way; see
    <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-TYPE-CASTS"" title=""4.2.9. Type Casts"">
     Section 4.2.9
    </a>
    for details.
   </p>
   <p>
    The
    <code class=""literal"">
     ::
    </code>
    ,
    <code class=""literal"">
     CAST()
    </code>
    , and function-call syntaxes can also be used to specify run-time type conversions of arbitrary expressions, as discussed in
    <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-TYPE-CASTS"" title=""4.2.9. Type Casts"">
     Section 4.2.9
    </a>
    . To avoid syntactic ambiguity, the
    <code class=""literal"">
     <em class=""replaceable"">
      <code>
       type
      </code>
     </em>
     '
     <em class=""replaceable"">
      <code>
       string
      </code>
     </em>
     '
    </code>
    syntax can only be used to specify the type of a simple literal constant. Another restriction on the
    <code class=""literal"">
     <em class=""replaceable"">
      <code>
       type
      </code>
     </em>
     '
     <em class=""replaceable"">
      <code>
       string
      </code>
     </em>
     '
    </code>
    syntax is that it does not work for array types; use
    <code class=""literal"">
     ::
    </code>
    or
    <code class=""literal"">
     CAST()
    </code>
    to specify the type of an array constant.
   </p>
   <p>
    The
    <code class=""literal"">
     CAST()
    </code>
    syntax conforms to SQL. The
    <code class=""literal"">
     <em class=""replaceable"">
      <code>
       type
      </code>
     </em>
     '
     <em class=""replaceable"">
      <code>
       string
      </code>
     </em>
     '
    </code>
    syntax is a generalization of the standard: SQL specifies this syntax only for a few data types, but
    <span class=""productname"">
     PostgreSQL
    </span>
    allows it for all types. The syntax with
    <code class=""literal"">
     ::
    </code>
    is historical
    <span class=""productname"">
     PostgreSQL
    </span>
    usage, as is the function-call syntax.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-OPERATORS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.3. Operators
      <a class=""id_link"" href=""#SQL-SYNTAX-OPERATORS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.5.10.2"" name=""id-1.5.3.5.10.2"">
  </a>
  <p>
   An operator name is a sequence of up to
   <code class=""symbol"">
    NAMEDATALEN
   </code>
   -1 (63 by default) characters from the following list:
  </p>
  <div class=""literallayout"">
   <p>
    <br/>
    + - * / &lt; &gt; = ~ ! @ # % ^ &amp; | ` ?
    <br/>
   </p>
  </div>
  <p>
   There are a few restrictions on operator names, however:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       --
      </code>
      and
      <code class=""literal"">
       /*
      </code>
      cannot appear anywhere in an operator name, since they will be taken as the start of a comment.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      A multiple-character operator name cannot end in
      <code class=""literal"">
       +
      </code>
      or
      <code class=""literal"">
       -
      </code>
      , unless the name also contains at least one of these characters:
     </p>
     <div class=""literallayout"">
      <p>
       <br/>
       ~ ! @ # % ^ &amp; | ` ?
       <br/>
      </p>
     </div>
     <p>
      For example,
      <code class=""literal"">
       @-
      </code>
      is an allowed operator name, but
      <code class=""literal"">
       *-
      </code>
      is not. This restriction allows
      <span class=""productname"">
       PostgreSQL
      </span>
      to parse SQL-compliant queries without requiring spaces between tokens.
     </p>
    </li>
   </ul>
  </div>
  <p>
   When working with non-SQL-standard operator names, you will usually need to separate adjacent operators with spaces to avoid ambiguity. For example, if you have defined a prefix operator named
   <code class=""literal"">
    @
   </code>
   , you cannot write
   <code class=""literal"">
    X*@Y
   </code>
   ; you must write
   <code class=""literal"">
    X* @Y
   </code>
   to ensure that
   <span class=""productname"">
    PostgreSQL
   </span>
   reads it as two operator names not one.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-SPECIAL-CHARS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.4. Special Characters
      <a class=""id_link"" href=""#SQL-SYNTAX-SPECIAL-CHARS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Some characters that are not alphanumeric have a special meaning that is different from being an operator. Details on the usage can be found at the location where the respective syntax element is described. This section only exists to advise the existence and summarize the purposes of these characters.
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      A dollar sign (
      <code class=""literal"">
       $
      </code>
      ) followed by digits is used to represent a positional parameter in the body of a function definition or a prepared statement. In other contexts the dollar sign can be part of an identifier or a dollar-quoted string constant.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Parentheses (
      <code class=""literal"">
       ()
      </code>
      ) have their usual meaning to group expressions and enforce precedence. In some cases parentheses are required as part of the fixed syntax of a particular SQL command.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Brackets (
      <code class=""literal"">
       []
      </code>
      ) are used to select the elements of an array. See
      <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
       Section 8.15
      </a>
      for more information on arrays.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Commas (
      <code class=""literal"">
       ,
      </code>
      ) are used in some syntactical constructs to separate the elements of a list.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The semicolon (
      <code class=""literal"">
       ;
      </code>
      ) terminates an SQL command. It cannot appear anywhere within a command, except within a string constant or quoted identifier.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The colon (
      <code class=""literal"">
       :
      </code>
      ) is used to select
      <span class=""quote"">
       “
       <span class=""quote"">
        slices
       </span>
       ”
      </span>
      from arrays. (See
      <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
       Section 8.15
      </a>
      .) In certain SQL dialects (such as Embedded SQL), the colon is used to prefix variable names.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The asterisk (
      <code class=""literal"">
       *
      </code>
      ) is used in some contexts to denote all the fields of a table row or composite value. It also has a special meaning when used as the argument of an aggregate function, namely that the aggregate does not require any explicit parameter.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The period (
      <code class=""literal"">
       .
      </code>
      ) is used in numeric constants, and to separate schema, table, and column names.
     </p>
    </li>
   </ul>
  </div>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-COMMENTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.5. Comments
      <a class=""id_link"" href=""#SQL-SYNTAX-COMMENTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.5.12.2"" name=""id-1.5.3.5.12.2"">
  </a>
  <p>
   A comment is a sequence of characters beginning with double dashes and extending to the end of the line, e.g.:
  </p>
  <pre class=""programlisting"">
-- This is a standard SQL comment
</pre>
  <p>
   Alternatively, C-style block comments can be used:
  </p>
  <pre class=""programlisting"">
/* multiline comment
 * with nesting: /* nested block comment */
 */
</pre>
  <p>
   where the comment begins with
   <code class=""literal"">
    /*
   </code>
   and extends to the matching occurrence of
   <code class=""literal"">
    */
   </code>
   . These block comments nest, as specified in the SQL standard but unlike C, so that one can comment out larger blocks of code that might contain existing block comments.
  </p>
  <p>
   A comment is removed from the input stream before further syntax analysis and is effectively replaced by whitespace.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-PRECEDENCE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.1.6. Operator Precedence
      <a class=""id_link"" href=""#SQL-PRECEDENCE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.5.13.2"" name=""id-1.5.3.5.13.2"">
  </a>
  <p>
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-PRECEDENCE-TABLE"" title=""Table 4.2. Operator Precedence (highest to lowest)"">
    Table 4.2
   </a>
   shows the precedence and associativity of the operators in
   <span class=""productname"">
    PostgreSQL
   </span>
   . Most operators have the same precedence and are left-associative. The precedence and associativity of the operators is hard-wired into the parser. Add parentheses if you want an expression with multiple operators to be parsed in some other way than what the precedence rules imply.
  </p>
  <div class=""table"" id=""SQL-PRECEDENCE-TABLE"">
   <p class=""title"">
    <strong>
     Table 4.2. Operator Precedence (highest to lowest)
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Operator Precedence (highest to lowest)"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
      <col class=""col3""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Operator/Element
       </th>
       <th>
        Associativity
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""token"">
         .
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        table/column name separator
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         ::
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        <span class=""productname"">
         PostgreSQL
        </span>
        -style typecast
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         [
        </code>
        <code class=""token"">
         ]
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        array element selection
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         +
        </code>
        <code class=""token"">
         -
        </code>
       </td>
       <td>
        right
       </td>
       <td>
        unary plus, unary minus
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         COLLATE
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        collation selection
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         AT
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        <code class=""literal"">
         AT TIME ZONE
        </code>
        ,
        <code class=""literal"">
         AT LOCAL
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         ^
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        exponentiation
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         *
        </code>
        <code class=""token"">
         /
        </code>
        <code class=""token"">
         %
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        multiplication, division, modulo
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         +
        </code>
        <code class=""token"">
         -
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        addition, subtraction
       </td>
      </tr>
      <tr>
       <td>
        (any other operator)
       </td>
       <td>
        left
       </td>
       <td>
        all other native and user-defined operators
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         BETWEEN
        </code>
        <code class=""token"">
         IN
        </code>
        <code class=""token"">
         LIKE
        </code>
        <code class=""token"">
         ILIKE
        </code>
        <code class=""token"">
         SIMILAR
        </code>
       </td>
       <td>
       </td>
       <td>
        range containment, set membership, string matching
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         &lt;
        </code>
        <code class=""token"">
         &gt;
        </code>
        <code class=""token"">
         =
        </code>
        <code class=""token"">
         &lt;=
        </code>
        <code class=""token"">
         &gt;=
        </code>
        <code class=""token"">
         &lt;&gt;
        </code>
       </td>
       <td>
       </td>
       <td>
        comparison operators
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         IS
        </code>
        <code class=""token"">
         ISNULL
        </code>
        <code class=""token"">
         NOTNULL
        </code>
       </td>
       <td>
       </td>
       <td>
        <code class=""literal"">
         IS TRUE
        </code>
        ,
        <code class=""literal"">
         IS FALSE
        </code>
        ,
        <code class=""literal"">
         IS NULL
        </code>
        ,
        <code class=""literal"">
         IS DISTINCT FROM
        </code>
        , etc.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         NOT
        </code>
       </td>
       <td>
        right
       </td>
       <td>
        logical negation
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         AND
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        logical conjunction
       </td>
      </tr>
      <tr>
       <td>
        <code class=""token"">
         OR
        </code>
       </td>
       <td>
        left
       </td>
       <td>
        logical disjunction
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   Note that the operator precedence rules also apply to user-defined operators that have the same names as the built-in operators mentioned above. For example, if you define a
   <span class=""quote"">
    “
    <span class=""quote"">
     +
    </span>
    ”
   </span>
   operator for some custom data type it will have the same precedence as the built-in
   <span class=""quote"">
    “
    <span class=""quote"">
     +
    </span>
    ”
   </span>
   operator, no matter what yours does.
  </p>
  <p>
   When a schema-qualified operator name is used in the
   <code class=""literal"">
    OPERATOR
   </code>
   syntax, as for example in:
  </p>
  <pre class=""programlisting"">
SELECT 3 OPERATOR(pg_catalog.+) 4;
</pre>
  <p>
   the
   <code class=""literal"">
    OPERATOR
   </code>
   construct is taken to have the default precedence shown in
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-PRECEDENCE-TABLE"" title=""Table 4.2. Operator Precedence (highest to lowest)"">
    Table 4.2
   </a>
   for
   <span class=""quote"">
    “
    <span class=""quote"">
     any other operator
    </span>
    ”
   </span>
   . This is true no matter which specific operator appears inside
   <code class=""literal"">
    OPERATOR()
   </code>
   .
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    versions before 9.5 used slightly different operator precedence rules. In particular,
    <code class=""token"">
     &lt;=
    </code>
    <code class=""token"">
     &gt;=
    </code>
    and
    <code class=""token"">
     &lt;&gt;
    </code>
    used to be treated as generic operators;
    <code class=""literal"">
     IS
    </code>
    tests used to have higher priority; and
    <code class=""literal"">
     NOT BETWEEN
    </code>
    and related constructs acted inconsistently, being taken in some cases as having the precedence of
    <code class=""literal"">
     NOT
    </code>
    rather than
    <code class=""literal"">
     BETWEEN
    </code>
    . These rules were changed for better compliance with the SQL standard and to reduce confusion from inconsistent treatment of logically equivalent constructs. In most cases, these changes will result in no behavioral change, or perhaps in
    <span class=""quote"">
     “
     <span class=""quote"">
      no such operator
     </span>
     ”
    </span>
    failures which can be resolved by adding parentheses. However there are corner cases in which a query might change behavior without any parsing error being reported.
   </p>
  </div>
 </div>
</div>
"
4. SQL Syntax,4.2. Value Expressions,https://www.postgresql.org/docs/17/sql-expressions.html,"<div class=""sect1"" id=""SQL-EXPRESSIONS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     4.2. Value Expressions
     <a class=""id_link"" href=""#SQL-EXPRESSIONS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-EXPRESSIONS-COLUMN-REFS"">
      4.2.1. Column References
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-EXPRESSIONS-PARAMETERS-POSITIONAL"">
      4.2.2. Positional Parameters
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-EXPRESSIONS-SUBSCRIPTS"">
      4.2.3. Subscripts
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#FIELD-SELECTION"">
      4.2.4. Field Selection
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-EXPRESSIONS-OPERATOR-CALLS"">
      4.2.5. Operator Invocations
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-EXPRESSIONS-FUNCTION-CALLS"">
      4.2.6. Function Calls
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SYNTAX-AGGREGATES"">
      4.2.7. Aggregate Expressions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS"">
      4.2.8. Window Function Calls
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-SYNTAX-TYPE-CASTS"">
      4.2.9. Type Casts
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-SYNTAX-COLLATE-EXPRS"">
      4.2.10. Collation Expressions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES"">
      4.2.11. Scalar Subqueries
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-SYNTAX-ARRAY-CONSTRUCTORS"">
      4.2.12. Array Constructors
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"">
      4.2.13. Row Constructors
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-expressions.html#SYNTAX-EXPRESS-EVAL"">
      4.2.14. Expression Evaluation Rules
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.3.6.2"" name=""id-1.5.3.6.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.3.6.3"" name=""id-1.5.3.6.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.3.6.4"" name=""id-1.5.3.6.4"">
 </a>
 <p>
  Value expressions are used in a variety of contexts, such as in the target list of the
  <code class=""command"">
   SELECT
  </code>
  command, as new column values in
  <code class=""command"">
   INSERT
  </code>
  or
  <code class=""command"">
   UPDATE
  </code>
  , or in search conditions in a number of commands. The result of a value expression is sometimes called a
  <em class=""firstterm"">
   scalar
  </em>
  , to distinguish it from the result of a table expression (which is a table). Value expressions are therefore also called
  <em class=""firstterm"">
   scalar expressions
  </em>
  (or even simply
  <em class=""firstterm"">
   expressions
  </em>
  ). The expression syntax allows the calculation of values from primitive parts using arithmetic, logical, set, and other operations.
 </p>
 <p>
  A value expression is one of the following:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     A constant or literal value
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A column reference
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A positional parameter reference, in the body of a function definition or prepared statement
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A subscripted expression
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A field selection expression
    </p>
   </li>
   <li class=""listitem"">
    <p>
     An operator invocation
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A function call
    </p>
   </li>
   <li class=""listitem"">
    <p>
     An aggregate expression
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A window function call
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A type cast
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A collation expression
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A scalar subquery
    </p>
   </li>
   <li class=""listitem"">
    <p>
     An array constructor
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A row constructor
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Another value expression in parentheses (used to group subexpressions and override precedence
     <a class=""indexterm"" id=""id-1.5.3.6.6.1.15.1.1"" name=""id-1.5.3.6.6.1.15.1.1"">
     </a>
     )
    </p>
   </li>
  </ul>
 </div>
 <p>
  In addition to this list, there are a number of constructs that can be classified as an expression but do not follow any general syntax rules. These generally have the semantics of a function or operator and are explained in the appropriate location in
  <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
   Chapter 9
  </a>
  . An example is the
  <code class=""literal"">
   IS NULL
  </code>
  clause.
 </p>
 <p>
  We have already discussed constants in
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS"" title=""4.1.2. Constants"">
   Section 4.1.2
  </a>
  . The following sections discuss the remaining options.
 </p>
 <div class=""sect2"" id=""SQL-EXPRESSIONS-COLUMN-REFS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.1. Column References
      <a class=""id_link"" href=""#SQL-EXPRESSIONS-COLUMN-REFS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.9.2"" name=""id-1.5.3.6.9.2"">
  </a>
  <p>
   A column can be referenced in the form:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>correlation</code></em>.<em class=""replaceable""><code>columnname</code></em>
</pre>
  <p>
   <em class=""replaceable"">
    <code>
     correlation
    </code>
   </em>
   is the name of a table (possibly qualified with a schema name), or an alias for a table defined by means of a
   <code class=""literal"">
    FROM
   </code>
   clause. The correlation name and separating dot can be omitted if the column name is unique across all the tables being used in the current query. (See also
   <a class=""xref"" href=""queries.html"" title=""Chapter 7. Queries"">
    Chapter 7
   </a>
   .)
  </p>
 </div>
 <div class=""sect2"" id=""SQL-EXPRESSIONS-PARAMETERS-POSITIONAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.2. Positional Parameters
      <a class=""id_link"" href=""#SQL-EXPRESSIONS-PARAMETERS-POSITIONAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.10.2"" name=""id-1.5.3.6.10.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.10.3"" name=""id-1.5.3.6.10.3"">
  </a>
  <p>
   A positional parameter reference is used to indicate a value that is supplied externally to an SQL statement. Parameters are used in SQL function definitions and in prepared queries. Some client libraries also support specifying data values separately from the SQL command string, in which case parameters are used to refer to the out-of-line data values. The form of a parameter reference is:
  </p>
  <pre class=""synopsis"">
$<em class=""replaceable""><code>number</code></em>
</pre>
  <p>
   For example, consider the definition of a function,
   <code class=""function"">
    dept
   </code>
   , as:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION dept(text) RETURNS dept
    AS $$ SELECT * FROM dept WHERE name = $1 $$
    LANGUAGE SQL;
</pre>
  <p>
   Here the
   <code class=""literal"">
    $1
   </code>
   references the value of the first function argument whenever the function is invoked.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-EXPRESSIONS-SUBSCRIPTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.3. Subscripts
      <a class=""id_link"" href=""#SQL-EXPRESSIONS-SUBSCRIPTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.11.2"" name=""id-1.5.3.6.11.2"">
  </a>
  <p>
   If an expression yields a value of an array type, then a specific element of the array value can be extracted by writing
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em>[<em class=""replaceable""><code>subscript</code></em>]
</pre>
  <p>
   or multiple adjacent elements (an
   <span class=""quote"">
    “
    <span class=""quote"">
     array slice
    </span>
    ”
   </span>
   ) can be extracted by writing
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em>[<em class=""replaceable""><code>lower_subscript</code></em>:<em class=""replaceable""><code>upper_subscript</code></em>]
</pre>
  <p>
   (Here, the brackets
   <code class=""literal"">
    [ ]
   </code>
   are meant to appear literally.) Each
   <em class=""replaceable"">
    <code>
     subscript
    </code>
   </em>
   is itself an expression, which will be rounded to the nearest integer value.
  </p>
  <p>
   In general the array
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   must be parenthesized, but the parentheses can be omitted when the expression to be subscripted is just a column reference or positional parameter. Also, multiple subscripts can be concatenated when the original array is multidimensional. For example:
  </p>
  <pre class=""programlisting"">
mytable.arraycolumn[4]
mytable.two_d_column[17][34]
$1[10:42]
(arrayfunction(a,b))[42]
</pre>
  <p>
   The parentheses in the last example are required. See
   <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
    Section 8.15
   </a>
   for more about arrays.
  </p>
 </div>
 <div class=""sect2"" id=""FIELD-SELECTION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.4. Field Selection
      <a class=""id_link"" href=""#FIELD-SELECTION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.12.2"" name=""id-1.5.3.6.12.2"">
  </a>
  <p>
   If an expression yields a value of a composite type (row type), then a specific field of the row can be extracted by writing
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em>.<em class=""replaceable""><code>fieldname</code></em>
</pre>
  <p>
   In general the row
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   must be parenthesized, but the parentheses can be omitted when the expression to be selected from is just a table reference or positional parameter. For example:
  </p>
  <pre class=""programlisting"">
mytable.mycolumn
$1.somecolumn
(rowfunction(a,b)).col3
</pre>
  <p>
   (Thus, a qualified column reference is actually just a special case of the field selection syntax.) An important special case is extracting a field from a table column that is of a composite type:
  </p>
  <pre class=""programlisting"">
(compositecol).somefield
(mytable.compositecol).somefield
</pre>
  <p>
   The parentheses are required here to show that
   <code class=""structfield"">
    compositecol
   </code>
   is a column name not a table name, or that
   <code class=""structname"">
    mytable
   </code>
   is a table name not a schema name in the second case.
  </p>
  <p>
   You can ask for all fields of a composite value by writing
   <code class=""literal"">
    .*
   </code>
   :
  </p>
  <pre class=""programlisting"">
(compositecol).*
</pre>
  <p>
   This notation behaves differently depending on context; see
   <a class=""xref"" href=""rowtypes.html#ROWTYPES-USAGE"" title=""8.16.5. Using Composite Types in Queries"">
    Section 8.16.5
   </a>
   for details.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-EXPRESSIONS-OPERATOR-CALLS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.5. Operator Invocations
      <a class=""id_link"" href=""#SQL-EXPRESSIONS-OPERATOR-CALLS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.13.2"" name=""id-1.5.3.6.13.2"">
  </a>
  <p>
   There are two possible syntaxes for an operator invocation:
  </p>
  <table border=""0"" class=""simplelist"" summary=""Simple list"">
   <tr>
    <td>
     <em class=""replaceable"">
      <code>
       expression
      </code>
     </em>
     <em class=""replaceable"">
      <code>
       operator
      </code>
     </em>
     <em class=""replaceable"">
      <code>
       expression
      </code>
     </em>
     (binary infix operator)
    </td>
   </tr>
   <tr>
    <td>
     <em class=""replaceable"">
      <code>
       operator
      </code>
     </em>
     <em class=""replaceable"">
      <code>
       expression
      </code>
     </em>
     (unary prefix operator)
    </td>
   </tr>
  </table>
  <p>
   where the
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   token follows the syntax rules of
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-OPERATORS"" title=""4.1.3. Operators"">
    Section 4.1.3
   </a>
   , or is one of the key words
   <code class=""token"">
    AND
   </code>
   ,
   <code class=""token"">
    OR
   </code>
   , and
   <code class=""token"">
    NOT
   </code>
   , or is a qualified operator name in the form:
  </p>
  <pre class=""synopsis"">
<code class=""literal"">OPERATOR(</code><em class=""replaceable""><code>schema</code></em><code class=""literal"">.</code><em class=""replaceable""><code>operatorname</code></em><code class=""literal"">)</code>
</pre>
  <p>
   Which particular operators exist and whether they are unary or binary depends on what operators have been defined by the system or the user.
   <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
    Chapter 9
   </a>
   describes the built-in operators.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-EXPRESSIONS-FUNCTION-CALLS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.6. Function Calls
      <a class=""id_link"" href=""#SQL-EXPRESSIONS-FUNCTION-CALLS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.14.2"" name=""id-1.5.3.6.14.2"">
  </a>
  <p>
   The syntax for a function call is the name of a function (possibly qualified with a schema name), followed by its argument list enclosed in parentheses:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>function_name</code></em> ([<span class=""optional""><em class=""replaceable""><code>expression</code></em> [<span class=""optional"">, <em class=""replaceable""><code>expression</code></em> ... </span>]</span>] )
</pre>
  <p>
   For example, the following computes the square root of 2:
  </p>
  <pre class=""programlisting"">
sqrt(2)
</pre>
  <p>
   The list of built-in functions is in
   <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
    Chapter 9
   </a>
   . Other functions can be added by the user.
  </p>
  <p>
   When issuing queries in a database where some users mistrust other users, observe security precautions from
   <a class=""xref"" href=""typeconv-func.html"" title=""10.3. Functions"">
    Section 10.3
   </a>
   when writing function calls.
  </p>
  <p>
   The arguments can optionally have names attached. See
   <a class=""xref"" href=""sql-syntax-calling-funcs.html"" title=""4.3. Calling Functions"">
    Section 4.3
   </a>
   for details.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    A function that takes a single argument of composite type can optionally be called using field-selection syntax, and conversely field selection can be written in functional style. That is, the notations
    <code class=""literal"">
     col(table)
    </code>
    and
    <code class=""literal"">
     table.col
    </code>
    are interchangeable. This behavior is not SQL-standard but is provided in
    <span class=""productname"">
     PostgreSQL
    </span>
    because it allows use of functions to emulate
    <span class=""quote"">
     “
     <span class=""quote"">
      computed fields
     </span>
     ”
    </span>
    . For more information see
    <a class=""xref"" href=""rowtypes.html#ROWTYPES-USAGE"" title=""8.16.5. Using Composite Types in Queries"">
     Section 8.16.5
    </a>
    .
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""SYNTAX-AGGREGATES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.7. Aggregate Expressions
      <a class=""id_link"" href=""#SYNTAX-AGGREGATES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.15.2"" name=""id-1.5.3.6.15.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.15.3"" name=""id-1.5.3.6.15.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.15.4"" name=""id-1.5.3.6.15.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.15.5"" name=""id-1.5.3.6.15.5"">
  </a>
  <p>
   An
   <em class=""firstterm"">
    aggregate expression
   </em>
   represents the application of an aggregate function across the rows selected by a query. An aggregate function reduces multiple inputs to a single output value, such as the sum or average of the inputs. The syntax of an aggregate expression is one of the following:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>aggregate_name</code></em> (<em class=""replaceable""><code>expression</code></em> [ , ... ] [ <em class=""replaceable""><code>order_by_clause</code></em> ] ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ]
<em class=""replaceable""><code>aggregate_name</code></em> (ALL <em class=""replaceable""><code>expression</code></em> [ , ... ] [ <em class=""replaceable""><code>order_by_clause</code></em> ] ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ]
<em class=""replaceable""><code>aggregate_name</code></em> (DISTINCT <em class=""replaceable""><code>expression</code></em> [ , ... ] [ <em class=""replaceable""><code>order_by_clause</code></em> ] ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ]
<em class=""replaceable""><code>aggregate_name</code></em> ( * ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ]
<em class=""replaceable""><code>aggregate_name</code></em> ( [ <em class=""replaceable""><code>expression</code></em> [ , ... ] ] ) WITHIN GROUP ( <em class=""replaceable""><code>order_by_clause</code></em> ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ]
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     aggregate_name
    </code>
   </em>
   is a previously defined aggregate (possibly qualified with a schema name) and
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   is any value expression that does not itself contain an aggregate expression or a window function call. The optional
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   and
   <em class=""replaceable"">
    <code>
     filter_clause
    </code>
   </em>
   are described below.
  </p>
  <p>
   The first form of aggregate expression invokes the aggregate once for each input row. The second form is the same as the first, since
   <code class=""literal"">
    ALL
   </code>
   is the default. The third form invokes the aggregate once for each distinct value of the expression (or distinct set of values, for multiple expressions) found in the input rows. The fourth form invokes the aggregate once for each input row; since no particular input value is specified, it is generally only useful for the
   <code class=""function"">
    count(*)
   </code>
   aggregate function. The last form is used with
   <em class=""firstterm"">
    ordered-set
   </em>
   aggregate functions, which are described below.
  </p>
  <p>
   Most aggregate functions ignore null inputs, so that rows in which one or more of the expression(s) yield null are discarded. This can be assumed to be true, unless otherwise specified, for all built-in aggregates.
  </p>
  <p>
   For example,
   <code class=""literal"">
    count(*)
   </code>
   yields the total number of input rows;
   <code class=""literal"">
    count(f1)
   </code>
   yields the number of input rows in which
   <code class=""literal"">
    f1
   </code>
   is non-null, since
   <code class=""function"">
    count
   </code>
   ignores nulls; and
   <code class=""literal"">
    count(distinct f1)
   </code>
   yields the number of distinct non-null values of
   <code class=""literal"">
    f1
   </code>
   .
  </p>
  <p>
   Ordinarily, the input rows are fed to the aggregate function in an unspecified order. In many cases this does not matter; for example,
   <code class=""function"">
    min
   </code>
   produces the same result no matter what order it receives the inputs in. However, some aggregate functions (such as
   <code class=""function"">
    array_agg
   </code>
   and
   <code class=""function"">
    string_agg
   </code>
   ) produce results that depend on the ordering of the input rows. When using such an aggregate, the optional
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   can be used to specify the desired ordering. The
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   has the same syntax as for a query-level
   <code class=""literal"">
    ORDER BY
   </code>
   clause, as described in
   <a class=""xref"" href=""queries-order.html"" title=""7.5. Sorting Rows (ORDER BY)"">
    Section 7.5
   </a>
   , except that its expressions are always just expressions and cannot be output-column names or numbers. For example:
  </p>
  <pre class=""programlisting"">
WITH vals (v) AS ( VALUES (1),(3),(4),(3),(2) )
SELECT array_agg(v ORDER BY v DESC) FROM vals;
  array_agg
-------------
 {4,3,3,2,1}
</pre>
  <p>
   Since
   <code class=""type"">
    jsonb
   </code>
   only keeps the last matching key, ordering of its keys can be significant:
  </p>
  <pre class=""programlisting"">
WITH vals (k, v) AS ( VALUES ('key0','1'), ('key1','3'), ('key1','2') )
SELECT jsonb_object_agg(k, v ORDER BY v) FROM vals;
      jsonb_object_agg
----------------------------
 {""key0"": ""1"", ""key1"": ""3""}
</pre>
  <p>
   When dealing with multiple-argument aggregate functions, note that the
   <code class=""literal"">
    ORDER BY
   </code>
   clause goes after all the aggregate arguments. For example, write this:
  </p>
  <pre class=""programlisting"">
SELECT string_agg(a, ',' ORDER BY a) FROM table;
</pre>
  <p>
   not this:
  </p>
  <pre class=""programlisting"">
SELECT string_agg(a ORDER BY a, ',') FROM table;  -- incorrect
</pre>
  <p>
   The latter is syntactically valid, but it represents a call of a single-argument aggregate function with two
   <code class=""literal"">
    ORDER BY
   </code>
   keys (the second one being rather useless since it's a constant).
  </p>
  <p>
   If
   <code class=""literal"">
    DISTINCT
   </code>
   is specified with an
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   ,
   <code class=""literal"">
    ORDER BY
   </code>
   expressions can only reference columns in the
   <code class=""literal"">
    DISTINCT
   </code>
   list. For example:
  </p>
  <pre class=""programlisting"">
WITH vals (v) AS ( VALUES (1),(3),(4),(3),(2) )
SELECT array_agg(DISTINCT v ORDER BY v DESC) FROM vals;
 array_agg
-----------
 {4,3,2,1}
</pre>
  <p>
   Placing
   <code class=""literal"">
    ORDER BY
   </code>
   within the aggregate's regular argument list, as described so far, is used when ordering the input rows for general-purpose and statistical aggregates, for which ordering is optional. There is a subclass of aggregate functions called
   <em class=""firstterm"">
    ordered-set aggregates
   </em>
   for which an
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   is
   <span class=""emphasis"">
    <em>
     required
    </em>
   </span>
   , usually because the aggregate's computation is only sensible in terms of a specific ordering of its input rows. Typical examples of ordered-set aggregates include rank and percentile calculations. For an ordered-set aggregate, the
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   is written inside
   <code class=""literal"">
    WITHIN GROUP (...)
   </code>
   , as shown in the final syntax alternative above. The expressions in the
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   are evaluated once per input row just like regular aggregate arguments, sorted as per the
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   's requirements, and fed to the aggregate function as input arguments. (This is unlike the case for a non-
   <code class=""literal"">
    WITHIN GROUP
   </code>
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   , which is not treated as argument(s) to the aggregate function.) The argument expressions preceding
   <code class=""literal"">
    WITHIN GROUP
   </code>
   , if any, are called
   <em class=""firstterm"">
    direct arguments
   </em>
   to distinguish them from the
   <em class=""firstterm"">
    aggregated arguments
   </em>
   listed in the
   <em class=""replaceable"">
    <code>
     order_by_clause
    </code>
   </em>
   . Unlike regular aggregate arguments, direct arguments are evaluated only once per aggregate call, not once per input row. This means that they can contain variables only if those variables are grouped by
   <code class=""literal"">
    GROUP BY
   </code>
   ; this restriction is the same as if the direct arguments were not inside an aggregate expression at all. Direct arguments are typically used for things like percentile fractions, which only make sense as a single value per aggregation calculation. The direct argument list can be empty; in this case, write just
   <code class=""literal"">
    ()
   </code>
   not
   <code class=""literal"">
    (*)
   </code>
   . (
   <span class=""productname"">
    PostgreSQL
   </span>
   will actually accept either spelling, but only the first way conforms to the SQL standard.)
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.3.6.15.14.1"" name=""id-1.5.3.6.15.14.1"">
   </a>
   An example of an ordered-set aggregate call is:
  </p>
  <pre class=""programlisting"">
SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY income) FROM households;
 percentile_cont
-----------------
           50489
</pre>
  <p>
   which obtains the 50th percentile, or median, value of the
   <code class=""structfield"">
    income
   </code>
   column from table
   <code class=""structname"">
    households
   </code>
   . Here,
   <code class=""literal"">
    0.5
   </code>
   is a direct argument; it would make no sense for the percentile fraction to be a value varying across rows.
  </p>
  <p>
   If
   <code class=""literal"">
    FILTER
   </code>
   is specified, then only the input rows for which the
   <em class=""replaceable"">
    <code>
     filter_clause
    </code>
   </em>
   evaluates to true are fed to the aggregate function; other rows are discarded. For example:
  </p>
  <pre class=""programlisting"">
SELECT
    count(*) AS unfiltered,
    count(*) FILTER (WHERE i &lt; 5) AS filtered
FROM generate_series(1,10) AS s(i);
 unfiltered | filtered
------------+----------
         10 |        4
(1 row)
</pre>
  <p>
   The predefined aggregate functions are described in
   <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
    Section 9.21
   </a>
   . Other aggregate functions can be added by the user.
  </p>
  <p>
   An aggregate expression can only appear in the result list or
   <code class=""literal"">
    HAVING
   </code>
   clause of a
   <code class=""command"">
    SELECT
   </code>
   command. It is forbidden in other clauses, such as
   <code class=""literal"">
    WHERE
   </code>
   , because those clauses are logically evaluated before the results of aggregates are formed.
  </p>
  <p>
   When an aggregate expression appears in a subquery (see
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-SCALAR-SUBQUERIES"" title=""4.2.11. Scalar Subqueries"">
    Section 4.2.11
   </a>
   and
   <a class=""xref"" href=""functions-subquery.html"" title=""9.24. Subquery Expressions"">
    Section 9.24
   </a>
   ), the aggregate is normally evaluated over the rows of the subquery. But an exception occurs if the aggregate's arguments (and
   <em class=""replaceable"">
    <code>
     filter_clause
    </code>
   </em>
   if any) contain only outer-level variables: the aggregate then belongs to the nearest such outer level, and is evaluated over the rows of that query. The aggregate expression as a whole is then an outer reference for the subquery it appears in, and acts as a constant over any one evaluation of that subquery. The restriction about appearing only in the result list or
   <code class=""literal"">
    HAVING
   </code>
   clause applies with respect to the query level that the aggregate belongs to.
  </p>
 </div>
 <div class=""sect2"" id=""SYNTAX-WINDOW-FUNCTIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.8. Window Function Calls
      <a class=""id_link"" href=""#SYNTAX-WINDOW-FUNCTIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.16.2"" name=""id-1.5.3.6.16.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.16.3"" name=""id-1.5.3.6.16.3"">
  </a>
  <p>
   A
   <em class=""firstterm"">
    window function call
   </em>
   represents the application of an aggregate-like function over some portion of the rows selected by a query. Unlike non-window aggregate calls, this is not tied to grouping of the selected rows into a single output row — each row remains separate in the query output. However the window function has access to all the rows that would be part of the current row's group according to the grouping specification (
   <code class=""literal"">
    PARTITION BY
   </code>
   list) of the window function call. The syntax of a window function call is one of the following:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>function_name</code></em> ([<span class=""optional""><em class=""replaceable""><code>expression</code></em> [<span class=""optional"">, <em class=""replaceable""><code>expression</code></em> ... </span>]</span>]) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ] OVER <em class=""replaceable""><code>window_name</code></em>
<em class=""replaceable""><code>function_name</code></em> ([<span class=""optional""><em class=""replaceable""><code>expression</code></em> [<span class=""optional"">, <em class=""replaceable""><code>expression</code></em> ... </span>]</span>]) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ] OVER ( <em class=""replaceable""><code>window_definition</code></em> )
<em class=""replaceable""><code>function_name</code></em> ( * ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ] OVER <em class=""replaceable""><code>window_name</code></em>
<em class=""replaceable""><code>function_name</code></em> ( * ) [ FILTER ( WHERE <em class=""replaceable""><code>filter_clause</code></em> ) ] OVER ( <em class=""replaceable""><code>window_definition</code></em> )
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     window_definition
    </code>
   </em>
   has the syntax
  </p>
  <pre class=""synopsis"">
[ <em class=""replaceable""><code>existing_window_name</code></em> ]
[ PARTITION BY <em class=""replaceable""><code>expression</code></em> [, ...] ]
[ ORDER BY <em class=""replaceable""><code>expression</code></em> [ ASC | DESC | USING <em class=""replaceable""><code>operator</code></em> ] [ NULLS { FIRST | LAST } ] [, ...] ]
[ <em class=""replaceable""><code>frame_clause</code></em> ]
</pre>
  <p>
   The optional
   <em class=""replaceable"">
    <code>
     frame_clause
    </code>
   </em>
   can be one of
  </p>
  <pre class=""synopsis"">
{ RANGE | ROWS | GROUPS } <em class=""replaceable""><code>frame_start</code></em> [ <em class=""replaceable""><code>frame_exclusion</code></em> ]
{ RANGE | ROWS | GROUPS } BETWEEN <em class=""replaceable""><code>frame_start</code></em> AND <em class=""replaceable""><code>frame_end</code></em> [ <em class=""replaceable""><code>frame_exclusion</code></em> ]
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   and
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   can be one of
  </p>
  <pre class=""synopsis"">
UNBOUNDED PRECEDING
<em class=""replaceable""><code>offset</code></em> PRECEDING
CURRENT ROW
<em class=""replaceable""><code>offset</code></em> FOLLOWING
UNBOUNDED FOLLOWING
</pre>
  <p>
   and
   <em class=""replaceable"">
    <code>
     frame_exclusion
    </code>
   </em>
   can be one of
  </p>
  <pre class=""synopsis"">
EXCLUDE CURRENT ROW
EXCLUDE GROUP
EXCLUDE TIES
EXCLUDE NO OTHERS
</pre>
  <p>
   Here,
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   represents any value expression that does not itself contain window function calls.
  </p>
  <p>
   <em class=""replaceable"">
    <code>
     window_name
    </code>
   </em>
   is a reference to a named window specification defined in the query's
   <code class=""literal"">
    WINDOW
   </code>
   clause. Alternatively, a full
   <em class=""replaceable"">
    <code>
     window_definition
    </code>
   </em>
   can be given within parentheses, using the same syntax as for defining a named window in the
   <code class=""literal"">
    WINDOW
   </code>
   clause; see the
   <a class=""xref"" href=""sql-select.html"" title=""SELECT"">
    <span class=""refentrytitle"">
     SELECT
    </span>
   </a>
   reference page for details. It's worth pointing out that
   <code class=""literal"">
    OVER wname
   </code>
   is not exactly equivalent to
   <code class=""literal"">
    OVER (wname ...)
   </code>
   ; the latter implies copying and modifying the window definition, and will be rejected if the referenced window specification includes a frame clause.
  </p>
  <p>
   The
   <code class=""literal"">
    PARTITION BY
   </code>
   clause groups the rows of the query into
   <em class=""firstterm"">
    partitions
   </em>
   , which are processed separately by the window function.
   <code class=""literal"">
    PARTITION BY
   </code>
   works similarly to a query-level
   <code class=""literal"">
    GROUP BY
   </code>
   clause, except that its expressions are always just expressions and cannot be output-column names or numbers. Without
   <code class=""literal"">
    PARTITION BY
   </code>
   , all rows produced by the query are treated as a single partition. The
   <code class=""literal"">
    ORDER BY
   </code>
   clause determines the order in which the rows of a partition are processed by the window function. It works similarly to a query-level
   <code class=""literal"">
    ORDER BY
   </code>
   clause, but likewise cannot use output-column names or numbers. Without
   <code class=""literal"">
    ORDER BY
   </code>
   , rows are processed in an unspecified order.
  </p>
  <p>
   The
   <em class=""replaceable"">
    <code>
     frame_clause
    </code>
   </em>
   specifies the set of rows constituting the
   <em class=""firstterm"">
    window frame
   </em>
   , which is a subset of the current partition, for those window functions that act on the frame instead of the whole partition. The set of rows in the frame can vary depending on which row is the current row. The frame can be specified in
   <code class=""literal"">
    RANGE
   </code>
   ,
   <code class=""literal"">
    ROWS
   </code>
   or
   <code class=""literal"">
    GROUPS
   </code>
   mode; in each case, it runs from the
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   to the
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   . If
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   is omitted, the end defaults to
   <code class=""literal"">
    CURRENT ROW
   </code>
   .
  </p>
  <p>
   A
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   of
   <code class=""literal"">
    UNBOUNDED PRECEDING
   </code>
   means that the frame starts with the first row of the partition, and similarly a
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   of
   <code class=""literal"">
    UNBOUNDED FOLLOWING
   </code>
   means that the frame ends with the last row of the partition.
  </p>
  <p>
   In
   <code class=""literal"">
    RANGE
   </code>
   or
   <code class=""literal"">
    GROUPS
   </code>
   mode, a
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   of
   <code class=""literal"">
    CURRENT ROW
   </code>
   means the frame starts with the current row's first
   <em class=""firstterm"">
    peer
   </em>
   row (a row that the window's
   <code class=""literal"">
    ORDER BY
   </code>
   clause sorts as equivalent to the current row), while a
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   of
   <code class=""literal"">
    CURRENT ROW
   </code>
   means the frame ends with the current row's last peer row. In
   <code class=""literal"">
    ROWS
   </code>
   mode,
   <code class=""literal"">
    CURRENT ROW
   </code>
   simply means the current row.
  </p>
  <p>
   In the
   <em class=""replaceable"">
    <code>
     offset
    </code>
   </em>
   <code class=""literal"">
    PRECEDING
   </code>
   and
   <em class=""replaceable"">
    <code>
     offset
    </code>
   </em>
   <code class=""literal"">
    FOLLOWING
   </code>
   frame options, the
   <em class=""replaceable"">
    <code>
     offset
    </code>
   </em>
   must be an expression not containing any variables, aggregate functions, or window functions. The meaning of the
   <em class=""replaceable"">
    <code>
     offset
    </code>
   </em>
   depends on the frame mode:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      In
      <code class=""literal"">
       ROWS
      </code>
      mode, the
      <em class=""replaceable"">
       <code>
        offset
       </code>
      </em>
      must yield a non-null, non-negative integer, and the option means that the frame starts or ends the specified number of rows before or after the current row.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In
      <code class=""literal"">
       GROUPS
      </code>
      mode, the
      <em class=""replaceable"">
       <code>
        offset
       </code>
      </em>
      again must yield a non-null, non-negative integer, and the option means that the frame starts or ends the specified number of
      <em class=""firstterm"">
       peer groups
      </em>
      before or after the current row's peer group, where a peer group is a set of rows that are equivalent in the
      <code class=""literal"">
       ORDER BY
      </code>
      ordering. (There must be an
      <code class=""literal"">
       ORDER BY
      </code>
      clause in the window definition to use
      <code class=""literal"">
       GROUPS
      </code>
      mode.)
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In
      <code class=""literal"">
       RANGE
      </code>
      mode, these options require that the
      <code class=""literal"">
       ORDER BY
      </code>
      clause specify exactly one column. The
      <em class=""replaceable"">
       <code>
        offset
       </code>
      </em>
      specifies the maximum difference between the value of that column in the current row and its value in preceding or following rows of the frame. The data type of the
      <em class=""replaceable"">
       <code>
        offset
       </code>
      </em>
      expression varies depending on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an
      <code class=""type"">
       interval
      </code>
      . For example, if the ordering column is of type
      <code class=""type"">
       date
      </code>
      or
      <code class=""type"">
       timestamp
      </code>
      , one could write
      <code class=""literal"">
       RANGE BETWEEN '1 day' PRECEDING AND '10 days' FOLLOWING
      </code>
      . The
      <em class=""replaceable"">
       <code>
        offset
       </code>
      </em>
      is still required to be non-null and non-negative, though the meaning of
      <span class=""quote"">
       “
       <span class=""quote"">
        non-negative
       </span>
       ”
      </span>
      depends on its data type.
     </p>
    </li>
   </ul>
  </div>
  <p>
   In any case, the distance to the end of the frame is limited by the distance to the end of the partition, so that for rows near the partition ends the frame might contain fewer rows than elsewhere.
  </p>
  <p>
   Notice that in both
   <code class=""literal"">
    ROWS
   </code>
   and
   <code class=""literal"">
    GROUPS
   </code>
   mode,
   <code class=""literal"">
    0 PRECEDING
   </code>
   and
   <code class=""literal"">
    0 FOLLOWING
   </code>
   are equivalent to
   <code class=""literal"">
    CURRENT ROW
   </code>
   . This normally holds in
   <code class=""literal"">
    RANGE
   </code>
   mode as well, for an appropriate data-type-specific meaning of
   <span class=""quote"">
    “
    <span class=""quote"">
     zero
    </span>
    ”
   </span>
   .
  </p>
  <p>
   The
   <em class=""replaceable"">
    <code>
     frame_exclusion
    </code>
   </em>
   option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options.
   <code class=""literal"">
    EXCLUDE CURRENT ROW
   </code>
   excludes the current row from the frame.
   <code class=""literal"">
    EXCLUDE GROUP
   </code>
   excludes the current row and its ordering peers from the frame.
   <code class=""literal"">
    EXCLUDE TIES
   </code>
   excludes any peers of the current row from the frame, but not the current row itself.
   <code class=""literal"">
    EXCLUDE NO OTHERS
   </code>
   simply specifies explicitly the default behavior of not excluding the current row or its peers.
  </p>
  <p>
   The default framing option is
   <code class=""literal"">
    RANGE UNBOUNDED PRECEDING
   </code>
   , which is the same as
   <code class=""literal"">
    RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
   </code>
   . With
   <code class=""literal"">
    ORDER BY
   </code>
   , this sets the frame to be all rows from the partition start up through the current row's last
   <code class=""literal"">
    ORDER BY
   </code>
   peer. Without
   <code class=""literal"">
    ORDER BY
   </code>
   , this means all rows of the partition are included in the window frame, since all rows become peers of the current row.
  </p>
  <p>
   Restrictions are that
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   cannot be
   <code class=""literal"">
    UNBOUNDED FOLLOWING
   </code>
   ,
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   cannot be
   <code class=""literal"">
    UNBOUNDED PRECEDING
   </code>
   , and the
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   choice cannot appear earlier in the above list of
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   and
   <em class=""replaceable"">
    <code>
     frame_end
    </code>
   </em>
   options than the
   <em class=""replaceable"">
    <code>
     frame_start
    </code>
   </em>
   choice does — for example
   <code class=""literal"">
    RANGE BETWEEN CURRENT ROW AND
    <em class=""replaceable"">
     <code>
      offset
     </code>
    </em>
    PRECEDING
   </code>
   is not allowed. But, for example,
   <code class=""literal"">
    ROWS BETWEEN 7 PRECEDING AND 8 PRECEDING
   </code>
   is allowed, even though it would never select any rows.
  </p>
  <p>
   If
   <code class=""literal"">
    FILTER
   </code>
   is specified, then only the input rows for which the
   <em class=""replaceable"">
    <code>
     filter_clause
    </code>
   </em>
   evaluates to true are fed to the window function; other rows are discarded. Only window functions that are aggregates accept a
   <code class=""literal"">
    FILTER
   </code>
   clause.
  </p>
  <p>
   The built-in window functions are described in
   <a class=""xref"" href=""functions-window.html#FUNCTIONS-WINDOW-TABLE"" title=""Table 9.65. General-Purpose Window Functions"">
    Table 9.65
   </a>
   . Other window functions can be added by the user. Also, any built-in or user-defined general-purpose or statistical aggregate can be used as a window function. (Ordered-set and hypothetical-set aggregates cannot presently be used as window functions.)
  </p>
  <p>
   The syntaxes using
   <code class=""literal"">
    *
   </code>
   are used for calling parameter-less aggregate functions as window functions, for example
   <code class=""literal"">
    count(*) OVER (PARTITION BY x ORDER BY y)
   </code>
   . The asterisk (
   <code class=""literal"">
    *
   </code>
   ) is customarily not used for window-specific functions. Window-specific functions do not allow
   <code class=""literal"">
    DISTINCT
   </code>
   or
   <code class=""literal"">
    ORDER BY
   </code>
   to be used within the function argument list.
  </p>
  <p>
   Window function calls are permitted only in the
   <code class=""literal"">
    SELECT
   </code>
   list and the
   <code class=""literal"">
    ORDER BY
   </code>
   clause of the query.
  </p>
  <p>
   More information about window functions can be found in
   <a class=""xref"" href=""tutorial-window.html"" title=""3.5. Window Functions"">
    Section 3.5
   </a>
   ,
   <a class=""xref"" href=""functions-window.html"" title=""9.22. Window Functions"">
    Section 9.22
   </a>
   , and
   <a class=""xref"" href=""queries-table-expressions.html#QUERIES-WINDOW"" title=""7.2.5. Window Function Processing"">
    Section 7.2.5
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-TYPE-CASTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.9. Type Casts
      <a class=""id_link"" href=""#SQL-SYNTAX-TYPE-CASTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.17.2"" name=""id-1.5.3.6.17.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.17.3"" name=""id-1.5.3.6.17.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.17.4"" name=""id-1.5.3.6.17.4"">
  </a>
  <p>
   A type cast specifies a conversion from one data type to another.
   <span class=""productname"">
    PostgreSQL
   </span>
   accepts two equivalent syntaxes for type casts:
  </p>
  <pre class=""synopsis"">
CAST ( <em class=""replaceable""><code>expression</code></em> AS <em class=""replaceable""><code>type</code></em> )
<em class=""replaceable""><code>expression</code></em>::<em class=""replaceable""><code>type</code></em>
</pre>
  <p>
   The
   <code class=""literal"">
    CAST
   </code>
   syntax conforms to SQL; the syntax with
   <code class=""literal"">
    ::
   </code>
   is historical
   <span class=""productname"">
    PostgreSQL
   </span>
   usage.
  </p>
  <p>
   When a cast is applied to a value expression of a known type, it represents a run-time type conversion. The cast will succeed only if a suitable type conversion operation has been defined. Notice that this is subtly different from the use of casts with constants, as shown in
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-GENERIC"" title=""4.1.2.7. Constants of Other Types"">
    Section 4.1.2.7
   </a>
   . A cast applied to an unadorned string literal represents the initial assignment of a type to a literal constant value, and so it will succeed for any type (if the contents of the string literal are acceptable input syntax for the data type).
  </p>
  <p>
   An explicit type cast can usually be omitted if there is no ambiguity as to the type that a value expression must produce (for example, when it is assigned to a table column); the system will automatically apply a type cast in such cases. However, automatic casting is only done for casts that are marked
   <span class=""quote"">
    “
    <span class=""quote"">
     OK to apply implicitly
    </span>
    ”
   </span>
   in the system catalogs. Other casts must be invoked with explicit casting syntax. This restriction is intended to prevent surprising conversions from being applied silently.
  </p>
  <p>
   It is also possible to specify a type cast using a function-like syntax:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>typename</code></em> ( <em class=""replaceable""><code>expression</code></em> )
</pre>
  <p>
   However, this only works for types whose names are also valid as function names. For example,
   <code class=""literal"">
    double precision
   </code>
   cannot be used this way, but the equivalent
   <code class=""literal"">
    float8
   </code>
   can. Also, the names
   <code class=""literal"">
    interval
   </code>
   ,
   <code class=""literal"">
    time
   </code>
   , and
   <code class=""literal"">
    timestamp
   </code>
   can only be used in this fashion if they are double-quoted, because of syntactic conflicts. Therefore, the use of the function-like cast syntax leads to inconsistencies and should probably be avoided.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The function-like syntax is in fact just a function call. When one of the two standard cast syntaxes is used to do a run-time conversion, it will internally invoke a registered function to perform the conversion. By convention, these conversion functions have the same name as their output type, and thus the
    <span class=""quote"">
     “
     <span class=""quote"">
      function-like syntax
     </span>
     ”
    </span>
    is nothing more than a direct invocation of the underlying conversion function. Obviously, this is not something that a portable application should rely on. For further details see
    <a class=""xref"" href=""sql-createcast.html"" title=""CREATE CAST"">
     <span class=""refentrytitle"">
      CREATE CAST
     </span>
    </a>
    .
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-COLLATE-EXPRS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.10. Collation Expressions
      <a class=""id_link"" href=""#SQL-SYNTAX-COLLATE-EXPRS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.18.2"" name=""id-1.5.3.6.18.2"">
  </a>
  <p>
   The
   <code class=""literal"">
    COLLATE
   </code>
   clause overrides the collation of an expression. It is appended to the expression it applies to:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expr</code></em> COLLATE <em class=""replaceable""><code>collation</code></em>
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     collation
    </code>
   </em>
   is a possibly schema-qualified identifier. The
   <code class=""literal"">
    COLLATE
   </code>
   clause binds tighter than operators; parentheses can be used when necessary.
  </p>
  <p>
   If no collation is explicitly specified, the database system either derives a collation from the columns involved in the expression, or it defaults to the default collation of the database if no column is involved in the expression.
  </p>
  <p>
   The two common uses of the
   <code class=""literal"">
    COLLATE
   </code>
   clause are overriding the sort order in an
   <code class=""literal"">
    ORDER BY
   </code>
   clause, for example:
  </p>
  <pre class=""programlisting"">
SELECT a, b, c FROM tbl WHERE ... ORDER BY a COLLATE ""C"";
</pre>
  <p>
   and overriding the collation of a function or operator call that has locale-sensitive results, for example:
  </p>
  <pre class=""programlisting"">
SELECT * FROM tbl WHERE a &gt; 'foo' COLLATE ""C"";
</pre>
  <p>
   Note that in the latter case the
   <code class=""literal"">
    COLLATE
   </code>
   clause is attached to an input argument of the operator we wish to affect. It doesn't matter which argument of the operator or function call the
   <code class=""literal"">
    COLLATE
   </code>
   clause is attached to, because the collation that is applied by the operator or function is derived by considering all arguments, and an explicit
   <code class=""literal"">
    COLLATE
   </code>
   clause will override the collations of all other arguments. (Attaching non-matching
   <code class=""literal"">
    COLLATE
   </code>
   clauses to more than one argument, however, is an error. For more details see
   <a class=""xref"" href=""collation.html"" title=""23.2. Collation Support"">
    Section 23.2
   </a>
   .) Thus, this gives the same result as the previous example:
  </p>
  <pre class=""programlisting"">
SELECT * FROM tbl WHERE a COLLATE ""C"" &gt; 'foo';
</pre>
  <p>
   But this is an error:
  </p>
  <pre class=""programlisting"">
SELECT * FROM tbl WHERE (a &gt; 'foo') COLLATE ""C"";
</pre>
  <p>
   because it attempts to apply a collation to the result of the
   <code class=""literal"">
    &gt;
   </code>
   operator, which is of the non-collatable data type
   <code class=""type"">
    boolean
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-SCALAR-SUBQUERIES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.11. Scalar Subqueries
      <a class=""id_link"" href=""#SQL-SYNTAX-SCALAR-SUBQUERIES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.19.2"" name=""id-1.5.3.6.19.2"">
  </a>
  <p>
   A scalar subquery is an ordinary
   <code class=""command"">
    SELECT
   </code>
   query in parentheses that returns exactly one row with one column. (See
   <a class=""xref"" href=""queries.html"" title=""Chapter 7. Queries"">
    Chapter 7
   </a>
   for information about writing queries.) The
   <code class=""command"">
    SELECT
   </code>
   query is executed and the single returned value is used in the surrounding value expression. It is an error to use a query that returns more than one row or more than one column as a scalar subquery. (But if, during a particular execution, the subquery returns no rows, there is no error; the scalar result is taken to be null.) The subquery can refer to variables from the surrounding query, which will act as constants during any one evaluation of the subquery. See also
   <a class=""xref"" href=""functions-subquery.html"" title=""9.24. Subquery Expressions"">
    Section 9.24
   </a>
   for other expressions involving subqueries.
  </p>
  <p>
   For example, the following finds the largest city population in each state:
  </p>
  <pre class=""programlisting"">
SELECT name, (SELECT max(pop) FROM cities WHERE cities.state = states.name)
    FROM states;
</pre>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-ARRAY-CONSTRUCTORS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.12. Array Constructors
      <a class=""id_link"" href=""#SQL-SYNTAX-ARRAY-CONSTRUCTORS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.20.2"" name=""id-1.5.3.6.20.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.20.3"" name=""id-1.5.3.6.20.3"">
  </a>
  <p>
   An array constructor is an expression that builds an array value using values for its member elements. A simple array constructor consists of the key word
   <code class=""literal"">
    ARRAY
   </code>
   , a left square bracket
   <code class=""literal"">
    [
   </code>
   , a list of expressions (separated by commas) for the array element values, and finally a right square bracket
   <code class=""literal"">
    ]
   </code>
   . For example:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[1,2,3+4];
  array
---------
 {1,2,7}
(1 row)
</pre>
  <p>
   By default, the array element type is the common type of the member expressions, determined using the same rules as for
   <code class=""literal"">
    UNION
   </code>
   or
   <code class=""literal"">
    CASE
   </code>
   constructs (see
   <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
    Section 10.5
   </a>
   ). You can override this by explicitly casting the array constructor to the desired type, for example:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[1,2,22.7]::integer[];
  array
----------
 {1,2,23}
(1 row)
</pre>
  <p>
   This has the same effect as casting each expression to the array element type individually. For more on casting, see
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-TYPE-CASTS"" title=""4.2.9. Type Casts"">
    Section 4.2.9
   </a>
   .
  </p>
  <p>
   Multidimensional array values can be built by nesting array constructors. In the inner constructors, the key word
   <code class=""literal"">
    ARRAY
   </code>
   can be omitted. For example, these produce the same result:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];
     array
---------------
 {{1,2},{3,4}}
(1 row)

SELECT ARRAY[[1,2],[3,4]];
     array
---------------
 {{1,2},{3,4}}
(1 row)
</pre>
  <p>
   Since multidimensional arrays must be rectangular, inner constructors at the same level must produce sub-arrays of identical dimensions. Any cast applied to the outer
   <code class=""literal"">
    ARRAY
   </code>
   constructor propagates automatically to all the inner constructors.
  </p>
  <p>
   Multidimensional array constructor elements can be anything yielding an array of the proper kind, not only a sub-
   <code class=""literal"">
    ARRAY
   </code>
   construct. For example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE arr(f1 int[], f2 int[]);

INSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], ARRAY[[5,6],[7,8]]);

SELECT ARRAY[f1, f2, '{{9,10},{11,12}}'::int[]] FROM arr;
                     array
------------------------------------------------
 {{{1,2},{3,4}},{{5,6},{7,8}},{{9,10},{11,12}}}
(1 row)
</pre>
  <p>
   You can construct an empty array, but since it's impossible to have an array with no type, you must explicitly cast your empty array to the desired type. For example:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[]::integer[];
 array
-------
 {}
(1 row)
</pre>
  <p>
   It is also possible to construct an array from the results of a subquery. In this form, the array constructor is written with the key word
   <code class=""literal"">
    ARRAY
   </code>
   followed by a parenthesized (not bracketed) subquery. For example:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');
                              array
------------------------------------------------------------------
 {2011,1954,1948,1952,1951,1244,1950,2005,1949,1953,2006,31,2412}
(1 row)

SELECT ARRAY(SELECT ARRAY[i, i*2] FROM generate_series(1,5) AS a(i));
              array
----------------------------------
 {{1,2},{2,4},{3,6},{4,8},{5,10}}
(1 row)
</pre>
  <p>
   The subquery must return a single column. If the subquery's output column is of a non-array type, the resulting one-dimensional array will have an element for each row in the subquery result, with an element type matching that of the subquery's output column. If the subquery's output column is of an array type, the result will be an array of the same type but one higher dimension; in this case all the subquery rows must yield arrays of identical dimensionality, else the result would not be rectangular.
  </p>
  <p>
   The subscripts of an array value built with
   <code class=""literal"">
    ARRAY
   </code>
   always begin with one. For more information about arrays, see
   <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
    Section 8.15
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-ROW-CONSTRUCTORS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.13. Row Constructors
      <a class=""id_link"" href=""#SQL-SYNTAX-ROW-CONSTRUCTORS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.21.2"" name=""id-1.5.3.6.21.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.21.3"" name=""id-1.5.3.6.21.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.3.6.21.4"" name=""id-1.5.3.6.21.4"">
  </a>
  <p>
   A row constructor is an expression that builds a row value (also called a composite value) using values for its member fields. A row constructor consists of the key word
   <code class=""literal"">
    ROW
   </code>
   , a left parenthesis, zero or more expressions (separated by commas) for the row field values, and finally a right parenthesis. For example:
  </p>
  <pre class=""programlisting"">
SELECT ROW(1,2.5,'this is a test');
</pre>
  <p>
   The key word
   <code class=""literal"">
    ROW
   </code>
   is optional when there is more than one expression in the list.
  </p>
  <p>
   A row constructor can include the syntax
   <em class=""replaceable"">
    <code>
     rowvalue
    </code>
   </em>
   <code class=""literal"">
    .*
   </code>
   , which will be expanded to a list of the elements of the row value, just as occurs when the
   <code class=""literal"">
    .*
   </code>
   syntax is used at the top level of a
   <code class=""command"">
    SELECT
   </code>
   list (see
   <a class=""xref"" href=""rowtypes.html#ROWTYPES-USAGE"" title=""8.16.5. Using Composite Types in Queries"">
    Section 8.16.5
   </a>
   ). For example, if table
   <code class=""literal"">
    t
   </code>
   has columns
   <code class=""literal"">
    f1
   </code>
   and
   <code class=""literal"">
    f2
   </code>
   , these are the same:
  </p>
  <pre class=""programlisting"">
SELECT ROW(t.*, 42) FROM t;
SELECT ROW(t.f1, t.f2, 42) FROM t;
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Before
    <span class=""productname"">
     PostgreSQL
    </span>
    8.2, the
    <code class=""literal"">
     .*
    </code>
    syntax was not expanded in row constructors, so that writing
    <code class=""literal"">
     ROW(t.*, 42)
    </code>
    created a two-field row whose first field was another row value. The new behavior is usually more useful. If you need the old behavior of nested row values, write the inner row value without
    <code class=""literal"">
     .*
    </code>
    , for instance
    <code class=""literal"">
     ROW(t, 42)
    </code>
    .
   </p>
  </div>
  <p>
   By default, the value created by a
   <code class=""literal"">
    ROW
   </code>
   expression is of an anonymous record type. If necessary, it can be cast to a named composite type — either the row type of a table, or a composite type created with
   <code class=""command"">
    CREATE TYPE AS
   </code>
   . An explicit cast might be needed to avoid ambiguity. For example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE mytable(f1 int, f2 float, f3 text);

CREATE FUNCTION getf1(mytable) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;

-- No cast needed since only one getf1() exists
SELECT getf1(ROW(1,2.5,'this is a test'));
 getf1
-------
     1
(1 row)

CREATE TYPE myrowtype AS (f1 int, f2 text, f3 numeric);

CREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;

-- Now we need a cast to indicate which function to call:
SELECT getf1(ROW(1,2.5,'this is a test'));
ERROR:  function getf1(record) is not unique

SELECT getf1(ROW(1,2.5,'this is a test')::mytable);
 getf1
-------
     1
(1 row)

SELECT getf1(CAST(ROW(11,'this is a test',2.5) AS myrowtype));
 getf1
-------
    11
(1 row)
</pre>
  <p>
   Row constructors can be used to build composite values to be stored in a composite-type table column, or to be passed to a function that accepts a composite parameter. Also, it is possible to test rows using the standard comparison operators as described in
   <a class=""xref"" href=""functions-comparison.html"" title=""9.2. Comparison Functions and Operators"">
    Section 9.2
   </a>
   , to compare one row against another as described in
   <a class=""xref"" href=""functions-comparisons.html"" title=""9.25. Row and Array Comparisons"">
    Section 9.25
   </a>
   , and to use them in connection with subqueries, as discussed in
   <a class=""xref"" href=""functions-subquery.html"" title=""9.24. Subquery Expressions"">
    Section 9.24
   </a>
   ,
  </p>
 </div>
 <div class=""sect2"" id=""SYNTAX-EXPRESS-EVAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.2.14. Expression Evaluation Rules
      <a class=""id_link"" href=""#SYNTAX-EXPRESS-EVAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.6.22.2"" name=""id-1.5.3.6.22.2"">
  </a>
  <p>
   The order of evaluation of subexpressions is not defined. In particular, the inputs of an operator or function are not necessarily evaluated left-to-right or in any other fixed order.
  </p>
  <p>
   Furthermore, if the result of an expression can be determined by evaluating only some parts of it, then other subexpressions might not be evaluated at all. For instance, if one wrote:
  </p>
  <pre class=""programlisting"">
SELECT true OR somefunc();
</pre>
  <p>
   then
   <code class=""literal"">
    somefunc()
   </code>
   would (probably) not be called at all. The same would be the case if one wrote:
  </p>
  <pre class=""programlisting"">
SELECT somefunc() OR true;
</pre>
  <p>
   Note that this is not the same as the left-to-right
   <span class=""quote"">
    “
    <span class=""quote"">
     short-circuiting
    </span>
    ”
   </span>
   of Boolean operators that is found in some programming languages.
  </p>
  <p>
   As a consequence, it is unwise to use functions with side effects as part of complex expressions. It is particularly dangerous to rely on side effects or evaluation order in
   <code class=""literal"">
    WHERE
   </code>
   and
   <code class=""literal"">
    HAVING
   </code>
   clauses, since those clauses are extensively reprocessed as part of developing an execution plan. Boolean expressions (
   <code class=""literal"">
    AND
   </code>
   /
   <code class=""literal"">
    OR
   </code>
   /
   <code class=""literal"">
    NOT
   </code>
   combinations) in those clauses can be reorganized in any manner allowed by the laws of Boolean algebra.
  </p>
  <p>
   When it is essential to force evaluation order, a
   <code class=""literal"">
    CASE
   </code>
   construct (see
   <a class=""xref"" href=""functions-conditional.html"" title=""9.18. Conditional Expressions"">
    Section 9.18
   </a>
   ) can be used. For example, this is an untrustworthy way of trying to avoid division by zero in a
   <code class=""literal"">
    WHERE
   </code>
   clause:
  </p>
  <pre class=""programlisting"">
SELECT ... WHERE x &gt; 0 AND y/x &gt; 1.5;
</pre>
  <p>
   But this is safe:
  </p>
  <pre class=""programlisting"">
SELECT ... WHERE CASE WHEN x &gt; 0 THEN y/x &gt; 1.5 ELSE false END;
</pre>
  <p>
   A
   <code class=""literal"">
    CASE
   </code>
   construct used in this fashion will defeat optimization attempts, so it should only be done when necessary. (In this particular example, it would be better to sidestep the problem by writing
   <code class=""literal"">
    y &gt; 1.5*x
   </code>
   instead.)
  </p>
  <p>
   <code class=""literal"">
    CASE
   </code>
   is not a cure-all for such issues, however. One limitation of the technique illustrated above is that it does not prevent early evaluation of constant subexpressions. As described in
   <a class=""xref"" href=""xfunc-volatility.html"" title=""36.7. Function Volatility Categories"">
    Section 36.7
   </a>
   , functions and operators marked
   <code class=""literal"">
    IMMUTABLE
   </code>
   can be evaluated when the query is planned rather than when it is executed. Thus for example
  </p>
  <pre class=""programlisting"">
SELECT CASE WHEN x &gt; 0 THEN x ELSE 1/0 END FROM tab;
</pre>
  <p>
   is likely to result in a division-by-zero failure due to the planner trying to simplify the constant subexpression, even if every row in the table has
   <code class=""literal"">
    x &gt; 0
   </code>
   so that the
   <code class=""literal"">
    ELSE
   </code>
   arm would never be entered at run time.
  </p>
  <p>
   While that particular example might seem silly, related cases that don't obviously involve constants can occur in queries executed within functions, since the values of function arguments and local variables can be inserted into queries as constants for planning purposes. Within
   <span class=""application"">
    PL/pgSQL
   </span>
   functions, for example, using an
   <code class=""literal"">
    IF
   </code>
   -
   <code class=""literal"">
    THEN
   </code>
   -
   <code class=""literal"">
    ELSE
   </code>
   statement to protect a risky computation is much safer than just nesting it in a
   <code class=""literal"">
    CASE
   </code>
   expression.
  </p>
  <p>
   Another limitation of the same kind is that a
   <code class=""literal"">
    CASE
   </code>
   cannot prevent evaluation of an aggregate expression contained within it, because aggregate expressions are computed before other expressions in a
   <code class=""literal"">
    SELECT
   </code>
   list or
   <code class=""literal"">
    HAVING
   </code>
   clause are considered. For example, the following query can cause a division-by-zero error despite seemingly having protected against it:
  </p>
  <pre class=""programlisting"">
SELECT CASE WHEN min(employees) &gt; 0
            THEN avg(expenses / employees)
       END
    FROM departments;
</pre>
  <p>
   The
   <code class=""function"">
    min()
   </code>
   and
   <code class=""function"">
    avg()
   </code>
   aggregates are computed concurrently over all the input rows, so if any row has
   <code class=""structfield"">
    employees
   </code>
   equal to zero, the division-by-zero error will occur before there is any opportunity to test the result of
   <code class=""function"">
    min()
   </code>
   . Instead, use a
   <code class=""literal"">
    WHERE
   </code>
   or
   <code class=""literal"">
    FILTER
   </code>
   clause to prevent problematic input rows from reaching an aggregate function in the first place.
  </p>
 </div>
</div>
"
4. SQL Syntax,4.3. Calling Functions,https://www.postgresql.org/docs/17/sql-syntax-calling-funcs.html,"<div class=""sect1"" id=""SQL-SYNTAX-CALLING-FUNCS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     4.3. Calling Functions
     <a class=""id_link"" href=""#SQL-SYNTAX-CALLING-FUNCS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-calling-funcs.html#SQL-SYNTAX-CALLING-FUNCS-POSITIONAL"">
      4.3.1. Using Positional Notation
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-calling-funcs.html#SQL-SYNTAX-CALLING-FUNCS-NAMED"">
      4.3.2. Using Named Notation
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""sql-syntax-calling-funcs.html#SQL-SYNTAX-CALLING-FUNCS-MIXED"">
      4.3.3. Using Mixed Notation
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.3.7.2"" name=""id-1.5.3.7.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  allows functions that have named parameters to be called using either
  <em class=""firstterm"">
   positional
  </em>
  or
  <em class=""firstterm"">
   named
  </em>
  notation. Named notation is especially useful for functions that have a large number of parameters, since it makes the associations between parameters and actual arguments more explicit and reliable. In positional notation, a function call is written with its argument values in the same order as they are defined in the function declaration. In named notation, the arguments are matched to the function parameters by name and can be written in any order. For each notation, also consider the effect of function argument types, documented in
  <a class=""xref"" href=""typeconv-func.html"" title=""10.3. Functions"">
   Section 10.3
  </a>
  .
 </p>
 <p>
  In either notation, parameters that have default values given in the function declaration need not be written in the call at all. But this is particularly useful in named notation, since any combination of parameters can be omitted; while in positional notation parameters can only be omitted from right to left.
 </p>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  also supports
  <em class=""firstterm"">
   mixed
  </em>
  notation, which combines positional and named notation. In this case, positional parameters are written first and named parameters appear after them.
 </p>
 <p>
  The following examples will illustrate the usage of all three notations, using the following function definition:
 </p>
 <pre class=""programlisting"">
CREATE FUNCTION concat_lower_or_upper(a text, b text, uppercase boolean DEFAULT false)
RETURNS text
AS
$$
 SELECT CASE
        WHEN $3 THEN UPPER($1 || ' ' || $2)
        ELSE LOWER($1 || ' ' || $2)
        END;
$$
LANGUAGE SQL IMMUTABLE STRICT;
</pre>
 <p>
  Function
  <code class=""function"">
   concat_lower_or_upper
  </code>
  has two mandatory parameters,
  <code class=""literal"">
   a
  </code>
  and
  <code class=""literal"">
   b
  </code>
  . Additionally there is one optional parameter
  <code class=""literal"">
   uppercase
  </code>
  which defaults to
  <code class=""literal"">
   false
  </code>
  . The
  <code class=""literal"">
   a
  </code>
  and
  <code class=""literal"">
   b
  </code>
  inputs will be concatenated, and forced to either upper or lower case depending on the
  <code class=""literal"">
   uppercase
  </code>
  parameter. The remaining details of this function definition are not important here (see
  <a class=""xref"" href=""extend.html"" title=""Chapter 36. Extending SQL"">
   Chapter 36
  </a>
  for more information).
 </p>
 <div class=""sect2"" id=""SQL-SYNTAX-CALLING-FUNCS-POSITIONAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.3.1. Using Positional Notation
      <a class=""id_link"" href=""#SQL-SYNTAX-CALLING-FUNCS-POSITIONAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.7.7.2"" name=""id-1.5.3.7.7.2"">
  </a>
  <p>
   Positional notation is the traditional mechanism for passing arguments to functions in
   <span class=""productname"">
    PostgreSQL
   </span>
   . An example is:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper('Hello', 'World', true);
 concat_lower_or_upper
-----------------------
 HELLO WORLD
(1 row)
</pre>
  <p>
   All arguments are specified in order. The result is upper case since
   <code class=""literal"">
    uppercase
   </code>
   is specified as
   <code class=""literal"">
    true
   </code>
   . Another example is:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper('Hello', 'World');
 concat_lower_or_upper
-----------------------
 hello world
(1 row)
</pre>
  <p>
   Here, the
   <code class=""literal"">
    uppercase
   </code>
   parameter is omitted, so it receives its default value of
   <code class=""literal"">
    false
   </code>
   , resulting in lower case output. In positional notation, arguments can be omitted from right to left so long as they have defaults.
  </p>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-CALLING-FUNCS-NAMED"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.3.2. Using Named Notation
      <a class=""id_link"" href=""#SQL-SYNTAX-CALLING-FUNCS-NAMED"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.7.8.2"" name=""id-1.5.3.7.8.2"">
  </a>
  <p>
   In named notation, each argument's name is specified using
   <code class=""literal"">
    =&gt;
   </code>
   to separate it from the argument expression. For example:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper(a =&gt; 'Hello', b =&gt; 'World');
 concat_lower_or_upper
-----------------------
 hello world
(1 row)
</pre>
  <p>
   Again, the argument
   <code class=""literal"">
    uppercase
   </code>
   was omitted so it is set to
   <code class=""literal"">
    false
   </code>
   implicitly. One advantage of using named notation is that the arguments may be specified in any order, for example:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper(a =&gt; 'Hello', b =&gt; 'World', uppercase =&gt; true);
 concat_lower_or_upper
-----------------------
 HELLO WORLD
(1 row)

SELECT concat_lower_or_upper(a =&gt; 'Hello', uppercase =&gt; true, b =&gt; 'World');
 concat_lower_or_upper
-----------------------
 HELLO WORLD
(1 row)
</pre>
  <p>
   An older syntax based on "":="" is supported for backward compatibility:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper(a := 'Hello', uppercase := true, b := 'World');
 concat_lower_or_upper
-----------------------
 HELLO WORLD
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""SQL-SYNTAX-CALLING-FUNCS-MIXED"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      4.3.3. Using Mixed Notation
      <a class=""id_link"" href=""#SQL-SYNTAX-CALLING-FUNCS-MIXED"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.3.7.9.2"" name=""id-1.5.3.7.9.2"">
  </a>
  <p>
   The mixed notation combines positional and named notation. However, as already mentioned, named arguments cannot precede positional arguments. For example:
  </p>
  <pre class=""screen"">
SELECT concat_lower_or_upper('Hello', 'World', uppercase =&gt; true);
 concat_lower_or_upper
-----------------------
 HELLO WORLD
(1 row)
</pre>
  <p>
   In the above query, the arguments
   <code class=""literal"">
    a
   </code>
   and
   <code class=""literal"">
    b
   </code>
   are specified positionally, while
   <code class=""literal"">
    uppercase
   </code>
   is specified by name. In this example, that adds little except documentation. With a more complex function having numerous parameters that have default values, named or mixed notation can save a great deal of writing and reduce chances for error.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Named and mixed call notations currently cannot be used when calling an aggregate function (but they do work when an aggregate function is used as a window function).
   </p>
  </div>
 </div>
</div>
"
5. Data Definition,5.1. Table Basics,https://www.postgresql.org/docs/17/ddl-basics.html,"<div class=""sect1"" id=""DDL-BASICS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.1. Table Basics
     <a class=""id_link"" href=""#DDL-BASICS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.3.2"" name=""id-1.5.4.3.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.3.3"" name=""id-1.5.4.3.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.3.4"" name=""id-1.5.4.3.4"">
 </a>
 <p>
  A table in a relational database is much like a table on paper: It consists of rows and columns. The number and order of the columns is fixed, and each column has a name. The number of rows is variable — it reflects how much data is stored at a given moment. SQL does not make any guarantees about the order of the rows in a table. When a table is read, the rows will appear in an unspecified order, unless sorting is explicitly requested. This is covered in
  <a class=""xref"" href=""queries.html"" title=""Chapter 7. Queries"">
   Chapter 7
  </a>
  . Furthermore, SQL does not assign unique identifiers to rows, so it is possible to have several completely identical rows in a table. This is a consequence of the mathematical model that underlies SQL but is usually not desirable. Later in this chapter we will see how to deal with this issue.
 </p>
 <p>
  Each column has a data type. The data type constrains the set of possible values that can be assigned to a column and assigns semantics to the data stored in the column so that it can be used for computations. For instance, a column declared to be of a numerical type will not accept arbitrary text strings, and the data stored in such a column can be used for mathematical computations. By contrast, a column declared to be of a character string type will accept almost any kind of data but it does not lend itself to mathematical calculations, although other operations such as string concatenation are available.
 </p>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  includes a sizable set of built-in data types that fit many applications. Users can also define their own data types. Most built-in data types have obvious names and semantics, so we defer a detailed explanation to
  <a class=""xref"" href=""datatype.html"" title=""Chapter 8. Data Types"">
   Chapter 8
  </a>
  . Some of the frequently used data types are
  <code class=""type"">
   integer
  </code>
  for whole numbers,
  <code class=""type"">
   numeric
  </code>
  for possibly fractional numbers,
  <code class=""type"">
   text
  </code>
  for character strings,
  <code class=""type"">
   date
  </code>
  for dates,
  <code class=""type"">
   time
  </code>
  for time-of-day values, and
  <code class=""type"">
   timestamp
  </code>
  for values containing both date and time.
 </p>
 <a class=""indexterm"" id=""id-1.5.4.3.8"" name=""id-1.5.4.3.8"">
 </a>
 <p>
  To create a table, you use the aptly named
  <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
   <span class=""refentrytitle"">
    CREATE TABLE
   </span>
  </a>
  command. In this command you specify at least a name for the new table, the names of the columns and the data type of each column. For example:
 </p>
 <pre class=""programlisting"">
CREATE TABLE my_first_table (
    first_column text,
    second_column integer
);
</pre>
 <p>
  This creates a table named
  <code class=""literal"">
   my_first_table
  </code>
  with two columns. The first column is named
  <code class=""literal"">
   first_column
  </code>
  and has a data type of
  <code class=""type"">
   text
  </code>
  ; the second column has the name
  <code class=""literal"">
   second_column
  </code>
  and the type
  <code class=""type"">
   integer
  </code>
  . The table and column names follow the identifier syntax explained in
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS"" title=""4.1.1. Identifiers and Key Words"">
   Section 4.1.1
  </a>
  . The type names are usually also identifiers, but there are some exceptions. Note that the column list is comma-separated and surrounded by parentheses.
 </p>
 <p>
  Of course, the previous example was heavily contrived. Normally, you would give names to your tables and columns that convey what kind of data they store. So let's look at a more realistic example:
 </p>
 <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</pre>
 <p>
  (The
  <code class=""type"">
   numeric
  </code>
  type can store fractional components, as would be typical of monetary amounts.)
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   When you create many interrelated tables it is wise to choose a consistent naming pattern for the tables and columns. For instance, there is a choice of using singular or plural nouns for table names, both of which are favored by some theorist or other.
  </p>
 </div>
 <p>
  There is a limit on how many columns a table can contain. Depending on the column types, it is between 250 and 1600. However, defining a table with anywhere near this many columns is highly unusual and often a questionable design.
 </p>
 <a class=""indexterm"" id=""id-1.5.4.3.13"" name=""id-1.5.4.3.13"">
 </a>
 <p>
  If you no longer need a table, you can remove it using the
  <a class=""xref"" href=""sql-droptable.html"" title=""DROP TABLE"">
   <span class=""refentrytitle"">
    DROP TABLE
   </span>
  </a>
  command. For example:
 </p>
 <pre class=""programlisting"">
DROP TABLE my_first_table;
DROP TABLE products;
</pre>
 <p>
  Attempting to drop a table that does not exist is an error. Nevertheless, it is common in SQL script files to unconditionally try to drop each table before creating it, ignoring any error messages, so that the script works whether or not the table exists. (If you like, you can use the
  <code class=""literal"">
   DROP TABLE IF EXISTS
  </code>
  variant to avoid the error messages, but this is not standard SQL.)
 </p>
 <p>
  If you need to modify a table that already exists, see
  <a class=""xref"" href=""ddl-alter.html"" title=""5.7. Modifying Tables"">
   Section 5.7
  </a>
  later in this chapter.
 </p>
 <p>
  With the tools discussed so far you can create fully functional tables. The remainder of this chapter is concerned with adding features to the table definition to ensure data integrity, security, or convenience. If you are eager to fill your tables with data now you can skip ahead to
  <a class=""xref"" href=""dml.html"" title=""Chapter 6. Data Manipulation"">
   Chapter 6
  </a>
  and read the rest of this chapter later.
 </p>
</div>
"
5. Data Definition,5.2. Default Values,https://www.postgresql.org/docs/17/ddl-default.html,"<div class=""sect1"" id=""DDL-DEFAULT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.2. Default Values
     <a class=""id_link"" href=""#DDL-DEFAULT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.4.2"" name=""id-1.5.4.4.2"">
 </a>
 <p>
  A column can be assigned a default value. When a new row is created and no values are specified for some of the columns, those columns will be filled with their respective default values. A data manipulation command can also request explicitly that a column be set to its default value, without having to know what that value is. (Details about data manipulation commands are in
  <a class=""xref"" href=""dml.html"" title=""Chapter 6. Data Manipulation"">
   Chapter 6
  </a>
  .)
 </p>
 <p>
  <a class=""indexterm"" id=""id-1.5.4.4.4.1"" name=""id-1.5.4.4.4.1"">
  </a>
  If no default value is declared explicitly, the default value is the null value. This usually makes sense because a null value can be considered to represent unknown data.
 </p>
 <p>
  In a table definition, default values are listed after the column data type. For example:
 </p>
 <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <span class=""emphasis""><strong>DEFAULT 9.99</strong></span>
);
</pre>
 <p>
  The default value can be an expression, which will be evaluated whenever the default value is inserted (
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  when the table is created). A common example is for a
  <code class=""type"">
   timestamp
  </code>
  column to have a default of
  <code class=""literal"">
   CURRENT_TIMESTAMP
  </code>
  , so that it gets set to the time of row insertion. Another common example is generating a
  <span class=""quote"">
   “
   <span class=""quote"">
    serial number
   </span>
   ”
  </span>
  for each row. In
  <span class=""productname"">
   PostgreSQL
  </span>
  this is typically done by something like:
 </p>
 <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer <span class=""emphasis""><strong>DEFAULT nextval('products_product_no_seq')</strong></span>,
    ...
);
</pre>
 <p>
  where the
  <code class=""literal"">
   nextval()
  </code>
  function supplies successive values from a
  <em class=""firstterm"">
   sequence object
  </em>
  (see
  <a class=""xref"" href=""functions-sequence.html"" title=""9.17. Sequence Manipulation Functions"">
   Section 9.17
  </a>
  ). This arrangement is sufficiently common that there's a special shorthand for it:
 </p>
 <pre class=""programlisting"">
CREATE TABLE products (
    product_no <span class=""emphasis""><strong>SERIAL</strong></span>,
    ...
);
</pre>
 <p>
  The
  <code class=""literal"">
   SERIAL
  </code>
  shorthand is discussed further in
  <a class=""xref"" href=""datatype-numeric.html#DATATYPE-SERIAL"" title=""8.1.4. Serial Types"">
   Section 8.1.4
  </a>
  .
 </p>
</div>
"
5. Data Definition,5.3. Identity Columns,https://www.postgresql.org/docs/17/ddl-identity-columns.html,"<div class=""sect1"" id=""DDL-IDENTITY-COLUMNS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.3. Identity Columns
     <a class=""id_link"" href=""#DDL-IDENTITY-COLUMNS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.5.2"" name=""id-1.5.4.5.2"">
 </a>
 <p>
  An identity column is a special column that is generated automatically from an implicit sequence. It can be used to generate key values.
 </p>
 <p>
  To create an identity column, use the
  <code class=""literal"">
   GENERATED ... AS IDENTITY
  </code>
  clause in
  <code class=""command"">
   CREATE TABLE
  </code>
  , for example:
 </p>
 <pre class=""programlisting"">
CREATE TABLE people (
    id bigint <span class=""emphasis""><strong>GENERATED ALWAYS AS IDENTITY</strong></span>,
    ...,
);
</pre>
 <p>
  or alternatively
 </p>
 <pre class=""programlisting"">
CREATE TABLE people (
    id bigint <span class=""emphasis""><strong>GENERATED BY DEFAULT AS IDENTITY</strong></span>,
    ...,
);
</pre>
 <p>
  See
  <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
   <span class=""refentrytitle"">
    CREATE TABLE
   </span>
  </a>
  for more details.
 </p>
 <p>
  If an
  <code class=""command"">
   INSERT
  </code>
  command is executed on the table with the identity column and no value is explicitly specified for the identity column, then a value generated by the implicit sequence is inserted. For example, with the above definitions and assuming additional appropriate columns, writing
 </p>
 <pre class=""programlisting"">
INSERT INTO people (name, address) VALUES ('A', 'foo');
INSERT INTO people (name, address) VALUES ('B', 'bar');
</pre>
 <p>
  would generate values for the
  <code class=""literal"">
   id
  </code>
  column starting at 1 and result in the following table data:
 </p>
 <pre class=""screen"">
 id | name | address
----+------+---------
  1 | A    | foo
  2 | B    | bar
</pre>
 <p>
  Alternatively, the keyword
  <code class=""literal"">
   DEFAULT
  </code>
  can be specified in place of a value to explicitly request the sequence-generated value, like
 </p>
 <pre class=""programlisting"">
INSERT INTO people (id, name, address) VALUES (<span class=""emphasis""><strong>DEFAULT</strong></span>, 'C', 'baz');
</pre>
 <p>
  Similarly, the keyword
  <code class=""literal"">
   DEFAULT
  </code>
  can be used in
  <code class=""command"">
   UPDATE
  </code>
  commands.
 </p>
 <p>
  Thus, in many ways, an identity column behaves like a column with a default value.
 </p>
 <p>
  The clauses
  <code class=""literal"">
   ALWAYS
  </code>
  and
  <code class=""literal"">
   BY DEFAULT
  </code>
  in the column definition determine how explicitly user-specified values are handled in
  <code class=""command"">
   INSERT
  </code>
  and
  <code class=""command"">
   UPDATE
  </code>
  commands. In an
  <code class=""command"">
   INSERT
  </code>
  command, if
  <code class=""literal"">
   ALWAYS
  </code>
  is selected, a user-specified value is only accepted if the
  <code class=""command"">
   INSERT
  </code>
  statement specifies
  <code class=""literal"">
   OVERRIDING SYSTEM VALUE
  </code>
  . If
  <code class=""literal"">
   BY DEFAULT
  </code>
  is selected, then the user-specified value takes precedence. Thus, using
  <code class=""literal"">
   BY DEFAULT
  </code>
  results in a behavior more similar to default values, where the default value can be overridden by an explicit value, whereas
  <code class=""literal"">
   ALWAYS
  </code>
  provides some more protection against accidentally inserting an explicit value.
 </p>
 <p>
  The data type of an identity column must be one of the data types supported by sequences. (See
  <a class=""xref"" href=""sql-createsequence.html"" title=""CREATE SEQUENCE"">
   <span class=""refentrytitle"">
    CREATE SEQUENCE
   </span>
  </a>
  .) The properties of the associated sequence may be specified when creating an identity column (see
  <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
   <span class=""refentrytitle"">
    CREATE TABLE
   </span>
  </a>
  ) or changed afterwards (see
  <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <span class=""refentrytitle"">
    ALTER TABLE
   </span>
  </a>
  ).
 </p>
 <p>
  An identity column is automatically marked as
  <code class=""literal"">
   NOT NULL
  </code>
  . An identity column, however, does not guarantee uniqueness. (A sequence normally returns unique values, but a sequence could be reset, or values could be inserted manually into the identity column, as discussed above.) Uniqueness would need to be enforced using a
  <code class=""literal"">
   PRIMARY KEY
  </code>
  or
  <code class=""literal"">
   UNIQUE
  </code>
  constraint.
 </p>
 <p>
  In table inheritance hierarchies, identity columns and their properties in a child table are independent of those in its parent tables. A child table does not inherit identity columns or their properties automatically from the parent. During
  <code class=""command"">
   INSERT
  </code>
  or
  <code class=""command"">
   UPDATE
  </code>
  , a column is treated as an identity column if that column is an identity column in the table named in the statement, and the corresponding identity properties are applied.
 </p>
 <p>
  Partitions inherit identity columns from the partitioned table. They cannot have their own identity columns. The properties of a given identity column are consistent across all the partitions in the partition hierarchy.
 </p>
</div>
"
5. Data Definition,5.4. Generated Columns,https://www.postgresql.org/docs/17/ddl-generated-columns.html,"<div class=""sect1"" id=""DDL-GENERATED-COLUMNS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.4. Generated Columns
     <a class=""id_link"" href=""#DDL-GENERATED-COLUMNS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.6.2"" name=""id-1.5.4.6.2"">
 </a>
 <p>
  A generated column is a special column that is always computed from other columns. Thus, it is for columns what a view is for tables. There are two kinds of generated columns: stored and virtual. A stored generated column is computed when it is written (inserted or updated) and occupies storage as if it were a normal column. A virtual generated column occupies no storage and is computed when it is read. Thus, a virtual generated column is similar to a view and a stored generated column is similar to a materialized view (except that it is always updated automatically).
  <span class=""productname"">
   PostgreSQL
  </span>
  currently implements only stored generated columns.
 </p>
 <p>
  To create a generated column, use the
  <code class=""literal"">
   GENERATED ALWAYS AS
  </code>
  clause in
  <code class=""command"">
   CREATE TABLE
  </code>
  , for example:
 </p>
 <pre class=""programlisting"">
CREATE TABLE people (
    ...,
    height_cm numeric,
    height_in numeric <span class=""emphasis""><strong>GENERATED ALWAYS AS (height_cm / 2.54) STORED</strong></span>
);
</pre>
 <p>
  The keyword
  <code class=""literal"">
   STORED
  </code>
  must be specified to choose the stored kind of generated column. See
  <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
   <span class=""refentrytitle"">
    CREATE TABLE
   </span>
  </a>
  for more details.
 </p>
 <p>
  A generated column cannot be written to directly. In
  <code class=""command"">
   INSERT
  </code>
  or
  <code class=""command"">
   UPDATE
  </code>
  commands, a value cannot be specified for a generated column, but the keyword
  <code class=""literal"">
   DEFAULT
  </code>
  may be specified.
 </p>
 <p>
  Consider the differences between a column with a default and a generated column. The column default is evaluated once when the row is first inserted if no other value was provided; a generated column is updated whenever the row changes and cannot be overridden. A column default may not refer to other columns of the table; a generation expression would normally do so. A column default can use volatile functions, for example
  <code class=""literal"">
   random()
  </code>
  or functions referring to the current time; this is not allowed for generated columns.
 </p>
 <p>
  Several restrictions apply to the definition of generated columns and tables involving generated columns:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     The generation expression can only use immutable functions and cannot use subqueries or reference anything other than the current row in any way.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A generation expression cannot reference another generated column.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A generation expression cannot reference a system column, except
     <code class=""varname"">
      tableoid
     </code>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A generated column cannot have a column default or an identity definition.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A generated column cannot be part of a partition key.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Foreign tables can have generated columns. See
     <a class=""xref"" href=""sql-createforeigntable.html"" title=""CREATE FOREIGN TABLE"">
      <span class=""refentrytitle"">
       CREATE FOREIGN TABLE
      </span>
     </a>
     for details.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     For inheritance and partitioning:
    </p>
    <div class=""itemizedlist"">
     <ul class=""itemizedlist"" style=""list-style-type: circle;"">
      <li class=""listitem"">
       <p>
        If a parent column is a generated column, its child column must also be a generated column; however, the child column can have a different generation expression. The generation expression that is actually applied during insert or update of a row is the one associated with the table that the row is physically in. (This is unlike the behavior for column defaults: for those, the default value associated with the table named in the query applies.)
       </p>
      </li>
      <li class=""listitem"">
       <p>
        If a parent column is not a generated column, its child column must not be generated either.
       </p>
      </li>
      <li class=""listitem"">
       <p>
        For inherited tables, if you write a child column definition without any
        <code class=""literal"">
         GENERATED
        </code>
        clause in
        <code class=""command"">
         CREATE TABLE ... INHERITS
        </code>
        , then its
        <code class=""literal"">
         GENERATED
        </code>
        clause will automatically be copied from the parent.
        <code class=""command"">
         ALTER TABLE ... INHERIT
        </code>
        will insist that parent and child columns already match as to generation status, but it will not require their generation expressions to match.
       </p>
      </li>
      <li class=""listitem"">
       <p>
        Similarly for partitioned tables, if you write a child column definition without any
        <code class=""literal"">
         GENERATED
        </code>
        clause in
        <code class=""command"">
         CREATE TABLE ... PARTITION OF
        </code>
        , then its
        <code class=""literal"">
         GENERATED
        </code>
        clause will automatically be copied from the parent.
        <code class=""command"">
         ALTER TABLE ... ATTACH PARTITION
        </code>
        will insist that parent and child columns already match as to generation status, but it will not require their generation expressions to match.
       </p>
      </li>
      <li class=""listitem"">
       <p>
        In case of multiple inheritance, if one parent column is a generated column, then all parent columns must be generated columns. If they do not all have the same generation expression, then the desired expression for the child must be specified explicitly.
       </p>
      </li>
     </ul>
    </div>
   </li>
  </ul>
 </div>
 <p>
  Additional considerations apply to the use of generated columns.
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Generated columns maintain access privileges separately from their underlying base columns. So, it is possible to arrange it so that a particular role can read from a generated column but not from the underlying base columns.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Generated columns are, conceptually, updated after
     <code class=""literal"">
      BEFORE
     </code>
     triggers have run. Therefore, changes made to base columns in a
     <code class=""literal"">
      BEFORE
     </code>
     trigger will be reflected in generated columns. But conversely, it is not allowed to access generated columns in
     <code class=""literal"">
      BEFORE
     </code>
     triggers.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Generated columns are skipped for logical replication and cannot be specified in a
     <code class=""command"">
      CREATE PUBLICATION
     </code>
     column list.
    </p>
   </li>
  </ul>
 </div>
</div>
"
5. Data Definition,5.5. Constraints,https://www.postgresql.org/docs/17/ddl-constraints.html,"<div class=""sect1"" id=""DDL-CONSTRAINTS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.5. Constraints
     <a class=""id_link"" href=""#DDL-CONSTRAINTS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-CHECK-CONSTRAINTS"">
      5.5.1. Check Constraints
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-NOT-NULL"">
      5.5.2. Not-Null Constraints
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS"">
      5.5.3. Unique Constraints
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-PRIMARY-KEYS"">
      5.5.4. Primary Keys
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-FK"">
      5.5.5. Foreign Keys
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-constraints.html#DDL-CONSTRAINTS-EXCLUSION"">
      5.5.6. Exclusion Constraints
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.7.2"" name=""id-1.5.4.7.2"">
 </a>
 <p>
  Data types are a way to limit the kind of data that can be stored in a table. For many applications, however, the constraint they provide is too coarse. For example, a column containing a product price should probably only accept positive values. But there is no standard data type that accepts only positive numbers. Another issue is that you might want to constrain column data with respect to other columns or rows. For example, in a table containing product information, there should be only one row for each product number.
 </p>
 <p>
  To that end, SQL allows you to define constraints on columns and tables. Constraints give you as much control over the data in your tables as you wish. If a user attempts to store data in a column that would violate a constraint, an error is raised. This applies even if the value came from the default value definition.
 </p>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-CHECK-CONSTRAINTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.1. Check Constraints
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-CHECK-CONSTRAINTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.5.2"" name=""id-1.5.4.7.5.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.5.3"" name=""id-1.5.4.7.5.3"">
  </a>
  <p>
   A check constraint is the most generic constraint type. It allows you to specify that the value in a certain column must satisfy a Boolean (truth-value) expression. For instance, to require positive product prices, you could use:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <span class=""emphasis""><strong>CHECK (price &gt; 0)</strong></span>
);
</pre>
  <p>
   As you see, the constraint definition comes after the data type, just like default value definitions. Default values and constraints can be listed in any order. A check constraint consists of the key word
   <code class=""literal"">
    CHECK
   </code>
   followed by an expression in parentheses. The check constraint expression should involve the column thus constrained, otherwise the constraint would not make too much sense.
  </p>
  <a class=""indexterm"" id=""id-1.5.4.7.5.6"" name=""id-1.5.4.7.5.6"">
  </a>
  <p>
   You can also give the constraint a separate name. This clarifies error messages and allows you to refer to the constraint when you need to change it. The syntax is:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <span class=""emphasis""><strong>CONSTRAINT positive_price</strong></span> CHECK (price &gt; 0)
);
</pre>
  <p>
   So, to specify a named constraint, use the key word
   <code class=""literal"">
    CONSTRAINT
   </code>
   followed by an identifier followed by the constraint definition. (If you don't specify a constraint name in this way, the system chooses a name for you.)
  </p>
  <p>
   A check constraint can also refer to several columns. Say you store a regular price and a discounted price, and you want to ensure that the discounted price is lower than the regular price:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric CHECK (price &gt; 0),
    discounted_price numeric CHECK (discounted_price &gt; 0),
    <span class=""emphasis""><strong>CHECK (price &gt; discounted_price)</strong></span>
);
</pre>
  <p>
   The first two constraints should look familiar. The third one uses a new syntax. It is not attached to a particular column, instead it appears as a separate item in the comma-separated column list. Column definitions and these constraint definitions can be listed in mixed order.
  </p>
  <p>
   We say that the first two constraints are column constraints, whereas the third one is a table constraint because it is written separately from any one column definition. Column constraints can also be written as table constraints, while the reverse is not necessarily possible, since a column constraint is supposed to refer to only the column it is attached to. (
   <span class=""productname"">
    PostgreSQL
   </span>
   doesn't enforce that rule, but you should follow it if you want your table definitions to work with other database systems.) The above example could also be written as:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0),
    CHECK (price &gt; discounted_price)
);
</pre>
  <p>
   or even:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0 AND price &gt; discounted_price)
);
</pre>
  <p>
   It's a matter of taste.
  </p>
  <p>
   Names can be assigned to table constraints in the same way as column constraints:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0),
    <span class=""emphasis""><strong>CONSTRAINT valid_discount</strong></span> CHECK (price &gt; discounted_price)
);
</pre>
  <a class=""indexterm"" id=""id-1.5.4.7.5.12"" name=""id-1.5.4.7.5.12"">
  </a>
  <p>
   It should be noted that a check constraint is satisfied if the check expression evaluates to true or the null value. Since most expressions will evaluate to the null value if any operand is null, they will not prevent null values in the constrained columns. To ensure that a column does not contain null values, the not-null constraint described in the next section can be used.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    does not support
    <code class=""literal"">
     CHECK
    </code>
    constraints that reference table data other than the new or updated row being checked. While a
    <code class=""literal"">
     CHECK
    </code>
    constraint that violates this rule may appear to work in simple tests, it cannot guarantee that the database will not reach a state in which the constraint condition is false (due to subsequent changes of the other row(s) involved). This would cause a database dump and restore to fail. The restore could fail even when the complete database state is consistent with the constraint, due to rows not being loaded in an order that will satisfy the constraint. If possible, use
    <code class=""literal"">
     UNIQUE
    </code>
    ,
    <code class=""literal"">
     EXCLUDE
    </code>
    , or
    <code class=""literal"">
     FOREIGN KEY
    </code>
    constraints to express cross-row and cross-table restrictions.
   </p>
   <p>
    If what you desire is a one-time check against other rows at row insertion, rather than a continuously-maintained consistency guarantee, a custom
    <a class=""link"" href=""triggers.html"" title=""Chapter 37. Triggers"">
     trigger
    </a>
    can be used to implement that. (This approach avoids the dump/restore problem because
    <span class=""application"">
     pg_dump
    </span>
    does not reinstall triggers until after restoring data, so that the check will not be enforced during a dump/restore.)
   </p>
  </div>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    assumes that
    <code class=""literal"">
     CHECK
    </code>
    constraints' conditions are immutable, that is, they will always give the same result for the same input row. This assumption is what justifies examining
    <code class=""literal"">
     CHECK
    </code>
    constraints only when rows are inserted or updated, and not at other times. (The warning above about not referencing other table data is really a special case of this restriction.)
   </p>
   <p>
    An example of a common way to break this assumption is to reference a user-defined function in a
    <code class=""literal"">
     CHECK
    </code>
    expression, and then change the behavior of that function.
    <span class=""productname"">
     PostgreSQL
    </span>
    does not disallow that, but it will not notice if there are rows in the table that now violate the
    <code class=""literal"">
     CHECK
    </code>
    constraint. That would cause a subsequent database dump and restore to fail. The recommended way to handle such a change is to drop the constraint (using
    <code class=""command"">
     ALTER TABLE
    </code>
    ), adjust the function definition, and re-add the constraint, thereby rechecking it against all table rows.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-NOT-NULL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.2. Not-Null Constraints
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-NOT-NULL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.6.2"" name=""id-1.5.4.7.6.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.6.3"" name=""id-1.5.4.7.6.3"">
  </a>
  <p>
   A not-null constraint simply specifies that a column must not assume the null value. A syntax example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer <span class=""emphasis""><strong>NOT NULL</strong></span>,
    name text <span class=""emphasis""><strong>NOT NULL</strong></span>,
    price numeric
);
</pre>
  <p>
   A not-null constraint is always written as a column constraint. A not-null constraint is functionally equivalent to creating a check constraint
   <code class=""literal"">
    CHECK (
    <em class=""replaceable"">
     <code>
      column_name
     </code>
    </em>
    IS NOT NULL)
   </code>
   , but in
   <span class=""productname"">
    PostgreSQL
   </span>
   creating an explicit not-null constraint is more efficient. The drawback is that you cannot give explicit names to not-null constraints created this way.
  </p>
  <p>
   Of course, a column can have more than one constraint. Just write the constraints one after another:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer NOT NULL,
    name text NOT NULL,
    price numeric NOT NULL CHECK (price &gt; 0)
);
</pre>
  <p>
   The order doesn't matter. It does not necessarily determine in which order the constraints are checked.
  </p>
  <p>
   The
   <code class=""literal"">
    NOT NULL
   </code>
   constraint has an inverse: the
   <code class=""literal"">
    NULL
   </code>
   constraint. This does not mean that the column must be null, which would surely be useless. Instead, this simply selects the default behavior that the column might be null. The
   <code class=""literal"">
    NULL
   </code>
   constraint is not present in the SQL standard and should not be used in portable applications. (It was only added to
   <span class=""productname"">
    PostgreSQL
   </span>
   to be compatible with some other database systems.) Some users, however, like it because it makes it easy to toggle the constraint in a script file. For example, you could start with:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer NULL,
    name text NULL,
    price numeric NULL
);
</pre>
  <p>
   and then insert the
   <code class=""literal"">
    NOT
   </code>
   key word where desired.
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    In most database designs the majority of columns should be marked not null.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.3. Unique Constraints
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.7.2"" name=""id-1.5.4.7.7.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.7.3"" name=""id-1.5.4.7.7.3"">
  </a>
  <p>
   Unique constraints ensure that the data contained in a column, or a group of columns, is unique among all the rows in the table. The syntax is:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer <span class=""emphasis""><strong>UNIQUE</strong></span>,
    name text,
    price numeric
);
</pre>
  <p>
   when written as a column constraint, and:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    <span class=""emphasis""><strong>UNIQUE (product_no)</strong></span>
);
</pre>
  <p>
   when written as a table constraint.
  </p>
  <p>
   To define a unique constraint for a group of columns, write it as a table constraint with the column names separated by commas:
  </p>
  <pre class=""programlisting"">
CREATE TABLE example (
    a integer,
    b integer,
    c integer,
    <span class=""emphasis""><strong>UNIQUE (a, c)</strong></span>
);
</pre>
  <p>
   This specifies that the combination of values in the indicated columns is unique across the whole table, though any one of the columns need not be (and ordinarily isn't) unique.
  </p>
  <p>
   You can assign your own name for a unique constraint, in the usual way:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer <span class=""emphasis""><strong>CONSTRAINT must_be_different</strong></span> UNIQUE,
    name text,
    price numeric
);
</pre>
  <p>
   Adding a unique constraint will automatically create a unique B-tree index on the column or group of columns listed in the constraint. A uniqueness restriction covering only some rows cannot be written as a unique constraint, but it is possible to enforce such a restriction by creating a unique
   <a class=""link"" href=""indexes-partial.html"" title=""11.8. Partial Indexes"">
    partial index
   </a>
   .
  </p>
  <a class=""indexterm"" id=""id-1.5.4.7.7.8"" name=""id-1.5.4.7.7.8"">
  </a>
  <p>
   In general, a unique constraint is violated if there is more than one row in the table where the values of all of the columns included in the constraint are equal. By default, two null values are not considered equal in this comparison. That means even in the presence of a unique constraint it is possible to store duplicate rows that contain a null value in at least one of the constrained columns. This behavior can be changed by adding the clause
   <code class=""literal"">
    NULLS NOT DISTINCT
   </code>
   , like
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer UNIQUE <span class=""emphasis""><strong>NULLS NOT DISTINCT</strong></span>,
    name text,
    price numeric
);
</pre>
  <p>
   or
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    UNIQUE <span class=""emphasis""><strong>NULLS NOT DISTINCT</strong></span> (product_no)
);
</pre>
  <p>
   The default behavior can be specified explicitly using
   <code class=""literal"">
    NULLS DISTINCT
   </code>
   . The default null treatment in unique constraints is implementation-defined according to the SQL standard, and other implementations have a different behavior. So be careful when developing applications that are intended to be portable.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-PRIMARY-KEYS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.4. Primary Keys
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-PRIMARY-KEYS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.8.2"" name=""id-1.5.4.7.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.8.3"" name=""id-1.5.4.7.8.3"">
  </a>
  <p>
   A primary key constraint indicates that a column, or group of columns, can be used as a unique identifier for rows in the table. This requires that the values be both unique and not null. So, the following two table definitions accept the same data:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer UNIQUE NOT NULL,
    name text,
    price numeric
);
</pre>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer <span class=""emphasis""><strong>PRIMARY KEY</strong></span>,
    name text,
    price numeric
);
</pre>
  <p>
   Primary keys can span more than one column; the syntax is similar to unique constraints:
  </p>
  <pre class=""programlisting"">
CREATE TABLE example (
    a integer,
    b integer,
    c integer,
    <span class=""emphasis""><strong>PRIMARY KEY (a, c)</strong></span>
);
</pre>
  <p>
   Adding a primary key will automatically create a unique B-tree index on the column or group of columns listed in the primary key, and will force the column(s) to be marked
   <code class=""literal"">
    NOT NULL
   </code>
   .
  </p>
  <p>
   A table can have at most one primary key. (There can be any number of unique and not-null constraints, which are functionally almost the same thing, but only one can be identified as the primary key.) Relational database theory dictates that every table must have a primary key. This rule is not enforced by
   <span class=""productname"">
    PostgreSQL
   </span>
   , but it is usually best to follow it.
  </p>
  <p>
   Primary keys are useful both for documentation purposes and for client applications. For example, a GUI application that allows modifying row values probably needs to know the primary key of a table to be able to identify rows uniquely. There are also various ways in which the database system makes use of a primary key if one has been declared; for example, the primary key defines the default target column(s) for foreign keys referencing its table.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-FK"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.5. Foreign Keys
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-FK"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.9.2"" name=""id-1.5.4.7.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.9.3"" name=""id-1.5.4.7.9.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.9.4"" name=""id-1.5.4.7.9.4"">
  </a>
  <p>
   A foreign key constraint specifies that the values in a column (or a group of columns) must match the values appearing in some row of another table. We say this maintains the
   <em class=""firstterm"">
    referential integrity
   </em>
   between two related tables.
  </p>
  <p>
   Say you have the product table that we have used several times already:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);
</pre>
  <p>
   Let's also assume you have a table storing orders of those products. We want to ensure that the orders table only contains orders of products that actually exist. So we define a foreign key constraint in the orders table that references the products table:
  </p>
  <pre class=""programlisting"">
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer <span class=""emphasis""><strong>REFERENCES products (product_no)</strong></span>,
    quantity integer
);
</pre>
  <p>
   Now it is impossible to create orders with non-NULL
   <code class=""structfield"">
    product_no
   </code>
   entries that do not appear in the products table.
  </p>
  <p>
   We say that in this situation the orders table is the
   <em class=""firstterm"">
    referencing
   </em>
   table and the products table is the
   <em class=""firstterm"">
    referenced
   </em>
   table. Similarly, there are referencing and referenced columns.
  </p>
  <p>
   You can also shorten the above command to:
  </p>
  <pre class=""programlisting"">
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer <span class=""emphasis""><strong>REFERENCES products</strong></span>,
    quantity integer
);
</pre>
  <p>
   because in absence of a column list the primary key of the referenced table is used as the referenced column(s).
  </p>
  <p>
   You can assign your own name for a foreign key constraint, in the usual way.
  </p>
  <p>
   A foreign key can also constrain and reference a group of columns. As usual, it then needs to be written in table constraint form. Here is a contrived syntax example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE t1 (
  a integer PRIMARY KEY,
  b integer,
  c integer,
  <span class=""emphasis""><strong>FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)</strong></span>
);
</pre>
  <p>
   Of course, the number and type of the constrained columns need to match the number and type of the referenced columns.
  </p>
  <a class=""indexterm"" id=""id-1.5.4.7.9.11"" name=""id-1.5.4.7.9.11"">
  </a>
  <p>
   Sometimes it is useful for the
   <span class=""quote"">
    “
    <span class=""quote"">
     other table
    </span>
    ”
   </span>
   of a foreign key constraint to be the same table; this is called a
   <em class=""firstterm"">
    self-referential
   </em>
   foreign key. For example, if you want rows of a table to represent nodes of a tree structure, you could write
  </p>
  <pre class=""programlisting"">
CREATE TABLE tree (
    node_id integer PRIMARY KEY,
    parent_id integer REFERENCES tree,
    name text,
    ...
);
</pre>
  <p>
   A top-level node would have NULL
   <code class=""structfield"">
    parent_id
   </code>
   , while non-NULL
   <code class=""structfield"">
    parent_id
   </code>
   entries would be constrained to reference valid rows of the table.
  </p>
  <p>
   A table can have more than one foreign key constraint. This is used to implement many-to-many relationships between tables. Say you have tables about products and orders, but now you want to allow one order to contain possibly many products (which the structure above did not allow). You could use this table structure:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    shipping_address text,
    ...
);

CREATE TABLE order_items (
    product_no integer REFERENCES products,
    order_id integer REFERENCES orders,
    quantity integer,
    PRIMARY KEY (product_no, order_id)
);
</pre>
  <p>
   Notice that the primary key overlaps with the foreign keys in the last table.
  </p>
  <a class=""indexterm"" id=""id-1.5.4.7.9.14"" name=""id-1.5.4.7.9.14"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.9.15"" name=""id-1.5.4.7.9.15"">
  </a>
  <p>
   We know that the foreign keys disallow creation of orders that do not relate to any products. But what if a product is removed after an order is created that references it? SQL allows you to handle that as well. Intuitively, we have a few options:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Disallow deleting a referenced product
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Delete the orders as well
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Something else?
     </p>
    </li>
   </ul>
  </div>
  <p>
   To illustrate this, let's implement the following policy on the many-to-many relationship example above: when someone wants to remove a product that is still referenced by an order (via
   <code class=""literal"">
    order_items
   </code>
   ), we disallow it. If someone removes an order, the order items are removed as well:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    shipping_address text,
    ...
);

CREATE TABLE order_items (
    product_no integer REFERENCES products <span class=""emphasis""><strong>ON DELETE RESTRICT</strong></span>,
    order_id integer REFERENCES orders <span class=""emphasis""><strong>ON DELETE CASCADE</strong></span>,
    quantity integer,
    PRIMARY KEY (product_no, order_id)
);
</pre>
  <p>
   Restricting and cascading deletes are the two most common options.
   <code class=""literal"">
    RESTRICT
   </code>
   prevents deletion of a referenced row.
   <code class=""literal"">
    NO ACTION
   </code>
   means that if any referencing rows still exist when the constraint is checked, an error is raised; this is the default behavior if you do not specify anything. (The essential difference between these two choices is that
   <code class=""literal"">
    NO ACTION
   </code>
   allows the check to be deferred until later in the transaction, whereas
   <code class=""literal"">
    RESTRICT
   </code>
   does not.)
   <code class=""literal"">
    CASCADE
   </code>
   specifies that when a referenced row is deleted, row(s) referencing it should be automatically deleted as well. There are two other options:
   <code class=""literal"">
    SET NULL
   </code>
   and
   <code class=""literal"">
    SET DEFAULT
   </code>
   . These cause the referencing column(s) in the referencing row(s) to be set to nulls or their default values, respectively, when the referenced row is deleted. Note that these do not excuse you from observing any constraints. For example, if an action specifies
   <code class=""literal"">
    SET DEFAULT
   </code>
   but the default value would not satisfy the foreign key constraint, the operation will fail.
  </p>
  <p>
   The appropriate choice of
   <code class=""literal"">
    ON DELETE
   </code>
   action depends on what kinds of objects the related tables represent. When the referencing table represents something that is a component of what is represented by the referenced table and cannot exist independently, then
   <code class=""literal"">
    CASCADE
   </code>
   could be appropriate. If the two tables represent independent objects, then
   <code class=""literal"">
    RESTRICT
   </code>
   or
   <code class=""literal"">
    NO ACTION
   </code>
   is more appropriate; an application that actually wants to delete both objects would then have to be explicit about this and run two delete commands. In the above example, order items are part of an order, and it is convenient if they are deleted automatically if an order is deleted. But products and orders are different things, and so making a deletion of a product automatically cause the deletion of some order items could be considered problematic. The actions
   <code class=""literal"">
    SET NULL
   </code>
   or
   <code class=""literal"">
    SET DEFAULT
   </code>
   can be appropriate if a foreign-key relationship represents optional information. For example, if the products table contained a reference to a product manager, and the product manager entry gets deleted, then setting the product's product manager to null or a default might be useful.
  </p>
  <p>
   The actions
   <code class=""literal"">
    SET NULL
   </code>
   and
   <code class=""literal"">
    SET DEFAULT
   </code>
   can take a column list to specify which columns to set. Normally, all columns of the foreign-key constraint are set; setting only a subset is useful in some special cases. Consider the following example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE tenants (
    tenant_id integer PRIMARY KEY
);

CREATE TABLE users (
    tenant_id integer REFERENCES tenants ON DELETE CASCADE,
    user_id integer NOT NULL,
    PRIMARY KEY (tenant_id, user_id)
);

CREATE TABLE posts (
    tenant_id integer REFERENCES tenants ON DELETE CASCADE,
    post_id integer NOT NULL,
    author_id integer,
    PRIMARY KEY (tenant_id, post_id),
    FOREIGN KEY (tenant_id, author_id) REFERENCES users ON DELETE SET NULL <span class=""emphasis""><strong>(author_id)</strong></span>
);
</pre>
  <p>
   Without the specification of the column, the foreign key would also set the column
   <code class=""literal"">
    tenant_id
   </code>
   to null, but that column is still required as part of the primary key.
  </p>
  <p>
   Analogous to
   <code class=""literal"">
    ON DELETE
   </code>
   there is also
   <code class=""literal"">
    ON UPDATE
   </code>
   which is invoked when a referenced column is changed (updated). The possible actions are the same, except that column lists cannot be specified for
   <code class=""literal"">
    SET NULL
   </code>
   and
   <code class=""literal"">
    SET DEFAULT
   </code>
   . In this case,
   <code class=""literal"">
    CASCADE
   </code>
   means that the updated values of the referenced column(s) should be copied into the referencing row(s).
  </p>
  <p>
   Normally, a referencing row need not satisfy the foreign key constraint if any of its referencing columns are null. If
   <code class=""literal"">
    MATCH FULL
   </code>
   is added to the foreign key declaration, a referencing row escapes satisfying the constraint only if all its referencing columns are null (so a mix of null and non-null values is guaranteed to fail a
   <code class=""literal"">
    MATCH FULL
   </code>
   constraint). If you don't want referencing rows to be able to avoid satisfying the foreign key constraint, declare the referencing column(s) as
   <code class=""literal"">
    NOT NULL
   </code>
   .
  </p>
  <p>
   A foreign key must reference columns that either are a primary key or form a unique constraint, or are columns from a non-partial unique index. This means that the referenced columns always have an index to allow efficient lookups on whether a referencing row has a match. Since a
   <code class=""command"">
    DELETE
   </code>
   of a row from the referenced table or an
   <code class=""command"">
    UPDATE
   </code>
   of a referenced column will require a scan of the referencing table for rows matching the old value, it is often a good idea to index the referencing columns too. Because this is not always needed, and there are many choices available on how to index, the declaration of a foreign key constraint does not automatically create an index on the referencing columns.
  </p>
  <p>
   More information about updating and deleting data is in
   <a class=""xref"" href=""dml.html"" title=""Chapter 6. Data Manipulation"">
    Chapter 6
   </a>
   . Also see the description of foreign key constraint syntax in the reference documentation for
   <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
    <span class=""refentrytitle"">
     CREATE TABLE
    </span>
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""DDL-CONSTRAINTS-EXCLUSION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.5.6. Exclusion Constraints
      <a class=""id_link"" href=""#DDL-CONSTRAINTS-EXCLUSION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.7.10.2"" name=""id-1.5.4.7.10.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.7.10.3"" name=""id-1.5.4.7.10.3"">
  </a>
  <p>
   Exclusion constraints ensure that if any two rows are compared on the specified columns or expressions using the specified operators, at least one of these operator comparisons will return false or null. The syntax is:
  </p>
  <pre class=""programlisting"">
CREATE TABLE circles (
    c circle,
    EXCLUDE USING gist (c WITH &amp;&amp;)
);
</pre>
  <p>
   See also
   <a class=""link"" href=""sql-createtable.html#SQL-CREATETABLE-EXCLUDE"">
    <code class=""command"">
     CREATE TABLE ... CONSTRAINT ... EXCLUDE
    </code>
   </a>
   for details.
  </p>
  <p>
   Adding an exclusion constraint will automatically create an index of the type specified in the constraint declaration.
  </p>
 </div>
</div>
"
5. Data Definition,5.6. System Columns,https://www.postgresql.org/docs/17/ddl-system-columns.html,"<div class=""sect1"" id=""DDL-SYSTEM-COLUMNS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.6. System Columns
     <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Every table has several
  <em class=""firstterm"">
   system columns
  </em>
  that are implicitly defined by the system. Therefore, these names cannot be used as names of user-defined columns. (Note that these restrictions are separate from whether the name is a key word or not; quoting a name will not allow you to escape these restrictions.) You do not really need to be concerned about these columns; just know they exist.
 </p>
 <a class=""indexterm"" id=""id-1.5.4.8.3"" name=""id-1.5.4.8.3"">
 </a>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt id=""DDL-SYSTEM-COLUMNS-TABLEOID"">
    <span class=""term"">
     <code class=""structfield"">
      tableoid
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-TABLEOID"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.1.2.1"" name=""id-1.5.4.8.4.1.2.1"">
    </a>
    <p>
     The OID of the table containing this row. This column is particularly handy for queries that select from partitioned tables (see
     <a class=""xref"" href=""ddl-partitioning.html"" title=""5.12. Table Partitioning"">
      Section 5.12
     </a>
     ) or inheritance hierarchies (see
     <a class=""xref"" href=""ddl-inherit.html"" title=""5.11. Inheritance"">
      Section 5.11
     </a>
     ), since without it, it's difficult to tell which individual table a row came from. The
     <code class=""structfield"">
      tableoid
     </code>
     can be joined against the
     <code class=""structfield"">
      oid
     </code>
     column of
     <code class=""structname"">
      pg_class
     </code>
     to obtain the table name.
    </p>
   </dd>
   <dt id=""DDL-SYSTEM-COLUMNS-XMIN"">
    <span class=""term"">
     <code class=""structfield"">
      xmin
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-XMIN"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.2.2.1"" name=""id-1.5.4.8.4.2.2.1"">
    </a>
    <p>
     The identity (transaction ID) of the inserting transaction for this row version. (A row version is an individual state of a row; each update of a row creates a new row version for the same logical row.)
    </p>
   </dd>
   <dt id=""DDL-SYSTEM-COLUMNS-CMIN"">
    <span class=""term"">
     <code class=""structfield"">
      cmin
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-CMIN"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.3.2.1"" name=""id-1.5.4.8.4.3.2.1"">
    </a>
    <p>
     The command identifier (starting at zero) within the inserting transaction.
    </p>
   </dd>
   <dt id=""DDL-SYSTEM-COLUMNS-XMAX"">
    <span class=""term"">
     <code class=""structfield"">
      xmax
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-XMAX"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.4.2.1"" name=""id-1.5.4.8.4.4.2.1"">
    </a>
    <p>
     The identity (transaction ID) of the deleting transaction, or zero for an undeleted row version. It is possible for this column to be nonzero in a visible row version. That usually indicates that the deleting transaction hasn't committed yet, or that an attempted deletion was rolled back.
    </p>
   </dd>
   <dt id=""DDL-SYSTEM-COLUMNS-CMAX"">
    <span class=""term"">
     <code class=""structfield"">
      cmax
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-CMAX"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.5.2.1"" name=""id-1.5.4.8.4.5.2.1"">
    </a>
    <p>
     The command identifier within the deleting transaction, or zero.
    </p>
   </dd>
   <dt id=""DDL-SYSTEM-COLUMNS-CTID"">
    <span class=""term"">
     <code class=""structfield"">
      ctid
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-SYSTEM-COLUMNS-CTID"">
     #
    </a>
   </dt>
   <dd>
    <a class=""indexterm"" id=""id-1.5.4.8.4.6.2.1"" name=""id-1.5.4.8.4.6.2.1"">
    </a>
    <p>
     The physical location of the row version within its table. Note that although the
     <code class=""structfield"">
      ctid
     </code>
     can be used to locate the row version very quickly, a row's
     <code class=""structfield"">
      ctid
     </code>
     will change if it is updated or moved by
     <code class=""command"">
      VACUUM FULL
     </code>
     . Therefore
     <code class=""structfield"">
      ctid
     </code>
     is useless as a long-term row identifier. A primary key should be used to identify logical rows.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  Transaction identifiers are also 32-bit quantities. In a long-lived database it is possible for transaction IDs to wrap around. This is not a fatal problem given appropriate maintenance procedures; see
  <a class=""xref"" href=""maintenance.html"" title=""Chapter 24. Routine Database Maintenance Tasks"">
   Chapter 24
  </a>
  for details. It is unwise, however, to depend on the uniqueness of transaction IDs over the long term (more than one billion transactions).
 </p>
 <p>
  Command identifiers are also 32-bit quantities. This creates a hard limit of 2
  <sup>
   32
  </sup>
  (4 billion)
  <acronym class=""acronym"">
   SQL
  </acronym>
  commands within a single transaction. In practice this limit is not a problem — note that the limit is on the number of
  <acronym class=""acronym"">
   SQL
  </acronym>
  commands, not the number of rows processed. Also, only commands that actually modify the database contents will consume a command identifier.
 </p>
</div>
"
5. Data Definition,5.7. Modifying Tables,https://www.postgresql.org/docs/17/ddl-alter.html,"<div class=""sect1"" id=""DDL-ALTER"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.7. Modifying Tables
     <a class=""id_link"" href=""#DDL-ALTER"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-ADDING-A-COLUMN"">
      5.7.1. Adding a Column
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-REMOVING-A-COLUMN"">
      5.7.2. Removing a Column
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-ADDING-A-CONSTRAINT"">
      5.7.3. Adding a Constraint
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-REMOVING-A-CONSTRAINT"">
      5.7.4. Removing a Constraint
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-COLUMN-DEFAULT"">
      5.7.5. Changing a Column's Default Value
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-COLUMN-TYPE"">
      5.7.6. Changing a Column's Data Type
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-RENAMING-COLUMN"">
      5.7.7. Renaming a Column
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-alter.html#DDL-ALTER-RENAMING-TABLE"">
      5.7.8. Renaming a Table
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.9.2"" name=""id-1.5.4.9.2"">
 </a>
 <p>
  When you create a table and you realize that you made a mistake, or the requirements of the application change, you can drop the table and create it again. But this is not a convenient option if the table is already filled with data, or if the table is referenced by other database objects (for instance a foreign key constraint). Therefore
  <span class=""productname"">
   PostgreSQL
  </span>
  provides a family of commands to make modifications to existing tables. Note that this is conceptually distinct from altering the data contained in the table: here we are interested in altering the definition, or structure, of the table.
 </p>
 <p>
  You can:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Add columns
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Remove columns
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Add constraints
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Remove constraints
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Change default values
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Change column data types
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Rename columns
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Rename tables
    </p>
   </li>
  </ul>
 </div>
 <p>
  All these actions are performed using the
  <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <span class=""refentrytitle"">
    ALTER TABLE
   </span>
  </a>
  command, whose reference page contains details beyond those given here.
 </p>
 <div class=""sect2"" id=""DDL-ALTER-ADDING-A-COLUMN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.1. Adding a Column
      <a class=""id_link"" href=""#DDL-ALTER-ADDING-A-COLUMN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.5.2"" name=""id-1.5.4.9.5.2"">
  </a>
  <p>
   To add a column, use a command like:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ADD COLUMN description text;
</pre>
  <p>
   The new column is initially filled with whatever default value is given (null if you don't specify a
   <code class=""literal"">
    DEFAULT
   </code>
   clause).
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    From
    <span class=""productname"">
     PostgreSQL
    </span>
    11, adding a column with a constant default value no longer means that each row of the table needs to be updated when the
    <code class=""command"">
     ALTER TABLE
    </code>
    statement is executed. Instead, the default value will be returned the next time the row is accessed, and applied when the table is rewritten, making the
    <code class=""command"">
     ALTER TABLE
    </code>
    very fast even on large tables.
   </p>
   <p>
    However, if the default value is volatile (e.g.,
    <code class=""function"">
     clock_timestamp()
    </code>
    ) each row will need to be updated with the value calculated at the time
    <code class=""command"">
     ALTER TABLE
    </code>
    is executed. To avoid a potentially lengthy update operation, particularly if you intend to fill the column with mostly nondefault values anyway, it may be preferable to add the column with no default, insert the correct values using
    <code class=""command"">
     UPDATE
    </code>
    , and then add any desired default as described below.
   </p>
  </div>
  <p>
   You can also define constraints on the column at the same time, using the usual syntax:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ADD COLUMN description text CHECK (description &lt;&gt; '');
</pre>
  <p>
   In fact all the options that can be applied to a column description in
   <code class=""command"">
    CREATE TABLE
   </code>
   can be used here. Keep in mind however that the default value must satisfy the given constraints, or the
   <code class=""literal"">
    ADD
   </code>
   will fail. Alternatively, you can add constraints later (see below) after you've filled in the new column correctly.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-REMOVING-A-COLUMN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.2. Removing a Column
      <a class=""id_link"" href=""#DDL-ALTER-REMOVING-A-COLUMN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.6.2"" name=""id-1.5.4.9.6.2"">
  </a>
  <p>
   To remove a column, use a command like:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products DROP COLUMN description;
</pre>
  <p>
   Whatever data was in the column disappears. Table constraints involving the column are dropped, too. However, if the column is referenced by a foreign key constraint of another table,
   <span class=""productname"">
    PostgreSQL
   </span>
   will not silently drop that constraint. You can authorize dropping everything that depends on the column by adding
   <code class=""literal"">
    CASCADE
   </code>
   :
  </p>
  <pre class=""programlisting"">
ALTER TABLE products DROP COLUMN description CASCADE;
</pre>
  <p>
   See
   <a class=""xref"" href=""ddl-depend.html"" title=""5.15. Dependency Tracking"">
    Section 5.15
   </a>
   for a description of the general mechanism behind this.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-ADDING-A-CONSTRAINT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.3. Adding a Constraint
      <a class=""id_link"" href=""#DDL-ALTER-ADDING-A-CONSTRAINT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.7.2"" name=""id-1.5.4.9.7.2"">
  </a>
  <p>
   To add a constraint, the table constraint syntax is used. For example:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ADD CHECK (name &lt;&gt; '');
ALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);
ALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;
</pre>
  <p>
   To add a not-null constraint, which cannot be written as a table constraint, use this syntax:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;
</pre>
  <p>
   The constraint will be checked immediately, so the table data must satisfy the constraint before it can be added.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-REMOVING-A-CONSTRAINT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.4. Removing a Constraint
      <a class=""id_link"" href=""#DDL-ALTER-REMOVING-A-CONSTRAINT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.8.2"" name=""id-1.5.4.9.8.2"">
  </a>
  <p>
   To remove a constraint you need to know its name. If you gave it a name then that's easy. Otherwise the system assigned a generated name, which you need to find out. The
   <span class=""application"">
    psql
   </span>
   command
   <code class=""literal"">
    \d
    <em class=""replaceable"">
     <code>
      tablename
     </code>
    </em>
   </code>
   can be helpful here; other interfaces might also provide a way to inspect table details. Then the command is:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products DROP CONSTRAINT some_name;
</pre>
  <p>
   (If you are dealing with a generated constraint name like
   <code class=""literal"">
    $2
   </code>
   , don't forget that you'll need to double-quote it to make it a valid identifier.)
  </p>
  <p>
   As with dropping a column, you need to add
   <code class=""literal"">
    CASCADE
   </code>
   if you want to drop a constraint that something else depends on. An example is that a foreign key constraint depends on a unique or primary key constraint on the referenced column(s).
  </p>
  <p>
   This works the same for all constraint types except not-null constraints. To drop a not-null constraint use:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ALTER COLUMN product_no DROP NOT NULL;
</pre>
  <p>
   (Recall that not-null constraints do not have names.)
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-COLUMN-DEFAULT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.5. Changing a Column's Default Value
      <a class=""id_link"" href=""#DDL-ALTER-COLUMN-DEFAULT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.9.2"" name=""id-1.5.4.9.9.2"">
  </a>
  <p>
   To set a new default for a column, use a command like:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;
</pre>
  <p>
   Note that this doesn't affect any existing rows in the table, it just changes the default for future
   <code class=""command"">
    INSERT
   </code>
   commands.
  </p>
  <p>
   To remove any default value, use:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ALTER COLUMN price DROP DEFAULT;
</pre>
  <p>
   This is effectively the same as setting the default to null. As a consequence, it is not an error to drop a default where one hadn't been defined, because the default is implicitly the null value.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-COLUMN-TYPE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.6. Changing a Column's Data Type
      <a class=""id_link"" href=""#DDL-ALTER-COLUMN-TYPE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.10.2"" name=""id-1.5.4.9.10.2"">
  </a>
  <p>
   To convert a column to a different data type, use a command like:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);
</pre>
  <p>
   This will succeed only if each existing entry in the column can be converted to the new type by an implicit cast. If a more complex conversion is needed, you can add a
   <code class=""literal"">
    USING
   </code>
   clause that specifies how to compute the new values from the old.
  </p>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   will attempt to convert the column's default value (if any) to the new type, as well as any constraints that involve the column. But these conversions might fail, or might produce surprising results. It's often best to drop any constraints on the column before altering its type, and then add back suitably modified constraints afterwards.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-RENAMING-COLUMN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.7. Renaming a Column
      <a class=""id_link"" href=""#DDL-ALTER-RENAMING-COLUMN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.11.2"" name=""id-1.5.4.9.11.2"">
  </a>
  <p>
   To rename a column:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products RENAME COLUMN product_no TO product_number;
</pre>
 </div>
 <div class=""sect2"" id=""DDL-ALTER-RENAMING-TABLE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.7.8. Renaming a Table
      <a class=""id_link"" href=""#DDL-ALTER-RENAMING-TABLE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.9.12.2"" name=""id-1.5.4.9.12.2"">
  </a>
  <p>
   To rename a table:
  </p>
  <pre class=""programlisting"">
ALTER TABLE products RENAME TO items;
</pre>
 </div>
</div>
"
5. Data Definition,5.8. Privileges,https://www.postgresql.org/docs/17/ddl-priv.html,"<div class=""sect1"" id=""DDL-PRIV"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.8. Privileges
     <a class=""id_link"" href=""#DDL-PRIV"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.10.2"" name=""id-1.5.4.10.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.3"" name=""id-1.5.4.10.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.4"" name=""id-1.5.4.10.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.5"" name=""id-1.5.4.10.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.6"" name=""id-1.5.4.10.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.7"" name=""id-1.5.4.10.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.10.8"" name=""id-1.5.4.10.8"">
 </a>
 <p>
  When an object is created, it is assigned an owner. The owner is normally the role that executed the creation statement. For most kinds of objects, the initial state is that only the owner (or a superuser) can do anything with the object. To allow other roles to use it,
  <em class=""firstterm"">
   privileges
  </em>
  must be granted.
 </p>
 <p>
  There are different kinds of privileges:
  <code class=""literal"">
   SELECT
  </code>
  ,
  <code class=""literal"">
   INSERT
  </code>
  ,
  <code class=""literal"">
   UPDATE
  </code>
  ,
  <code class=""literal"">
   DELETE
  </code>
  ,
  <code class=""literal"">
   TRUNCATE
  </code>
  ,
  <code class=""literal"">
   REFERENCES
  </code>
  ,
  <code class=""literal"">
   TRIGGER
  </code>
  ,
  <code class=""literal"">
   CREATE
  </code>
  ,
  <code class=""literal"">
   CONNECT
  </code>
  ,
  <code class=""literal"">
   TEMPORARY
  </code>
  ,
  <code class=""literal"">
   EXECUTE
  </code>
  ,
  <code class=""literal"">
   USAGE
  </code>
  ,
  <code class=""literal"">
   SET
  </code>
  ,
  <code class=""literal"">
   ALTER SYSTEM
  </code>
  , and
  <code class=""literal"">
   MAINTAIN
  </code>
  . The privileges applicable to a particular object vary depending on the object's type (table, function, etc.). More detail about the meanings of these privileges appears below. The following sections and chapters will also show you how these privileges are used.
 </p>
 <p>
  The right to modify or destroy an object is inherent in being the object's owner, and cannot be granted or revoked in itself. (However, like all privileges, that right can be inherited by members of the owning role; see
  <a class=""xref"" href=""role-membership.html"" title=""21.3. Role Membership"">
   Section 21.3
  </a>
  .)
 </p>
 <p>
  An object can be assigned to a new owner with an
  <code class=""command"">
   ALTER
  </code>
  command of the appropriate kind for the object, for example
 </p>
 <pre class=""programlisting"">
ALTER TABLE <em class=""replaceable""><code>table_name</code></em> OWNER TO <em class=""replaceable""><code>new_owner</code></em>;
</pre>
 <p>
  Superusers can always do this; ordinary roles can only do it if they are both the current owner of the object (or inherit the privileges of the owning role) and able to
  <code class=""literal"">
   SET ROLE
  </code>
  to the new owning role.
 </p>
 <p>
  To assign privileges, the
  <a class=""xref"" href=""sql-grant.html"" title=""GRANT"">
   <span class=""refentrytitle"">
    GRANT
   </span>
  </a>
  command is used. For example, if
  <code class=""literal"">
   joe
  </code>
  is an existing role, and
  <code class=""literal"">
   accounts
  </code>
  is an existing table, the privilege to update the table can be granted with:
 </p>
 <pre class=""programlisting"">
GRANT UPDATE ON accounts TO joe;
</pre>
 <p>
  Writing
  <code class=""literal"">
   ALL
  </code>
  in place of a specific privilege grants all privileges that are relevant for the object type.
 </p>
 <p>
  The special
  <span class=""quote"">
   “
   <span class=""quote"">
    role
   </span>
   ”
  </span>
  name
  <code class=""literal"">
   PUBLIC
  </code>
  can be used to grant a privilege to every role on the system. Also,
  <span class=""quote"">
   “
   <span class=""quote"">
    group
   </span>
   ”
  </span>
  roles can be set up to help manage privileges when there are many users of a database — for details see
  <a class=""xref"" href=""user-manag.html"" title=""Chapter 21. Database Roles"">
   Chapter 21
  </a>
  .
 </p>
 <p>
  To revoke a previously-granted privilege, use the fittingly named
  <a class=""xref"" href=""sql-revoke.html"" title=""REVOKE"">
   <span class=""refentrytitle"">
    REVOKE
   </span>
  </a>
  command:
 </p>
 <pre class=""programlisting"">
REVOKE ALL ON accounts FROM PUBLIC;
</pre>
 <p>
  Ordinarily, only the object's owner (or a superuser) can grant or revoke privileges on an object. However, it is possible to grant a privilege
  <span class=""quote"">
   “
   <span class=""quote"">
    with grant option
   </span>
   ”
  </span>
  , which gives the recipient the right to grant it in turn to others. If the grant option is subsequently revoked then all who received the privilege from that recipient (directly or through a chain of grants) will lose the privilege. For details see the
  <a class=""xref"" href=""sql-grant.html"" title=""GRANT"">
   <span class=""refentrytitle"">
    GRANT
   </span>
  </a>
  and
  <a class=""xref"" href=""sql-revoke.html"" title=""REVOKE"">
   <span class=""refentrytitle"">
    REVOKE
   </span>
  </a>
  reference pages.
 </p>
 <p>
  An object's owner can choose to revoke their own ordinary privileges, for example to make a table read-only for themselves as well as others. But owners are always treated as holding all grant options, so they can always re-grant their own privileges.
 </p>
 <p>
  The available privileges are:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt id=""DDL-PRIV-SELECT"">
    <span class=""term"">
     <code class=""literal"">
      SELECT
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-SELECT"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      SELECT
     </code>
     from any column, or specific column(s), of a table, view, materialized view, or other table-like object. Also allows use of
     <code class=""command"">
      COPY TO
     </code>
     . This privilege is also needed to reference existing column values in
     <code class=""command"">
      UPDATE
     </code>
     ,
     <code class=""command"">
      DELETE
     </code>
     , or
     <code class=""command"">
      MERGE
     </code>
     . For sequences, this privilege also allows use of the
     <code class=""function"">
      currval
     </code>
     function. For large objects, this privilege allows the object to be read.
    </p>
   </dd>
   <dt id=""DDL-PRIV-INSERT"">
    <span class=""term"">
     <code class=""literal"">
      INSERT
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-INSERT"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      INSERT
     </code>
     of a new row into a table, view, etc. Can be granted on specific column(s), in which case only those columns may be assigned to in the
     <code class=""command"">
      INSERT
     </code>
     command (other columns will therefore receive default values). Also allows use of
     <code class=""command"">
      COPY FROM
     </code>
     .
    </p>
   </dd>
   <dt id=""DDL-PRIV-UPDATE"">
    <span class=""term"">
     <code class=""literal"">
      UPDATE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-UPDATE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      UPDATE
     </code>
     of any column, or specific column(s), of a table, view, etc. (In practice, any nontrivial
     <code class=""command"">
      UPDATE
     </code>
     command will require
     <code class=""literal"">
      SELECT
     </code>
     privilege as well, since it must reference table columns to determine which rows to update, and/or to compute new values for columns.)
     <code class=""literal"">
      SELECT ... FOR UPDATE
     </code>
     and
     <code class=""literal"">
      SELECT ... FOR SHARE
     </code>
     also require this privilege on at least one column, in addition to the
     <code class=""literal"">
      SELECT
     </code>
     privilege. For sequences, this privilege allows use of the
     <code class=""function"">
      nextval
     </code>
     and
     <code class=""function"">
      setval
     </code>
     functions. For large objects, this privilege allows writing or truncating the object.
    </p>
   </dd>
   <dt id=""DDL-PRIV-DELETE"">
    <span class=""term"">
     <code class=""literal"">
      DELETE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-DELETE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      DELETE
     </code>
     of a row from a table, view, etc. (In practice, any nontrivial
     <code class=""command"">
      DELETE
     </code>
     command will require
     <code class=""literal"">
      SELECT
     </code>
     privilege as well, since it must reference table columns to determine which rows to delete.)
    </p>
   </dd>
   <dt id=""DDL-PRIV-TRUNCATE"">
    <span class=""term"">
     <code class=""literal"">
      TRUNCATE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-TRUNCATE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      TRUNCATE
     </code>
     on a table.
    </p>
   </dd>
   <dt id=""DDL-PRIV-REFERENCES"">
    <span class=""term"">
     <code class=""literal"">
      REFERENCES
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-REFERENCES"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows creation of a foreign key constraint referencing a table, or specific column(s) of a table.
    </p>
   </dd>
   <dt id=""DDL-PRIV-TRIGGER"">
    <span class=""term"">
     <code class=""literal"">
      TRIGGER
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-TRIGGER"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows creation of a trigger on a table, view, etc.
    </p>
   </dd>
   <dt id=""DDL-PRIV-CREATE"">
    <span class=""term"">
     <code class=""literal"">
      CREATE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-CREATE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     For databases, allows new schemas and publications to be created within the database, and allows trusted extensions to be installed within the database.
    </p>
    <p>
     For schemas, allows new objects to be created within the schema. To rename an existing object, you must own the object
     <span class=""emphasis"">
      <em>
       and
      </em>
     </span>
     have this privilege for the containing schema.
    </p>
    <p>
     For tablespaces, allows tables, indexes, and temporary files to be created within the tablespace, and allows databases to be created that have the tablespace as their default tablespace.
    </p>
    <p>
     Note that revoking this privilege will not alter the existence or location of existing objects.
    </p>
   </dd>
   <dt id=""DDL-PRIV-CONNECT"">
    <span class=""term"">
     <code class=""literal"">
      CONNECT
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-CONNECT"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows the grantee to connect to the database. This privilege is checked at connection startup (in addition to checking any restrictions imposed by
     <code class=""filename"">
      pg_hba.conf
     </code>
     ).
    </p>
   </dd>
   <dt id=""DDL-PRIV-TEMPORARY"">
    <span class=""term"">
     <code class=""literal"">
      TEMPORARY
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-TEMPORARY"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows temporary tables to be created while using the database.
    </p>
   </dd>
   <dt id=""DDL-PRIV-EXECUTE"">
    <span class=""term"">
     <code class=""literal"">
      EXECUTE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-EXECUTE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows calling a function or procedure, including use of any operators that are implemented on top of the function. This is the only type of privilege that is applicable to functions and procedures.
    </p>
   </dd>
   <dt id=""DDL-PRIV-USAGE"">
    <span class=""term"">
     <code class=""literal"">
      USAGE
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-USAGE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     For procedural languages, allows use of the language for the creation of functions in that language. This is the only type of privilege that is applicable to procedural languages.
    </p>
    <p>
     For schemas, allows access to objects contained in the schema (assuming that the objects' own privilege requirements are also met). Essentially this allows the grantee to
     <span class=""quote"">
      “
      <span class=""quote"">
       look up
      </span>
      ”
     </span>
     objects within the schema. Without this permission, it is still possible to see the object names, e.g., by querying system catalogs. Also, after revoking this permission, existing sessions might have statements that have previously performed this lookup, so this is not a completely secure way to prevent object access.
    </p>
    <p>
     For sequences, allows use of the
     <code class=""function"">
      currval
     </code>
     and
     <code class=""function"">
      nextval
     </code>
     functions.
    </p>
    <p>
     For types and domains, allows use of the type or domain in the creation of tables, functions, and other schema objects. (Note that this privilege does not control all
     <span class=""quote"">
      “
      <span class=""quote"">
       usage
      </span>
      ”
     </span>
     of the type, such as values of the type appearing in queries. It only prevents objects from being created that depend on the type. The main purpose of this privilege is controlling which users can create dependencies on a type, which could prevent the owner from changing the type later.)
    </p>
    <p>
     For foreign-data wrappers, allows creation of new servers using the foreign-data wrapper.
    </p>
    <p>
     For foreign servers, allows creation of foreign tables using the server. Grantees may also create, alter, or drop their own user mappings associated with that server.
    </p>
   </dd>
   <dt id=""DDL-PRIV-SET"">
    <span class=""term"">
     <code class=""literal"">
      SET
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-SET"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows a server configuration parameter to be set to a new value within the current session. (While this privilege can be granted on any parameter, it is meaningless except for parameters that would normally require superuser privilege to set.)
    </p>
   </dd>
   <dt id=""DDL-PRIV-ALTER-SYSTEM"">
    <span class=""term"">
     <code class=""literal"">
      ALTER SYSTEM
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-ALTER-SYSTEM"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows a server configuration parameter to be configured to a new value using the
     <a class=""xref"" href=""sql-altersystem.html"" title=""ALTER SYSTEM"">
      <span class=""refentrytitle"">
       ALTER SYSTEM
      </span>
     </a>
     command.
    </p>
   </dd>
   <dt id=""DDL-PRIV-MAINTAIN"">
    <span class=""term"">
     <code class=""literal"">
      MAINTAIN
     </code>
    </span>
    <a class=""id_link"" href=""#DDL-PRIV-MAINTAIN"">
     #
    </a>
   </dt>
   <dd>
    <p>
     Allows
     <code class=""command"">
      VACUUM
     </code>
     ,
     <code class=""command"">
      ANALYZE
     </code>
     ,
     <code class=""command"">
      CLUSTER
     </code>
     ,
     <code class=""command"">
      REFRESH MATERIALIZED VIEW
     </code>
     ,
     <code class=""command"">
      REINDEX
     </code>
     , and
     <code class=""command"">
      LOCK TABLE
     </code>
     on a relation.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  The privileges required by other commands are listed on the reference page of the respective command.
 </p>
 <p id=""DDL-PRIV-DEFAULT"">
  PostgreSQL grants privileges on some types of objects to
  <code class=""literal"">
   PUBLIC
  </code>
  by default when the objects are created. No privileges are granted to
  <code class=""literal"">
   PUBLIC
  </code>
  by default on tables, table columns, sequences, foreign data wrappers, foreign servers, large objects, schemas, tablespaces, or configuration parameters. For other types of objects, the default privileges granted to
  <code class=""literal"">
   PUBLIC
  </code>
  are as follows:
  <code class=""literal"">
   CONNECT
  </code>
  and
  <code class=""literal"">
   TEMPORARY
  </code>
  (create temporary tables) privileges for databases;
  <code class=""literal"">
   EXECUTE
  </code>
  privilege for functions and procedures; and
  <code class=""literal"">
   USAGE
  </code>
  privilege for languages and data types (including domains). The object owner can, of course,
  <code class=""command"">
   REVOKE
  </code>
  both default and expressly granted privileges. (For maximum security, issue the
  <code class=""command"">
   REVOKE
  </code>
  in the same transaction that creates the object; then there is no window in which another user can use the object.) Also, these default privilege settings can be overridden using the
  <a class=""xref"" href=""sql-alterdefaultprivileges.html"" title=""ALTER DEFAULT PRIVILEGES"">
   <span class=""refentrytitle"">
    ALTER DEFAULT PRIVILEGES
   </span>
  </a>
  command.
 </p>
 <p>
  <a class=""xref"" href=""ddl-priv.html#PRIVILEGE-ABBREVS-TABLE"" title=""Table 5.1. ACL Privilege Abbreviations"">
   Table 5.1
  </a>
  shows the one-letter abbreviations that are used for these privilege types in
  <em class=""firstterm"">
   ACL
  </em>
  (Access Control List) values. You will see these letters in the output of the
  <a class=""xref"" href=""app-psql.html"" title=""psql"">
   <span class=""refentrytitle"">
    <span class=""application"">
     psql
    </span>
   </span>
  </a>
  commands listed below, or when looking at ACL columns of system catalogs.
 </p>
 <div class=""table"" id=""PRIVILEGE-ABBREVS-TABLE"">
  <p class=""title"">
   <strong>
    Table 5.1. ACL Privilege Abbreviations
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""ACL Privilege Abbreviations"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Privilege
      </th>
      <th>
       Abbreviation
      </th>
      <th>
       Applicable Object Types
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        SELECT
       </code>
      </td>
      <td>
       <code class=""literal"">
        r
       </code>
       (
       <span class=""quote"">
        “
        <span class=""quote"">
         read
        </span>
        ”
       </span>
       )
      </td>
      <td>
       <code class=""literal"">
        LARGE OBJECT
       </code>
       ,
       <code class=""literal"">
        SEQUENCE
       </code>
       ,
       <code class=""literal"">
        TABLE
       </code>
       (and table-like objects), table column
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        INSERT
       </code>
      </td>
      <td>
       <code class=""literal"">
        a
       </code>
       (
       <span class=""quote"">
        “
        <span class=""quote"">
         append
        </span>
        ”
       </span>
       )
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
       , table column
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        UPDATE
       </code>
      </td>
      <td>
       <code class=""literal"">
        w
       </code>
       (
       <span class=""quote"">
        “
        <span class=""quote"">
         write
        </span>
        ”
       </span>
       )
      </td>
      <td>
       <code class=""literal"">
        LARGE OBJECT
       </code>
       ,
       <code class=""literal"">
        SEQUENCE
       </code>
       ,
       <code class=""literal"">
        TABLE
       </code>
       , table column
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DELETE
       </code>
      </td>
      <td>
       <code class=""literal"">
        d
       </code>
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TRUNCATE
       </code>
      </td>
      <td>
       <code class=""literal"">
        D
       </code>
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        REFERENCES
       </code>
      </td>
      <td>
       <code class=""literal"">
        x
       </code>
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
       , table column
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TRIGGER
       </code>
      </td>
      <td>
       <code class=""literal"">
        t
       </code>
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        CREATE
       </code>
      </td>
      <td>
       <code class=""literal"">
        C
       </code>
      </td>
      <td>
       <code class=""literal"">
        DATABASE
       </code>
       ,
       <code class=""literal"">
        SCHEMA
       </code>
       ,
       <code class=""literal"">
        TABLESPACE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        CONNECT
       </code>
      </td>
      <td>
       <code class=""literal"">
        c
       </code>
      </td>
      <td>
       <code class=""literal"">
        DATABASE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TEMPORARY
       </code>
      </td>
      <td>
       <code class=""literal"">
        T
       </code>
      </td>
      <td>
       <code class=""literal"">
        DATABASE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        EXECUTE
       </code>
      </td>
      <td>
       <code class=""literal"">
        X
       </code>
      </td>
      <td>
       <code class=""literal"">
        FUNCTION
       </code>
       ,
       <code class=""literal"">
        PROCEDURE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        USAGE
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        DOMAIN
       </code>
       ,
       <code class=""literal"">
        FOREIGN DATA WRAPPER
       </code>
       ,
       <code class=""literal"">
        FOREIGN SERVER
       </code>
       ,
       <code class=""literal"">
        LANGUAGE
       </code>
       ,
       <code class=""literal"">
        SCHEMA
       </code>
       ,
       <code class=""literal"">
        SEQUENCE
       </code>
       ,
       <code class=""literal"">
        TYPE
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SET
       </code>
      </td>
      <td>
       <code class=""literal"">
        s
       </code>
      </td>
      <td>
       <code class=""literal"">
        PARAMETER
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        ALTER SYSTEM
       </code>
      </td>
      <td>
       <code class=""literal"">
        A
       </code>
      </td>
      <td>
       <code class=""literal"">
        PARAMETER
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MAINTAIN
       </code>
      </td>
      <td>
       <code class=""literal"">
        m
       </code>
      </td>
      <td>
       <code class=""literal"">
        TABLE
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""ddl-priv.html#PRIVILEGES-SUMMARY-TABLE"" title=""Table 5.2. Summary of Access Privileges"">
   Table 5.2
  </a>
  summarizes the privileges available for each type of SQL object, using the abbreviations shown above. It also shows the
  <span class=""application"">
   psql
  </span>
  command that can be used to examine privilege settings for each object type.
 </p>
 <div class=""table"" id=""PRIVILEGES-SUMMARY-TABLE"">
  <p class=""title"">
   <strong>
    Table 5.2. Summary of Access Privileges
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Summary of Access Privileges"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
     <col class=""col4""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Object Type
      </th>
      <th>
       All Privileges
      </th>
      <th>
       Default
       <code class=""literal"">
        PUBLIC
       </code>
       Privileges
      </th>
      <th>
       <span class=""application"">
        psql
       </span>
       Command
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        DATABASE
       </code>
      </td>
      <td>
       <code class=""literal"">
        CTc
       </code>
      </td>
      <td>
       <code class=""literal"">
        Tc
       </code>
      </td>
      <td>
       <code class=""literal"">
        \l
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DOMAIN
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        \dD+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FUNCTION
       </code>
       or
       <code class=""literal"">
        PROCEDURE
       </code>
      </td>
      <td>
       <code class=""literal"">
        X
       </code>
      </td>
      <td>
       <code class=""literal"">
        X
       </code>
      </td>
      <td>
       <code class=""literal"">
        \df+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FOREIGN DATA WRAPPER
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dew+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FOREIGN SERVER
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \des+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        LANGUAGE
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        \dL+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        LARGE OBJECT
       </code>
      </td>
      <td>
       <code class=""literal"">
        rw
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dl+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        PARAMETER
       </code>
      </td>
      <td>
       <code class=""literal"">
        sA
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dconfig+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SCHEMA
       </code>
      </td>
      <td>
       <code class=""literal"">
        UC
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dn+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SEQUENCE
       </code>
      </td>
      <td>
       <code class=""literal"">
        rwU
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dp
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TABLE
       </code>
       (and table-like objects)
      </td>
      <td>
       <code class=""literal"">
        arwdDxtm
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dp
       </code>
      </td>
     </tr>
     <tr>
      <td>
       Table column
      </td>
      <td>
       <code class=""literal"">
        arwx
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \dp
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TABLESPACE
       </code>
      </td>
      <td>
       <code class=""literal"">
        C
       </code>
      </td>
      <td>
       none
      </td>
      <td>
       <code class=""literal"">
        \db+
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TYPE
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        U
       </code>
      </td>
      <td>
       <code class=""literal"">
        \dT+
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""indexterm"" id=""id-1.5.4.10.24.1"" name=""id-1.5.4.10.24.1"">
  </a>
  The privileges that have been granted for a particular object are displayed as a list of
  <code class=""type"">
   aclitem
  </code>
  entries, each having the format:
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>grantee</code></em><code class=""literal"">=</code><em class=""replaceable""><code>privilege-abbreviation</code></em>[<span class=""optional""><code class=""literal"">*</code></span>]...<code class=""literal"">/</code><em class=""replaceable""><code>grantor</code></em>
</pre>
 <p>
  Each
  <code class=""type"">
   aclitem
  </code>
  lists all the permissions of one grantee that have been granted by a particular grantor. Specific privileges are represented by one-letter abbreviations from
  <a class=""xref"" href=""ddl-priv.html#PRIVILEGE-ABBREVS-TABLE"" title=""Table 5.1. ACL Privilege Abbreviations"">
   Table 5.1
  </a>
  , with
  <code class=""literal"">
   *
  </code>
  appended if the privilege was granted with grant option. For example,
  <code class=""literal"">
   calvin=r*w/hobbes
  </code>
  specifies that the role
  <code class=""literal"">
   calvin
  </code>
  has the privilege
  <code class=""literal"">
   SELECT
  </code>
  (
  <code class=""literal"">
   r
  </code>
  ) with grant option (
  <code class=""literal"">
   *
  </code>
  ) as well as the non-grantable privilege
  <code class=""literal"">
   UPDATE
  </code>
  (
  <code class=""literal"">
   w
  </code>
  ), both granted by the role
  <code class=""literal"">
   hobbes
  </code>
  . If
  <code class=""literal"">
   calvin
  </code>
  also has some privileges on the same object granted by a different grantor, those would appear as a separate
  <code class=""type"">
   aclitem
  </code>
  entry. An empty grantee field in an
  <code class=""type"">
   aclitem
  </code>
  stands for
  <code class=""literal"">
   PUBLIC
  </code>
  .
 </p>
 <p>
  As an example, suppose that user
  <code class=""literal"">
   miriam
  </code>
  creates table
  <code class=""literal"">
   mytable
  </code>
  and does:
 </p>
 <pre class=""programlisting"">
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</pre>
 <p>
  Then
  <span class=""application"">
   psql
  </span>
  's
  <code class=""literal"">
   \dp
  </code>
  command would show:
 </p>
 <pre class=""programlisting"">
=&gt; \dp mytable
                                  Access privileges
 Schema |  Name   | Type  |   Access privileges    |   Column privileges   | Policies
--------+---------+-------+------------------------+-----------------------+----------
 public | mytable | table | miriam=arwdDxtm/miriam+| col1:                +|
        |         |       | =r/miriam             +|   miriam_rw=rw/miriam |
        |         |       | admin=arw/miriam       |                       |
(1 row)
</pre>
 <p>
  If the
  <span class=""quote"">
   “
   <span class=""quote"">
    Access privileges
   </span>
   ”
  </span>
  column is empty for a given object, it means the object has default privileges (that is, its privileges entry in the relevant system catalog is null). Default privileges always include all privileges for the owner, and can include some privileges for
  <code class=""literal"">
   PUBLIC
  </code>
  depending on the object type, as explained above. The first
  <code class=""command"">
   GRANT
  </code>
  or
  <code class=""command"">
   REVOKE
  </code>
  on an object will instantiate the default privileges (producing, for example,
  <code class=""literal"">
   miriam=arwdDxt/miriam
  </code>
  ) and then modify them per the specified request. Similarly, entries are shown in
  <span class=""quote"">
   “
   <span class=""quote"">
    Column privileges
   </span>
   ”
  </span>
  only for columns with nondefault privileges. (Note: for this purpose,
  <span class=""quote"">
   “
   <span class=""quote"">
    default privileges
   </span>
   ”
  </span>
  always means the built-in default privileges for the object's type. An object whose privileges have been affected by an
  <code class=""command"">
   ALTER DEFAULT PRIVILEGES
  </code>
  command will always be shown with an explicit privilege entry that includes the effects of the
  <code class=""command"">
   ALTER
  </code>
  .)
 </p>
 <p>
  Notice that the owner's implicit grant options are not marked in the access privileges display. A
  <code class=""literal"">
   *
  </code>
  will appear only when grant options have been explicitly granted to someone.
 </p>
 <p>
  The
  <span class=""quote"">
   “
   <span class=""quote"">
    Access privileges
   </span>
   ”
  </span>
  column shows
  <code class=""literal"">
   (none)
  </code>
  when the object's privileges entry is non-null but empty. This means that no privileges are granted at all, even to the object's owner — a rare situation. (The owner still has implicit grant options in this case, and so could re-grant her own privileges; but she has none at the moment.)
 </p>
</div>
"
5. Data Definition,5.9. Row Security Policies,https://www.postgresql.org/docs/17/ddl-rowsecurity.html,"<div class=""sect1"" id=""DDL-ROWSECURITY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.9. Row Security Policies
     <a class=""id_link"" href=""#DDL-ROWSECURITY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.11.2"" name=""id-1.5.4.11.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.11.3"" name=""id-1.5.4.11.3"">
 </a>
 <p>
  In addition to the SQL-standard
  <a class=""link"" href=""ddl-priv.html"" title=""5.8. Privileges"">
   privilege system
  </a>
  available through
  <a class=""xref"" href=""sql-grant.html"" title=""GRANT"">
   <span class=""refentrytitle"">
    GRANT
   </span>
  </a>
  , tables can have
  <em class=""firstterm"">
   row security policies
  </em>
  that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, updated, or deleted by data modification commands. This feature is also known as
  <em class=""firstterm"">
   Row-Level Security
  </em>
  . By default, tables do not have any policies, so that if a user has access privileges to a table according to the SQL privilege system, all rows within it are equally available for querying or updating.
 </p>
 <p>
  When row security is enabled on a table (with
  <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   ALTER TABLE ... ENABLE ROW LEVEL SECURITY
  </a>
  ), all normal access to the table for selecting rows or modifying rows must be allowed by a row security policy. (However, the table's owner is typically not subject to row security policies.) If no policy exists for the table, a default-deny policy is used, meaning that no rows are visible or can be modified. Operations that apply to the whole table, such as
  <code class=""command"">
   TRUNCATE
  </code>
  and
  <code class=""literal"">
   REFERENCES
  </code>
  , are not subject to row security.
 </p>
 <p>
  Row security policies can be specific to commands, or to roles, or to both. A policy can be specified to apply to
  <code class=""literal"">
   ALL
  </code>
  commands, or to
  <code class=""literal"">
   SELECT
  </code>
  ,
  <code class=""literal"">
   INSERT
  </code>
  ,
  <code class=""literal"">
   UPDATE
  </code>
  , or
  <code class=""literal"">
   DELETE
  </code>
  . Multiple roles can be assigned to a given policy, and normal role membership and inheritance rules apply.
 </p>
 <p>
  To specify which rows are visible or modifiable according to a policy, an expression is required that returns a Boolean result. This expression will be evaluated for each row prior to any conditions or functions coming from the user's query. (The only exceptions to this rule are
  <code class=""literal"">
   leakproof
  </code>
  functions, which are guaranteed to not leak information; the optimizer may choose to apply such functions ahead of the row-security check.) Rows for which the expression does not return
  <code class=""literal"">
   true
  </code>
  will not be processed. Separate expressions may be specified to provide independent control over the rows which are visible and the rows which are allowed to be modified. Policy expressions are run as part of the query and with the privileges of the user running the query, although security-definer functions can be used to access data not available to the calling user.
 </p>
 <p>
  Superusers and roles with the
  <code class=""literal"">
   BYPASSRLS
  </code>
  attribute always bypass the row security system when accessing a table. Table owners normally bypass row security as well, though a table owner can choose to be subject to row security with
  <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   ALTER TABLE ... FORCE ROW LEVEL SECURITY
  </a>
  .
 </p>
 <p>
  Enabling and disabling row security, as well as adding policies to a table, is always the privilege of the table owner only.
 </p>
 <p>
  Policies are created using the
  <a class=""xref"" href=""sql-createpolicy.html"" title=""CREATE POLICY"">
   <span class=""refentrytitle"">
    CREATE POLICY
   </span>
  </a>
  command, altered using the
  <a class=""xref"" href=""sql-alterpolicy.html"" title=""ALTER POLICY"">
   <span class=""refentrytitle"">
    ALTER POLICY
   </span>
  </a>
  command, and dropped using the
  <a class=""xref"" href=""sql-droppolicy.html"" title=""DROP POLICY"">
   <span class=""refentrytitle"">
    DROP POLICY
   </span>
  </a>
  command. To enable and disable row security for a given table, use the
  <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <span class=""refentrytitle"">
    ALTER TABLE
   </span>
  </a>
  command.
 </p>
 <p>
  Each policy has a name and multiple policies can be defined for a table. As policies are table-specific, each policy for a table must have a unique name. Different tables may have policies with the same name.
 </p>
 <p>
  When multiple policies apply to a given query, they are combined using either
  <code class=""literal"">
   OR
  </code>
  (for permissive policies, which are the default) or using
  <code class=""literal"">
   AND
  </code>
  (for restrictive policies). This is similar to the rule that a given role has the privileges of all roles that they are a member of. Permissive vs. restrictive policies are discussed further below.
 </p>
 <p>
  As a simple example, here is how to create a policy on the
  <code class=""literal"">
   account
  </code>
  relation to allow only members of the
  <code class=""literal"">
   managers
  </code>
  role to access rows, and only rows of their accounts:
 </p>
 <pre class=""programlisting"">
CREATE TABLE accounts (manager text, company text, contact_email text);

ALTER TABLE accounts ENABLE ROW LEVEL SECURITY;

CREATE POLICY account_managers ON accounts TO managers
    USING (manager = current_user);
</pre>
 <p>
  The policy above implicitly provides a
  <code class=""literal"">
   WITH CHECK
  </code>
  clause identical to its
  <code class=""literal"">
   USING
  </code>
  clause, so that the constraint applies both to rows selected by a command (so a manager cannot
  <code class=""command"">
   SELECT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  , or
  <code class=""command"">
   DELETE
  </code>
  existing rows belonging to a different manager) and to rows modified by a command (so rows belonging to a different manager cannot be created via
  <code class=""command"">
   INSERT
  </code>
  or
  <code class=""command"">
   UPDATE
  </code>
  ).
 </p>
 <p>
  If no role is specified, or the special user name
  <code class=""literal"">
   PUBLIC
  </code>
  is used, then the policy applies to all users on the system. To allow all users to access only their own row in a
  <code class=""literal"">
   users
  </code>
  table, a simple policy can be used:
 </p>
 <pre class=""programlisting"">
CREATE POLICY user_policy ON users
    USING (user_name = current_user);
</pre>
 <p>
  This works similarly to the previous example.
 </p>
 <p>
  To use a different policy for rows that are being added to the table compared to those rows that are visible, multiple policies can be combined. This pair of policies would allow all users to view all rows in the
  <code class=""literal"">
   users
  </code>
  table, but only modify their own:
 </p>
 <pre class=""programlisting"">
CREATE POLICY user_sel_policy ON users
    FOR SELECT
    USING (true);
CREATE POLICY user_mod_policy ON users
    USING (user_name = current_user);
</pre>
 <p>
  In a
  <code class=""command"">
   SELECT
  </code>
  command, these two policies are combined using
  <code class=""literal"">
   OR
  </code>
  , with the net effect being that all rows can be selected. In other command types, only the second policy applies, so that the effects are the same as before.
 </p>
 <p>
  Row security can also be disabled with the
  <code class=""command"">
   ALTER TABLE
  </code>
  command. Disabling row security does not remove any policies that are defined on the table; they are simply ignored. Then all rows in the table are visible and modifiable, subject to the standard SQL privileges system.
 </p>
 <p>
  Below is a larger example of how this feature can be used in production environments. The table
  <code class=""literal"">
   passwd
  </code>
  emulates a Unix password file:
 </p>
 <pre class=""programlisting"">
-- Simple passwd-file based example
CREATE TABLE passwd (
  user_name             text UNIQUE NOT NULL,
  pwhash                text,
  uid                   int  PRIMARY KEY,
  gid                   int  NOT NULL,
  real_name             text NOT NULL,
  home_phone            text,
  extra_info            text,
  home_dir              text NOT NULL,
  shell                 text NOT NULL
);

CREATE ROLE admin;  -- Administrator
CREATE ROLE bob;    -- Normal user
CREATE ROLE alice;  -- Normal user

-- Populate the table
INSERT INTO passwd VALUES
  ('admin','xxx',0,0,'Admin','111-222-3333',null,'/root','/bin/dash');
INSERT INTO passwd VALUES
  ('bob','xxx',1,1,'Bob','123-456-7890',null,'/home/bob','/bin/zsh');
INSERT INTO passwd VALUES
  ('alice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh');

-- Be sure to enable row-level security on the table
ALTER TABLE passwd ENABLE ROW LEVEL SECURITY;

-- Create policies
-- Administrator can see all rows and add any rows
CREATE POLICY admin_all ON passwd TO admin USING (true) WITH CHECK (true);
-- Normal users can view all rows
CREATE POLICY all_view ON passwd FOR SELECT USING (true);
-- Normal users can update their own records, but
-- limit which shells a normal user is allowed to set
CREATE POLICY user_mod ON passwd FOR UPDATE
  USING (current_user = user_name)
  WITH CHECK (
    current_user = user_name AND
    shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh')
  );

-- Allow admin all normal rights
GRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin;
-- Users only get select access on public columns
GRANT SELECT
  (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell)
  ON passwd TO public;
-- Allow users to update certain columns
GRANT UPDATE
  (pwhash, real_name, home_phone, extra_info, shell)
  ON passwd TO public;
</pre>
 <p>
  As with any security settings, it's important to test and ensure that the system is behaving as expected. Using the example above, this demonstrates that the permission system is working properly.
 </p>
 <pre class=""programlisting"">
-- admin can view all rows and fields
postgres=&gt; set role admin;
SET
postgres=&gt; table passwd;
 user_name | pwhash | uid | gid | real_name |  home_phone  | extra_info | home_dir    |   shell
-----------+--------+-----+-----+-----------+--------------+------------+-------------+-----------
 admin     | xxx    |   0 |   0 | Admin     | 111-222-3333 |            | /root       | /bin/dash
 bob       | xxx    |   1 |   1 | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh
 alice     | xxx    |   2 |   1 | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh
(3 rows)

-- Test what Alice is able to do
postgres=&gt; set role alice;
SET
postgres=&gt; table passwd;
ERROR:  permission denied for table passwd
postgres=&gt; select user_name,real_name,home_phone,extra_info,home_dir,shell from passwd;
 user_name | real_name |  home_phone  | extra_info | home_dir    |   shell
-----------+-----------+--------------+------------+-------------+-----------
 admin     | Admin     | 111-222-3333 |            | /root       | /bin/dash
 bob       | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh
 alice     | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh
(3 rows)

postgres=&gt; update passwd set user_name = 'joe';
ERROR:  permission denied for table passwd
-- Alice is allowed to change her own real_name, but no others
postgres=&gt; update passwd set real_name = 'Alice Doe';
UPDATE 1
postgres=&gt; update passwd set real_name = 'John Doe' where user_name = 'admin';
UPDATE 0
postgres=&gt; update passwd set shell = '/bin/xx';
ERROR:  new row violates WITH CHECK OPTION for ""passwd""
postgres=&gt; delete from passwd;
ERROR:  permission denied for table passwd
postgres=&gt; insert into passwd (user_name) values ('xxx');
ERROR:  permission denied for table passwd
-- Alice can change her own password; RLS silently prevents updating other rows
postgres=&gt; update passwd set pwhash = 'abc';
UPDATE 1
</pre>
 <p>
  All of the policies constructed thus far have been permissive policies, meaning that when multiple policies are applied they are combined using the
  <span class=""quote"">
   “
   <span class=""quote"">
    OR
   </span>
   ”
  </span>
  Boolean operator. While permissive policies can be constructed to only allow access to rows in the intended cases, it can be simpler to combine permissive policies with restrictive policies (which the records must pass and which are combined using the
  <span class=""quote"">
   “
   <span class=""quote"">
    AND
   </span>
   ”
  </span>
  Boolean operator). Building on the example above, we add a restrictive policy to require the administrator to be connected over a local Unix socket to access the records of the
  <code class=""literal"">
   passwd
  </code>
  table:
 </p>
 <pre class=""programlisting"">
CREATE POLICY admin_local_only ON passwd AS RESTRICTIVE TO admin
    USING (pg_catalog.inet_client_addr() IS NULL);
</pre>
 <p>
  We can then see that an administrator connecting over a network will not see any records, due to the restrictive policy:
 </p>
 <pre class=""programlisting"">
=&gt; SELECT current_user;
 current_user
--------------
 admin
(1 row)

=&gt; select inet_client_addr();
 inet_client_addr
------------------
 127.0.0.1
(1 row)

=&gt; TABLE passwd;
 user_name | pwhash | uid | gid | real_name | home_phone | extra_info | home_dir | shell
-----------+--------+-----+-----+-----------+------------+------------+----------+-------
(0 rows)

=&gt; UPDATE passwd set pwhash = NULL;
UPDATE 0
</pre>
 <p>
  Referential integrity checks, such as unique or primary key constraints and foreign key references, always bypass row security to ensure that data integrity is maintained. Care must be taken when developing schemas and row level policies to avoid
  <span class=""quote"">
   “
   <span class=""quote"">
    covert channel
   </span>
   ”
  </span>
  leaks of information through such referential integrity checks.
 </p>
 <p>
  In some contexts it is important to be sure that row security is not being applied. For example, when taking a backup, it could be disastrous if row security silently caused some rows to be omitted from the backup. In such a situation, you can set the
  <a class=""xref"" href=""runtime-config-client.html#GUC-ROW-SECURITY"">
   row_security
  </a>
  configuration parameter to
  <code class=""literal"">
   off
  </code>
  . This does not in itself bypass row security; what it does is throw an error if any query's results would get filtered by a policy. The reason for the error can then be investigated and fixed.
 </p>
 <p>
  In the examples above, the policy expressions consider only the current values in the row to be accessed or updated. This is the simplest and best-performing case; when possible, it's best to design row security applications to work this way. If it is necessary to consult other rows or other tables to make a policy decision, that can be accomplished using sub-
  <code class=""command"">
   SELECT
  </code>
  s, or functions that contain
  <code class=""command"">
   SELECT
  </code>
  s, in the policy expressions. Be aware however that such accesses can create race conditions that could allow information leakage if care is not taken. As an example, consider the following table design:
 </p>
 <pre class=""programlisting"">
-- definition of privilege groups
CREATE TABLE groups (group_id int PRIMARY KEY,
                     group_name text NOT NULL);

INSERT INTO groups VALUES
  (1, 'low'),
  (2, 'medium'),
  (5, 'high');

GRANT ALL ON groups TO alice;  -- alice is the administrator
GRANT SELECT ON groups TO public;

-- definition of users' privilege levels
CREATE TABLE users (user_name text PRIMARY KEY,
                    group_id int NOT NULL REFERENCES groups);

INSERT INTO users VALUES
  ('alice', 5),
  ('bob', 2),
  ('mallory', 2);

GRANT ALL ON users TO alice;
GRANT SELECT ON users TO public;

-- table holding the information to be protected
CREATE TABLE information (info text,
                          group_id int NOT NULL REFERENCES groups);

INSERT INTO information VALUES
  ('barely secret', 1),
  ('slightly secret', 2),
  ('very secret', 5);

ALTER TABLE information ENABLE ROW LEVEL SECURITY;

-- a row should be visible to/updatable by users whose security group_id is
-- greater than or equal to the row's group_id
CREATE POLICY fp_s ON information FOR SELECT
  USING (group_id &lt;= (SELECT group_id FROM users WHERE user_name = current_user));
CREATE POLICY fp_u ON information FOR UPDATE
  USING (group_id &lt;= (SELECT group_id FROM users WHERE user_name = current_user));

-- we rely only on RLS to protect the information table
GRANT ALL ON information TO public;
</pre>
 <p>
  Now suppose that
  <code class=""literal"">
   alice
  </code>
  wishes to change the
  <span class=""quote"">
   “
   <span class=""quote"">
    slightly secret
   </span>
   ”
  </span>
  information, but decides that
  <code class=""literal"">
   mallory
  </code>
  should not be trusted with the new content of that row, so she does:
 </p>
 <pre class=""programlisting"">
BEGIN;
UPDATE users SET group_id = 1 WHERE user_name = 'mallory';
UPDATE information SET info = 'secret from mallory' WHERE group_id = 2;
COMMIT;
</pre>
 <p>
  That looks safe; there is no window wherein
  <code class=""literal"">
   mallory
  </code>
  should be able to see the
  <span class=""quote"">
   “
   <span class=""quote"">
    secret from mallory
   </span>
   ”
  </span>
  string. However, there is a race condition here. If
  <code class=""literal"">
   mallory
  </code>
  is concurrently doing, say,
 </p>
 <pre class=""programlisting"">
SELECT * FROM information WHERE group_id = 2 FOR UPDATE;
</pre>
 <p>
  and her transaction is in
  <code class=""literal"">
   READ COMMITTED
  </code>
  mode, it is possible for her to see
  <span class=""quote"">
   “
   <span class=""quote"">
    secret from mallory
   </span>
   ”
  </span>
  . That happens if her transaction reaches the
  <code class=""structname"">
   information
  </code>
  row just after
  <code class=""literal"">
   alice
  </code>
  's does. It blocks waiting for
  <code class=""literal"">
   alice
  </code>
  's transaction to commit, then fetches the updated row contents thanks to the
  <code class=""literal"">
   FOR UPDATE
  </code>
  clause. However, it does
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  fetch an updated row for the implicit
  <code class=""command"">
   SELECT
  </code>
  from
  <code class=""structname"">
   users
  </code>
  , because that sub-
  <code class=""command"">
   SELECT
  </code>
  did not have
  <code class=""literal"">
   FOR UPDATE
  </code>
  ; instead the
  <code class=""structname"">
   users
  </code>
  row is read with the snapshot taken at the start of the query. Therefore, the policy expression tests the old value of
  <code class=""literal"">
   mallory
  </code>
  's privilege level and allows her to see the updated row.
 </p>
 <p>
  There are several ways around this problem. One simple answer is to use
  <code class=""literal"">
   SELECT ... FOR SHARE
  </code>
  in sub-
  <code class=""command"">
   SELECT
  </code>
  s in row security policies. However, that requires granting
  <code class=""literal"">
   UPDATE
  </code>
  privilege on the referenced table (here
  <code class=""structname"">
   users
  </code>
  ) to the affected users, which might be undesirable. (But another row security policy could be applied to prevent them from actually exercising that privilege; or the sub-
  <code class=""command"">
   SELECT
  </code>
  could be embedded into a security definer function.) Also, heavy concurrent use of row share locks on the referenced table could pose a performance problem, especially if updates of it are frequent. Another solution, practical if updates of the referenced table are infrequent, is to take an
  <code class=""literal"">
   ACCESS EXCLUSIVE
  </code>
  lock on the referenced table when updating it, so that no concurrent transactions could be examining old row values. Or one could just wait for all concurrent transactions to end after committing an update of the referenced table and before making changes that rely on the new security situation.
 </p>
 <p>
  For additional details see
  <a class=""xref"" href=""sql-createpolicy.html"" title=""CREATE POLICY"">
   <span class=""refentrytitle"">
    CREATE POLICY
   </span>
  </a>
  and
  <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <span class=""refentrytitle"">
    ALTER TABLE
   </span>
  </a>
  .
 </p>
</div>
"
5. Data Definition,5.10. Schemas,https://www.postgresql.org/docs/17/ddl-schemas.html,"<div class=""sect1"" id=""DDL-SCHEMAS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.10. Schemas
     <a class=""id_link"" href=""#DDL-SCHEMAS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-CREATE"">
      5.10.1. Creating a Schema
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-PUBLIC"">
      5.10.2. The Public Schema
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-PATH"">
      5.10.3. The Schema Search Path
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-PRIV"">
      5.10.4. Schemas and Privileges
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-CATALOG"">
      5.10.5. The System Catalog Schema
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-PATTERNS"">
      5.10.6. Usage Patterns
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-schemas.html#DDL-SCHEMAS-PORTABILITY"">
      5.10.7. Portability
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.12.2"" name=""id-1.5.4.12.2"">
 </a>
 <p>
  A
  <span class=""productname"">
   PostgreSQL
  </span>
  database cluster contains one or more named databases. Roles and a few other object types are shared across the entire cluster. A client connection to the server can only access data in a single database, the one specified in the connection request.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Users of a cluster do not necessarily have the privilege to access every database in the cluster. Sharing of role names means that there cannot be different roles named, say,
   <code class=""literal"">
    joe
   </code>
   in two databases in the same cluster; but the system can be configured to allow
   <code class=""literal"">
    joe
   </code>
   access to only some of the databases.
  </p>
 </div>
 <p>
  A database contains one or more named
  <em class=""firstterm"">
   schemas
  </em>
  , which in turn contain tables. Schemas also contain other kinds of named objects, including data types, functions, and operators. Within one schema, two objects of the same type cannot have the same name. Furthermore, tables, sequences, indexes, views, materialized views, and foreign tables share the same namespace, so that, for example, an index and a table must have different names if they are in the same schema. The same object name can be used in different schemas without conflict; for example, both
  <code class=""literal"">
   schema1
  </code>
  and
  <code class=""literal"">
   myschema
  </code>
  can contain tables named
  <code class=""literal"">
   mytable
  </code>
  . Unlike databases, schemas are not rigidly separated: a user can access objects in any of the schemas in the database they are connected to, if they have privileges to do so.
 </p>
 <p>
  There are several reasons why one might want to use schemas:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     To allow many users to use one database without interfering with each other.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     To organize database objects into logical groups to make them more manageable.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Third-party applications can be put into separate schemas so they do not collide with the names of other objects.
    </p>
   </li>
  </ul>
 </div>
 <p>
  Schemas are analogous to directories at the operating system level, except that schemas cannot be nested.
 </p>
 <div class=""sect2"" id=""DDL-SCHEMAS-CREATE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.1. Creating a Schema
      <a class=""id_link"" href=""#DDL-SCHEMAS-CREATE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.12.7.2"" name=""id-1.5.4.12.7.2"">
  </a>
  <p>
   To create a schema, use the
   <a class=""xref"" href=""sql-createschema.html"" title=""CREATE SCHEMA"">
    <span class=""refentrytitle"">
     CREATE SCHEMA
    </span>
   </a>
   command. Give the schema a name of your choice. For example:
  </p>
  <pre class=""programlisting"">
CREATE SCHEMA myschema;
</pre>
  <a class=""indexterm"" id=""id-1.5.4.12.7.4"" name=""id-1.5.4.12.7.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.12.7.5"" name=""id-1.5.4.12.7.5"">
  </a>
  <p>
   To create or access objects in a schema, write a
   <em class=""firstterm"">
    qualified name
   </em>
   consisting of the schema name and table name separated by a dot:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>schema</code></em><code class=""literal"">.</code><em class=""replaceable""><code>table</code></em>
</pre>
  <p>
   This works anywhere a table name is expected, including the table modification commands and the data access commands discussed in the following chapters. (For brevity we will speak of tables only, but the same ideas apply to other kinds of named objects, such as types and functions.)
  </p>
  <p>
   Actually, the even more general syntax
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>database</code></em><code class=""literal"">.</code><em class=""replaceable""><code>schema</code></em><code class=""literal"">.</code><em class=""replaceable""><code>table</code></em>
</pre>
  <p>
   can be used too, but at present this is just for pro forma compliance with the SQL standard. If you write a database name, it must be the same as the database you are connected to.
  </p>
  <p>
   So to create a table in the new schema, use:
  </p>
  <pre class=""programlisting"">
CREATE TABLE myschema.mytable (
 ...
);
</pre>
  <a class=""indexterm"" id=""id-1.5.4.12.7.9"" name=""id-1.5.4.12.7.9"">
  </a>
  <p>
   To drop a schema if it's empty (all objects in it have been dropped), use:
  </p>
  <pre class=""programlisting"">
DROP SCHEMA myschema;
</pre>
  <p>
   To drop a schema including all contained objects, use:
  </p>
  <pre class=""programlisting"">
DROP SCHEMA myschema CASCADE;
</pre>
  <p>
   See
   <a class=""xref"" href=""ddl-depend.html"" title=""5.15. Dependency Tracking"">
    Section 5.15
   </a>
   for a description of the general mechanism behind this.
  </p>
  <p>
   Often you will want to create a schema owned by someone else (since this is one of the ways to restrict the activities of your users to well-defined namespaces). The syntax for that is:
  </p>
  <pre class=""programlisting"">
CREATE SCHEMA <em class=""replaceable""><code>schema_name</code></em> AUTHORIZATION <em class=""replaceable""><code>user_name</code></em>;
</pre>
  <p>
   You can even omit the schema name, in which case the schema name will be the same as the user name. See
   <a class=""xref"" href=""ddl-schemas.html#DDL-SCHEMAS-PATTERNS"" title=""5.10.6. Usage Patterns"">
    Section 5.10.6
   </a>
   for how this can be useful.
  </p>
  <p>
   Schema names beginning with
   <code class=""literal"">
    pg_
   </code>
   are reserved for system purposes and cannot be created by users.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-PUBLIC"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.2. The Public Schema
      <a class=""id_link"" href=""#DDL-SCHEMAS-PUBLIC"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.12.8.2"" name=""id-1.5.4.12.8.2"">
  </a>
  <p>
   In the previous sections we created tables without specifying any schema names. By default such tables (and other objects) are automatically put into a schema named
   <span class=""quote"">
    “
    <span class=""quote"">
     public
    </span>
    ”
   </span>
   . Every new database contains such a schema. Thus, the following are equivalent:
  </p>
  <pre class=""programlisting"">
CREATE TABLE products ( ... );
</pre>
  <p>
   and:
  </p>
  <pre class=""programlisting"">
CREATE TABLE public.products ( ... );
</pre>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-PATH"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.3. The Schema Search Path
      <a class=""id_link"" href=""#DDL-SCHEMAS-PATH"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.12.9.2"" name=""id-1.5.4.12.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.12.9.3"" name=""id-1.5.4.12.9.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.4.12.9.4"" name=""id-1.5.4.12.9.4"">
  </a>
  <p>
   Qualified names are tedious to write, and it's often best not to wire a particular schema name into applications anyway. Therefore tables are often referred to by
   <em class=""firstterm"">
    unqualified names
   </em>
   , which consist of just the table name. The system determines which table is meant by following a
   <em class=""firstterm"">
    search path
   </em>
   , which is a list of schemas to look in. The first matching table in the search path is taken to be the one wanted. If there is no match in the search path, an error is reported, even if matching table names exist in other schemas in the database.
  </p>
  <p>
   The ability to create like-named objects in different schemas complicates writing a query that references precisely the same objects every time. It also opens up the potential for users to change the behavior of other users' queries, maliciously or accidentally. Due to the prevalence of unqualified names in queries and their use in
   <span class=""productname"">
    PostgreSQL
   </span>
   internals, adding a schema to
   <code class=""varname"">
    search_path
   </code>
   effectively trusts all users having
   <code class=""literal"">
    CREATE
   </code>
   privilege on that schema. When you run an ordinary query, a malicious user able to create objects in a schema of your search path can take control and execute arbitrary SQL functions as though you executed them.
  </p>
  <a class=""indexterm"" id=""id-1.5.4.12.9.7"" name=""id-1.5.4.12.9.7"">
  </a>
  <p>
   The first schema named in the search path is called the current schema. Aside from being the first schema searched, it is also the schema in which new tables will be created if the
   <code class=""command"">
    CREATE TABLE
   </code>
   command does not specify a schema name.
  </p>
  <a class=""indexterm"" id=""id-1.5.4.12.9.9"" name=""id-1.5.4.12.9.9"">
  </a>
  <p>
   To show the current search path, use the following command:
  </p>
  <pre class=""programlisting"">
SHOW search_path;
</pre>
  <p>
   In the default setup this returns:
  </p>
  <pre class=""screen"">
 search_path
--------------
 ""$user"", public
</pre>
  <p>
   The first element specifies that a schema with the same name as the current user is to be searched. If no such schema exists, the entry is ignored. The second element refers to the public schema that we have seen already.
  </p>
  <p>
   The first schema in the search path that exists is the default location for creating new objects. That is the reason that by default objects are created in the public schema. When objects are referenced in any other context without schema qualification (table modification, data modification, or query commands) the search path is traversed until a matching object is found. Therefore, in the default configuration, any unqualified access again can only refer to the public schema.
  </p>
  <p>
   To put our new schema in the path, we use:
  </p>
  <pre class=""programlisting"">
SET search_path TO myschema,public;
</pre>
  <p>
   (We omit the
   <code class=""literal"">
    $user
   </code>
   here because we have no immediate need for it.) And then we can access the table without schema qualification:
  </p>
  <pre class=""programlisting"">
DROP TABLE mytable;
</pre>
  <p>
   Also, since
   <code class=""literal"">
    myschema
   </code>
   is the first element in the path, new objects would by default be created in it.
  </p>
  <p>
   We could also have written:
  </p>
  <pre class=""programlisting"">
SET search_path TO myschema;
</pre>
  <p>
   Then we no longer have access to the public schema without explicit qualification. There is nothing special about the public schema except that it exists by default. It can be dropped, too.
  </p>
  <p>
   See also
   <a class=""xref"" href=""functions-info.html"" title=""9.27. System Information Functions and Operators"">
    Section 9.27
   </a>
   for other ways to manipulate the schema search path.
  </p>
  <p>
   The search path works in the same way for data type names, function names, and operator names as it does for table names. Data type and function names can be qualified in exactly the same way as table names. If you need to write a qualified operator name in an expression, there is a special provision: you must write
  </p>
  <pre class=""synopsis"">
<code class=""literal"">OPERATOR(</code><em class=""replaceable""><code>schema</code></em><code class=""literal"">.</code><em class=""replaceable""><code>operator</code></em><code class=""literal"">)</code>
</pre>
  <p>
   This is needed to avoid syntactic ambiguity. An example is:
  </p>
  <pre class=""programlisting"">
SELECT 3 OPERATOR(pg_catalog.+) 4;
</pre>
  <p>
   In practice one usually relies on the search path for operators, so as not to have to write anything so ugly as that.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-PRIV"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.4. Schemas and Privileges
      <a class=""id_link"" href=""#DDL-SCHEMAS-PRIV"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.12.10.2"" name=""id-1.5.4.12.10.2"">
  </a>
  <p>
   By default, users cannot access any objects in schemas they do not own. To allow that, the owner of the schema must grant the
   <code class=""literal"">
    USAGE
   </code>
   privilege on the schema. By default, everyone has that privilege on the schema
   <code class=""literal"">
    public
   </code>
   . To allow users to make use of the objects in a schema, additional privileges might need to be granted, as appropriate for the object.
  </p>
  <p>
   A user can also be allowed to create objects in someone else's schema. To allow that, the
   <code class=""literal"">
    CREATE
   </code>
   privilege on the schema needs to be granted. In databases upgraded from
   <span class=""productname"">
    PostgreSQL
   </span>
   14 or earlier, everyone has that privilege on the schema
   <code class=""literal"">
    public
   </code>
   . Some
   <a class=""link"" href=""ddl-schemas.html#DDL-SCHEMAS-PATTERNS"" title=""5.10.6. Usage Patterns"">
    usage patterns
   </a>
   call for revoking that privilege:
  </p>
  <pre class=""programlisting"">
REVOKE CREATE ON SCHEMA public FROM PUBLIC;
</pre>
  <p>
   (The first
   <span class=""quote"">
    “
    <span class=""quote"">
     public
    </span>
    ”
   </span>
   is the schema, the second
   <span class=""quote"">
    “
    <span class=""quote"">
     public
    </span>
    ”
   </span>
   means
   <span class=""quote"">
    “
    <span class=""quote"">
     every user
    </span>
    ”
   </span>
   . In the first sense it is an identifier, in the second sense it is a key word, hence the different capitalization; recall the guidelines from
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS"" title=""4.1.1. Identifiers and Key Words"">
    Section 4.1.1
   </a>
   .)
  </p>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-CATALOG"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.5. The System Catalog Schema
      <a class=""id_link"" href=""#DDL-SCHEMAS-CATALOG"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.12.11.2"" name=""id-1.5.4.12.11.2"">
  </a>
  <p>
   In addition to
   <code class=""literal"">
    public
   </code>
   and user-created schemas, each database contains a
   <code class=""literal"">
    pg_catalog
   </code>
   schema, which contains the system tables and all the built-in data types, functions, and operators.
   <code class=""literal"">
    pg_catalog
   </code>
   is always effectively part of the search path. If it is not named explicitly in the path then it is implicitly searched
   <span class=""emphasis"">
    <em>
     before
    </em>
   </span>
   searching the path's schemas. This ensures that built-in names will always be findable. However, you can explicitly place
   <code class=""literal"">
    pg_catalog
   </code>
   at the end of your search path if you prefer to have user-defined names override built-in names.
  </p>
  <p>
   Since system table names begin with
   <code class=""literal"">
    pg_
   </code>
   , it is best to avoid such names to ensure that you won't suffer a conflict if some future version defines a system table named the same as your table. (With the default search path, an unqualified reference to your table name would then be resolved as the system table instead.) System tables will continue to follow the convention of having names beginning with
   <code class=""literal"">
    pg_
   </code>
   , so that they will not conflict with unqualified user-table names so long as users avoid the
   <code class=""literal"">
    pg_
   </code>
   prefix.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-PATTERNS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.6. Usage Patterns
      <a class=""id_link"" href=""#DDL-SCHEMAS-PATTERNS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Schemas can be used to organize your data in many ways. A
   <em class=""firstterm"">
    secure schema usage pattern
   </em>
   prevents untrusted users from changing the behavior of other users' queries. When a database does not use a secure schema usage pattern, users wishing to securely query that database would take protective action at the beginning of each session. Specifically, they would begin each session by setting
   <code class=""varname"">
    search_path
   </code>
   to the empty string or otherwise removing schemas that are writable by non-superusers from
   <code class=""varname"">
    search_path
   </code>
   . There are a few usage patterns easily supported by the default configuration:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Constrain ordinary users to user-private schemas. To implement this pattern, first ensure that no schemas have public
      <code class=""literal"">
       CREATE
      </code>
      privileges. Then, for every user needing to create non-temporary objects, create a schema with the same name as that user, for example
      <code class=""literal"">
       CREATE SCHEMA alice AUTHORIZATION alice
      </code>
      . (Recall that the default search path starts with
      <code class=""literal"">
       $user
      </code>
      , which resolves to the user name. Therefore, if each user has a separate schema, they access their own schemas by default.) This pattern is a secure schema usage pattern unless an untrusted user is the database owner or has been granted
      <code class=""literal"">
       ADMIN OPTION
      </code>
      on a relevant role, in which case no secure schema usage pattern exists.
     </p>
     <p>
      In
      <span class=""productname"">
       PostgreSQL
      </span>
      15 and later, the default configuration supports this usage pattern. In prior versions, or when using a database that has been upgraded from a prior version, you will need to remove the public
      <code class=""literal"">
       CREATE
      </code>
      privilege from the
      <code class=""literal"">
       public
      </code>
      schema (issue
      <code class=""literal"">
       REVOKE CREATE ON SCHEMA public FROM PUBLIC
      </code>
      ). Then consider auditing the
      <code class=""literal"">
       public
      </code>
      schema for objects named like objects in schema
      <code class=""literal"">
       pg_catalog
      </code>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Remove the public schema from the default search path, by modifying
      <a class=""link"" href=""config-setting.html#CONFIG-SETTING-CONFIGURATION-FILE"" title=""19.1.2. Parameter Interaction via the Configuration File"">
       <code class=""filename"">
        postgresql.conf
       </code>
      </a>
      or by issuing
      <code class=""literal"">
       ALTER ROLE ALL SET search_path = ""$user""
      </code>
      . Then, grant privileges to create in the public schema. Only qualified names will choose public schema objects. While qualified table references are fine, calls to functions in the public schema
      <a class=""link"" href=""typeconv-func.html"" title=""10.3. Functions"">
       will be unsafe or unreliable
      </a>
      . If you create functions or extensions in the public schema, use the first pattern instead. Otherwise, like the first pattern, this is secure unless an untrusted user is the database owner or has been granted
      <code class=""literal"">
       ADMIN OPTION
      </code>
      on a relevant role.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Keep the default search path, and grant privileges to create in the public schema. All users access the public schema implicitly. This simulates the situation where schemas are not available at all, giving a smooth transition from the non-schema-aware world. However, this is never a secure pattern. It is acceptable only when the database has a single user or a few mutually-trusting users. In databases upgraded from
      <span class=""productname"">
       PostgreSQL
      </span>
      14 or earlier, this is the default.
     </p>
    </li>
   </ul>
  </div>
  <p>
   For any pattern, to install shared applications (tables to be used by everyone, additional functions provided by third parties, etc.), put them into separate schemas. Remember to grant appropriate privileges to allow the other users to access them. Users can then refer to these additional objects by qualifying the names with a schema name, or they can put the additional schemas into their search path, as they choose.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-SCHEMAS-PORTABILITY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.10.7. Portability
      <a class=""id_link"" href=""#DDL-SCHEMAS-PORTABILITY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   In the SQL standard, the notion of objects in the same schema being owned by different users does not exist. Moreover, some implementations do not allow you to create schemas that have a different name than their owner. In fact, the concepts of schema and user are nearly equivalent in a database system that implements only the basic schema support specified in the standard. Therefore, many users consider qualified names to really consist of
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      user_name
     </code>
    </em>
    .
    <em class=""replaceable"">
     <code>
      table_name
     </code>
    </em>
   </code>
   . This is how
   <span class=""productname"">
    PostgreSQL
   </span>
   will effectively behave if you create a per-user schema for every user.
  </p>
  <p>
   Also, there is no concept of a
   <code class=""literal"">
    public
   </code>
   schema in the SQL standard. For maximum conformance to the standard, you should not use the
   <code class=""literal"">
    public
   </code>
   schema.
  </p>
  <p>
   Of course, some SQL database systems might not implement schemas at all, or provide namespace support by allowing (possibly limited) cross-database access. If you need to work with those systems, then maximum portability would be achieved by not using schemas at all.
  </p>
 </div>
</div>
"
5. Data Definition,5.11. Inheritance,https://www.postgresql.org/docs/17/ddl-inherit.html,"<div class=""sect1"" id=""DDL-INHERIT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.11. Inheritance
     <a class=""id_link"" href=""#DDL-INHERIT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""ddl-inherit.html#DDL-INHERIT-CAVEATS"">
      5.11.1. Caveats
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.13.2"" name=""id-1.5.4.13.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.13.3"" name=""id-1.5.4.13.3"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  implements table inheritance, which can be a useful tool for database designers. (SQL:1999 and later define a type inheritance feature, which differs in many respects from the features described here.)
 </p>
 <p>
  Let's start with an example: suppose we are trying to build a data model for cities. Each state has many cities, but only one capital. We want to be able to quickly retrieve the capital city for any particular state. This can be done by creating two tables, one for state capitals and one for cities that are not capitals. However, what happens when we want to ask for data about a city, regardless of whether it is a capital or not? The inheritance feature can help to resolve this problem. We define the
  <code class=""structname"">
   capitals
  </code>
  table so that it inherits from
  <code class=""structname"">
   cities
  </code>
  :
 </p>
 <pre class=""programlisting"">
CREATE TABLE cities (
    name            text,
    population      float,
    elevation       int     -- in feet
);

CREATE TABLE capitals (
    state           char(2)
) INHERITS (cities);
</pre>
 <p>
  In this case, the
  <code class=""structname"">
   capitals
  </code>
  table
  <em class=""firstterm"">
   inherits
  </em>
  all the columns of its parent table,
  <code class=""structname"">
   cities
  </code>
  . State capitals also have an extra column,
  <code class=""structfield"">
   state
  </code>
  , that shows their state.
 </p>
 <p>
  In
  <span class=""productname"">
   PostgreSQL
  </span>
  , a table can inherit from zero or more other tables, and a query can reference either all rows of a table or all rows of a table plus all of its descendant tables. The latter behavior is the default. For example, the following query finds the names of all cities, including state capitals, that are located at an elevation over 500 feet:
 </p>
 <pre class=""programlisting"">
SELECT name, elevation
    FROM cities
    WHERE elevation &gt; 500;
</pre>
 <p>
  Given the sample data from the
  <span class=""productname"">
   PostgreSQL
  </span>
  tutorial (see
  <a class=""xref"" href=""tutorial-sql-intro.html"" title=""2.1. Introduction"">
   Section 2.1
  </a>
  ), this returns:
 </p>
 <pre class=""programlisting"">
   name    | elevation
-----------+-----------
 Las Vegas |      2174
 Mariposa  |      1953
 Madison   |       845
</pre>
 <p>
  On the other hand, the following query finds all the cities that are not state capitals and are situated at an elevation over 500 feet:
 </p>
 <pre class=""programlisting"">
SELECT name, elevation
    FROM ONLY cities
    WHERE elevation &gt; 500;

   name    | elevation
-----------+-----------
 Las Vegas |      2174
 Mariposa  |      1953
</pre>
 <p>
  Here the
  <code class=""literal"">
   ONLY
  </code>
  keyword indicates that the query should apply only to
  <code class=""structname"">
   cities
  </code>
  , and not any tables below
  <code class=""structname"">
   cities
  </code>
  in the inheritance hierarchy. Many of the commands that we have already discussed —
  <code class=""command"">
   SELECT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  and
  <code class=""command"">
   DELETE
  </code>
  — support the
  <code class=""literal"">
   ONLY
  </code>
  keyword.
 </p>
 <p>
  You can also write the table name with a trailing
  <code class=""literal"">
   *
  </code>
  to explicitly specify that descendant tables are included:
 </p>
 <pre class=""programlisting"">
SELECT name, elevation
    FROM cities*
    WHERE elevation &gt; 500;
</pre>
 <p>
  Writing
  <code class=""literal"">
   *
  </code>
  is not necessary, since this behavior is always the default. However, this syntax is still supported for compatibility with older releases where the default could be changed.
 </p>
 <p>
  In some cases you might wish to know which table a particular row originated from. There is a system column called
  <code class=""structfield"">
   tableoid
  </code>
  in each table which can tell you the originating table:
 </p>
 <pre class=""programlisting"">
SELECT c.tableoid, c.name, c.elevation
FROM cities c
WHERE c.elevation &gt; 500;
</pre>
 <p>
  which returns:
 </p>
 <pre class=""programlisting"">
 tableoid |   name    | elevation
----------+-----------+-----------
   139793 | Las Vegas |      2174
   139793 | Mariposa  |      1953
   139798 | Madison   |       845
</pre>
 <p>
  (If you try to reproduce this example, you will probably get different numeric OIDs.) By doing a join with
  <code class=""structname"">
   pg_class
  </code>
  you can see the actual table names:
 </p>
 <pre class=""programlisting"">
SELECT p.relname, c.name, c.elevation
FROM cities c, pg_class p
WHERE c.elevation &gt; 500 AND c.tableoid = p.oid;
</pre>
 <p>
  which returns:
 </p>
 <pre class=""programlisting"">
 relname  |   name    | elevation
----------+-----------+-----------
 cities   | Las Vegas |      2174
 cities   | Mariposa  |      1953
 capitals | Madison   |       845
</pre>
 <p>
  Another way to get the same effect is to use the
  <code class=""type"">
   regclass
  </code>
  alias type, which will print the table OID symbolically:
 </p>
 <pre class=""programlisting"">
SELECT c.tableoid::regclass, c.name, c.elevation
FROM cities c
WHERE c.elevation &gt; 500;
</pre>
 <p>
  Inheritance does not automatically propagate data from
  <code class=""command"">
   INSERT
  </code>
  or
  <code class=""command"">
   COPY
  </code>
  commands to other tables in the inheritance hierarchy. In our example, the following
  <code class=""command"">
   INSERT
  </code>
  statement will fail:
 </p>
 <pre class=""programlisting"">
INSERT INTO cities (name, population, elevation, state)
VALUES ('Albany', NULL, NULL, 'NY');
</pre>
 <p>
  We might hope that the data would somehow be routed to the
  <code class=""structname"">
   capitals
  </code>
  table, but this does not happen:
  <code class=""command"">
   INSERT
  </code>
  always inserts into exactly the table specified. In some cases it is possible to redirect the insertion using a rule (see
  <a class=""xref"" href=""rules.html"" title=""Chapter 39. The Rule System"">
   Chapter 39
  </a>
  ). However that does not help for the above case because the
  <code class=""structname"">
   cities
  </code>
  table does not contain the column
  <code class=""structfield"">
   state
  </code>
  , and so the command will be rejected before the rule can be applied.
 </p>
 <p>
  All check constraints and not-null constraints on a parent table are automatically inherited by its children, unless explicitly specified otherwise with
  <code class=""literal"">
   NO INHERIT
  </code>
  clauses. Other types of constraints (unique, primary key, and foreign key constraints) are not inherited.
 </p>
 <p>
  A table can inherit from more than one parent table, in which case it has the union of the columns defined by the parent tables. Any columns declared in the child table's definition are added to these. If the same column name appears in multiple parent tables, or in both a parent table and the child's definition, then these columns are
  <span class=""quote"">
   “
   <span class=""quote"">
    merged
   </span>
   ”
  </span>
  so that there is only one such column in the child table. To be merged, columns must have the same data types, else an error is raised. Inheritable check constraints and not-null constraints are merged in a similar fashion. Thus, for example, a merged column will be marked not-null if any one of the column definitions it came from is marked not-null. Check constraints are merged if they have the same name, and the merge will fail if their conditions are different.
 </p>
 <p>
  Table inheritance is typically established when the child table is created, using the
  <code class=""literal"">
   INHERITS
  </code>
  clause of the
  <a class=""link"" href=""sql-createtable.html"" title=""CREATE TABLE"">
   <code class=""command"">
    CREATE TABLE
   </code>
  </a>
  statement. Alternatively, a table which is already defined in a compatible way can have a new parent relationship added, using the
  <code class=""literal"">
   INHERIT
  </code>
  variant of
  <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <code class=""command"">
    ALTER TABLE
   </code>
  </a>
  . To do this the new child table must already include columns with the same names and types as the columns of the parent. It must also include check constraints with the same names and check expressions as those of the parent. Similarly an inheritance link can be removed from a child using the
  <code class=""literal"">
   NO INHERIT
  </code>
  variant of
  <code class=""command"">
   ALTER TABLE
  </code>
  . Dynamically adding and removing inheritance links like this can be useful when the inheritance relationship is being used for table partitioning (see
  <a class=""xref"" href=""ddl-partitioning.html"" title=""5.12. Table Partitioning"">
   Section 5.12
  </a>
  ).
 </p>
 <p>
  One convenient way to create a compatible table that will later be made a new child is to use the
  <code class=""literal"">
   LIKE
  </code>
  clause in
  <code class=""command"">
   CREATE TABLE
  </code>
  . This creates a new table with the same columns as the source table. If there are any
  <code class=""literal"">
   CHECK
  </code>
  constraints defined on the source table, the
  <code class=""literal"">
   INCLUDING CONSTRAINTS
  </code>
  option to
  <code class=""literal"">
   LIKE
  </code>
  should be specified, as the new child must have constraints matching the parent to be considered compatible.
 </p>
 <p>
  A parent table cannot be dropped while any of its children remain. Neither can columns or check constraints of child tables be dropped or altered if they are inherited from any parent tables. If you wish to remove a table and all of its descendants, one easy way is to drop the parent table with the
  <code class=""literal"">
   CASCADE
  </code>
  option (see
  <a class=""xref"" href=""ddl-depend.html"" title=""5.15. Dependency Tracking"">
   Section 5.15
  </a>
  ).
 </p>
 <p>
  <code class=""command"">
   ALTER TABLE
  </code>
  will propagate any changes in column data definitions and check constraints down the inheritance hierarchy. Again, dropping columns that are depended on by other tables is only possible when using the
  <code class=""literal"">
   CASCADE
  </code>
  option.
  <code class=""command"">
   ALTER TABLE
  </code>
  follows the same rules for duplicate column merging and rejection that apply during
  <code class=""command"">
   CREATE TABLE
  </code>
  .
 </p>
 <p>
  Inherited queries perform access permission checks on the parent table only. Thus, for example, granting
  <code class=""literal"">
   UPDATE
  </code>
  permission on the
  <code class=""structname"">
   cities
  </code>
  table implies permission to update rows in the
  <code class=""structname"">
   capitals
  </code>
  table as well, when they are accessed through
  <code class=""structname"">
   cities
  </code>
  . This preserves the appearance that the data is (also) in the parent table. But the
  <code class=""structname"">
   capitals
  </code>
  table could not be updated directly without an additional grant. In a similar way, the parent table's row security policies (see
  <a class=""xref"" href=""ddl-rowsecurity.html"" title=""5.9. Row Security Policies"">
   Section 5.9
  </a>
  ) are applied to rows coming from child tables during an inherited query. A child table's policies, if any, are applied only when it is the table explicitly named in the query; and in that case, any policies attached to its parent(s) are ignored.
 </p>
 <p>
  Foreign tables (see
  <a class=""xref"" href=""ddl-foreign-data.html"" title=""5.13. Foreign Data"">
   Section 5.13
  </a>
  ) can also be part of inheritance hierarchies, either as parent or child tables, just as regular tables can be. If a foreign table is part of an inheritance hierarchy then any operations not supported by the foreign table are not supported on the whole hierarchy either.
 </p>
 <div class=""sect2"" id=""DDL-INHERIT-CAVEATS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.11.1. Caveats
      <a class=""id_link"" href=""#DDL-INHERIT-CAVEATS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Note that not all SQL commands are able to work on inheritance hierarchies. Commands that are used for data querying, data modification, or schema modification (e.g.,
   <code class=""literal"">
    SELECT
   </code>
   ,
   <code class=""literal"">
    UPDATE
   </code>
   ,
   <code class=""literal"">
    DELETE
   </code>
   , most variants of
   <code class=""literal"">
    ALTER TABLE
   </code>
   , but not
   <code class=""literal"">
    INSERT
   </code>
   or
   <code class=""literal"">
    ALTER TABLE ... RENAME
   </code>
   ) typically default to including child tables and support the
   <code class=""literal"">
    ONLY
   </code>
   notation to exclude them. Commands that do database maintenance and tuning (e.g.,
   <code class=""literal"">
    REINDEX
   </code>
   ,
   <code class=""literal"">
    VACUUM
   </code>
   ) typically only work on individual, physical tables and do not support recursing over inheritance hierarchies. The respective behavior of each individual command is documented in its reference page (
   <a class=""xref"" href=""sql-commands.html"" title=""SQL Commands"">
    SQL Commands
   </a>
   ).
  </p>
  <p>
   A serious limitation of the inheritance feature is that indexes (including unique constraints) and foreign key constraints only apply to single tables, not to their inheritance children. This is true on both the referencing and referenced sides of a foreign key constraint. Thus, in the terms of the above example:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      If we declared
      <code class=""structname"">
       cities
      </code>
      .
      <code class=""structfield"">
       name
      </code>
      to be
      <code class=""literal"">
       UNIQUE
      </code>
      or a
      <code class=""literal"">
       PRIMARY KEY
      </code>
      , this would not stop the
      <code class=""structname"">
       capitals
      </code>
      table from having rows with names duplicating rows in
      <code class=""structname"">
       cities
      </code>
      . And those duplicate rows would by default show up in queries from
      <code class=""structname"">
       cities
      </code>
      . In fact, by default
      <code class=""structname"">
       capitals
      </code>
      would have no unique constraint at all, and so could contain multiple rows with the same name. You could add a unique constraint to
      <code class=""structname"">
       capitals
      </code>
      , but this would not prevent duplication compared to
      <code class=""structname"">
       cities
      </code>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Similarly, if we were to specify that
      <code class=""structname"">
       cities
      </code>
      .
      <code class=""structfield"">
       name
      </code>
      <code class=""literal"">
       REFERENCES
      </code>
      some other table, this constraint would not automatically propagate to
      <code class=""structname"">
       capitals
      </code>
      . In this case you could work around it by manually adding the same
      <code class=""literal"">
       REFERENCES
      </code>
      constraint to
      <code class=""structname"">
       capitals
      </code>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Specifying that another table's column
      <code class=""literal"">
       REFERENCES cities(name)
      </code>
      would allow the other table to contain city names, but not capital names. There is no good workaround for this case.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Some functionality not implemented for inheritance hierarchies is implemented for declarative partitioning. Considerable care is needed in deciding whether partitioning with legacy inheritance is useful for your application.
  </p>
 </div>
</div>
"
5. Data Definition,5.12. Table Partitioning,https://www.postgresql.org/docs/17/ddl-partitioning.html,"<div class=""sect1"" id=""DDL-PARTITIONING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.12. Table Partitioning
     <a class=""id_link"" href=""#DDL-PARTITIONING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITIONING-OVERVIEW"">
      5.12.1. Overview
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITIONING-DECLARATIVE"">
      5.12.2. Declarative Partitioning
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITIONING-USING-INHERITANCE"">
      5.12.3. Partitioning Using Inheritance
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITION-PRUNING"">
      5.12.4. Partition Pruning
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITIONING-CONSTRAINT-EXCLUSION"">
      5.12.5. Partitioning and Constraint Exclusion
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""ddl-partitioning.html#DDL-PARTITIONING-DECLARATIVE-BEST-PRACTICES"">
      5.12.6. Best Practices for Declarative Partitioning
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.14.2"" name=""id-1.5.4.14.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.14.3"" name=""id-1.5.4.14.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.14.4"" name=""id-1.5.4.14.4"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  supports basic table partitioning. This section describes why and how to implement partitioning as part of your database design.
 </p>
 <div class=""sect2"" id=""DDL-PARTITIONING-OVERVIEW"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.1. Overview
      <a class=""id_link"" href=""#DDL-PARTITIONING-OVERVIEW"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Partitioning refers to splitting what is logically one large table into smaller physical pieces. Partitioning can provide several benefits:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Query performance can be improved dramatically in certain situations, particularly when most of the heavily accessed rows of the table are in a single partition or a small number of partitions. Partitioning effectively substitutes for the upper tree levels of indexes, making it more likely that the heavily-used parts of the indexes fit in memory.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      When queries or updates access a large percentage of a single partition, performance can be improved by using a sequential scan of that partition instead of using an index, which would require random-access reads scattered across the whole table.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Bulk loads and deletes can be accomplished by adding or removing partitions, if the usage pattern is accounted for in the partitioning design. Dropping an individual partition using
      <code class=""command"">
       DROP TABLE
      </code>
      , or doing
      <code class=""command"">
       ALTER TABLE DETACH PARTITION
      </code>
      , is far faster than a bulk operation. These commands also entirely avoid the
      <code class=""command"">
       VACUUM
      </code>
      overhead caused by a bulk
      <code class=""command"">
       DELETE
      </code>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Seldom-used data can be migrated to cheaper and slower storage media.
     </p>
    </li>
   </ul>
  </div>
  <p>
   These benefits will normally be worthwhile only when a table would otherwise be very large. The exact point at which a table will benefit from partitioning depends on the application, although a rule of thumb is that the size of the table should exceed the physical memory of the database server.
  </p>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   offers built-in support for the following forms of partitioning:
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt id=""DDL-PARTITIONING-OVERVIEW-RANGE"">
     <span class=""term"">
      Range Partitioning
     </span>
     <a class=""id_link"" href=""#DDL-PARTITIONING-OVERVIEW-RANGE"">
      #
     </a>
    </dt>
    <dd>
     <p>
      The table is partitioned into
      <span class=""quote"">
       “
       <span class=""quote"">
        ranges
       </span>
       ”
      </span>
      defined by a key column or set of columns, with no overlap between the ranges of values assigned to different partitions. For example, one might partition by date ranges, or by ranges of identifiers for particular business objects. Each range's bounds are understood as being inclusive at the lower end and exclusive at the upper end. For example, if one partition's range is from
      <code class=""literal"">
       1
      </code>
      to
      <code class=""literal"">
       10
      </code>
      , and the next one's range is from
      <code class=""literal"">
       10
      </code>
      to
      <code class=""literal"">
       20
      </code>
      , then value
      <code class=""literal"">
       10
      </code>
      belongs to the second partition not the first.
     </p>
    </dd>
    <dt id=""DDL-PARTITIONING-OVERVIEW-LIST"">
     <span class=""term"">
      List Partitioning
     </span>
     <a class=""id_link"" href=""#DDL-PARTITIONING-OVERVIEW-LIST"">
      #
     </a>
    </dt>
    <dd>
     <p>
      The table is partitioned by explicitly listing which key value(s) appear in each partition.
     </p>
    </dd>
    <dt id=""DDL-PARTITIONING-OVERVIEW-HASH"">
     <span class=""term"">
      Hash Partitioning
     </span>
     <a class=""id_link"" href=""#DDL-PARTITIONING-OVERVIEW-HASH"">
      #
     </a>
    </dt>
    <dd>
     <p>
      The table is partitioned by specifying a modulus and a remainder for each partition. Each partition will hold the rows for which the hash value of the partition key divided by the specified modulus will produce the specified remainder.
     </p>
    </dd>
   </dl>
  </div>
  <p>
   If your application needs to use other forms of partitioning not listed above, alternative methods such as inheritance and
   <code class=""literal"">
    UNION ALL
   </code>
   views can be used instead. Such methods offer flexibility but do not have some of the performance benefits of built-in declarative partitioning.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-PARTITIONING-DECLARATIVE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.2. Declarative Partitioning
      <a class=""id_link"" href=""#DDL-PARTITIONING-DECLARATIVE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   allows you to declare that a table is divided into partitions. The table that is divided is referred to as a
   <em class=""firstterm"">
    partitioned table
   </em>
   . The declaration includes the
   <em class=""firstterm"">
    partitioning method
   </em>
   as described above, plus a list of columns or expressions to be used as the
   <em class=""firstterm"">
    partition key
   </em>
   .
  </p>
  <p>
   The partitioned table itself is a
   <span class=""quote"">
    “
    <span class=""quote"">
     virtual
    </span>
    ”
   </span>
   table having no storage of its own. Instead, the storage belongs to
   <em class=""firstterm"">
    partitions
   </em>
   , which are otherwise-ordinary tables associated with the partitioned table. Each partition stores a subset of the data as defined by its
   <em class=""firstterm"">
    partition bounds
   </em>
   . All rows inserted into a partitioned table will be routed to the appropriate one of the partitions based on the values of the partition key column(s). Updating the partition key of a row will cause it to be moved into a different partition if it no longer satisfies the partition bounds of its original partition.
  </p>
  <p>
   Partitions may themselves be defined as partitioned tables, resulting in
   <em class=""firstterm"">
    sub-partitioning
   </em>
   . Although all partitions must have the same columns as their partitioned parent, partitions may have their own indexes, constraints and default values, distinct from those of other partitions. See
   <a class=""xref"" href=""sql-createtable.html"" title=""CREATE TABLE"">
    <span class=""refentrytitle"">
     CREATE TABLE
    </span>
   </a>
   for more details on creating partitioned tables and partitions.
  </p>
  <p>
   It is not possible to turn a regular table into a partitioned table or vice versa. However, it is possible to add an existing regular or partitioned table as a partition of a partitioned table, or remove a partition from a partitioned table turning it into a standalone table; this can simplify and speed up many maintenance processes. See
   <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
    <span class=""refentrytitle"">
     ALTER TABLE
    </span>
   </a>
   to learn more about the
   <code class=""command"">
    ATTACH PARTITION
   </code>
   and
   <code class=""command"">
    DETACH PARTITION
   </code>
   sub-commands.
  </p>
  <p>
   Partitions can also be
   <a class=""link"" href=""ddl-foreign-data.html"" title=""5.13. Foreign Data"">
    foreign tables
   </a>
   , although considerable care is needed because it is then the user's responsibility that the contents of the foreign table satisfy the partitioning rule. There are some other restrictions as well. See
   <a class=""xref"" href=""sql-createforeigntable.html"" title=""CREATE FOREIGN TABLE"">
    <span class=""refentrytitle"">
     CREATE FOREIGN TABLE
    </span>
   </a>
   for more information.
  </p>
  <div class=""sect3"" id=""DDL-PARTITIONING-DECLARATIVE-EXAMPLE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.2.1. Example
       <a class=""id_link"" href=""#DDL-PARTITIONING-DECLARATIVE-EXAMPLE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    Suppose we are constructing a database for a large ice cream company. The company measures peak temperatures every day as well as ice cream sales in each region. Conceptually, we want a table like:
   </p>
   <pre class=""programlisting"">
CREATE TABLE measurement (
    city_id         int not null,
    logdate         date not null,
    peaktemp        int,
    unitsales       int
);
</pre>
   <p>
    We know that most queries will access just the last week's, month's or quarter's data, since the main use of this table will be to prepare online reports for management. To reduce the amount of old data that needs to be stored, we decide to keep only the most recent 3 years worth of data. At the beginning of each month we will remove the oldest month's data. In this situation we can use partitioning to help us meet all of our different requirements for the measurements table.
   </p>
   <p>
    To use declarative partitioning in this case, use the following steps:
   </p>
   <div class=""orderedlist"">
    <ol class=""orderedlist compact"" type=""1"">
     <li class=""listitem"">
      <p>
       Create the
       <code class=""structname"">
        measurement
       </code>
       table as a partitioned table by specifying the
       <code class=""literal"">
        PARTITION BY
       </code>
       clause, which includes the partitioning method (
       <code class=""literal"">
        RANGE
       </code>
       in this case) and the list of column(s) to use as the partition key.
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement (
    city_id         int not null,
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (logdate);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       Create partitions. Each partition's definition must specify bounds that correspond to the partitioning method and partition key of the parent. Note that specifying bounds such that the new partition's values would overlap with those in one or more existing partitions will cause an error.
      </p>
      <p>
       Partitions thus created are in every way normal
       <span class=""productname"">
        PostgreSQL
       </span>
       tables (or, possibly, foreign tables). It is possible to specify a tablespace and storage parameters for each partition separately.
      </p>
      <p>
       For our example, each partition should hold one month's worth of data, to match the requirement of deleting one month's data at a time. So the commands might look like:
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement_y2006m02 PARTITION OF measurement
    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01');

CREATE TABLE measurement_y2006m03 PARTITION OF measurement
    FOR VALUES FROM ('2006-03-01') TO ('2006-04-01');

...
CREATE TABLE measurement_y2007m11 PARTITION OF measurement
    FOR VALUES FROM ('2007-11-01') TO ('2007-12-01');

CREATE TABLE measurement_y2007m12 PARTITION OF measurement
    FOR VALUES FROM ('2007-12-01') TO ('2008-01-01')
    TABLESPACE fasttablespace;

CREATE TABLE measurement_y2008m01 PARTITION OF measurement
    FOR VALUES FROM ('2008-01-01') TO ('2008-02-01')
    WITH (parallel_workers = 4)
    TABLESPACE fasttablespace;
</pre>
      <p>
       (Recall that adjacent partitions can share a bound value, since range upper bounds are treated as exclusive bounds.)
      </p>
      <p>
       If you wish to implement sub-partitioning, again specify the
       <code class=""literal"">
        PARTITION BY
       </code>
       clause in the commands used to create individual partitions, for example:
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement_y2006m02 PARTITION OF measurement
    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01')
    PARTITION BY RANGE (peaktemp);
</pre>
      <p>
       After creating partitions of
       <code class=""structname"">
        measurement_y2006m02
       </code>
       , any data inserted into
       <code class=""structname"">
        measurement
       </code>
       that is mapped to
       <code class=""structname"">
        measurement_y2006m02
       </code>
       (or data that is directly inserted into
       <code class=""structname"">
        measurement_y2006m02
       </code>
       , which is allowed provided its partition constraint is satisfied) will be further redirected to one of its partitions based on the
       <code class=""structfield"">
        peaktemp
       </code>
       column. The partition key specified may overlap with the parent's partition key, although care should be taken when specifying the bounds of a sub-partition such that the set of data it accepts constitutes a subset of what the partition's own bounds allow; the system does not try to check whether that's really the case.
      </p>
      <p>
       Inserting data into the parent table that does not map to one of the existing partitions will cause an error; an appropriate partition must be added manually.
      </p>
      <p>
       It is not necessary to manually create table constraints describing the partition boundary conditions for partitions. Such constraints will be created automatically.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Create an index on the key column(s), as well as any other indexes you might want, on the partitioned table. (The key index is not strictly necessary, but in most scenarios it is helpful.) This automatically creates a matching index on each partition, and any partitions you create or attach later will also have such an index. An index or unique constraint declared on a partitioned table is
       <span class=""quote"">
        “
        <span class=""quote"">
         virtual
        </span>
        ”
       </span>
       in the same way that the partitioned table is: the actual data is in child indexes on the individual partition tables.
      </p>
      <pre class=""programlisting"">
CREATE INDEX ON measurement (logdate);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       Ensure that the
       <a class=""xref"" href=""runtime-config-query.html#GUC-ENABLE-PARTITION-PRUNING"">
        enable_partition_pruning
       </a>
       configuration parameter is not disabled in
       <code class=""filename"">
        postgresql.conf
       </code>
       . If it is, queries will not be optimized as desired.
      </p>
     </li>
    </ol>
   </div>
   <p>
    In the above example we would be creating a new partition each month, so it might be wise to write a script that generates the required DDL automatically.
   </p>
  </div>
  <div class=""sect3"" id=""DDL-PARTITIONING-DECLARATIVE-MAINTENANCE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.2.2. Partition Maintenance
       <a class=""id_link"" href=""#DDL-PARTITIONING-DECLARATIVE-MAINTENANCE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    Normally the set of partitions established when initially defining the table is not intended to remain static. It is common to want to remove partitions holding old data and periodically add new partitions for new data. One of the most important advantages of partitioning is precisely that it allows this otherwise painful task to be executed nearly instantaneously by manipulating the partition structure, rather than physically moving large amounts of data around.
   </p>
   <p>
    The simplest option for removing old data is to drop the partition that is no longer necessary:
   </p>
   <pre class=""programlisting"">
DROP TABLE measurement_y2006m02;
</pre>
   <p>
    This can very quickly delete millions of records because it doesn't have to individually delete every record. Note however that the above command requires taking an
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock on the parent table.
   </p>
   <p>
    Another option that is often preferable is to remove the partition from the partitioned table but retain access to it as a table in its own right. This has two forms:
   </p>
   <pre class=""programlisting"">
ALTER TABLE measurement DETACH PARTITION measurement_y2006m02;
ALTER TABLE measurement DETACH PARTITION measurement_y2006m02 CONCURRENTLY;
</pre>
   <p>
    These allow further operations to be performed on the data before it is dropped. For example, this is often a useful time to back up the data using
    <code class=""command"">
     COPY
    </code>
    ,
    <span class=""application"">
     pg_dump
    </span>
    , or similar tools. It might also be a useful time to aggregate data into smaller formats, perform other data manipulations, or run reports. The first form of the command requires an
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock on the parent table. Adding the
    <code class=""literal"">
     CONCURRENTLY
    </code>
    qualifier as in the second form allows the detach operation to require only
    <code class=""literal"">
     SHARE UPDATE EXCLUSIVE
    </code>
    lock on the parent table, but see
    <a class=""link"" href=""sql-altertable.html#SQL-ALTERTABLE-DETACH-PARTITION"">
     <code class=""literal"">
      ALTER TABLE ... DETACH PARTITION
     </code>
    </a>
    for details on the restrictions.
   </p>
   <p>
    Similarly we can add a new partition to handle new data. We can create an empty partition in the partitioned table just as the original partitions were created above:
   </p>
   <pre class=""programlisting"">
CREATE TABLE measurement_y2008m02 PARTITION OF measurement
    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01')
    TABLESPACE fasttablespace;
</pre>
   <p>
    As an alternative to creating a new partition, it is sometimes more convenient to create a new table separate from the partition structure and attach it as a partition later. This allows new data to be loaded, checked, and transformed prior to it appearing in the partitioned table. Moreover, the
    <code class=""literal"">
     ATTACH PARTITION
    </code>
    operation requires only a
    <code class=""literal"">
     SHARE UPDATE EXCLUSIVE
    </code>
    lock on the partitioned table rather than the
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock required by
    <code class=""command"">
     CREATE TABLE ... PARTITION OF
    </code>
    , so it is more friendly to concurrent operations on the partitioned table; see
    <a class=""link"" href=""sql-altertable.html#SQL-ALTERTABLE-ATTACH-PARTITION"">
     <code class=""literal"">
      ALTER TABLE ... ATTACH PARTITION
     </code>
    </a>
    for additional details. The
    <a class=""link"" href=""sql-createtable.html#SQL-CREATETABLE-PARMS-LIKE"">
     <code class=""literal"">
      CREATE TABLE ... LIKE
     </code>
    </a>
    option can be helpful to avoid tediously repeating the parent table's definition; for example:
   </p>
   <pre class=""programlisting"">
CREATE TABLE measurement_y2008m02
  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS)
  TABLESPACE fasttablespace;

ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02
   CHECK ( logdate &gt;= DATE '2008-02-01' AND logdate &lt; DATE '2008-03-01' );

\copy measurement_y2008m02 from 'measurement_y2008m02'
-- possibly some other data preparation work

ALTER TABLE measurement ATTACH PARTITION measurement_y2008m02
    FOR VALUES FROM ('2008-02-01') TO ('2008-03-01' );
</pre>
   <p>
    Note that when running the
    <code class=""command"">
     ATTACH PARTITION
    </code>
    command, the table will be scanned to validate the partition constraint while holding an
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock on that partition. As shown above, it is recommended to avoid this scan by creating a
    <code class=""literal"">
     CHECK
    </code>
    constraint matching the expected partition constraint on the table prior to attaching it. Once the
    <code class=""command"">
     ATTACH PARTITION
    </code>
    is complete, it is recommended to drop the now-redundant
    <code class=""literal"">
     CHECK
    </code>
    constraint. If the table being attached is itself a partitioned table, then each of its sub-partitions will be recursively locked and scanned until either a suitable
    <code class=""literal"">
     CHECK
    </code>
    constraint is encountered or the leaf partitions are reached.
   </p>
   <p>
    Similarly, if the partitioned table has a
    <code class=""literal"">
     DEFAULT
    </code>
    partition, it is recommended to create a
    <code class=""literal"">
     CHECK
    </code>
    constraint which excludes the to-be-attached partition's constraint. If this is not done, the
    <code class=""literal"">
     DEFAULT
    </code>
    partition will be scanned to verify that it contains no records which should be located in the partition being attached. This operation will be performed whilst holding an
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock on the
    <code class=""literal"">
     DEFAULT
    </code>
    partition. If the
    <code class=""literal"">
     DEFAULT
    </code>
    partition is itself a partitioned table, then each of its partitions will be recursively checked in the same way as the table being attached, as mentioned above.
   </p>
   <p>
    As mentioned earlier, it is possible to create indexes on partitioned tables so that they are applied automatically to the entire hierarchy. This can be very convenient as not only will all existing partitions be indexed, but any future partitions will be as well. However, one limitation when creating new indexes on partitioned tables is that it is not possible to use the
    <code class=""literal"">
     CONCURRENTLY
    </code>
    qualifier, which could lead to long lock times. To avoid this, you can use
    <code class=""command"">
     CREATE INDEX ON ONLY
    </code>
    the partitioned table, which creates the new index marked as invalid, preventing automatic application to existing partitions. Instead, indexes can then be created individually on each partition using
    <code class=""literal"">
     CONCURRENTLY
    </code>
    and
    <em class=""firstterm"">
     attached
    </em>
    to the partitioned index on the parent using
    <code class=""command"">
     ALTER INDEX ... ATTACH PARTITION
    </code>
    . Once indexes for all the partitions are attached to the parent index, the parent index will be marked valid automatically. Example:
   </p>
   <pre class=""programlisting"">
CREATE INDEX measurement_usls_idx ON ONLY measurement (unitsales);

CREATE INDEX CONCURRENTLY measurement_usls_200602_idx
    ON measurement_y2006m02 (unitsales);
ALTER INDEX measurement_usls_idx
    ATTACH PARTITION measurement_usls_200602_idx;
...
</pre>
   <p>
    This technique can be used with
    <code class=""literal"">
     UNIQUE
    </code>
    and
    <code class=""literal"">
     PRIMARY KEY
    </code>
    constraints too; the indexes are created implicitly when the constraint is created. Example:
   </p>
   <pre class=""programlisting"">
ALTER TABLE ONLY measurement ADD UNIQUE (city_id, logdate);

ALTER TABLE measurement_y2006m02 ADD UNIQUE (city_id, logdate);
ALTER INDEX measurement_city_id_logdate_key
    ATTACH PARTITION measurement_y2006m02_city_id_logdate_key;
...
</pre>
  </div>
  <div class=""sect3"" id=""DDL-PARTITIONING-DECLARATIVE-LIMITATIONS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.2.3. Limitations
       <a class=""id_link"" href=""#DDL-PARTITIONING-DECLARATIVE-LIMITATIONS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    The following limitations apply to partitioned tables:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       To create a unique or primary key constraint on a partitioned table, the partition keys must not include any expressions or function calls and the constraint's columns must include all of the partition key columns. This limitation exists because the individual indexes making up the constraint can only directly enforce uniqueness within their own partitions; therefore, the partition structure itself must guarantee that there are not duplicates in different partitions.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Similarly an exclusion constraint must include all the partition key columns. Furthermore the constraint must compare those columns for equality (not e.g.
       <code class=""literal"">
        &amp;&amp;
       </code>
       ). Again, this limitation stems from not being able to enforce cross-partition restrictions. The constraint may include additional columns that aren't part of the partition key, and it may compare those with any operators you like.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        BEFORE ROW
       </code>
       triggers on
       <code class=""literal"">
        INSERT
       </code>
       cannot change which partition is the final destination for a new row.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Mixing temporary and permanent relations in the same partition tree is not allowed. Hence, if the partitioned table is permanent, so must be its partitions and likewise if the partitioned table is temporary. When using temporary relations, all members of the partition tree have to be from the same session.
      </p>
     </li>
    </ul>
   </div>
   <p>
    Individual partitions are linked to their partitioned table using inheritance behind-the-scenes. However, it is not possible to use all of the generic features of inheritance with declaratively partitioned tables or their partitions, as discussed below. Notably, a partition cannot have any parents other than the partitioned table it is a partition of, nor can a table inherit from both a partitioned table and a regular table. That means partitioned tables and their partitions never share an inheritance hierarchy with regular tables.
   </p>
   <p>
    Since a partition hierarchy consisting of the partitioned table and its partitions is still an inheritance hierarchy,
    <code class=""structfield"">
     tableoid
    </code>
    and all the normal rules of inheritance apply as described in
    <a class=""xref"" href=""ddl-inherit.html"" title=""5.11. Inheritance"">
     Section 5.11
    </a>
    , with a few exceptions:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       Partitions cannot have columns that are not present in the parent. It is not possible to specify columns when creating partitions with
       <code class=""command"">
        CREATE TABLE
       </code>
       , nor is it possible to add columns to partitions after-the-fact using
       <code class=""command"">
        ALTER TABLE
       </code>
       . Tables may be added as a partition with
       <code class=""command"">
        ALTER TABLE ... ATTACH PARTITION
       </code>
       only if their columns exactly match the parent.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Both
       <code class=""literal"">
        CHECK
       </code>
       and
       <code class=""literal"">
        NOT NULL
       </code>
       constraints of a partitioned table are always inherited by all its partitions.
       <code class=""literal"">
        CHECK
       </code>
       constraints that are marked
       <code class=""literal"">
        NO INHERIT
       </code>
       are not allowed to be created on partitioned tables. You cannot drop a
       <code class=""literal"">
        NOT NULL
       </code>
       constraint on a partition's column if the same constraint is present in the parent table.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Using
       <code class=""literal"">
        ONLY
       </code>
       to add or drop a constraint on only the partitioned table is supported as long as there are no partitions. Once partitions exist, using
       <code class=""literal"">
        ONLY
       </code>
       will result in an error for any constraints other than
       <code class=""literal"">
        UNIQUE
       </code>
       and
       <code class=""literal"">
        PRIMARY KEY
       </code>
       . Instead, constraints on the partitions themselves can be added and (if they are not present in the parent table) dropped.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       As a partitioned table does not have any data itself, attempts to use
       <code class=""command"">
        TRUNCATE
       </code>
       <code class=""literal"">
        ONLY
       </code>
       on a partitioned table will always return an error.
      </p>
     </li>
    </ul>
   </div>
  </div>
 </div>
 <div class=""sect2"" id=""DDL-PARTITIONING-USING-INHERITANCE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.3. Partitioning Using Inheritance
      <a class=""id_link"" href=""#DDL-PARTITIONING-USING-INHERITANCE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   While the built-in declarative partitioning is suitable for most common use cases, there are some circumstances where a more flexible approach may be useful. Partitioning can be implemented using table inheritance, which allows for several features not supported by declarative partitioning, such as:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      For declarative partitioning, partitions must have exactly the same set of columns as the partitioned table, whereas with table inheritance, child tables may have extra columns not present in the parent.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Table inheritance allows for multiple inheritance.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Declarative partitioning only supports range, list and hash partitioning, whereas table inheritance allows data to be divided in a manner of the user's choosing. (Note, however, that if constraint exclusion is unable to prune child tables effectively, query performance might be poor.)
     </p>
    </li>
   </ul>
  </div>
  <div class=""sect3"" id=""DDL-PARTITIONING-INHERITANCE-EXAMPLE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.3.1. Example
       <a class=""id_link"" href=""#DDL-PARTITIONING-INHERITANCE-EXAMPLE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    This example builds a partitioning structure equivalent to the declarative partitioning example above. Use the following steps:
   </p>
   <div class=""orderedlist"">
    <ol class=""orderedlist compact"" type=""1"">
     <li class=""listitem"">
      <p>
       Create the
       <span class=""quote"">
        “
        <span class=""quote"">
         root
        </span>
        ”
       </span>
       table, from which all of the
       <span class=""quote"">
        “
        <span class=""quote"">
         child
        </span>
        ”
       </span>
       tables will inherit. This table will contain no data. Do not define any check constraints on this table, unless you intend them to be applied equally to all child tables. There is no point in defining any indexes or unique constraints on it, either. For our example, the root table is the
       <code class=""structname"">
        measurement
       </code>
       table as originally defined:
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement (
    city_id         int not null,
    logdate         date not null,
    peaktemp        int,
    unitsales       int
);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       Create several
       <span class=""quote"">
        “
        <span class=""quote"">
         child
        </span>
        ”
       </span>
       tables that each inherit from the root table. Normally, these tables will not add any columns to the set inherited from the root. Just as with declarative partitioning, these tables are in every way normal
       <span class=""productname"">
        PostgreSQL
       </span>
       tables (or foreign tables).
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement_y2006m02 () INHERITS (measurement);
CREATE TABLE measurement_y2006m03 () INHERITS (measurement);
...
CREATE TABLE measurement_y2007m11 () INHERITS (measurement);
CREATE TABLE measurement_y2007m12 () INHERITS (measurement);
CREATE TABLE measurement_y2008m01 () INHERITS (measurement);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       Add non-overlapping table constraints to the child tables to define the allowed key values in each.
      </p>
      <p>
       Typical examples would be:
      </p>
      <pre class=""programlisting"">
CHECK ( x = 1 )
CHECK ( county IN ( 'Oxfordshire', 'Buckinghamshire', 'Warwickshire' ))
CHECK ( outletID &gt;= 100 AND outletID &lt; 200 )
</pre>
      <p>
       Ensure that the constraints guarantee that there is no overlap between the key values permitted in different child tables. A common mistake is to set up range constraints like:
      </p>
      <pre class=""programlisting"">
CHECK ( outletID BETWEEN 100 AND 200 )
CHECK ( outletID BETWEEN 200 AND 300 )
</pre>
      <p>
       This is wrong since it is not clear which child table the key value 200 belongs in. Instead, ranges should be defined in this style:
      </p>
      <pre class=""programlisting"">
CREATE TABLE measurement_y2006m02 (
    CHECK ( logdate &gt;= DATE '2006-02-01' AND logdate &lt; DATE '2006-03-01' )
) INHERITS (measurement);

CREATE TABLE measurement_y2006m03 (
    CHECK ( logdate &gt;= DATE '2006-03-01' AND logdate &lt; DATE '2006-04-01' )
) INHERITS (measurement);

...
CREATE TABLE measurement_y2007m11 (
    CHECK ( logdate &gt;= DATE '2007-11-01' AND logdate &lt; DATE '2007-12-01' )
) INHERITS (measurement);

CREATE TABLE measurement_y2007m12 (
    CHECK ( logdate &gt;= DATE '2007-12-01' AND logdate &lt; DATE '2008-01-01' )
) INHERITS (measurement);

CREATE TABLE measurement_y2008m01 (
    CHECK ( logdate &gt;= DATE '2008-01-01' AND logdate &lt; DATE '2008-02-01' )
) INHERITS (measurement);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       For each child table, create an index on the key column(s), as well as any other indexes you might want.
      </p>
      <pre class=""programlisting"">
CREATE INDEX measurement_y2006m02_logdate ON measurement_y2006m02 (logdate);
CREATE INDEX measurement_y2006m03_logdate ON measurement_y2006m03 (logdate);
CREATE INDEX measurement_y2007m11_logdate ON measurement_y2007m11 (logdate);
CREATE INDEX measurement_y2007m12_logdate ON measurement_y2007m12 (logdate);
CREATE INDEX measurement_y2008m01_logdate ON measurement_y2008m01 (logdate);
</pre>
     </li>
     <li class=""listitem"">
      <p>
       We want our application to be able to say
       <code class=""literal"">
        INSERT INTO measurement ...
       </code>
       and have the data be redirected into the appropriate child table. We can arrange that by attaching a suitable trigger function to the root table. If data will be added only to the latest child, we can use a very simple trigger function:
      </p>
      <pre class=""programlisting"">
CREATE OR REPLACE FUNCTION measurement_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO measurement_y2008m01 VALUES (NEW.*);
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;
</pre>
      <p>
       After creating the function, we create a trigger which calls the trigger function:
      </p>
      <pre class=""programlisting"">
CREATE TRIGGER insert_measurement_trigger
    BEFORE INSERT ON measurement
    FOR EACH ROW EXECUTE FUNCTION measurement_insert_trigger();
</pre>
      <p>
       We must redefine the trigger function each month so that it always inserts into the current child table. The trigger definition does not need to be updated, however.
      </p>
      <p>
       We might want to insert data and have the server automatically locate the child table into which the row should be added. We could do this with a more complex trigger function, for example:
      </p>
      <pre class=""programlisting"">
CREATE OR REPLACE FUNCTION measurement_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF ( NEW.logdate &gt;= DATE '2006-02-01' AND
         NEW.logdate &lt; DATE '2006-03-01' ) THEN
        INSERT INTO measurement_y2006m02 VALUES (NEW.*);
    ELSIF ( NEW.logdate &gt;= DATE '2006-03-01' AND
            NEW.logdate &lt; DATE '2006-04-01' ) THEN
        INSERT INTO measurement_y2006m03 VALUES (NEW.*);
    ...
    ELSIF ( NEW.logdate &gt;= DATE '2008-01-01' AND
            NEW.logdate &lt; DATE '2008-02-01' ) THEN
        INSERT INTO measurement_y2008m01 VALUES (NEW.*);
    ELSE
        RAISE EXCEPTION 'Date out of range.  Fix the measurement_insert_trigger() function!';
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;
</pre>
      <p>
       The trigger definition is the same as before. Note that each
       <code class=""literal"">
        IF
       </code>
       test must exactly match the
       <code class=""literal"">
        CHECK
       </code>
       constraint for its child table.
      </p>
      <p>
       While this function is more complex than the single-month case, it doesn't need to be updated as often, since branches can be added in advance of being needed.
      </p>
      <div class=""note"">
       <h3 class=""title"">
        Note
       </h3>
       <p>
        In practice, it might be best to check the newest child first, if most inserts go into that child. For simplicity, we have shown the trigger's tests in the same order as in other parts of this example.
       </p>
      </div>
      <p>
       A different approach to redirecting inserts into the appropriate child table is to set up rules, instead of a trigger, on the root table. For example:
      </p>
      <pre class=""programlisting"">
CREATE RULE measurement_insert_y2006m02 AS
ON INSERT TO measurement WHERE
    ( logdate &gt;= DATE '2006-02-01' AND logdate &lt; DATE '2006-03-01' )
DO INSTEAD
    INSERT INTO measurement_y2006m02 VALUES (NEW.*);
...
CREATE RULE measurement_insert_y2008m01 AS
ON INSERT TO measurement WHERE
    ( logdate &gt;= DATE '2008-01-01' AND logdate &lt; DATE '2008-02-01' )
DO INSTEAD
    INSERT INTO measurement_y2008m01 VALUES (NEW.*);
</pre>
      <p>
       A rule has significantly more overhead than a trigger, but the overhead is paid once per query rather than once per row, so this method might be advantageous for bulk-insert situations. In most cases, however, the trigger method will offer better performance.
      </p>
      <p>
       Be aware that
       <code class=""command"">
        COPY
       </code>
       ignores rules. If you want to use
       <code class=""command"">
        COPY
       </code>
       to insert data, you'll need to copy into the correct child table rather than directly into the root.
       <code class=""command"">
        COPY
       </code>
       does fire triggers, so you can use it normally if you use the trigger approach.
      </p>
      <p>
       Another disadvantage of the rule approach is that there is no simple way to force an error if the set of rules doesn't cover the insertion date; the data will silently go into the root table instead.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Ensure that the
       <a class=""xref"" href=""runtime-config-query.html#GUC-CONSTRAINT-EXCLUSION"">
        constraint_exclusion
       </a>
       configuration parameter is not disabled in
       <code class=""filename"">
        postgresql.conf
       </code>
       ; otherwise child tables may be accessed unnecessarily.
      </p>
     </li>
    </ol>
   </div>
   <p>
    As we can see, a complex table hierarchy could require a substantial amount of DDL. In the above example we would be creating a new child table each month, so it might be wise to write a script that generates the required DDL automatically.
   </p>
  </div>
  <div class=""sect3"" id=""DDL-PARTITIONING-INHERITANCE-MAINTENANCE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.3.2. Maintenance for Inheritance Partitioning
       <a class=""id_link"" href=""#DDL-PARTITIONING-INHERITANCE-MAINTENANCE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    To remove old data quickly, simply drop the child table that is no longer necessary:
   </p>
   <pre class=""programlisting"">
DROP TABLE measurement_y2006m02;
</pre>
   <p>
    To remove the child table from the inheritance hierarchy table but retain access to it as a table in its own right:
   </p>
   <pre class=""programlisting"">
ALTER TABLE measurement_y2006m02 NO INHERIT measurement;
</pre>
   <p>
    To add a new child table to handle new data, create an empty child table just as the original children were created above:
   </p>
   <pre class=""programlisting"">
CREATE TABLE measurement_y2008m02 (
    CHECK ( logdate &gt;= DATE '2008-02-01' AND logdate &lt; DATE '2008-03-01' )
) INHERITS (measurement);
</pre>
   <p>
    Alternatively, one may want to create and populate the new child table before adding it to the table hierarchy. This could allow data to be loaded, checked, and transformed before being made visible to queries on the parent table.
   </p>
   <pre class=""programlisting"">
CREATE TABLE measurement_y2008m02
  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02
   CHECK ( logdate &gt;= DATE '2008-02-01' AND logdate &lt; DATE '2008-03-01' );
\copy measurement_y2008m02 from 'measurement_y2008m02'
-- possibly some other data preparation work
ALTER TABLE measurement_y2008m02 INHERIT measurement;
</pre>
  </div>
  <div class=""sect3"" id=""DDL-PARTITIONING-INHERITANCE-CAVEATS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       5.12.3.3. Caveats
       <a class=""id_link"" href=""#DDL-PARTITIONING-INHERITANCE-CAVEATS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    The following caveats apply to partitioning implemented using inheritance:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       There is no automatic way to verify that all of the
       <code class=""literal"">
        CHECK
       </code>
       constraints are mutually exclusive. It is safer to create code that generates child tables and creates and/or modifies associated objects than to write each by hand.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Indexes and foreign key constraints apply to single tables and not to their inheritance children, hence they have some
       <a class=""link"" href=""ddl-inherit.html#DDL-INHERIT-CAVEATS"" title=""5.11.1. Caveats"">
        caveats
       </a>
       to be aware of.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       The schemes shown here assume that the values of a row's key column(s) never change, or at least do not change enough to require it to move to another partition. An
       <code class=""command"">
        UPDATE
       </code>
       that attempts to do that will fail because of the
       <code class=""literal"">
        CHECK
       </code>
       constraints. If you need to handle such cases, you can put suitable update triggers on the child tables, but it makes management of the structure much more complicated.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       If you are using manual
       <code class=""command"">
        VACUUM
       </code>
       or
       <code class=""command"">
        ANALYZE
       </code>
       commands, don't forget that you need to run them on each child table individually. A command like:
      </p>
      <pre class=""programlisting"">
ANALYZE measurement;
</pre>
      <p>
       will only process the root table.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""command"">
        INSERT
       </code>
       statements with
       <code class=""literal"">
        ON CONFLICT
       </code>
       clauses are unlikely to work as expected, as the
       <code class=""literal"">
        ON CONFLICT
       </code>
       action is only taken in case of unique violations on the specified target relation, not its child relations.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Triggers or rules will be needed to route rows to the desired child table, unless the application is explicitly aware of the partitioning scheme. Triggers may be complicated to write, and will be much slower than the tuple routing performed internally by declarative partitioning.
      </p>
     </li>
    </ul>
   </div>
  </div>
 </div>
 <div class=""sect2"" id=""DDL-PARTITION-PRUNING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.4. Partition Pruning
      <a class=""id_link"" href=""#DDL-PARTITION-PRUNING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.14.9.2"" name=""id-1.5.4.14.9.2"">
  </a>
  <p>
   <em class=""firstterm"">
    Partition pruning
   </em>
   is a query optimization technique that improves performance for declaratively partitioned tables. As an example:
  </p>
  <pre class=""programlisting"">
SET enable_partition_pruning = on;                 -- the default
SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';
</pre>
  <p>
   Without partition pruning, the above query would scan each of the partitions of the
   <code class=""structname"">
    measurement
   </code>
   table. With partition pruning enabled, the planner will examine the definition of each partition and prove that the partition need not be scanned because it could not contain any rows meeting the query's
   <code class=""literal"">
    WHERE
   </code>
   clause. When the planner can prove this, it excludes (
   <em class=""firstterm"">
    prunes
   </em>
   ) the partition from the query plan.
  </p>
  <p>
   By using the EXPLAIN command and the
   <a class=""xref"" href=""runtime-config-query.html#GUC-ENABLE-PARTITION-PRUNING"">
    enable_partition_pruning
   </a>
   configuration parameter, it's possible to show the difference between a plan for which partitions have been pruned and one for which they have not. A typical unoptimized plan for this type of table setup is:
  </p>
  <pre class=""programlisting"">
SET enable_partition_pruning = off;
EXPLAIN SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';
                                    QUERY PLAN
-------------------------------------------------------------------​----------------
 Aggregate  (cost=188.76..188.77 rows=1 width=8)
   -&gt;  Append  (cost=0.00..181.05 rows=3085 width=0)
         -&gt;  Seq Scan on measurement_y2006m02  (cost=0.00..33.12 rows=617 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2006m03  (cost=0.00..33.12 rows=617 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
...
         -&gt;  Seq Scan on measurement_y2007m11  (cost=0.00..33.12 rows=617 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2007m12  (cost=0.00..33.12 rows=617 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2008m01  (cost=0.00..33.12 rows=617 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
</pre>
  <p>
   Some or all of the partitions might use index scans instead of full-table sequential scans, but the point here is that there is no need to scan the older partitions at all to answer this query. When we enable partition pruning, we get a significantly cheaper plan that will deliver the same answer:
  </p>
  <pre class=""programlisting"">
SET enable_partition_pruning = on;
EXPLAIN SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';
                                    QUERY PLAN
-------------------------------------------------------------------​----------------
 Aggregate  (cost=37.75..37.76 rows=1 width=8)
   -&gt;  Seq Scan on measurement_y2008m01  (cost=0.00..33.12 rows=617 width=0)
         Filter: (logdate &gt;= '2008-01-01'::date)
</pre>
  <p>
   Note that partition pruning is driven only by the constraints defined implicitly by the partition keys, not by the presence of indexes. Therefore it isn't necessary to define indexes on the key columns. Whether an index needs to be created for a given partition depends on whether you expect that queries that scan the partition will generally scan a large part of the partition or just a small part. An index will be helpful in the latter case but not the former.
  </p>
  <p>
   Partition pruning can be performed not only during the planning of a given query, but also during its execution. This is useful as it can allow more partitions to be pruned when clauses contain expressions whose values are not known at query planning time, for example, parameters defined in a
   <code class=""command"">
    PREPARE
   </code>
   statement, using a value obtained from a subquery, or using a parameterized value on the inner side of a nested loop join. Partition pruning during execution can be performed at any of the following times:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      During initialization of the query plan. Partition pruning can be performed here for parameter values which are known during the initialization phase of execution. Partitions which are pruned during this stage will not show up in the query's
      <code class=""command"">
       EXPLAIN
      </code>
      or
      <code class=""command"">
       EXPLAIN ANALYZE
      </code>
      . It is possible to determine the number of partitions which were removed during this phase by observing the
      <span class=""quote"">
       “
       <span class=""quote"">
        Subplans Removed
       </span>
       ”
      </span>
      property in the
      <code class=""command"">
       EXPLAIN
      </code>
      output.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      During actual execution of the query plan. Partition pruning may also be performed here to remove partitions using values which are only known during actual query execution. This includes values from subqueries and values from execution-time parameters such as those from parameterized nested loop joins. Since the value of these parameters may change many times during the execution of the query, partition pruning is performed whenever one of the execution parameters being used by partition pruning changes. Determining if partitions were pruned during this phase requires careful inspection of the
      <code class=""literal"">
       loops
      </code>
      property in the
      <code class=""command"">
       EXPLAIN ANALYZE
      </code>
      output. Subplans corresponding to different partitions may have different values for it depending on how many times each of them was pruned during execution. Some may be shown as
      <code class=""literal"">
       (never executed)
      </code>
      if they were pruned every time.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Partition pruning can be disabled using the
   <a class=""xref"" href=""runtime-config-query.html#GUC-ENABLE-PARTITION-PRUNING"">
    enable_partition_pruning
   </a>
   setting.
  </p>
 </div>
 <div class=""sect2"" id=""DDL-PARTITIONING-CONSTRAINT-EXCLUSION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.5. Partitioning and Constraint Exclusion
      <a class=""id_link"" href=""#DDL-PARTITIONING-CONSTRAINT-EXCLUSION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.4.14.10.2"" name=""id-1.5.4.14.10.2"">
  </a>
  <p>
   <em class=""firstterm"">
    Constraint exclusion
   </em>
   is a query optimization technique similar to partition pruning. While it is primarily used for partitioning implemented using the legacy inheritance method, it can be used for other purposes, including with declarative partitioning.
  </p>
  <p>
   Constraint exclusion works in a very similar way to partition pruning, except that it uses each table's
   <code class=""literal"">
    CHECK
   </code>
   constraints — which gives it its name — whereas partition pruning uses the table's partition bounds, which exist only in the case of declarative partitioning. Another difference is that constraint exclusion is only applied at plan time; there is no attempt to remove partitions at execution time.
  </p>
  <p>
   The fact that constraint exclusion uses
   <code class=""literal"">
    CHECK
   </code>
   constraints, which makes it slow compared to partition pruning, can sometimes be used as an advantage: because constraints can be defined even on declaratively-partitioned tables, in addition to their internal partition bounds, constraint exclusion may be able to elide additional partitions from the query plan.
  </p>
  <p>
   The default (and recommended) setting of
   <a class=""xref"" href=""runtime-config-query.html#GUC-CONSTRAINT-EXCLUSION"">
    constraint_exclusion
   </a>
   is neither
   <code class=""literal"">
    on
   </code>
   nor
   <code class=""literal"">
    off
   </code>
   , but an intermediate setting called
   <code class=""literal"">
    partition
   </code>
   , which causes the technique to be applied only to queries that are likely to be working on inheritance partitioned tables. The
   <code class=""literal"">
    on
   </code>
   setting causes the planner to examine
   <code class=""literal"">
    CHECK
   </code>
   constraints in all queries, even simple ones that are unlikely to benefit.
  </p>
  <p>
   The following caveats apply to constraint exclusion:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Constraint exclusion is only applied during query planning, unlike partition pruning, which can also be applied during query execution.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Constraint exclusion only works when the query's
      <code class=""literal"">
       WHERE
      </code>
      clause contains constants (or externally supplied parameters). For example, a comparison against a non-immutable function such as
      <code class=""function"">
       CURRENT_TIMESTAMP
      </code>
      cannot be optimized, since the planner cannot know which child table the function's value might fall into at run time.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Keep the partitioning constraints simple, else the planner may not be able to prove that child tables might not need to be visited. Use simple equality conditions for list partitioning, or simple range tests for range partitioning, as illustrated in the preceding examples. A good rule of thumb is that partitioning constraints should contain only comparisons of the partitioning column(s) to constants using B-tree-indexable operators, because only B-tree-indexable column(s) are allowed in the partition key.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      All constraints on all children of the parent table are examined during constraint exclusion, so large numbers of children are likely to increase query planning time considerably. So the legacy inheritance based partitioning will work well with up to perhaps a hundred child tables; don't try to use many thousands of children.
     </p>
    </li>
   </ul>
  </div>
 </div>
 <div class=""sect2"" id=""DDL-PARTITIONING-DECLARATIVE-BEST-PRACTICES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      5.12.6. Best Practices for Declarative Partitioning
      <a class=""id_link"" href=""#DDL-PARTITIONING-DECLARATIVE-BEST-PRACTICES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The choice of how to partition a table should be made carefully, as the performance of query planning and execution can be negatively affected by poor design.
  </p>
  <p>
   One of the most critical design decisions will be the column or columns by which you partition your data. Often the best choice will be to partition by the column or set of columns which most commonly appear in
   <code class=""literal"">
    WHERE
   </code>
   clauses of queries being executed on the partitioned table.
   <code class=""literal"">
    WHERE
   </code>
   clauses that are compatible with the partition bound constraints can be used to prune unneeded partitions. However, you may be forced into making other decisions by requirements for the
   <code class=""literal"">
    PRIMARY KEY
   </code>
   or a
   <code class=""literal"">
    UNIQUE
   </code>
   constraint. Removal of unwanted data is also a factor to consider when planning your partitioning strategy. An entire partition can be detached fairly quickly, so it may be beneficial to design the partition strategy in such a way that all data to be removed at once is located in a single partition.
  </p>
  <p>
   Choosing the target number of partitions that the table should be divided into is also a critical decision to make. Not having enough partitions may mean that indexes remain too large and that data locality remains poor which could result in low cache hit ratios. However, dividing the table into too many partitions can also cause issues. Too many partitions can mean longer query planning times and higher memory consumption during both query planning and execution, as further described below. When choosing how to partition your table, it's also important to consider what changes may occur in the future. For example, if you choose to have one partition per customer and you currently have a small number of large customers, consider the implications if in several years you instead find yourself with a large number of small customers. In this case, it may be better to choose to partition by
   <code class=""literal"">
    HASH
   </code>
   and choose a reasonable number of partitions rather than trying to partition by
   <code class=""literal"">
    LIST
   </code>
   and hoping that the number of customers does not increase beyond what it is practical to partition the data by.
  </p>
  <p>
   Sub-partitioning can be useful to further divide partitions that are expected to become larger than other partitions. Another option is to use range partitioning with multiple columns in the partition key. Either of these can easily lead to excessive numbers of partitions, so restraint is advisable.
  </p>
  <p>
   It is important to consider the overhead of partitioning during query planning and execution. The query planner is generally able to handle partition hierarchies with up to a few thousand partitions fairly well, provided that typical queries allow the query planner to prune all but a small number of partitions. Planning times become longer and memory consumption becomes higher when more partitions remain after the planner performs partition pruning. Another reason to be concerned about having a large number of partitions is that the server's memory consumption may grow significantly over time, especially if many sessions touch large numbers of partitions. That's because each partition requires its metadata to be loaded into the local memory of each session that touches it.
  </p>
  <p>
   With data warehouse type workloads, it can make sense to use a larger number of partitions than with an
   <acronym class=""acronym"">
    OLTP
   </acronym>
   type workload. Generally, in data warehouses, query planning time is less of a concern as the majority of processing time is spent during query execution. With either of these two types of workload, it is important to make the right decisions early, as re-partitioning large quantities of data can be painfully slow. Simulations of the intended workload are often beneficial for optimizing the partitioning strategy. Never just assume that more partitions are better than fewer partitions, nor vice-versa.
  </p>
 </div>
</div>
"
5. Data Definition,5.13. Foreign Data,https://www.postgresql.org/docs/17/ddl-foreign-data.html,"<div class=""sect1"" id=""DDL-FOREIGN-DATA"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.13. Foreign Data
     <a class=""id_link"" href=""#DDL-FOREIGN-DATA"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.15.2"" name=""id-1.5.4.15.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.15.3"" name=""id-1.5.4.15.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.15.4"" name=""id-1.5.4.15.4"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  implements portions of the SQL/MED specification, allowing you to access data that resides outside PostgreSQL using regular SQL queries. Such data is referred to as
  <em class=""firstterm"">
   foreign data
  </em>
  . (Note that this usage is not to be confused with foreign keys, which are a type of constraint within the database.)
 </p>
 <p>
  Foreign data is accessed with help from a
  <em class=""firstterm"">
   foreign data wrapper
  </em>
  . A foreign data wrapper is a library that can communicate with an external data source, hiding the details of connecting to the data source and obtaining data from it. There are some foreign data wrappers available as
  <code class=""filename"">
   contrib
  </code>
  modules; see
  <a class=""xref"" href=""contrib.html"" title=""Appendix F. Additional Supplied Modules and Extensions"">
   Appendix F
  </a>
  . Other kinds of foreign data wrappers might be found as third party products. If none of the existing foreign data wrappers suit your needs, you can write your own; see
  <a class=""xref"" href=""fdwhandler.html"" title=""Chapter 57. Writing a Foreign Data Wrapper"">
   Chapter 57
  </a>
  .
 </p>
 <p>
  To access foreign data, you need to create a
  <em class=""firstterm"">
   foreign server
  </em>
  object, which defines how to connect to a particular external data source according to the set of options used by its supporting foreign data wrapper. Then you need to create one or more
  <em class=""firstterm"">
   foreign tables
  </em>
  , which define the structure of the remote data. A foreign table can be used in queries just like a normal table, but a foreign table has no storage in the PostgreSQL server. Whenever it is used,
  <span class=""productname"">
   PostgreSQL
  </span>
  asks the foreign data wrapper to fetch data from the external source, or transmit data to the external source in the case of update commands.
 </p>
 <p>
  Accessing remote data may require authenticating to the external data source. This information can be provided by a
  <em class=""firstterm"">
   user mapping
  </em>
  , which can provide additional data such as user names and passwords based on the current
  <span class=""productname"">
   PostgreSQL
  </span>
  role.
 </p>
 <p>
  For additional information, see
  <a class=""xref"" href=""sql-createforeigndatawrapper.html"" title=""CREATE FOREIGN DATA WRAPPER"">
   <span class=""refentrytitle"">
    CREATE FOREIGN DATA WRAPPER
   </span>
  </a>
  ,
  <a class=""xref"" href=""sql-createserver.html"" title=""CREATE SERVER"">
   <span class=""refentrytitle"">
    CREATE SERVER
   </span>
  </a>
  ,
  <a class=""xref"" href=""sql-createusermapping.html"" title=""CREATE USER MAPPING"">
   <span class=""refentrytitle"">
    CREATE USER MAPPING
   </span>
  </a>
  ,
  <a class=""xref"" href=""sql-createforeigntable.html"" title=""CREATE FOREIGN TABLE"">
   <span class=""refentrytitle"">
    CREATE FOREIGN TABLE
   </span>
  </a>
  , and
  <a class=""xref"" href=""sql-importforeignschema.html"" title=""IMPORT FOREIGN SCHEMA"">
   <span class=""refentrytitle"">
    IMPORT FOREIGN SCHEMA
   </span>
  </a>
  .
 </p>
</div>
"
5. Data Definition,5.14. Other Database Objects,https://www.postgresql.org/docs/17/ddl-others.html,"<div class=""sect1"" id=""DDL-OTHERS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.14. Other Database Objects
     <a class=""id_link"" href=""#DDL-OTHERS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Tables are the central objects in a relational database structure, because they hold your data. But they are not the only objects that exist in a database. Many other kinds of objects can be created to make the use and management of the data more efficient or convenient. They are not discussed in this chapter, but we give you a list here so that you are aware of what is possible:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Views
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Functions, procedures, and operators
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Data types and domains
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Triggers and rewrite rules
    </p>
   </li>
  </ul>
 </div>
 <p>
  Detailed information on these topics appears in
  <a class=""xref"" href=""server-programming.html"" title=""Part V. Server Programming"">
   Part V
  </a>
  .
 </p>
</div>
"
5. Data Definition,5.15. Dependency Tracking,https://www.postgresql.org/docs/17/ddl-depend.html,"<div class=""sect1"" id=""DDL-DEPEND"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     5.15. Dependency Tracking
     <a class=""id_link"" href=""#DDL-DEPEND"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.4.17.2"" name=""id-1.5.4.17.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.4.17.3"" name=""id-1.5.4.17.3"">
 </a>
 <p>
  When you create complex database structures involving many tables with foreign key constraints, views, triggers, functions, etc. you implicitly create a net of dependencies between the objects. For instance, a table with a foreign key constraint depends on the table it references.
 </p>
 <p>
  To ensure the integrity of the entire database structure,
  <span class=""productname"">
   PostgreSQL
  </span>
  makes sure that you cannot drop objects that other objects still depend on. For example, attempting to drop the products table we considered in
  <a class=""xref"" href=""ddl-constraints.html#DDL-CONSTRAINTS-FK"" title=""5.5.5. Foreign Keys"">
   Section 5.5.5
  </a>
  , with the orders table depending on it, would result in an error message like this:
 </p>
 <pre class=""screen"">
DROP TABLE products;

ERROR:  cannot drop table products because other objects depend on it
DETAIL:  constraint orders_product_no_fkey on table orders depends on table products
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
</pre>
 <p>
  The error message contains a useful hint: if you do not want to bother deleting all the dependent objects individually, you can run:
 </p>
 <pre class=""screen"">
DROP TABLE products CASCADE;
</pre>
 <p>
  and all the dependent objects will be removed, as will any objects that depend on them, recursively. In this case, it doesn't remove the orders table, it only removes the foreign key constraint. It stops there because nothing depends on the foreign key constraint. (If you want to check what
  <code class=""command"">
   DROP ... CASCADE
  </code>
  will do, run
  <code class=""command"">
   DROP
  </code>
  without
  <code class=""literal"">
   CASCADE
  </code>
  and read the
  <code class=""literal"">
   DETAIL
  </code>
  output.)
 </p>
 <p>
  Almost all
  <code class=""command"">
   DROP
  </code>
  commands in
  <span class=""productname"">
   PostgreSQL
  </span>
  support specifying
  <code class=""literal"">
   CASCADE
  </code>
  . Of course, the nature of the possible dependencies varies with the type of the object. You can also write
  <code class=""literal"">
   RESTRICT
  </code>
  instead of
  <code class=""literal"">
   CASCADE
  </code>
  to get the default behavior, which is to prevent dropping objects that any other objects depend on.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   According to the SQL standard, specifying either
   <code class=""literal"">
    RESTRICT
   </code>
   or
   <code class=""literal"">
    CASCADE
   </code>
   is required in a
   <code class=""command"">
    DROP
   </code>
   command. No database system actually enforces that rule, but whether the default behavior is
   <code class=""literal"">
    RESTRICT
   </code>
   or
   <code class=""literal"">
    CASCADE
   </code>
   varies across systems.
  </p>
 </div>
 <p>
  If a
  <code class=""command"">
   DROP
  </code>
  command lists multiple objects,
  <code class=""literal"">
   CASCADE
  </code>
  is only required when there are dependencies outside the specified group. For example, when saying
  <code class=""literal"">
   DROP TABLE tab1, tab2
  </code>
  the existence of a foreign key referencing
  <code class=""literal"">
   tab1
  </code>
  from
  <code class=""literal"">
   tab2
  </code>
  would not mean that
  <code class=""literal"">
   CASCADE
  </code>
  is needed to succeed.
 </p>
 <p>
  For a user-defined function or procedure whose body is defined as a string literal,
  <span class=""productname"">
   PostgreSQL
  </span>
  tracks dependencies associated with the function's externally-visible properties, such as its argument and result types, but
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  dependencies that could only be known by examining the function body. As an example, consider this situation:
 </p>
 <pre class=""programlisting"">
CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow',
                             'green', 'blue', 'purple');

CREATE TABLE my_colors (color rainbow, note text);

CREATE FUNCTION get_color_note (rainbow) RETURNS text AS
  'SELECT note FROM my_colors WHERE color = $1'
  LANGUAGE SQL;
</pre>
 <p>
  (See
  <a class=""xref"" href=""xfunc-sql.html"" title=""36.5. Query Language (SQL) Functions"">
   Section 36.5
  </a>
  for an explanation of SQL-language functions.)
  <span class=""productname"">
   PostgreSQL
  </span>
  will be aware that the
  <code class=""function"">
   get_color_note
  </code>
  function depends on the
  <code class=""type"">
   rainbow
  </code>
  type: dropping the type would force dropping the function, because its argument type would no longer be defined. But
  <span class=""productname"">
   PostgreSQL
  </span>
  will not consider
  <code class=""function"">
   get_color_note
  </code>
  to depend on the
  <code class=""structname"">
   my_colors
  </code>
  table, and so will not drop the function if the table is dropped. While there are disadvantages to this approach, there are also benefits. The function is still valid in some sense if the table is missing, though executing it would cause an error; creating a new table of the same name would allow the function to work again.
 </p>
 <p>
  On the other hand, for an SQL-language function or procedure whose body is written in SQL-standard style, the body is parsed at function definition time and all dependencies recognized by the parser are stored. Thus, if we write the function above as
 </p>
 <pre class=""programlisting"">
CREATE FUNCTION get_color_note (rainbow) RETURNS text
BEGIN ATOMIC
  SELECT note FROM my_colors WHERE color = $1;
END;
</pre>
 <p>
  then the function's dependency on the
  <code class=""structname"">
   my_colors
  </code>
  table will be known and enforced by
  <code class=""command"">
   DROP
  </code>
  .
 </p>
</div>
"
6. Data Manipulation,6.1. Inserting Data,https://www.postgresql.org/docs/17/dml-insert.html,"<div class=""sect1"" id=""DML-INSERT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     6.1. Inserting Data
     <a class=""id_link"" href=""#DML-INSERT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.5.3.2"" name=""id-1.5.5.3.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.3.3"" name=""id-1.5.5.3.3"">
 </a>
 <p>
  When a table is created, it contains no data. The first thing to do before a database can be of much use is to insert data. Data is inserted one row at a time. You can also insert more than one row in a single command, but it is not possible to insert something that is not a complete row. Even if you know only some column values, a complete row must be created.
 </p>
 <p>
  To create a new row, use the
  <a class=""xref"" href=""sql-insert.html"" title=""INSERT"">
   <span class=""refentrytitle"">
    INSERT
   </span>
  </a>
  command. The command requires the table name and column values. For example, consider the products table from
  <a class=""xref"" href=""ddl.html"" title=""Chapter 5. Data Definition"">
   Chapter 5
  </a>
  :
 </p>
 <pre class=""programlisting"">
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</pre>
 <p>
  An example command to insert a row would be:
 </p>
 <pre class=""programlisting"">
INSERT INTO products VALUES (1, 'Cheese', 9.99);
</pre>
 <p>
  The data values are listed in the order in which the columns appear in the table, separated by commas. Usually, the data values will be literals (constants), but scalar expressions are also allowed.
 </p>
 <p>
  The above syntax has the drawback that you need to know the order of the columns in the table. To avoid this you can also list the columns explicitly. For example, both of the following commands have the same effect as the one above:
 </p>
 <pre class=""programlisting"">
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);
INSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);
</pre>
 <p>
  Many users consider it good practice to always list the column names.
 </p>
 <p>
  If you don't have values for all the columns, you can omit some of them. In that case, the columns will be filled with their default values. For example:
 </p>
 <pre class=""programlisting"">
INSERT INTO products (product_no, name) VALUES (1, 'Cheese');
INSERT INTO products VALUES (1, 'Cheese');
</pre>
 <p>
  The second form is a
  <span class=""productname"">
   PostgreSQL
  </span>
  extension. It fills the columns from the left with as many values as are given, and the rest will be defaulted.
 </p>
 <p>
  For clarity, you can also request default values explicitly, for individual columns or for the entire row:
 </p>
 <pre class=""programlisting"">
INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);
INSERT INTO products DEFAULT VALUES;
</pre>
 <p>
  You can insert multiple rows in a single command:
 </p>
 <pre class=""programlisting"">
INSERT INTO products (product_no, name, price) VALUES
    (1, 'Cheese', 9.99),
    (2, 'Bread', 1.99),
    (3, 'Milk', 2.99);
</pre>
 <p>
  It is also possible to insert the result of a query (which might be no rows, one row, or many rows):
 </p>
 <pre class=""programlisting"">
INSERT INTO products (product_no, name, price)
  SELECT product_no, name, price FROM new_products
    WHERE release_date = 'today';
</pre>
 <p>
  This provides the full power of the SQL query mechanism (
  <a class=""xref"" href=""queries.html"" title=""Chapter 7. Queries"">
   Chapter 7
  </a>
  ) for computing the rows to be inserted.
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   When inserting a lot of data at the same time, consider using the
   <a class=""xref"" href=""sql-copy.html"" title=""COPY"">
    <span class=""refentrytitle"">
     COPY
    </span>
   </a>
   command. It is not as flexible as the
   <a class=""xref"" href=""sql-insert.html"" title=""INSERT"">
    <span class=""refentrytitle"">
     INSERT
    </span>
   </a>
   command, but is more efficient. Refer to
   <a class=""xref"" href=""populate.html"" title=""14.4. Populating a Database"">
    Section 14.4
   </a>
   for more information on improving bulk loading performance.
  </p>
 </div>
</div>
"
6. Data Manipulation,6.2. Updating Data,https://www.postgresql.org/docs/17/dml-update.html,"<div class=""sect1"" id=""DML-UPDATE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     6.2. Updating Data
     <a class=""id_link"" href=""#DML-UPDATE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.5.4.2"" name=""id-1.5.5.4.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.4.3"" name=""id-1.5.5.4.3"">
 </a>
 <p>
  The modification of data that is already in the database is referred to as updating. You can update individual rows, all the rows in a table, or a subset of all rows. Each column can be updated separately; the other columns are not affected.
 </p>
 <p>
  To update existing rows, use the
  <a class=""xref"" href=""sql-update.html"" title=""UPDATE"">
   <span class=""refentrytitle"">
    UPDATE
   </span>
  </a>
  command. This requires three pieces of information:
 </p>
 <div class=""orderedlist"">
  <ol class=""orderedlist compact"" type=""1"">
   <li class=""listitem"">
    <p>
     The name of the table and column to update
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The new value of the column
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Which row(s) to update
    </p>
   </li>
  </ol>
 </div>
 <p>
  Recall from
  <a class=""xref"" href=""ddl.html"" title=""Chapter 5. Data Definition"">
   Chapter 5
  </a>
  that SQL does not, in general, provide a unique identifier for rows. Therefore it is not always possible to directly specify which row to update. Instead, you specify which conditions a row must meet in order to be updated. Only if you have a primary key in the table (independent of whether you declared it or not) can you reliably address individual rows by choosing a condition that matches the primary key. Graphical database access tools rely on this fact to allow you to update rows individually.
 </p>
 <p>
  For example, this command updates all products that have a price of 5 to have a price of 10:
 </p>
 <pre class=""programlisting"">
UPDATE products SET price = 10 WHERE price = 5;
</pre>
 <p>
  This might cause zero, one, or many rows to be updated. It is not an error to attempt an update that does not match any rows.
 </p>
 <p>
  Let's look at that command in detail. First is the key word
  <code class=""literal"">
   UPDATE
  </code>
  followed by the table name. As usual, the table name can be schema-qualified, otherwise it is looked up in the path. Next is the key word
  <code class=""literal"">
   SET
  </code>
  followed by the column name, an equal sign, and the new column value. The new column value can be any scalar expression, not just a constant. For example, if you want to raise the price of all products by 10% you could use:
 </p>
 <pre class=""programlisting"">
UPDATE products SET price = price * 1.10;
</pre>
 <p>
  As you see, the expression for the new value can refer to the existing value(s) in the row. We also left out the
  <code class=""literal"">
   WHERE
  </code>
  clause. If it is omitted, it means that all rows in the table are updated. If it is present, only those rows that match the
  <code class=""literal"">
   WHERE
  </code>
  condition are updated. Note that the equals sign in the
  <code class=""literal"">
   SET
  </code>
  clause is an assignment while the one in the
  <code class=""literal"">
   WHERE
  </code>
  clause is a comparison, but this does not create any ambiguity. Of course, the
  <code class=""literal"">
   WHERE
  </code>
  condition does not have to be an equality test. Many other operators are available (see
  <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
   Chapter 9
  </a>
  ). But the expression needs to evaluate to a Boolean result.
 </p>
 <p>
  You can update more than one column in an
  <code class=""command"">
   UPDATE
  </code>
  command by listing more than one assignment in the
  <code class=""literal"">
   SET
  </code>
  clause. For example:
 </p>
 <pre class=""programlisting"">
UPDATE mytable SET a = 5, b = 3, c = 1 WHERE a &gt; 0;
</pre>
</div>
"
6. Data Manipulation,6.3. Deleting Data,https://www.postgresql.org/docs/17/dml-delete.html,"<div class=""sect1"" id=""DML-DELETE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     6.3. Deleting Data
     <a class=""id_link"" href=""#DML-DELETE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.5.5.2"" name=""id-1.5.5.5.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.5.3"" name=""id-1.5.5.5.3"">
 </a>
 <p>
  So far we have explained how to add data to tables and how to change data. What remains is to discuss how to remove data that is no longer needed. Just as adding data is only possible in whole rows, you can only remove entire rows from a table. In the previous section we explained that SQL does not provide a way to directly address individual rows. Therefore, removing rows can only be done by specifying conditions that the rows to be removed have to match. If you have a primary key in the table then you can specify the exact row. But you can also remove groups of rows matching a condition, or you can remove all rows in the table at once.
 </p>
 <p>
  You use the
  <a class=""xref"" href=""sql-delete.html"" title=""DELETE"">
   <span class=""refentrytitle"">
    DELETE
   </span>
  </a>
  command to remove rows; the syntax is very similar to the
  <a class=""xref"" href=""sql-update.html"" title=""UPDATE"">
   <span class=""refentrytitle"">
    UPDATE
   </span>
  </a>
  command. For instance, to remove all rows from the products table that have a price of 10, use:
 </p>
 <pre class=""programlisting"">
DELETE FROM products WHERE price = 10;
</pre>
 <p>
  If you simply write:
 </p>
 <pre class=""programlisting"">
DELETE FROM products;
</pre>
 <p>
  then all rows in the table will be deleted! Caveat programmer.
 </p>
</div>
"
6. Data Manipulation,6.4. Returning Data from Modified Rows,https://www.postgresql.org/docs/17/dml-returning.html,"<div class=""sect1"" id=""DML-RETURNING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     6.4. Returning Data from Modified Rows
     <a class=""id_link"" href=""#DML-RETURNING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.5.6.2"" name=""id-1.5.5.6.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.6.3"" name=""id-1.5.5.6.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.6.4"" name=""id-1.5.5.6.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.6.5"" name=""id-1.5.5.6.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.5.6.6"" name=""id-1.5.5.6.6"">
 </a>
 <p>
  Sometimes it is useful to obtain data from modified rows while they are being manipulated. The
  <code class=""command"">
   INSERT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  ,
  <code class=""command"">
   DELETE
  </code>
  , and
  <code class=""command"">
   MERGE
  </code>
  commands all have an optional
  <code class=""literal"">
   RETURNING
  </code>
  clause that supports this. Use of
  <code class=""literal"">
   RETURNING
  </code>
  avoids performing an extra database query to collect the data, and is especially valuable when it would otherwise be difficult to identify the modified rows reliably.
 </p>
 <p>
  The allowed contents of a
  <code class=""literal"">
   RETURNING
  </code>
  clause are the same as a
  <code class=""command"">
   SELECT
  </code>
  command's output list (see
  <a class=""xref"" href=""queries-select-lists.html"" title=""7.3. Select Lists"">
   Section 7.3
  </a>
  ). It can contain column names of the command's target table, or value expressions using those columns. A common shorthand is
  <code class=""literal"">
   RETURNING *
  </code>
  , which selects all columns of the target table in order.
 </p>
 <p>
  In an
  <code class=""command"">
   INSERT
  </code>
  , the data available to
  <code class=""literal"">
   RETURNING
  </code>
  is the row as it was inserted. This is not so useful in trivial inserts, since it would just repeat the data provided by the client. But it can be very handy when relying on computed default values. For example, when using a
  <a class=""link"" href=""datatype-numeric.html#DATATYPE-SERIAL"" title=""8.1.4. Serial Types"">
   <code class=""type"">
    serial
   </code>
  </a>
  column to provide unique identifiers,
  <code class=""literal"">
   RETURNING
  </code>
  can return the ID assigned to a new row:
 </p>
 <pre class=""programlisting"">
CREATE TABLE users (firstname text, lastname text, id serial primary key);

INSERT INTO users (firstname, lastname) VALUES ('Joe', 'Cool') RETURNING id;
</pre>
 <p>
  The
  <code class=""literal"">
   RETURNING
  </code>
  clause is also very useful with
  <code class=""literal"">
   INSERT ... SELECT
  </code>
  .
 </p>
 <p>
  In an
  <code class=""command"">
   UPDATE
  </code>
  , the data available to
  <code class=""literal"">
   RETURNING
  </code>
  is the new content of the modified row. For example:
 </p>
 <pre class=""programlisting"">
UPDATE products SET price = price * 1.10
  WHERE price &lt;= 99.99
  RETURNING name, price AS new_price;
</pre>
 <p>
  In a
  <code class=""command"">
   DELETE
  </code>
  , the data available to
  <code class=""literal"">
   RETURNING
  </code>
  is the content of the deleted row. For example:
 </p>
 <pre class=""programlisting"">
DELETE FROM products
  WHERE obsoletion_date = 'today'
  RETURNING *;
</pre>
 <p>
  In a
  <code class=""command"">
   MERGE
  </code>
  , the data available to
  <code class=""literal"">
   RETURNING
  </code>
  is the content of the source row plus the content of the inserted, updated, or deleted target row. Since it is quite common for the source and target to have many of the same columns, specifying
  <code class=""literal"">
   RETURNING *
  </code>
  can lead to a lot of duplicated columns, so it is often more useful to qualify it so as to return just the source or target row. For example:
 </p>
 <pre class=""programlisting"">
MERGE INTO products p USING new_products n ON p.product_no = n.product_no
  WHEN NOT MATCHED THEN INSERT VALUES (n.product_no, n.name, n.price)
  WHEN MATCHED THEN UPDATE SET name = n.name, price = n.price
  RETURNING p.*;
</pre>
 <p>
  If there are triggers (
  <a class=""xref"" href=""triggers.html"" title=""Chapter 37. Triggers"">
   Chapter 37
  </a>
  ) on the target table, the data available to
  <code class=""literal"">
   RETURNING
  </code>
  is the row as modified by the triggers. Thus, inspecting columns computed by triggers is another common use-case for
  <code class=""literal"">
   RETURNING
  </code>
  .
 </p>
</div>
"
7. Queries,7.1. Overview,https://www.postgresql.org/docs/17/queries-overview.html,"<div class=""sect1"" id=""QUERIES-OVERVIEW"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.1. Overview
     <a class=""id_link"" href=""#QUERIES-OVERVIEW"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  The process of retrieving or the command to retrieve data from a database is called a
  <em class=""firstterm"">
   query
  </em>
  . In SQL the
  <a class=""link"" href=""sql-select.html"" title=""SELECT"">
   <code class=""command"">
    SELECT
   </code>
  </a>
  command is used to specify queries. The general syntax of the
  <code class=""command"">
   SELECT
  </code>
  command is
 </p>
 <pre class=""synopsis"">
[<span class=""optional"">WITH <em class=""replaceable""><code>with_queries</code></em></span>] SELECT <em class=""replaceable""><code>select_list</code></em> FROM <em class=""replaceable""><code>table_expression</code></em> [<span class=""optional""><em class=""replaceable""><code>sort_specification</code></em></span>]
</pre>
 <p>
  The following sections describe the details of the select list, the table expression, and the sort specification.
  <code class=""literal"">
   WITH
  </code>
  queries are treated last since they are an advanced feature.
 </p>
 <p>
  A simple kind of query has the form:
 </p>
 <pre class=""programlisting"">
SELECT * FROM table1;
</pre>
 <p>
  Assuming that there is a table called
  <code class=""literal"">
   table1
  </code>
  , this command would retrieve all rows and all user-defined columns from
  <code class=""literal"">
   table1
  </code>
  . (The method of retrieval depends on the client application. For example, the
  <span class=""application"">
   psql
  </span>
  program will display an ASCII-art table on the screen, while client libraries will offer functions to extract individual values from the query result.) The select list specification
  <code class=""literal"">
   *
  </code>
  means all columns that the table expression happens to provide. A select list can also select a subset of the available columns or make calculations using the columns. For example, if
  <code class=""literal"">
   table1
  </code>
  has columns named
  <code class=""literal"">
   a
  </code>
  ,
  <code class=""literal"">
   b
  </code>
  , and
  <code class=""literal"">
   c
  </code>
  (and perhaps others) you can make the following query:
 </p>
 <pre class=""programlisting"">
SELECT a, b + c FROM table1;
</pre>
 <p>
  (assuming that
  <code class=""literal"">
   b
  </code>
  and
  <code class=""literal"">
   c
  </code>
  are of a numerical data type). See
  <a class=""xref"" href=""queries-select-lists.html"" title=""7.3. Select Lists"">
   Section 7.3
  </a>
  for more details.
 </p>
 <p>
  <code class=""literal"">
   FROM table1
  </code>
  is a simple kind of table expression: it reads just one table. In general, table expressions can be complex constructs of base tables, joins, and subqueries. But you can also omit the table expression entirely and use the
  <code class=""command"">
   SELECT
  </code>
  command as a calculator:
 </p>
 <pre class=""programlisting"">
SELECT 3 * 4;
</pre>
 <p>
  This is more useful if the expressions in the select list return varying results. For example, you could call a function this way:
 </p>
 <pre class=""programlisting"">
SELECT random();
</pre>
</div>
"
7. Queries,7.2. Table Expressions,https://www.postgresql.org/docs/17/queries-table-expressions.html,"<div class=""sect1"" id=""QUERIES-TABLE-EXPRESSIONS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.2. Table Expressions
     <a class=""id_link"" href=""#QUERIES-TABLE-EXPRESSIONS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""queries-table-expressions.html#QUERIES-FROM"">
      7.2.1. The
      <code class=""literal"">
       FROM
      </code>
      Clause
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-table-expressions.html#QUERIES-WHERE"">
      7.2.2. The
      <code class=""literal"">
       WHERE
      </code>
      Clause
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-table-expressions.html#QUERIES-GROUP"">
      7.2.3. The
      <code class=""literal"">
       GROUP BY
      </code>
      and
      <code class=""literal"">
       HAVING
      </code>
      Clauses
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-table-expressions.html#QUERIES-GROUPING-SETS"">
      7.2.4.
      <code class=""literal"">
       GROUPING SETS
      </code>
      ,
      <code class=""literal"">
       CUBE
      </code>
      , and
      <code class=""literal"">
       ROLLUP
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-table-expressions.html#QUERIES-WINDOW"">
      7.2.5. Window Function Processing
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.6.2"" name=""id-1.5.6.6.2"">
 </a>
 <p>
  A
  <em class=""firstterm"">
   table expression
  </em>
  computes a table. The table expression contains a
  <code class=""literal"">
   FROM
  </code>
  clause that is optionally followed by
  <code class=""literal"">
   WHERE
  </code>
  ,
  <code class=""literal"">
   GROUP BY
  </code>
  , and
  <code class=""literal"">
   HAVING
  </code>
  clauses. Trivial table expressions simply refer to a table on disk, a so-called base table, but more complex expressions can be used to modify or combine base tables in various ways.
 </p>
 <p>
  The optional
  <code class=""literal"">
   WHERE
  </code>
  ,
  <code class=""literal"">
   GROUP BY
  </code>
  , and
  <code class=""literal"">
   HAVING
  </code>
  clauses in the table expression specify a pipeline of successive transformations performed on the table derived in the
  <code class=""literal"">
   FROM
  </code>
  clause. All these transformations produce a virtual table that provides the rows that are passed to the select list to compute the output rows of the query.
 </p>
 <div class=""sect2"" id=""QUERIES-FROM"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.2.1. The
      <code class=""literal"">
       FROM
      </code>
      Clause
      <a class=""id_link"" href=""#QUERIES-FROM"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <a class=""link"" href=""sql-select.html#SQL-FROM"" title=""FROM Clause"">
    <code class=""literal"">
     FROM
    </code>
   </a>
   clause derives a table from one or more other tables given in a comma-separated table reference list.
  </p>
  <pre class=""synopsis"">
FROM <em class=""replaceable""><code>table_reference</code></em> [<span class=""optional"">, <em class=""replaceable""><code>table_reference</code></em> [<span class=""optional"">, ...</span>]</span>]
</pre>
  <p>
   A table reference can be a table name (possibly schema-qualified), or a derived table such as a subquery, a
   <code class=""literal"">
    JOIN
   </code>
   construct, or complex combinations of these. If more than one table reference is listed in the
   <code class=""literal"">
    FROM
   </code>
   clause, the tables are cross-joined (that is, the Cartesian product of their rows is formed; see below). The result of the
   <code class=""literal"">
    FROM
   </code>
   list is an intermediate virtual table that can then be subject to transformations by the
   <code class=""literal"">
    WHERE
   </code>
   ,
   <code class=""literal"">
    GROUP BY
   </code>
   , and
   <code class=""literal"">
    HAVING
   </code>
   clauses and is finally the result of the overall table expression.
  </p>
  <a class=""indexterm"" id=""id-1.5.6.6.5.3"" name=""id-1.5.6.6.5.3"">
  </a>
  <p>
   When a table reference names a table that is the parent of a table inheritance hierarchy, the table reference produces rows of not only that table but all of its descendant tables, unless the key word
   <code class=""literal"">
    ONLY
   </code>
   precedes the table name. However, the reference produces only the columns that appear in the named table — any columns added in subtables are ignored.
  </p>
  <p>
   Instead of writing
   <code class=""literal"">
    ONLY
   </code>
   before the table name, you can write
   <code class=""literal"">
    *
   </code>
   after the table name to explicitly specify that descendant tables are included. There is no real reason to use this syntax any more, because searching descendant tables is now always the default behavior. However, it is supported for compatibility with older releases.
  </p>
  <div class=""sect3"" id=""QUERIES-JOIN"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.2.1.1. Joined Tables
       <a class=""id_link"" href=""#QUERIES-JOIN"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.6.6.5.6.2"" name=""id-1.5.6.6.5.6.2"">
   </a>
   <p>
    A joined table is a table derived from two other (real or derived) tables according to the rules of the particular join type. Inner, outer, and cross-joins are available. The general syntax of a joined table is
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>T1</code></em> <em class=""replaceable""><code>join_type</code></em> <em class=""replaceable""><code>T2</code></em> [<span class=""optional""> <em class=""replaceable""><code>join_condition</code></em> </span>]
</pre>
   <p>
    Joins of all types can be chained together, or nested: either or both
    <em class=""replaceable"">
     <code>
      T1
     </code>
    </em>
    and
    <em class=""replaceable"">
     <code>
      T2
     </code>
    </em>
    can be joined tables. Parentheses can be used around
    <code class=""literal"">
     JOIN
    </code>
    clauses to control the join order. In the absence of parentheses,
    <code class=""literal"">
     JOIN
    </code>
    clauses nest left-to-right.
   </p>
   <div class=""variablelist"">
    <p class=""title"">
     <strong>
      Join Types
     </strong>
    </p>
    <dl class=""variablelist"">
     <dt>
      <span class=""term"">
       Cross join
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.2.1.1"" name=""id-1.5.6.6.5.6.4.2.1.1"">
       </a>
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.2.1.2"" name=""id-1.5.6.6.5.6.4.2.1.2"">
       </a>
      </span>
     </dt>
     <dd>
      <pre class=""synopsis"">
<em class=""replaceable""><code>T1</code></em> CROSS JOIN <em class=""replaceable""><code>T2</code></em>
</pre>
      <p>
       For every possible combination of rows from
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       and
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       (i.e., a Cartesian product), the joined table will contain a row consisting of all columns in
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       followed by all columns in
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       . If the tables have N and M rows respectively, the joined table will have N * M rows.
      </p>
      <p>
       <code class=""literal"">
        FROM
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        CROSS JOIN
        <em class=""replaceable"">
         <code>
          T2
         </code>
        </em>
       </code>
       is equivalent to
       <code class=""literal"">
        FROM
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        INNER JOIN
        <em class=""replaceable"">
         <code>
          T2
         </code>
        </em>
        ON TRUE
       </code>
       (see below). It is also equivalent to
       <code class=""literal"">
        FROM
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        ,
        <em class=""replaceable"">
         <code>
          T2
         </code>
        </em>
       </code>
       .
      </p>
      <div class=""note"">
       <h3 class=""title"">
        Note
       </h3>
       <p>
        This latter equivalence does not hold exactly when more than two tables appear, because
        <code class=""literal"">
         JOIN
        </code>
        binds more tightly than comma. For example
        <code class=""literal"">
         FROM
         <em class=""replaceable"">
          <code>
           T1
          </code>
         </em>
         CROSS JOIN
         <em class=""replaceable"">
          <code>
           T2
          </code>
         </em>
         INNER JOIN
         <em class=""replaceable"">
          <code>
           T3
          </code>
         </em>
         ON
         <em class=""replaceable"">
          <code>
           condition
          </code>
         </em>
        </code>
        is not the same as
        <code class=""literal"">
         FROM
         <em class=""replaceable"">
          <code>
           T1
          </code>
         </em>
         ,
         <em class=""replaceable"">
          <code>
           T2
          </code>
         </em>
         INNER JOIN
         <em class=""replaceable"">
          <code>
           T3
          </code>
         </em>
         ON
         <em class=""replaceable"">
          <code>
           condition
          </code>
         </em>
        </code>
        because the
        <em class=""replaceable"">
         <code>
          condition
         </code>
        </em>
        can reference
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        in the first case but not the second.
       </p>
      </div>
     </dd>
     <dt>
      <span class=""term"">
       Qualified joins
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.1.1"" name=""id-1.5.6.6.5.6.4.3.1.1"">
       </a>
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.1.2"" name=""id-1.5.6.6.5.6.4.3.1.2"">
       </a>
      </span>
     </dt>
     <dd>
      <pre class=""synopsis"">
<em class=""replaceable""><code>T1</code></em> { [<span class=""optional"">INNER</span>] | { LEFT | RIGHT | FULL } [<span class=""optional"">OUTER</span>] } JOIN <em class=""replaceable""><code>T2</code></em> ON <em class=""replaceable""><code>boolean_expression</code></em>
<em class=""replaceable""><code>T1</code></em> { [<span class=""optional"">INNER</span>] | { LEFT | RIGHT | FULL } [<span class=""optional"">OUTER</span>] } JOIN <em class=""replaceable""><code>T2</code></em> USING ( <em class=""replaceable""><code>join column list</code></em> )
<em class=""replaceable""><code>T1</code></em> NATURAL { [<span class=""optional"">INNER</span>] | { LEFT | RIGHT | FULL } [<span class=""optional"">OUTER</span>] } JOIN <em class=""replaceable""><code>T2</code></em>
</pre>
      <p>
       The words
       <code class=""literal"">
        INNER
       </code>
       and
       <code class=""literal"">
        OUTER
       </code>
       are optional in all forms.
       <code class=""literal"">
        INNER
       </code>
       is the default;
       <code class=""literal"">
        LEFT
       </code>
       ,
       <code class=""literal"">
        RIGHT
       </code>
       , and
       <code class=""literal"">
        FULL
       </code>
       imply an outer join.
      </p>
      <p>
       The
       <em class=""firstterm"">
        join condition
       </em>
       is specified in the
       <code class=""literal"">
        ON
       </code>
       or
       <code class=""literal"">
        USING
       </code>
       clause, or implicitly by the word
       <code class=""literal"">
        NATURAL
       </code>
       . The join condition determines which rows from the two source tables are considered to
       <span class=""quote"">
        “
        <span class=""quote"">
         match
        </span>
        ”
       </span>
       , as explained in detail below.
      </p>
      <p>
       The possible types of qualified join are:
      </p>
      <div class=""variablelist"">
       <dl class=""variablelist"">
        <dt>
         <span class=""term"">
          <code class=""literal"">
           INNER JOIN
          </code>
         </span>
        </dt>
        <dd>
         <p>
          For each row R1 of T1, the joined table has a row for each row in T2 that satisfies the join condition with R1.
         </p>
        </dd>
        <dt>
         <span class=""term"">
          <code class=""literal"">
           LEFT OUTER JOIN
          </code>
          <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.4.1.2.1.2"" name=""id-1.5.6.6.5.6.4.3.2.4.1.2.1.2"">
          </a>
          <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.4.1.2.1.3"" name=""id-1.5.6.6.5.6.4.3.2.4.1.2.1.3"">
          </a>
         </span>
        </dt>
        <dd>
         <p>
          First, an inner join is performed. Then, for each row in T1 that does not satisfy the join condition with any row in T2, a joined row is added with null values in columns of T2. Thus, the joined table always has at least one row for each row in T1.
         </p>
        </dd>
        <dt>
         <span class=""term"">
          <code class=""literal"">
           RIGHT OUTER JOIN
          </code>
          <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.4.1.3.1.2"" name=""id-1.5.6.6.5.6.4.3.2.4.1.3.1.2"">
          </a>
          <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.4.1.3.1.3"" name=""id-1.5.6.6.5.6.4.3.2.4.1.3.1.3"">
          </a>
         </span>
        </dt>
        <dd>
         <p>
          First, an inner join is performed. Then, for each row in T2 that does not satisfy the join condition with any row in T1, a joined row is added with null values in columns of T1. This is the converse of a left join: the result table will always have a row for each row in T2.
         </p>
        </dd>
        <dt>
         <span class=""term"">
          <code class=""literal"">
           FULL OUTER JOIN
          </code>
         </span>
        </dt>
        <dd>
         <p>
          First, an inner join is performed. Then, for each row in T1 that does not satisfy the join condition with any row in T2, a joined row is added with null values in columns of T2. Also, for each row of T2 that does not satisfy the join condition with any row in T1, a joined row with null values in the columns of T1 is added.
         </p>
        </dd>
       </dl>
      </div>
      <p>
       The
       <code class=""literal"">
        ON
       </code>
       clause is the most general kind of join condition: it takes a Boolean value expression of the same kind as is used in a
       <code class=""literal"">
        WHERE
       </code>
       clause. A pair of rows from
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       and
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       match if the
       <code class=""literal"">
        ON
       </code>
       expression evaluates to true.
      </p>
      <p>
       The
       <code class=""literal"">
        USING
       </code>
       clause is a shorthand that allows you to take advantage of the specific situation where both sides of the join use the same name for the joining column(s). It takes a comma-separated list of the shared column names and forms a join condition that includes an equality comparison for each one. For example, joining
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       and
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       with
       <code class=""literal"">
        USING (a, b)
       </code>
       produces the join condition
       <code class=""literal"">
        ON
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        .a =
        <em class=""replaceable"">
         <code>
          T2
         </code>
        </em>
        .a AND
        <em class=""replaceable"">
         <code>
          T1
         </code>
        </em>
        .b =
        <em class=""replaceable"">
         <code>
          T2
         </code>
        </em>
        .b
       </code>
       .
      </p>
      <p>
       Furthermore, the output of
       <code class=""literal"">
        JOIN USING
       </code>
       suppresses redundant columns: there is no need to print both of the matched columns, since they must have equal values. While
       <code class=""literal"">
        JOIN ON
       </code>
       produces all columns from
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       followed by all columns from
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       ,
       <code class=""literal"">
        JOIN USING
       </code>
       produces one output column for each of the listed column pairs (in the listed order), followed by any remaining columns from
       <em class=""replaceable"">
        <code>
         T1
        </code>
       </em>
       , followed by any remaining columns from
       <em class=""replaceable"">
        <code>
         T2
        </code>
       </em>
       .
      </p>
      <p>
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.8.1"" name=""id-1.5.6.6.5.6.4.3.2.8.1"">
       </a>
       <a class=""indexterm"" id=""id-1.5.6.6.5.6.4.3.2.8.2"" name=""id-1.5.6.6.5.6.4.3.2.8.2"">
       </a>
       Finally,
       <code class=""literal"">
        NATURAL
       </code>
       is a shorthand form of
       <code class=""literal"">
        USING
       </code>
       : it forms a
       <code class=""literal"">
        USING
       </code>
       list consisting of all column names that appear in both input tables. As with
       <code class=""literal"">
        USING
       </code>
       , these columns appear only once in the output table. If there are no common column names,
       <code class=""literal"">
        NATURAL JOIN
       </code>
       behaves like
       <code class=""literal"">
        CROSS JOIN
       </code>
       .
      </p>
      <div class=""note"">
       <h3 class=""title"">
        Note
       </h3>
       <p>
        <code class=""literal"">
         USING
        </code>
        is reasonably safe from column changes in the joined relations since only the listed columns are combined.
        <code class=""literal"">
         NATURAL
        </code>
        is considerably more risky since any schema changes to either relation that cause a new matching column name to be present will cause the join to combine that new column as well.
       </p>
      </div>
     </dd>
    </dl>
   </div>
   <p>
    To put this together, assume we have tables
    <code class=""literal"">
     t1
    </code>
    :
   </p>
   <pre class=""programlisting"">
 num | name
-----+------
   1 | a
   2 | b
   3 | c
</pre>
   <p>
    and
    <code class=""literal"">
     t2
    </code>
    :
   </p>
   <pre class=""programlisting"">
 num | value
-----+-------
   1 | xxx
   3 | yyy
   5 | zzz
</pre>
   <p>
    then we get the following results for the various joins:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 CROSS JOIN t2;</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   1 | a    |   3 | yyy
   1 | a    |   5 | zzz
   2 | b    |   1 | xxx
   2 | b    |   3 | yyy
   2 | b    |   5 | zzz
   3 | c    |   1 | xxx
   3 | c    |   3 | yyy
   3 | c    |   5 | zzz
(9 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 INNER JOIN t2 ON t1.num = t2.num;</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   3 | c    |   3 | yyy
(2 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 INNER JOIN t2 USING (num);</code></strong>
 num | name | value
-----+------+-------
   1 | a    | xxx
   3 | c    | yyy
(2 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 NATURAL INNER JOIN t2;</code></strong>
 num | name | value
-----+------+-------
   1 | a    | xxx
   3 | c    | yyy
(2 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num;</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   2 | b    |     |
   3 | c    |   3 | yyy
(3 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 LEFT JOIN t2 USING (num);</code></strong>
 num | name | value
-----+------+-------
   1 | a    | xxx
   2 | b    |
   3 | c    | yyy
(3 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 RIGHT JOIN t2 ON t1.num = t2.num;</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   3 | c    |   3 | yyy
     |      |   5 | zzz
(3 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 FULL JOIN t2 ON t1.num = t2.num;</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   2 | b    |     |
   3 | c    |   3 | yyy
     |      |   5 | zzz
(4 rows)
</pre>
   <p>
    The join condition specified with
    <code class=""literal"">
     ON
    </code>
    can also contain conditions that do not relate directly to the join. This can prove useful for some queries but needs to be thought out carefully. For example:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num AND t2.value = 'xxx';</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
   2 | b    |     |
   3 | c    |     |
(3 rows)
</pre>
   <p>
    Notice that placing the restriction in the
    <code class=""literal"">
     WHERE
    </code>
    clause produces a different result:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num WHERE t2.value = 'xxx';</code></strong>
 num | name | num | value
-----+------+-----+-------
   1 | a    |   1 | xxx
(1 row)
</pre>
   <p>
    This is because a restriction placed in the
    <code class=""literal"">
     ON
    </code>
    clause is processed
    <span class=""emphasis"">
     <em>
      before
     </em>
    </span>
    the join, while a restriction placed in the
    <code class=""literal"">
     WHERE
    </code>
    clause is processed
    <span class=""emphasis"">
     <em>
      after
     </em>
    </span>
    the join. That does not matter with inner joins, but it matters a lot with outer joins.
   </p>
  </div>
  <div class=""sect3"" id=""QUERIES-TABLE-ALIASES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.2.1.2. Table and Column Aliases
       <a class=""id_link"" href=""#QUERIES-TABLE-ALIASES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.6.6.5.7.2"" name=""id-1.5.6.6.5.7.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.6.6.5.7.3"" name=""id-1.5.6.6.5.7.3"">
   </a>
   <p>
    A temporary name can be given to tables and complex table references to be used for references to the derived table in the rest of the query. This is called a
    <em class=""firstterm"">
     table alias
    </em>
    .
   </p>
   <p>
    To create a table alias, write
   </p>
   <pre class=""synopsis"">
FROM <em class=""replaceable""><code>table_reference</code></em> AS <em class=""replaceable""><code>alias</code></em>
</pre>
   <p>
    or
   </p>
   <pre class=""synopsis"">
FROM <em class=""replaceable""><code>table_reference</code></em> <em class=""replaceable""><code>alias</code></em>
</pre>
   <p>
    The
    <code class=""literal"">
     AS
    </code>
    key word is optional noise.
    <em class=""replaceable"">
     <code>
      alias
     </code>
    </em>
    can be any identifier.
   </p>
   <p>
    A typical application of table aliases is to assign short identifiers to long table names to keep the join clauses readable. For example:
   </p>
   <pre class=""programlisting"">
SELECT * FROM some_very_long_table_name s JOIN another_fairly_long_name a ON s.id = a.num;
</pre>
   <p>
    The alias becomes the new name of the table reference so far as the current query is concerned — it is not allowed to refer to the table by the original name elsewhere in the query. Thus, this is not valid:
   </p>
   <pre class=""programlisting"">
SELECT * FROM my_table AS m WHERE my_table.a &gt; 5;    -- wrong
</pre>
   <p>
    Table aliases are mainly for notational convenience, but it is necessary to use them when joining a table to itself, e.g.:
   </p>
   <pre class=""programlisting"">
SELECT * FROM people AS mother JOIN people AS child ON mother.id = child.mother_id;
</pre>
   <p>
    Parentheses are used to resolve ambiguities. In the following example, the first statement assigns the alias
    <code class=""literal"">
     b
    </code>
    to the second instance of
    <code class=""literal"">
     my_table
    </code>
    , but the second statement assigns the alias to the result of the join:
   </p>
   <pre class=""programlisting"">
SELECT * FROM my_table AS a CROSS JOIN my_table AS b ...
SELECT * FROM (my_table AS a CROSS JOIN my_table) AS b ...
</pre>
   <p>
    Another form of table aliasing gives temporary names to the columns of the table, as well as the table itself:
   </p>
   <pre class=""synopsis"">
FROM <em class=""replaceable""><code>table_reference</code></em> [<span class=""optional"">AS</span>] <em class=""replaceable""><code>alias</code></em> ( <em class=""replaceable""><code>column1</code></em> [<span class=""optional"">, <em class=""replaceable""><code>column2</code></em> [<span class=""optional"">, ...</span>]</span>] )
</pre>
   <p>
    If fewer column aliases are specified than the actual table has columns, the remaining columns are not renamed. This syntax is especially useful for self-joins or subqueries.
   </p>
   <p>
    When an alias is applied to the output of a
    <code class=""literal"">
     JOIN
    </code>
    clause, the alias hides the original name(s) within the
    <code class=""literal"">
     JOIN
    </code>
    . For example:
   </p>
   <pre class=""programlisting"">
SELECT a.* FROM my_table AS a JOIN your_table AS b ON ...
</pre>
   <p>
    is valid SQL, but:
   </p>
   <pre class=""programlisting"">
SELECT a.* FROM (my_table AS a JOIN your_table AS b ON ...) AS c
</pre>
   <p>
    is not valid; the table alias
    <code class=""literal"">
     a
    </code>
    is not visible outside the alias
    <code class=""literal"">
     c
    </code>
    .
   </p>
  </div>
  <div class=""sect3"" id=""QUERIES-SUBQUERIES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.2.1.3. Subqueries
       <a class=""id_link"" href=""#QUERIES-SUBQUERIES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.6.6.5.8.2"" name=""id-1.5.6.6.5.8.2"">
   </a>
   <p>
    Subqueries specifying a derived table must be enclosed in parentheses. They may be assigned a table alias name, and optionally column alias names (as in
    <a class=""xref"" href=""queries-table-expressions.html#QUERIES-TABLE-ALIASES"" title=""7.2.1.2. Table and Column Aliases"">
     Section 7.2.1.2
    </a>
    ). For example:
   </p>
   <pre class=""programlisting"">
FROM (SELECT * FROM table1) AS alias_name
</pre>
   <p>
    This example is equivalent to
    <code class=""literal"">
     FROM table1 AS alias_name
    </code>
    . More interesting cases, which cannot be reduced to a plain join, arise when the subquery involves grouping or aggregation.
   </p>
   <p>
    A subquery can also be a
    <code class=""command"">
     VALUES
    </code>
    list:
   </p>
   <pre class=""programlisting"">
FROM (VALUES ('anne', 'smith'), ('bob', 'jones'), ('joe', 'blow'))
     AS names(first, last)
</pre>
   <p>
    Again, a table alias is optional. Assigning alias names to the columns of the
    <code class=""command"">
     VALUES
    </code>
    list is optional, but is good practice. For more information see
    <a class=""xref"" href=""queries-values.html"" title=""7.7. VALUES Lists"">
     Section 7.7
    </a>
    .
   </p>
   <p>
    According to the SQL standard, a table alias name must be supplied for a subquery.
    <span class=""productname"">
     PostgreSQL
    </span>
    allows
    <code class=""literal"">
     AS
    </code>
    and the alias to be omitted, but writing one is good practice in SQL code that might be ported to another system.
   </p>
  </div>
  <div class=""sect3"" id=""QUERIES-TABLEFUNCTIONS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.2.1.4. Table Functions
       <a class=""id_link"" href=""#QUERIES-TABLEFUNCTIONS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.6.6.5.9.2"" name=""id-1.5.6.6.5.9.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.6.6.5.9.3"" name=""id-1.5.6.6.5.9.3"">
   </a>
   <p>
    Table functions are functions that produce a set of rows, made up of either base data types (scalar types) or composite data types (table rows). They are used like a table, view, or subquery in the
    <code class=""literal"">
     FROM
    </code>
    clause of a query. Columns returned by table functions can be included in
    <code class=""literal"">
     SELECT
    </code>
    ,
    <code class=""literal"">
     JOIN
    </code>
    , or
    <code class=""literal"">
     WHERE
    </code>
    clauses in the same manner as columns of a table, view, or subquery.
   </p>
   <p>
    Table functions may also be combined using the
    <code class=""literal"">
     ROWS FROM
    </code>
    syntax, with the results returned in parallel columns; the number of result rows in this case is that of the largest function result, with smaller results padded with null values to match.
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>function_call</code></em> [<span class=""optional"">WITH ORDINALITY</span>] [<span class=""optional"">[<span class=""optional"">AS</span>] <em class=""replaceable""><code>table_alias</code></em> [<span class=""optional"">(<em class=""replaceable""><code>column_alias</code></em> [<span class=""optional"">, ... </span>])</span>]</span>]
ROWS FROM( <em class=""replaceable""><code>function_call</code></em> [<span class=""optional"">, ... </span>] ) [<span class=""optional"">WITH ORDINALITY</span>] [<span class=""optional"">[<span class=""optional"">AS</span>] <em class=""replaceable""><code>table_alias</code></em> [<span class=""optional"">(<em class=""replaceable""><code>column_alias</code></em> [<span class=""optional"">, ... </span>])</span>]</span>]
</pre>
   <p>
    If the
    <code class=""literal"">
     WITH ORDINALITY
    </code>
    clause is specified, an additional column of type
    <code class=""type"">
     bigint
    </code>
    will be added to the function result columns. This column numbers the rows of the function result set, starting from 1. (This is a generalization of the SQL-standard syntax for
    <code class=""literal"">
     UNNEST ... WITH ORDINALITY
    </code>
    .) By default, the ordinal column is called
    <code class=""literal"">
     ordinality
    </code>
    , but a different column name can be assigned to it using an
    <code class=""literal"">
     AS
    </code>
    clause.
   </p>
   <p>
    The special table function
    <code class=""literal"">
     UNNEST
    </code>
    may be called with any number of array parameters, and it returns a corresponding number of columns, as if
    <code class=""literal"">
     UNNEST
    </code>
    (
    <a class=""xref"" href=""functions-array.html"" title=""9.19. Array Functions and Operators"">
     Section 9.19
    </a>
    ) had been called on each parameter separately and combined using the
    <code class=""literal"">
     ROWS FROM
    </code>
    construct.
   </p>
   <pre class=""synopsis"">
UNNEST( <em class=""replaceable""><code>array_expression</code></em> [<span class=""optional"">, ... </span>] ) [<span class=""optional"">WITH ORDINALITY</span>] [<span class=""optional"">[<span class=""optional"">AS</span>] <em class=""replaceable""><code>table_alias</code></em> [<span class=""optional"">(<em class=""replaceable""><code>column_alias</code></em> [<span class=""optional"">, ... </span>])</span>]</span>]
</pre>
   <p>
    If no
    <em class=""replaceable"">
     <code>
      table_alias
     </code>
    </em>
    is specified, the function name is used as the table name; in the case of a
    <code class=""literal"">
     ROWS FROM()
    </code>
    construct, the first function's name is used.
   </p>
   <p>
    If column aliases are not supplied, then for a function returning a base data type, the column name is also the same as the function name. For a function returning a composite type, the result columns get the names of the individual attributes of the type.
   </p>
   <p>
    Some examples:
   </p>
   <pre class=""programlisting"">
CREATE TABLE foo (fooid int, foosubid int, fooname text);

CREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$
    SELECT * FROM foo WHERE fooid = $1;
$$ LANGUAGE SQL;

SELECT * FROM getfoo(1) AS t1;

SELECT * FROM foo
    WHERE foosubid IN (
                        SELECT foosubid
                        FROM getfoo(foo.fooid) z
                        WHERE z.fooid = foo.fooid
                      );

CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);

SELECT * FROM vw_getfoo;
</pre>
   <p>
    In some cases it is useful to define table functions that can return different column sets depending on how they are invoked. To support this, the table function can be declared as returning the pseudo-type
    <code class=""type"">
     record
    </code>
    with no
    <code class=""literal"">
     OUT
    </code>
    parameters. When such a function is used in a query, the expected row structure must be specified in the query itself, so that the system can know how to parse and plan the query. This syntax looks like:
   </p>
   <pre class=""synopsis"">
<em class=""replaceable""><code>function_call</code></em> [<span class=""optional"">AS</span>] <em class=""replaceable""><code>alias</code></em> (<em class=""replaceable""><code>column_definition</code></em> [<span class=""optional"">, ... </span>])
<em class=""replaceable""><code>function_call</code></em> AS [<span class=""optional""><em class=""replaceable""><code>alias</code></em></span>] (<em class=""replaceable""><code>column_definition</code></em> [<span class=""optional"">, ... </span>])
ROWS FROM( ... <em class=""replaceable""><code>function_call</code></em> AS (<em class=""replaceable""><code>column_definition</code></em> [<span class=""optional"">, ... </span>]) [<span class=""optional"">, ... </span>] )
</pre>
   <p>
    When not using the
    <code class=""literal"">
     ROWS FROM()
    </code>
    syntax, the
    <em class=""replaceable"">
     <code>
      column_definition
     </code>
    </em>
    list replaces the column alias list that could otherwise be attached to the
    <code class=""literal"">
     FROM
    </code>
    item; the names in the column definitions serve as column aliases. When using the
    <code class=""literal"">
     ROWS FROM()
    </code>
    syntax, a
    <em class=""replaceable"">
     <code>
      column_definition
     </code>
    </em>
    list can be attached to each member function separately; or if there is only one member function and no
    <code class=""literal"">
     WITH ORDINALITY
    </code>
    clause, a
    <em class=""replaceable"">
     <code>
      column_definition
     </code>
    </em>
    list can be written in place of a column alias list following
    <code class=""literal"">
     ROWS FROM()
    </code>
    .
   </p>
   <p>
    Consider this example:
   </p>
   <pre class=""programlisting"">
SELECT *
    FROM dblink('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc')
      AS t1(proname name, prosrc text)
    WHERE proname LIKE 'bytea%';
</pre>
   <p>
    The
    <a class=""xref"" href=""contrib-dblink-function.html"" title=""dblink"">
     <span class=""refentrytitle"">
      dblink
     </span>
    </a>
    function (part of the
    <a class=""xref"" href=""dblink.html"" title=""F.11. dblink — connect to other PostgreSQL databases"">
     dblink
    </a>
    module) executes a remote query. It is declared to return
    <code class=""type"">
     record
    </code>
    since it might be used for any kind of query. The actual column set must be specified in the calling query so that the parser knows, for example, what
    <code class=""literal"">
     *
    </code>
    should expand to.
   </p>
   <p>
    This example uses
    <code class=""literal"">
     ROWS FROM
    </code>
    :
   </p>
   <pre class=""programlisting"">
SELECT *
FROM ROWS FROM
    (
        json_to_recordset('[{""a"":40,""b"":""foo""},{""a"":""100"",""b"":""bar""}]')
            AS (a INTEGER, b TEXT),
        generate_series(1, 3)
    ) AS x (p, q, s)
ORDER BY p;

  p  |  q  | s
-----+-----+---
  40 | foo | 1
 100 | bar | 2
     |     | 3
</pre>
   <p>
    It joins two functions into a single
    <code class=""literal"">
     FROM
    </code>
    target.
    <code class=""function"">
     json_to_recordset()
    </code>
    is instructed to return two columns, the first
    <code class=""type"">
     integer
    </code>
    and the second
    <code class=""type"">
     text
    </code>
    . The result of
    <code class=""function"">
     generate_series()
    </code>
    is used directly. The
    <code class=""literal"">
     ORDER BY
    </code>
    clause sorts the column values as integers.
   </p>
  </div>
  <div class=""sect3"" id=""QUERIES-LATERAL"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.2.1.5.
       <code class=""literal"">
        LATERAL
       </code>
       Subqueries
       <a class=""id_link"" href=""#QUERIES-LATERAL"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.6.6.5.10.2"" name=""id-1.5.6.6.5.10.2"">
   </a>
   <p>
    Subqueries appearing in
    <code class=""literal"">
     FROM
    </code>
    can be preceded by the key word
    <code class=""literal"">
     LATERAL
    </code>
    . This allows them to reference columns provided by preceding
    <code class=""literal"">
     FROM
    </code>
    items. (Without
    <code class=""literal"">
     LATERAL
    </code>
    , each subquery is evaluated independently and so cannot cross-reference any other
    <code class=""literal"">
     FROM
    </code>
    item.)
   </p>
   <p>
    Table functions appearing in
    <code class=""literal"">
     FROM
    </code>
    can also be preceded by the key word
    <code class=""literal"">
     LATERAL
    </code>
    , but for functions the key word is optional; the function's arguments can contain references to columns provided by preceding
    <code class=""literal"">
     FROM
    </code>
    items in any case.
   </p>
   <p>
    A
    <code class=""literal"">
     LATERAL
    </code>
    item can appear at the top level in the
    <code class=""literal"">
     FROM
    </code>
    list, or within a
    <code class=""literal"">
     JOIN
    </code>
    tree. In the latter case it can also refer to any items that are on the left-hand side of a
    <code class=""literal"">
     JOIN
    </code>
    that it is on the right-hand side of.
   </p>
   <p>
    When a
    <code class=""literal"">
     FROM
    </code>
    item contains
    <code class=""literal"">
     LATERAL
    </code>
    cross-references, evaluation proceeds as follows: for each row of the
    <code class=""literal"">
     FROM
    </code>
    item providing the cross-referenced column(s), or set of rows of multiple
    <code class=""literal"">
     FROM
    </code>
    items providing the columns, the
    <code class=""literal"">
     LATERAL
    </code>
    item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).
   </p>
   <p>
    A trivial example of
    <code class=""literal"">
     LATERAL
    </code>
    is
   </p>
   <pre class=""programlisting"">
SELECT * FROM foo, LATERAL (SELECT * FROM bar WHERE bar.id = foo.bar_id) ss;
</pre>
   <p>
    This is not especially useful since it has exactly the same result as the more conventional
   </p>
   <pre class=""programlisting"">
SELECT * FROM foo, bar WHERE bar.id = foo.bar_id;
</pre>
   <p>
    <code class=""literal"">
     LATERAL
    </code>
    is primarily useful when the cross-referenced column is necessary for computing the row(s) to be joined. A common application is providing an argument value for a set-returning function. For example, supposing that
    <code class=""function"">
     vertices(polygon)
    </code>
    returns the set of vertices of a polygon, we could identify close-together vertices of polygons stored in a table with:
   </p>
   <pre class=""programlisting"">
SELECT p1.id, p2.id, v1, v2
FROM polygons p1, polygons p2,
     LATERAL vertices(p1.poly) v1,
     LATERAL vertices(p2.poly) v2
WHERE (v1 &lt;-&gt; v2) &lt; 10 AND p1.id != p2.id;
</pre>
   <p>
    This query could also be written
   </p>
   <pre class=""programlisting"">
SELECT p1.id, p2.id, v1, v2
FROM polygons p1 CROSS JOIN LATERAL vertices(p1.poly) v1,
     polygons p2 CROSS JOIN LATERAL vertices(p2.poly) v2
WHERE (v1 &lt;-&gt; v2) &lt; 10 AND p1.id != p2.id;
</pre>
   <p>
    or in several other equivalent formulations. (As already mentioned, the
    <code class=""literal"">
     LATERAL
    </code>
    key word is unnecessary in this example, but we use it for clarity.)
   </p>
   <p>
    It is often particularly handy to
    <code class=""literal"">
     LEFT JOIN
    </code>
    to a
    <code class=""literal"">
     LATERAL
    </code>
    subquery, so that source rows will appear in the result even if the
    <code class=""literal"">
     LATERAL
    </code>
    subquery produces no rows for them. For example, if
    <code class=""function"">
     get_product_names()
    </code>
    returns the names of products made by a manufacturer, but some manufacturers in our table currently produce no products, we could find out which ones those are like this:
   </p>
   <pre class=""programlisting"">
SELECT m.name
FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true
WHERE pname IS NULL;
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""QUERIES-WHERE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.2.2. The
      <code class=""literal"">
       WHERE
      </code>
      Clause
      <a class=""id_link"" href=""#QUERIES-WHERE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.6.6.2"" name=""id-1.5.6.6.6.2"">
  </a>
  <p>
   The syntax of the
   <a class=""link"" href=""sql-select.html#SQL-WHERE"" title=""WHERE Clause"">
    <code class=""literal"">
     WHERE
    </code>
   </a>
   clause is
  </p>
  <pre class=""synopsis"">
WHERE <em class=""replaceable""><code>search_condition</code></em>
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     search_condition
    </code>
   </em>
   is any value expression (see
   <a class=""xref"" href=""sql-expressions.html"" title=""4.2. Value Expressions"">
    Section 4.2
   </a>
   ) that returns a value of type
   <code class=""type"">
    boolean
   </code>
   .
  </p>
  <p>
   After the processing of the
   <code class=""literal"">
    FROM
   </code>
   clause is done, each row of the derived virtual table is checked against the search condition. If the result of the condition is true, the row is kept in the output table, otherwise (i.e., if the result is false or null) it is discarded. The search condition typically references at least one column of the table generated in the
   <code class=""literal"">
    FROM
   </code>
   clause; this is not required, but otherwise the
   <code class=""literal"">
    WHERE
   </code>
   clause will be fairly useless.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The join condition of an inner join can be written either in the
    <code class=""literal"">
     WHERE
    </code>
    clause or in the
    <code class=""literal"">
     JOIN
    </code>
    clause. For example, these table expressions are equivalent:
   </p>
   <pre class=""programlisting"">
FROM a, b WHERE a.id = b.id AND b.val &gt; 5
</pre>
   <p>
    and:
   </p>
   <pre class=""programlisting"">
FROM a INNER JOIN b ON (a.id = b.id) WHERE b.val &gt; 5
</pre>
   <p>
    or perhaps even:
   </p>
   <pre class=""programlisting"">
FROM a NATURAL JOIN b WHERE b.val &gt; 5
</pre>
   <p>
    Which one of these you use is mainly a matter of style. The
    <code class=""literal"">
     JOIN
    </code>
    syntax in the
    <code class=""literal"">
     FROM
    </code>
    clause is probably not as portable to other SQL database management systems, even though it is in the SQL standard. For outer joins there is no choice: they must be done in the
    <code class=""literal"">
     FROM
    </code>
    clause. The
    <code class=""literal"">
     ON
    </code>
    or
    <code class=""literal"">
     USING
    </code>
    clause of an outer join is
    <span class=""emphasis"">
     <em>
      not
     </em>
    </span>
    equivalent to a
    <code class=""literal"">
     WHERE
    </code>
    condition, because it results in the addition of rows (for unmatched input rows) as well as the removal of rows in the final result.
   </p>
  </div>
  <p>
   Here are some examples of
   <code class=""literal"">
    WHERE
   </code>
   clauses:
  </p>
  <pre class=""programlisting"">
SELECT ... FROM fdt WHERE c1 &gt; 5

SELECT ... FROM fdt WHERE c1 IN (1, 2, 3)

SELECT ... FROM fdt WHERE c1 IN (SELECT c1 FROM t2)

SELECT ... FROM fdt WHERE c1 IN (SELECT c3 FROM t2 WHERE c2 = fdt.c1 + 10)

SELECT ... FROM fdt WHERE c1 BETWEEN (SELECT c3 FROM t2 WHERE c2 = fdt.c1 + 10) AND 100

SELECT ... FROM fdt WHERE EXISTS (SELECT c1 FROM t2 WHERE c2 &gt; fdt.c1)
</pre>
  <p>
   <code class=""literal"">
    fdt
   </code>
   is the table derived in the
   <code class=""literal"">
    FROM
   </code>
   clause. Rows that do not meet the search condition of the
   <code class=""literal"">
    WHERE
   </code>
   clause are eliminated from
   <code class=""literal"">
    fdt
   </code>
   . Notice the use of scalar subqueries as value expressions. Just like any other query, the subqueries can employ complex table expressions. Notice also how
   <code class=""literal"">
    fdt
   </code>
   is referenced in the subqueries. Qualifying
   <code class=""literal"">
    c1
   </code>
   as
   <code class=""literal"">
    fdt.c1
   </code>
   is only necessary if
   <code class=""literal"">
    c1
   </code>
   is also the name of a column in the derived input table of the subquery. But qualifying the column name adds clarity even when it is not needed. This example shows how the column naming scope of an outer query extends into its inner queries.
  </p>
 </div>
 <div class=""sect2"" id=""QUERIES-GROUP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.2.3. The
      <code class=""literal"">
       GROUP BY
      </code>
      and
      <code class=""literal"">
       HAVING
      </code>
      Clauses
      <a class=""id_link"" href=""#QUERIES-GROUP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.6.7.2"" name=""id-1.5.6.6.7.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.6.6.7.3"" name=""id-1.5.6.6.7.3"">
  </a>
  <p>
   After passing the
   <code class=""literal"">
    WHERE
   </code>
   filter, the derived input table might be subject to grouping, using the
   <code class=""literal"">
    GROUP BY
   </code>
   clause, and elimination of group rows using the
   <code class=""literal"">
    HAVING
   </code>
   clause.
  </p>
  <pre class=""synopsis"">
SELECT <em class=""replaceable""><code>select_list</code></em>
    FROM ...
    [<span class=""optional"">WHERE ...</span>]
    GROUP BY <em class=""replaceable""><code>grouping_column_reference</code></em> [<span class=""optional"">, <em class=""replaceable""><code>grouping_column_reference</code></em></span>]...
</pre>
  <p>
   The
   <a class=""link"" href=""sql-select.html#SQL-GROUPBY"" title=""GROUP BY Clause"">
    <code class=""literal"">
     GROUP BY
    </code>
   </a>
   clause is used to group together those rows in a table that have the same values in all the columns listed. The order in which the columns are listed does not matter. The effect is to combine each set of rows having common values into one group row that represents all rows in the group. This is done to eliminate redundancy in the output and/or compute aggregates that apply to these groups. For instance:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM test1;</code></strong>
 x | y
---+---
 a | 3
 c | 2
 b | 5
 a | 1
(4 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT x FROM test1 GROUP BY x;</code></strong>
 x
---
 a
 b
 c
(3 rows)
</pre>
  <p>
   In the second query, we could not have written
   <code class=""literal"">
    SELECT * FROM test1 GROUP BY x
   </code>
   , because there is no single value for the column
   <code class=""literal"">
    y
   </code>
   that could be associated with each group. The grouped-by columns can be referenced in the select list since they have a single value in each group.
  </p>
  <p>
   In general, if a table is grouped, columns that are not listed in
   <code class=""literal"">
    GROUP BY
   </code>
   cannot be referenced except in aggregate expressions. An example with aggregate expressions is:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT x, sum(y) FROM test1 GROUP BY x;</code></strong>
 x | sum
---+-----
 a |   4
 b |   5
 c |   2
(3 rows)
</pre>
  <p>
   Here
   <code class=""literal"">
    sum
   </code>
   is an aggregate function that computes a single value over the entire group. More information about the available aggregate functions can be found in
   <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
    Section 9.21
   </a>
   .
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Grouping without aggregate expressions effectively calculates the set of distinct values in a column. This can also be achieved using the
    <code class=""literal"">
     DISTINCT
    </code>
    clause (see
    <a class=""xref"" href=""queries-select-lists.html#QUERIES-DISTINCT"" title=""7.3.3. DISTINCT"">
     Section 7.3.3
    </a>
    ).
   </p>
  </div>
  <p>
   Here is another example: it calculates the total sales for each product (rather than the total sales of all products):
  </p>
  <pre class=""programlisting"">
SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
    FROM products p LEFT JOIN sales s USING (product_id)
    GROUP BY product_id, p.name, p.price;
</pre>
  <p>
   In this example, the columns
   <code class=""literal"">
    product_id
   </code>
   ,
   <code class=""literal"">
    p.name
   </code>
   , and
   <code class=""literal"">
    p.price
   </code>
   must be in the
   <code class=""literal"">
    GROUP BY
   </code>
   clause since they are referenced in the query select list (but see below). The column
   <code class=""literal"">
    s.units
   </code>
   does not have to be in the
   <code class=""literal"">
    GROUP BY
   </code>
   list since it is only used in an aggregate expression (
   <code class=""literal"">
    sum(...)
   </code>
   ), which represents the sales of a product. For each product, the query returns a summary row about all sales of the product.
  </p>
  <a class=""indexterm"" id=""id-1.5.6.6.7.11"" name=""id-1.5.6.6.7.11"">
  </a>
  <p>
   If the products table is set up so that, say,
   <code class=""literal"">
    product_id
   </code>
   is the primary key, then it would be enough to group by
   <code class=""literal"">
    product_id
   </code>
   in the above example, since name and price would be
   <em class=""firstterm"">
    functionally dependent
   </em>
   on the product ID, and so there would be no ambiguity about which name and price value to return for each product ID group.
  </p>
  <p>
   In strict SQL,
   <code class=""literal"">
    GROUP BY
   </code>
   can only group by columns of the source table but
   <span class=""productname"">
    PostgreSQL
   </span>
   extends this to also allow
   <code class=""literal"">
    GROUP BY
   </code>
   to group by columns in the select list. Grouping by value expressions instead of simple column names is also allowed.
  </p>
  <a class=""indexterm"" id=""id-1.5.6.6.7.14"" name=""id-1.5.6.6.7.14"">
  </a>
  <p>
   If a table has been grouped using
   <code class=""literal"">
    GROUP BY
   </code>
   , but only certain groups are of interest, the
   <code class=""literal"">
    HAVING
   </code>
   clause can be used, much like a
   <code class=""literal"">
    WHERE
   </code>
   clause, to eliminate groups from the result. The syntax is:
  </p>
  <pre class=""synopsis"">
SELECT <em class=""replaceable""><code>select_list</code></em> FROM ... [<span class=""optional"">WHERE ...</span>] GROUP BY ... HAVING <em class=""replaceable""><code>boolean_expression</code></em>
</pre>
  <p>
   Expressions in the
   <code class=""literal"">
    HAVING
   </code>
   clause can refer both to grouped expressions and to ungrouped expressions (which necessarily involve an aggregate function).
  </p>
  <p>
   Example:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT x, sum(y) FROM test1 GROUP BY x HAVING sum(y) &gt; 3;</code></strong>
 x | sum
---+-----
 a |   4
 b |   5
(2 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT x, sum(y) FROM test1 GROUP BY x HAVING x &lt; 'c';</code></strong>
 x | sum
---+-----
 a |   4
 b |   5
(2 rows)
</pre>
  <p>
   Again, a more realistic example:
  </p>
  <pre class=""programlisting"">
SELECT product_id, p.name, (sum(s.units) * (p.price - p.cost)) AS profit
    FROM products p LEFT JOIN sales s USING (product_id)
    WHERE s.date &gt; CURRENT_DATE - INTERVAL '4 weeks'
    GROUP BY product_id, p.name, p.price, p.cost
    HAVING sum(p.price * s.units) &gt; 5000;
</pre>
  <p>
   In the example above, the
   <code class=""literal"">
    WHERE
   </code>
   clause is selecting rows by a column that is not grouped (the expression is only true for sales during the last four weeks), while the
   <code class=""literal"">
    HAVING
   </code>
   clause restricts the output to groups with total gross sales over 5000. Note that the aggregate expressions do not necessarily need to be the same in all parts of the query.
  </p>
  <p>
   If a query contains aggregate function calls, but no
   <code class=""literal"">
    GROUP BY
   </code>
   clause, grouping still occurs: the result is a single group row (or perhaps no rows at all, if the single row is then eliminated by
   <code class=""literal"">
    HAVING
   </code>
   ). The same is true if it contains a
   <code class=""literal"">
    HAVING
   </code>
   clause, even without any aggregate function calls or
   <code class=""literal"">
    GROUP BY
   </code>
   clause.
  </p>
 </div>
 <div class=""sect2"" id=""QUERIES-GROUPING-SETS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.2.4.
      <code class=""literal"">
       GROUPING SETS
      </code>
      ,
      <code class=""literal"">
       CUBE
      </code>
      , and
      <code class=""literal"">
       ROLLUP
      </code>
      <a class=""id_link"" href=""#QUERIES-GROUPING-SETS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.6.8.2"" name=""id-1.5.6.6.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.6.6.8.3"" name=""id-1.5.6.6.8.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.6.6.8.4"" name=""id-1.5.6.6.8.4"">
  </a>
  <p>
   More complex grouping operations than those described above are possible using the concept of
   <em class=""firstterm"">
    grouping sets
   </em>
   . The data selected by the
   <code class=""literal"">
    FROM
   </code>
   and
   <code class=""literal"">
    WHERE
   </code>
   clauses is grouped separately by each specified grouping set, aggregates computed for each group just as for simple
   <code class=""literal"">
    GROUP BY
   </code>
   clauses, and then the results returned. For example:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM items_sold;</code></strong>
 brand | size | sales
-------+------+-------
 Foo   | L    |  10
 Foo   | M    |  20
 Bar   | M    |  15
 Bar   | L    |  5
(4 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT brand, size, sum(sales) FROM items_sold GROUP BY GROUPING SETS ((brand), (size), ());</code></strong>
 brand | size | sum
-------+------+-----
 Foo   |      |  30
 Bar   |      |  20
       | L    |  15
       | M    |  35
       |      |  50
(5 rows)
</pre>
  <p>
   Each sublist of
   <code class=""literal"">
    GROUPING SETS
   </code>
   may specify zero or more columns or expressions and is interpreted the same way as though it were directly in the
   <code class=""literal"">
    GROUP BY
   </code>
   clause. An empty grouping set means that all rows are aggregated down to a single group (which is output even if no input rows were present), as described above for the case of aggregate functions with no
   <code class=""literal"">
    GROUP BY
   </code>
   clause.
  </p>
  <p>
   References to the grouping columns or expressions are replaced by null values in result rows for grouping sets in which those columns do not appear. To distinguish which grouping a particular output row resulted from, see
   <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-GROUPING-TABLE"" title=""Table 9.64. Grouping Operations"">
    Table 9.64
   </a>
   .
  </p>
  <p>
   A shorthand notation is provided for specifying two common types of grouping set. A clause of the form
  </p>
  <pre class=""programlisting"">
ROLLUP ( <em class=""replaceable""><code>e1</code></em>, <em class=""replaceable""><code>e2</code></em>, <em class=""replaceable""><code>e3</code></em>, ... )
</pre>
  <p>
   represents the given list of expressions and all prefixes of the list including the empty list; thus it is equivalent to
  </p>
  <pre class=""programlisting"">
GROUPING SETS (
    ( <em class=""replaceable""><code>e1</code></em>, <em class=""replaceable""><code>e2</code></em>, <em class=""replaceable""><code>e3</code></em>, ... ),
    ...
    ( <em class=""replaceable""><code>e1</code></em>, <em class=""replaceable""><code>e2</code></em> ),
    ( <em class=""replaceable""><code>e1</code></em> ),
    ( )
)
</pre>
  <p>
   This is commonly used for analysis over hierarchical data; e.g., total salary by department, division, and company-wide total.
  </p>
  <p>
   A clause of the form
  </p>
  <pre class=""programlisting"">
CUBE ( <em class=""replaceable""><code>e1</code></em>, <em class=""replaceable""><code>e2</code></em>, ... )
</pre>
  <p>
   represents the given list and all of its possible subsets (i.e., the power set). Thus
  </p>
  <pre class=""programlisting"">
CUBE ( a, b, c )
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUPING SETS (
    ( a, b, c ),
    ( a, b    ),
    ( a,    c ),
    ( a       ),
    (    b, c ),
    (    b    ),
    (       c ),
    (         )
)
</pre>
  <p>
   The individual elements of a
   <code class=""literal"">
    CUBE
   </code>
   or
   <code class=""literal"">
    ROLLUP
   </code>
   clause may be either individual expressions, or sublists of elements in parentheses. In the latter case, the sublists are treated as single units for the purposes of generating the individual grouping sets. For example:
  </p>
  <pre class=""programlisting"">
CUBE ( (a, b), (c, d) )
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUPING SETS (
    ( a, b, c, d ),
    ( a, b       ),
    (       c, d ),
    (            )
)
</pre>
  <p>
   and
  </p>
  <pre class=""programlisting"">
ROLLUP ( a, (b, c), d )
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUPING SETS (
    ( a, b, c, d ),
    ( a, b, c    ),
    ( a          ),
    (            )
)
</pre>
  <p>
   The
   <code class=""literal"">
    CUBE
   </code>
   and
   <code class=""literal"">
    ROLLUP
   </code>
   constructs can be used either directly in the
   <code class=""literal"">
    GROUP BY
   </code>
   clause, or nested inside a
   <code class=""literal"">
    GROUPING SETS
   </code>
   clause. If one
   <code class=""literal"">
    GROUPING SETS
   </code>
   clause is nested inside another, the effect is the same as if all the elements of the inner clause had been written directly in the outer clause.
  </p>
  <p>
   If multiple grouping items are specified in a single
   <code class=""literal"">
    GROUP BY
   </code>
   clause, then the final list of grouping sets is the Cartesian product of the individual items. For example:
  </p>
  <pre class=""programlisting"">
GROUP BY a, CUBE (b, c), GROUPING SETS ((d), (e))
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUP BY GROUPING SETS (
    (a, b, c, d), (a, b, c, e),
    (a, b, d),    (a, b, e),
    (a, c, d),    (a, c, e),
    (a, d),       (a, e)
)
</pre>
  <p>
   <a class=""indexterm"" id=""id-1.5.6.6.8.13.1"" name=""id-1.5.6.6.8.13.1"">
   </a>
   <a class=""indexterm"" id=""id-1.5.6.6.8.13.2"" name=""id-1.5.6.6.8.13.2"">
   </a>
   When specifying multiple grouping items together, the final set of grouping sets might contain duplicates. For example:
  </p>
  <pre class=""programlisting"">
GROUP BY ROLLUP (a, b), ROLLUP (a, c)
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUP BY GROUPING SETS (
    (a, b, c),
    (a, b),
    (a, b),
    (a, c),
    (a),
    (a),
    (a, c),
    (a),
    ()
)
</pre>
  <p>
   If these duplicates are undesirable, they can be removed using the
   <code class=""literal"">
    DISTINCT
   </code>
   clause directly on the
   <code class=""literal"">
    GROUP BY
   </code>
   . Therefore:
  </p>
  <pre class=""programlisting"">
GROUP BY <span class=""emphasis""><strong>DISTINCT</strong></span> ROLLUP (a, b), ROLLUP (a, c)
</pre>
  <p>
   is equivalent to
  </p>
  <pre class=""programlisting"">
GROUP BY GROUPING SETS (
    (a, b, c),
    (a, b),
    (a, c),
    (a),
    ()
)
</pre>
  <p>
   This is not the same as using
   <code class=""literal"">
    SELECT DISTINCT
   </code>
   because the output rows may still contain duplicates. If any of the ungrouped columns contains NULL, it will be indistinguishable from the NULL used when that same column is grouped.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The construct
    <code class=""literal"">
     (a, b)
    </code>
    is normally recognized in expressions as a
    <a class=""link"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
     row constructor
    </a>
    . Within the
    <code class=""literal"">
     GROUP BY
    </code>
    clause, this does not apply at the top levels of expressions, and
    <code class=""literal"">
     (a, b)
    </code>
    is parsed as a list of expressions as described above. If for some reason you
    <span class=""emphasis"">
     <em>
      need
     </em>
    </span>
    a row constructor in a grouping expression, use
    <code class=""literal"">
     ROW(a, b)
    </code>
    .
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""QUERIES-WINDOW"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.2.5. Window Function Processing
      <a class=""id_link"" href=""#QUERIES-WINDOW"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.6.9.2"" name=""id-1.5.6.6.9.2"">
  </a>
  <p>
   If the query contains any window functions (see
   <a class=""xref"" href=""tutorial-window.html"" title=""3.5. Window Functions"">
    Section 3.5
   </a>
   ,
   <a class=""xref"" href=""functions-window.html"" title=""9.22. Window Functions"">
    Section 9.22
   </a>
   and
   <a class=""xref"" href=""sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS"" title=""4.2.8. Window Function Calls"">
    Section 4.2.8
   </a>
   ), these functions are evaluated after any grouping, aggregation, and
   <code class=""literal"">
    HAVING
   </code>
   filtering is performed. That is, if the query uses any aggregates,
   <code class=""literal"">
    GROUP BY
   </code>
   , or
   <code class=""literal"">
    HAVING
   </code>
   , then the rows seen by the window functions are the group rows instead of the original table rows from
   <code class=""literal"">
    FROM
   </code>
   /
   <code class=""literal"">
    WHERE
   </code>
   .
  </p>
  <p>
   When multiple window functions are used, all the window functions having syntactically equivalent
   <code class=""literal"">
    PARTITION BY
   </code>
   and
   <code class=""literal"">
    ORDER BY
   </code>
   clauses in their window definitions are guaranteed to be evaluated in a single pass over the data. Therefore they will see the same sort ordering, even if the
   <code class=""literal"">
    ORDER BY
   </code>
   does not uniquely determine an ordering. However, no guarantees are made about the evaluation of functions having different
   <code class=""literal"">
    PARTITION BY
   </code>
   or
   <code class=""literal"">
    ORDER BY
   </code>
   specifications. (In such cases a sort step is typically required between the passes of window function evaluations, and the sort is not guaranteed to preserve ordering of rows that its
   <code class=""literal"">
    ORDER BY
   </code>
   sees as equivalent.)
  </p>
  <p>
   Currently, window functions always require presorted data, and so the query output will be ordered according to one or another of the window functions'
   <code class=""literal"">
    PARTITION BY
   </code>
   /
   <code class=""literal"">
    ORDER BY
   </code>
   clauses. It is not recommended to rely on this, however. Use an explicit top-level
   <code class=""literal"">
    ORDER BY
   </code>
   clause if you want to be sure the results are sorted in a particular way.
  </p>
 </div>
</div>
"
7. Queries,7.3. Select Lists,https://www.postgresql.org/docs/17/queries-select-lists.html,"<div class=""sect1"" id=""QUERIES-SELECT-LISTS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.3. Select Lists
     <a class=""id_link"" href=""#QUERIES-SELECT-LISTS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""queries-select-lists.html#QUERIES-SELECT-LIST-ITEMS"">
      7.3.1. Select-List Items
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-select-lists.html#QUERIES-COLUMN-LABELS"">
      7.3.2. Column Labels
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-select-lists.html#QUERIES-DISTINCT"">
      7.3.3.
      <code class=""literal"">
       DISTINCT
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.7.2"" name=""id-1.5.6.7.2"">
 </a>
 <p>
  As shown in the previous section, the table expression in the
  <code class=""command"">
   SELECT
  </code>
  command constructs an intermediate virtual table by possibly combining tables, views, eliminating rows, grouping, etc. This table is finally passed on to processing by the
  <em class=""firstterm"">
   select list
  </em>
  . The select list determines which
  <span class=""emphasis"">
   <em>
    columns
   </em>
  </span>
  of the intermediate table are actually output.
 </p>
 <div class=""sect2"" id=""QUERIES-SELECT-LIST-ITEMS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.3.1. Select-List Items
      <a class=""id_link"" href=""#QUERIES-SELECT-LIST-ITEMS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.7.4.2"" name=""id-1.5.6.7.4.2"">
  </a>
  <p>
   The simplest kind of select list is
   <code class=""literal"">
    *
   </code>
   which emits all columns that the table expression produces. Otherwise, a select list is a comma-separated list of value expressions (as defined in
   <a class=""xref"" href=""sql-expressions.html"" title=""4.2. Value Expressions"">
    Section 4.2
   </a>
   ). For instance, it could be a list of column names:
  </p>
  <pre class=""programlisting"">
SELECT a, b, c FROM ...
</pre>
  <p>
   The columns names
   <code class=""literal"">
    a
   </code>
   ,
   <code class=""literal"">
    b
   </code>
   , and
   <code class=""literal"">
    c
   </code>
   are either the actual names of the columns of tables referenced in the
   <code class=""literal"">
    FROM
   </code>
   clause, or the aliases given to them as explained in
   <a class=""xref"" href=""queries-table-expressions.html#QUERIES-TABLE-ALIASES"" title=""7.2.1.2. Table and Column Aliases"">
    Section 7.2.1.2
   </a>
   . The name space available in the select list is the same as in the
   <code class=""literal"">
    WHERE
   </code>
   clause, unless grouping is used, in which case it is the same as in the
   <code class=""literal"">
    HAVING
   </code>
   clause.
  </p>
  <p>
   If more than one table has a column of the same name, the table name must also be given, as in:
  </p>
  <pre class=""programlisting"">
SELECT tbl1.a, tbl2.a, tbl1.b FROM ...
</pre>
  <p>
   When working with multiple tables, it can also be useful to ask for all the columns of a particular table:
  </p>
  <pre class=""programlisting"">
SELECT tbl1.*, tbl2.a FROM ...
</pre>
  <p>
   See
   <a class=""xref"" href=""rowtypes.html#ROWTYPES-USAGE"" title=""8.16.5. Using Composite Types in Queries"">
    Section 8.16.5
   </a>
   for more about the
   <em class=""replaceable"">
    <code>
     table_name
    </code>
   </em>
   <code class=""literal"">
    .*
   </code>
   notation.
  </p>
  <p>
   If an arbitrary value expression is used in the select list, it conceptually adds a new virtual column to the returned table. The value expression is evaluated once for each result row, with the row's values substituted for any column references. But the expressions in the select list do not have to reference any columns in the table expression of the
   <code class=""literal"">
    FROM
   </code>
   clause; they can be constant arithmetic expressions, for instance.
  </p>
 </div>
 <div class=""sect2"" id=""QUERIES-COLUMN-LABELS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.3.2. Column Labels
      <a class=""id_link"" href=""#QUERIES-COLUMN-LABELS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.7.5.2"" name=""id-1.5.6.7.5.2"">
  </a>
  <p>
   The entries in the select list can be assigned names for subsequent processing, such as for use in an
   <code class=""literal"">
    ORDER BY
   </code>
   clause or for display by the client application. For example:
  </p>
  <pre class=""programlisting"">
SELECT a AS value, b + c AS sum FROM ...
</pre>
  <p>
   If no output column name is specified using
   <code class=""literal"">
    AS
   </code>
   , the system assigns a default column name. For simple column references, this is the name of the referenced column. For function calls, this is the name of the function. For complex expressions, the system will generate a generic name.
  </p>
  <p>
   The
   <code class=""literal"">
    AS
   </code>
   key word is usually optional, but in some cases where the desired column name matches a
   <span class=""productname"">
    PostgreSQL
   </span>
   key word, you must write
   <code class=""literal"">
    AS
   </code>
   or double-quote the column name in order to avoid ambiguity. (
   <a class=""xref"" href=""sql-keywords-appendix.html"" title=""Appendix C. SQL Key Words"">
    Appendix C
   </a>
   shows which key words require
   <code class=""literal"">
    AS
   </code>
   to be used as a column label.) For example,
   <code class=""literal"">
    FROM
   </code>
   is one such key word, so this does not work:
  </p>
  <pre class=""programlisting"">
SELECT a from, b + c AS sum FROM ...
</pre>
  <p>
   but either of these do:
  </p>
  <pre class=""programlisting"">
SELECT a AS from, b + c AS sum FROM ...
SELECT a ""from"", b + c AS sum FROM ...
</pre>
  <p>
   For greatest safety against possible future key word additions, it is recommended that you always either write
   <code class=""literal"">
    AS
   </code>
   or double-quote the output column name.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The naming of output columns here is different from that done in the
    <code class=""literal"">
     FROM
    </code>
    clause (see
    <a class=""xref"" href=""queries-table-expressions.html#QUERIES-TABLE-ALIASES"" title=""7.2.1.2. Table and Column Aliases"">
     Section 7.2.1.2
    </a>
    ). It is possible to rename the same column twice, but the name assigned in the select list is the one that will be passed on.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""QUERIES-DISTINCT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.3.3.
      <code class=""literal"">
       DISTINCT
      </code>
      <a class=""id_link"" href=""#QUERIES-DISTINCT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.6.7.6.2"" name=""id-1.5.6.7.6.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.6.7.6.3"" name=""id-1.5.6.7.6.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.6.7.6.4"" name=""id-1.5.6.7.6.4"">
  </a>
  <p>
   After the select list has been processed, the result table can optionally be subject to the elimination of duplicate rows. The
   <code class=""literal"">
    DISTINCT
   </code>
   key word is written directly after
   <code class=""literal"">
    SELECT
   </code>
   to specify this:
  </p>
  <pre class=""synopsis"">
SELECT DISTINCT <em class=""replaceable""><code>select_list</code></em> ...
</pre>
  <p>
   (Instead of
   <code class=""literal"">
    DISTINCT
   </code>
   the key word
   <code class=""literal"">
    ALL
   </code>
   can be used to specify the default behavior of retaining all rows.)
  </p>
  <a class=""indexterm"" id=""id-1.5.6.7.6.6"" name=""id-1.5.6.7.6.6"">
  </a>
  <p>
   Obviously, two rows are considered distinct if they differ in at least one column value. Null values are considered equal in this comparison.
  </p>
  <p>
   Alternatively, an arbitrary expression can determine what rows are to be considered distinct:
  </p>
  <pre class=""synopsis"">
SELECT DISTINCT ON (<em class=""replaceable""><code>expression</code></em> [<span class=""optional"">, <em class=""replaceable""><code>expression</code></em> ...</span>]) <em class=""replaceable""><code>select_list</code></em> ...
</pre>
  <p>
   Here
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   is an arbitrary value expression that is evaluated for all rows. A set of rows for which all the expressions are equal are considered duplicates, and only the first row of the set is kept in the output. Note that the
   <span class=""quote"">
    “
    <span class=""quote"">
     first row
    </span>
    ”
   </span>
   of a set is unpredictable unless the query is sorted on enough columns to guarantee a unique ordering of the rows arriving at the
   <code class=""literal"">
    DISTINCT
   </code>
   filter. (
   <code class=""literal"">
    DISTINCT ON
   </code>
   processing occurs after
   <code class=""literal"">
    ORDER BY
   </code>
   sorting.)
  </p>
  <p>
   The
   <code class=""literal"">
    DISTINCT ON
   </code>
   clause is not part of the SQL standard and is sometimes considered bad style because of the potentially indeterminate nature of its results. With judicious use of
   <code class=""literal"">
    GROUP BY
   </code>
   and subqueries in
   <code class=""literal"">
    FROM
   </code>
   , this construct can be avoided, but it is often the most convenient alternative.
  </p>
 </div>
</div>
"
7. Queries,"7.4. Combining Queries (UNION, INTERSECT, EXCEPT)",https://www.postgresql.org/docs/17/queries-union.html,"<div class=""sect1"" id=""QUERIES-UNION"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.4. Combining Queries (
     <code class=""literal"">
      UNION
     </code>
     ,
     <code class=""literal"">
      INTERSECT
     </code>
     ,
     <code class=""literal"">
      EXCEPT
     </code>
     )
     <a class=""id_link"" href=""#QUERIES-UNION"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.8.2"" name=""id-1.5.6.8.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.3"" name=""id-1.5.6.8.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.4"" name=""id-1.5.6.8.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.5"" name=""id-1.5.6.8.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.6"" name=""id-1.5.6.8.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.7"" name=""id-1.5.6.8.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.8.8"" name=""id-1.5.6.8.8"">
 </a>
 <p>
  The results of two queries can be combined using the set operations union, intersection, and difference. The syntax is
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>query1</code></em> UNION [<span class=""optional"">ALL</span>] <em class=""replaceable""><code>query2</code></em>
<em class=""replaceable""><code>query1</code></em> INTERSECT [<span class=""optional"">ALL</span>] <em class=""replaceable""><code>query2</code></em>
<em class=""replaceable""><code>query1</code></em> EXCEPT [<span class=""optional"">ALL</span>] <em class=""replaceable""><code>query2</code></em>
</pre>
 <p>
  where
  <em class=""replaceable"">
   <code>
    query1
   </code>
  </em>
  and
  <em class=""replaceable"">
   <code>
    query2
   </code>
  </em>
  are queries that can use any of the features discussed up to this point.
 </p>
 <p>
  <code class=""literal"">
   UNION
  </code>
  effectively appends the result of
  <em class=""replaceable"">
   <code>
    query2
   </code>
  </em>
  to the result of
  <em class=""replaceable"">
   <code>
    query1
   </code>
  </em>
  (although there is no guarantee that this is the order in which the rows are actually returned). Furthermore, it eliminates duplicate rows from its result, in the same way as
  <code class=""literal"">
   DISTINCT
  </code>
  , unless
  <code class=""literal"">
   UNION ALL
  </code>
  is used.
 </p>
 <p>
  <code class=""literal"">
   INTERSECT
  </code>
  returns all rows that are both in the result of
  <em class=""replaceable"">
   <code>
    query1
   </code>
  </em>
  and in the result of
  <em class=""replaceable"">
   <code>
    query2
   </code>
  </em>
  . Duplicate rows are eliminated unless
  <code class=""literal"">
   INTERSECT ALL
  </code>
  is used.
 </p>
 <p>
  <code class=""literal"">
   EXCEPT
  </code>
  returns all rows that are in the result of
  <em class=""replaceable"">
   <code>
    query1
   </code>
  </em>
  but not in the result of
  <em class=""replaceable"">
   <code>
    query2
   </code>
  </em>
  . (This is sometimes called the
  <em class=""firstterm"">
   difference
  </em>
  between two queries.) Again, duplicates are eliminated unless
  <code class=""literal"">
   EXCEPT ALL
  </code>
  is used.
 </p>
 <p>
  In order to calculate the union, intersection, or difference of two queries, the two queries must be
  <span class=""quote"">
   “
   <span class=""quote"">
    union compatible
   </span>
   ”
  </span>
  , which means that they return the same number of columns and the corresponding columns have compatible data types, as described in
  <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
   Section 10.5
  </a>
  .
 </p>
 <p>
  Set operations can be combined, for example
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>query1</code></em> UNION <em class=""replaceable""><code>query2</code></em> EXCEPT <em class=""replaceable""><code>query3</code></em>
</pre>
 <p>
  which is equivalent to
 </p>
 <pre class=""synopsis"">
(<em class=""replaceable""><code>query1</code></em> UNION <em class=""replaceable""><code>query2</code></em>) EXCEPT <em class=""replaceable""><code>query3</code></em>
</pre>
 <p>
  As shown here, you can use parentheses to control the order of evaluation. Without parentheses,
  <code class=""literal"">
   UNION
  </code>
  and
  <code class=""literal"">
   EXCEPT
  </code>
  associate left-to-right, but
  <code class=""literal"">
   INTERSECT
  </code>
  binds more tightly than those two operators. Thus
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>query1</code></em> UNION <em class=""replaceable""><code>query2</code></em> INTERSECT <em class=""replaceable""><code>query3</code></em>
</pre>
 <p>
  means
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>query1</code></em> UNION (<em class=""replaceable""><code>query2</code></em> INTERSECT <em class=""replaceable""><code>query3</code></em>)
</pre>
 <p>
  You can also surround an individual
  <em class=""replaceable"">
   <code>
    query
   </code>
  </em>
  with parentheses. This is important if the
  <em class=""replaceable"">
   <code>
    query
   </code>
  </em>
  needs to use any of the clauses discussed in following sections, such as
  <code class=""literal"">
   LIMIT
  </code>
  . Without parentheses, you'll get a syntax error, or else the clause will be understood as applying to the output of the set operation rather than one of its inputs. For example,
 </p>
 <pre class=""synopsis"">
SELECT a FROM b UNION SELECT x FROM y LIMIT 10
</pre>
 <p>
  is accepted, but it means
 </p>
 <pre class=""synopsis"">
(SELECT a FROM b UNION SELECT x FROM y) LIMIT 10
</pre>
 <p>
  not
 </p>
 <pre class=""synopsis"">
SELECT a FROM b UNION (SELECT x FROM y LIMIT 10)
</pre>
</div>
"
7. Queries,7.5. Sorting Rows (ORDER BY),https://www.postgresql.org/docs/17/queries-order.html,"<div class=""sect1"" id=""QUERIES-ORDER"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.5. Sorting Rows (
     <code class=""literal"">
      ORDER BY
     </code>
     )
     <a class=""id_link"" href=""#QUERIES-ORDER"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.9.2"" name=""id-1.5.6.9.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.9.3"" name=""id-1.5.6.9.3"">
 </a>
 <p>
  After a query has produced an output table (after the select list has been processed) it can optionally be sorted. If sorting is not chosen, the rows will be returned in an unspecified order. The actual order in that case will depend on the scan and join plan types and the order on disk, but it must not be relied on. A particular output ordering can only be guaranteed if the sort step is explicitly chosen.
 </p>
 <p>
  The
  <code class=""literal"">
   ORDER BY
  </code>
  clause specifies the sort order:
 </p>
 <pre class=""synopsis"">
SELECT <em class=""replaceable""><code>select_list</code></em>
    FROM <em class=""replaceable""><code>table_expression</code></em>
    ORDER BY <em class=""replaceable""><code>sort_expression1</code></em> [<span class=""optional"">ASC | DESC</span>] [<span class=""optional"">NULLS { FIRST | LAST }</span>]
             [<span class=""optional"">, <em class=""replaceable""><code>sort_expression2</code></em> [<span class=""optional"">ASC | DESC</span>] [<span class=""optional"">NULLS { FIRST | LAST }</span>] ...</span>]
</pre>
 <p>
  The sort expression(s) can be any expression that would be valid in the query's select list. An example is:
 </p>
 <pre class=""programlisting"">
SELECT a, b FROM table1 ORDER BY a + b, c;
</pre>
 <p>
  When more than one expression is specified, the later values are used to sort rows that are equal according to the earlier values. Each expression can be followed by an optional
  <code class=""literal"">
   ASC
  </code>
  or
  <code class=""literal"">
   DESC
  </code>
  keyword to set the sort direction to ascending or descending.
  <code class=""literal"">
   ASC
  </code>
  order is the default. Ascending order puts smaller values first, where
  <span class=""quote"">
   “
   <span class=""quote"">
    smaller
   </span>
   ”
  </span>
  is defined in terms of the
  <code class=""literal"">
   &lt;
  </code>
  operator. Similarly, descending order is determined with the
  <code class=""literal"">
   &gt;
  </code>
  operator.
  <a class=""footnote"" href=""#ftn.id-1.5.6.9.5.10"">
   <sup class=""footnote"" id=""id-1.5.6.9.5.10"">
    [6]
   </sup>
  </a>
 </p>
 <p>
  The
  <code class=""literal"">
   NULLS FIRST
  </code>
  and
  <code class=""literal"">
   NULLS LAST
  </code>
  options can be used to determine whether nulls appear before or after non-null values in the sort ordering. By default, null values sort as if larger than any non-null value; that is,
  <code class=""literal"">
   NULLS FIRST
  </code>
  is the default for
  <code class=""literal"">
   DESC
  </code>
  order, and
  <code class=""literal"">
   NULLS LAST
  </code>
  otherwise.
 </p>
 <p>
  Note that the ordering options are considered independently for each sort column. For example
  <code class=""literal"">
   ORDER BY x, y DESC
  </code>
  means
  <code class=""literal"">
   ORDER BY x ASC, y DESC
  </code>
  , which is not the same as
  <code class=""literal"">
   ORDER BY x DESC, y DESC
  </code>
  .
 </p>
 <p>
  A
  <em class=""replaceable"">
   <code>
    sort_expression
   </code>
  </em>
  can also be the column label or number of an output column, as in:
 </p>
 <pre class=""programlisting"">
SELECT a + b AS sum, c FROM table1 ORDER BY sum;
SELECT a, max(b) FROM table1 GROUP BY a ORDER BY 1;
</pre>
 <p>
  both of which sort by the first output column. Note that an output column name has to stand alone, that is, it cannot be used in an expression — for example, this is
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  correct:
 </p>
 <pre class=""programlisting"">
SELECT a + b AS sum, c FROM table1 ORDER BY sum + c;          -- wrong
</pre>
 <p>
  This restriction is made to reduce ambiguity. There is still ambiguity if an
  <code class=""literal"">
   ORDER BY
  </code>
  item is a simple name that could match either an output column name or a column from the table expression. The output column is used in such cases. This would only cause confusion if you use
  <code class=""literal"">
   AS
  </code>
  to rename an output column to match some other table column's name.
 </p>
 <p>
  <code class=""literal"">
   ORDER BY
  </code>
  can be applied to the result of a
  <code class=""literal"">
   UNION
  </code>
  ,
  <code class=""literal"">
   INTERSECT
  </code>
  , or
  <code class=""literal"">
   EXCEPT
  </code>
  combination, but in this case it is only permitted to sort by output column names or numbers, not by expressions.
 </p>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.id-1.5.6.9.5.10"">
   <p>
    <a class=""para"" href=""#id-1.5.6.9.5.10"">
     <sup class=""para"">
      [6]
     </sup>
    </a>
    Actually,
    <span class=""productname"">
     PostgreSQL
    </span>
    uses the
    <em class=""firstterm"">
     default B-tree operator class
    </em>
    for the expression's data type to determine the sort ordering for
    <code class=""literal"">
     ASC
    </code>
    and
    <code class=""literal"">
     DESC
    </code>
    . Conventionally, data types will be set up so that the
    <code class=""literal"">
     &lt;
    </code>
    and
    <code class=""literal"">
     &gt;
    </code>
    operators correspond to this sort ordering, but a user-defined data type's designer could choose to do something different.
   </p>
  </div>
 </div>
</div>
"
7. Queries,7.6. LIMIT and OFFSET,https://www.postgresql.org/docs/17/queries-limit.html,"<div class=""sect1"" id=""QUERIES-LIMIT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.6.
     <code class=""literal"">
      LIMIT
     </code>
     and
     <code class=""literal"">
      OFFSET
     </code>
     <a class=""id_link"" href=""#QUERIES-LIMIT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.10.2"" name=""id-1.5.6.10.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.10.3"" name=""id-1.5.6.10.3"">
 </a>
 <p>
  <code class=""literal"">
   LIMIT
  </code>
  and
  <code class=""literal"">
   OFFSET
  </code>
  allow you to retrieve just a portion of the rows that are generated by the rest of the query:
 </p>
 <pre class=""synopsis"">
SELECT <em class=""replaceable""><code>select_list</code></em>
    FROM <em class=""replaceable""><code>table_expression</code></em>
    [<span class=""optional""> ORDER BY ... </span>]
    [<span class=""optional""> LIMIT { <em class=""replaceable""><code>count</code></em> | ALL } </span>]
    [<span class=""optional""> OFFSET <em class=""replaceable""><code>start</code></em> </span>]
</pre>
 <p>
  If a limit count is given, no more than that many rows will be returned (but possibly fewer, if the query itself yields fewer rows).
  <code class=""literal"">
   LIMIT ALL
  </code>
  is the same as omitting the
  <code class=""literal"">
   LIMIT
  </code>
  clause, as is
  <code class=""literal"">
   LIMIT
  </code>
  with a NULL argument.
 </p>
 <p>
  <code class=""literal"">
   OFFSET
  </code>
  says to skip that many rows before beginning to return rows.
  <code class=""literal"">
   OFFSET 0
  </code>
  is the same as omitting the
  <code class=""literal"">
   OFFSET
  </code>
  clause, as is
  <code class=""literal"">
   OFFSET
  </code>
  with a NULL argument.
 </p>
 <p>
  If both
  <code class=""literal"">
   OFFSET
  </code>
  and
  <code class=""literal"">
   LIMIT
  </code>
  appear, then
  <code class=""literal"">
   OFFSET
  </code>
  rows are skipped before starting to count the
  <code class=""literal"">
   LIMIT
  </code>
  rows that are returned.
 </p>
 <p>
  When using
  <code class=""literal"">
   LIMIT
  </code>
  , it is important to use an
  <code class=""literal"">
   ORDER BY
  </code>
  clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows. You might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? The ordering is unknown, unless you specified
  <code class=""literal"">
   ORDER BY
  </code>
  .
 </p>
 <p>
  The query optimizer takes
  <code class=""literal"">
   LIMIT
  </code>
  into account when generating query plans, so you are very likely to get different plans (yielding different row orders) depending on what you give for
  <code class=""literal"">
   LIMIT
  </code>
  and
  <code class=""literal"">
   OFFSET
  </code>
  . Thus, using different
  <code class=""literal"">
   LIMIT
  </code>
  /
  <code class=""literal"">
   OFFSET
  </code>
  values to select different subsets of a query result
  <span class=""emphasis"">
   <em>
    will give inconsistent results
   </em>
  </span>
  unless you enforce a predictable result ordering with
  <code class=""literal"">
   ORDER BY
  </code>
  . This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless
  <code class=""literal"">
   ORDER BY
  </code>
  is used to constrain the order.
 </p>
 <p>
  The rows skipped by an
  <code class=""literal"">
   OFFSET
  </code>
  clause still have to be computed inside the server; therefore a large
  <code class=""literal"">
   OFFSET
  </code>
  might be inefficient.
 </p>
</div>
"
7. Queries,7.7. VALUES Lists,https://www.postgresql.org/docs/17/queries-values.html,"<div class=""sect1"" id=""QUERIES-VALUES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.7.
     <code class=""literal"">
      VALUES
     </code>
     Lists
     <a class=""id_link"" href=""#QUERIES-VALUES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.11.2"" name=""id-1.5.6.11.2"">
 </a>
 <p>
  <code class=""literal"">
   VALUES
  </code>
  provides a way to generate a
  <span class=""quote"">
   “
   <span class=""quote"">
    constant table
   </span>
   ”
  </span>
  that can be used in a query without having to actually create and populate a table on-disk. The syntax is
 </p>
 <pre class=""synopsis"">
VALUES ( <em class=""replaceable""><code>expression</code></em> [, ...] ) [, ...]
</pre>
 <p>
  Each parenthesized list of expressions generates a row in the table. The lists must all have the same number of elements (i.e., the number of columns in the table), and corresponding entries in each list must have compatible data types. The actual data type assigned to each column of the result is determined using the same rules as for
  <code class=""literal"">
   UNION
  </code>
  (see
  <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
   Section 10.5
  </a>
  ).
 </p>
 <p>
  As an example:
 </p>
 <pre class=""programlisting"">
VALUES (1, 'one'), (2, 'two'), (3, 'three');
</pre>
 <p>
  will return a table of two columns and three rows. It's effectively equivalent to:
 </p>
 <pre class=""programlisting"">
SELECT 1 AS column1, 'one' AS column2
UNION ALL
SELECT 2, 'two'
UNION ALL
SELECT 3, 'three';
</pre>
 <p>
  By default,
  <span class=""productname"">
   PostgreSQL
  </span>
  assigns the names
  <code class=""literal"">
   column1
  </code>
  ,
  <code class=""literal"">
   column2
  </code>
  , etc. to the columns of a
  <code class=""literal"">
   VALUES
  </code>
  table. The column names are not specified by the SQL standard and different database systems do it differently, so it's usually better to override the default names with a table alias list, like this:
 </p>
 <pre class=""programlisting"">
=&gt; SELECT * FROM (VALUES (1, 'one'), (2, 'two'), (3, 'three')) AS t (num,letter);
 num | letter
-----+--------
   1 | one
   2 | two
   3 | three
(3 rows)
</pre>
 <p>
  Syntactically,
  <code class=""literal"">
   VALUES
  </code>
  followed by expression lists is treated as equivalent to:
 </p>
 <pre class=""synopsis"">
SELECT <em class=""replaceable""><code>select_list</code></em> FROM <em class=""replaceable""><code>table_expression</code></em>
</pre>
 <p>
  and can appear anywhere a
  <code class=""literal"">
   SELECT
  </code>
  can. For example, you can use it as part of a
  <code class=""literal"">
   UNION
  </code>
  , or attach a
  <em class=""replaceable"">
   <code>
    sort_specification
   </code>
  </em>
  (
  <code class=""literal"">
   ORDER BY
  </code>
  ,
  <code class=""literal"">
   LIMIT
  </code>
  , and/or
  <code class=""literal"">
   OFFSET
  </code>
  ) to it.
  <code class=""literal"">
   VALUES
  </code>
  is most commonly used as the data source in an
  <code class=""command"">
   INSERT
  </code>
  command, and next most commonly as a subquery.
 </p>
 <p>
  For more information see
  <a class=""xref"" href=""sql-values.html"" title=""VALUES"">
   <span class=""refentrytitle"">
    VALUES
   </span>
  </a>
  .
 </p>
</div>
"
7. Queries,7.8. WITH Queries (Common Table Expressions),https://www.postgresql.org/docs/17/queries-with.html,"<div class=""sect1"" id=""QUERIES-WITH"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     7.8.
     <code class=""literal"">
      WITH
     </code>
     Queries (Common Table Expressions)
     <a class=""id_link"" href=""#QUERIES-WITH"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""queries-with.html#QUERIES-WITH-SELECT"">
      7.8.1.
      <code class=""command"">
       SELECT
      </code>
      in
      <code class=""literal"">
       WITH
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-with.html#QUERIES-WITH-RECURSIVE"">
      7.8.2. Recursive Queries
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-with.html#QUERIES-WITH-CTE-MATERIALIZATION"">
      7.8.3. Common Table Expression Materialization
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""queries-with.html#QUERIES-WITH-MODIFYING"">
      7.8.4. Data-Modifying Statements in
      <code class=""literal"">
       WITH
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.6.12.2"" name=""id-1.5.6.12.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.6.12.3"" name=""id-1.5.6.12.3"">
 </a>
 <p>
  <code class=""literal"">
   WITH
  </code>
  provides a way to write auxiliary statements for use in a larger query. These statements, which are often referred to as Common Table Expressions or
  <acronym class=""acronym"">
   CTE
  </acronym>
  s, can be thought of as defining temporary tables that exist just for one query. Each auxiliary statement in a
  <code class=""literal"">
   WITH
  </code>
  clause can be a
  <code class=""command"">
   SELECT
  </code>
  ,
  <code class=""command"">
   INSERT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  ,
  <code class=""command"">
   DELETE
  </code>
  , or
  <code class=""command"">
   MERGE
  </code>
  ; and the
  <code class=""literal"">
   WITH
  </code>
  clause itself is attached to a primary statement that can also be a
  <code class=""command"">
   SELECT
  </code>
  ,
  <code class=""command"">
   INSERT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  ,
  <code class=""command"">
   DELETE
  </code>
  , or
  <code class=""command"">
   MERGE
  </code>
  .
 </p>
 <div class=""sect2"" id=""QUERIES-WITH-SELECT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.8.1.
      <code class=""command"">
       SELECT
      </code>
      in
      <code class=""literal"">
       WITH
      </code>
      <a class=""id_link"" href=""#QUERIES-WITH-SELECT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The basic value of
   <code class=""command"">
    SELECT
   </code>
   in
   <code class=""literal"">
    WITH
   </code>
   is to break down complicated queries into simpler parts. An example is:
  </p>
  <pre class=""programlisting"">
WITH regional_sales AS (
    SELECT region, SUM(amount) AS total_sales
    FROM orders
    GROUP BY region
), top_regions AS (
    SELECT region
    FROM regional_sales
    WHERE total_sales &gt; (SELECT SUM(total_sales)/10 FROM regional_sales)
)
SELECT region,
       product,
       SUM(quantity) AS product_units,
       SUM(amount) AS product_sales
FROM orders
WHERE region IN (SELECT region FROM top_regions)
GROUP BY region, product;
</pre>
  <p>
   which displays per-product sales totals in only the top sales regions. The
   <code class=""literal"">
    WITH
   </code>
   clause defines two auxiliary statements named
   <code class=""structname"">
    regional_sales
   </code>
   and
   <code class=""structname"">
    top_regions
   </code>
   , where the output of
   <code class=""structname"">
    regional_sales
   </code>
   is used in
   <code class=""structname"">
    top_regions
   </code>
   and the output of
   <code class=""structname"">
    top_regions
   </code>
   is used in the primary
   <code class=""command"">
    SELECT
   </code>
   query. This example could have been written without
   <code class=""literal"">
    WITH
   </code>
   , but we'd have needed two levels of nested sub-
   <code class=""command"">
    SELECT
   </code>
   s. It's a bit easier to follow this way.
  </p>
 </div>
 <div class=""sect2"" id=""QUERIES-WITH-RECURSIVE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.8.2. Recursive Queries
      <a class=""id_link"" href=""#QUERIES-WITH-RECURSIVE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""indexterm"" id=""id-1.5.6.12.6.2.1"" name=""id-1.5.6.12.6.2.1"">
   </a>
   The optional
   <code class=""literal"">
    RECURSIVE
   </code>
   modifier changes
   <code class=""literal"">
    WITH
   </code>
   from a mere syntactic convenience into a feature that accomplishes things not otherwise possible in standard SQL. Using
   <code class=""literal"">
    RECURSIVE
   </code>
   , a
   <code class=""literal"">
    WITH
   </code>
   query can refer to its own output. A very simple example is this query to sum the integers from 1 through 100:
  </p>
  <pre class=""programlisting"">
WITH RECURSIVE t(n) AS (
    VALUES (1)
  UNION ALL
    SELECT n+1 FROM t WHERE n &lt; 100
)
SELECT sum(n) FROM t;
</pre>
  <p>
   The general form of a recursive
   <code class=""literal"">
    WITH
   </code>
   query is always a
   <em class=""firstterm"">
    non-recursive term
   </em>
   , then
   <code class=""literal"">
    UNION
   </code>
   (or
   <code class=""literal"">
    UNION ALL
   </code>
   ), then a
   <em class=""firstterm"">
    recursive term
   </em>
   , where only the recursive term can contain a reference to the query's own output. Such a query is executed as follows:
  </p>
  <div class=""procedure"" id=""id-1.5.6.12.6.3"">
   <p class=""title"">
    <strong>
     Recursive Query Evaluation
    </strong>
   </p>
   <ol class=""procedure"" type=""1"">
    <li class=""step"">
     <p>
      Evaluate the non-recursive term. For
      <code class=""literal"">
       UNION
      </code>
      (but not
      <code class=""literal"">
       UNION ALL
      </code>
      ), discard duplicate rows. Include all remaining rows in the result of the recursive query, and also place them in a temporary
      <em class=""firstterm"">
       working table
      </em>
      .
     </p>
    </li>
    <li class=""step"">
     <p>
      So long as the working table is not empty, repeat these steps:
     </p>
     <ol class=""substeps"" type=""a"">
      <li class=""step"">
       <p>
        Evaluate the recursive term, substituting the current contents of the working table for the recursive self-reference. For
        <code class=""literal"">
         UNION
        </code>
        (but not
        <code class=""literal"">
         UNION ALL
        </code>
        ), discard duplicate rows and rows that duplicate any previous result row. Include all remaining rows in the result of the recursive query, and also place them in a temporary
        <em class=""firstterm"">
         intermediate table
        </em>
        .
       </p>
      </li>
      <li class=""step"">
       <p>
        Replace the contents of the working table with the contents of the intermediate table, then empty the intermediate table.
       </p>
      </li>
     </ol>
    </li>
   </ol>
  </div>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    While
    <code class=""literal"">
     RECURSIVE
    </code>
    allows queries to be specified recursively, internally such queries are evaluated iteratively.
   </p>
  </div>
  <p>
   In the example above, the working table has just a single row in each step, and it takes on the values from 1 through 100 in successive steps. In the 100th step, there is no output because of the
   <code class=""literal"">
    WHERE
   </code>
   clause, and so the query terminates.
  </p>
  <p>
   Recursive queries are typically used to deal with hierarchical or tree-structured data. A useful example is this query to find all the direct and indirect sub-parts of a product, given only a table that shows immediate inclusions:
  </p>
  <pre class=""programlisting"">
WITH RECURSIVE included_parts(sub_part, part, quantity) AS (
    SELECT sub_part, part, quantity FROM parts WHERE part = 'our_product'
  UNION ALL
    SELECT p.sub_part, p.part, p.quantity * pr.quantity
    FROM included_parts pr, parts p
    WHERE p.part = pr.sub_part
)
SELECT sub_part, SUM(quantity) as total_quantity
FROM included_parts
GROUP BY sub_part
</pre>
  <div class=""sect3"" id=""QUERIES-WITH-SEARCH"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.8.2.1. Search Order
       <a class=""id_link"" href=""#QUERIES-WITH-SEARCH"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    When computing a tree traversal using a recursive query, you might want to order the results in either depth-first or breadth-first order. This can be done by computing an ordering column alongside the other data columns and using that to sort the results at the end. Note that this does not actually control in which order the query evaluation visits the rows; that is as always in SQL implementation-dependent. This approach merely provides a convenient way to order the results afterwards.
   </p>
   <p>
    To create a depth-first order, we compute for each result row an array of rows that we have visited so far. For example, consider the following query that searches a table
    <code class=""structname"">
     tree
    </code>
    using a
    <code class=""structfield"">
     link
    </code>
    field:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_tree(id, link, data) AS (
    SELECT t.id, t.link, t.data
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data
    FROM tree t, search_tree st
    WHERE t.id = st.link
)
SELECT * FROM search_tree;
</pre>
   <p>
    To add depth-first ordering information, you can write this:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_tree(id, link, data, <span class=""emphasis""><strong>path</strong></span>) AS (
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>ARRAY[t.id]</strong></span>
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>path || t.id</strong></span>
    FROM tree t, search_tree st
    WHERE t.id = st.link
)
SELECT * FROM search_tree <span class=""emphasis""><strong>ORDER BY path</strong></span>;
</pre>
   <p>
    In the general case where more than one field needs to be used to identify a row, use an array of rows. For example, if we needed to track fields
    <code class=""structfield"">
     f1
    </code>
    and
    <code class=""structfield"">
     f2
    </code>
    :
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_tree(id, link, data, <span class=""emphasis""><strong>path</strong></span>) AS (
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>ARRAY[ROW(t.f1, t.f2)]</strong></span>
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>path || ROW(t.f1, t.f2)</strong></span>
    FROM tree t, search_tree st
    WHERE t.id = st.link
)
SELECT * FROM search_tree <span class=""emphasis""><strong>ORDER BY path</strong></span>;
</pre>
   <div class=""tip"">
    <h3 class=""title"">
     Tip
    </h3>
    <p>
     Omit the
     <code class=""literal"">
      ROW()
     </code>
     syntax in the common case where only one field needs to be tracked. This allows a simple array rather than a composite-type array to be used, gaining efficiency.
    </p>
   </div>
   <p>
    To create a breadth-first order, you can add a column that tracks the depth of the search, for example:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_tree(id, link, data, <span class=""emphasis""><strong>depth</strong></span>) AS (
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>0</strong></span>
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data, <span class=""emphasis""><strong>depth + 1</strong></span>
    FROM tree t, search_tree st
    WHERE t.id = st.link
)
SELECT * FROM search_tree <span class=""emphasis""><strong>ORDER BY depth</strong></span>;
</pre>
   <p>
    To get a stable sort, add data columns as secondary sorting columns.
   </p>
   <div class=""tip"">
    <h3 class=""title"">
     Tip
    </h3>
    <p>
     The recursive query evaluation algorithm produces its output in breadth-first search order. However, this is an implementation detail and it is perhaps unsound to rely on it. The order of the rows within each level is certainly undefined, so some explicit ordering might be desired in any case.
    </p>
   </div>
   <p>
    There is built-in syntax to compute a depth- or breadth-first sort column. For example:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_tree(id, link, data) AS (
    SELECT t.id, t.link, t.data
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data
    FROM tree t, search_tree st
    WHERE t.id = st.link
) <span class=""emphasis""><strong>SEARCH DEPTH FIRST BY id SET ordercol</strong></span>
SELECT * FROM search_tree ORDER BY ordercol;

WITH RECURSIVE search_tree(id, link, data) AS (
    SELECT t.id, t.link, t.data
    FROM tree t
  UNION ALL
    SELECT t.id, t.link, t.data
    FROM tree t, search_tree st
    WHERE t.id = st.link
) <span class=""emphasis""><strong>SEARCH BREADTH FIRST BY id SET ordercol</strong></span>
SELECT * FROM search_tree ORDER BY ordercol;
</pre>
   <p>
    This syntax is internally expanded to something similar to the above hand-written forms. The
    <code class=""literal"">
     SEARCH
    </code>
    clause specifies whether depth- or breadth first search is wanted, the list of columns to track for sorting, and a column name that will contain the result data that can be used for sorting. That column will implicitly be added to the output rows of the CTE.
   </p>
  </div>
  <div class=""sect3"" id=""QUERIES-WITH-CYCLE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       7.8.2.2. Cycle Detection
       <a class=""id_link"" href=""#QUERIES-WITH-CYCLE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    When working with recursive queries it is important to be sure that the recursive part of the query will eventually return no tuples, or else the query will loop indefinitely. Sometimes, using
    <code class=""literal"">
     UNION
    </code>
    instead of
    <code class=""literal"">
     UNION ALL
    </code>
    can accomplish this by discarding rows that duplicate previous output rows. However, often a cycle does not involve output rows that are completely duplicate: it may be necessary to check just one or a few fields to see if the same point has been reached before. The standard method for handling such situations is to compute an array of the already-visited values. For example, consider again the following query that searches a table
    <code class=""structname"">
     graph
    </code>
    using a
    <code class=""structfield"">
     link
    </code>
    field:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_graph(id, link, data, depth) AS (
    SELECT g.id, g.link, g.data, 0
    FROM graph g
  UNION ALL
    SELECT g.id, g.link, g.data, sg.depth + 1
    FROM graph g, search_graph sg
    WHERE g.id = sg.link
)
SELECT * FROM search_graph;
</pre>
   <p>
    This query will loop if the
    <code class=""structfield"">
     link
    </code>
    relationships contain cycles. Because we require a
    <span class=""quote"">
     “
     <span class=""quote"">
      depth
     </span>
     ”
    </span>
    output, just changing
    <code class=""literal"">
     UNION ALL
    </code>
    to
    <code class=""literal"">
     UNION
    </code>
    would not eliminate the looping. Instead we need to recognize whether we have reached the same row again while following a particular path of links. We add two columns
    <code class=""structfield"">
     is_cycle
    </code>
    and
    <code class=""structfield"">
     path
    </code>
    to the loop-prone query:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_graph(id, link, data, depth, <span class=""emphasis""><strong>is_cycle, path</strong></span>) AS (
    SELECT g.id, g.link, g.data, 0,
      <span class=""emphasis""><strong>false,
      ARRAY[g.id]</strong></span>
    FROM graph g
  UNION ALL
    SELECT g.id, g.link, g.data, sg.depth + 1,
      <span class=""emphasis""><strong>g.id = ANY(path),
      path || g.id</strong></span>
    FROM graph g, search_graph sg
    WHERE g.id = sg.link <span class=""emphasis""><strong>AND NOT is_cycle</strong></span>
)
SELECT * FROM search_graph;
</pre>
   <p>
    Aside from preventing cycles, the array value is often useful in its own right as representing the
    <span class=""quote"">
     “
     <span class=""quote"">
      path
     </span>
     ”
    </span>
    taken to reach any particular row.
   </p>
   <p>
    In the general case where more than one field needs to be checked to recognize a cycle, use an array of rows. For example, if we needed to compare fields
    <code class=""structfield"">
     f1
    </code>
    and
    <code class=""structfield"">
     f2
    </code>
    :
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_graph(id, link, data, depth, <span class=""emphasis""><strong>is_cycle, path</strong></span>) AS (
    SELECT g.id, g.link, g.data, 0,
      <span class=""emphasis""><strong>false,
      ARRAY[ROW(g.f1, g.f2)]</strong></span>
    FROM graph g
  UNION ALL
    SELECT g.id, g.link, g.data, sg.depth + 1,
      <span class=""emphasis""><strong>ROW(g.f1, g.f2) = ANY(path),
      path || ROW(g.f1, g.f2)</strong></span>
    FROM graph g, search_graph sg
    WHERE g.id = sg.link <span class=""emphasis""><strong>AND NOT is_cycle</strong></span>
)
SELECT * FROM search_graph;
</pre>
   <div class=""tip"">
    <h3 class=""title"">
     Tip
    </h3>
    <p>
     Omit the
     <code class=""literal"">
      ROW()
     </code>
     syntax in the common case where only one field needs to be checked to recognize a cycle. This allows a simple array rather than a composite-type array to be used, gaining efficiency.
    </p>
   </div>
   <p>
    There is built-in syntax to simplify cycle detection. The above query can also be written like this:
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE search_graph(id, link, data, depth) AS (
    SELECT g.id, g.link, g.data, 1
    FROM graph g
  UNION ALL
    SELECT g.id, g.link, g.data, sg.depth + 1
    FROM graph g, search_graph sg
    WHERE g.id = sg.link
) <span class=""emphasis""><strong>CYCLE id SET is_cycle USING path</strong></span>
SELECT * FROM search_graph;
</pre>
   <p>
    and it will be internally rewritten to the above form. The
    <code class=""literal"">
     CYCLE
    </code>
    clause specifies first the list of columns to track for cycle detection, then a column name that will show whether a cycle has been detected, and finally the name of another column that will track the path. The cycle and path columns will implicitly be added to the output rows of the CTE.
   </p>
   <div class=""tip"">
    <h3 class=""title"">
     Tip
    </h3>
    <p>
     The cycle path column is computed in the same way as the depth-first ordering column show in the previous section. A query can have both a
     <code class=""literal"">
      SEARCH
     </code>
     and a
     <code class=""literal"">
      CYCLE
     </code>
     clause, but a depth-first search specification and a cycle detection specification would create redundant computations, so it's more efficient to just use the
     <code class=""literal"">
      CYCLE
     </code>
     clause and order by the path column. If breadth-first ordering is wanted, then specifying both
     <code class=""literal"">
      SEARCH
     </code>
     and
     <code class=""literal"">
      CYCLE
     </code>
     can be useful.
    </p>
   </div>
   <p>
    A helpful trick for testing queries when you are not certain if they might loop is to place a
    <code class=""literal"">
     LIMIT
    </code>
    in the parent query. For example, this query would loop forever without the
    <code class=""literal"">
     LIMIT
    </code>
    :
   </p>
   <pre class=""programlisting"">
WITH RECURSIVE t(n) AS (
    SELECT 1
  UNION ALL
    SELECT n+1 FROM t
)
SELECT n FROM t <span class=""emphasis""><strong>LIMIT 100</strong></span>;
</pre>
   <p>
    This works because
    <span class=""productname"">
     PostgreSQL
    </span>
    's implementation evaluates only as many rows of a
    <code class=""literal"">
     WITH
    </code>
    query as are actually fetched by the parent query. Using this trick in production is not recommended, because other systems might work differently. Also, it usually won't work if you make the outer query sort the recursive query's results or join them to some other table, because in such cases the outer query will usually try to fetch all of the
    <code class=""literal"">
     WITH
    </code>
    query's output anyway.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""QUERIES-WITH-CTE-MATERIALIZATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.8.3. Common Table Expression Materialization
      <a class=""id_link"" href=""#QUERIES-WITH-CTE-MATERIALIZATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   A useful property of
   <code class=""literal"">
    WITH
   </code>
   queries is that they are normally evaluated only once per execution of the parent query, even if they are referred to more than once by the parent query or sibling
   <code class=""literal"">
    WITH
   </code>
   queries. Thus, expensive calculations that are needed in multiple places can be placed within a
   <code class=""literal"">
    WITH
   </code>
   query to avoid redundant work. Another possible application is to prevent unwanted multiple evaluations of functions with side-effects. However, the other side of this coin is that the optimizer is not able to push restrictions from the parent query down into a multiply-referenced
   <code class=""literal"">
    WITH
   </code>
   query, since that might affect all uses of the
   <code class=""literal"">
    WITH
   </code>
   query's output when it should affect only one. The multiply-referenced
   <code class=""literal"">
    WITH
   </code>
   query will be evaluated as written, without suppression of rows that the parent query might discard afterwards. (But, as mentioned above, evaluation might stop early if the reference(s) to the query demand only a limited number of rows.)
  </p>
  <p>
   However, if a
   <code class=""literal"">
    WITH
   </code>
   query is non-recursive and side-effect-free (that is, it is a
   <code class=""literal"">
    SELECT
   </code>
   containing no volatile functions) then it can be folded into the parent query, allowing joint optimization of the two query levels. By default, this happens if the parent query references the
   <code class=""literal"">
    WITH
   </code>
   query just once, but not if it references the
   <code class=""literal"">
    WITH
   </code>
   query more than once. You can override that decision by specifying
   <code class=""literal"">
    MATERIALIZED
   </code>
   to force separate calculation of the
   <code class=""literal"">
    WITH
   </code>
   query, or by specifying
   <code class=""literal"">
    NOT MATERIALIZED
   </code>
   to force it to be merged into the parent query. The latter choice risks duplicate computation of the
   <code class=""literal"">
    WITH
   </code>
   query, but it can still give a net savings if each usage of the
   <code class=""literal"">
    WITH
   </code>
   query needs only a small part of the
   <code class=""literal"">
    WITH
   </code>
   query's full output.
  </p>
  <p>
   A simple example of these rules is
  </p>
  <pre class=""programlisting"">
WITH w AS (
    SELECT * FROM big_table
)
SELECT * FROM w WHERE key = 123;
</pre>
  <p>
   This
   <code class=""literal"">
    WITH
   </code>
   query will be folded, producing the same execution plan as
  </p>
  <pre class=""programlisting"">
SELECT * FROM big_table WHERE key = 123;
</pre>
  <p>
   In particular, if there's an index on
   <code class=""structfield"">
    key
   </code>
   , it will probably be used to fetch just the rows having
   <code class=""literal"">
    key = 123
   </code>
   . On the other hand, in
  </p>
  <pre class=""programlisting"">
WITH w AS (
    SELECT * FROM big_table
)
SELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref
WHERE w2.key = 123;
</pre>
  <p>
   the
   <code class=""literal"">
    WITH
   </code>
   query will be materialized, producing a temporary copy of
   <code class=""structname"">
    big_table
   </code>
   that is then joined with itself — without benefit of any index. This query will be executed much more efficiently if written as
  </p>
  <pre class=""programlisting"">
WITH w AS NOT MATERIALIZED (
    SELECT * FROM big_table
)
SELECT * FROM w AS w1 JOIN w AS w2 ON w1.key = w2.ref
WHERE w2.key = 123;
</pre>
  <p>
   so that the parent query's restrictions can be applied directly to scans of
   <code class=""structname"">
    big_table
   </code>
   .
  </p>
  <p>
   An example where
   <code class=""literal"">
    NOT MATERIALIZED
   </code>
   could be undesirable is
  </p>
  <pre class=""programlisting"">
WITH w AS (
    SELECT key, very_expensive_function(val) as f FROM some_table
)
SELECT * FROM w AS w1 JOIN w AS w2 ON w1.f = w2.f;
</pre>
  <p>
   Here, materialization of the
   <code class=""literal"">
    WITH
   </code>
   query ensures that
   <code class=""function"">
    very_expensive_function
   </code>
   is evaluated only once per table row, not twice.
  </p>
  <p>
   The examples above only show
   <code class=""literal"">
    WITH
   </code>
   being used with
   <code class=""command"">
    SELECT
   </code>
   , but it can be attached in the same way to
   <code class=""command"">
    INSERT
   </code>
   ,
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   , or
   <code class=""command"">
    MERGE
   </code>
   . In each case it effectively provides temporary table(s) that can be referred to in the main command.
  </p>
 </div>
 <div class=""sect2"" id=""QUERIES-WITH-MODIFYING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      7.8.4. Data-Modifying Statements in
      <code class=""literal"">
       WITH
      </code>
      <a class=""id_link"" href=""#QUERIES-WITH-MODIFYING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   You can use data-modifying statements (
   <code class=""command"">
    INSERT
   </code>
   ,
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   , or
   <code class=""command"">
    MERGE
   </code>
   ) in
   <code class=""literal"">
    WITH
   </code>
   . This allows you to perform several different operations in the same query. An example is:
  </p>
  <pre class=""programlisting"">
WITH moved_rows AS (
    DELETE FROM products
    WHERE
        ""date"" &gt;= '2010-10-01' AND
        ""date"" &lt; '2010-11-01'
    RETURNING *
)
INSERT INTO products_log
SELECT * FROM moved_rows;
</pre>
  <p>
   This query effectively moves rows from
   <code class=""structname"">
    products
   </code>
   to
   <code class=""structname"">
    products_log
   </code>
   . The
   <code class=""command"">
    DELETE
   </code>
   in
   <code class=""literal"">
    WITH
   </code>
   deletes the specified rows from
   <code class=""structname"">
    products
   </code>
   , returning their contents by means of its
   <code class=""literal"">
    RETURNING
   </code>
   clause; and then the primary query reads that output and inserts it into
   <code class=""structname"">
    products_log
   </code>
   .
  </p>
  <p>
   A fine point of the above example is that the
   <code class=""literal"">
    WITH
   </code>
   clause is attached to the
   <code class=""command"">
    INSERT
   </code>
   , not the sub-
   <code class=""command"">
    SELECT
   </code>
   within the
   <code class=""command"">
    INSERT
   </code>
   . This is necessary because data-modifying statements are only allowed in
   <code class=""literal"">
    WITH
   </code>
   clauses that are attached to the top-level statement. However, normal
   <code class=""literal"">
    WITH
   </code>
   visibility rules apply, so it is possible to refer to the
   <code class=""literal"">
    WITH
   </code>
   statement's output from the sub-
   <code class=""command"">
    SELECT
   </code>
   .
  </p>
  <p>
   Data-modifying statements in
   <code class=""literal"">
    WITH
   </code>
   usually have
   <code class=""literal"">
    RETURNING
   </code>
   clauses (see
   <a class=""xref"" href=""dml-returning.html"" title=""6.4. Returning Data from Modified Rows"">
    Section 6.4
   </a>
   ), as shown in the example above. It is the output of the
   <code class=""literal"">
    RETURNING
   </code>
   clause,
   <span class=""emphasis"">
    <em>
     not
    </em>
   </span>
   the target table of the data-modifying statement, that forms the temporary table that can be referred to by the rest of the query. If a data-modifying statement in
   <code class=""literal"">
    WITH
   </code>
   lacks a
   <code class=""literal"">
    RETURNING
   </code>
   clause, then it forms no temporary table and cannot be referred to in the rest of the query. Such a statement will be executed nonetheless. A not-particularly-useful example is:
  </p>
  <pre class=""programlisting"">
WITH t AS (
    DELETE FROM foo
)
DELETE FROM bar;
</pre>
  <p>
   This example would remove all rows from tables
   <code class=""structname"">
    foo
   </code>
   and
   <code class=""structname"">
    bar
   </code>
   . The number of affected rows reported to the client would only include rows removed from
   <code class=""structname"">
    bar
   </code>
   .
  </p>
  <p>
   Recursive self-references in data-modifying statements are not allowed. In some cases it is possible to work around this limitation by referring to the output of a recursive
   <code class=""literal"">
    WITH
   </code>
   , for example:
  </p>
  <pre class=""programlisting"">
WITH RECURSIVE included_parts(sub_part, part) AS (
    SELECT sub_part, part FROM parts WHERE part = 'our_product'
  UNION ALL
    SELECT p.sub_part, p.part
    FROM included_parts pr, parts p
    WHERE p.part = pr.sub_part
)
DELETE FROM parts
  WHERE part IN (SELECT part FROM included_parts);
</pre>
  <p>
   This query would remove all direct and indirect subparts of a product.
  </p>
  <p>
   Data-modifying statements in
   <code class=""literal"">
    WITH
   </code>
   are executed exactly once, and always to completion, independently of whether the primary query reads all (or indeed any) of their output. Notice that this is different from the rule for
   <code class=""command"">
    SELECT
   </code>
   in
   <code class=""literal"">
    WITH
   </code>
   : as stated in the previous section, execution of a
   <code class=""command"">
    SELECT
   </code>
   is carried only as far as the primary query demands its output.
  </p>
  <p>
   The sub-statements in
   <code class=""literal"">
    WITH
   </code>
   are executed concurrently with each other and with the main query. Therefore, when using data-modifying statements in
   <code class=""literal"">
    WITH
   </code>
   , the order in which the specified updates actually happen is unpredictable. All the statements are executed with the same
   <em class=""firstterm"">
    snapshot
   </em>
   (see
   <a class=""xref"" href=""mvcc.html"" title=""Chapter 13. Concurrency Control"">
    Chapter 13
   </a>
   ), so they cannot
   <span class=""quote"">
    “
    <span class=""quote"">
     see
    </span>
    ”
   </span>
   one another's effects on the target tables. This alleviates the effects of the unpredictability of the actual order of row updates, and means that
   <code class=""literal"">
    RETURNING
   </code>
   data is the only way to communicate changes between different
   <code class=""literal"">
    WITH
   </code>
   sub-statements and the main query. An example of this is that in
  </p>
  <pre class=""programlisting"">
WITH t AS (
    UPDATE products SET price = price * 1.05
    RETURNING *
)
SELECT * FROM products;
</pre>
  <p>
   the outer
   <code class=""command"">
    SELECT
   </code>
   would return the original prices before the action of the
   <code class=""command"">
    UPDATE
   </code>
   , while in
  </p>
  <pre class=""programlisting"">
WITH t AS (
    UPDATE products SET price = price * 1.05
    RETURNING *
)
SELECT * FROM t;
</pre>
  <p>
   the outer
   <code class=""command"">
    SELECT
   </code>
   would return the updated data.
  </p>
  <p>
   Trying to update the same row twice in a single statement is not supported. Only one of the modifications takes place, but it is not easy (and sometimes not possible) to reliably predict which one. This also applies to deleting a row that was already updated in the same statement: only the update is performed. Therefore you should generally avoid trying to modify a single row twice in a single statement. In particular avoid writing
   <code class=""literal"">
    WITH
   </code>
   sub-statements that could affect the same rows changed by the main statement or a sibling sub-statement. The effects of such a statement will not be predictable.
  </p>
  <p>
   At present, any table used as the target of a data-modifying statement in
   <code class=""literal"">
    WITH
   </code>
   must not have a conditional rule, nor an
   <code class=""literal"">
    ALSO
   </code>
   rule, nor an
   <code class=""literal"">
    INSTEAD
   </code>
   rule that expands to multiple statements.
  </p>
 </div>
</div>
"
8. Data Types,8.1. Numeric Types,https://www.postgresql.org/docs/17/datatype-numeric.html,"<div class=""sect1"" id=""DATATYPE-NUMERIC"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.1. Numeric Types
     <a class=""id_link"" href=""#DATATYPE-NUMERIC"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-numeric.html#DATATYPE-INT"">
      8.1.1. Integer Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-numeric.html#DATATYPE-NUMERIC-DECIMAL"">
      8.1.2. Arbitrary Precision Numbers
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-numeric.html#DATATYPE-FLOAT"">
      8.1.3. Floating-Point Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-numeric.html#DATATYPE-SERIAL"">
      8.1.4. Serial Types
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.9.2"" name=""id-1.5.7.9.2"">
 </a>
 <p>
  Numeric types consist of two-, four-, and eight-byte integers, four- and eight-byte floating-point numbers, and selectable-precision decimals.
  <a class=""xref"" href=""datatype-numeric.html#DATATYPE-NUMERIC-TABLE"" title=""Table 8.2. Numeric Types"">
   Table 8.2
  </a>
  lists the available types.
 </p>
 <div class=""table"" id=""DATATYPE-NUMERIC-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.2. Numeric Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Numeric Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
     <col class=""col4""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
      <th>
       Range
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        smallint
       </code>
      </td>
      <td>
       2 bytes
      </td>
      <td>
       small-range integer
      </td>
      <td>
       -32768 to +32767
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        integer
       </code>
      </td>
      <td>
       4 bytes
      </td>
      <td>
       typical choice for integer
      </td>
      <td>
       -2147483648 to +2147483647
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        bigint
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       large-range integer
      </td>
      <td>
       -9223372036854775808 to +9223372036854775807
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        decimal
       </code>
      </td>
      <td>
       variable
      </td>
      <td>
       user-specified precision, exact
      </td>
      <td>
       up to 131072 digits before the decimal point; up to 16383 digits after the decimal point
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        numeric
       </code>
      </td>
      <td>
       variable
      </td>
      <td>
       user-specified precision, exact
      </td>
      <td>
       up to 131072 digits before the decimal point; up to 16383 digits after the decimal point
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        real
       </code>
      </td>
      <td>
       4 bytes
      </td>
      <td>
       variable-precision, inexact
      </td>
      <td>
       6 decimal digits precision
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        double precision
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       variable-precision, inexact
      </td>
      <td>
       15 decimal digits precision
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        smallserial
       </code>
      </td>
      <td>
       2 bytes
      </td>
      <td>
       small autoincrementing integer
      </td>
      <td>
       1 to 32767
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        serial
       </code>
      </td>
      <td>
       4 bytes
      </td>
      <td>
       autoincrementing integer
      </td>
      <td>
       1 to 2147483647
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        bigserial
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       large autoincrementing integer
      </td>
      <td>
       1 to 9223372036854775807
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The syntax of constants for the numeric types is described in
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS"" title=""4.1.2. Constants"">
   Section 4.1.2
  </a>
  . The numeric types have a full set of corresponding arithmetic operators and functions. Refer to
  <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
   Chapter 9
  </a>
  for more information. The following sections describe the types in detail.
 </p>
 <div class=""sect2"" id=""DATATYPE-INT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.1.1. Integer Types
      <a class=""id_link"" href=""#DATATYPE-INT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.9.6.2"" name=""id-1.5.7.9.6.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.6.3"" name=""id-1.5.7.9.6.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.6.4"" name=""id-1.5.7.9.6.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.6.5"" name=""id-1.5.7.9.6.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.6.6"" name=""id-1.5.7.9.6.6"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.6.7"" name=""id-1.5.7.9.6.7"">
  </a>
  <p>
   The types
   <code class=""type"">
    smallint
   </code>
   ,
   <code class=""type"">
    integer
   </code>
   , and
   <code class=""type"">
    bigint
   </code>
   store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.
  </p>
  <p>
   The type
   <code class=""type"">
    integer
   </code>
   is the common choice, as it offers the best balance between range, storage size, and performance. The
   <code class=""type"">
    smallint
   </code>
   type is generally only used if disk space is at a premium. The
   <code class=""type"">
    bigint
   </code>
   type is designed to be used when the range of the
   <code class=""type"">
    integer
   </code>
   type is insufficient.
  </p>
  <p>
   <acronym class=""acronym"">
    SQL
   </acronym>
   only specifies the integer types
   <code class=""type"">
    integer
   </code>
   (or
   <code class=""type"">
    int
   </code>
   ),
   <code class=""type"">
    smallint
   </code>
   , and
   <code class=""type"">
    bigint
   </code>
   . The type names
   <code class=""type"">
    int2
   </code>
   ,
   <code class=""type"">
    int4
   </code>
   , and
   <code class=""type"">
    int8
   </code>
   are extensions, which are also used by some other
   <acronym class=""acronym"">
    SQL
   </acronym>
   database systems.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-NUMERIC-DECIMAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.1.2. Arbitrary Precision Numbers
      <a class=""id_link"" href=""#DATATYPE-NUMERIC-DECIMAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.9.7.2"" name=""id-1.5.7.9.7.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.7.3"" name=""id-1.5.7.9.7.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.7.4"" name=""id-1.5.7.9.7.4"">
  </a>
  <p>
   The type
   <code class=""type"">
    numeric
   </code>
   can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. Calculations with
   <code class=""type"">
    numeric
   </code>
   values yield exact results where possible, e.g., addition, subtraction, multiplication. However, calculations on
   <code class=""type"">
    numeric
   </code>
   values are very slow compared to the integer types, or to the floating-point types described in the next section.
  </p>
  <p>
   We use the following terms below: The
   <em class=""firstterm"">
    precision
   </em>
   of a
   <code class=""type"">
    numeric
   </code>
   is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. The
   <em class=""firstterm"">
    scale
   </em>
   of a
   <code class=""type"">
    numeric
   </code>
   is the count of decimal digits in the fractional part, to the right of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.
  </p>
  <p>
   Both the maximum precision and the maximum scale of a
   <code class=""type"">
    numeric
   </code>
   column can be configured. To declare a column of type
   <code class=""type"">
    numeric
   </code>
   use the syntax:
  </p>
  <pre class=""programlisting"">
NUMERIC(<em class=""replaceable""><code>precision</code></em>, <em class=""replaceable""><code>scale</code></em>)
</pre>
  <p>
   The precision must be positive, while the scale may be positive or negative (see below). Alternatively:
  </p>
  <pre class=""programlisting"">
NUMERIC(<em class=""replaceable""><code>precision</code></em>)
</pre>
  <p>
   selects a scale of 0. Specifying:
  </p>
  <pre class=""programlisting"">
NUMERIC
</pre>
  <p>
   without any precision or scale creates an
   <span class=""quote"">
    “
    <span class=""quote"">
     unconstrained numeric
    </span>
    ”
   </span>
   column in which numeric values of any length can be stored, up to the implementation limits. A column of this kind will not coerce input values to any particular scale, whereas
   <code class=""type"">
    numeric
   </code>
   columns with a declared scale will coerce input values to that scale. (The
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.)
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The maximum precision that can be explicitly specified in a
    <code class=""type"">
     numeric
    </code>
    type declaration is 1000. An unconstrained
    <code class=""type"">
     numeric
    </code>
    column is subject to the limits described in
    <a class=""xref"" href=""datatype-numeric.html#DATATYPE-NUMERIC-TABLE"" title=""Table 8.2. Numeric Types"">
     Table 8.2
    </a>
    .
   </p>
  </div>
  <p>
   If the scale of a value to be stored is greater than the declared scale of the column, the system will round the value to the specified number of fractional digits. Then, if the number of digits to the left of the decimal point exceeds the declared precision minus the declared scale, an error is raised. For example, a column declared as
  </p>
  <pre class=""programlisting"">
NUMERIC(3, 1)
</pre>
  <p>
   will round values to 1 decimal place and can store values between -99.9 and 99.9, inclusive.
  </p>
  <p>
   Beginning in
   <span class=""productname"">
    PostgreSQL
   </span>
   15, it is allowed to declare a
   <code class=""type"">
    numeric
   </code>
   column with a negative scale. Then values will be rounded to the left of the decimal point. The precision still represents the maximum number of non-rounded digits. Thus, a column declared as
  </p>
  <pre class=""programlisting"">
NUMERIC(2, -3)
</pre>
  <p>
   will round values to the nearest thousand and can store values between -99000 and 99000, inclusive. It is also allowed to declare a scale larger than the declared precision. Such a column can only hold fractional values, and it requires the number of zero digits just to the right of the decimal point to be at least the declared scale minus the declared precision. For example, a column declared as
  </p>
  <pre class=""programlisting"">
NUMERIC(3, 5)
</pre>
  <p>
   will round values to 5 decimal places and can store values between -0.00999 and 0.00999, inclusive.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    permits the scale in a
    <code class=""type"">
     numeric
    </code>
    type declaration to be any value in the range -1000 to 1000. However, the
    <acronym class=""acronym"">
     SQL
    </acronym>
    standard requires the scale to be in the range 0 to
    <em class=""replaceable"">
     <code>
      precision
     </code>
    </em>
    . Using scales outside that range may not be portable to other database systems.
   </p>
  </div>
  <p>
   Numeric values are physically stored without any extra leading or trailing zeroes. Thus, the declared precision and scale of a column are maximums, not fixed allocations. (In this sense the
   <code class=""type"">
    numeric
   </code>
   type is more akin to
   <code class=""type"">
    varchar(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   than to
   <code class=""type"">
    char(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   .) The actual storage requirement is two bytes for each group of four decimal digits, plus three to eight bytes overhead.
  </p>
  <a class=""indexterm"" id=""id-1.5.7.9.7.13"" name=""id-1.5.7.9.7.13"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.7.14"" name=""id-1.5.7.9.7.14"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.7.15"" name=""id-1.5.7.9.7.15"">
  </a>
  <p>
   In addition to ordinary numeric values, the
   <code class=""type"">
    numeric
   </code>
   type has several special values:
  </p>
  <div class=""literallayout"">
   <p>
    <br/>
    <code class=""literal"">
     Infinity
    </code>
    <br/>
    <code class=""literal"">
     -Infinity
    </code>
    <br/>
    <code class=""literal"">
     NaN
    </code>
    <br/>
   </p>
  </div>
  <p>
   These are adapted from the IEEE 754 standard, and represent
   <span class=""quote"">
    “
    <span class=""quote"">
     infinity
    </span>
    ”
   </span>
   ,
   <span class=""quote"">
    “
    <span class=""quote"">
     negative infinity
    </span>
    ”
   </span>
   , and
   <span class=""quote"">
    “
    <span class=""quote"">
     not-a-number
    </span>
    ”
   </span>
   , respectively. When writing these values as constants in an SQL command, you must put quotes around them, for example
   <code class=""literal"">
    UPDATE table SET x = '-Infinity'
   </code>
   . On input, these strings are recognized in a case-insensitive manner. The infinity values can alternatively be spelled
   <code class=""literal"">
    inf
   </code>
   and
   <code class=""literal"">
    -inf
   </code>
   .
  </p>
  <p>
   The infinity values behave as per mathematical expectations. For example,
   <code class=""literal"">
    Infinity
   </code>
   plus any finite value equals
   <code class=""literal"">
    Infinity
   </code>
   , as does
   <code class=""literal"">
    Infinity
   </code>
   plus
   <code class=""literal"">
    Infinity
   </code>
   ; but
   <code class=""literal"">
    Infinity
   </code>
   minus
   <code class=""literal"">
    Infinity
   </code>
   yields
   <code class=""literal"">
    NaN
   </code>
   (not a number), because it has no well-defined interpretation. Note that an infinity can only be stored in an unconstrained
   <code class=""type"">
    numeric
   </code>
   column, because it notionally exceeds any finite precision limit.
  </p>
  <p>
   The
   <code class=""literal"">
    NaN
   </code>
   (not a number) value is used to represent undefined calculational results. In general, any operation with a
   <code class=""literal"">
    NaN
   </code>
   input yields another
   <code class=""literal"">
    NaN
   </code>
   . The only exception is when the operation's other inputs are such that the same output would be obtained if the
   <code class=""literal"">
    NaN
   </code>
   were to be replaced by any finite or infinite numeric value; then, that output value is used for
   <code class=""literal"">
    NaN
   </code>
   too. (An example of this principle is that
   <code class=""literal"">
    NaN
   </code>
   raised to the zero power yields one.)
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    In most implementations of the
    <span class=""quote"">
     “
     <span class=""quote"">
      not-a-number
     </span>
     ”
    </span>
    concept,
    <code class=""literal"">
     NaN
    </code>
    is not considered equal to any other numeric value (including
    <code class=""literal"">
     NaN
    </code>
    ). In order to allow
    <code class=""type"">
     numeric
    </code>
    values to be sorted and used in tree-based indexes,
    <span class=""productname"">
     PostgreSQL
    </span>
    treats
    <code class=""literal"">
     NaN
    </code>
    values as equal, and greater than all non-
    <code class=""literal"">
     NaN
    </code>
    values.
   </p>
  </div>
  <p>
   The types
   <code class=""type"">
    decimal
   </code>
   and
   <code class=""type"">
    numeric
   </code>
   are equivalent. Both types are part of the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard.
  </p>
  <p>
   When rounding values, the
   <code class=""type"">
    numeric
   </code>
   type rounds ties away from zero, while (on most machines) the
   <code class=""type"">
    real
   </code>
   and
   <code class=""type"">
    double precision
   </code>
   types round ties to the nearest even number. For example:
  </p>
  <pre class=""programlisting"">
SELECT x,
  round(x::numeric) AS num_round,
  round(x::double precision) AS dbl_round
FROM generate_series(-3.5, 3.5, 1) as x;
  x   | num_round | dbl_round
------+-----------+-----------
 -3.5 |        -4 |        -4
 -2.5 |        -3 |        -2
 -1.5 |        -2 |        -2
 -0.5 |        -1 |        -0
  0.5 |         1 |         0
  1.5 |         2 |         2
  2.5 |         3 |         2
  3.5 |         4 |         4
(8 rows)
</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-FLOAT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.1.3. Floating-Point Types
      <a class=""id_link"" href=""#DATATYPE-FLOAT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.9.8.2"" name=""id-1.5.7.9.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.8.3"" name=""id-1.5.7.9.8.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.8.4"" name=""id-1.5.7.9.8.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.8.5"" name=""id-1.5.7.9.8.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.8.6"" name=""id-1.5.7.9.8.6"">
  </a>
  <p>
   The data types
   <code class=""type"">
    real
   </code>
   and
   <code class=""type"">
    double precision
   </code>
   are inexact, variable-precision numeric types. On all currently supported platforms, these types are implementations of
   <acronym class=""acronym"">
    IEEE
   </acronym>
   Standard 754 for Binary Floating-Point Arithmetic (single and double precision, respectively), to the extent that the underlying processor, operating system, and compiler support it.
  </p>
  <p>
   Inexact means that some values cannot be converted exactly to the internal format and are stored as approximations, so that storing and retrieving a value might show slight discrepancies. Managing these errors and how they propagate through calculations is the subject of an entire branch of mathematics and computer science and will not be discussed here, except for the following points:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      If you require exact storage and calculations (such as for monetary amounts), use the
      <code class=""type"">
       numeric
      </code>
      type instead.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      If you want to do complicated calculations with these types for anything important, especially if you rely on certain behavior in boundary cases (infinity, underflow), you should evaluate the implementation carefully.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Comparing two floating-point values for equality might not always work as expected.
     </p>
    </li>
   </ul>
  </div>
  <p>
   On all currently supported platforms, the
   <code class=""type"">
    real
   </code>
   type has a range of around 1E-37 to 1E+37 with a precision of at least 6 decimal digits. The
   <code class=""type"">
    double precision
   </code>
   type has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits. Values that are too large or too small will cause an error. Rounding might take place if the precision of an input number is too high. Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.
  </p>
  <p>
   By default, floating point values are output in text form in their shortest precise decimal representation; the decimal value produced is closer to the true stored binary value than to any other value representable in the same binary precision. (However, the output value is currently never
   <span class=""emphasis"">
    <em>
     exactly
    </em>
   </span>
   midway between two representable values, in order to avoid a widespread bug where input routines do not properly respect the round-to-nearest-even rule.) This value will use at most 17 significant decimal digits for
   <code class=""type"">
    float8
   </code>
   values, and at most 9 digits for
   <code class=""type"">
    float4
   </code>
   values.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    This shortest-precise output format is much faster to generate than the historical rounded format.
   </p>
  </div>
  <p>
   For compatibility with output generated by older versions of
   <span class=""productname"">
    PostgreSQL
   </span>
   , and to allow the output precision to be reduced, the
   <a class=""xref"" href=""runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS"">
    extra_float_digits
   </a>
   parameter can be used to select rounded decimal output instead. Setting a value of 0 restores the previous default of rounding the value to 6 (for
   <code class=""type"">
    float4
   </code>
   ) or 15 (for
   <code class=""type"">
    float8
   </code>
   ) significant decimal digits. Setting a negative value reduces the number of digits further; for example -2 would round output to 4 or 13 digits respectively.
  </p>
  <p>
   Any value of
   <a class=""xref"" href=""runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS"">
    extra_float_digits
   </a>
   greater than 0 selects the shortest-precise format.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Applications that wanted precise values have historically had to set
    <a class=""xref"" href=""runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS"">
     extra_float_digits
    </a>
    to 3 to obtain them. For maximum compatibility between versions, they should continue to do so.
   </p>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.9.8.15"" name=""id-1.5.7.9.8.15"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.8.16"" name=""id-1.5.7.9.8.16"">
  </a>
  <p>
   In addition to ordinary numeric values, the floating-point types have several special values:
  </p>
  <div class=""literallayout"">
   <p>
    <br/>
    <code class=""literal"">
     Infinity
    </code>
    <br/>
    <code class=""literal"">
     -Infinity
    </code>
    <br/>
    <code class=""literal"">
     NaN
    </code>
    <br/>
   </p>
  </div>
  <p>
   These represent the IEEE 754 special values
   <span class=""quote"">
    “
    <span class=""quote"">
     infinity
    </span>
    ”
   </span>
   ,
   <span class=""quote"">
    “
    <span class=""quote"">
     negative infinity
    </span>
    ”
   </span>
   , and
   <span class=""quote"">
    “
    <span class=""quote"">
     not-a-number
    </span>
    ”
   </span>
   , respectively. When writing these values as constants in an SQL command, you must put quotes around them, for example
   <code class=""literal"">
    UPDATE table SET x = '-Infinity'
   </code>
   . On input, these strings are recognized in a case-insensitive manner. The infinity values can alternatively be spelled
   <code class=""literal"">
    inf
   </code>
   and
   <code class=""literal"">
    -inf
   </code>
   .
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    IEEE 754 specifies that
    <code class=""literal"">
     NaN
    </code>
    should not compare equal to any other floating-point value (including
    <code class=""literal"">
     NaN
    </code>
    ). In order to allow floating-point values to be sorted and used in tree-based indexes,
    <span class=""productname"">
     PostgreSQL
    </span>
    treats
    <code class=""literal"">
     NaN
    </code>
    values as equal, and greater than all non-
    <code class=""literal"">
     NaN
    </code>
    values.
   </p>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   also supports the SQL-standard notations
   <code class=""type"">
    float
   </code>
   and
   <code class=""type"">
    float(
    <em class=""replaceable"">
     <code>
      p
     </code>
    </em>
    )
   </code>
   for specifying inexact numeric types. Here,
   <em class=""replaceable"">
    <code>
     p
    </code>
   </em>
   specifies the minimum acceptable precision in
   <span class=""emphasis"">
    <em>
     binary
    </em>
   </span>
   digits.
   <span class=""productname"">
    PostgreSQL
   </span>
   accepts
   <code class=""type"">
    float(1)
   </code>
   to
   <code class=""type"">
    float(24)
   </code>
   as selecting the
   <code class=""type"">
    real
   </code>
   type, while
   <code class=""type"">
    float(25)
   </code>
   to
   <code class=""type"">
    float(53)
   </code>
   select
   <code class=""type"">
    double precision
   </code>
   . Values of
   <em class=""replaceable"">
    <code>
     p
    </code>
   </em>
   outside the allowed range draw an error.
   <code class=""type"">
    float
   </code>
   with no precision specified is taken to mean
   <code class=""type"">
    double precision
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-SERIAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.1.4. Serial Types
      <a class=""id_link"" href=""#DATATYPE-SERIAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.9.9.2"" name=""id-1.5.7.9.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.3"" name=""id-1.5.7.9.9.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.4"" name=""id-1.5.7.9.9.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.5"" name=""id-1.5.7.9.9.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.6"" name=""id-1.5.7.9.9.6"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.7"" name=""id-1.5.7.9.9.7"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.8"" name=""id-1.5.7.9.9.8"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.9.9.9"" name=""id-1.5.7.9.9.9"">
  </a>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    This section describes a PostgreSQL-specific way to create an autoincrementing column. Another way is to use the SQL-standard identity column feature, described at
    <a class=""xref"" href=""ddl-identity-columns.html"" title=""5.3. Identity Columns"">
     Section 5.3
    </a>
    .
   </p>
  </div>
  <p>
   The data types
   <code class=""type"">
    smallserial
   </code>
   ,
   <code class=""type"">
    serial
   </code>
   and
   <code class=""type"">
    bigserial
   </code>
   are not true types, but merely a notational convenience for creating unique identifier columns (similar to the
   <code class=""literal"">
    AUTO_INCREMENT
   </code>
   property supported by some other databases). In the current implementation, specifying:
  </p>
  <pre class=""programlisting"">
CREATE TABLE <em class=""replaceable""><code>tablename</code></em> (
    <em class=""replaceable""><code>colname</code></em> SERIAL
);
</pre>
  <p>
   is equivalent to specifying:
  </p>
  <pre class=""programlisting"">
CREATE SEQUENCE <em class=""replaceable""><code>tablename</code></em>_<em class=""replaceable""><code>colname</code></em>_seq AS integer;
CREATE TABLE <em class=""replaceable""><code>tablename</code></em> (
    <em class=""replaceable""><code>colname</code></em> integer NOT NULL DEFAULT nextval('<em class=""replaceable""><code>tablename</code></em>_<em class=""replaceable""><code>colname</code></em>_seq')
);
ALTER SEQUENCE <em class=""replaceable""><code>tablename</code></em>_<em class=""replaceable""><code>colname</code></em>_seq OWNED BY <em class=""replaceable""><code>tablename</code></em>.<em class=""replaceable""><code>colname</code></em>;
</pre>
  <p>
   Thus, we have created an integer column and arranged for its default values to be assigned from a sequence generator. A
   <code class=""literal"">
    NOT NULL
   </code>
   constraint is applied to ensure that a null value cannot be inserted. (In most cases you would also want to attach a
   <code class=""literal"">
    UNIQUE
   </code>
   or
   <code class=""literal"">
    PRIMARY KEY
   </code>
   constraint to prevent duplicate values from being inserted by accident, but this is not automatic.) Lastly, the sequence is marked as
   <span class=""quote"">
    “
    <span class=""quote"">
     owned by
    </span>
    ”
   </span>
   the column, so that it will be dropped if the column or table is dropped.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Because
    <code class=""type"">
     smallserial
    </code>
    ,
    <code class=""type"">
     serial
    </code>
    and
    <code class=""type"">
     bigserial
    </code>
    are implemented using sequences, there may be ""holes"" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still ""used up"" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See
    <code class=""literal"">
     nextval()
    </code>
    in
    <a class=""xref"" href=""functions-sequence.html"" title=""9.17. Sequence Manipulation Functions"">
     Section 9.17
    </a>
    for details.
   </p>
  </div>
  <p>
   To insert the next value of the sequence into the
   <code class=""type"">
    serial
   </code>
   column, specify that the
   <code class=""type"">
    serial
   </code>
   column should be assigned its default value. This can be done either by excluding the column from the list of columns in the
   <code class=""command"">
    INSERT
   </code>
   statement, or through the use of the
   <code class=""literal"">
    DEFAULT
   </code>
   key word.
  </p>
  <p>
   The type names
   <code class=""type"">
    serial
   </code>
   and
   <code class=""type"">
    serial4
   </code>
   are equivalent: both create
   <code class=""type"">
    integer
   </code>
   columns. The type names
   <code class=""type"">
    bigserial
   </code>
   and
   <code class=""type"">
    serial8
   </code>
   work the same way, except that they create a
   <code class=""type"">
    bigint
   </code>
   column.
   <code class=""type"">
    bigserial
   </code>
   should be used if you anticipate the use of more than 2
   <sup>
    31
   </sup>
   identifiers over the lifetime of the table. The type names
   <code class=""type"">
    smallserial
   </code>
   and
   <code class=""type"">
    serial2
   </code>
   also work the same way, except that they create a
   <code class=""type"">
    smallint
   </code>
   column.
  </p>
  <p>
   The sequence created for a
   <code class=""type"">
    serial
   </code>
   column is automatically dropped when the owning column is dropped. You can drop the sequence without dropping the column, but this will force removal of the column default expression.
  </p>
 </div>
</div>
"
8. Data Types,8.2. Monetary Types,https://www.postgresql.org/docs/17/datatype-money.html,"<div class=""sect1"" id=""DATATYPE-MONEY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.2. Monetary Types
     <a class=""id_link"" href=""#DATATYPE-MONEY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  The
  <code class=""type"">
   money
  </code>
  type stores a currency amount with a fixed fractional precision; see
  <a class=""xref"" href=""datatype-money.html#DATATYPE-MONEY-TABLE"" title=""Table 8.3. Monetary Types"">
   Table 8.3
  </a>
  . The fractional precision is determined by the database's
  <a class=""xref"" href=""runtime-config-client.html#GUC-LC-MONETARY"">
   lc_monetary
  </a>
  setting. The range shown in the table assumes there are two fractional digits. Input is accepted in a variety of formats, including integer and floating-point literals, as well as typical currency formatting, such as
  <code class=""literal"">
   '$1,000.00'
  </code>
  . Output is generally in the latter form but depends on the locale.
 </p>
 <div class=""table"" id=""DATATYPE-MONEY-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.3. Monetary Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Monetary Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
     <col class=""col4""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
      <th>
       Range
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        money
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       currency amount
      </td>
      <td>
       -92233720368547758.08 to +92233720368547758.07
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Since the output of this data type is locale-sensitive, it might not work to load
  <code class=""type"">
   money
  </code>
  data into a database that has a different setting of
  <code class=""varname"">
   lc_monetary
  </code>
  . To avoid problems, before restoring a dump into a new database make sure
  <code class=""varname"">
   lc_monetary
  </code>
  has the same or equivalent value as in the database that was dumped.
 </p>
 <p>
  Values of the
  <code class=""type"">
   numeric
  </code>
  ,
  <code class=""type"">
   int
  </code>
  , and
  <code class=""type"">
   bigint
  </code>
  data types can be cast to
  <code class=""type"">
   money
  </code>
  . Conversion from the
  <code class=""type"">
   real
  </code>
  and
  <code class=""type"">
   double precision
  </code>
  data types can be done by casting to
  <code class=""type"">
   numeric
  </code>
  first, for example:
 </p>
 <pre class=""programlisting"">
SELECT '12.34'::float8::numeric::money;
</pre>
 <p>
  However, this is not recommended. Floating point numbers should not be used to handle money due to the potential for rounding errors.
 </p>
 <p>
  A
  <code class=""type"">
   money
  </code>
  value can be cast to
  <code class=""type"">
   numeric
  </code>
  without loss of precision. Conversion to other types could potentially lose precision, and must also be done in two stages:
 </p>
 <pre class=""programlisting"">
SELECT '52093.89'::money::numeric::float8;
</pre>
 <p>
  Division of a
  <code class=""type"">
   money
  </code>
  value by an integer value is performed with truncation of the fractional part towards zero. To get a rounded result, divide by a floating-point value, or cast the
  <code class=""type"">
   money
  </code>
  value to
  <code class=""type"">
   numeric
  </code>
  before dividing and back to
  <code class=""type"">
   money
  </code>
  afterwards. (The latter is preferable to avoid risking precision loss.) When a
  <code class=""type"">
   money
  </code>
  value is divided by another
  <code class=""type"">
   money
  </code>
  value, the result is
  <code class=""type"">
   double precision
  </code>
  (i.e., a pure number, not money); the currency units cancel each other out in the division.
 </p>
</div>
"
8. Data Types,8.3. Character Types,https://www.postgresql.org/docs/17/datatype-character.html,"<div class=""sect1"" id=""DATATYPE-CHARACTER"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.3. Character Types
     <a class=""id_link"" href=""#DATATYPE-CHARACTER"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.11.2"" name=""id-1.5.7.11.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.3"" name=""id-1.5.7.11.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.4"" name=""id-1.5.7.11.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.5"" name=""id-1.5.7.11.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.6"" name=""id-1.5.7.11.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.7"" name=""id-1.5.7.11.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.8"" name=""id-1.5.7.11.8"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.11.9"" name=""id-1.5.7.11.9"">
 </a>
 <div class=""table"" id=""DATATYPE-CHARACTER-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.4. Character Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Character Types"">
    <colgroup>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        character varying(
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        )
       </code>
       ,
       <code class=""type"">
        varchar(
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        )
       </code>
      </td>
      <td>
       variable-length with limit
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        character(
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        )
       </code>
       ,
       <code class=""type"">
        char(
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        )
       </code>
       ,
       <code class=""type"">
        bpchar(
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        )
       </code>
      </td>
      <td>
       fixed-length, blank-padded
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        bpchar
       </code>
      </td>
      <td>
       variable unlimited length, blank-trimmed
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       variable unlimited length
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""datatype-character.html#DATATYPE-CHARACTER-TABLE"" title=""Table 8.4. Character Types"">
   Table 8.4
  </a>
  shows the general-purpose character types available in
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
 <p>
  <acronym class=""acronym"">
   SQL
  </acronym>
  defines two primary character types:
  <code class=""type"">
   character varying(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  and
  <code class=""type"">
   character(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  , where
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  is a positive integer. Both of these types can store strings up to
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard.) However, if one explicitly casts a value to
  <code class=""type"">
   character varying(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  or
  <code class=""type"">
   character(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  , then an over-length value will be truncated to
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  characters without raising an error. (This too is required by the
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard.) If the string to be stored is shorter than the declared length, values of type
  <code class=""type"">
   character
  </code>
  will be space-padded; values of type
  <code class=""type"">
   character varying
  </code>
  will simply store the shorter string.
 </p>
 <p>
  In addition,
  <span class=""productname"">
   PostgreSQL
  </span>
  provides the
  <code class=""type"">
   text
  </code>
  type, which stores strings of any length. Although the
  <code class=""type"">
   text
  </code>
  type is not in the
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard, several other SQL database management systems have it as well.
  <code class=""type"">
   text
  </code>
  is
  <span class=""productname"">
   PostgreSQL
  </span>
  's native string data type, in that most built-in functions operating on strings are declared to take or return
  <code class=""type"">
   text
  </code>
  not
  <code class=""type"">
   character varying
  </code>
  . For many purposes,
  <code class=""type"">
   character varying
  </code>
  acts as though it were a
  <a class=""link"" href=""domains.html"" title=""8.18. Domain Types"">
   domain
  </a>
  over
  <code class=""type"">
   text
  </code>
  .
 </p>
 <p>
  The type name
  <code class=""type"">
   varchar
  </code>
  is an alias for
  <code class=""type"">
   character varying
  </code>
  , while
  <code class=""type"">
   bpchar
  </code>
  (with length specifier) and
  <code class=""type"">
   char
  </code>
  are aliases for
  <code class=""type"">
   character
  </code>
  . The
  <code class=""type"">
   varchar
  </code>
  and
  <code class=""type"">
   char
  </code>
  aliases are defined in the
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard;
  <code class=""type"">
   bpchar
  </code>
  is a
  <span class=""productname"">
   PostgreSQL
  </span>
  extension.
 </p>
 <p>
  If specified, the length
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  must be greater than zero and cannot exceed 10,485,760. If
  <code class=""type"">
   character varying
  </code>
  (or
  <code class=""type"">
   varchar
  </code>
  ) is used without length specifier, the type accepts strings of any length. If
  <code class=""type"">
   bpchar
  </code>
  lacks a length specifier, it also accepts strings of any length, but trailing spaces are semantically insignificant. If
  <code class=""type"">
   character
  </code>
  (or
  <code class=""type"">
   char
  </code>
  ) lacks a specifier, it is equivalent to
  <code class=""type"">
   character(1)
  </code>
  .
 </p>
 <p>
  Values of type
  <code class=""type"">
   character
  </code>
  are physically padded with spaces to the specified width
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  , and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type
  <code class=""type"">
   character
  </code>
  . In collations where whitespace is significant, this behavior can produce unexpected results; for example
  <code class=""command"">
   SELECT 'a '::CHAR(2) collate ""C"" &lt; E'a\n'::CHAR(2)
  </code>
  returns true, even though
  <code class=""literal"">
   C
  </code>
  locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a
  <code class=""type"">
   character
  </code>
  value to one of the other string types. Note that trailing spaces
  <span class=""emphasis"">
   <em>
    are
   </em>
  </span>
  semantically significant in
  <code class=""type"">
   character varying
  </code>
  and
  <code class=""type"">
   text
  </code>
  values, and when using pattern matching, that is
  <code class=""literal"">
   LIKE
  </code>
  and regular expressions.
 </p>
 <p>
  The characters that can be stored in any of these data types are determined by the database character set, which is selected when the database is created. Regardless of the specific character set, the character with code zero (sometimes called NUL) cannot be stored. For more information refer to
  <a class=""xref"" href=""multibyte.html"" title=""23.3. Character Set Support"">
   Section 23.3
  </a>
  .
 </p>
 <p>
  The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of
  <code class=""type"">
   character
  </code>
  . Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use
  <code class=""type"">
   text
  </code>
  or
  <code class=""type"">
   character varying
  </code>
  without a length specifier, rather than making up an arbitrary length limit.)
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While
   <code class=""type"">
    character(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   has performance advantages in some other database systems, there is no such advantage in
   <span class=""productname"">
    PostgreSQL
   </span>
   ; in fact
   <code class=""type"">
    character(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   is usually the slowest of the three because of its additional storage costs. In most situations
   <code class=""type"">
    text
   </code>
   or
   <code class=""type"">
    character varying
   </code>
   should be used instead.
  </p>
 </div>
 <p>
  Refer to
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
   Section 4.1.2.1
  </a>
  for information about the syntax of string literals, and to
  <a class=""xref"" href=""functions.html"" title=""Chapter 9. Functions and Operators"">
   Chapter 9
  </a>
  for information about available operators and functions.
 </p>
 <div class=""example"" id=""id-1.5.7.11.21"">
  <p class=""title"">
   <strong>
    Example 8.1. Using the Character Types
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""programlisting"">
CREATE TABLE test1 (a character(4));
INSERT INTO test1 VALUES ('ok');
SELECT a, char_length(a) FROM test1; -- <span id=""co.datatype-char""></span>(1)
<code class=""computeroutput"">
  a   | char_length
------+-------------
 ok   |           2
</code>

CREATE TABLE test2 (b varchar(5));
INSERT INTO test2 VALUES ('ok');
INSERT INTO test2 VALUES ('good      ');
INSERT INTO test2 VALUES ('too long');
<code class=""computeroutput"">ERROR:  value too long for type character varying(5)</code>
INSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation
SELECT b, char_length(b) FROM test2;
<code class=""computeroutput"">
   b   | char_length
-------+-------------
 ok    |           2
 good  |           5
 too l |           5
</code>
</pre>
   <div class=""calloutlist"">
    <table border=""0"" summary=""Callout list"">
     <tr>
      <td align=""left"" valign=""top"" width=""5%"">
       <p>
        <a href=""#co.datatype-char"">
         (1)
        </a>
       </p>
      </td>
      <td align=""left"" valign=""top"">
       <p>
        The
        <code class=""function"">
         char_length
        </code>
        function is discussed in
        <a class=""xref"" href=""functions-string.html"" title=""9.4. String Functions and Operators"">
         Section 9.4
        </a>
        .
       </p>
      </td>
     </tr>
    </table>
   </div>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  There are two other fixed-length character types in
  <span class=""productname"">
   PostgreSQL
  </span>
  , shown in
  <a class=""xref"" href=""datatype-character.html#DATATYPE-CHARACTER-SPECIAL-TABLE"" title=""Table 8.5. Special Character Types"">
   Table 8.5
  </a>
  . These are not intended for general-purpose use, only for use in the internal system catalogs. The
  <code class=""type"">
   name
  </code>
  type is used to store identifiers. Its length is currently defined as 64 bytes (63 usable characters plus terminator) but should be referenced using the constant
  <code class=""symbol"">
   NAMEDATALEN
  </code>
  in
  <code class=""literal"">
   C
  </code>
  source code. The length is set at compile time (and is therefore adjustable for special uses); the default maximum length might change in a future release. The type
  <code class=""type"">
   ""char""
  </code>
  (note the quotes) is different from
  <code class=""type"">
   char(1)
  </code>
  in that it only uses one byte of storage, and therefore can store only a single ASCII character. It is used in the system catalogs as a simplistic enumeration type.
 </p>
 <div class=""table"" id=""DATATYPE-CHARACTER-SPECIAL-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.5. Special Character Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Special Character Types"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        ""char""
       </code>
      </td>
      <td>
       1 byte
      </td>
      <td>
       single-byte internal type
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        name
       </code>
      </td>
      <td>
       64 bytes
      </td>
      <td>
       internal type for object names
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
8. Data Types,8.4. Binary Data Types,https://www.postgresql.org/docs/17/datatype-binary.html,"<div class=""sect1"" id=""DATATYPE-BINARY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.4. Binary Data Types
     <a class=""id_link"" href=""#DATATYPE-BINARY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-binary.html#DATATYPE-BINARY-BYTEA-HEX-FORMAT"">
      8.4.1.
      <code class=""type"">
       bytea
      </code>
      Hex Format
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-binary.html#DATATYPE-BINARY-BYTEA-ESCAPE-FORMAT"">
      8.4.2.
      <code class=""type"">
       bytea
      </code>
      Escape Format
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.12.2"" name=""id-1.5.7.12.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.12.3"" name=""id-1.5.7.12.3"">
 </a>
 <p>
  The
  <code class=""type"">
   bytea
  </code>
  data type allows storage of binary strings; see
  <a class=""xref"" href=""datatype-binary.html#DATATYPE-BINARY-TABLE"" title=""Table 8.6. Binary Data Types"">
   Table 8.6
  </a>
  .
 </p>
 <div class=""table"" id=""DATATYPE-BINARY-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.6. Binary Data Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Binary Data Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        bytea
       </code>
      </td>
      <td>
       1 or 4 bytes plus the actual binary string
      </td>
      <td>
       variable-length binary string
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  A binary string is a sequence of octets (or bytes). Binary strings are distinguished from character strings in two ways. First, binary strings specifically allow storing octets of value zero and other
  <span class=""quote"">
   “
   <span class=""quote"">
    non-printable
   </span>
   ”
  </span>
  octets (usually, octets outside the decimal range 32 to 126). Character strings disallow zero octets, and also disallow any other octet values and sequences of octet values that are invalid according to the database's selected character set encoding. Second, operations on binary strings process the actual bytes, whereas the processing of character strings depends on locale settings. In short, binary strings are appropriate for storing data that the programmer thinks of as
  <span class=""quote"">
   “
   <span class=""quote"">
    raw bytes
   </span>
   ”
  </span>
  , whereas character strings are appropriate for storing text.
 </p>
 <p>
  The
  <code class=""type"">
   bytea
  </code>
  type supports two formats for input and output:
  <span class=""quote"">
   “
   <span class=""quote"">
    hex
   </span>
   ”
  </span>
  format and
  <span class=""productname"">
   PostgreSQL
  </span>
  's historical
  <span class=""quote"">
   “
   <span class=""quote"">
    escape
   </span>
   ”
  </span>
  format. Both of these are always accepted on input. The output format depends on the configuration parameter
  <a class=""xref"" href=""runtime-config-client.html#GUC-BYTEA-OUTPUT"">
   bytea_output
  </a>
  ; the default is hex. (Note that the hex format was introduced in
  <span class=""productname"">
   PostgreSQL
  </span>
  9.0; earlier versions and some tools don't understand it.)
 </p>
 <p>
  The
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard defines a different binary string type, called
  <code class=""type"">
   BLOB
  </code>
  or
  <code class=""type"">
   BINARY LARGE OBJECT
  </code>
  . The input format is different from
  <code class=""type"">
   bytea
  </code>
  , but the provided functions and operators are mostly the same.
 </p>
 <div class=""sect2"" id=""DATATYPE-BINARY-BYTEA-HEX-FORMAT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.4.1.
      <code class=""type"">
       bytea
      </code>
      Hex Format
      <a class=""id_link"" href=""#DATATYPE-BINARY-BYTEA-HEX-FORMAT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <span class=""quote"">
    “
    <span class=""quote"">
     hex
    </span>
    ”
   </span>
   format encodes binary data as 2 hexadecimal digits per byte, most significant nibble first. The entire string is preceded by the sequence
   <code class=""literal"">
    \x
   </code>
   (to distinguish it from the escape format). In some contexts, the initial backslash may need to be escaped by doubling it (see
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
    Section 4.1.2.1
   </a>
   ). For input, the hexadecimal digits can be either upper or lower case, and whitespace is permitted between digit pairs (but not within a digit pair nor in the starting
   <code class=""literal"">
    \x
   </code>
   sequence). The hex format is compatible with a wide range of external applications and protocols, and it tends to be faster to convert than the escape format, so its use is preferred.
  </p>
  <p>
   Example:
  </p>
  <pre class=""programlisting"">
SET bytea_output = 'hex';

SELECT '\xDEADBEEF'::bytea;
   bytea
------------
 \xdeadbeef
</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-BINARY-BYTEA-ESCAPE-FORMAT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.4.2.
      <code class=""type"">
       bytea
      </code>
      Escape Format
      <a class=""id_link"" href=""#DATATYPE-BINARY-BYTEA-ESCAPE-FORMAT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <span class=""quote"">
    “
    <span class=""quote"">
     escape
    </span>
    ”
   </span>
   format is the traditional
   <span class=""productname"">
    PostgreSQL
   </span>
   format for the
   <code class=""type"">
    bytea
   </code>
   type. It takes the approach of representing a binary string as a sequence of ASCII characters, while converting those bytes that cannot be represented as an ASCII character into special escape sequences. If, from the point of view of the application, representing bytes as characters makes sense, then this representation can be convenient. But in practice it is usually confusing because it fuzzes up the distinction between binary strings and character strings, and also the particular escape mechanism that was chosen is somewhat unwieldy. Therefore, this format should probably be avoided for most new applications.
  </p>
  <p>
   When entering
   <code class=""type"">
    bytea
   </code>
   values in escape format, octets of certain values
   <span class=""emphasis"">
    <em>
     must
    </em>
   </span>
   be escaped, while all octet values
   <span class=""emphasis"">
    <em>
     can
    </em>
   </span>
   be escaped. In general, to escape an octet, convert it into its three-digit octal value and precede it by a backslash. Backslash itself (octet decimal value 92) can alternatively be represented by double backslashes.
   <a class=""xref"" href=""datatype-binary.html#DATATYPE-BINARY-SQLESC"" title=""Table 8.7. bytea Literal Escaped Octets"">
    Table 8.7
   </a>
   shows the characters that must be escaped, and gives the alternative escape sequences where applicable.
  </p>
  <div class=""table"" id=""DATATYPE-BINARY-SQLESC"">
   <p class=""title"">
    <strong>
     Table 8.7.
     <code class=""type"">
      bytea
     </code>
     Literal Escaped Octets
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""bytea Literal Escaped Octets"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
      <col class=""col3""/>
      <col class=""col4""/>
      <col class=""col5""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Decimal Octet Value
       </th>
       <th>
        Description
       </th>
       <th>
        Escaped Input Representation
       </th>
       <th>
        Example
       </th>
       <th>
        Hex Representation
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        0
       </td>
       <td>
        zero octet
       </td>
       <td>
        <code class=""literal"">
         '\000'
        </code>
       </td>
       <td>
        <code class=""literal"">
         '\000'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \x00
        </code>
       </td>
      </tr>
      <tr>
       <td>
        39
       </td>
       <td>
        single quote
       </td>
       <td>
        <code class=""literal"">
         ''''
        </code>
        or
        <code class=""literal"">
         '\047'
        </code>
       </td>
       <td>
        <code class=""literal"">
         ''''::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \x27
        </code>
       </td>
      </tr>
      <tr>
       <td>
        92
       </td>
       <td>
        backslash
       </td>
       <td>
        <code class=""literal"">
         '\\'
        </code>
        or
        <code class=""literal"">
         '\134'
        </code>
       </td>
       <td>
        <code class=""literal"">
         '\\'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \x5c
        </code>
       </td>
      </tr>
      <tr>
       <td>
        0 to 31 and 127 to 255
       </td>
       <td>
        <span class=""quote"">
         “
         <span class=""quote"">
          non-printable
         </span>
         ”
        </span>
        octets
       </td>
       <td>
        <code class=""literal"">
         '\
         <em class=""replaceable"">
          <code>
           xxx'
          </code>
         </em>
        </code>
        (octal value)
       </td>
       <td>
        <code class=""literal"">
         '\001'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \x01
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   The requirement to escape
   <span class=""emphasis"">
    <em>
     non-printable
    </em>
   </span>
   octets varies depending on locale settings. In some instances you can get away with leaving them unescaped.
  </p>
  <p>
   The reason that single quotes must be doubled, as shown in
   <a class=""xref"" href=""datatype-binary.html#DATATYPE-BINARY-SQLESC"" title=""Table 8.7. bytea Literal Escaped Octets"">
    Table 8.7
   </a>
   , is that this is true for any string literal in an SQL command. The generic string-literal parser consumes the outermost single quotes and reduces any pair of single quotes to one data character. What the
   <code class=""type"">
    bytea
   </code>
   input function sees is just one single quote, which it treats as a plain data character. However, the
   <code class=""type"">
    bytea
   </code>
   input function treats backslashes as special, and the other behaviors shown in
   <a class=""xref"" href=""datatype-binary.html#DATATYPE-BINARY-SQLESC"" title=""Table 8.7. bytea Literal Escaped Octets"">
    Table 8.7
   </a>
   are implemented by that function.
  </p>
  <p>
   In some contexts, backslashes must be doubled compared to what is shown above, because the generic string-literal parser will also reduce pairs of backslashes to one data character; see
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
    Section 4.1.2.1
   </a>
   .
  </p>
  <p>
   <code class=""type"">
    Bytea
   </code>
   octets are output in
   <code class=""literal"">
    hex
   </code>
   format by default. If you change
   <a class=""xref"" href=""runtime-config-client.html#GUC-BYTEA-OUTPUT"">
    bytea_output
   </a>
   to
   <code class=""literal"">
    escape
   </code>
   ,
   <span class=""quote"">
    “
    <span class=""quote"">
     non-printable
    </span>
    ”
   </span>
   octets are converted to their equivalent three-digit octal value and preceded by one backslash. Most
   <span class=""quote"">
    “
    <span class=""quote"">
     printable
    </span>
    ”
   </span>
   octets are output by their standard representation in the client character set, e.g.:
  </p>
  <pre class=""programlisting"">
SET bytea_output = 'escape';

SELECT 'abc \153\154\155 \052\251\124'::bytea;
     bytea
----------------
 abc klm *\251T
</pre>
  <p>
   The octet with decimal value 92 (backslash) is doubled in the output. Details are in
   <a class=""xref"" href=""datatype-binary.html#DATATYPE-BINARY-RESESC"" title=""Table 8.8. bytea Output Escaped Octets"">
    Table 8.8
   </a>
   .
  </p>
  <div class=""table"" id=""DATATYPE-BINARY-RESESC"">
   <p class=""title"">
    <strong>
     Table 8.8.
     <code class=""type"">
      bytea
     </code>
     Output Escaped Octets
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""bytea Output Escaped Octets"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
      <col class=""col3""/>
      <col class=""col4""/>
      <col class=""col5""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Decimal Octet Value
       </th>
       <th>
        Description
       </th>
       <th>
        Escaped Output Representation
       </th>
       <th>
        Example
       </th>
       <th>
        Output Result
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        92
       </td>
       <td>
        backslash
       </td>
       <td>
        <code class=""literal"">
         \\
        </code>
       </td>
       <td>
        <code class=""literal"">
         '\134'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \\
        </code>
       </td>
      </tr>
      <tr>
       <td>
        0 to 31 and 127 to 255
       </td>
       <td>
        <span class=""quote"">
         “
         <span class=""quote"">
          non-printable
         </span>
         ”
        </span>
        octets
       </td>
       <td>
        <code class=""literal"">
         \
         <em class=""replaceable"">
          <code>
           xxx
          </code>
         </em>
        </code>
        (octal value)
       </td>
       <td>
        <code class=""literal"">
         '\001'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         \001
        </code>
       </td>
      </tr>
      <tr>
       <td>
        32 to 126
       </td>
       <td>
        <span class=""quote"">
         “
         <span class=""quote"">
          printable
         </span>
         ”
        </span>
        octets
       </td>
       <td>
        client character set representation
       </td>
       <td>
        <code class=""literal"">
         '\176'::bytea
        </code>
       </td>
       <td>
        <code class=""literal"">
         ~
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   Depending on the front end to
   <span class=""productname"">
    PostgreSQL
   </span>
   you use, you might have additional work to do in terms of escaping and unescaping
   <code class=""type"">
    bytea
   </code>
   strings. For example, you might also have to escape line feeds and carriage returns if your interface automatically translates these.
  </p>
 </div>
</div>
"
8. Data Types,8.5. Date/Time Types,https://www.postgresql.org/docs/17/datatype-datetime.html,"<div class=""sect1"" id=""DATATYPE-DATETIME"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.5. Date/Time Types
     <a class=""id_link"" href=""#DATATYPE-DATETIME"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-datetime.html#DATATYPE-DATETIME-INPUT"">
      8.5.1. Date/Time Input
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-datetime.html#DATATYPE-DATETIME-OUTPUT"">
      8.5.2. Date/Time Output
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-datetime.html#DATATYPE-TIMEZONES"">
      8.5.3. Time Zones
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-datetime.html#DATATYPE-INTERVAL-INPUT"">
      8.5.4. Interval Input
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-datetime.html#DATATYPE-INTERVAL-OUTPUT"">
      8.5.5. Interval Output
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.13.2"" name=""id-1.5.7.13.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.3"" name=""id-1.5.7.13.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.4"" name=""id-1.5.7.13.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.5"" name=""id-1.5.7.13.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.6"" name=""id-1.5.7.13.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.7"" name=""id-1.5.7.13.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.8"" name=""id-1.5.7.13.8"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.9"" name=""id-1.5.7.13.9"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.10"" name=""id-1.5.7.13.10"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.13.11"" name=""id-1.5.7.13.11"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  supports the full set of
  <acronym class=""acronym"">
   SQL
  </acronym>
  date and time types, shown in
  <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-TABLE"" title=""Table 8.9. Date/Time Types"">
   Table 8.9
  </a>
  . The operations available on these data types are described in
  <a class=""xref"" href=""functions-datetime.html"" title=""9.9. Date/Time Functions and Operators"">
   Section 9.9
  </a>
  . Dates are counted according to the Gregorian calendar, even in years before that calendar was introduced (see
  <a class=""xref"" href=""datetime-units-history.html"" title=""B.6. History of Units"">
   Section B.6
  </a>
  for more information).
 </p>
 <div class=""table"" id=""DATATYPE-DATETIME-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.9. Date/Time Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Date/Time Types"">
    <colgroup>
     <col/>
     <col/>
     <col/>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
      <th>
       Low Value
      </th>
      <th>
       High Value
      </th>
      <th>
       Resolution
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        timestamp [ (
        <em class=""replaceable"">
         <code>
          p
         </code>
        </em>
        ) ] [ without time zone ]
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       both date and time (no time zone)
      </td>
      <td>
       4713 BC
      </td>
      <td>
       294276 AD
      </td>
      <td>
       1 microsecond
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        timestamp [ (
        <em class=""replaceable"">
         <code>
          p
         </code>
        </em>
        ) ] with time zone
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       both date and time, with time zone
      </td>
      <td>
       4713 BC
      </td>
      <td>
       294276 AD
      </td>
      <td>
       1 microsecond
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        date
       </code>
      </td>
      <td>
       4 bytes
      </td>
      <td>
       date (no time of day)
      </td>
      <td>
       4713 BC
      </td>
      <td>
       5874897 AD
      </td>
      <td>
       1 day
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        time [ (
        <em class=""replaceable"">
         <code>
          p
         </code>
        </em>
        ) ] [ without time zone ]
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       time of day (no date)
      </td>
      <td>
       00:00:00
      </td>
      <td>
       24:00:00
      </td>
      <td>
       1 microsecond
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        time [ (
        <em class=""replaceable"">
         <code>
          p
         </code>
        </em>
        ) ] with time zone
       </code>
      </td>
      <td>
       12 bytes
      </td>
      <td>
       time of day (no date), with time zone
      </td>
      <td>
       00:00:00+1559
      </td>
      <td>
       24:00:00-1559
      </td>
      <td>
       1 microsecond
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        interval [
        <em class=""replaceable"">
         <code>
          fields
         </code>
        </em>
        ] [ (
        <em class=""replaceable"">
         <code>
          p
         </code>
        </em>
        ) ]
       </code>
      </td>
      <td>
       16 bytes
      </td>
      <td>
       time interval
      </td>
      <td>
       -178000000 years
      </td>
      <td>
       178000000 years
      </td>
      <td>
       1 microsecond
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   The SQL standard requires that writing just
   <code class=""type"">
    timestamp
   </code>
   be equivalent to
   <code class=""type"">
    timestamp without time zone
   </code>
   , and
   <span class=""productname"">
    PostgreSQL
   </span>
   honors that behavior.
   <code class=""type"">
    timestamptz
   </code>
   is accepted as an abbreviation for
   <code class=""type"">
    timestamp with time zone
   </code>
   ; this is a
   <span class=""productname"">
    PostgreSQL
   </span>
   extension.
  </p>
 </div>
 <p>
  <code class=""type"">
   time
  </code>
  ,
  <code class=""type"">
   timestamp
  </code>
  , and
  <code class=""type"">
   interval
  </code>
  accept an optional precision value
  <em class=""replaceable"">
   <code>
    p
   </code>
  </em>
  which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of
  <em class=""replaceable"">
   <code>
    p
   </code>
  </em>
  is from 0 to 6.
 </p>
 <p>
  The
  <code class=""type"">
   interval
  </code>
  type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:
 </p>
 <pre class=""literallayout"">
YEAR
MONTH
DAY
HOUR
MINUTE
SECOND
YEAR TO MONTH
DAY TO HOUR
DAY TO MINUTE
DAY TO SECOND
HOUR TO MINUTE
HOUR TO SECOND
MINUTE TO SECOND
</pre>
 <p>
  Note that if both
  <em class=""replaceable"">
   <code>
    fields
   </code>
  </em>
  and
  <em class=""replaceable"">
   <code>
    p
   </code>
  </em>
  are specified, the
  <em class=""replaceable"">
   <code>
    fields
   </code>
  </em>
  must include
  <code class=""literal"">
   SECOND
  </code>
  , since the precision applies only to the seconds.
 </p>
 <p>
  The type
  <code class=""type"">
   time with time zone
  </code>
  is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of
  <code class=""type"">
   date
  </code>
  ,
  <code class=""type"">
   time
  </code>
  ,
  <code class=""type"">
   timestamp without time zone
  </code>
  , and
  <code class=""type"">
   timestamp with time zone
  </code>
  should provide a complete range of date/time functionality required by any application.
 </p>
 <div class=""sect2"" id=""DATATYPE-DATETIME-INPUT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.5.1. Date/Time Input
      <a class=""id_link"" href=""#DATATYPE-DATETIME-INPUT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Date and time input is accepted in almost any reasonable format, including ISO 8601,
   <acronym class=""acronym"">
    SQL
   </acronym>
   -compatible, traditional
   <span class=""productname"">
    POSTGRES
   </span>
   , and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the
   <a class=""xref"" href=""runtime-config-client.html#GUC-DATESTYLE"">
    DateStyle
   </a>
   parameter to
   <code class=""literal"">
    MDY
   </code>
   to select month-day-year interpretation,
   <code class=""literal"">
    DMY
   </code>
   to select day-month-year interpretation, or
   <code class=""literal"">
    YMD
   </code>
   to select year-month-day interpretation.
  </p>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   is more flexible in handling date/time input than the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard requires. See
   <a class=""xref"" href=""datetime-appendix.html"" title=""Appendix B. Date/Time Support"">
    Appendix B
   </a>
   for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.
  </p>
  <p>
   Remember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-GENERIC"" title=""4.1.2.7. Constants of Other Types"">
    Section 4.1.2.7
   </a>
   for more information.
   <acronym class=""acronym"">
    SQL
   </acronym>
   requires the following syntax
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>type</code></em> [ (<em class=""replaceable""><code>p</code></em>) ] '<em class=""replaceable""><code>value</code></em>'
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     p
    </code>
   </em>
   is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for
   <code class=""type"">
    time
   </code>
   ,
   <code class=""type"">
    timestamp
   </code>
   , and
   <code class=""type"">
    interval
   </code>
   types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).
  </p>
  <div class=""sect3"" id=""DATATYPE-DATETIME-INPUT-DATES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       8.5.1.1. Dates
       <a class=""id_link"" href=""#DATATYPE-DATETIME-INPUT-DATES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.7.13.18.5.2"" name=""id-1.5.7.13.18.5.2"">
   </a>
   <p>
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-DATE-TABLE"" title=""Table 8.10. Date Input"">
     Table 8.10
    </a>
    shows some possible inputs for the
    <code class=""type"">
     date
    </code>
    type.
   </p>
   <div class=""table"" id=""DATATYPE-DATETIME-DATE-TABLE"">
    <p class=""title"">
     <strong>
      Table 8.10. Date Input
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Date Input"">
      <colgroup>
       <col class=""col1""/>
       <col class=""col2""/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Example
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         1999-01-08
        </td>
        <td>
         ISO 8601; January 8 in any mode (recommended format)
        </td>
       </tr>
       <tr>
        <td>
         January 8, 1999
        </td>
        <td>
         unambiguous in any
         <code class=""varname"">
          datestyle
         </code>
         input mode
        </td>
       </tr>
       <tr>
        <td>
         1/8/1999
        </td>
        <td>
         January 8 in
         <code class=""literal"">
          MDY
         </code>
         mode; August 1 in
         <code class=""literal"">
          DMY
         </code>
         mode
        </td>
       </tr>
       <tr>
        <td>
         1/18/1999
        </td>
        <td>
         January 18 in
         <code class=""literal"">
          MDY
         </code>
         mode; rejected in other modes
        </td>
       </tr>
       <tr>
        <td>
         01/02/03
        </td>
        <td>
         January 2, 2003 in
         <code class=""literal"">
          MDY
         </code>
         mode; February 1, 2003 in
         <code class=""literal"">
          DMY
         </code>
         mode; February 3, 2001 in
         <code class=""literal"">
          YMD
         </code>
         mode
        </td>
       </tr>
       <tr>
        <td>
         1999-Jan-08
        </td>
        <td>
         January 8 in any mode
        </td>
       </tr>
       <tr>
        <td>
         Jan-08-1999
        </td>
        <td>
         January 8 in any mode
        </td>
       </tr>
       <tr>
        <td>
         08-Jan-1999
        </td>
        <td>
         January 8 in any mode
        </td>
       </tr>
       <tr>
        <td>
         99-Jan-08
        </td>
        <td>
         January 8 in
         <code class=""literal"">
          YMD
         </code>
         mode, else error
        </td>
       </tr>
       <tr>
        <td>
         08-Jan-99
        </td>
        <td>
         January 8, except error in
         <code class=""literal"">
          YMD
         </code>
         mode
        </td>
       </tr>
       <tr>
        <td>
         Jan-08-99
        </td>
        <td>
         January 8, except error in
         <code class=""literal"">
          YMD
         </code>
         mode
        </td>
       </tr>
       <tr>
        <td>
         19990108
        </td>
        <td>
         ISO 8601; January 8, 1999 in any mode
        </td>
       </tr>
       <tr>
        <td>
         990108
        </td>
        <td>
         ISO 8601; January 8, 1999 in any mode
        </td>
       </tr>
       <tr>
        <td>
         1999.008
        </td>
        <td>
         year and day of year
        </td>
       </tr>
       <tr>
        <td>
         J2451187
        </td>
        <td>
         Julian date
        </td>
       </tr>
       <tr>
        <td>
         January 8, 99 BC
        </td>
        <td>
         year 99 BC
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
  </div>
  <div class=""sect3"" id=""DATATYPE-DATETIME-INPUT-TIMES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       8.5.1.2. Times
       <a class=""id_link"" href=""#DATATYPE-DATETIME-INPUT-TIMES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.7.13.18.6.2"" name=""id-1.5.7.13.18.6.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.13.18.6.3"" name=""id-1.5.7.13.18.6.3"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.13.18.6.4"" name=""id-1.5.7.13.18.6.4"">
   </a>
   <p>
    The time-of-day types are
    <code class=""type"">
     time [ (
     <em class=""replaceable"">
      <code>
       p
      </code>
     </em>
     ) ] without time zone
    </code>
    and
    <code class=""type"">
     time [ (
     <em class=""replaceable"">
      <code>
       p
      </code>
     </em>
     ) ] with time zone
    </code>
    .
    <code class=""type"">
     time
    </code>
    alone is equivalent to
    <code class=""type"">
     time without time zone
    </code>
    .
   </p>
   <p>
    Valid input for these types consists of a time of day followed by an optional time zone. (See
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-TIME-TABLE"" title=""Table 8.11. Time Input"">
     Table 8.11
    </a>
    and
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-TIMEZONE-TABLE"" title=""Table 8.12. Time Zone Input"">
     Table 8.12
    </a>
    .) If a time zone is specified in the input for
    <code class=""type"">
     time without time zone
    </code>
    , it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as
    <code class=""literal"">
     America/New_York
    </code>
    . In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the
    <code class=""type"">
     time with time zone
    </code>
    value and is output as stored; it is not adjusted to the active time zone.
   </p>
   <div class=""table"" id=""DATATYPE-DATETIME-TIME-TABLE"">
    <p class=""title"">
     <strong>
      Table 8.11. Time Input
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Time Input"">
      <colgroup>
       <col class=""col1""/>
       <col class=""col2""/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Example
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          04:05:06.789
         </code>
        </td>
        <td>
         ISO 8601
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05:06
         </code>
        </td>
        <td>
         ISO 8601
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05
         </code>
        </td>
        <td>
         ISO 8601
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          040506
         </code>
        </td>
        <td>
         ISO 8601
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05 AM
         </code>
        </td>
        <td>
         same as 04:05; AM does not affect value
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05 PM
         </code>
        </td>
        <td>
         same as 16:05; input hour must be &lt;= 12
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05:06.789-8
         </code>
        </td>
        <td>
         ISO 8601, with time zone as UTC offset
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05:06-08:00
         </code>
        </td>
        <td>
         ISO 8601, with time zone as UTC offset
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05-08:00
         </code>
        </td>
        <td>
         ISO 8601, with time zone as UTC offset
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          040506-08
         </code>
        </td>
        <td>
         ISO 8601, with time zone as UTC offset
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          040506+0730
         </code>
        </td>
        <td>
         ISO 8601, with fractional-hour time zone as UTC offset
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          040506+07:30:00
         </code>
        </td>
        <td>
         UTC offset specified to seconds (not allowed in ISO 8601)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          04:05:06 PST
         </code>
        </td>
        <td>
         time zone specified by abbreviation
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          2003-04-12 04:05:06 America/New_York
         </code>
        </td>
        <td>
         time zone specified by full name
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <div class=""table"" id=""DATATYPE-TIMEZONE-TABLE"">
    <p class=""title"">
     <strong>
      Table 8.12. Time Zone Input
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Time Zone Input"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Example
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          PST
         </code>
        </td>
        <td>
         Abbreviation (for Pacific Standard Time)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          America/New_York
         </code>
        </td>
        <td>
         Full time zone name
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          PST8PDT
         </code>
        </td>
        <td>
         POSIX-style time zone specification
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          -8:00:00
         </code>
        </td>
        <td>
         UTC offset for PST
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          -8:00
         </code>
        </td>
        <td>
         UTC offset for PST (ISO 8601 extended format)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          -800
         </code>
        </td>
        <td>
         UTC offset for PST (ISO 8601 basic format)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          -8
         </code>
        </td>
        <td>
         UTC offset for PST (ISO 8601 basic format)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          zulu
         </code>
        </td>
        <td>
         Military abbreviation for UTC
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          z
         </code>
        </td>
        <td>
         Short form of
         <code class=""literal"">
          zulu
         </code>
         (also in ISO 8601)
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Refer to
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-TIMEZONES"" title=""8.5.3. Time Zones"">
     Section 8.5.3
    </a>
    for more information on how to specify time zones.
   </p>
  </div>
  <div class=""sect3"" id=""DATATYPE-DATETIME-INPUT-TIME-STAMPS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       8.5.1.3. Time Stamps
       <a class=""id_link"" href=""#DATATYPE-DATETIME-INPUT-TIME-STAMPS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.7.13.18.7.2"" name=""id-1.5.7.13.18.7.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.13.18.7.3"" name=""id-1.5.7.13.18.7.3"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.13.18.7.4"" name=""id-1.5.7.13.18.7.4"">
   </a>
   <p>
    Valid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional
    <code class=""literal"">
     AD
    </code>
    or
    <code class=""literal"">
     BC
    </code>
    . (Alternatively,
    <code class=""literal"">
     AD
    </code>
    /
    <code class=""literal"">
     BC
    </code>
    can appear before the time zone, but this is not the preferred ordering.) Thus:
   </p>
   <pre class=""programlisting"">
1999-01-08 04:05:06
</pre>
   <p>
    and:
   </p>
   <pre class=""programlisting"">
1999-01-08 04:05:06 -8:00
</pre>
   <p>
    are valid values, which follow the
    <acronym class=""acronym"">
     ISO
    </acronym>
    8601 standard. In addition, the common format:
   </p>
   <pre class=""programlisting"">
January 8 04:05:06 1999 PST
</pre>
   <p>
    is supported.
   </p>
   <p>
    The
    <acronym class=""acronym"">
     SQL
    </acronym>
    standard differentiates
    <code class=""type"">
     timestamp without time zone
    </code>
    and
    <code class=""type"">
     timestamp with time zone
    </code>
    literals by the presence of a
    <span class=""quote"">
     “
     <span class=""quote"">
      +
     </span>
     ”
    </span>
    or
    <span class=""quote"">
     “
     <span class=""quote"">
      -
     </span>
     ”
    </span>
    symbol and time zone offset after the time. Hence, according to the standard,
   </p>
   <pre class=""programlisting"">
TIMESTAMP '2004-10-19 10:23:54'
</pre>
   <p>
    is a
    <code class=""type"">
     timestamp without time zone
    </code>
    , while
   </p>
   <pre class=""programlisting"">
TIMESTAMP '2004-10-19 10:23:54+02'
</pre>
   <p>
    is a
    <code class=""type"">
     timestamp with time zone
    </code>
    .
    <span class=""productname"">
     PostgreSQL
    </span>
    never examines the content of a literal string before determining its type, and therefore will treat both of the above as
    <code class=""type"">
     timestamp without time zone
    </code>
    . To ensure that a literal is treated as
    <code class=""type"">
     timestamp with time zone
    </code>
    , give it the correct explicit type:
   </p>
   <pre class=""programlisting"">
TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'
</pre>
   <p>
    In a value that has been determined to be
    <code class=""type"">
     timestamp without time zone
    </code>
    ,
    <span class=""productname"">
     PostgreSQL
    </span>
    will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input string, and is not adjusted for time zone.
   </p>
   <p>
    For
    <code class=""type"">
     timestamp with time zone
    </code>
    values, an input string that includes an explicit time zone will be converted to UTC (
    <a class=""glossterm"" href=""glossary.html#GLOSSARY-UTC"">
    </a>
    <a class=""glossterm"" href=""glossary.html#GLOSSARY-UTC"" title=""UTC"">
     Universal Coordinated Time
    </a>
    ) using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's
    <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
     TimeZone
    </a>
    parameter, and is converted to UTC using the offset for the
    <code class=""varname"">
     timezone
    </code>
    zone. In either case, the value is stored internally as UTC, and the originally stated or assumed time zone is not retained.
   </p>
   <p>
    When a
    <code class=""type"">
     timestamp with time zone
    </code>
    value is output, it is always converted from UTC to the current
    <code class=""varname"">
     timezone
    </code>
    zone, and displayed as local time in that zone. To see the time in another time zone, either change
    <code class=""varname"">
     timezone
    </code>
    or use the
    <code class=""literal"">
     AT TIME ZONE
    </code>
    construct (see
    <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT"" title=""9.9.4. AT TIME ZONE and AT LOCAL"">
     Section 9.9.4
    </a>
    ).
   </p>
   <p>
    Conversions between
    <code class=""type"">
     timestamp without time zone
    </code>
    and
    <code class=""type"">
     timestamp with time zone
    </code>
    normally assume that the
    <code class=""type"">
     timestamp without time zone
    </code>
    value should be taken or given as
    <code class=""varname"">
     timezone
    </code>
    local time. A different time zone can be specified for the conversion using
    <code class=""literal"">
     AT TIME ZONE
    </code>
    .
   </p>
  </div>
  <div class=""sect3"" id=""DATATYPE-DATETIME-SPECIAL-VALUES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       8.5.1.4. Special Values
       <a class=""id_link"" href=""#DATATYPE-DATETIME-SPECIAL-VALUES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.7.13.18.8.2"" name=""id-1.5.7.13.18.8.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.13.18.8.3"" name=""id-1.5.7.13.18.8.3"">
   </a>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    supports several special date/time input values for convenience, as shown in
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-SPECIAL-TABLE"" title=""Table 8.13. Special Date/Time Inputs"">
     Table 8.13
    </a>
    . The values
    <code class=""literal"">
     infinity
    </code>
    and
    <code class=""literal"">
     -infinity
    </code>
    are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular,
    <code class=""literal"">
     now
    </code>
    and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.
   </p>
   <div class=""table"" id=""DATATYPE-DATETIME-SPECIAL-TABLE"">
    <p class=""title"">
     <strong>
      Table 8.13. Special Date/Time Inputs
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Special Date/Time Inputs"">
      <colgroup>
       <col/>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Input String
        </th>
        <th>
         Valid Types
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          epoch
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
        </td>
        <td>
         1970-01-01 00:00:00+00 (Unix system time zero)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          infinity
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
         ,
         <code class=""type"">
          interval
         </code>
        </td>
        <td>
         later than all other time stamps
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          -infinity
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
         ,
         <code class=""type"">
          interval
         </code>
        </td>
        <td>
         earlier than all other time stamps
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          now
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          time
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
        </td>
        <td>
         current transaction's start time
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          today
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
        </td>
        <td>
         midnight (
         <code class=""literal"">
          00:00
         </code>
         ) today
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          tomorrow
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
        </td>
        <td>
         midnight (
         <code class=""literal"">
          00:00
         </code>
         ) tomorrow
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          yesterday
         </code>
        </td>
        <td>
         <code class=""type"">
          date
         </code>
         ,
         <code class=""type"">
          timestamp
         </code>
        </td>
        <td>
         midnight (
         <code class=""literal"">
          00:00
         </code>
         ) yesterday
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          allballs
         </code>
        </td>
        <td>
         <code class=""type"">
          time
         </code>
        </td>
        <td>
         00:00:00.00 UTC
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    The following
    <acronym class=""acronym"">
     SQL
    </acronym>
    -compatible functions can also be used to obtain the current time value for the corresponding data type:
    <code class=""literal"">
     CURRENT_DATE
    </code>
    ,
    <code class=""literal"">
     CURRENT_TIME
    </code>
    ,
    <code class=""literal"">
     CURRENT_TIMESTAMP
    </code>
    ,
    <code class=""literal"">
     LOCALTIME
    </code>
    ,
    <code class=""literal"">
     LOCALTIMESTAMP
    </code>
    . (See
    <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
     Section 9.9.5
    </a>
    .) Note that these are SQL functions and are
    <span class=""emphasis"">
     <em>
      not
     </em>
    </span>
    recognized in data input strings.
   </p>
   <div class=""caution"">
    <h3 class=""title"">
     Caution
    </h3>
    <p>
     While the input strings
     <code class=""literal"">
      now
     </code>
     ,
     <code class=""literal"">
      today
     </code>
     ,
     <code class=""literal"">
      tomorrow
     </code>
     , and
     <code class=""literal"">
      yesterday
     </code>
     are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example,
     <code class=""literal"">
      CURRENT_DATE + 1
     </code>
     is safer than
     <code class=""literal"">
      'tomorrow'::date
     </code>
     .
    </p>
   </div>
  </div>
 </div>
 <div class=""sect2"" id=""DATATYPE-DATETIME-OUTPUT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.5.2. Date/Time Output
      <a class=""id_link"" href=""#DATATYPE-DATETIME-OUTPUT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.13.19.2"" name=""id-1.5.7.13.19.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.13.19.3"" name=""id-1.5.7.13.19.3"">
  </a>
  <p>
   The output format of the date/time types can be set to one of the four styles ISO 8601,
   <acronym class=""acronym"">
    SQL
   </acronym>
   (Ingres), traditional
   <span class=""productname"">
    POSTGRES
   </span>
   (Unix
   <span class=""application"">
    date
   </span>
   format), or German. The default is the
   <acronym class=""acronym"">
    ISO
   </acronym>
   format. (The
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard requires the use of the ISO 8601 format. The name of the
   <span class=""quote"">
    “
    <span class=""quote"">
     SQL
    </span>
    ”
   </span>
   output format is a historical accident.)
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-OUTPUT-TABLE"" title=""Table 8.14. Date/Time Output Styles"">
    Table 8.14
   </a>
   shows examples of each output style. The output of the
   <code class=""type"">
    date
   </code>
   and
   <code class=""type"">
    time
   </code>
   types is generally only the date or time part in accordance with the given examples. However, the
   <span class=""productname"">
    POSTGRES
   </span>
   style outputs date-only values in
   <acronym class=""acronym"">
    ISO
   </acronym>
   format.
  </p>
  <div class=""table"" id=""DATATYPE-DATETIME-OUTPUT-TABLE"">
   <p class=""title"">
    <strong>
     Table 8.14. Date/Time Output Styles
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Date/Time Output Styles"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
      <col class=""col3""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Style Specification
       </th>
       <th>
        Description
       </th>
       <th>
        Example
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         ISO
        </code>
       </td>
       <td>
        ISO 8601, SQL standard
       </td>
       <td>
        <code class=""literal"">
         1997-12-17 07:37:16-08
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         SQL
        </code>
       </td>
       <td>
        traditional style
       </td>
       <td>
        <code class=""literal"">
         12/17/1997 07:37:16.00 PST
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         Postgres
        </code>
       </td>
       <td>
        original style
       </td>
       <td>
        <code class=""literal"">
         Wed Dec 17 07:37:16 1997 PST
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         German
        </code>
       </td>
       <td>
        regional style
       </td>
       <td>
        <code class=""literal"">
         17.12.1997 07:37:16.00 PST
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    ISO 8601 specifies the use of uppercase letter
    <code class=""literal"">
     T
    </code>
    to separate the date and time.
    <span class=""productname"">
     PostgreSQL
    </span>
    accepts that format on input, but on output it uses a space rather than
    <code class=""literal"">
     T
    </code>
    , as shown above. This is for readability and for consistency with
    <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc3339"" target=""_top"">
     RFC 3339
    </a>
    as well as some other database systems.
   </p>
  </div>
  <p>
   In the
   <acronym class=""acronym"">
    SQL
   </acronym>
   and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-INPUT"" title=""8.5.1. Date/Time Input"">
    Section 8.5.1
   </a>
   for how this setting also affects interpretation of input values.)
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-OUTPUT2-TABLE"" title=""Table 8.15. Date Order Conventions"">
    Table 8.15
   </a>
   shows examples.
  </p>
  <div class=""table"" id=""DATATYPE-DATETIME-OUTPUT2-TABLE"">
   <p class=""title"">
    <strong>
     Table 8.15. Date Order Conventions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Date Order Conventions"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
      <col class=""col3""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        <code class=""varname"">
         datestyle
        </code>
        Setting
       </th>
       <th>
        Input Ordering
       </th>
       <th>
        Example Output
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         SQL, DMY
        </code>
       </td>
       <td>
        <em class=""replaceable"">
         <code>
          day
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          month
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          year
         </code>
        </em>
       </td>
       <td>
        <code class=""literal"">
         17/12/1997 15:37:16.00 CET
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         SQL, MDY
        </code>
       </td>
       <td>
        <em class=""replaceable"">
         <code>
          month
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          day
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          year
         </code>
        </em>
       </td>
       <td>
        <code class=""literal"">
         12/17/1997 07:37:16.00 PST
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         Postgres, DMY
        </code>
       </td>
       <td>
        <em class=""replaceable"">
         <code>
          day
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          month
         </code>
        </em>
        /
        <em class=""replaceable"">
         <code>
          year
         </code>
        </em>
       </td>
       <td>
        <code class=""literal"">
         Wed 17 Dec 07:37:16 1997 PST
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   In the
   <acronym class=""acronym"">
    ISO
   </acronym>
   style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as
   <em class=""replaceable"">
    <code>
     hh
    </code>
   </em>
   (hours only) if it is an integral number of hours, else as
   <em class=""replaceable"">
    <code>
     hh
    </code>
   </em>
   :
   <em class=""replaceable"">
    <code>
     mm
    </code>
   </em>
   if it is an integral number of minutes, else as
   <em class=""replaceable"">
    <code>
     hh
    </code>
   </em>
   :
   <em class=""replaceable"">
    <code>
     mm
    </code>
   </em>
   :
   <em class=""replaceable"">
    <code>
     ss
    </code>
   </em>
   . (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (
   <em class=""replaceable"">
    <code>
     hh
    </code>
   </em>
   or
   <em class=""replaceable"">
    <code>
     hhmm
    </code>
   </em>
   ).
  </p>
  <p>
   The date/time style can be selected by the user using the
   <code class=""command"">
    SET datestyle
   </code>
   command, the
   <a class=""xref"" href=""runtime-config-client.html#GUC-DATESTYLE"">
    DateStyle
   </a>
   parameter in the
   <code class=""filename"">
    postgresql.conf
   </code>
   configuration file, or the
   <code class=""envar"">
    PGDATESTYLE
   </code>
   environment variable on the server or client.
  </p>
  <p>
   The formatting function
   <code class=""function"">
    to_char
   </code>
   (see
   <a class=""xref"" href=""functions-formatting.html"" title=""9.8. Data Type Formatting Functions"">
    Section 9.8
   </a>
   ) is also available as a more flexible way to format date/time output.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-TIMEZONES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.5.3. Time Zones
      <a class=""id_link"" href=""#DATATYPE-TIMEZONES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.13.20.2"" name=""id-1.5.7.13.20.2"">
  </a>
  <p>
   Time zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules.
   <span class=""productname"">
    PostgreSQL
   </span>
   uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.
  </p>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   endeavors to be compatible with the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard definitions for typical usage. However, the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard has an odd mix of date and time types and capabilities. Two obvious problems are:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Although the
      <code class=""type"">
       date
      </code>
      type cannot have an associated time zone, the
      <code class=""type"">
       time
      </code>
      type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The default time zone is specified as a constant numeric offset from
      <acronym class=""acronym"">
       UTC
      </acronym>
      . It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across
      <acronym class=""acronym"">
       DST
      </acronym>
      boundaries.
     </p>
    </li>
   </ul>
  </div>
  <p>
   To address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do
   <span class=""emphasis"">
    <em>
     not
    </em>
   </span>
   recommend using the type
   <code class=""type"">
    time with time zone
   </code>
   (though it is supported by
   <span class=""productname"">
    PostgreSQL
   </span>
   for legacy applications and for compliance with the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard).
   <span class=""productname"">
    PostgreSQL
   </span>
   assumes your local time zone for any type containing only date or time.
  </p>
  <p>
   All timezone-aware dates and times are stored internally in
   <acronym class=""acronym"">
    UTC
   </acronym>
   . They are converted to local time in the zone specified by the
   <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
    TimeZone
   </a>
   configuration parameter before being displayed to the client.
  </p>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   allows you to specify time zones in three different forms:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      A full time zone name, for example
      <code class=""literal"">
       America/New_York
      </code>
      . The recognized time zone names are listed in the
      <code class=""literal"">
       pg_timezone_names
      </code>
      view (see
      <a class=""xref"" href=""view-pg-timezone-names.html"" title=""52.32. pg_timezone_names"">
       Section 52.32
      </a>
      ).
      <span class=""productname"">
       PostgreSQL
      </span>
      uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      A time zone abbreviation, for example
      <code class=""literal"">
       PST
      </code>
      . Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the
      <code class=""literal"">
       pg_timezone_abbrevs
      </code>
      view (see
      <a class=""xref"" href=""view-pg-timezone-abbrevs.html"" title=""52.31. pg_timezone_abbrevs"">
       Section 52.31
      </a>
      ). You cannot set the configuration parameters
      <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
       TimeZone
      </a>
      or
      <a class=""xref"" href=""runtime-config-logging.html#GUC-LOG-TIMEZONE"">
       log_timezone
      </a>
      to a time zone abbreviation, but you can use abbreviations in date/time input values and with the
      <code class=""literal"">
       AT TIME ZONE
      </code>
      operator.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In addition to the timezone names and abbreviations,
      <span class=""productname"">
       PostgreSQL
      </span>
      will accept POSIX-style time zone specifications, as described in
      <a class=""xref"" href=""datetime-posix-timezone-specs.html"" title=""B.5. POSIX Time Zone Specifications"">
       Section B.5
      </a>
      . This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.
     </p>
    </li>
   </ul>
  </div>
  <p>
   In short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example,
   <code class=""literal"">
    2014-06-04 12:00 America/New_York
   </code>
   represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So
   <code class=""literal"">
    2014-06-04 12:00 EDT
   </code>
   specifies that same time instant. But
   <code class=""literal"">
    2014-06-04 12:00 EST
   </code>
   specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.
  </p>
  <p>
   To complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow
   <code class=""literal"">
    MSK
   </code>
   has meant UTC+3 in some years and UTC+4 in others.
   <span class=""productname"">
    PostgreSQL
   </span>
   interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the
   <code class=""literal"">
    EST
   </code>
   example above, this is not necessarily the same as local civil time on that date.
  </p>
  <p>
   In all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from
   <span class=""productname"">
    PostgreSQL
   </span>
   versions prior to 8.2, which were case-sensitive in some contexts but not others.)
  </p>
  <p>
   Neither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under
   <code class=""filename"">
    .../share/timezone/
   </code>
   and
   <code class=""filename"">
    .../share/timezonesets/
   </code>
   of the installation directory (see
   <a class=""xref"" href=""datetime-config-files.html"" title=""B.4. Date/Time Configuration Files"">
    Section B.4
   </a>
   ).
  </p>
  <p>
   The
   <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
    TimeZone
   </a>
   configuration parameter can be set in the file
   <code class=""filename"">
    postgresql.conf
   </code>
   , or in any of the other standard ways described in
   <a class=""xref"" href=""runtime-config.html"" title=""Chapter 19. Server Configuration"">
    Chapter 19
   </a>
   . There are also some special ways to set it:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      The
      <acronym class=""acronym"">
       SQL
      </acronym>
      command
      <code class=""command"">
       SET TIME ZONE
      </code>
      sets the time zone for the session. This is an alternative spelling of
      <code class=""command"">
       SET TIMEZONE TO
      </code>
      with a more SQL-spec-compatible syntax.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      The
      <code class=""envar"">
       PGTZ
      </code>
      environment variable is used by
      <span class=""application"">
       libpq
      </span>
      clients to send a
      <code class=""command"">
       SET TIME ZONE
      </code>
      command to the server upon connection.
     </p>
    </li>
   </ul>
  </div>
 </div>
 <div class=""sect2"" id=""DATATYPE-INTERVAL-INPUT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.5.4. Interval Input
      <a class=""id_link"" href=""#DATATYPE-INTERVAL-INPUT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.13.21.2"" name=""id-1.5.7.13.21.2"">
  </a>
  <p>
   <code class=""type"">
    interval
   </code>
   values can be written using the following verbose syntax:
  </p>
  <pre class=""synopsis"">
[<span class=""optional"">@</span>] <em class=""replaceable""><code>quantity</code></em> <em class=""replaceable""><code>unit</code></em> [<span class=""optional""><em class=""replaceable""><code>quantity</code></em> <em class=""replaceable""><code>unit</code></em>...</span>] [<span class=""optional""><em class=""replaceable""><code>direction</code></em></span>]
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     quantity
    </code>
   </em>
   is a number (possibly signed);
   <em class=""replaceable"">
    <code>
     unit
    </code>
   </em>
   is
   <code class=""literal"">
    microsecond
   </code>
   ,
   <code class=""literal"">
    millisecond
   </code>
   ,
   <code class=""literal"">
    second
   </code>
   ,
   <code class=""literal"">
    minute
   </code>
   ,
   <code class=""literal"">
    hour
   </code>
   ,
   <code class=""literal"">
    day
   </code>
   ,
   <code class=""literal"">
    week
   </code>
   ,
   <code class=""literal"">
    month
   </code>
   ,
   <code class=""literal"">
    year
   </code>
   ,
   <code class=""literal"">
    decade
   </code>
   ,
   <code class=""literal"">
    century
   </code>
   ,
   <code class=""literal"">
    millennium
   </code>
   , or abbreviations or plurals of these units;
   <em class=""replaceable"">
    <code>
     direction
    </code>
   </em>
   can be
   <code class=""literal"">
    ago
   </code>
   or empty. The at sign (
   <code class=""literal"">
    @
   </code>
   ) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting.
   <code class=""literal"">
    ago
   </code>
   negates all the fields. This syntax is also used for interval output, if
   <a class=""xref"" href=""runtime-config-client.html#GUC-INTERVALSTYLE"">
    IntervalStyle
   </a>
   is set to
   <code class=""literal"">
    postgres_verbose
   </code>
   .
  </p>
  <p>
   Quantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example,
   <code class=""literal"">
    '1 12:59:10'
   </code>
   is read the same as
   <code class=""literal"">
    '1 day 12 hours 59 min 10 sec'
   </code>
   . Also, a combination of years and months can be specified with a dash; for example
   <code class=""literal"">
    '200-10'
   </code>
   is read the same as
   <code class=""literal"">
    '200 years 10 months'
   </code>
   . (These shorter forms are in fact the only ones allowed by the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard, and are used for output when
   <code class=""varname"">
    IntervalStyle
   </code>
   is set to
   <code class=""literal"">
    sql_standard
   </code>
   .)
  </p>
  <p>
   Interval values can also be written as ISO 8601 time intervals, using either the
   <span class=""quote"">
    “
    <span class=""quote"">
     format with designators
    </span>
    ”
   </span>
   of the standard's section 4.4.3.2 or the
   <span class=""quote"">
    “
    <span class=""quote"">
     alternative format
    </span>
    ”
   </span>
   of section 4.4.3.3. The format with designators looks like this:
  </p>
  <pre class=""synopsis"">
P <em class=""replaceable""><code>quantity</code></em> <em class=""replaceable""><code>unit</code></em> [<span class=""optional""> <em class=""replaceable""><code>quantity</code></em> <em class=""replaceable""><code>unit</code></em> ...</span>] [<span class=""optional""> T [<span class=""optional""> <em class=""replaceable""><code>quantity</code></em> <em class=""replaceable""><code>unit</code></em> ...</span>]</span>]
</pre>
  <p>
   The string must start with a
   <code class=""literal"">
    P
   </code>
   , and may include a
   <code class=""literal"">
    T
   </code>
   that introduces the time-of-day units. The available unit abbreviations are given in
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-INTERVAL-ISO8601-UNITS"" title=""Table 8.16. ISO 8601 Interval Unit Abbreviations"">
    Table 8.16
   </a>
   . Units may be omitted, and may be specified in any order, but units smaller than a day must appear after
   <code class=""literal"">
    T
   </code>
   . In particular, the meaning of
   <code class=""literal"">
    M
   </code>
   depends on whether it is before or after
   <code class=""literal"">
    T
   </code>
   .
  </p>
  <div class=""table"" id=""DATATYPE-INTERVAL-ISO8601-UNITS"">
   <p class=""title"">
    <strong>
     Table 8.16. ISO 8601 Interval Unit Abbreviations
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""ISO 8601 Interval Unit Abbreviations"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Abbreviation
       </th>
       <th>
        Meaning
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        Y
       </td>
       <td>
        Years
       </td>
      </tr>
      <tr>
       <td>
        M
       </td>
       <td>
        Months (in the date part)
       </td>
      </tr>
      <tr>
       <td>
        W
       </td>
       <td>
        Weeks
       </td>
      </tr>
      <tr>
       <td>
        D
       </td>
       <td>
        Days
       </td>
      </tr>
      <tr>
       <td>
        H
       </td>
       <td>
        Hours
       </td>
      </tr>
      <tr>
       <td>
        M
       </td>
       <td>
        Minutes (in the time part)
       </td>
      </tr>
      <tr>
       <td>
        S
       </td>
       <td>
        Seconds
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   In the alternative format:
  </p>
  <pre class=""synopsis"">
P [<span class=""optional""> <em class=""replaceable""><code>years</code></em>-<em class=""replaceable""><code>months</code></em>-<em class=""replaceable""><code>days</code></em> </span>] [<span class=""optional""> T <em class=""replaceable""><code>hours</code></em>:<em class=""replaceable""><code>minutes</code></em>:<em class=""replaceable""><code>seconds</code></em> </span>]
</pre>
  <p>
   the string must begin with
   <code class=""literal"">
    P
   </code>
   , and a
   <code class=""literal"">
    T
   </code>
   separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.
  </p>
  <p>
   When writing an interval constant with a
   <em class=""replaceable"">
    <code>
     fields
    </code>
   </em>
   specification, or when assigning a string to an interval column that was defined with a
   <em class=""replaceable"">
    <code>
     fields
    </code>
   </em>
   specification, the interpretation of unmarked quantities depends on the
   <em class=""replaceable"">
    <code>
     fields
    </code>
   </em>
   . For example
   <code class=""literal"">
    INTERVAL '1' YEAR
   </code>
   is read as 1 year, whereas
   <code class=""literal"">
    INTERVAL '1'
   </code>
   means 1 second. Also, field values
   <span class=""quote"">
    “
    <span class=""quote"">
     to the right
    </span>
    ”
   </span>
   of the least significant field allowed by the
   <em class=""replaceable"">
    <code>
     fields
    </code>
   </em>
   specification are silently discarded. For example, writing
   <code class=""literal"">
    INTERVAL '1 day 2:03:04' HOUR TO MINUTE
   </code>
   results in dropping the seconds field, but not the day field.
  </p>
  <p>
   According to the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal
   <code class=""literal"">
    '-1 2:03:04'
   </code>
   applies to both the days and hour/minute/second parts.
   <span class=""productname"">
    PostgreSQL
   </span>
   allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If
   <code class=""varname"">
    IntervalStyle
   </code>
   is set to
   <code class=""literal"">
    sql_standard
   </code>
   then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional
   <span class=""productname"">
    PostgreSQL
   </span>
   interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.
  </p>
  <p>
   Internally,
   <code class=""type"">
    interval
   </code>
   values are stored as three integral fields: months, days, and microseconds. These fields are kept separate because the number of days in a month varies, while a day can have 23 or 25 hours if a daylight savings time transition is involved. An interval input string that uses other units is normalized into this format, and then reconstructed in a standardized way for output, for example:
  </p>
  <pre class=""programlisting"">
SELECT '2 years 15 months 100 weeks 99 hours 123456789 milliseconds'::interval;
               interval
---------------------------------------
 3 years 3 mons 700 days 133:17:36.789
</pre>
  <p>
   Here weeks, which are understood as
   <span class=""quote"">
    “
    <span class=""quote"">
     7 days
    </span>
    ”
   </span>
   , have been kept separate, while the smaller and larger time units were combined and normalized.
  </p>
  <p>
   Input field values can have fractional parts, for example
   <code class=""literal"">
    '1.5 weeks'
   </code>
   or
   <code class=""literal"">
    '01:02:03.45'
   </code>
   . However, because
   <code class=""type"">
    interval
   </code>
   internally stores only integral fields, fractional values must be converted into smaller units. Fractional parts of units greater than months are rounded to be an integer number of months, e.g.
   <code class=""literal"">
    '1.5 years'
   </code>
   becomes
   <code class=""literal"">
    '1 year 6 mons'
   </code>
   . Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g.,
   <code class=""literal"">
    '1.75 months'
   </code>
   becomes
   <code class=""literal"">
    1 mon 22 days 12:00:00
   </code>
   . Only seconds will ever be shown as fractional on output.
  </p>
  <p>
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-INTERVAL-INPUT-EXAMPLES"" title=""Table 8.17. Interval Input"">
    Table 8.17
   </a>
   shows some examples of valid
   <code class=""type"">
    interval
   </code>
   input.
  </p>
  <div class=""table"" id=""DATATYPE-INTERVAL-INPUT-EXAMPLES"">
   <p class=""title"">
    <strong>
     Table 8.17. Interval Input
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Interval Input"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Example
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         1-2
        </code>
       </td>
       <td>
        SQL standard format: 1 year 2 months
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         3 4:05:06
        </code>
       </td>
       <td>
        SQL standard format: 3 days 4 hours 5 minutes 6 seconds
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         1 year 2 months 3 days 4 hours 5 minutes 6 seconds
        </code>
       </td>
       <td>
        Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         P1Y2M3DT4H5M6S
        </code>
       </td>
       <td>
        ISO 8601
        <span class=""quote"">
         “
         <span class=""quote"">
          format with designators
         </span>
         ”
        </span>
        : same meaning as above
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         P0001-02-03T04:05:06
        </code>
       </td>
       <td>
        ISO 8601
        <span class=""quote"">
         “
         <span class=""quote"">
          alternative format
         </span>
         ”
        </span>
        : same meaning as above
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""DATATYPE-INTERVAL-OUTPUT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.5.5. Interval Output
      <a class=""id_link"" href=""#DATATYPE-INTERVAL-OUTPUT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.13.22.2"" name=""id-1.5.7.13.22.2"">
  </a>
  <p>
   As previously explained,
   <span class=""productname"">
    PostgreSQL
   </span>
   stores
   <code class=""type"">
    interval
   </code>
   values as months, days, and microseconds. For output, the months field is converted to years and months by dividing by 12. The days field is shown as-is. The microseconds field is converted to hours, minutes, seconds, and fractional seconds. Thus months, minutes, and seconds will never be shown as exceeding the ranges 0–11, 0–59, and 0–59 respectively, while the displayed years, days, and hours fields can be quite large. (The
   <a class=""link"" href=""functions-datetime.html#FUNCTION-JUSTIFY-DAYS"">
    <code class=""function"">
     justify_days
    </code>
   </a>
   and
   <a class=""link"" href=""functions-datetime.html#FUNCTION-JUSTIFY-HOURS"">
    <code class=""function"">
     justify_hours
    </code>
   </a>
   functions can be used if it is desirable to transpose large days or hours values into the next higher field.)
  </p>
  <p>
   The output format of the interval type can be set to one of the four styles
   <code class=""literal"">
    sql_standard
   </code>
   ,
   <code class=""literal"">
    postgres
   </code>
   ,
   <code class=""literal"">
    postgres_verbose
   </code>
   , or
   <code class=""literal"">
    iso_8601
   </code>
   , using the command
   <code class=""literal"">
    SET intervalstyle
   </code>
   . The default is the
   <code class=""literal"">
    postgres
   </code>
   format.
   <a class=""xref"" href=""datatype-datetime.html#INTERVAL-STYLE-OUTPUT-TABLE"" title=""Table 8.18. Interval Output Style Examples"">
    Table 8.18
   </a>
   shows examples of each output style.
  </p>
  <p>
   The
   <code class=""literal"">
    sql_standard
   </code>
   style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.
  </p>
  <p>
   The output of the
   <code class=""literal"">
    postgres
   </code>
   style matches the output of
   <span class=""productname"">
    PostgreSQL
   </span>
   releases prior to 8.4 when the
   <a class=""xref"" href=""runtime-config-client.html#GUC-DATESTYLE"">
    DateStyle
   </a>
   parameter was set to
   <code class=""literal"">
    ISO
   </code>
   .
  </p>
  <p>
   The output of the
   <code class=""literal"">
    postgres_verbose
   </code>
   style matches the output of
   <span class=""productname"">
    PostgreSQL
   </span>
   releases prior to 8.4 when the
   <code class=""varname"">
    DateStyle
   </code>
   parameter was set to non-
   <code class=""literal"">
    ISO
   </code>
   output.
  </p>
  <p>
   The output of the
   <code class=""literal"">
    iso_8601
   </code>
   style matches the
   <span class=""quote"">
    “
    <span class=""quote"">
     format with designators
    </span>
    ”
   </span>
   described in section 4.4.3.2 of the ISO 8601 standard.
  </p>
  <div class=""table"" id=""INTERVAL-STYLE-OUTPUT-TABLE"">
   <p class=""title"">
    <strong>
     Table 8.18. Interval Output Style Examples
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Interval Output Style Examples"">
     <colgroup>
      <col/>
      <col/>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Style Specification
       </th>
       <th>
        Year-Month Interval
       </th>
       <th>
        Day-Time Interval
       </th>
       <th>
        Mixed Interval
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         sql_standard
        </code>
       </td>
       <td>
        1-2
       </td>
       <td>
        3 4:05:06
       </td>
       <td>
        -1-2 +3 -4:05:06
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         postgres
        </code>
       </td>
       <td>
        1 year 2 mons
       </td>
       <td>
        3 days 04:05:06
       </td>
       <td>
        -1 year -2 mons +3 days -04:05:06
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         postgres_verbose
        </code>
       </td>
       <td>
        @ 1 year 2 mons
       </td>
       <td>
        @ 3 days 4 hours 5 mins 6 secs
       </td>
       <td>
        @ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         iso_8601
        </code>
       </td>
       <td>
        P1Y2M
       </td>
       <td>
        P3DT4H5M6S
       </td>
       <td>
        P-1Y-2M3D​T-4H-5M-6S
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
</div>
"
8. Data Types,8.6. Boolean Type,https://www.postgresql.org/docs/17/datatype-boolean.html,"<div class=""sect1"" id=""DATATYPE-BOOLEAN"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.6. Boolean Type
     <a class=""id_link"" href=""#DATATYPE-BOOLEAN"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.14.2"" name=""id-1.5.7.14.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.14.3"" name=""id-1.5.7.14.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.14.4"" name=""id-1.5.7.14.4"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides the standard
  <acronym class=""acronym"">
   SQL
  </acronym>
  type
  <code class=""type"">
   boolean
  </code>
  ; see
  <a class=""xref"" href=""datatype-boolean.html#DATATYPE-BOOLEAN-TABLE"" title=""Table 8.19. Boolean Data Type"">
   Table 8.19
  </a>
  . The
  <code class=""type"">
   boolean
  </code>
  type can have several states:
  <span class=""quote"">
   “
   <span class=""quote"">
    true
   </span>
   ”
  </span>
  ,
  <span class=""quote"">
   “
   <span class=""quote"">
    false
   </span>
   ”
  </span>
  , and a third state,
  <span class=""quote"">
   “
   <span class=""quote"">
    unknown
   </span>
   ”
  </span>
  , which is represented by the
  <acronym class=""acronym"">
   SQL
  </acronym>
  null value.
 </p>
 <div class=""table"" id=""DATATYPE-BOOLEAN-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.19. Boolean Data Type
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Boolean Data Type"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       1 byte
      </td>
      <td>
       state of true or false
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Boolean constants can be represented in SQL queries by the SQL key words
  <code class=""literal"">
   TRUE
  </code>
  ,
  <code class=""literal"">
   FALSE
  </code>
  , and
  <code class=""literal"">
   NULL
  </code>
  .
 </p>
 <p>
  The datatype input function for type
  <code class=""type"">
   boolean
  </code>
  accepts these string representations for the
  <span class=""quote"">
   “
   <span class=""quote"">
    true
   </span>
   ”
  </span>
  state:
 </p>
 <table border=""0"" class=""simplelist"" summary=""Simple list"">
  <tr>
   <td>
    <code class=""literal"">
     true
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     yes
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     on
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     1
    </code>
   </td>
  </tr>
 </table>
 <p>
  and these representations for the
  <span class=""quote"">
   “
   <span class=""quote"">
    false
   </span>
   ”
  </span>
  state:
 </p>
 <table border=""0"" class=""simplelist"" summary=""Simple list"">
  <tr>
   <td>
    <code class=""literal"">
     false
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     no
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     off
    </code>
   </td>
  </tr>
  <tr>
   <td>
    <code class=""literal"">
     0
    </code>
   </td>
  </tr>
 </table>
 <p>
  Unique prefixes of these strings are also accepted, for example
  <code class=""literal"">
   t
  </code>
  or
  <code class=""literal"">
   n
  </code>
  . Leading or trailing whitespace is ignored, and case does not matter.
 </p>
 <p>
  The datatype output function for type
  <code class=""type"">
   boolean
  </code>
  always emits either
  <code class=""literal"">
   t
  </code>
  or
  <code class=""literal"">
   f
  </code>
  , as shown in
  <a class=""xref"" href=""datatype-boolean.html#DATATYPE-BOOLEAN-EXAMPLE"" title=""Example 8.2. Using the boolean Type"">
   Example 8.2
  </a>
  .
 </p>
 <div class=""example"" id=""DATATYPE-BOOLEAN-EXAMPLE"">
  <p class=""title"">
   <strong>
    Example 8.2. Using the
    <code class=""type"">
     boolean
    </code>
    Type
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""programlisting"">
CREATE TABLE test1 (a boolean, b text);
INSERT INTO test1 VALUES (TRUE, 'sic est');
INSERT INTO test1 VALUES (FALSE, 'non est');
SELECT * FROM test1;
 a |    b
---+---------
 t | sic est
 f | non est

SELECT * FROM test1 WHERE a;
 a |    b
---+---------
 t | sic est
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  The key words
  <code class=""literal"">
   TRUE
  </code>
  and
  <code class=""literal"">
   FALSE
  </code>
  are the preferred (
  <acronym class=""acronym"">
   SQL
  </acronym>
  -compliant) method for writing Boolean constants in SQL queries. But you can also use the string representations by following the generic string-literal constant syntax described in
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-GENERIC"" title=""4.1.2.7. Constants of Other Types"">
   Section 4.1.2.7
  </a>
  , for example
  <code class=""literal"">
   'yes'::boolean
  </code>
  .
 </p>
 <p>
  Note that the parser automatically understands that
  <code class=""literal"">
   TRUE
  </code>
  and
  <code class=""literal"">
   FALSE
  </code>
  are of type
  <code class=""type"">
   boolean
  </code>
  , but this is not so for
  <code class=""literal"">
   NULL
  </code>
  because that can have any type. So in some contexts you might have to cast
  <code class=""literal"">
   NULL
  </code>
  to
  <code class=""type"">
   boolean
  </code>
  explicitly, for example
  <code class=""literal"">
   NULL::boolean
  </code>
  . Conversely, the cast can be omitted from a string-literal Boolean value in contexts where the parser can deduce that the literal must be of type
  <code class=""type"">
   boolean
  </code>
  .
 </p>
</div>
"
8. Data Types,8.7. Enumerated Types,https://www.postgresql.org/docs/17/datatype-enum.html,"<div class=""sect1"" id=""DATATYPE-ENUM"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.7. Enumerated Types
     <a class=""id_link"" href=""#DATATYPE-ENUM"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-enum.html#DATATYPE-ENUM-DECLARATION"">
      8.7.1. Declaration of Enumerated Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-enum.html#DATATYPE-ENUM-ORDERING"">
      8.7.2. Ordering
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-enum.html#DATATYPE-ENUM-TYPE-SAFETY"">
      8.7.3. Type Safety
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-enum.html#DATATYPE-ENUM-IMPLEMENTATION-DETAILS"">
      8.7.4. Implementation Details
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.15.2"" name=""id-1.5.7.15.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.15.3"" name=""id-1.5.7.15.3"">
 </a>
 <p>
  Enumerated (enum) types are data types that comprise a static, ordered set of values. They are equivalent to the
  <code class=""type"">
   enum
  </code>
  types supported in a number of programming languages. An example of an enum type might be the days of the week, or a set of status values for a piece of data.
 </p>
 <div class=""sect2"" id=""DATATYPE-ENUM-DECLARATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.7.1. Declaration of Enumerated Types
      <a class=""id_link"" href=""#DATATYPE-ENUM-DECLARATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Enum types are created using the
   <a class=""xref"" href=""sql-createtype.html"" title=""CREATE TYPE"">
    <span class=""refentrytitle"">
     CREATE TYPE
    </span>
   </a>
   command, for example:
  </p>
  <pre class=""programlisting"">
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
</pre>
  <p>
   Once created, the enum type can be used in table and function definitions much like any other type:
  </p>
  <pre class=""programlisting"">
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE person (
    name text,
    current_mood mood
);
INSERT INTO person VALUES ('Moe', 'happy');
SELECT * FROM person WHERE current_mood = 'happy';
 name | current_mood
------+--------------
 Moe  | happy
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-ENUM-ORDERING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.7.2. Ordering
      <a class=""id_link"" href=""#DATATYPE-ENUM-ORDERING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The ordering of the values in an enum type is the order in which the values were listed when the type was created. All standard comparison operators and related aggregate functions are supported for enums. For example:
  </p>
  <pre class=""programlisting"">
INSERT INTO person VALUES ('Larry', 'sad');
INSERT INTO person VALUES ('Curly', 'ok');
SELECT * FROM person WHERE current_mood &gt; 'sad';
 name  | current_mood
-------+--------------
 Moe   | happy
 Curly | ok
(2 rows)

SELECT * FROM person WHERE current_mood &gt; 'sad' ORDER BY current_mood;
 name  | current_mood
-------+--------------
 Curly | ok
 Moe   | happy
(2 rows)

SELECT name
FROM person
WHERE current_mood = (SELECT MIN(current_mood) FROM person);
 name
-------
 Larry
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-ENUM-TYPE-SAFETY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.7.3. Type Safety
      <a class=""id_link"" href=""#DATATYPE-ENUM-TYPE-SAFETY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Each enumerated data type is separate and cannot be compared with other enumerated types. See this example:
  </p>
  <pre class=""programlisting"">
CREATE TYPE happiness AS ENUM ('happy', 'very happy', 'ecstatic');
CREATE TABLE holidays (
    num_weeks integer,
    happiness happiness
);
INSERT INTO holidays(num_weeks,happiness) VALUES (4, 'happy');
INSERT INTO holidays(num_weeks,happiness) VALUES (6, 'very happy');
INSERT INTO holidays(num_weeks,happiness) VALUES (8, 'ecstatic');
INSERT INTO holidays(num_weeks,happiness) VALUES (2, 'sad');
ERROR:  invalid input value for enum happiness: ""sad""
SELECT person.name, holidays.num_weeks FROM person, holidays
  WHERE person.current_mood = holidays.happiness;
ERROR:  operator does not exist: mood = happiness
</pre>
  <p>
   If you really need to do something like that, you can either write a custom operator or add explicit casts to your query:
  </p>
  <pre class=""programlisting"">
SELECT person.name, holidays.num_weeks FROM person, holidays
  WHERE person.current_mood::text = holidays.happiness::text;
 name | num_weeks
------+-----------
 Moe  |         4
(1 row)

</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-ENUM-IMPLEMENTATION-DETAILS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.7.4. Implementation Details
      <a class=""id_link"" href=""#DATATYPE-ENUM-IMPLEMENTATION-DETAILS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Enum labels are case sensitive, so
   <code class=""type"">
    'happy'
   </code>
   is not the same as
   <code class=""type"">
    'HAPPY'
   </code>
   . White space in the labels is significant too.
  </p>
  <p>
   Although enum types are primarily intended for static sets of values, there is support for adding new values to an existing enum type, and for renaming values (see
   <a class=""xref"" href=""sql-altertype.html"" title=""ALTER TYPE"">
    <span class=""refentrytitle"">
     ALTER TYPE
    </span>
   </a>
   ). Existing values cannot be removed from an enum type, nor can the sort ordering of such values be changed, short of dropping and re-creating the enum type.
  </p>
  <p>
   An enum value occupies four bytes on disk. The length of an enum value's textual label is limited by the
   <code class=""symbol"">
    NAMEDATALEN
   </code>
   setting compiled into
   <span class=""productname"">
    PostgreSQL
   </span>
   ; in standard builds this means at most 63 bytes.
  </p>
  <p>
   The translations from internal enum values to textual labels are kept in the system catalog
   <a class=""link"" href=""catalog-pg-enum.html"" title=""51.20. pg_enum"">
    <code class=""structname"">
     pg_enum
    </code>
   </a>
   . Querying this catalog directly can be useful.
  </p>
 </div>
</div>
"
8. Data Types,8.8. Geometric Types,https://www.postgresql.org/docs/17/datatype-geometric.html,"<div class=""sect1"" id=""DATATYPE-GEOMETRIC"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.8. Geometric Types
     <a class=""id_link"" href=""#DATATYPE-GEOMETRIC"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-GEOMETRIC-POINTS"">
      8.8.1. Points
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-LINE"">
      8.8.2. Lines
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-LSEG"">
      8.8.3. Line Segments
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-GEOMETRIC-BOXES"">
      8.8.4. Boxes
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-GEOMETRIC-PATHS"">
      8.8.5. Paths
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-POLYGON"">
      8.8.6. Polygons
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-geometric.html#DATATYPE-CIRCLE"">
      8.8.7. Circles
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  Geometric data types represent two-dimensional spatial objects.
  <a class=""xref"" href=""datatype-geometric.html#DATATYPE-GEO-TABLE"" title=""Table 8.20. Geometric Types"">
   Table 8.20
  </a>
  shows the geometric types available in
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
 <div class=""table"" id=""DATATYPE-GEO-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.20. Geometric Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Geometric Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
     <col class=""col4""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
      <th>
       Representation
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        point
       </code>
      </td>
      <td>
       16 bytes
      </td>
      <td>
       Point on a plane
      </td>
      <td>
       (x,y)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        line
       </code>
      </td>
      <td>
       24 bytes
      </td>
      <td>
       Infinite line
      </td>
      <td>
       {A,B,C}
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        lseg
       </code>
      </td>
      <td>
       32 bytes
      </td>
      <td>
       Finite line segment
      </td>
      <td>
       [(x1,y1),(x2,y2)]
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        box
       </code>
      </td>
      <td>
       32 bytes
      </td>
      <td>
       Rectangular box
      </td>
      <td>
       (x1,y1),(x2,y2)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        path
       </code>
      </td>
      <td>
       16+16n bytes
      </td>
      <td>
       Closed path (similar to polygon)
      </td>
      <td>
       ((x1,y1),...)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        path
       </code>
      </td>
      <td>
       16+16n bytes
      </td>
      <td>
       Open path
      </td>
      <td>
       [(x1,y1),...]
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        polygon
       </code>
      </td>
      <td>
       40+16n bytes
      </td>
      <td>
       Polygon (similar to closed path)
      </td>
      <td>
       ((x1,y1),...)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        circle
       </code>
      </td>
      <td>
       24 bytes
      </td>
      <td>
       Circle
      </td>
      <td>
       &lt;(x,y),r&gt; (center point and radius)
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  In all these types, the individual coordinates are stored as
  <code class=""type"">
   double precision
  </code>
  (
  <code class=""type"">
   float8
  </code>
  ) numbers.
 </p>
 <p>
  A rich set of functions and operators is available to perform various geometric operations such as scaling, translation, rotation, and determining intersections. They are explained in
  <a class=""xref"" href=""functions-geometry.html"" title=""9.11. Geometric Functions and Operators"">
   Section 9.11
  </a>
  .
 </p>
 <div class=""sect2"" id=""DATATYPE-GEOMETRIC-POINTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.1. Points
      <a class=""id_link"" href=""#DATATYPE-GEOMETRIC-POINTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.6.2"" name=""id-1.5.7.16.6.2"">
  </a>
  <p>
   Points are the fundamental two-dimensional building block for geometric types. Values of type
   <code class=""type"">
    point
   </code>
   are specified using either of the following syntaxes:
  </p>
  <pre class=""synopsis"">
( <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em> )
  <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em>
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     x
    </code>
   </em>
   and
   <em class=""replaceable"">
    <code>
     y
    </code>
   </em>
   are the respective coordinates, as floating-point numbers.
  </p>
  <p>
   Points are output using the first syntax.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-LINE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.2. Lines
      <a class=""id_link"" href=""#DATATYPE-LINE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.7.2"" name=""id-1.5.7.16.7.2"">
  </a>
  <p>
   Lines are represented by the linear equation
   <em class=""replaceable"">
    <code>
     A
    </code>
   </em>
   x +
   <em class=""replaceable"">
    <code>
     B
    </code>
   </em>
   y +
   <em class=""replaceable"">
    <code>
     C
    </code>
   </em>
   = 0, where
   <em class=""replaceable"">
    <code>
     A
    </code>
   </em>
   and
   <em class=""replaceable"">
    <code>
     B
    </code>
   </em>
   are not both zero. Values of type
   <code class=""type"">
    line
   </code>
   are input and output in the following form:
  </p>
  <pre class=""synopsis"">
{ <em class=""replaceable""><code>A</code></em>, <em class=""replaceable""><code>B</code></em>, <em class=""replaceable""><code>C</code></em> }
</pre>
  <p>
   Alternatively, any of the following forms can be used for input:
  </p>
  <pre class=""synopsis"">
[ ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> ) ]
( ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> ) )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> )
    <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   ,   <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em>
</pre>
  <p>
   where
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x1
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y1
     </code>
    </em>
    )
   </code>
   and
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x2
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y2
     </code>
    </em>
    )
   </code>
   are two different points on the line.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-LSEG"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.3. Line Segments
      <a class=""id_link"" href=""#DATATYPE-LSEG"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.8.2"" name=""id-1.5.7.16.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.16.8.3"" name=""id-1.5.7.16.8.3"">
  </a>
  <p>
   Line segments are represented by pairs of points that are the endpoints of the segment. Values of type
   <code class=""type"">
    lseg
   </code>
   are specified using any of the following syntaxes:
  </p>
  <pre class=""synopsis"">
[ ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> ) ]
( ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> ) )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> )
    <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   ,   <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em>
</pre>
  <p>
   where
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x1
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y1
     </code>
    </em>
    )
   </code>
   and
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x2
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y2
     </code>
    </em>
    )
   </code>
   are the end points of the line segment.
  </p>
  <p>
   Line segments are output using the first syntax.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-GEOMETRIC-BOXES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.4. Boxes
      <a class=""id_link"" href=""#DATATYPE-GEOMETRIC-BOXES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.9.2"" name=""id-1.5.7.16.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.16.9.3"" name=""id-1.5.7.16.9.3"">
  </a>
  <p>
   Boxes are represented by pairs of points that are opposite corners of the box. Values of type
   <code class=""type"">
    box
   </code>
   are specified using any of the following syntaxes:
  </p>
  <pre class=""synopsis"">
( ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> ) )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ( <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em> )
    <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   ,   <em class=""replaceable""><code>x2</code></em> , <em class=""replaceable""><code>y2</code></em>
</pre>
  <p>
   where
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x1
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y1
     </code>
    </em>
    )
   </code>
   and
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x2
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y2
     </code>
    </em>
    )
   </code>
   are any two opposite corners of the box.
  </p>
  <p>
   Boxes are output using the second syntax.
  </p>
  <p>
   Any two opposite corners can be supplied on input, but the values will be reordered as needed to store the upper right and lower left corners, in that order.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-GEOMETRIC-PATHS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.5. Paths
      <a class=""id_link"" href=""#DATATYPE-GEOMETRIC-PATHS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.10.2"" name=""id-1.5.7.16.10.2"">
  </a>
  <p>
   Paths are represented by lists of connected points. Paths can be
   <em class=""firstterm"">
    open
   </em>
   , where the first and last points in the list are considered not connected, or
   <em class=""firstterm"">
    closed
   </em>
   , where the first and last points are considered connected.
  </p>
  <p>
   Values of type
   <code class=""type"">
    path
   </code>
   are specified using any of the following syntaxes:
  </p>
  <pre class=""synopsis"">
[ ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ... , ( <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> ) ]
( ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ... , ( <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> ) )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ... , ( <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   , ... ,   <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> )
    <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   , ... ,   <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em>
</pre>
  <p>
   where the points are the end points of the line segments comprising the path. Square brackets (
   <code class=""literal"">
    []
   </code>
   ) indicate an open path, while parentheses (
   <code class=""literal"">
    ()
   </code>
   ) indicate a closed path. When the outermost parentheses are omitted, as in the third through fifth syntaxes, a closed path is assumed.
  </p>
  <p>
   Paths are output using the first or second syntax, as appropriate.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-POLYGON"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.6. Polygons
      <a class=""id_link"" href=""#DATATYPE-POLYGON"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.11.2"" name=""id-1.5.7.16.11.2"">
  </a>
  <p>
   Polygons are represented by lists of points (the vertices of the polygon). Polygons are very similar to closed paths; the essential semantic difference is that a polygon is considered to include the area within it, while a path is not.
  </p>
  <p>
   An important implementation difference between polygons and paths is that the stored representation of a polygon includes its smallest bounding box. This speeds up certain search operations, although computing the bounding box adds overhead while constructing new polygons.
  </p>
  <p>
   Values of type
   <code class=""type"">
    polygon
   </code>
   are specified using any of the following syntaxes:
  </p>
  <pre class=""synopsis"">
( ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ... , ( <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> ) )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em> ) , ... , ( <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> )
  ( <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   , ... ,   <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em> )
    <em class=""replaceable""><code>x1</code></em> , <em class=""replaceable""><code>y1</code></em>   , ... ,   <em class=""replaceable""><code>xn</code></em> , <em class=""replaceable""><code>yn</code></em>
</pre>
  <p>
   where the points are the end points of the line segments comprising the boundary of the polygon.
  </p>
  <p>
   Polygons are output using the first syntax.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-CIRCLE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.8.7. Circles
      <a class=""id_link"" href=""#DATATYPE-CIRCLE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.16.12.2"" name=""id-1.5.7.16.12.2"">
  </a>
  <p>
   Circles are represented by a center point and radius. Values of type
   <code class=""type"">
    circle
   </code>
   are specified using any of the following syntaxes:
  </p>
  <pre class=""synopsis"">
&lt; ( <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em> ) , <em class=""replaceable""><code>r</code></em> &gt;
( ( <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em> ) , <em class=""replaceable""><code>r</code></em> )
  ( <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em> ) , <em class=""replaceable""><code>r</code></em>
    <em class=""replaceable""><code>x</code></em> , <em class=""replaceable""><code>y</code></em>   , <em class=""replaceable""><code>r</code></em>
</pre>
  <p>
   where
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      x
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      y
     </code>
    </em>
    )
   </code>
   is the center point and
   <em class=""replaceable"">
    <code>
     r
    </code>
   </em>
   is the radius of the circle.
  </p>
  <p>
   Circles are output using the first syntax.
  </p>
 </div>
</div>
"
8. Data Types,8.9. Network Address Types,https://www.postgresql.org/docs/17/datatype-net-types.html,"<div class=""sect1"" id=""DATATYPE-NET-TYPES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.9. Network Address Types
     <a class=""id_link"" href=""#DATATYPE-NET-TYPES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-net-types.html#DATATYPE-INET"">
      8.9.1.
      <code class=""type"">
       inet
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-net-types.html#DATATYPE-CIDR"">
      8.9.2.
      <code class=""type"">
       cidr
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-net-types.html#DATATYPE-INET-VS-CIDR"">
      8.9.3.
      <code class=""type"">
       inet
      </code>
      vs.
      <code class=""type"">
       cidr
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-net-types.html#DATATYPE-MACADDR"">
      8.9.4.
      <code class=""type"">
       macaddr
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-net-types.html#DATATYPE-MACADDR8"">
      8.9.5.
      <code class=""type"">
       macaddr8
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.17.2"" name=""id-1.5.7.17.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  offers data types to store IPv4, IPv6, and MAC addresses, as shown in
  <a class=""xref"" href=""datatype-net-types.html#DATATYPE-NET-TYPES-TABLE"" title=""Table 8.21. Network Address Types"">
   Table 8.21
  </a>
  . It is better to use these types instead of plain text types to store network addresses, because these types offer input error checking and specialized operators and functions (see
  <a class=""xref"" href=""functions-net.html"" title=""9.12. Network Address Functions and Operators"">
   Section 9.12
  </a>
  ).
 </p>
 <div class=""table"" id=""DATATYPE-NET-TYPES-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.21. Network Address Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Network Address Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Storage Size
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        cidr
       </code>
      </td>
      <td>
       7 or 19 bytes
      </td>
      <td>
       IPv4 and IPv6 networks
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        inet
       </code>
      </td>
      <td>
       7 or 19 bytes
      </td>
      <td>
       IPv4 and IPv6 hosts and networks
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        macaddr
       </code>
      </td>
      <td>
       6 bytes
      </td>
      <td>
       MAC addresses
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        macaddr8
       </code>
      </td>
      <td>
       8 bytes
      </td>
      <td>
       MAC addresses (EUI-64 format)
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  When sorting
  <code class=""type"">
   inet
  </code>
  or
  <code class=""type"">
   cidr
  </code>
  data types, IPv4 addresses will always sort before IPv6 addresses, including IPv4 addresses encapsulated or mapped to IPv6 addresses, such as ::10.2.3.4 or ::ffff:10.4.3.2.
 </p>
 <div class=""sect2"" id=""DATATYPE-INET"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.9.1.
      <code class=""type"">
       inet
      </code>
      <a class=""id_link"" href=""#DATATYPE-INET"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.17.6.2"" name=""id-1.5.7.17.6.2"">
  </a>
  <p>
   The
   <code class=""type"">
    inet
   </code>
   type holds an IPv4 or IPv6 host address, and optionally its subnet, all in one field. The subnet is represented by the number of network address bits present in the host address (the
   <span class=""quote"">
    “
    <span class=""quote"">
     netmask
    </span>
    ”
   </span>
   ). If the netmask is 32 and the address is IPv4, then the value does not indicate a subnet, only a single host. In IPv6, the address length is 128 bits, so 128 bits specify a unique host address. Note that if you want to accept only networks, you should use the
   <code class=""type"">
    cidr
   </code>
   type rather than
   <code class=""type"">
    inet
   </code>
   .
  </p>
  <p>
   The input format for this type is
   <em class=""replaceable"">
    <code>
     address/y
    </code>
   </em>
   where
   <em class=""replaceable"">
    <code>
     address
    </code>
   </em>
   is an IPv4 or IPv6 address and
   <em class=""replaceable"">
    <code>
     y
    </code>
   </em>
   is the number of bits in the netmask. If the
   <em class=""replaceable"">
    <code>
     /y
    </code>
   </em>
   portion is omitted, the netmask is taken to be 32 for IPv4 or 128 for IPv6, so the value represents just a single host. On display, the
   <em class=""replaceable"">
    <code>
     /y
    </code>
   </em>
   portion is suppressed if the netmask specifies a single host.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-CIDR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.9.2.
      <code class=""type"">
       cidr
      </code>
      <a class=""id_link"" href=""#DATATYPE-CIDR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.17.7.2"" name=""id-1.5.7.17.7.2"">
  </a>
  <p>
   The
   <code class=""type"">
    cidr
   </code>
   type holds an IPv4 or IPv6 network specification. Input and output formats follow Classless Internet Domain Routing conventions. The format for specifying networks is
   <em class=""replaceable"">
    <code>
     address/y
    </code>
   </em>
   where
   <em class=""replaceable"">
    <code>
     address
    </code>
   </em>
   is the network's lowest address represented as an IPv4 or IPv6 address, and
   <em class=""replaceable"">
    <code>
     y
    </code>
   </em>
   is the number of bits in the netmask. If
   <em class=""replaceable"">
    <code>
     y
    </code>
   </em>
   is omitted, it is calculated using assumptions from the older classful network numbering system, except it will be at least large enough to include all of the octets written in the input. It is an error to specify a network address that has bits set to the right of the specified netmask.
  </p>
  <p>
   <a class=""xref"" href=""datatype-net-types.html#DATATYPE-NET-CIDR-TABLE"" title=""Table 8.22. cidr Type Input Examples"">
    Table 8.22
   </a>
   shows some examples.
  </p>
  <div class=""table"" id=""DATATYPE-NET-CIDR-TABLE"">
   <p class=""title"">
    <strong>
     Table 8.22.
     <code class=""type"">
      cidr
     </code>
     Type Input Examples
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""cidr Type Input Examples"">
     <colgroup>
      <col/>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        <code class=""type"">
         cidr
        </code>
        Input
       </th>
       <th>
        <code class=""type"">
         cidr
        </code>
        Output
       </th>
       <th>
        <code class=""literal"">
         <code class=""function"">
          abbrev(
          <code class=""type"">
           cidr
          </code>
          )
         </code>
        </code>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        192.168.100.128/25
       </td>
       <td>
        192.168.100.128/25
       </td>
       <td>
        192.168.100.128/25
       </td>
      </tr>
      <tr>
       <td>
        192.168/24
       </td>
       <td>
        192.168.0.0/24
       </td>
       <td>
        192.168.0/24
       </td>
      </tr>
      <tr>
       <td>
        192.168/25
       </td>
       <td>
        192.168.0.0/25
       </td>
       <td>
        192.168.0.0/25
       </td>
      </tr>
      <tr>
       <td>
        192.168.1
       </td>
       <td>
        192.168.1.0/24
       </td>
       <td>
        192.168.1/24
       </td>
      </tr>
      <tr>
       <td>
        192.168
       </td>
       <td>
        192.168.0.0/24
       </td>
       <td>
        192.168.0/24
       </td>
      </tr>
      <tr>
       <td>
        128.1
       </td>
       <td>
        128.1.0.0/16
       </td>
       <td>
        128.1/16
       </td>
      </tr>
      <tr>
       <td>
        128
       </td>
       <td>
        128.0.0.0/16
       </td>
       <td>
        128.0/16
       </td>
      </tr>
      <tr>
       <td>
        128.1.2
       </td>
       <td>
        128.1.2.0/24
       </td>
       <td>
        128.1.2/24
       </td>
      </tr>
      <tr>
       <td>
        10.1.2
       </td>
       <td>
        10.1.2.0/24
       </td>
       <td>
        10.1.2/24
       </td>
      </tr>
      <tr>
       <td>
        10.1
       </td>
       <td>
        10.1.0.0/16
       </td>
       <td>
        10.1/16
       </td>
      </tr>
      <tr>
       <td>
        10
       </td>
       <td>
        10.0.0.0/8
       </td>
       <td>
        10/8
       </td>
      </tr>
      <tr>
       <td>
        10.1.2.3/32
       </td>
       <td>
        10.1.2.3/32
       </td>
       <td>
        10.1.2.3/32
       </td>
      </tr>
      <tr>
       <td>
        2001:4f8:3:ba::/64
       </td>
       <td>
        2001:4f8:3:ba::/64
       </td>
       <td>
        2001:4f8:3:ba/64
       </td>
      </tr>
      <tr>
       <td>
        2001:4f8:3:ba:​2e0:81ff:fe22:d1f1/128
       </td>
       <td>
        2001:4f8:3:ba:​2e0:81ff:fe22:d1f1/128
       </td>
       <td>
        2001:4f8:3:ba:​2e0:81ff:fe22:d1f1/128
       </td>
      </tr>
      <tr>
       <td>
        ::ffff:1.2.3.0/120
       </td>
       <td>
        ::ffff:1.2.3.0/120
       </td>
       <td>
        ::ffff:1.2.3/120
       </td>
      </tr>
      <tr>
       <td>
        ::ffff:1.2.3.0/128
       </td>
       <td>
        ::ffff:1.2.3.0/128
       </td>
       <td>
        ::ffff:1.2.3.0/128
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""DATATYPE-INET-VS-CIDR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.9.3.
      <code class=""type"">
       inet
      </code>
      vs.
      <code class=""type"">
       cidr
      </code>
      <a class=""id_link"" href=""#DATATYPE-INET-VS-CIDR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The essential difference between
   <code class=""type"">
    inet
   </code>
   and
   <code class=""type"">
    cidr
   </code>
   data types is that
   <code class=""type"">
    inet
   </code>
   accepts values with nonzero bits to the right of the netmask, whereas
   <code class=""type"">
    cidr
   </code>
   does not. For example,
   <code class=""literal"">
    192.168.0.1/24
   </code>
   is valid for
   <code class=""type"">
    inet
   </code>
   but not for
   <code class=""type"">
    cidr
   </code>
   .
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    If you do not like the output format for
    <code class=""type"">
     inet
    </code>
    or
    <code class=""type"">
     cidr
    </code>
    values, try the functions
    <code class=""function"">
     host
    </code>
    ,
    <code class=""function"">
     text
    </code>
    , and
    <code class=""function"">
     abbrev
    </code>
    .
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""DATATYPE-MACADDR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.9.4.
      <code class=""type"">
       macaddr
      </code>
      <a class=""id_link"" href=""#DATATYPE-MACADDR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.17.9.2"" name=""id-1.5.7.17.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.17.9.3"" name=""id-1.5.7.17.9.3"">
  </a>
  <p>
   The
   <code class=""type"">
    macaddr
   </code>
   type stores MAC addresses, known for example from Ethernet card hardware addresses (although MAC addresses are used for other purposes as well). Input is accepted in the following formats:
  </p>
  <table border=""0"" class=""simplelist"" summary=""Simple list"">
   <tr>
    <td>
     <code class=""literal"">
      '08:00:2b:01:02:03'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08-00-2b-01-02-03'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b:010203'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b-010203'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '0800.2b01.0203'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '0800-2b01-0203'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b010203'
     </code>
    </td>
   </tr>
  </table>
  <p>
   These examples all specify the same address. Upper and lower case is accepted for the digits
   <code class=""literal"">
    a
   </code>
   through
   <code class=""literal"">
    f
   </code>
   . Output is always in the first of the forms shown.
  </p>
  <p>
   IEEE Standard 802-2001 specifies the second form shown (with hyphens) as the canonical form for MAC addresses, and specifies the first form (with colons) as used with bit-reversed, MSB-first notation, so that 08-00-2b-01-02-03 = 10:00:D4:80:40:C0. This convention is widely ignored nowadays, and it is relevant only for obsolete network protocols (such as Token Ring). PostgreSQL makes no provisions for bit reversal; all accepted formats use the canonical LSB order.
  </p>
  <p>
   The remaining five input formats are not part of any standard.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-MACADDR8"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.9.5.
      <code class=""type"">
       macaddr8
      </code>
      <a class=""id_link"" href=""#DATATYPE-MACADDR8"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.17.10.2"" name=""id-1.5.7.17.10.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.17.10.3"" name=""id-1.5.7.17.10.3"">
  </a>
  <p>
   The
   <code class=""type"">
    macaddr8
   </code>
   type stores MAC addresses in EUI-64 format, known for example from Ethernet card hardware addresses (although MAC addresses are used for other purposes as well). This type can accept both 6 and 8 byte length MAC addresses and stores them in 8 byte length format. MAC addresses given in 6 byte format will be stored in 8 byte length format with the 4th and 5th bytes set to FF and FE, respectively. Note that IPv6 uses a modified EUI-64 format where the 7th bit should be set to one after the conversion from EUI-48. The function
   <code class=""function"">
    macaddr8_set7bit
   </code>
   is provided to make this change. Generally speaking, any input which is comprised of pairs of hex digits (on byte boundaries), optionally separated consistently by one of
   <code class=""literal"">
    ':'
   </code>
   ,
   <code class=""literal"">
    '-'
   </code>
   or
   <code class=""literal"">
    '.'
   </code>
   , is accepted. The number of hex digits must be either 16 (8 bytes) or 12 (6 bytes). Leading and trailing whitespace is ignored. The following are examples of input formats that are accepted:
  </p>
  <table border=""0"" class=""simplelist"" summary=""Simple list"">
   <tr>
    <td>
     <code class=""literal"">
      '08:00:2b:01:02:03:04:05'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08-00-2b-01-02-03-04-05'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b:0102030405'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b-0102030405'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '0800.2b01.0203.0405'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '0800-2b01-0203-0405'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b01:02030405'
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      '08002b0102030405'
     </code>
    </td>
   </tr>
  </table>
  <p>
   These examples all specify the same address. Upper and lower case is accepted for the digits
   <code class=""literal"">
    a
   </code>
   through
   <code class=""literal"">
    f
   </code>
   . Output is always in the first of the forms shown.
  </p>
  <p>
   The last six input formats shown above are not part of any standard.
  </p>
  <p>
   To convert a traditional 48 bit MAC address in EUI-48 format to modified EUI-64 format to be included as the host portion of an IPv6 address, use
   <code class=""function"">
    macaddr8_set7bit
   </code>
   as shown:
  </p>
  <pre class=""programlisting"">
SELECT macaddr8_set7bit('08:00:2b:01:02:03');
<code class=""computeroutput"">
    macaddr8_set7bit
-------------------------
 0a:00:2b:ff:fe:01:02:03
(1 row)
</code>
</pre>
 </div>
</div>
"
8. Data Types,8.10. Bit String Types,https://www.postgresql.org/docs/17/datatype-bit.html,"<div class=""sect1"" id=""DATATYPE-BIT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.10. Bit String Types
     <a class=""id_link"" href=""#DATATYPE-BIT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.18.2"" name=""id-1.5.7.18.2"">
 </a>
 <p>
  Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types:
  <code class=""type"">
   bit(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  and
  <code class=""type"">
   bit varying(
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   )
  </code>
  , where
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  is a positive integer.
 </p>
 <p>
  <code class=""type"">
   bit
  </code>
  type data must match the length
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  exactly; it is an error to attempt to store shorter or longer bit strings.
  <code class=""type"">
   bit varying
  </code>
  data is of variable length up to the maximum length
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  ; longer strings will be rejected. Writing
  <code class=""type"">
   bit
  </code>
  without a length is equivalent to
  <code class=""literal"">
   bit(1)
  </code>
  , while
  <code class=""type"">
   bit varying
  </code>
  without a length specification means unlimited length.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   If one explicitly casts a bit-string value to
   <code class=""type"">
    bit(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   , it will be truncated or zero-padded on the right to be exactly
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   bits, without raising an error. Similarly, if one explicitly casts a bit-string value to
   <code class=""type"">
    bit varying(
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    )
   </code>
   , it will be truncated on the right if it is more than
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   bits.
  </p>
 </div>
 <p>
  Refer to
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-BIT-STRINGS"" title=""4.1.2.5. Bit-String Constants"">
   Section 4.1.2.5
  </a>
  for information about the syntax of bit string constants. Bit-logical operators and string manipulation functions are available; see
  <a class=""xref"" href=""functions-bitstring.html"" title=""9.6. Bit String Functions and Operators"">
   Section 9.6
  </a>
  .
 </p>
 <div class=""example"" id=""id-1.5.7.18.7"">
  <p class=""title"">
   <strong>
    Example 8.3. Using the Bit String Types
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""programlisting"">
CREATE TABLE test (a BIT(3), b BIT VARYING(5));
INSERT INTO test VALUES (B'101', B'00');
INSERT INTO test VALUES (B'10', B'101');
<code class=""computeroutput"">
ERROR:  bit string length 2 does not match type bit(3)
</code>
INSERT INTO test VALUES (B'10'::bit(3), B'101');
SELECT * FROM test;
<code class=""computeroutput"">
  a  |  b
-----+-----
 101 | 00
 100 | 101
</code>
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  A bit string value requires 1 byte for each group of 8 bits, plus 5 or 8 bytes overhead depending on the length of the string (but long values may be compressed or moved out-of-line, as explained in
  <a class=""xref"" href=""datatype-character.html"" title=""8.3. Character Types"">
   Section 8.3
  </a>
  for character strings).
 </p>
</div>
"
8. Data Types,8.11. Text Search Types,https://www.postgresql.org/docs/17/datatype-textsearch.html,"<div class=""sect1"" id=""DATATYPE-TEXTSEARCH"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.11. Text Search Types
     <a class=""id_link"" href=""#DATATYPE-TEXTSEARCH"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-textsearch.html#DATATYPE-TSVECTOR"">
      8.11.1.
      <code class=""type"">
       tsvector
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-textsearch.html#DATATYPE-TSQUERY"">
      8.11.2.
      <code class=""type"">
       tsquery
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.19.2"" name=""id-1.5.7.19.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.19.3"" name=""id-1.5.7.19.3"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides two data types that are designed to support full text search, which is the activity of searching through a collection of natural-language
  <em class=""firstterm"">
   documents
  </em>
  to locate those that best match a
  <em class=""firstterm"">
   query
  </em>
  . The
  <code class=""type"">
   tsvector
  </code>
  type represents a document in a form optimized for text search; the
  <code class=""type"">
   tsquery
  </code>
  type similarly represents a text query.
  <a class=""xref"" href=""textsearch.html"" title=""Chapter 12. Full Text Search"">
   Chapter 12
  </a>
  provides a detailed explanation of this facility, and
  <a class=""xref"" href=""functions-textsearch.html"" title=""9.13. Text Search Functions and Operators"">
   Section 9.13
  </a>
  summarizes the related functions and operators.
 </p>
 <div class=""sect2"" id=""DATATYPE-TSVECTOR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.11.1.
      <code class=""type"">
       tsvector
      </code>
      <a class=""id_link"" href=""#DATATYPE-TSVECTOR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.19.5.2"" name=""id-1.5.7.19.5.2"">
  </a>
  <p>
   A
   <code class=""type"">
    tsvector
   </code>
   value is a sorted list of distinct
   <em class=""firstterm"">
    lexemes
   </em>
   , which are words that have been
   <em class=""firstterm"">
    normalized
   </em>
   to merge different variants of the same word (see
   <a class=""xref"" href=""textsearch.html"" title=""Chapter 12. Full Text Search"">
    Chapter 12
   </a>
   for details). Sorting and duplicate-elimination are done automatically during input, as shown in this example:
  </p>
  <pre class=""programlisting"">
SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;
                      tsvector
----------------------------------------------------
 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'
</pre>
  <p>
   To represent lexemes containing whitespace or punctuation, surround them with quotes:
  </p>
  <pre class=""programlisting"">
SELECT $$the lexeme '    ' contains spaces$$::tsvector;
                 tsvector
-------------------------------------------
 '    ' 'contains' 'lexeme' 'spaces' 'the'
</pre>
  <p>
   (We use dollar-quoted string literals in this example and the next one to avoid the confusion of having to double quote marks within the literals.) Embedded quotes and backslashes must be doubled:
  </p>
  <pre class=""programlisting"">
SELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;
                    tsvector
------------------------------------------------
 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'
</pre>
  <p>
   Optionally, integer
   <em class=""firstterm"">
    positions
   </em>
   can be attached to lexemes:
  </p>
  <pre class=""programlisting"">
SELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;
                                  tsvector
-------------------------------------------------------------------​------------
 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4
</pre>
  <p>
   A position normally indicates the source word's location in the document. Positional information can be used for
   <em class=""firstterm"">
    proximity ranking
   </em>
   . Position values can range from 1 to 16383; larger numbers are silently set to 16383. Duplicate positions for the same lexeme are discarded.
  </p>
  <p>
   Lexemes that have positions can further be labeled with a
   <em class=""firstterm"">
    weight
   </em>
   , which can be
   <code class=""literal"">
    A
   </code>
   ,
   <code class=""literal"">
    B
   </code>
   ,
   <code class=""literal"">
    C
   </code>
   , or
   <code class=""literal"">
    D
   </code>
   .
   <code class=""literal"">
    D
   </code>
   is the default and hence is not shown on output:
  </p>
  <pre class=""programlisting"">
SELECT 'a:1A fat:2B,4C cat:5D'::tsvector;
          tsvector
----------------------------
 'a':1A 'cat':5 'fat':2B,4C
</pre>
  <p>
   Weights are typically used to reflect document structure, for example by marking title words differently from body words. Text search ranking functions can assign different priorities to the different weight markers.
  </p>
  <p>
   It is important to understand that the
   <code class=""type"">
    tsvector
   </code>
   type itself does not perform any word normalization; it assumes the words it is given are normalized appropriately for the application. For example,
  </p>
  <pre class=""programlisting"">
SELECT 'The Fat Rats'::tsvector;
      tsvector
--------------------
 'Fat' 'Rats' 'The'
</pre>
  <p>
   For most English-text-searching applications the above words would be considered non-normalized, but
   <code class=""type"">
    tsvector
   </code>
   doesn't care. Raw document text should usually be passed through
   <code class=""function"">
    to_tsvector
   </code>
   to normalize the words appropriately for searching:
  </p>
  <pre class=""programlisting"">
SELECT to_tsvector('english', 'The Fat Rats');
   to_tsvector
-----------------
 'fat':2 'rat':3
</pre>
  <p>
   Again, see
   <a class=""xref"" href=""textsearch.html"" title=""Chapter 12. Full Text Search"">
    Chapter 12
   </a>
   for more detail.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-TSQUERY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.11.2.
      <code class=""type"">
       tsquery
      </code>
      <a class=""id_link"" href=""#DATATYPE-TSQUERY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.19.6.2"" name=""id-1.5.7.19.6.2"">
  </a>
  <p>
   A
   <code class=""type"">
    tsquery
   </code>
   value stores lexemes that are to be searched for, and can combine them using the Boolean operators
   <code class=""literal"">
    &amp;
   </code>
   (AND),
   <code class=""literal"">
    |
   </code>
   (OR), and
   <code class=""literal"">
    !
   </code>
   (NOT), as well as the phrase search operator
   <code class=""literal"">
    &lt;-&gt;
   </code>
   (FOLLOWED BY). There is also a variant
   <code class=""literal"">
    &lt;
    <em class=""replaceable"">
     <code>
      N
     </code>
    </em>
    &gt;
   </code>
   of the FOLLOWED BY operator, where
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is an integer constant that specifies the distance between the two lexemes being searched for.
   <code class=""literal"">
    &lt;-&gt;
   </code>
   is equivalent to
   <code class=""literal"">
    &lt;1&gt;
   </code>
   .
  </p>
  <p>
   Parentheses can be used to enforce grouping of these operators. In the absence of parentheses,
   <code class=""literal"">
    !
   </code>
   (NOT) binds most tightly,
   <code class=""literal"">
    &lt;-&gt;
   </code>
   (FOLLOWED BY) next most tightly, then
   <code class=""literal"">
    &amp;
   </code>
   (AND), with
   <code class=""literal"">
    |
   </code>
   (OR) binding the least tightly.
  </p>
  <p>
   Here are some examples:
  </p>
  <pre class=""programlisting"">
SELECT 'fat &amp; rat'::tsquery;
    tsquery
---------------
 'fat' &amp; 'rat'

SELECT 'fat &amp; (rat | cat)'::tsquery;
          tsquery
---------------------------
 'fat' &amp; ( 'rat' | 'cat' )

SELECT 'fat &amp; rat &amp; ! cat'::tsquery;
        tsquery
------------------------
 'fat' &amp; 'rat' &amp; !'cat'
</pre>
  <p>
   Optionally, lexemes in a
   <code class=""type"">
    tsquery
   </code>
   can be labeled with one or more weight letters, which restricts them to match only
   <code class=""type"">
    tsvector
   </code>
   lexemes with one of those weights:
  </p>
  <pre class=""programlisting"">
SELECT 'fat:ab &amp; cat'::tsquery;
    tsquery
------------------
 'fat':AB &amp; 'cat'
</pre>
  <p>
   Also, lexemes in a
   <code class=""type"">
    tsquery
   </code>
   can be labeled with
   <code class=""literal"">
    *
   </code>
   to specify prefix matching:
  </p>
  <pre class=""programlisting"">
SELECT 'super:*'::tsquery;
  tsquery
-----------
 'super':*
</pre>
  <p>
   This query will match any word in a
   <code class=""type"">
    tsvector
   </code>
   that begins with
   <span class=""quote"">
    “
    <span class=""quote"">
     super
    </span>
    ”
   </span>
   .
  </p>
  <p>
   Quoting rules for lexemes are the same as described previously for lexemes in
   <code class=""type"">
    tsvector
   </code>
   ; and, as with
   <code class=""type"">
    tsvector
   </code>
   , any required normalization of words must be done before converting to the
   <code class=""type"">
    tsquery
   </code>
   type. The
   <code class=""function"">
    to_tsquery
   </code>
   function is convenient for performing such normalization:
  </p>
  <pre class=""programlisting"">
SELECT to_tsquery('Fat:ab &amp; Cats');
    to_tsquery
------------------
 'fat':AB &amp; 'cat'
</pre>
  <p>
   Note that
   <code class=""function"">
    to_tsquery
   </code>
   will process prefixes in the same way as other words, which means this comparison returns true:
  </p>
  <pre class=""programlisting"">
SELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );
 ?column?
----------
 t
</pre>
  <p>
   because
   <code class=""literal"">
    postgres
   </code>
   gets stemmed to
   <code class=""literal"">
    postgr
   </code>
   :
  </p>
  <pre class=""programlisting"">
SELECT to_tsvector( 'postgraduate' ), to_tsquery( 'postgres:*' );
  to_tsvector  | to_tsquery
---------------+------------
 'postgradu':1 | 'postgr':*
</pre>
  <p>
   which will match the stemmed form of
   <code class=""literal"">
    postgraduate
   </code>
   .
  </p>
 </div>
</div>
"
8. Data Types,8.12. UUID Type,https://www.postgresql.org/docs/17/datatype-uuid.html,"<div class=""sect1"" id=""DATATYPE-UUID"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.12.
     <acronym class=""acronym"">
      UUID
     </acronym>
     Type
     <a class=""id_link"" href=""#DATATYPE-UUID"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.20.2"" name=""id-1.5.7.20.2"">
 </a>
 <p>
  The data type
  <code class=""type"">
   uuid
  </code>
  stores Universally Unique Identifiers (UUID) as defined by
  <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc4122"" target=""_top"">
   RFC 4122
  </a>
  , ISO/IEC 9834-8:2005, and related standards. (Some systems refer to this data type as a globally unique identifier, or GUID,
  <a class=""indexterm"" id=""id-1.5.7.20.3.3"" name=""id-1.5.7.20.3.3"">
  </a>
  instead.) This identifier is a 128-bit quantity that is generated by an algorithm chosen to make it very unlikely that the same identifier will be generated by anyone else in the known universe using the same algorithm. Therefore, for distributed systems, these identifiers provide a better uniqueness guarantee than sequence generators, which are only unique within a single database.
 </p>
 <p>
  A UUID is written as a sequence of lower-case hexadecimal digits, in several groups separated by hyphens, specifically a group of 8 digits followed by three groups of 4 digits followed by a group of 12 digits, for a total of 32 digits representing the 128 bits. An example of a UUID in this standard form is:
 </p>
 <pre class=""programlisting"">
a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
</pre>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  also accepts the following alternative forms for input: use of upper-case digits, the standard format surrounded by braces, omitting some or all hyphens, adding a hyphen after any group of four digits. Examples are:
 </p>
 <pre class=""programlisting"">
A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11
{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}
a0eebc999c0b4ef8bb6d6bb9bd380a11
a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11
{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}
</pre>
 <p>
  Output is always in the standard form.
 </p>
 <p>
  See
  <a class=""xref"" href=""functions-uuid.html"" title=""9.14. UUID Functions"">
   Section 9.14
  </a>
  for how to generate a UUID in
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
</div>
"
8. Data Types,8.13. XML Type,https://www.postgresql.org/docs/17/datatype-xml.html,"<div class=""sect1"" id=""DATATYPE-XML"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.13.
     <acronym class=""acronym"">
      XML
     </acronym>
     Type
     <a class=""id_link"" href=""#DATATYPE-XML"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-xml.html#DATATYPE-XML-CREATING"">
      8.13.1. Creating XML Values
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-xml.html#DATATYPE-XML-ENCODING-HANDLING"">
      8.13.2. Encoding Handling
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-xml.html#DATATYPE-XML-ACCESSING-XML-VALUES"">
      8.13.3. Accessing XML Values
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.21.2"" name=""id-1.5.7.21.2"">
 </a>
 <p>
  The
  <code class=""type"">
   xml
  </code>
  data type can be used to store XML data. Its advantage over storing XML data in a
  <code class=""type"">
   text
  </code>
  field is that it checks the input values for well-formedness, and there are support functions to perform type-safe operations on it; see
  <a class=""xref"" href=""functions-xml.html"" title=""9.15. XML Functions"">
   Section 9.15
  </a>
  . Use of this data type requires the installation to have been built with
  <code class=""command"">
   configure --with-libxml
  </code>
  .
 </p>
 <p>
  The
  <code class=""type"">
   xml
  </code>
  type can store well-formed
  <span class=""quote"">
   “
   <span class=""quote"">
    documents
   </span>
   ”
  </span>
  , as defined by the XML standard, as well as
  <span class=""quote"">
   “
   <span class=""quote"">
    content
   </span>
   ”
  </span>
  fragments, which are defined by reference to the more permissive
  <a class=""ulink"" href=""https://www.w3.org/TR/2010/REC-xpath-datamodel-20101214/#DocumentNode"" target=""_top"">
   <span class=""quote"">
    “
    <span class=""quote"">
     document node
    </span>
    ”
   </span>
  </a>
  of the XQuery and XPath data model. Roughly, this means that content fragments can have more than one top-level element or character node. The expression
  <code class=""literal"">
   <em class=""replaceable"">
    <code>
     xmlvalue
    </code>
   </em>
   IS DOCUMENT
  </code>
  can be used to evaluate whether a particular
  <code class=""type"">
   xml
  </code>
  value is a full document or only a content fragment.
 </p>
 <p>
  Limits and compatibility notes for the
  <code class=""type"">
   xml
  </code>
  data type can be found in
  <a class=""xref"" href=""xml-limits-conformance.html"" title=""D.3. XML Limits and Conformance to SQL/XML"">
   Section D.3
  </a>
  .
 </p>
 <div class=""sect2"" id=""DATATYPE-XML-CREATING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.13.1. Creating XML Values
      <a class=""id_link"" href=""#DATATYPE-XML-CREATING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   To produce a value of type
   <code class=""type"">
    xml
   </code>
   from character data, use the function
   <code class=""function"">
    xmlparse
   </code>
   :
   <a class=""indexterm"" id=""id-1.5.7.21.6.2.3"" name=""id-1.5.7.21.6.2.3"">
   </a>
  </p>
  <pre class=""synopsis"">
XMLPARSE ( { DOCUMENT | CONTENT } <em class=""replaceable""><code>value</code></em>)
</pre>
  <p>
   Examples:
  </p>
  <pre class=""programlisting"">
XMLPARSE (DOCUMENT '&lt;?xml version=""1.0""?&gt;&lt;book&gt;&lt;title&gt;Manual&lt;/title&gt;&lt;chapter&gt;...&lt;/chapter&gt;&lt;/book&gt;')
XMLPARSE (CONTENT 'abc&lt;foo&gt;bar&lt;/foo&gt;&lt;bar&gt;foo&lt;/bar&gt;')
</pre>
  <p>
   While this is the only way to convert character strings into XML values according to the SQL standard, the PostgreSQL-specific syntaxes:
  </p>
  <pre class=""programlisting"">
xml '&lt;foo&gt;bar&lt;/foo&gt;'
'&lt;foo&gt;bar&lt;/foo&gt;'::xml
</pre>
  <p>
   can also be used.
  </p>
  <p>
   The
   <code class=""type"">
    xml
   </code>
   type does not validate input values against a document type declaration (DTD),
   <a class=""indexterm"" id=""id-1.5.7.21.6.3.2"" name=""id-1.5.7.21.6.3.2"">
   </a>
   even when the input value specifies a DTD. There is also currently no built-in support for validating against other XML schema languages such as XML Schema.
  </p>
  <p>
   The inverse operation, producing a character string value from
   <code class=""type"">
    xml
   </code>
   , uses the function
   <code class=""function"">
    xmlserialize
   </code>
   :
   <a class=""indexterm"" id=""id-1.5.7.21.6.4.3"" name=""id-1.5.7.21.6.4.3"">
   </a>
  </p>
  <pre class=""synopsis"">
XMLSERIALIZE ( { DOCUMENT | CONTENT } <em class=""replaceable""><code>value</code></em> AS <em class=""replaceable""><code>type</code></em> [ [ NO ] INDENT ] )
</pre>
  <p>
   <em class=""replaceable"">
    <code>
     type
    </code>
   </em>
   can be
   <code class=""type"">
    character
   </code>
   ,
   <code class=""type"">
    character varying
   </code>
   , or
   <code class=""type"">
    text
   </code>
   (or an alias for one of those). Again, according to the SQL standard, this is the only way to convert between type
   <code class=""type"">
    xml
   </code>
   and character types, but PostgreSQL also allows you to simply cast the value.
  </p>
  <p>
   The
   <code class=""literal"">
    INDENT
   </code>
   option causes the result to be pretty-printed, while
   <code class=""literal"">
    NO INDENT
   </code>
   (which is the default) just emits the original input string. Casting to a character type likewise produces the original string.
  </p>
  <p>
   When a character string value is cast to or from type
   <code class=""type"">
    xml
   </code>
   without going through
   <code class=""type"">
    XMLPARSE
   </code>
   or
   <code class=""type"">
    XMLSERIALIZE
   </code>
   , respectively, the choice of
   <code class=""literal"">
    DOCUMENT
   </code>
   versus
   <code class=""literal"">
    CONTENT
   </code>
   is determined by the
   <span class=""quote"">
    “
    <span class=""quote"">
     XML option
    </span>
    ”
   </span>
   <a class=""indexterm"" id=""id-1.5.7.21.6.6.7"" name=""id-1.5.7.21.6.6.7"">
   </a>
   session configuration parameter, which can be set using the standard command:
  </p>
  <pre class=""synopsis"">
SET XML OPTION { DOCUMENT | CONTENT };
</pre>
  <p>
   or the more PostgreSQL-like syntax
  </p>
  <pre class=""synopsis"">
SET xmloption TO { DOCUMENT | CONTENT };
</pre>
  <p>
   The default is
   <code class=""literal"">
    CONTENT
   </code>
   , so all forms of XML data are allowed.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-XML-ENCODING-HANDLING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.13.2. Encoding Handling
      <a class=""id_link"" href=""#DATATYPE-XML-ENCODING-HANDLING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Care must be taken when dealing with multiple character encodings on the client, server, and in the XML data passed through them. When using the text mode to pass queries to the server and query results to the client (which is the normal mode), PostgreSQL converts all character data passed between the client and the server and vice versa to the character encoding of the respective end; see
   <a class=""xref"" href=""multibyte.html"" title=""23.3. Character Set Support"">
    Section 23.3
   </a>
   . This includes string representations of XML values, such as in the above examples. This would ordinarily mean that encoding declarations contained in XML data can become invalid as the character data is converted to other encodings while traveling between client and server, because the embedded encoding declaration is not changed. To cope with this behavior, encoding declarations contained in character strings presented for input to the
   <code class=""type"">
    xml
   </code>
   type are
   <span class=""emphasis"">
    <em>
     ignored
    </em>
   </span>
   , and content is assumed to be in the current server encoding. Consequently, for correct processing, character strings of XML data must be sent from the client in the current client encoding. It is the responsibility of the client to either convert documents to the current client encoding before sending them to the server, or to adjust the client encoding appropriately. On output, values of type
   <code class=""type"">
    xml
   </code>
   will not have an encoding declaration, and clients should assume all data is in the current client encoding.
  </p>
  <p>
   When using binary mode to pass query parameters to the server and query results back to the client, no encoding conversion is performed, so the situation is different. In this case, an encoding declaration in the XML data will be observed, and if it is absent, the data will be assumed to be in UTF-8 (as required by the XML standard; note that PostgreSQL does not support UTF-16). On output, data will have an encoding declaration specifying the client encoding, unless the client encoding is UTF-8, in which case it will be omitted.
  </p>
  <p>
   Needless to say, processing XML data with PostgreSQL will be less error-prone and more efficient if the XML data encoding, client encoding, and server encoding are the same. Since XML data is internally processed in UTF-8, computations will be most efficient if the server encoding is also UTF-8.
  </p>
  <div class=""caution"">
   <h3 class=""title"">
    Caution
   </h3>
   <p>
    Some XML-related functions may not work at all on non-ASCII data when the server encoding is not UTF-8. This is known to be an issue for
    <code class=""function"">
     xmltable()
    </code>
    and
    <code class=""function"">
     xpath()
    </code>
    in particular.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""DATATYPE-XML-ACCESSING-XML-VALUES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.13.3. Accessing XML Values
      <a class=""id_link"" href=""#DATATYPE-XML-ACCESSING-XML-VALUES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <code class=""type"">
    xml
   </code>
   data type is unusual in that it does not provide any comparison operators. This is because there is no well-defined and universally useful comparison algorithm for XML data. One consequence of this is that you cannot retrieve rows by comparing an
   <code class=""type"">
    xml
   </code>
   column against a search value. XML values should therefore typically be accompanied by a separate key field such as an ID. An alternative solution for comparing XML values is to convert them to character strings first, but note that character string comparison has little to do with a useful XML comparison method.
  </p>
  <p>
   Since there are no comparison operators for the
   <code class=""type"">
    xml
   </code>
   data type, it is not possible to create an index directly on a column of this type. If speedy searches in XML data are desired, possible workarounds include casting the expression to a character string type and indexing that, or indexing an XPath expression. Of course, the actual query would have to be adjusted to search by the indexed expression.
  </p>
  <p>
   The text-search functionality in PostgreSQL can also be used to speed up full-document searches of XML data. The necessary preprocessing support is, however, not yet available in the PostgreSQL distribution.
  </p>
 </div>
</div>
"
8. Data Types,8.14. JSON Types,https://www.postgresql.org/docs/17/datatype-json.html,"<div class=""sect1"" id=""DATATYPE-JSON"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.14.
     <acronym class=""acronym"">
      JSON
     </acronym>
     Types
     <a class=""id_link"" href=""#DATATYPE-JSON"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#JSON-KEYS-ELEMENTS"">
      8.14.1. JSON Input and Output Syntax
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#JSON-DOC-DESIGN"">
      8.14.2. Designing JSON Documents
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#JSON-CONTAINMENT"">
      8.14.3.
      <code class=""type"">
       jsonb
      </code>
      Containment and Existence
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#JSON-INDEXING"">
      8.14.4.
      <code class=""type"">
       jsonb
      </code>
      Indexing
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#JSONB-SUBSCRIPTING"">
      8.14.5.
      <code class=""type"">
       jsonb
      </code>
      Subscripting
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#DATATYPE-JSON-TRANSFORMS"">
      8.14.6. Transforms
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""datatype-json.html#DATATYPE-JSONPATH"">
      8.14.7. jsonpath Type
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.22.2"" name=""id-1.5.7.22.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.22.3"" name=""id-1.5.7.22.3"">
 </a>
 <p>
  JSON data types are for storing JSON (JavaScript Object Notation) data, as specified in
  <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc7159"" target=""_top"">
   RFC 7159
  </a>
  . Such data can also be stored as
  <code class=""type"">
   text
  </code>
  , but the JSON data types have the advantage of enforcing that each stored value is valid according to the JSON rules. There are also assorted JSON-specific functions and operators available for data stored in these data types; see
  <a class=""xref"" href=""functions-json.html"" title=""9.16. JSON Functions and Operators"">
   Section 9.16
  </a>
  .
 </p>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  offers two types for storing JSON data:
  <code class=""type"">
   json
  </code>
  and
  <code class=""type"">
   jsonb
  </code>
  . To implement efficient query mechanisms for these data types,
  <span class=""productname"">
   PostgreSQL
  </span>
  also provides the
  <code class=""type"">
   jsonpath
  </code>
  data type described in
  <a class=""xref"" href=""datatype-json.html#DATATYPE-JSONPATH"" title=""8.14.7. jsonpath Type"">
   Section 8.14.7
  </a>
  .
 </p>
 <p>
  The
  <code class=""type"">
   json
  </code>
  and
  <code class=""type"">
   jsonb
  </code>
  data types accept
  <span class=""emphasis"">
   <em>
    almost
   </em>
  </span>
  identical sets of values as input. The major practical difference is one of efficiency. The
  <code class=""type"">
   json
  </code>
  data type stores an exact copy of the input text, which processing functions must reparse on each execution; while
  <code class=""type"">
   jsonb
  </code>
  data is stored in a decomposed binary format that makes it slightly slower to input due to added conversion overhead, but significantly faster to process, since no reparsing is needed.
  <code class=""type"">
   jsonb
  </code>
  also supports indexing, which can be a significant advantage.
 </p>
 <p>
  Because the
  <code class=""type"">
   json
  </code>
  type stores an exact copy of the input text, it will preserve semantically-insignificant white space between tokens, as well as the order of keys within JSON objects. Also, if a JSON object within the value contains the same key more than once, all the key/value pairs are kept. (The processing functions consider the last value as the operative one.) By contrast,
  <code class=""type"">
   jsonb
  </code>
  does not preserve white space, does not preserve the order of object keys, and does not keep duplicate object keys. If duplicate keys are specified in the input, only the last value is kept.
 </p>
 <p>
  In general, most applications should prefer to store JSON data as
  <code class=""type"">
   jsonb
  </code>
  , unless there are quite specialized needs, such as legacy assumptions about ordering of object keys.
 </p>
 <p>
  <acronym class=""acronym"">
   RFC
  </acronym>
  7159 specifies that JSON strings should be encoded in UTF8. It is therefore not possible for the JSON types to conform rigidly to the JSON specification unless the database encoding is UTF8. Attempts to directly include characters that cannot be represented in the database encoding will fail; conversely, characters that can be represented in the database encoding but not in UTF8 will be allowed.
 </p>
 <p>
  <acronym class=""acronym"">
   RFC
  </acronym>
  7159 permits JSON strings to contain Unicode escape sequences denoted by
  <code class=""literal"">
   \u
   <em class=""replaceable"">
    <code>
     XXXX
    </code>
   </em>
  </code>
  . In the input function for the
  <code class=""type"">
   json
  </code>
  type, Unicode escapes are allowed regardless of the database encoding, and are checked only for syntactic correctness (that is, that four hex digits follow
  <code class=""literal"">
   \u
  </code>
  ). However, the input function for
  <code class=""type"">
   jsonb
  </code>
  is stricter: it disallows Unicode escapes for characters that cannot be represented in the database encoding. The
  <code class=""type"">
   jsonb
  </code>
  type also rejects
  <code class=""literal"">
   \u0000
  </code>
  (because that cannot be represented in
  <span class=""productname"">
   PostgreSQL
  </span>
  's
  <code class=""type"">
   text
  </code>
  type), and it insists that any use of Unicode surrogate pairs to designate characters outside the Unicode Basic Multilingual Plane be correct. Valid Unicode escapes are converted to the equivalent single character for storage; this includes folding surrogate pairs into a single character.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Many of the JSON processing functions described in
   <a class=""xref"" href=""functions-json.html"" title=""9.16. JSON Functions and Operators"">
    Section 9.16
   </a>
   will convert Unicode escapes to regular characters, and will therefore throw the same types of errors just described even if their input is of type
   <code class=""type"">
    json
   </code>
   not
   <code class=""type"">
    jsonb
   </code>
   . The fact that the
   <code class=""type"">
    json
   </code>
   input function does not make these checks may be considered a historical artifact, although it does allow for simple storage (without processing) of JSON Unicode escapes in a database encoding that does not support the represented characters.
  </p>
 </div>
 <p>
  When converting textual JSON input into
  <code class=""type"">
   jsonb
  </code>
  , the primitive types described by
  <acronym class=""acronym"">
   RFC
  </acronym>
  7159 are effectively mapped onto native
  <span class=""productname"">
   PostgreSQL
  </span>
  types, as shown in
  <a class=""xref"" href=""datatype-json.html#JSON-TYPE-MAPPING-TABLE"" title=""Table 8.23. JSON Primitive Types and Corresponding PostgreSQL Types"">
   Table 8.23
  </a>
  . Therefore, there are some minor additional constraints on what constitutes valid
  <code class=""type"">
   jsonb
  </code>
  data that do not apply to the
  <code class=""type"">
   json
  </code>
  type, nor to JSON in the abstract, corresponding to limits on what can be represented by the underlying data type. Notably,
  <code class=""type"">
   jsonb
  </code>
  will reject numbers that are outside the range of the
  <span class=""productname"">
   PostgreSQL
  </span>
  <code class=""type"">
   numeric
  </code>
  data type, while
  <code class=""type"">
   json
  </code>
  will not. Such implementation-defined restrictions are permitted by
  <acronym class=""acronym"">
   RFC
  </acronym>
  7159. However, in practice such problems are far more likely to occur in other implementations, as it is common to represent JSON's
  <code class=""type"">
   number
  </code>
  primitive type as IEEE 754 double precision floating point (which
  <acronym class=""acronym"">
   RFC
  </acronym>
  7159 explicitly anticipates and allows for). When using JSON as an interchange format with such systems, the danger of losing numeric precision compared to data originally stored by
  <span class=""productname"">
   PostgreSQL
  </span>
  should be considered.
 </p>
 <p>
  Conversely, as noted in the table there are some minor restrictions on the input format of JSON primitive types that do not apply to the corresponding
  <span class=""productname"">
   PostgreSQL
  </span>
  types.
 </p>
 <div class=""table"" id=""JSON-TYPE-MAPPING-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.23. JSON Primitive Types and Corresponding
    <span class=""productname"">
     PostgreSQL
    </span>
    Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""JSON Primitive Types and Corresponding PostgreSQL Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       JSON primitive type
      </th>
      <th>
       <span class=""productname"">
        PostgreSQL
       </span>
       type
      </th>
      <th>
       Notes
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        string
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       <code class=""literal"">
        \u0000
       </code>
       is disallowed, as are Unicode escapes representing characters not available in the database encoding
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        number
       </code>
      </td>
      <td>
       <code class=""type"">
        numeric
       </code>
      </td>
      <td>
       <code class=""literal"">
        NaN
       </code>
       and
       <code class=""literal"">
        infinity
       </code>
       values are disallowed
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       Only lowercase
       <code class=""literal"">
        true
       </code>
       and
       <code class=""literal"">
        false
       </code>
       spellings are accepted
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        null
       </code>
      </td>
      <td>
       (none)
      </td>
      <td>
       SQL
       <code class=""literal"">
        NULL
       </code>
       is a different concept
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""sect2"" id=""JSON-KEYS-ELEMENTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.1. JSON Input and Output Syntax
      <a class=""id_link"" href=""#JSON-KEYS-ELEMENTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The input/output syntax for the JSON data types is as specified in
   <acronym class=""acronym"">
    RFC
   </acronym>
   7159.
  </p>
  <p>
   The following are all valid
   <code class=""type"">
    json
   </code>
   (or
   <code class=""type"">
    jsonb
   </code>
   ) expressions:
  </p>
  <pre class=""programlisting"">
-- Simple scalar/primitive value
-- Primitive values can be numbers, quoted strings, true, false, or null
SELECT '5'::json;

-- Array of zero or more elements (elements need not be of same type)
SELECT '[1, 2, ""foo"", null]'::json;

-- Object containing pairs of keys and values
-- Note that object keys must always be quoted strings
SELECT '{""bar"": ""baz"", ""balance"": 7.77, ""active"": false}'::json;

-- Arrays and objects can be nested arbitrarily
SELECT '{""foo"": [true, ""bar""], ""tags"": {""a"": 1, ""b"": null}}'::json;
</pre>
  <p>
   As previously stated, when a JSON value is input and then printed without any additional processing,
   <code class=""type"">
    json
   </code>
   outputs the same text that was input, while
   <code class=""type"">
    jsonb
   </code>
   does not preserve semantically-insignificant details such as whitespace. For example, note the differences here:
  </p>
  <pre class=""programlisting"">
SELECT '{""bar"": ""baz"", ""balance"": 7.77, ""active"":false}'::json;
                      json
-------------------------------------------------
 {""bar"": ""baz"", ""balance"": 7.77, ""active"":false}
(1 row)

SELECT '{""bar"": ""baz"", ""balance"": 7.77, ""active"":false}'::jsonb;
                      jsonb
--------------------------------------------------
 {""bar"": ""baz"", ""active"": false, ""balance"": 7.77}
(1 row)
</pre>
  <p>
   One semantically-insignificant detail worth noting is that in
   <code class=""type"">
    jsonb
   </code>
   , numbers will be printed according to the behavior of the underlying
   <code class=""type"">
    numeric
   </code>
   type. In practice this means that numbers entered with
   <code class=""literal"">
    E
   </code>
   notation will be printed without it, for example:
  </p>
  <pre class=""programlisting"">
SELECT '{""reading"": 1.230e-5}'::json, '{""reading"": 1.230e-5}'::jsonb;
         json          |          jsonb
-----------------------+-------------------------
 {""reading"": 1.230e-5} | {""reading"": 0.00001230}
(1 row)
</pre>
  <p>
   However,
   <code class=""type"">
    jsonb
   </code>
   will preserve trailing fractional zeroes, as seen in this example, even though those are semantically insignificant for purposes such as equality checks.
  </p>
  <p>
   For the list of built-in functions and operators available for constructing and processing JSON values, see
   <a class=""xref"" href=""functions-json.html"" title=""9.16. JSON Functions and Operators"">
    Section 9.16
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""JSON-DOC-DESIGN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.2. Designing JSON Documents
      <a class=""id_link"" href=""#JSON-DOC-DESIGN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Representing data as JSON can be considerably more flexible than the traditional relational data model, which is compelling in environments where requirements are fluid. It is quite possible for both approaches to co-exist and complement each other within the same application. However, even for applications where maximal flexibility is desired, it is still recommended that JSON documents have a somewhat fixed structure. The structure is typically unenforced (though enforcing some business rules declaratively is possible), but having a predictable structure makes it easier to write queries that usefully summarize a set of
   <span class=""quote"">
    “
    <span class=""quote"">
     documents
    </span>
    ”
   </span>
   (datums) in a table.
  </p>
  <p>
   JSON data is subject to the same concurrency-control considerations as any other data type when stored in a table. Although storing large documents is practicable, keep in mind that any update acquires a row-level lock on the whole row. Consider limiting JSON documents to a manageable size in order to decrease lock contention among updating transactions. Ideally, JSON documents should each represent an atomic datum that business rules dictate cannot reasonably be further subdivided into smaller datums that could be modified independently.
  </p>
 </div>
 <div class=""sect2"" id=""JSON-CONTAINMENT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.3.
      <code class=""type"">
       jsonb
      </code>
      Containment and Existence
      <a class=""id_link"" href=""#JSON-CONTAINMENT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.22.17.2"" name=""id-1.5.7.22.17.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.7.22.17.3"" name=""id-1.5.7.22.17.3"">
  </a>
  <p>
   Testing
   <em class=""firstterm"">
    containment
   </em>
   is an important capability of
   <code class=""type"">
    jsonb
   </code>
   . There is no parallel set of facilities for the
   <code class=""type"">
    json
   </code>
   type. Containment tests whether one
   <code class=""type"">
    jsonb
   </code>
   document has contained within it another one. These examples return true except as noted:
  </p>
  <pre class=""programlisting"">
-- Simple scalar/primitive values contain only the identical value:
SELECT '""foo""'::jsonb @&gt; '""foo""'::jsonb;

-- The array on the right side is contained within the one on the left:
SELECT '[1, 2, 3]'::jsonb @&gt; '[1, 3]'::jsonb;

-- Order of array elements is not significant, so this is also true:
SELECT '[1, 2, 3]'::jsonb @&gt; '[3, 1]'::jsonb;

-- Duplicate array elements don't matter either:
SELECT '[1, 2, 3]'::jsonb @&gt; '[1, 2, 2]'::jsonb;

-- The object with a single pair on the right side is contained
-- within the object on the left side:
SELECT '{""product"": ""PostgreSQL"", ""version"": 9.4, ""jsonb"": true}'::jsonb @&gt; '{""version"": 9.4}'::jsonb;

-- The array on the right side is <span class=""emphasis""><strong>not</strong></span> considered contained within the
-- array on the left, even though a similar array is nested within it:
SELECT '[1, 2, [1, 3]]'::jsonb @&gt; '[1, 3]'::jsonb;  -- yields false

-- But with a layer of nesting, it is contained:
SELECT '[1, 2, [1, 3]]'::jsonb @&gt; '[[1, 3]]'::jsonb;

-- Similarly, containment is not reported here:
SELECT '{""foo"": {""bar"": ""baz""}}'::jsonb @&gt; '{""bar"": ""baz""}'::jsonb;  -- yields false

-- A top-level key and an empty object is contained:
SELECT '{""foo"": {""bar"": ""baz""}}'::jsonb @&gt; '{""foo"": {}}'::jsonb;
</pre>
  <p>
   The general principle is that the contained object must match the containing object as to structure and data contents, possibly after discarding some non-matching array elements or object key/value pairs from the containing object. But remember that the order of array elements is not significant when doing a containment match, and duplicate array elements are effectively considered only once.
  </p>
  <p>
   As a special exception to the general principle that the structures must match, an array may contain a primitive value:
  </p>
  <pre class=""programlisting"">
-- This array contains the primitive string value:
SELECT '[""foo"", ""bar""]'::jsonb @&gt; '""bar""'::jsonb;

-- This exception is not reciprocal -- non-containment is reported here:
SELECT '""bar""'::jsonb @&gt; '[""bar""]'::jsonb;  -- yields false
</pre>
  <p>
   <code class=""type"">
    jsonb
   </code>
   also has an
   <em class=""firstterm"">
    existence
   </em>
   operator, which is a variation on the theme of containment: it tests whether a string (given as a
   <code class=""type"">
    text
   </code>
   value) appears as an object key or array element at the top level of the
   <code class=""type"">
    jsonb
   </code>
   value. These examples return true except as noted:
  </p>
  <pre class=""programlisting"">
-- String exists as array element:
SELECT '[""foo"", ""bar"", ""baz""]'::jsonb ? 'bar';

-- String exists as object key:
SELECT '{""foo"": ""bar""}'::jsonb ? 'foo';

-- Object values are not considered:
SELECT '{""foo"": ""bar""}'::jsonb ? 'bar';  -- yields false

-- As with containment, existence must match at the top level:
SELECT '{""foo"": {""bar"": ""baz""}}'::jsonb ? 'bar'; -- yields false

-- A string is considered to exist if it matches a primitive JSON string:
SELECT '""foo""'::jsonb ? 'foo';
</pre>
  <p>
   JSON objects are better suited than arrays for testing containment or existence when there are many keys or elements involved, because unlike arrays they are internally optimized for searching, and do not need to be searched linearly.
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Because JSON containment is nested, an appropriate query can skip explicit selection of sub-objects. As an example, suppose that we have a
    <code class=""structfield"">
     doc
    </code>
    column containing objects at the top level, with most objects containing
    <code class=""literal"">
     tags
    </code>
    fields that contain arrays of sub-objects. This query finds entries in which sub-objects containing both
    <code class=""literal"">
     ""term"":""paris""
    </code>
    and
    <code class=""literal"">
     ""term"":""food""
    </code>
    appear, while ignoring any such keys outside the
    <code class=""literal"">
     tags
    </code>
    array:
   </p>
   <pre class=""programlisting"">
SELECT doc-&gt;'site_name' FROM websites
  WHERE doc @&gt; '{""tags"":[{""term"":""paris""}, {""term"":""food""}]}';
</pre>
   <p>
    One could accomplish the same thing with, say,
   </p>
   <pre class=""programlisting"">
SELECT doc-&gt;'site_name' FROM websites
  WHERE doc-&gt;'tags' @&gt; '[{""term"":""paris""}, {""term"":""food""}]';
</pre>
   <p>
    but that approach is less flexible, and often less efficient as well.
   </p>
   <p>
    On the other hand, the JSON existence operator is not nested: it will only look for the specified key or array element at top level of the JSON value.
   </p>
  </div>
  <p>
   The various containment and existence operators, along with all other JSON operators and functions are documented in
   <a class=""xref"" href=""functions-json.html"" title=""9.16. JSON Functions and Operators"">
    Section 9.16
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""JSON-INDEXING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.4.
      <code class=""type"">
       jsonb
      </code>
      Indexing
      <a class=""id_link"" href=""#JSON-INDEXING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.22.18.2"" name=""id-1.5.7.22.18.2"">
  </a>
  <p>
   GIN indexes can be used to efficiently search for keys or key/value pairs occurring within a large number of
   <code class=""type"">
    jsonb
   </code>
   documents (datums). Two GIN
   <span class=""quote"">
    “
    <span class=""quote"">
     operator classes
    </span>
    ”
   </span>
   are provided, offering different performance and flexibility trade-offs.
  </p>
  <p>
   The default GIN operator class for
   <code class=""type"">
    jsonb
   </code>
   supports queries with the key-exists operators
   <code class=""literal"">
    ?
   </code>
   ,
   <code class=""literal"">
    ?|
   </code>
   and
   <code class=""literal"">
    ?&amp;
   </code>
   , the containment operator
   <code class=""literal"">
    @&gt;
   </code>
   , and the
   <code class=""type"">
    jsonpath
   </code>
   match operators
   <code class=""literal"">
    @?
   </code>
   and
   <code class=""literal"">
    @@
   </code>
   . (For details of the semantics that these operators implement, see
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSONB-OP-TABLE"" title=""Table 9.46. Additional jsonb Operators"">
    Table 9.46
   </a>
   .) An example of creating an index with this operator class is:
  </p>
  <pre class=""programlisting"">
CREATE INDEX idxgin ON api USING GIN (jdoc);
</pre>
  <p>
   The non-default GIN operator class
   <code class=""literal"">
    jsonb_path_ops
   </code>
   does not support the key-exists operators, but it does support
   <code class=""literal"">
    @&gt;
   </code>
   ,
   <code class=""literal"">
    @?
   </code>
   and
   <code class=""literal"">
    @@
   </code>
   . An example of creating an index with this operator class is:
  </p>
  <pre class=""programlisting"">
CREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);
</pre>
  <p>
   Consider the example of a table that stores JSON documents retrieved from a third-party web service, with a documented schema definition. A typical document is:
  </p>
  <pre class=""programlisting"">
{
    ""guid"": ""9c36adc1-7fb5-4d5b-83b4-90356a46061a"",
    ""name"": ""Angela Barton"",
    ""is_active"": true,
    ""company"": ""Magnafone"",
    ""address"": ""178 Howard Place, Gulf, Washington, 702"",
    ""registered"": ""2009-11-07T08:53:22 +08:00"",
    ""latitude"": 19.793713,
    ""longitude"": 86.513373,
    ""tags"": [
        ""enim"",
        ""aliquip"",
        ""qui""
    ]
}
</pre>
  <p>
   We store these documents in a table named
   <code class=""structname"">
    api
   </code>
   , in a
   <code class=""type"">
    jsonb
   </code>
   column named
   <code class=""structfield"">
    jdoc
   </code>
   . If a GIN index is created on this column, queries like the following can make use of the index:
  </p>
  <pre class=""programlisting"">
-- Find documents in which the key ""company"" has value ""Magnafone""
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{""company"": ""Magnafone""}';
</pre>
  <p>
   However, the index could not be used for queries like the following, because though the operator
   <code class=""literal"">
    ?
   </code>
   is indexable, it is not applied directly to the indexed column
   <code class=""structfield"">
    jdoc
   </code>
   :
  </p>
  <pre class=""programlisting"">
-- Find documents in which the key ""tags"" contains key or array element ""qui""
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc -&gt; 'tags' ? 'qui';
</pre>
  <p>
   Still, with appropriate use of expression indexes, the above query can use an index. If querying for particular items within the
   <code class=""literal"">
    ""tags""
   </code>
   key is common, defining an index like this may be worthwhile:
  </p>
  <pre class=""programlisting"">
CREATE INDEX idxgintags ON api USING GIN ((jdoc -&gt; 'tags'));
</pre>
  <p>
   Now, the
   <code class=""literal"">
    WHERE
   </code>
   clause
   <code class=""literal"">
    jdoc -&gt; 'tags' ? 'qui'
   </code>
   will be recognized as an application of the indexable operator
   <code class=""literal"">
    ?
   </code>
   to the indexed expression
   <code class=""literal"">
    jdoc -&gt; 'tags'
   </code>
   . (More information on expression indexes can be found in
   <a class=""xref"" href=""indexes-expressional.html"" title=""11.7. Indexes on Expressions"">
    Section 11.7
   </a>
   .)
  </p>
  <p>
   Another approach to querying is to exploit containment, for example:
  </p>
  <pre class=""programlisting"">
-- Find documents in which the key ""tags"" contains array element ""qui""
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @&gt; '{""tags"": [""qui""]}';
</pre>
  <p>
   A simple GIN index on the
   <code class=""structfield"">
    jdoc
   </code>
   column can support this query. But note that such an index will store copies of every key and value in the
   <code class=""structfield"">
    jdoc
   </code>
   column, whereas the expression index of the previous example stores only data found under the
   <code class=""literal"">
    tags
   </code>
   key. While the simple-index approach is far more flexible (since it supports queries about any key), targeted expression indexes are likely to be smaller and faster to search than a simple index.
  </p>
  <p>
   GIN indexes also support the
   <code class=""literal"">
    @?
   </code>
   and
   <code class=""literal"">
    @@
   </code>
   operators, which perform
   <code class=""type"">
    jsonpath
   </code>
   matching. Examples are
  </p>
  <pre class=""programlisting"">
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @? '$.tags[*] ? (@ == ""qui"")';
</pre>
  <pre class=""programlisting"">
SELECT jdoc-&gt;'guid', jdoc-&gt;'name' FROM api WHERE jdoc @@ '$.tags[*] == ""qui""';
</pre>
  <p>
   For these operators, a GIN index extracts clauses of the form
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      accessors_chain
     </code>
    </em>
    ==
    <em class=""replaceable"">
     <code>
      constant
     </code>
    </em>
   </code>
   out of the
   <code class=""type"">
    jsonpath
   </code>
   pattern, and does the index search based on the keys and values mentioned in these clauses. The accessors chain may include
   <code class=""literal"">
    .
    <em class=""replaceable"">
     <code>
      key
     </code>
    </em>
   </code>
   ,
   <code class=""literal"">
    [*]
   </code>
   , and
   <code class=""literal"">
    [
    <em class=""replaceable"">
     <code>
      index
     </code>
    </em>
    ]
   </code>
   accessors. The
   <code class=""literal"">
    jsonb_ops
   </code>
   operator class also supports
   <code class=""literal"">
    .*
   </code>
   and
   <code class=""literal"">
    .**
   </code>
   accessors, but the
   <code class=""literal"">
    jsonb_path_ops
   </code>
   operator class does not.
  </p>
  <p>
   Although the
   <code class=""literal"">
    jsonb_path_ops
   </code>
   operator class supports only queries with the
   <code class=""literal"">
    @&gt;
   </code>
   ,
   <code class=""literal"">
    @?
   </code>
   and
   <code class=""literal"">
    @@
   </code>
   operators, it has notable performance advantages over the default operator class
   <code class=""literal"">
    jsonb_ops
   </code>
   . A
   <code class=""literal"">
    jsonb_path_ops
   </code>
   index is usually much smaller than a
   <code class=""literal"">
    jsonb_ops
   </code>
   index over the same data, and the specificity of searches is better, particularly when queries contain keys that appear frequently in the data. Therefore search operations typically perform better than with the default operator class.
  </p>
  <p>
   The technical difference between a
   <code class=""literal"">
    jsonb_ops
   </code>
   and a
   <code class=""literal"">
    jsonb_path_ops
   </code>
   GIN index is that the former creates independent index items for each key and value in the data, while the latter creates index items only for each value in the data.
   <a class=""footnote"" href=""#ftn.id-1.5.7.22.18.9.3"">
    <sup class=""footnote"" id=""id-1.5.7.22.18.9.3"">
     [7]
    </sup>
   </a>
   Basically, each
   <code class=""literal"">
    jsonb_path_ops
   </code>
   index item is a hash of the value and the key(s) leading to it; for example to index
   <code class=""literal"">
    {""foo"": {""bar"": ""baz""}}
   </code>
   , a single index item would be created incorporating all three of
   <code class=""literal"">
    foo
   </code>
   ,
   <code class=""literal"">
    bar
   </code>
   , and
   <code class=""literal"">
    baz
   </code>
   into the hash value. Thus a containment query looking for this structure would result in an extremely specific index search; but there is no way at all to find out whether
   <code class=""literal"">
    foo
   </code>
   appears as a key. On the other hand, a
   <code class=""literal"">
    jsonb_ops
   </code>
   index would create three index items representing
   <code class=""literal"">
    foo
   </code>
   ,
   <code class=""literal"">
    bar
   </code>
   , and
   <code class=""literal"">
    baz
   </code>
   separately; then to do the containment query, it would look for rows containing all three of these items. While GIN indexes can perform such an AND search fairly efficiently, it will still be less specific and slower than the equivalent
   <code class=""literal"">
    jsonb_path_ops
   </code>
   search, especially if there are a very large number of rows containing any single one of the three index items.
  </p>
  <p>
   A disadvantage of the
   <code class=""literal"">
    jsonb_path_ops
   </code>
   approach is that it produces no index entries for JSON structures not containing any values, such as
   <code class=""literal"">
    {""a"": {}}
   </code>
   . If a search for documents containing such a structure is requested, it will require a full-index scan, which is quite slow.
   <code class=""literal"">
    jsonb_path_ops
   </code>
   is therefore ill-suited for applications that often perform such searches.
  </p>
  <p>
   <code class=""type"">
    jsonb
   </code>
   also supports
   <code class=""literal"">
    btree
   </code>
   and
   <code class=""literal"">
    hash
   </code>
   indexes. These are usually useful only if it's important to check equality of complete JSON documents. The
   <code class=""literal"">
    btree
   </code>
   ordering for
   <code class=""type"">
    jsonb
   </code>
   datums is seldom of great interest, but for completeness it is:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>Object</code></em> &gt; <em class=""replaceable""><code>Array</code></em> &gt; <em class=""replaceable""><code>Boolean</code></em> &gt; <em class=""replaceable""><code>Number</code></em> &gt; <em class=""replaceable""><code>String</code></em> &gt; <em class=""replaceable""><code>null</code></em>

<em class=""replaceable""><code>Object with n pairs</code></em> &gt; <em class=""replaceable""><code>object with n - 1 pairs</code></em>

<em class=""replaceable""><code>Array with n elements</code></em> &gt; <em class=""replaceable""><code>array with n - 1 elements</code></em>
</pre>
  <p>
   with the exception that (for historical reasons) an empty top level array sorts less than
   <em class=""replaceable"">
    <code>
     null
    </code>
   </em>
   . Objects with equal numbers of pairs are compared in the order:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>key-1</code></em>, <em class=""replaceable""><code>value-1</code></em>, <em class=""replaceable""><code>key-2</code></em> ...
</pre>
  <p>
   Note that object keys are compared in their storage order; in particular, since shorter keys are stored before longer keys, this can lead to results that might be unintuitive, such as:
  </p>
  <pre class=""programlisting"">
{ ""aa"": 1, ""c"": 1} &gt; {""b"": 1, ""d"": 1}
</pre>
  <p>
   Similarly, arrays with equal numbers of elements are compared in the order:
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>element-1</code></em>, <em class=""replaceable""><code>element-2</code></em> ...
</pre>
  <p>
   Primitive JSON values are compared using the same comparison rules as for the underlying
   <span class=""productname"">
    PostgreSQL
   </span>
   data type. Strings are compared using the default database collation.
  </p>
 </div>
 <div class=""sect2"" id=""JSONB-SUBSCRIPTING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.5.
      <code class=""type"">
       jsonb
      </code>
      Subscripting
      <a class=""id_link"" href=""#JSONB-SUBSCRIPTING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <code class=""type"">
    jsonb
   </code>
   data type supports array-style subscripting expressions to extract and modify elements. Nested values can be indicated by chaining subscripting expressions, following the same rules as the
   <code class=""literal"">
    path
   </code>
   argument in the
   <code class=""literal"">
    jsonb_set
   </code>
   function. If a
   <code class=""type"">
    jsonb
   </code>
   value is an array, numeric subscripts start at zero, and negative integers count backwards from the last element of the array. Slice expressions are not supported. The result of a subscripting expression is always of the jsonb data type.
  </p>
  <p>
   <code class=""command"">
    UPDATE
   </code>
   statements may use subscripting in the
   <code class=""literal"">
    SET
   </code>
   clause to modify
   <code class=""type"">
    jsonb
   </code>
   values. Subscript paths must be traversable for all affected values insofar as they exist. For instance, the path
   <code class=""literal"">
    val['a']['b']['c']
   </code>
   can be traversed all the way to
   <code class=""literal"">
    c
   </code>
   if every
   <code class=""literal"">
    val
   </code>
   ,
   <code class=""literal"">
    val['a']
   </code>
   , and
   <code class=""literal"">
    val['a']['b']
   </code>
   is an object. If any
   <code class=""literal"">
    val['a']
   </code>
   or
   <code class=""literal"">
    val['a']['b']
   </code>
   is not defined, it will be created as an empty object and filled as necessary. However, if any
   <code class=""literal"">
    val
   </code>
   itself or one of the intermediary values is defined as a non-object such as a string, number, or
   <code class=""literal"">
    jsonb
   </code>
   <code class=""literal"">
    null
   </code>
   , traversal cannot proceed so an error is raised and the transaction aborted.
  </p>
  <p>
   An example of subscripting syntax:
  </p>
  <pre class=""programlisting"">

-- Extract object value by key
SELECT ('{""a"": 1}'::jsonb)['a'];

-- Extract nested object value by key path
SELECT ('{""a"": {""b"": {""c"": 1}}}'::jsonb)['a']['b']['c'];

-- Extract array element by index
SELECT ('[1, ""2"", null]'::jsonb)[1];

-- Update object value by key. Note the quotes around '1': the assigned
-- value must be of the jsonb type as well
UPDATE table_name SET jsonb_field['key'] = '1';

-- This will raise an error if any record's jsonb_field['a']['b'] is something
-- other than an object. For example, the value {""a"": 1} has a numeric value
-- of the key 'a'.
UPDATE table_name SET jsonb_field['a']['b']['c'] = '1';

-- Filter records using a WHERE clause with subscripting. Since the result of
-- subscripting is jsonb, the value we compare it against must also be jsonb.
-- The double quotes make ""value"" also a valid jsonb string.
SELECT * FROM table_name WHERE jsonb_field['key'] = '""value""';
</pre>
  <p>
   <code class=""type"">
    jsonb
   </code>
   assignment via subscripting handles a few edge cases differently from
   <code class=""literal"">
    jsonb_set
   </code>
   . When a source
   <code class=""type"">
    jsonb
   </code>
   value is
   <code class=""literal"">
    NULL
   </code>
   , assignment via subscripting will proceed as if it was an empty JSON value of the type (object or array) implied by the subscript key:
  </p>
  <pre class=""programlisting"">
-- Where jsonb_field was NULL, it is now {""a"": 1}
UPDATE table_name SET jsonb_field['a'] = '1';

-- Where jsonb_field was NULL, it is now [1]
UPDATE table_name SET jsonb_field[0] = '1';
</pre>
  <p>
   If an index is specified for an array containing too few elements,
   <code class=""literal"">
    NULL
   </code>
   elements will be appended until the index is reachable and the value can be set.
  </p>
  <pre class=""programlisting"">
-- Where jsonb_field was [], it is now [null, null, 2];
-- where jsonb_field was [0], it is now [0, null, 2]
UPDATE table_name SET jsonb_field[2] = '2';
</pre>
  <p>
   A
   <code class=""type"">
    jsonb
   </code>
   value will accept assignments to nonexistent subscript paths as long as the last existing element to be traversed is an object or array, as implied by the corresponding subscript (the element indicated by the last subscript in the path is not traversed and may be anything). Nested array and object structures will be created, and in the former case
   <code class=""literal"">
    null
   </code>
   -padded, as specified by the subscript path until the assigned value can be placed.
  </p>
  <pre class=""programlisting"">
-- Where jsonb_field was {}, it is now {""a"": [{""b"": 1}]}
UPDATE table_name SET jsonb_field['a'][0]['b'] = '1';

-- Where jsonb_field was [], it is now [null, {""a"": 1}]
UPDATE table_name SET jsonb_field[1]['a'] = '1';
</pre>
 </div>
 <div class=""sect2"" id=""DATATYPE-JSON-TRANSFORMS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.6. Transforms
      <a class=""id_link"" href=""#DATATYPE-JSON-TRANSFORMS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Additional extensions are available that implement transforms for the
   <code class=""type"">
    jsonb
   </code>
   type for different procedural languages.
  </p>
  <p>
   The extensions for PL/Perl are called
   <code class=""literal"">
    jsonb_plperl
   </code>
   and
   <code class=""literal"">
    jsonb_plperlu
   </code>
   . If you use them,
   <code class=""type"">
    jsonb
   </code>
   values are mapped to Perl arrays, hashes, and scalars, as appropriate.
  </p>
  <p>
   The extension for PL/Python is called
   <code class=""literal"">
    jsonb_plpython3u
   </code>
   . If you use it,
   <code class=""type"">
    jsonb
   </code>
   values are mapped to Python dictionaries, lists, and scalars, as appropriate.
  </p>
  <p>
   Of these extensions,
   <code class=""literal"">
    jsonb_plperl
   </code>
   is considered
   <span class=""quote"">
    “
    <span class=""quote"">
     trusted
    </span>
    ”
   </span>
   , that is, it can be installed by non-superusers who have
   <code class=""literal"">
    CREATE
   </code>
   privilege on the current database. The rest require superuser privilege to install.
  </p>
 </div>
 <div class=""sect2"" id=""DATATYPE-JSONPATH"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.14.7. jsonpath Type
      <a class=""id_link"" href=""#DATATYPE-JSONPATH"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.22.21.2"" name=""id-1.5.7.22.21.2"">
  </a>
  <p>
   The
   <code class=""type"">
    jsonpath
   </code>
   type implements support for the SQL/JSON path language in
   <span class=""productname"">
    PostgreSQL
   </span>
   to efficiently query JSON data. It provides a binary representation of the parsed SQL/JSON path expression that specifies the items to be retrieved by the path engine from the JSON data for further processing with the SQL/JSON query functions.
  </p>
  <p>
   The semantics of SQL/JSON path predicates and operators generally follow SQL. At the same time, to provide a natural way of working with JSON data, SQL/JSON path syntax uses some JavaScript conventions:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Dot (
      <code class=""literal"">
       .
      </code>
      ) is used for member access.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Square brackets (
      <code class=""literal"">
       []
      </code>
      ) are used for array access.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      SQL/JSON arrays are 0-relative, unlike regular SQL arrays that start from 1.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Numeric literals in SQL/JSON path expressions follow JavaScript rules, which are different from both SQL and JSON in some minor details. For example, SQL/JSON path allows
   <code class=""literal"">
    .1
   </code>
   and
   <code class=""literal"">
    1.
   </code>
   , which are invalid in JSON. Non-decimal integer literals and underscore separators are supported, for example,
   <code class=""literal"">
    1_000_000
   </code>
   ,
   <code class=""literal"">
    0x1EEE_FFFF
   </code>
   ,
   <code class=""literal"">
    0o273
   </code>
   ,
   <code class=""literal"">
    0b100101
   </code>
   . In SQL/JSON path (and in JavaScript, but not in SQL proper), there must not be an underscore separator directly after the radix prefix.
  </p>
  <p>
   An SQL/JSON path expression is typically written in an SQL query as an SQL character string literal, so it must be enclosed in single quotes, and any single quotes desired within the value must be doubled (see
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
    Section 4.1.2.1
   </a>
   ). Some forms of path expressions require string literals within them. These embedded string literals follow JavaScript/ECMAScript conventions: they must be surrounded by double quotes, and backslash escapes may be used within them to represent otherwise-hard-to-type characters. In particular, the way to write a double quote within an embedded string literal is
   <code class=""literal"">
    \""
   </code>
   , and to write a backslash itself, you must write
   <code class=""literal"">
    \\
   </code>
   . Other special backslash sequences include those recognized in JavaScript strings:
   <code class=""literal"">
    \b
   </code>
   ,
   <code class=""literal"">
    \f
   </code>
   ,
   <code class=""literal"">
    \n
   </code>
   ,
   <code class=""literal"">
    \r
   </code>
   ,
   <code class=""literal"">
    \t
   </code>
   ,
   <code class=""literal"">
    \v
   </code>
   for various ASCII control characters,
   <code class=""literal"">
    \x
    <em class=""replaceable"">
     <code>
      NN
     </code>
    </em>
   </code>
   for a character code written with only two hex digits,
   <code class=""literal"">
    \u
    <em class=""replaceable"">
     <code>
      NNNN
     </code>
    </em>
   </code>
   for a Unicode character identified by its 4-hex-digit code point, and
   <code class=""literal"">
    \u{
    <em class=""replaceable"">
     <code>
      N...
     </code>
    </em>
    }
   </code>
   for a Unicode character code point written with 1 to 6 hex digits.
  </p>
  <p>
   A path expression consists of a sequence of path elements, which can be any of the following:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Path literals of JSON primitive types: Unicode text, numeric, true, false, or null.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Path variables listed in
      <a class=""xref"" href=""datatype-json.html#TYPE-JSONPATH-VARIABLES"" title=""Table 8.24. jsonpath Variables"">
       Table 8.24
      </a>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Accessor operators listed in
      <a class=""xref"" href=""datatype-json.html#TYPE-JSONPATH-ACCESSORS"" title=""Table 8.25. jsonpath Accessors"">
       Table 8.25
      </a>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       jsonpath
      </code>
      operators and methods listed in
      <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-PATH-OPERATORS"" title=""9.16.2.3. SQL/JSON Path Operators and Methods"">
       Section 9.16.2.3
      </a>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Parentheses, which can be used to provide filter expressions or define the order of path evaluation.
     </p>
    </li>
   </ul>
  </div>
  <p>
   For details on using
   <code class=""type"">
    jsonpath
   </code>
   expressions with SQL/JSON query functions, see
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-PATH"" title=""9.16.2. The SQL/JSON Path Language"">
    Section 9.16.2
   </a>
   .
  </p>
  <div class=""table"" id=""TYPE-JSONPATH-VARIABLES"">
   <p class=""title"">
    <strong>
     Table 8.24.
     <code class=""type"">
      jsonpath
     </code>
     Variables
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""jsonpath Variables"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Variable
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         $
        </code>
       </td>
       <td>
        A variable representing the JSON value being queried (the
        <em class=""firstterm"">
         context item
        </em>
        ).
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         $varname
        </code>
       </td>
       <td>
        A named variable. Its value can be set by the parameter
        <em class=""parameter"">
         <code>
          vars
         </code>
        </em>
        of several JSON processing functions; see
        <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE"" title=""Table 9.49. JSON Processing Functions"">
         Table 9.49
        </a>
        for details.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         @
        </code>
       </td>
       <td>
        A variable representing the result of path evaluation in filter expressions.
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""TYPE-JSONPATH-ACCESSORS"">
   <p class=""title"">
    <strong>
     Table 8.25.
     <code class=""type"">
      jsonpath
     </code>
     Accessors
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""jsonpath Accessors"">
     <colgroup>
      <col class=""col1""/>
      <col class=""col2""/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Accessor Operator
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          .
          <em class=""replaceable"">
           <code>
            key
           </code>
          </em>
         </code>
        </p>
        <p>
         <code class=""literal"">
          .""$
          <em class=""replaceable"">
           <code>
            varname
           </code>
          </em>
          ""
         </code>
        </p>
       </td>
       <td>
        <p>
         Member accessor that returns an object member with the specified key. If the key name matches some named variable starting with
         <code class=""literal"">
          $
         </code>
         or does not meet the JavaScript rules for an identifier, it must be enclosed in double quotes to make it a string literal.
        </p>
       </td>
      </tr>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          .*
         </code>
        </p>
       </td>
       <td>
        <p>
         Wildcard member accessor that returns the values of all members located at the top level of the current object.
        </p>
       </td>
      </tr>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          .**
         </code>
        </p>
       </td>
       <td>
        <p>
         Recursive wildcard member accessor that processes all levels of the JSON hierarchy of the current object and returns all the member values, regardless of their nesting level. This is a
         <span class=""productname"">
          PostgreSQL
         </span>
         extension of the SQL/JSON standard.
        </p>
       </td>
      </tr>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          .**{
          <em class=""replaceable"">
           <code>
            level
           </code>
          </em>
          }
         </code>
        </p>
        <p>
         <code class=""literal"">
          .**{
          <em class=""replaceable"">
           <code>
            start_level
           </code>
          </em>
          to
          <em class=""replaceable"">
           <code>
            end_level
           </code>
          </em>
          }
         </code>
        </p>
       </td>
       <td>
        <p>
         Like
         <code class=""literal"">
          .**
         </code>
         , but selects only the specified levels of the JSON hierarchy. Nesting levels are specified as integers. Level zero corresponds to the current object. To access the lowest nesting level, you can use the
         <code class=""literal"">
          last
         </code>
         keyword. This is a
         <span class=""productname"">
          PostgreSQL
         </span>
         extension of the SQL/JSON standard.
        </p>
       </td>
      </tr>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          [
          <em class=""replaceable"">
           <code>
            subscript
           </code>
          </em>
          , ...]
         </code>
        </p>
       </td>
       <td>
        <p>
         Array element accessor.
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            subscript
           </code>
          </em>
         </code>
         can be given in two forms:
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            index
           </code>
          </em>
         </code>
         or
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            start_index
           </code>
          </em>
          to
          <em class=""replaceable"">
           <code>
            end_index
           </code>
          </em>
         </code>
         . The first form returns a single array element by its index. The second form returns an array slice by the range of indexes, including the elements that correspond to the provided
         <em class=""replaceable"">
          <code>
           start_index
          </code>
         </em>
         and
         <em class=""replaceable"">
          <code>
           end_index
          </code>
         </em>
         .
        </p>
        <p>
         The specified
         <em class=""replaceable"">
          <code>
           index
          </code>
         </em>
         can be an integer, as well as an expression returning a single numeric value, which is automatically cast to integer. Index zero corresponds to the first array element. You can also use the
         <code class=""literal"">
          last
         </code>
         keyword to denote the last array element, which is useful for handling arrays of unknown length.
        </p>
       </td>
      </tr>
      <tr>
       <td>
        <p>
         <code class=""literal"">
          [*]
         </code>
        </p>
       </td>
       <td>
        <p>
         Wildcard array element accessor that returns all array elements.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.id-1.5.7.22.18.9.3"">
   <p>
    <a class=""para"" href=""#id-1.5.7.22.18.9.3"">
     <sup class=""para"">
      [7]
     </sup>
    </a>
    For this purpose, the term
    <span class=""quote"">
     “
     <span class=""quote"">
      value
     </span>
     ”
    </span>
    includes array elements, though JSON terminology sometimes considers array elements distinct from values within objects.
   </p>
  </div>
 </div>
</div>
"
8. Data Types,8.15. Arrays,https://www.postgresql.org/docs/17/arrays.html,"<div class=""sect1"" id=""ARRAYS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.15. Arrays
     <a class=""id_link"" href=""#ARRAYS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-DECLARATION"">
      8.15.1. Declaration of Array Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-INPUT"">
      8.15.2. Array Value Input
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-ACCESSING"">
      8.15.3. Accessing Arrays
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-MODIFYING"">
      8.15.4. Modifying Arrays
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-SEARCHING"">
      8.15.5. Searching in Arrays
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""arrays.html#ARRAYS-IO"">
      8.15.6. Array Input and Output Syntax
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.23.2"" name=""id-1.5.7.23.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  allows columns of a table to be defined as variable-length multidimensional arrays. Arrays of any built-in or user-defined base type, enum type, composite type, range type, or domain can be created.
 </p>
 <div class=""sect2"" id=""ARRAYS-DECLARATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.1. Declaration of Array Types
      <a class=""id_link"" href=""#ARRAYS-DECLARATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.4.2"" name=""id-1.5.7.23.4.2"">
  </a>
  <p>
   To illustrate the use of array types, we create this table:
  </p>
  <pre class=""programlisting"">
CREATE TABLE sal_emp (
    name            text,
    pay_by_quarter  integer[],
    schedule        text[][]
);
</pre>
  <p>
   As shown, an array data type is named by appending square brackets (
   <code class=""literal"">
    []
   </code>
   ) to the data type name of the array elements. The above command will create a table named
   <code class=""structname"">
    sal_emp
   </code>
   with a column of type
   <code class=""type"">
    text
   </code>
   (
   <code class=""structfield"">
    name
   </code>
   ), a one-dimensional array of type
   <code class=""type"">
    integer
   </code>
   (
   <code class=""structfield"">
    pay_by_quarter
   </code>
   ), which represents the employee's salary by quarter, and a two-dimensional array of
   <code class=""type"">
    text
   </code>
   (
   <code class=""structfield"">
    schedule
   </code>
   ), which represents the employee's weekly schedule.
  </p>
  <p>
   The syntax for
   <code class=""command"">
    CREATE TABLE
   </code>
   allows the exact size of arrays to be specified, for example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE tictactoe (
    squares   integer[3][3]
);
</pre>
  <p>
   However, the current implementation ignores any supplied array size limits, i.e., the behavior is the same as for arrays of unspecified length.
  </p>
  <p>
   The current implementation does not enforce the declared number of dimensions either. Arrays of a particular element type are all considered to be of the same type, regardless of size or number of dimensions. So, declaring the array size or number of dimensions in
   <code class=""command"">
    CREATE TABLE
   </code>
   is simply documentation; it does not affect run-time behavior.
  </p>
  <p>
   An alternative syntax, which conforms to the SQL standard by using the keyword
   <code class=""literal"">
    ARRAY
   </code>
   , can be used for one-dimensional arrays.
   <code class=""structfield"">
    pay_by_quarter
   </code>
   could have been defined as:
  </p>
  <pre class=""programlisting"">
    pay_by_quarter  integer ARRAY[4],
</pre>
  <p>
   Or, if no array size is to be specified:
  </p>
  <pre class=""programlisting"">
    pay_by_quarter  integer ARRAY,
</pre>
  <p>
   As before, however,
   <span class=""productname"">
    PostgreSQL
   </span>
   does not enforce the size restriction in any case.
  </p>
 </div>
 <div class=""sect2"" id=""ARRAYS-INPUT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.2. Array Value Input
      <a class=""id_link"" href=""#ARRAYS-INPUT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.5.2"" name=""id-1.5.7.23.5.2"">
  </a>
  <p>
   To write an array value as a literal constant, enclose the element values within curly braces and separate them by commas. (If you know C, this is not unlike the C syntax for initializing structures.) You can put double quotes around any element value, and must do so if it contains commas or curly braces. (More details appear below.) Thus, the general format of an array constant is the following:
  </p>
  <pre class=""synopsis"">
'{ <em class=""replaceable""><code>val1</code></em> <em class=""replaceable""><code>delim</code></em> <em class=""replaceable""><code>val2</code></em> <em class=""replaceable""><code>delim</code></em> ... }'
</pre>
  <p>
   where
   <em class=""replaceable"">
    <code>
     delim
    </code>
   </em>
   is the delimiter character for the type, as recorded in its
   <code class=""literal"">
    pg_type
   </code>
   entry. Among the standard data types provided in the
   <span class=""productname"">
    PostgreSQL
   </span>
   distribution, all use a comma (
   <code class=""literal"">
    ,
   </code>
   ), except for type
   <code class=""type"">
    box
   </code>
   which uses a semicolon (
   <code class=""literal"">
    ;
   </code>
   ). Each
   <em class=""replaceable"">
    <code>
     val
    </code>
   </em>
   is either a constant of the array element type, or a subarray. An example of an array constant is:
  </p>
  <pre class=""programlisting"">
'{{1,2,3},{4,5,6},{7,8,9}}'
</pre>
  <p>
   This constant is a two-dimensional, 3-by-3 array consisting of three subarrays of integers.
  </p>
  <p>
   To set an element of an array constant to NULL, write
   <code class=""literal"">
    NULL
   </code>
   for the element value. (Any upper- or lower-case variant of
   <code class=""literal"">
    NULL
   </code>
   will do.) If you want an actual string value
   <span class=""quote"">
    “
    <span class=""quote"">
     NULL
    </span>
    ”
   </span>
   , you must put double quotes around it.
  </p>
  <p>
   (These kinds of array constants are actually only a special case of the generic type constants discussed in
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-GENERIC"" title=""4.1.2.7. Constants of Other Types"">
    Section 4.1.2.7
   </a>
   . The constant is initially treated as a string and passed to the array input conversion routine. An explicit type specification might be necessary.)
  </p>
  <p>
   Now we can show some
   <code class=""command"">
    INSERT
   </code>
   statements:
  </p>
  <pre class=""programlisting"">
INSERT INTO sal_emp
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{""meeting"", ""lunch""}, {""training"", ""presentation""}}');

INSERT INTO sal_emp
    VALUES ('Carol',
    '{20000, 25000, 25000, 25000}',
    '{{""breakfast"", ""consulting""}, {""meeting"", ""lunch""}}');
</pre>
  <p>
   The result of the previous two inserts looks like this:
  </p>
  <pre class=""programlisting"">
SELECT * FROM sal_emp;
 name  |      pay_by_quarter       |                 schedule
-------+---------------------------+-------------------------------------------
 Bill  | {10000,10000,10000,10000} | {{meeting,lunch},{training,presentation}}
 Carol | {20000,25000,25000,25000} | {{breakfast,consulting},{meeting,lunch}}
(2 rows)
</pre>
  <p>
   Multidimensional arrays must have matching extents for each dimension. A mismatch causes an error, for example:
  </p>
  <pre class=""programlisting"">
INSERT INTO sal_emp
    VALUES ('Bill',
    '{10000, 10000, 10000, 10000}',
    '{{""meeting"", ""lunch""}, {""meeting""}}');
ERROR:  malformed array literal: ""{{""meeting"", ""lunch""}, {""meeting""}}""
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.
</pre>
  <p>
   The
   <code class=""literal"">
    ARRAY
   </code>
   constructor syntax can also be used:
  </p>
  <pre class=""programlisting"">
INSERT INTO sal_emp
    VALUES ('Bill',
    ARRAY[10000, 10000, 10000, 10000],
    ARRAY[['meeting', 'lunch'], ['training', 'presentation']]);

INSERT INTO sal_emp
    VALUES ('Carol',
    ARRAY[20000, 25000, 25000, 25000],
    ARRAY[['breakfast', 'consulting'], ['meeting', 'lunch']]);
</pre>
  <p>
   Notice that the array elements are ordinary SQL constants or expressions; for instance, string literals are single quoted, instead of double quoted as they would be in an array literal. The
   <code class=""literal"">
    ARRAY
   </code>
   constructor syntax is discussed in more detail in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ARRAY-CONSTRUCTORS"" title=""4.2.12. Array Constructors"">
    Section 4.2.12
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""ARRAYS-ACCESSING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.3. Accessing Arrays
      <a class=""id_link"" href=""#ARRAYS-ACCESSING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.6.2"" name=""id-1.5.7.23.6.2"">
  </a>
  <p>
   Now, we can run some queries on the table. First, we show how to access a single element of an array. This query retrieves the names of the employees whose pay changed in the second quarter:
  </p>
  <pre class=""programlisting"">
SELECT name FROM sal_emp WHERE pay_by_quarter[1] &lt;&gt; pay_by_quarter[2];

 name
-------
 Carol
(1 row)
</pre>
  <p>
   The array subscript numbers are written within square brackets. By default
   <span class=""productname"">
    PostgreSQL
   </span>
   uses a one-based numbering convention for arrays, that is, an array of
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   elements starts with
   <code class=""literal"">
    array[1]
   </code>
   and ends with
   <code class=""literal"">
    array[
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    ]
   </code>
   .
  </p>
  <p>
   This query retrieves the third quarter pay of all employees:
  </p>
  <pre class=""programlisting"">
SELECT pay_by_quarter[3] FROM sal_emp;

 pay_by_quarter
----------------
          10000
          25000
(2 rows)
</pre>
  <p>
   We can also access arbitrary rectangular slices of an array, or subarrays. An array slice is denoted by writing
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      lower-bound
     </code>
    </em>
    :
    <em class=""replaceable"">
     <code>
      upper-bound
     </code>
    </em>
   </code>
   for one or more array dimensions. For example, this query retrieves the first item on Bill's schedule for the first two days of the week:
  </p>
  <pre class=""programlisting"">
SELECT schedule[1:2][1:1] FROM sal_emp WHERE name = 'Bill';

        schedule
------------------------
 {{meeting},{training}}
(1 row)
</pre>
  <p>
   If any dimension is written as a slice, i.e., contains a colon, then all dimensions are treated as slices. Any dimension that has only a single number (no colon) is treated as being from 1 to the number specified. For example,
   <code class=""literal"">
    [2]
   </code>
   is treated as
   <code class=""literal"">
    [1:2]
   </code>
   , as in this example:
  </p>
  <pre class=""programlisting"">
SELECT schedule[1:2][2] FROM sal_emp WHERE name = 'Bill';

                 schedule
-------------------------------------------
 {{meeting,lunch},{training,presentation}}
(1 row)
</pre>
  <p>
   To avoid confusion with the non-slice case, it's best to use slice syntax for all dimensions, e.g.,
   <code class=""literal"">
    [1:2][1:1]
   </code>
   , not
   <code class=""literal"">
    [2][1:1]
   </code>
   .
  </p>
  <p>
   It is possible to omit the
   <em class=""replaceable"">
    <code>
     lower-bound
    </code>
   </em>
   and/or
   <em class=""replaceable"">
    <code>
     upper-bound
    </code>
   </em>
   of a slice specifier; the missing bound is replaced by the lower or upper limit of the array's subscripts. For example:
  </p>
  <pre class=""programlisting"">
SELECT schedule[:2][2:] FROM sal_emp WHERE name = 'Bill';

        schedule
------------------------
 {{lunch},{presentation}}
(1 row)

SELECT schedule[:][1:1] FROM sal_emp WHERE name = 'Bill';

        schedule
------------------------
 {{meeting},{training}}
(1 row)
</pre>
  <p>
   An array subscript expression will return null if either the array itself or any of the subscript expressions are null. Also, null is returned if a subscript is outside the array bounds (this case does not raise an error). For example, if
   <code class=""literal"">
    schedule
   </code>
   currently has the dimensions
   <code class=""literal"">
    [1:3][1:2]
   </code>
   then referencing
   <code class=""literal"">
    schedule[3][3]
   </code>
   yields NULL. Similarly, an array reference with the wrong number of subscripts yields a null rather than an error.
  </p>
  <p>
   An array slice expression likewise yields null if the array itself or any of the subscript expressions are null. However, in other cases such as selecting an array slice that is completely outside the current array bounds, a slice expression yields an empty (zero-dimensional) array instead of null. (This does not match non-slice behavior and is done for historical reasons.) If the requested slice partially overlaps the array bounds, then it is silently reduced to just the overlapping region instead of returning null.
  </p>
  <p>
   The current dimensions of any array value can be retrieved with the
   <code class=""function"">
    array_dims
   </code>
   function:
  </p>
  <pre class=""programlisting"">
SELECT array_dims(schedule) FROM sal_emp WHERE name = 'Carol';

 array_dims
------------
 [1:2][1:2]
(1 row)
</pre>
  <p>
   <code class=""function"">
    array_dims
   </code>
   produces a
   <code class=""type"">
    text
   </code>
   result, which is convenient for people to read but perhaps inconvenient for programs. Dimensions can also be retrieved with
   <code class=""function"">
    array_upper
   </code>
   and
   <code class=""function"">
    array_lower
   </code>
   , which return the upper and lower bound of a specified array dimension, respectively:
  </p>
  <pre class=""programlisting"">
SELECT array_upper(schedule, 1) FROM sal_emp WHERE name = 'Carol';

 array_upper
-------------
           2
(1 row)
</pre>
  <p>
   <code class=""function"">
    array_length
   </code>
   will return the length of a specified array dimension:
  </p>
  <pre class=""programlisting"">
SELECT array_length(schedule, 1) FROM sal_emp WHERE name = 'Carol';

 array_length
--------------
            2
(1 row)
</pre>
  <p>
   <code class=""function"">
    cardinality
   </code>
   returns the total number of elements in an array across all dimensions. It is effectively the number of rows a call to
   <code class=""function"">
    unnest
   </code>
   would yield:
  </p>
  <pre class=""programlisting"">
SELECT cardinality(schedule) FROM sal_emp WHERE name = 'Carol';

 cardinality
-------------
           4
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""ARRAYS-MODIFYING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.4. Modifying Arrays
      <a class=""id_link"" href=""#ARRAYS-MODIFYING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.7.2"" name=""id-1.5.7.23.7.2"">
  </a>
  <p>
   An array value can be replaced completely:
  </p>
  <pre class=""programlisting"">
UPDATE sal_emp SET pay_by_quarter = '{25000,25000,27000,27000}'
    WHERE name = 'Carol';
</pre>
  <p>
   or using the
   <code class=""literal"">
    ARRAY
   </code>
   expression syntax:
  </p>
  <pre class=""programlisting"">
UPDATE sal_emp SET pay_by_quarter = ARRAY[25000,25000,27000,27000]
    WHERE name = 'Carol';
</pre>
  <p>
   An array can also be updated at a single element:
  </p>
  <pre class=""programlisting"">
UPDATE sal_emp SET pay_by_quarter[4] = 15000
    WHERE name = 'Bill';
</pre>
  <p>
   or updated in a slice:
  </p>
  <pre class=""programlisting"">
UPDATE sal_emp SET pay_by_quarter[1:2] = '{27000,27000}'
    WHERE name = 'Carol';
</pre>
  <p>
   The slice syntaxes with omitted
   <em class=""replaceable"">
    <code>
     lower-bound
    </code>
   </em>
   and/or
   <em class=""replaceable"">
    <code>
     upper-bound
    </code>
   </em>
   can be used too, but only when updating an array value that is not NULL or zero-dimensional (otherwise, there is no existing subscript limit to substitute).
  </p>
  <p>
   A stored array value can be enlarged by assigning to elements not already present. Any positions between those previously present and the newly assigned elements will be filled with nulls. For example, if array
   <code class=""literal"">
    myarray
   </code>
   currently has 4 elements, it will have six elements after an update that assigns to
   <code class=""literal"">
    myarray[6]
   </code>
   ;
   <code class=""literal"">
    myarray[5]
   </code>
   will contain null. Currently, enlargement in this fashion is only allowed for one-dimensional arrays, not multidimensional arrays.
  </p>
  <p>
   Subscripted assignment allows creation of arrays that do not use one-based subscripts. For example one might assign to
   <code class=""literal"">
    myarray[-2:7]
   </code>
   to create an array with subscript values from -2 to 7.
  </p>
  <p>
   New array values can also be constructed using the concatenation operator,
   <code class=""literal"">
    ||
   </code>
   :
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[1,2] || ARRAY[3,4];
 ?column?
-----------
 {1,2,3,4}
(1 row)

SELECT ARRAY[5,6] || ARRAY[[1,2],[3,4]];
      ?column?
---------------------
 {{5,6},{1,2},{3,4}}
(1 row)
</pre>
  <p>
   The concatenation operator allows a single element to be pushed onto the beginning or end of a one-dimensional array. It also accepts two
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   -dimensional arrays, or an
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   -dimensional and an
   <em class=""replaceable"">
    <code>
     N+1
    </code>
   </em>
   -dimensional array.
  </p>
  <p>
   When a single element is pushed onto either the beginning or end of a one-dimensional array, the result is an array with the same lower bound subscript as the array operand. For example:
  </p>
  <pre class=""programlisting"">
SELECT array_dims(1 || '[0:1]={2,3}'::int[]);
 array_dims
------------
 [0:2]
(1 row)

SELECT array_dims(ARRAY[1,2] || 3);
 array_dims
------------
 [1:3]
(1 row)
</pre>
  <p>
   When two arrays with an equal number of dimensions are concatenated, the result retains the lower bound subscript of the left-hand operand's outer dimension. The result is an array comprising every element of the left-hand operand followed by every element of the right-hand operand. For example:
  </p>
  <pre class=""programlisting"">
SELECT array_dims(ARRAY[1,2] || ARRAY[3,4,5]);
 array_dims
------------
 [1:5]
(1 row)

SELECT array_dims(ARRAY[[1,2],[3,4]] || ARRAY[[5,6],[7,8],[9,0]]);
 array_dims
------------
 [1:5][1:2]
(1 row)
</pre>
  <p>
   When an
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   -dimensional array is pushed onto the beginning or end of an
   <em class=""replaceable"">
    <code>
     N+1
    </code>
   </em>
   -dimensional array, the result is analogous to the element-array case above. Each
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   -dimensional sub-array is essentially an element of the
   <em class=""replaceable"">
    <code>
     N+1
    </code>
   </em>
   -dimensional array's outer dimension. For example:
  </p>
  <pre class=""programlisting"">
SELECT array_dims(ARRAY[1,2] || ARRAY[[3,4],[5,6]]);
 array_dims
------------
 [1:3][1:2]
(1 row)
</pre>
  <p>
   An array can also be constructed by using the functions
   <code class=""function"">
    array_prepend
   </code>
   ,
   <code class=""function"">
    array_append
   </code>
   , or
   <code class=""function"">
    array_cat
   </code>
   . The first two only support one-dimensional arrays, but
   <code class=""function"">
    array_cat
   </code>
   supports multidimensional arrays. Some examples:
  </p>
  <pre class=""programlisting"">
SELECT array_prepend(1, ARRAY[2,3]);
 array_prepend
---------------
 {1,2,3}
(1 row)

SELECT array_append(ARRAY[1,2], 3);
 array_append
--------------
 {1,2,3}
(1 row)

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]);
 array_cat
-----------
 {1,2,3,4}
(1 row)

SELECT array_cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);
      array_cat
---------------------
 {{1,2},{3,4},{5,6}}
(1 row)

SELECT array_cat(ARRAY[5,6], ARRAY[[1,2],[3,4]]);
      array_cat
---------------------
 {{5,6},{1,2},{3,4}}
</pre>
  <p>
   In simple cases, the concatenation operator discussed above is preferred over direct use of these functions. However, because the concatenation operator is overloaded to serve all three cases, there are situations where use of one of the functions is helpful to avoid ambiguity. For example consider:
  </p>
  <pre class=""programlisting"">
SELECT ARRAY[1, 2] || '{3, 4}';  -- the untyped literal is taken as an array
 ?column?
-----------
 {1,2,3,4}

SELECT ARRAY[1, 2] || '7';                 -- so is this one
ERROR:  malformed array literal: ""7""

SELECT ARRAY[1, 2] || NULL;                -- so is an undecorated NULL
 ?column?
----------
 {1,2}
(1 row)

SELECT array_append(ARRAY[1, 2], NULL);    -- this might have been meant
 array_append
--------------
 {1,2,NULL}
</pre>
  <p>
   In the examples above, the parser sees an integer array on one side of the concatenation operator, and a constant of undetermined type on the other. The heuristic it uses to resolve the constant's type is to assume it's of the same type as the operator's other input — in this case, integer array. So the concatenation operator is presumed to represent
   <code class=""function"">
    array_cat
   </code>
   , not
   <code class=""function"">
    array_append
   </code>
   . When that's the wrong choice, it could be fixed by casting the constant to the array's element type; but explicit use of
   <code class=""function"">
    array_append
   </code>
   might be a preferable solution.
  </p>
 </div>
 <div class=""sect2"" id=""ARRAYS-SEARCHING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.5. Searching in Arrays
      <a class=""id_link"" href=""#ARRAYS-SEARCHING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.8.2"" name=""id-1.5.7.23.8.2"">
  </a>
  <p>
   To search for a value in an array, each value must be checked. This can be done manually, if you know the size of the array. For example:
  </p>
  <pre class=""programlisting"">
SELECT * FROM sal_emp WHERE pay_by_quarter[1] = 10000 OR
                            pay_by_quarter[2] = 10000 OR
                            pay_by_quarter[3] = 10000 OR
                            pay_by_quarter[4] = 10000;
</pre>
  <p>
   However, this quickly becomes tedious for large arrays, and is not helpful if the size of the array is unknown. An alternative method is described in
   <a class=""xref"" href=""functions-comparisons.html"" title=""9.25. Row and Array Comparisons"">
    Section 9.25
   </a>
   . The above query could be replaced by:
  </p>
  <pre class=""programlisting"">
SELECT * FROM sal_emp WHERE 10000 = ANY (pay_by_quarter);
</pre>
  <p>
   In addition, you can find rows where the array has all values equal to 10000 with:
  </p>
  <pre class=""programlisting"">
SELECT * FROM sal_emp WHERE 10000 = ALL (pay_by_quarter);
</pre>
  <p>
   Alternatively, the
   <code class=""function"">
    generate_subscripts
   </code>
   function can be used. For example:
  </p>
  <pre class=""programlisting"">
SELECT * FROM
   (SELECT pay_by_quarter,
           generate_subscripts(pay_by_quarter, 1) AS s
      FROM sal_emp) AS foo
 WHERE pay_by_quarter[s] = 10000;
</pre>
  <p>
   This function is described in
   <a class=""xref"" href=""functions-srf.html#FUNCTIONS-SRF-SUBSCRIPTS"" title=""Table 9.68. Subscript Generating Functions"">
    Table 9.68
   </a>
   .
  </p>
  <p>
   You can also search an array using the
   <code class=""literal"">
    &amp;&amp;
   </code>
   operator, which checks whether the left operand overlaps with the right operand. For instance:
  </p>
  <pre class=""programlisting"">
SELECT * FROM sal_emp WHERE pay_by_quarter &amp;&amp; ARRAY[10000];
</pre>
  <p>
   This and other array operators are further described in
   <a class=""xref"" href=""functions-array.html"" title=""9.19. Array Functions and Operators"">
    Section 9.19
   </a>
   . It can be accelerated by an appropriate index, as described in
   <a class=""xref"" href=""indexes-types.html"" title=""11.2. Index Types"">
    Section 11.2
   </a>
   .
  </p>
  <p>
   You can also search for specific values in an array using the
   <code class=""function"">
    array_position
   </code>
   and
   <code class=""function"">
    array_positions
   </code>
   functions. The former returns the subscript of the first occurrence of a value in an array; the latter returns an array with the subscripts of all occurrences of the value in the array. For example:
  </p>
  <pre class=""programlisting"">
SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');
 array_position
----------------
              2
(1 row)

SELECT array_positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1);
 array_positions
-----------------
 {1,4,8}
(1 row)
</pre>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Arrays are not sets; searching for specific array elements can be a sign of database misdesign. Consider using a separate table with a row for each item that would be an array element. This will be easier to search, and is likely to scale better for a large number of elements.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""ARRAYS-IO"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.15.6. Array Input and Output Syntax
      <a class=""id_link"" href=""#ARRAYS-IO"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.23.9.2"" name=""id-1.5.7.23.9.2"">
  </a>
  <p>
   The external text representation of an array value consists of items that are interpreted according to the I/O conversion rules for the array's element type, plus decoration that indicates the array structure. The decoration consists of curly braces (
   <code class=""literal"">
    {
   </code>
   and
   <code class=""literal"">
    }
   </code>
   ) around the array value plus delimiter characters between adjacent items. The delimiter character is usually a comma (
   <code class=""literal"">
    ,
   </code>
   ) but can be something else: it is determined by the
   <code class=""literal"">
    typdelim
   </code>
   setting for the array's element type. Among the standard data types provided in the
   <span class=""productname"">
    PostgreSQL
   </span>
   distribution, all use a comma, except for type
   <code class=""type"">
    box
   </code>
   , which uses a semicolon (
   <code class=""literal"">
    ;
   </code>
   ). In a multidimensional array, each dimension (row, plane, cube, etc.) gets its own level of curly braces, and delimiters must be written between adjacent curly-braced entities of the same level.
  </p>
  <p>
   The array output routine will put double quotes around element values if they are empty strings, contain curly braces, delimiter characters, double quotes, backslashes, or white space, or match the word
   <code class=""literal"">
    NULL
   </code>
   . Double quotes and backslashes embedded in element values will be backslash-escaped. For numeric data types it is safe to assume that double quotes will never appear, but for textual data types one should be prepared to cope with either the presence or absence of quotes.
  </p>
  <p>
   By default, the lower bound index value of an array's dimensions is set to one. To represent arrays with other lower bounds, the array subscript ranges can be specified explicitly before writing the array contents. This decoration consists of square brackets (
   <code class=""literal"">
    []
   </code>
   ) around each array dimension's lower and upper bounds, with a colon (
   <code class=""literal"">
    :
   </code>
   ) delimiter character in between. The array dimension decoration is followed by an equal sign (
   <code class=""literal"">
    =
   </code>
   ). For example:
  </p>
  <pre class=""programlisting"">
SELECT f1[1][-2][3] AS e1, f1[1][-1][5] AS e2
 FROM (SELECT '[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'::int[] AS f1) AS ss;

 e1 | e2
----+----
  1 |  6
(1 row)
</pre>
  <p>
   The array output routine will include explicit dimensions in its result only when there are one or more lower bounds different from one.
  </p>
  <p>
   If the value written for an element is
   <code class=""literal"">
    NULL
   </code>
   (in any case variant), the element is taken to be NULL. The presence of any quotes or backslashes disables this and allows the literal string value
   <span class=""quote"">
    “
    <span class=""quote"">
     NULL
    </span>
    ”
   </span>
   to be entered. Also, for backward compatibility with pre-8.2 versions of
   <span class=""productname"">
    PostgreSQL
   </span>
   , the
   <a class=""xref"" href=""runtime-config-compatible.html#GUC-ARRAY-NULLS"">
    array_nulls
   </a>
   configuration parameter can be turned
   <code class=""literal"">
    off
   </code>
   to suppress recognition of
   <code class=""literal"">
    NULL
   </code>
   as a NULL.
  </p>
  <p>
   As shown previously, when writing an array value you can use double quotes around any individual array element. You
   <span class=""emphasis"">
    <em>
     must
    </em>
   </span>
   do so if the element value would otherwise confuse the array-value parser. For example, elements containing curly braces, commas (or the data type's delimiter character), double quotes, backslashes, or leading or trailing whitespace must be double-quoted. Empty strings and strings matching the word
   <code class=""literal"">
    NULL
   </code>
   must be quoted, too. To put a double quote or backslash in a quoted array element value, precede it with a backslash. Alternatively, you can avoid quotes and use backslash-escaping to protect all data characters that would otherwise be taken as array syntax.
  </p>
  <p>
   You can add whitespace before a left brace or after a right brace. You can also add whitespace before or after any individual item string. In all of these cases the whitespace will be ignored. However, whitespace within double-quoted elements, or surrounded on both sides by non-whitespace characters of an element, is not ignored.
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    The
    <code class=""literal"">
     ARRAY
    </code>
    constructor syntax (see
    <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ARRAY-CONSTRUCTORS"" title=""4.2.12. Array Constructors"">
     Section 4.2.12
    </a>
    ) is often easier to work with than the array-literal syntax when writing array values in SQL commands. In
    <code class=""literal"">
     ARRAY
    </code>
    , individual element values are written the same way they would be written when not members of an array.
   </p>
  </div>
 </div>
</div>
"
8. Data Types,8.16. Composite Types,https://www.postgresql.org/docs/17/rowtypes.html,"<div class=""sect1"" id=""ROWTYPES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.16. Composite Types
     <a class=""id_link"" href=""#ROWTYPES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-DECLARING"">
      8.16.1. Declaration of Composite Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-CONSTRUCTING"">
      8.16.2. Constructing Composite Values
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-ACCESSING"">
      8.16.3. Accessing Composite Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-MODIFYING"">
      8.16.4. Modifying Composite Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-USAGE"">
      8.16.5. Using Composite Types in Queries
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rowtypes.html#ROWTYPES-IO-SYNTAX"">
      8.16.6. Composite Type Input and Output Syntax
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.24.2"" name=""id-1.5.7.24.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.24.3"" name=""id-1.5.7.24.3"">
 </a>
 <p>
  A
  <em class=""firstterm"">
   composite type
  </em>
  represents the structure of a row or record; it is essentially just a list of field names and their data types.
  <span class=""productname"">
   PostgreSQL
  </span>
  allows composite types to be used in many of the same ways that simple types can be used. For example, a column of a table can be declared to be of a composite type.
 </p>
 <div class=""sect2"" id=""ROWTYPES-DECLARING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.1. Declaration of Composite Types
      <a class=""id_link"" href=""#ROWTYPES-DECLARING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Here are two simple examples of defining composite types:
  </p>
  <pre class=""programlisting"">
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</pre>
  <p>
   The syntax is comparable to
   <code class=""command"">
    CREATE TABLE
   </code>
   , except that only field names and types can be specified; no constraints (such as
   <code class=""literal"">
    NOT NULL
   </code>
   ) can presently be included. Note that the
   <code class=""literal"">
    AS
   </code>
   keyword is essential; without it, the system will think a different kind of
   <code class=""command"">
    CREATE TYPE
   </code>
   command is meant, and you will get odd syntax errors.
  </p>
  <p>
   Having defined the types, we can use them to create tables:
  </p>
  <pre class=""programlisting"">
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</pre>
  <p>
   or functions:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</pre>
  <p>
   Whenever you create a table, a composite type is also automatically created, with the same name as the table, to represent the table's row type. For example, had we said:
  </p>
  <pre class=""programlisting"">
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</pre>
  <p>
   then the same
   <code class=""literal"">
    inventory_item
   </code>
   composite type shown above would come into being as a byproduct, and could be used just as above. Note however an important restriction of the current implementation: since no constraints are associated with a composite type, the constraints shown in the table definition
   <span class=""emphasis"">
    <em>
     do not apply
    </em>
   </span>
   to values of the composite type outside the table. (To work around this, create a
   <a class=""glossterm"" href=""glossary.html#GLOSSARY-DOMAIN"">
   </a>
   <a class=""glossterm"" href=""glossary.html#GLOSSARY-DOMAIN"" title=""Domain"">
    domain
   </a>
   over the composite type, and apply the desired constraints as
   <code class=""literal"">
    CHECK
   </code>
   constraints of the domain.)
  </p>
 </div>
 <div class=""sect2"" id=""ROWTYPES-CONSTRUCTING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.2. Constructing Composite Values
      <a class=""id_link"" href=""#ROWTYPES-CONSTRUCTING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.24.6.2"" name=""id-1.5.7.24.6.2"">
  </a>
  <p>
   To write a composite value as a literal constant, enclose the field values within parentheses and separate them by commas. You can put double quotes around any field value, and must do so if it contains commas or parentheses. (More details appear
   <a class=""link"" href=""rowtypes.html#ROWTYPES-IO-SYNTAX"" title=""8.16.6. Composite Type Input and Output Syntax"">
    below
   </a>
   .) Thus, the general format of a composite constant is the following:
  </p>
  <pre class=""synopsis"">
'( <em class=""replaceable""><code>val1</code></em> , <em class=""replaceable""><code>val2</code></em> , ... )'
</pre>
  <p>
   An example is:
  </p>
  <pre class=""programlisting"">
'(""fuzzy dice"",42,1.99)'
</pre>
  <p>
   which would be a valid value of the
   <code class=""literal"">
    inventory_item
   </code>
   type defined above. To make a field be NULL, write no characters at all in its position in the list. For example, this constant specifies a NULL third field:
  </p>
  <pre class=""programlisting"">
'(""fuzzy dice"",42,)'
</pre>
  <p>
   If you want an empty string rather than NULL, write double quotes:
  </p>
  <pre class=""programlisting"">
'("""",42,)'
</pre>
  <p>
   Here the first field is a non-NULL empty string, the third is NULL.
  </p>
  <p>
   (These constants are actually only a special case of the generic type constants discussed in
   <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS-GENERIC"" title=""4.1.2.7. Constants of Other Types"">
    Section 4.1.2.7
   </a>
   . The constant is initially treated as a string and passed to the composite-type input conversion routine. An explicit type specification might be necessary to tell which type to convert the constant to.)
  </p>
  <p>
   The
   <code class=""literal"">
    ROW
   </code>
   expression syntax can also be used to construct composite values. In most cases this is considerably simpler to use than the string-literal syntax since you don't have to worry about multiple layers of quoting. We already used this method above:
  </p>
  <pre class=""programlisting"">
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</pre>
  <p>
   The ROW keyword is actually optional as long as you have more than one field in the expression, so these can be simplified to:
  </p>
  <pre class=""programlisting"">
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</pre>
  <p>
   The
   <code class=""literal"">
    ROW
   </code>
   expression syntax is discussed in more detail in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""ROWTYPES-ACCESSING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.3. Accessing Composite Types
      <a class=""id_link"" href=""#ROWTYPES-ACCESSING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   To access a field of a composite column, one writes a dot and the field name, much like selecting a field from a table name. In fact, it's so much like selecting from a table name that you often have to use parentheses to keep from confusing the parser. For example, you might try to select some subfields from our
   <code class=""literal"">
    on_hand
   </code>
   example table with something like:
  </p>
  <pre class=""programlisting"">
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</pre>
  <p>
   This will not work since the name
   <code class=""literal"">
    item
   </code>
   is taken to be a table name, not a column name of
   <code class=""literal"">
    on_hand
   </code>
   , per SQL syntax rules. You must write it like this:
  </p>
  <pre class=""programlisting"">
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</pre>
  <p>
   or if you need to use the table name as well (for instance in a multitable query), like this:
  </p>
  <pre class=""programlisting"">
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</pre>
  <p>
   Now the parenthesized object is correctly interpreted as a reference to the
   <code class=""literal"">
    item
   </code>
   column, and then the subfield can be selected from it.
  </p>
  <p>
   Similar syntactic issues apply whenever you select a field from a composite value. For instance, to select just one field from the result of a function that returns a composite value, you'd need to write something like:
  </p>
  <pre class=""programlisting"">
SELECT (my_func(...)).field FROM ...
</pre>
  <p>
   Without the extra parentheses, this will generate a syntax error.
  </p>
  <p>
   The special field name
   <code class=""literal"">
    *
   </code>
   means
   <span class=""quote"">
    “
    <span class=""quote"">
     all fields
    </span>
    ”
   </span>
   , as further explained in
   <a class=""xref"" href=""rowtypes.html#ROWTYPES-USAGE"" title=""8.16.5. Using Composite Types in Queries"">
    Section 8.16.5
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""ROWTYPES-MODIFYING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.4. Modifying Composite Types
      <a class=""id_link"" href=""#ROWTYPES-MODIFYING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Here are some examples of the proper syntax for inserting and updating composite columns. First, inserting or updating a whole column:
  </p>
  <pre class=""programlisting"">
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</pre>
  <p>
   The first example omits
   <code class=""literal"">
    ROW
   </code>
   , the second uses it; we could have done it either way.
  </p>
  <p>
   We can update an individual subfield of a composite column:
  </p>
  <pre class=""programlisting"">
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</pre>
  <p>
   Notice here that we don't need to (and indeed cannot) put parentheses around the column name appearing just after
   <code class=""literal"">
    SET
   </code>
   , but we do need parentheses when referencing the same column in the expression to the right of the equal sign.
  </p>
  <p>
   And we can specify subfields as targets for
   <code class=""command"">
    INSERT
   </code>
   , too:
  </p>
  <pre class=""programlisting"">
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</pre>
  <p>
   Had we not supplied values for all the subfields of the column, the remaining subfields would have been filled with null values.
  </p>
 </div>
 <div class=""sect2"" id=""ROWTYPES-USAGE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.5. Using Composite Types in Queries
      <a class=""id_link"" href=""#ROWTYPES-USAGE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   There are various special syntax rules and behaviors associated with composite types in queries. These rules provide useful shortcuts, but can be confusing if you don't know the logic behind them.
  </p>
  <p>
   In
   <span class=""productname"">
    PostgreSQL
   </span>
   , a reference to a table name (or alias) in a query is effectively a reference to the composite value of the table's current row. For example, if we had a table
   <code class=""structname"">
    inventory_item
   </code>
   as shown
   <a class=""link"" href=""rowtypes.html#ROWTYPES-DECLARING"" title=""8.16.1. Declaration of Composite Types"">
    above
   </a>
   , we could write:
  </p>
  <pre class=""programlisting"">
SELECT c FROM inventory_item c;
</pre>
  <p>
   This query produces a single composite-valued column, so we might get output like:
  </p>
  <pre class=""programlisting"">
           c
------------------------
 (""fuzzy dice"",42,1.99)
(1 row)
</pre>
  <p>
   Note however that simple names are matched to column names before table names, so this example works only because there is no column named
   <code class=""structfield"">
    c
   </code>
   in the query's tables.
  </p>
  <p>
   The ordinary qualified-column-name syntax
   <em class=""replaceable"">
    <code>
     table_name
    </code>
   </em>
   <code class=""literal"">
    .
   </code>
   <em class=""replaceable"">
    <code>
     column_name
    </code>
   </em>
   can be understood as applying
   <a class=""link"" href=""sql-expressions.html#FIELD-SELECTION"" title=""4.2.4. Field Selection"">
    field selection
   </a>
   to the composite value of the table's current row. (For efficiency reasons, it's not actually implemented that way.)
  </p>
  <p>
   When we write
  </p>
  <pre class=""programlisting"">
SELECT c.* FROM inventory_item c;
</pre>
  <p>
   then, according to the SQL standard, we should get the contents of the table expanded into separate columns:
  </p>
  <pre class=""programlisting"">
    name    | supplier_id | price
------------+-------------+-------
 fuzzy dice |          42 |  1.99
(1 row)
</pre>
  <p>
   as if the query were
  </p>
  <pre class=""programlisting"">
SELECT c.name, c.supplier_id, c.price FROM inventory_item c;
</pre>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   will apply this expansion behavior to any composite-valued expression, although as shown
   <a class=""link"" href=""rowtypes.html#ROWTYPES-ACCESSING"" title=""8.16.3. Accessing Composite Types"">
    above
   </a>
   , you need to write parentheses around the value that
   <code class=""literal"">
    .*
   </code>
   is applied to whenever it's not a simple table name. For example, if
   <code class=""function"">
    myfunc()
   </code>
   is a function returning a composite type with columns
   <code class=""structfield"">
    a
   </code>
   ,
   <code class=""structfield"">
    b
   </code>
   , and
   <code class=""structfield"">
    c
   </code>
   , then these two queries have the same result:
  </p>
  <pre class=""programlisting"">
SELECT (myfunc(x)).* FROM some_table;
SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;
</pre>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    handles column expansion by actually transforming the first form into the second. So, in this example,
    <code class=""function"">
     myfunc()
    </code>
    would get invoked three times per row with either syntax. If it's an expensive function you may wish to avoid that, which you can do with a query like:
   </p>
   <pre class=""programlisting"">
SELECT m.* FROM some_table, LATERAL myfunc(x) AS m;
</pre>
   <p>
    Placing the function in a
    <code class=""literal"">
     LATERAL
    </code>
    <code class=""literal"">
     FROM
    </code>
    item keeps it from being invoked more than once per row.
    <code class=""literal"">
     m.*
    </code>
    is still expanded into
    <code class=""literal"">
     m.a, m.b, m.c
    </code>
    , but now those variables are just references to the output of the
    <code class=""literal"">
     FROM
    </code>
    item. (The
    <code class=""literal"">
     LATERAL
    </code>
    keyword is optional here, but we show it to clarify that the function is getting
    <code class=""structfield"">
     x
    </code>
    from
    <code class=""structname"">
     some_table
    </code>
    .)
   </p>
  </div>
  <p>
   The
   <em class=""replaceable"">
    <code>
     composite_value
    </code>
   </em>
   <code class=""literal"">
    .*
   </code>
   syntax results in column expansion of this kind when it appears at the top level of a
   <a class=""link"" href=""queries-select-lists.html"" title=""7.3. Select Lists"">
    <code class=""command"">
     SELECT
    </code>
    output list
   </a>
   , a
   <a class=""link"" href=""dml-returning.html"" title=""6.4. Returning Data from Modified Rows"">
    <code class=""literal"">
     RETURNING
    </code>
    list
   </a>
   in
   <code class=""command"">
    INSERT
   </code>
   /
   <code class=""command"">
    UPDATE
   </code>
   /
   <code class=""command"">
    DELETE
   </code>
   /
   <code class=""command"">
    MERGE
   </code>
   , a
   <a class=""link"" href=""queries-values.html"" title=""7.7. VALUES Lists"">
    <code class=""literal"">
     VALUES
    </code>
    clause
   </a>
   , or a
   <a class=""link"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    row constructor
   </a>
   . In all other contexts (including when nested inside one of those constructs), attaching
   <code class=""literal"">
    .*
   </code>
   to a composite value does not change the value, since it means
   <span class=""quote"">
    “
    <span class=""quote"">
     all columns
    </span>
    ”
   </span>
   and so the same composite value is produced again. For example, if
   <code class=""function"">
    somefunc()
   </code>
   accepts a composite-valued argument, these queries are the same:
  </p>
  <pre class=""programlisting"">
SELECT somefunc(c.*) FROM inventory_item c;
SELECT somefunc(c) FROM inventory_item c;
</pre>
  <p>
   In both cases, the current row of
   <code class=""structname"">
    inventory_item
   </code>
   is passed to the function as a single composite-valued argument. Even though
   <code class=""literal"">
    .*
   </code>
   does nothing in such cases, using it is good style, since it makes clear that a composite value is intended. In particular, the parser will consider
   <code class=""literal"">
    c
   </code>
   in
   <code class=""literal"">
    c.*
   </code>
   to refer to a table name or alias, not to a column name, so that there is no ambiguity; whereas without
   <code class=""literal"">
    .*
   </code>
   , it is not clear whether
   <code class=""literal"">
    c
   </code>
   means a table name or a column name, and in fact the column-name interpretation will be preferred if there is a column named
   <code class=""literal"">
    c
   </code>
   .
  </p>
  <p>
   Another example demonstrating these concepts is that all these queries mean the same thing:
  </p>
  <pre class=""programlisting"">
SELECT * FROM inventory_item c ORDER BY c;
SELECT * FROM inventory_item c ORDER BY c.*;
SELECT * FROM inventory_item c ORDER BY ROW(c.*);
</pre>
  <p>
   All of these
   <code class=""literal"">
    ORDER BY
   </code>
   clauses specify the row's composite value, resulting in sorting the rows according to the rules described in
   <a class=""xref"" href=""functions-comparisons.html#COMPOSITE-TYPE-COMPARISON"" title=""9.25.6. Composite Type Comparison"">
    Section 9.25.6
   </a>
   . However, if
   <code class=""structname"">
    inventory_item
   </code>
   contained a column named
   <code class=""structfield"">
    c
   </code>
   , the first case would be different from the others, as it would mean to sort by that column only. Given the column names previously shown, these queries are also equivalent to those above:
  </p>
  <pre class=""programlisting"">
SELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);
SELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);
</pre>
  <p>
   (The last case uses a row constructor with the key word
   <code class=""literal"">
    ROW
   </code>
   omitted.)
  </p>
  <p>
   Another special syntactical behavior associated with composite values is that we can use
   <em class=""firstterm"">
    functional notation
   </em>
   for extracting a field of a composite value. The simple way to explain this is that the notations
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      field
     </code>
    </em>
    (
    <em class=""replaceable"">
     <code>
      table
     </code>
    </em>
    )
   </code>
   and
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      table
     </code>
    </em>
    .
    <em class=""replaceable"">
     <code>
      field
     </code>
    </em>
   </code>
   are interchangeable. For example, these queries are equivalent:
  </p>
  <pre class=""programlisting"">
SELECT c.name FROM inventory_item c WHERE c.price &gt; 1000;
SELECT name(c) FROM inventory_item c WHERE price(c) &gt; 1000;
</pre>
  <p>
   Moreover, if we have a function that accepts a single argument of a composite type, we can call it with either notation. These queries are all equivalent:
  </p>
  <pre class=""programlisting"">
SELECT somefunc(c) FROM inventory_item c;
SELECT somefunc(c.*) FROM inventory_item c;
SELECT c.somefunc FROM inventory_item c;
</pre>
  <p>
   This equivalence between functional notation and field notation makes it possible to use functions on composite types to implement
   <span class=""quote"">
    “
    <span class=""quote"">
     computed fields
    </span>
    ”
   </span>
   .
   <a class=""indexterm"" id=""id-1.5.7.24.9.10.2"" name=""id-1.5.7.24.9.10.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.7.24.9.10.3"" name=""id-1.5.7.24.9.10.3"">
   </a>
   An application using the last query above wouldn't need to be directly aware that
   <code class=""literal"">
    somefunc
   </code>
   isn't a real column of the table.
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Because of this behavior, it's unwise to give a function that takes a single composite-type argument the same name as any of the fields of that composite type. If there is ambiguity, the field-name interpretation will be chosen if field-name syntax is used, while the function will be chosen if function-call syntax is used. However,
    <span class=""productname"">
     PostgreSQL
    </span>
    versions before 11 always chose the field-name interpretation, unless the syntax of the call required it to be a function call. One way to force the function interpretation in older versions is to schema-qualify the function name, that is, write
    <code class=""literal"">
     <em class=""replaceable"">
      <code>
       schema
      </code>
     </em>
     .
     <em class=""replaceable"">
      <code>
       func
      </code>
     </em>
     (
     <em class=""replaceable"">
      <code>
       compositevalue
      </code>
     </em>
     )
    </code>
    .
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""ROWTYPES-IO-SYNTAX"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.16.6. Composite Type Input and Output Syntax
      <a class=""id_link"" href=""#ROWTYPES-IO-SYNTAX"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The external text representation of a composite value consists of items that are interpreted according to the I/O conversion rules for the individual field types, plus decoration that indicates the composite structure. The decoration consists of parentheses (
   <code class=""literal"">
    (
   </code>
   and
   <code class=""literal"">
    )
   </code>
   ) around the whole value, plus commas (
   <code class=""literal"">
    ,
   </code>
   ) between adjacent items. Whitespace outside the parentheses is ignored, but within the parentheses it is considered part of the field value, and might or might not be significant depending on the input conversion rules for the field data type. For example, in:
  </p>
  <pre class=""programlisting"">
'(  42)'
</pre>
  <p>
   the whitespace will be ignored if the field type is integer, but not if it is text.
  </p>
  <p>
   As shown previously, when writing a composite value you can write double quotes around any individual field value. You
   <span class=""emphasis"">
    <em>
     must
    </em>
   </span>
   do so if the field value would otherwise confuse the composite-value parser. In particular, fields containing parentheses, commas, double quotes, or backslashes must be double-quoted. To put a double quote or backslash in a quoted composite field value, precede it with a backslash. (Also, a pair of double quotes within a double-quoted field value is taken to represent a double quote character, analogously to the rules for single quotes in SQL literal strings.) Alternatively, you can avoid quoting and use backslash-escaping to protect all data characters that would otherwise be taken as composite syntax.
  </p>
  <p>
   A completely empty field value (no characters at all between the commas or parentheses) represents a NULL. To write a value that is an empty string rather than NULL, write
   <code class=""literal"">
    """"
   </code>
   .
  </p>
  <p>
   The composite output routine will put double quotes around field values if they are empty strings or contain parentheses, commas, double quotes, backslashes, or white space. (Doing so for white space is not essential, but aids legibility.) Double quotes and backslashes embedded in field values will be doubled.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Remember that what you write in an SQL command will first be interpreted as a string literal, and then as a composite. This doubles the number of backslashes you need (assuming escape string syntax is used). For example, to insert a
    <code class=""type"">
     text
    </code>
    field containing a double quote and a backslash in a composite value, you'd need to write:
   </p>
   <pre class=""programlisting"">
INSERT ... VALUES ('(""\""\\"")');
</pre>
   <p>
    The string-literal processor removes one level of backslashes, so that what arrives at the composite-value parser looks like
    <code class=""literal"">
     (""\""\\"")
    </code>
    . In turn, the string fed to the
    <code class=""type"">
     text
    </code>
    data type's input routine becomes
    <code class=""literal"">
     ""\
    </code>
    . (If we were working with a data type whose input routine also treated backslashes specially,
    <code class=""type"">
     bytea
    </code>
    for example, we might need as many as eight backslashes in the command to get one backslash into the stored composite field.) Dollar quoting (see
    <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING"" title=""4.1.2.4. Dollar-Quoted String Constants"">
     Section 4.1.2.4
    </a>
    ) can be used to avoid the need to double backslashes.
   </p>
  </div>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    The
    <code class=""literal"">
     ROW
    </code>
    constructor syntax is usually easier to work with than the composite-literal syntax when writing composite values in SQL commands. In
    <code class=""literal"">
     ROW
    </code>
    , individual field values are written the same way they would be written when not members of a composite.
   </p>
  </div>
 </div>
</div>
"
8. Data Types,8.17. Range Types,https://www.postgresql.org/docs/17/rangetypes.html,"<div class=""sect1"" id=""RANGETYPES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.17. Range Types
     <a class=""id_link"" href=""#RANGETYPES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-BUILTIN"">
      8.17.1. Built-in Range and Multirange Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-EXAMPLES"">
      8.17.2. Examples
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-INCLUSIVITY"">
      8.17.3. Inclusive and Exclusive Bounds
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-INFINITE"">
      8.17.4. Infinite (Unbounded) Ranges
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-IO"">
      8.17.5. Range Input/Output
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-CONSTRUCT"">
      8.17.6. Constructing Ranges and Multiranges
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-DISCRETE"">
      8.17.7. Discrete Range Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-DEFINING"">
      8.17.8. Defining New Range Types
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-INDEXING"">
      8.17.9. Indexing
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""rangetypes.html#RANGETYPES-CONSTRAINT"">
      8.17.10. Constraints on Ranges
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.25.2"" name=""id-1.5.7.25.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.25.3"" name=""id-1.5.7.25.3"">
 </a>
 <p>
  Range types are data types representing a range of values of some element type (called the range's
  <em class=""firstterm"">
   subtype
  </em>
  ). For instance, ranges of
  <code class=""type"">
   timestamp
  </code>
  might be used to represent the ranges of time that a meeting room is reserved. In this case the data type is
  <code class=""type"">
   tsrange
  </code>
  (short for
  <span class=""quote"">
   “
   <span class=""quote"">
    timestamp range
   </span>
   ”
  </span>
  ), and
  <code class=""type"">
   timestamp
  </code>
  is the subtype. The subtype must have a total order so that it is well-defined whether element values are within, before, or after a range of values.
 </p>
 <p>
  Range types are useful because they represent many element values in a single range value, and because concepts such as overlapping ranges can be expressed clearly. The use of time and date ranges for scheduling purposes is the clearest example; but price ranges, measurement ranges from an instrument, and so forth can also be useful.
 </p>
 <p>
  Every range type has a corresponding multirange type. A multirange is an ordered list of non-contiguous, non-empty, non-null ranges. Most range operators also work on multiranges, and they have a few functions of their own.
 </p>
 <div class=""sect2"" id=""RANGETYPES-BUILTIN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.1. Built-in Range and Multirange Types
      <a class=""id_link"" href=""#RANGETYPES-BUILTIN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   PostgreSQL comes with the following built-in range types:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      <code class=""type"">
       int4range
      </code>
      — Range of
      <code class=""type"">
       integer
      </code>
      ,
      <code class=""type"">
       int4multirange
      </code>
      — corresponding Multirange
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       int8range
      </code>
      — Range of
      <code class=""type"">
       bigint
      </code>
      ,
      <code class=""type"">
       int8multirange
      </code>
      — corresponding Multirange
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       numrange
      </code>
      — Range of
      <code class=""type"">
       numeric
      </code>
      ,
      <code class=""type"">
       nummultirange
      </code>
      — corresponding Multirange
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       tsrange
      </code>
      — Range of
      <code class=""type"">
       timestamp without time zone
      </code>
      ,
      <code class=""type"">
       tsmultirange
      </code>
      — corresponding Multirange
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       tstzrange
      </code>
      — Range of
      <code class=""type"">
       timestamp with time zone
      </code>
      ,
      <code class=""type"">
       tstzmultirange
      </code>
      — corresponding Multirange
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""type"">
       daterange
      </code>
      — Range of
      <code class=""type"">
       date
      </code>
      ,
      <code class=""type"">
       datemultirange
      </code>
      — corresponding Multirange
     </p>
    </li>
   </ul>
  </div>
  <p>
   In addition, you can define your own range types; see
   <a class=""xref"" href=""sql-createtype.html"" title=""CREATE TYPE"">
    <span class=""refentrytitle"">
     CREATE TYPE
    </span>
   </a>
   for more information.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-EXAMPLES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.2. Examples
      <a class=""id_link"" href=""#RANGETYPES-EXAMPLES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""programlisting"">
CREATE TABLE reservation (room int, during tsrange);
INSERT INTO reservation VALUES
    (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');

-- Containment
SELECT int4range(10, 20) @&gt; 3;

-- Overlaps
SELECT numrange(11.1, 22.2) &amp;&amp; numrange(20.0, 30.0);

-- Extract the upper bound
SELECT upper(int8range(15, 25));

-- Compute the intersection
SELECT int4range(10, 20) * int4range(15, 25);

-- Is the range empty?
SELECT isempty(numrange(1, 5));
</pre>
  <p>
   See
   <a class=""xref"" href=""functions-range.html#RANGE-OPERATORS-TABLE"" title=""Table 9.56. Range Operators"">
    Table 9.56
   </a>
   and
   <a class=""xref"" href=""functions-range.html#RANGE-FUNCTIONS-TABLE"" title=""Table 9.58. Range Functions"">
    Table 9.58
   </a>
   for complete lists of operators and functions on range types.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-INCLUSIVITY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.3. Inclusive and Exclusive Bounds
      <a class=""id_link"" href=""#RANGETYPES-INCLUSIVITY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Every non-empty range has two bounds, the lower bound and the upper bound. All points between these values are included in the range. An inclusive bound means that the boundary point itself is included in the range as well, while an exclusive bound means that the boundary point is not included in the range.
  </p>
  <p>
   In the text form of a range, an inclusive lower bound is represented by
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      [
     </code>
    </span>
    ”
   </span>
   while an exclusive lower bound is represented by
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      (
     </code>
    </span>
    ”
   </span>
   . Likewise, an inclusive upper bound is represented by
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      ]
     </code>
    </span>
    ”
   </span>
   , while an exclusive upper bound is represented by
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      )
     </code>
    </span>
    ”
   </span>
   . (See
   <a class=""xref"" href=""rangetypes.html#RANGETYPES-IO"" title=""8.17.5. Range Input/Output"">
    Section 8.17.5
   </a>
   for more details.)
  </p>
  <p>
   The functions
   <code class=""literal"">
    lower_inc
   </code>
   and
   <code class=""literal"">
    upper_inc
   </code>
   test the inclusivity of the lower and upper bounds of a range value, respectively.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-INFINITE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.4. Infinite (Unbounded) Ranges
      <a class=""id_link"" href=""#RANGETYPES-INFINITE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The lower bound of a range can be omitted, meaning that all values less than the upper bound are included in the range, e.g.,
   <code class=""literal"">
    (,3]
   </code>
   . Likewise, if the upper bound of the range is omitted, then all values greater than the lower bound are included in the range. If both lower and upper bounds are omitted, all values of the element type are considered to be in the range. Specifying a missing bound as inclusive is automatically converted to exclusive, e.g.,
   <code class=""literal"">
    [,]
   </code>
   is converted to
   <code class=""literal"">
    (,)
   </code>
   . You can think of these missing values as +/-infinity, but they are special range type values and are considered to be beyond any range element type's +/-infinity values.
  </p>
  <p>
   Element types that have the notion of
   <span class=""quote"">
    “
    <span class=""quote"">
     infinity
    </span>
    ”
   </span>
   can use them as explicit bound values. For example, with timestamp ranges,
   <code class=""literal"">
    [today,infinity)
   </code>
   excludes the special
   <code class=""type"">
    timestamp
   </code>
   value
   <code class=""literal"">
    infinity
   </code>
   , while
   <code class=""literal"">
    [today,infinity]
   </code>
   include it, as does
   <code class=""literal"">
    [today,)
   </code>
   and
   <code class=""literal"">
    [today,]
   </code>
   .
  </p>
  <p>
   The functions
   <code class=""literal"">
    lower_inf
   </code>
   and
   <code class=""literal"">
    upper_inf
   </code>
   test for infinite lower and upper bounds of a range, respectively.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-IO"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.5. Range Input/Output
      <a class=""id_link"" href=""#RANGETYPES-IO"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The input for a range value must follow one of the following patterns:
  </p>
  <pre class=""synopsis"">
(<em class=""replaceable""><code>lower-bound</code></em>,<em class=""replaceable""><code>upper-bound</code></em>)
(<em class=""replaceable""><code>lower-bound</code></em>,<em class=""replaceable""><code>upper-bound</code></em>]
[<em class=""replaceable""><code>lower-bound</code></em>,<em class=""replaceable""><code>upper-bound</code></em>)
[<em class=""replaceable""><code>lower-bound</code></em>,<em class=""replaceable""><code>upper-bound</code></em>]
empty
</pre>
  <p>
   The parentheses or brackets indicate whether the lower and upper bounds are exclusive or inclusive, as described previously. Notice that the final pattern is
   <code class=""literal"">
    empty
   </code>
   , which represents an empty range (a range that contains no points).
  </p>
  <p>
   The
   <em class=""replaceable"">
    <code>
     lower-bound
    </code>
   </em>
   may be either a string that is valid input for the subtype, or empty to indicate no lower bound. Likewise,
   <em class=""replaceable"">
    <code>
     upper-bound
    </code>
   </em>
   may be either a string that is valid input for the subtype, or empty to indicate no upper bound.
  </p>
  <p>
   Each bound value can be quoted using
   <code class=""literal"">
    ""
   </code>
   (double quote) characters. This is necessary if the bound value contains parentheses, brackets, commas, double quotes, or backslashes, since these characters would otherwise be taken as part of the range syntax. To put a double quote or backslash in a quoted bound value, precede it with a backslash. (Also, a pair of double quotes within a double-quoted bound value is taken to represent a double quote character, analogously to the rules for single quotes in SQL literal strings.) Alternatively, you can avoid quoting and use backslash-escaping to protect all data characters that would otherwise be taken as range syntax. Also, to write a bound value that is an empty string, write
   <code class=""literal"">
    """"
   </code>
   , since writing nothing means an infinite bound.
  </p>
  <p>
   Whitespace is allowed before and after the range value, but any whitespace between the parentheses or brackets is taken as part of the lower or upper bound value. (Depending on the element type, it might or might not be significant.)
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    These rules are very similar to those for writing field values in composite-type literals. See
    <a class=""xref"" href=""rowtypes.html#ROWTYPES-IO-SYNTAX"" title=""8.16.6. Composite Type Input and Output Syntax"">
     Section 8.16.6
    </a>
    for additional commentary.
   </p>
  </div>
  <p>
   Examples:
  </p>
  <pre class=""programlisting"">
-- includes 3, does not include 7, and does include all points in between
SELECT '[3,7)'::int4range;

-- does not include either 3 or 7, but includes all points in between
SELECT '(3,7)'::int4range;

-- includes only the single point 4
SELECT '[4,4]'::int4range;

-- includes no points (and will be normalized to 'empty')
SELECT '[4,4)'::int4range;
</pre>
  <p>
   The input for a multirange is curly brackets (
   <code class=""literal"">
    {
   </code>
   and
   <code class=""literal"">
    }
   </code>
   ) containing zero or more valid ranges, separated by commas. Whitespace is permitted around the brackets and commas. This is intended to be reminiscent of array syntax, although multiranges are much simpler: they have just one dimension and there is no need to quote their contents. (The bounds of their ranges may be quoted as above however.)
  </p>
  <p>
   Examples:
  </p>
  <pre class=""programlisting"">
SELECT '{}'::int4multirange;
SELECT '{[3,7)}'::int4multirange;
SELECT '{[3,7), [8,9)}'::int4multirange;
</pre>
 </div>
 <div class=""sect2"" id=""RANGETYPES-CONSTRUCT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.6. Constructing Ranges and Multiranges
      <a class=""id_link"" href=""#RANGETYPES-CONSTRUCT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Each range type has a constructor function with the same name as the range type. Using the constructor function is frequently more convenient than writing a range literal constant, since it avoids the need for extra quoting of the bound values. The constructor function accepts two or three arguments. The two-argument form constructs a range in standard form (lower bound inclusive, upper bound exclusive), while the three-argument form constructs a range with bounds of the form specified by the third argument. The third argument must be one of the strings
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      ()
     </code>
    </span>
    ”
   </span>
   ,
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      (]
     </code>
    </span>
    ”
   </span>
   ,
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      [)
     </code>
    </span>
    ”
   </span>
   , or
   <span class=""quote"">
    “
    <span class=""quote"">
     <code class=""literal"">
      []
     </code>
    </span>
    ”
   </span>
   . For example:
  </p>
  <pre class=""programlisting"">
-- The full form is: lower bound, upper bound, and text argument indicating
-- inclusivity/exclusivity of bounds.
SELECT numrange(1.0, 14.0, '(]');

-- If the third argument is omitted, '[)' is assumed.
SELECT numrange(1.0, 14.0);

-- Although '(]' is specified here, on display the value will be converted to
-- canonical form, since int8range is a discrete range type (see below).
SELECT int8range(1, 14, '(]');

-- Using NULL for either bound causes the range to be unbounded on that side.
SELECT numrange(NULL, 2.2);
</pre>
  <p>
   Each range type also has a multirange constructor with the same name as the multirange type. The constructor function takes zero or more arguments which are all ranges of the appropriate type. For example:
  </p>
  <pre class=""programlisting"">
SELECT nummultirange();
SELECT nummultirange(numrange(1.0, 14.0));
SELECT nummultirange(numrange(1.0, 14.0), numrange(20.0, 25.0));
</pre>
 </div>
 <div class=""sect2"" id=""RANGETYPES-DISCRETE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.7. Discrete Range Types
      <a class=""id_link"" href=""#RANGETYPES-DISCRETE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   A discrete range is one whose element type has a well-defined
   <span class=""quote"">
    “
    <span class=""quote"">
     step
    </span>
    ”
   </span>
   , such as
   <code class=""type"">
    integer
   </code>
   or
   <code class=""type"">
    date
   </code>
   . In these types two elements can be said to be adjacent, when there are no valid values between them. This contrasts with continuous ranges, where it's always (or almost always) possible to identify other element values between two given values. For example, a range over the
   <code class=""type"">
    numeric
   </code>
   type is continuous, as is a range over
   <code class=""type"">
    timestamp
   </code>
   . (Even though
   <code class=""type"">
    timestamp
   </code>
   has limited precision, and so could theoretically be treated as discrete, it's better to consider it continuous since the step size is normally not of interest.)
  </p>
  <p>
   Another way to think about a discrete range type is that there is a clear idea of a
   <span class=""quote"">
    “
    <span class=""quote"">
     next
    </span>
    ”
   </span>
   or
   <span class=""quote"">
    “
    <span class=""quote"">
     previous
    </span>
    ”
   </span>
   value for each element value. Knowing that, it is possible to convert between inclusive and exclusive representations of a range's bounds, by choosing the next or previous element value instead of the one originally given. For example, in an integer range type
   <code class=""literal"">
    [4,8]
   </code>
   and
   <code class=""literal"">
    (3,9)
   </code>
   denote the same set of values; but this would not be so for a range over numeric.
  </p>
  <p>
   A discrete range type should have a
   <em class=""firstterm"">
    canonicalization
   </em>
   function that is aware of the desired step size for the element type. The canonicalization function is charged with converting equivalent values of the range type to have identical representations, in particular consistently inclusive or exclusive bounds. If a canonicalization function is not specified, then ranges with different formatting will always be treated as unequal, even though they might represent the same set of values in reality.
  </p>
  <p>
   The built-in range types
   <code class=""type"">
    int4range
   </code>
   ,
   <code class=""type"">
    int8range
   </code>
   , and
   <code class=""type"">
    daterange
   </code>
   all use a canonical form that includes the lower bound and excludes the upper bound; that is,
   <code class=""literal"">
    [)
   </code>
   . User-defined range types can use other conventions, however.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-DEFINING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.8. Defining New Range Types
      <a class=""id_link"" href=""#RANGETYPES-DEFINING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Users can define their own range types. The most common reason to do this is to use ranges over subtypes not provided among the built-in range types. For example, to define a new range type of subtype
   <code class=""type"">
    float8
   </code>
   :
  </p>
  <pre class=""programlisting"">
CREATE TYPE floatrange AS RANGE (
    subtype = float8,
    subtype_diff = float8mi
);

SELECT '[1.234, 5.678]'::floatrange;
</pre>
  <p>
   Because
   <code class=""type"">
    float8
   </code>
   has no meaningful
   <span class=""quote"">
    “
    <span class=""quote"">
     step
    </span>
    ”
   </span>
   , we do not define a canonicalization function in this example.
  </p>
  <p>
   When you define your own range you automatically get a corresponding multirange type.
  </p>
  <p>
   Defining your own range type also allows you to specify a different subtype B-tree operator class or collation to use, so as to change the sort ordering that determines which values fall into a given range.
  </p>
  <p>
   If the subtype is considered to have discrete rather than continuous values, the
   <code class=""command"">
    CREATE TYPE
   </code>
   command should specify a
   <code class=""literal"">
    canonical
   </code>
   function. The canonicalization function takes an input range value, and must return an equivalent range value that may have different bounds and formatting. The canonical output for two ranges that represent the same set of values, for example the integer ranges
   <code class=""literal"">
    [1, 7]
   </code>
   and
   <code class=""literal"">
    [1, 8)
   </code>
   , must be identical. It doesn't matter which representation you choose to be the canonical one, so long as two equivalent values with different formattings are always mapped to the same value with the same formatting. In addition to adjusting the inclusive/exclusive bounds format, a canonicalization function might round off boundary values, in case the desired step size is larger than what the subtype is capable of storing. For instance, a range type over
   <code class=""type"">
    timestamp
   </code>
   could be defined to have a step size of an hour, in which case the canonicalization function would need to round off bounds that weren't a multiple of an hour, or perhaps throw an error instead.
  </p>
  <p>
   In addition, any range type that is meant to be used with GiST or SP-GiST indexes should define a subtype difference, or
   <code class=""literal"">
    subtype_diff
   </code>
   , function. (The index will still work without
   <code class=""literal"">
    subtype_diff
   </code>
   , but it is likely to be considerably less efficient than if a difference function is provided.) The subtype difference function takes two input values of the subtype, and returns their difference (i.e.,
   <em class=""replaceable"">
    <code>
     X
    </code>
   </em>
   minus
   <em class=""replaceable"">
    <code>
     Y
    </code>
   </em>
   ) represented as a
   <code class=""type"">
    float8
   </code>
   value. In our example above, the function
   <code class=""function"">
    float8mi
   </code>
   that underlies the regular
   <code class=""type"">
    float8
   </code>
   minus operator can be used; but for any other subtype, some type conversion would be necessary. Some creative thought about how to represent differences as numbers might be needed, too. To the greatest extent possible, the
   <code class=""literal"">
    subtype_diff
   </code>
   function should agree with the sort ordering implied by the selected operator class and collation; that is, its result should be positive whenever its first argument is greater than its second according to the sort ordering.
  </p>
  <p>
   A less-oversimplified example of a
   <code class=""literal"">
    subtype_diff
   </code>
   function is:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION time_subtype_diff(x time, y time) RETURNS float8 AS
'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;

CREATE TYPE timerange AS RANGE (
    subtype = time,
    subtype_diff = time_subtype_diff
);

SELECT '[11:10, 23:00]'::timerange;
</pre>
  <p>
   See
   <a class=""xref"" href=""sql-createtype.html"" title=""CREATE TYPE"">
    <span class=""refentrytitle"">
     CREATE TYPE
    </span>
   </a>
   for more information about creating range types.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-INDEXING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.9. Indexing
      <a class=""id_link"" href=""#RANGETYPES-INDEXING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.25.15.2"" name=""id-1.5.7.25.15.2"">
  </a>
  <p>
   GiST and SP-GiST indexes can be created for table columns of range types. GiST indexes can be also created for table columns of multirange types. For instance, to create a GiST index:
  </p>
  <pre class=""programlisting"">
CREATE INDEX reservation_idx ON reservation USING GIST (during);
</pre>
  <p>
   A GiST or SP-GiST index on ranges can accelerate queries involving these range operators:
   <code class=""literal"">
    =
   </code>
   ,
   <code class=""literal"">
    &amp;&amp;
   </code>
   ,
   <code class=""literal"">
    &lt;@
   </code>
   ,
   <code class=""literal"">
    @&gt;
   </code>
   ,
   <code class=""literal"">
    &lt;&lt;
   </code>
   ,
   <code class=""literal"">
    &gt;&gt;
   </code>
   ,
   <code class=""literal"">
    -|-
   </code>
   ,
   <code class=""literal"">
    &amp;&lt;
   </code>
   , and
   <code class=""literal"">
    &amp;&gt;
   </code>
   . A GiST index on multiranges can accelerate queries involving the same set of multirange operators. A GiST index on ranges and GiST index on multiranges can also accelerate queries involving these cross-type range to multirange and multirange to range operators correspondingly:
   <code class=""literal"">
    &amp;&amp;
   </code>
   ,
   <code class=""literal"">
    &lt;@
   </code>
   ,
   <code class=""literal"">
    @&gt;
   </code>
   ,
   <code class=""literal"">
    &lt;&lt;
   </code>
   ,
   <code class=""literal"">
    &gt;&gt;
   </code>
   ,
   <code class=""literal"">
    -|-
   </code>
   ,
   <code class=""literal"">
    &amp;&lt;
   </code>
   , and
   <code class=""literal"">
    &amp;&gt;
   </code>
   . See
   <a class=""xref"" href=""functions-range.html#RANGE-OPERATORS-TABLE"" title=""Table 9.56. Range Operators"">
    Table 9.56
   </a>
   for more information.
  </p>
  <p>
   In addition, B-tree and hash indexes can be created for table columns of range types. For these index types, basically the only useful range operation is equality. There is a B-tree sort ordering defined for range values, with corresponding
   <code class=""literal"">
    &lt;
   </code>
   and
   <code class=""literal"">
    &gt;
   </code>
   operators, but the ordering is rather arbitrary and not usually useful in the real world. Range types' B-tree and hash support is primarily meant to allow sorting and hashing internally in queries, rather than creation of actual indexes.
  </p>
 </div>
 <div class=""sect2"" id=""RANGETYPES-CONSTRAINT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      8.17.10. Constraints on Ranges
      <a class=""id_link"" href=""#RANGETYPES-CONSTRAINT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.7.25.16.2"" name=""id-1.5.7.25.16.2"">
  </a>
  <p>
   While
   <code class=""literal"">
    UNIQUE
   </code>
   is a natural constraint for scalar values, it is usually unsuitable for range types. Instead, an exclusion constraint is often more appropriate (see
   <a class=""link"" href=""sql-createtable.html#SQL-CREATETABLE-EXCLUDE"">
    CREATE TABLE ... CONSTRAINT ... EXCLUDE
   </a>
   ). Exclusion constraints allow the specification of constraints such as
   <span class=""quote"">
    “
    <span class=""quote"">
     non-overlapping
    </span>
    ”
   </span>
   on a range type. For example:
  </p>
  <pre class=""programlisting"">
CREATE TABLE reservation (
    during tsrange,
    EXCLUDE USING GIST (during WITH &amp;&amp;)
);
</pre>
  <p>
   That constraint will prevent any overlapping values from existing in the table at the same time:
  </p>
  <pre class=""programlisting"">
INSERT INTO reservation VALUES
    ('[2010-01-01 11:30, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO reservation VALUES
    ('[2010-01-01 14:45, 2010-01-01 15:45)');
ERROR:  conflicting key value violates exclusion constraint ""reservation_during_excl""
DETAIL:  Key (during)=([""2010-01-01 14:45:00"",""2010-01-01 15:45:00"")) conflicts
with existing key (during)=([""2010-01-01 11:30:00"",""2010-01-01 15:00:00"")).
</pre>
  <p>
   You can use the
   <a class=""link"" href=""btree-gist.html"" title=""F.8. btree_gist — GiST operator classes with B-tree behavior"">
    <code class=""literal"">
     btree_gist
    </code>
   </a>
   extension to define exclusion constraints on plain scalar data types, which can then be combined with range exclusions for maximum flexibility. For example, after
   <code class=""literal"">
    btree_gist
   </code>
   is installed, the following constraint will reject overlapping ranges only if the meeting room numbers are equal:
  </p>
  <pre class=""programlisting"">
CREATE EXTENSION btree_gist;
CREATE TABLE room_reservation (
    room text,
    during tsrange,
    EXCLUDE USING GIST (room WITH =, during WITH &amp;&amp;)
);

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');
INSERT 0 1

INSERT INTO room_reservation VALUES
    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');
ERROR:  conflicting key value violates exclusion constraint ""room_reservation_room_during_excl""
DETAIL:  Key (room, during)=(123A, [""2010-01-01 14:30:00"",""2010-01-01 15:30:00"")) conflicts
with existing key (room, during)=(123A, [""2010-01-01 14:00:00"",""2010-01-01 15:00:00"")).

INSERT INTO room_reservation VALUES
    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');
INSERT 0 1
</pre>
 </div>
</div>
"
8. Data Types,8.18. Domain Types,https://www.postgresql.org/docs/17/domains.html,"<div class=""sect1"" id=""DOMAINS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.18. Domain Types
     <a class=""id_link"" href=""#DOMAINS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.26.2"" name=""id-1.5.7.26.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.26.3"" name=""id-1.5.7.26.3"">
 </a>
 <p>
  A
  <em class=""firstterm"">
   domain
  </em>
  is a user-defined data type that is based on another
  <em class=""firstterm"">
   underlying type
  </em>
  . Optionally, it can have constraints that restrict its valid values to a subset of what the underlying type would allow. Otherwise it behaves like the underlying type — for example, any operator or function that can be applied to the underlying type will work on the domain type. The underlying type can be any built-in or user-defined base type, enum type, array type, composite type, range type, or another domain.
 </p>
 <p>
  For example, we could create a domain over integers that accepts only positive integers:
 </p>
 <pre class=""programlisting"">
CREATE DOMAIN posint AS integer CHECK (VALUE &gt; 0);
CREATE TABLE mytable (id posint);
INSERT INTO mytable VALUES(1);   -- works
INSERT INTO mytable VALUES(-1);  -- fails
</pre>
 <p>
  When an operator or function of the underlying type is applied to a domain value, the domain is automatically down-cast to the underlying type. Thus, for example, the result of
  <code class=""literal"">
   mytable.id - 1
  </code>
  is considered to be of type
  <code class=""type"">
   integer
  </code>
  not
  <code class=""type"">
   posint
  </code>
  . We could write
  <code class=""literal"">
   (mytable.id - 1)::posint
  </code>
  to cast the result back to
  <code class=""type"">
   posint
  </code>
  , causing the domain's constraints to be rechecked. In this case, that would result in an error if the expression had been applied to an
  <code class=""structfield"">
   id
  </code>
  value of 1. Assigning a value of the underlying type to a field or variable of the domain type is allowed without writing an explicit cast, but the domain's constraints will be checked.
 </p>
 <p>
  For additional information see
  <a class=""xref"" href=""sql-createdomain.html"" title=""CREATE DOMAIN"">
   <span class=""refentrytitle"">
    CREATE DOMAIN
   </span>
  </a>
  .
 </p>
</div>
"
8. Data Types,8.19. Object Identifier Types,https://www.postgresql.org/docs/17/datatype-oid.html,"<div class=""sect1"" id=""DATATYPE-OID"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.19. Object Identifier Types
     <a class=""id_link"" href=""#DATATYPE-OID"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.27.2"" name=""id-1.5.7.27.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.3"" name=""id-1.5.7.27.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.4"" name=""id-1.5.7.27.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.5"" name=""id-1.5.7.27.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.6"" name=""id-1.5.7.27.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.7"" name=""id-1.5.7.27.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.8"" name=""id-1.5.7.27.8"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.9"" name=""id-1.5.7.27.9"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.10"" name=""id-1.5.7.27.10"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.11"" name=""id-1.5.7.27.11"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.12"" name=""id-1.5.7.27.12"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.13"" name=""id-1.5.7.27.13"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.14"" name=""id-1.5.7.27.14"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.15"" name=""id-1.5.7.27.15"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.16"" name=""id-1.5.7.27.16"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.17"" name=""id-1.5.7.27.17"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.27.18"" name=""id-1.5.7.27.18"">
 </a>
 <p>
  Object identifiers (OIDs) are used internally by
  <span class=""productname"">
   PostgreSQL
  </span>
  as primary keys for various system tables. Type
  <code class=""type"">
   oid
  </code>
  represents an object identifier. There are also several alias types for
  <code class=""type"">
   oid
  </code>
  , each named
  <code class=""type"">
   reg
   <em class=""replaceable"">
    <code>
     something
    </code>
   </em>
  </code>
  .
  <a class=""xref"" href=""datatype-oid.html#DATATYPE-OID-TABLE"" title=""Table 8.26. Object Identifier Types"">
   Table 8.26
  </a>
  shows an overview.
 </p>
 <p>
  The
  <code class=""type"">
   oid
  </code>
  type is currently implemented as an unsigned four-byte integer. Therefore, it is not large enough to provide database-wide uniqueness in large databases, or even in large individual tables.
 </p>
 <p>
  The
  <code class=""type"">
   oid
  </code>
  type itself has few operations beyond comparison. It can be cast to integer, however, and then manipulated using the standard integer operators. (Beware of possible signed-versus-unsigned confusion if you do this.)
 </p>
 <p>
  The OID alias types have no operations of their own except for specialized input and output routines. These routines are able to accept and display symbolic names for system objects, rather than the raw numeric value that type
  <code class=""type"">
   oid
  </code>
  would use. The alias types allow simplified lookup of OID values for objects. For example, to examine the
  <code class=""structname"">
   pg_attribute
  </code>
  rows related to a table
  <code class=""literal"">
   mytable
  </code>
  , one could write:
 </p>
 <pre class=""programlisting"">
SELECT * FROM pg_attribute WHERE attrelid = 'mytable'::regclass;
</pre>
 <p>
  rather than:
 </p>
 <pre class=""programlisting"">
SELECT * FROM pg_attribute
  WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'mytable');
</pre>
 <p>
  While that doesn't look all that bad by itself, it's still oversimplified. A far more complicated sub-select would be needed to select the right OID if there are multiple tables named
  <code class=""literal"">
   mytable
  </code>
  in different schemas. The
  <code class=""type"">
   regclass
  </code>
  input converter handles the table lookup according to the schema path setting, and so it does the
  <span class=""quote"">
   “
   <span class=""quote"">
    right thing
   </span>
   ”
  </span>
  automatically. Similarly, casting a table's OID to
  <code class=""type"">
   regclass
  </code>
  is handy for symbolic display of a numeric OID.
 </p>
 <div class=""table"" id=""DATATYPE-OID-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.26. Object Identifier Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Object Identifier Types"">
    <colgroup>
     <col/>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       References
      </th>
      <th>
       Description
      </th>
      <th>
       Value Example
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        oid
       </code>
      </td>
      <td>
       any
      </td>
      <td>
       numeric object identifier
      </td>
      <td>
       <code class=""literal"">
        564182
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regclass
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_class
       </code>
      </td>
      <td>
       relation name
      </td>
      <td>
       <code class=""literal"">
        pg_type
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regcollation
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_collation
       </code>
      </td>
      <td>
       collation name
      </td>
      <td>
       <code class=""literal"">
        ""POSIX""
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regconfig
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_ts_config
       </code>
      </td>
      <td>
       text search configuration
      </td>
      <td>
       <code class=""literal"">
        english
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regdictionary
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_ts_dict
       </code>
      </td>
      <td>
       text search dictionary
      </td>
      <td>
       <code class=""literal"">
        simple
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regnamespace
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_namespace
       </code>
      </td>
      <td>
       namespace name
      </td>
      <td>
       <code class=""literal"">
        pg_catalog
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regoper
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_operator
       </code>
      </td>
      <td>
       operator name
      </td>
      <td>
       <code class=""literal"">
        +
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regoperator
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_operator
       </code>
      </td>
      <td>
       operator with argument types
      </td>
      <td>
       <code class=""literal"">
        *(integer,​integer)
       </code>
       or
       <code class=""literal"">
        -(NONE,​integer)
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regproc
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_proc
       </code>
      </td>
      <td>
       function name
      </td>
      <td>
       <code class=""literal"">
        sum
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regprocedure
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_proc
       </code>
      </td>
      <td>
       function with argument types
      </td>
      <td>
       <code class=""literal"">
        sum(int4)
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regrole
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_authid
       </code>
      </td>
      <td>
       role name
      </td>
      <td>
       <code class=""literal"">
        smithee
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        regtype
       </code>
      </td>
      <td>
       <code class=""structname"">
        pg_type
       </code>
      </td>
      <td>
       data type name
      </td>
      <td>
       <code class=""literal"">
        integer
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  All of the OID alias types for objects that are grouped by namespace accept schema-qualified names, and will display schema-qualified names on output if the object would not be found in the current search path without being qualified. For example,
  <code class=""literal"">
   myschema.mytable
  </code>
  is acceptable input for
  <code class=""type"">
   regclass
  </code>
  (if there is such a table). That value might be output as
  <code class=""literal"">
   myschema.mytable
  </code>
  , or just
  <code class=""literal"">
   mytable
  </code>
  , depending on the current search path. The
  <code class=""type"">
   regproc
  </code>
  and
  <code class=""type"">
   regoper
  </code>
  alias types will only accept input names that are unique (not overloaded), so they are of limited use; for most uses
  <code class=""type"">
   regprocedure
  </code>
  or
  <code class=""type"">
   regoperator
  </code>
  are more appropriate. For
  <code class=""type"">
   regoperator
  </code>
  , unary operators are identified by writing
  <code class=""literal"">
   NONE
  </code>
  for the unused operand.
 </p>
 <p>
  The input functions for these types allow whitespace between tokens, and will fold upper-case letters to lower case, except within double quotes; this is done to make the syntax rules similar to the way object names are written in SQL. Conversely, the output functions will use double quotes if needed to make the output be a valid SQL identifier. For example, the OID of a function named
  <code class=""literal"">
   Foo
  </code>
  (with upper case
  <code class=""literal"">
   F
  </code>
  ) taking two integer arguments could be entered as
  <code class=""literal"">
   ' ""Foo"" ( int, integer ) '::regprocedure
  </code>
  . The output would look like
  <code class=""literal"">
   ""Foo""(integer,integer)
  </code>
  . Both the function name and the argument type names could be schema-qualified, too.
 </p>
 <p>
  Many built-in
  <span class=""productname"">
   PostgreSQL
  </span>
  functions accept the OID of a table, or another kind of database object, and for convenience are declared as taking
  <code class=""type"">
   regclass
  </code>
  (or the appropriate OID alias type). This means you do not have to look up the object's OID by hand, but can just enter its name as a string literal. For example, the
  <code class=""function"">
   nextval(regclass)
  </code>
  function takes a sequence relation's OID, so you could call it like this:
 </p>
 <pre class=""programlisting"">
nextval('foo')              <em class=""lineannotation""><span class=""lineannotation"">operates on sequence <code class=""literal"">foo</code></span></em>
nextval('FOO')              <em class=""lineannotation""><span class=""lineannotation"">same as above</span></em>
nextval('""Foo""')            <em class=""lineannotation""><span class=""lineannotation"">operates on sequence <code class=""literal"">Foo</code></span></em>
nextval('myschema.foo')     <em class=""lineannotation""><span class=""lineannotation"">operates on <code class=""literal"">myschema.foo</code></span></em>
nextval('""myschema"".foo')   <em class=""lineannotation""><span class=""lineannotation"">same as above</span></em>
nextval('foo')              <em class=""lineannotation""><span class=""lineannotation"">searches search path for <code class=""literal"">foo</code></span></em>
</pre>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   When you write the argument of such a function as an unadorned literal string, it becomes a constant of type
   <code class=""type"">
    regclass
   </code>
   (or the appropriate type). Since this is really just an OID, it will track the originally identified object despite later renaming, schema reassignment, etc. This
   <span class=""quote"">
    “
    <span class=""quote"">
     early binding
    </span>
    ”
   </span>
   behavior is usually desirable for object references in column defaults and views. But sometimes you might want
   <span class=""quote"">
    “
    <span class=""quote"">
     late binding
    </span>
    ”
   </span>
   where the object reference is resolved at run time. To get late-binding behavior, force the constant to be stored as a
   <code class=""type"">
    text
   </code>
   constant instead of
   <code class=""type"">
    regclass
   </code>
   :
  </p>
  <pre class=""programlisting"">
nextval('foo'::text)      <em class=""lineannotation""><span class=""lineannotation""><code class=""literal"">foo</code> is looked up at runtime</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    to_regclass()
   </code>
   function and its siblings can also be used to perform run-time lookups. See
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE"" title=""Table 9.74. System Catalog Information Functions"">
    Table 9.74
   </a>
   .
  </p>
 </div>
 <p>
  Another practical example of use of
  <code class=""type"">
   regclass
  </code>
  is to look up the OID of a table listed in the
  <code class=""literal"">
   information_schema
  </code>
  views, which don't supply such OIDs directly. One might for example wish to call the
  <code class=""function"">
   pg_relation_size()
  </code>
  function, which requires the table OID. Taking the above rules into account, the correct way to do that is
 </p>
 <pre class=""programlisting"">
SELECT table_schema, table_name,
       pg_relation_size((quote_ident(table_schema) || '.' ||
                         quote_ident(table_name))::regclass)
FROM information_schema.tables
WHERE ...
</pre>
 <p>
  The
  <code class=""function"">
   quote_ident()
  </code>
  function will take care of double-quoting the identifiers where needed. The seemingly easier
 </p>
 <pre class=""programlisting"">
SELECT pg_relation_size(table_name)
FROM information_schema.tables
WHERE ...
</pre>
 <p>
  is
  <span class=""emphasis"">
   <em>
    not recommended
   </em>
  </span>
  , because it will fail for tables that are outside your search path or have names that require quoting.
 </p>
 <p>
  An additional property of most of the OID alias types is the creation of dependencies. If a constant of one of these types appears in a stored expression (such as a column default expression or view), it creates a dependency on the referenced object. For example, if a column has a default expression
  <code class=""literal"">
   nextval('my_seq'::regclass)
  </code>
  ,
  <span class=""productname"">
   PostgreSQL
  </span>
  understands that the default expression depends on the sequence
  <code class=""literal"">
   my_seq
  </code>
  , so the system will not let the sequence be dropped without first removing the default expression. The alternative of
  <code class=""literal"">
   nextval('my_seq'::text)
  </code>
  does not create a dependency. (
  <code class=""type"">
   regrole
  </code>
  is an exception to this property. Constants of this type are not allowed in stored expressions.)
 </p>
 <p>
  Another identifier type used by the system is
  <code class=""type"">
   xid
  </code>
  , or transaction (abbreviated
  <abbr class=""abbrev"">
   xact
  </abbr>
  ) identifier. This is the data type of the system columns
  <code class=""structfield"">
   xmin
  </code>
  and
  <code class=""structfield"">
   xmax
  </code>
  . Transaction identifiers are 32-bit quantities. In some contexts, a 64-bit variant
  <code class=""type"">
   xid8
  </code>
  is used. Unlike
  <code class=""type"">
   xid
  </code>
  values,
  <code class=""type"">
   xid8
  </code>
  values increase strictly monotonically and cannot be reused in the lifetime of a database cluster. See
  <a class=""xref"" href=""transaction-id.html"" title=""66.1. Transactions and Identifiers"">
   Section 66.1
  </a>
  for more details.
 </p>
 <p>
  A third identifier type used by the system is
  <code class=""type"">
   cid
  </code>
  , or command identifier. This is the data type of the system columns
  <code class=""structfield"">
   cmin
  </code>
  and
  <code class=""structfield"">
   cmax
  </code>
  . Command identifiers are also 32-bit quantities.
 </p>
 <p>
  A final identifier type used by the system is
  <code class=""type"">
   tid
  </code>
  , or tuple identifier (row identifier). This is the data type of the system column
  <code class=""structfield"">
   ctid
  </code>
  . A tuple ID is a pair (block number, tuple index within block) that identifies the physical location of the row within its table.
 </p>
 <p>
  (The system columns are further explained in
  <a class=""xref"" href=""ddl-system-columns.html"" title=""5.6. System Columns"">
   Section 5.6
  </a>
  .)
 </p>
</div>
"
8. Data Types,8.20. pg_lsn Type,https://www.postgresql.org/docs/17/datatype-pg-lsn.html,"<div class=""sect1"" id=""DATATYPE-PG-LSN"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.20.
     <code class=""type"">
      pg_lsn
     </code>
     Type
     <a class=""id_link"" href=""#DATATYPE-PG-LSN"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.28.2"" name=""id-1.5.7.28.2"">
 </a>
 <p>
  The
  <code class=""type"">
   pg_lsn
  </code>
  data type can be used to store LSN (Log Sequence Number) data which is a pointer to a location in the WAL. This type is a representation of
  <code class=""type"">
   XLogRecPtr
  </code>
  and an internal system type of
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
 <p>
  Internally, an LSN is a 64-bit integer, representing a byte position in the write-ahead log stream. It is printed as two hexadecimal numbers of up to 8 digits each, separated by a slash; for example,
  <code class=""literal"">
   16/B374D848
  </code>
  . The
  <code class=""type"">
   pg_lsn
  </code>
  type supports the standard comparison operators, like
  <code class=""literal"">
   =
  </code>
  and
  <code class=""literal"">
   &gt;
  </code>
  . Two LSNs can be subtracted using the
  <code class=""literal"">
   -
  </code>
  operator; the result is the number of bytes separating those write-ahead log locations. Also the number of bytes can be added into and subtracted from LSN using the
  <code class=""literal"">
   +(pg_lsn,numeric)
  </code>
  and
  <code class=""literal"">
   -(pg_lsn,numeric)
  </code>
  operators, respectively. Note that the calculated LSN should be in the range of
  <code class=""type"">
   pg_lsn
  </code>
  type, i.e., between
  <code class=""literal"">
   0/0
  </code>
  and
  <code class=""literal"">
   FFFFFFFF/FFFFFFFF
  </code>
  .
 </p>
</div>
"
8. Data Types,8.21. Pseudo-Types,https://www.postgresql.org/docs/17/datatype-pseudo.html,"<div class=""sect1"" id=""DATATYPE-PSEUDO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     8.21. Pseudo-Types
     <a class=""id_link"" href=""#DATATYPE-PSEUDO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.7.29.2"" name=""id-1.5.7.29.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.3"" name=""id-1.5.7.29.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.4"" name=""id-1.5.7.29.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.5"" name=""id-1.5.7.29.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.6"" name=""id-1.5.7.29.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.7"" name=""id-1.5.7.29.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.8"" name=""id-1.5.7.29.8"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.9"" name=""id-1.5.7.29.9"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.10"" name=""id-1.5.7.29.10"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.11"" name=""id-1.5.7.29.11"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.12"" name=""id-1.5.7.29.12"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.13"" name=""id-1.5.7.29.13"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.14"" name=""id-1.5.7.29.14"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.15"" name=""id-1.5.7.29.15"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.16"" name=""id-1.5.7.29.16"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.17"" name=""id-1.5.7.29.17"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.18"" name=""id-1.5.7.29.18"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.19"" name=""id-1.5.7.29.19"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.20"" name=""id-1.5.7.29.20"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.21"" name=""id-1.5.7.29.21"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.22"" name=""id-1.5.7.29.22"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.23"" name=""id-1.5.7.29.23"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.24"" name=""id-1.5.7.29.24"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.25"" name=""id-1.5.7.29.25"">
 </a>
 <a class=""indexterm"" id=""id-1.5.7.29.26"" name=""id-1.5.7.29.26"">
 </a>
 <p>
  The
  <span class=""productname"">
   PostgreSQL
  </span>
  type system contains a number of special-purpose entries that are collectively called
  <em class=""firstterm"">
   pseudo-types
  </em>
  . A pseudo-type cannot be used as a column data type, but it can be used to declare a function's argument or result type. Each of the available pseudo-types is useful in situations where a function's behavior does not correspond to simply taking or returning a value of a specific
  <acronym class=""acronym"">
   SQL
  </acronym>
  data type.
  <a class=""xref"" href=""datatype-pseudo.html#DATATYPE-PSEUDOTYPES-TABLE"" title=""Table 8.27. Pseudo-Types"">
   Table 8.27
  </a>
  lists the existing pseudo-types.
 </p>
 <div class=""table"" id=""DATATYPE-PSEUDOTYPES-TABLE"">
  <p class=""title"">
   <strong>
    Table 8.27. Pseudo-Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Pseudo-Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""type"">
        any
       </code>
      </td>
      <td>
       Indicates that a function accepts any input data type.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anyelement
       </code>
      </td>
      <td>
       Indicates that a function accepts any data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anyarray
       </code>
      </td>
      <td>
       Indicates that a function accepts any array data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anynonarray
       </code>
      </td>
      <td>
       Indicates that a function accepts any non-array data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anyenum
       </code>
      </td>
      <td>
       Indicates that a function accepts any enum data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       and
       <a class=""xref"" href=""datatype-enum.html"" title=""8.7. Enumerated Types"">
        Section 8.7
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anyrange
       </code>
      </td>
      <td>
       Indicates that a function accepts any range data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       and
       <a class=""xref"" href=""rangetypes.html"" title=""8.17. Range Types"">
        Section 8.17
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anymultirange
       </code>
      </td>
      <td>
       Indicates that a function accepts any multirange data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       and
       <a class=""xref"" href=""rangetypes.html"" title=""8.17. Range Types"">
        Section 8.17
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anycompatible
       </code>
      </td>
      <td>
       Indicates that a function accepts any data type, with automatic promotion of multiple arguments to a common data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anycompatiblearray
       </code>
      </td>
      <td>
       Indicates that a function accepts any array data type, with automatic promotion of multiple arguments to a common data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anycompatiblenonarray
       </code>
      </td>
      <td>
       Indicates that a function accepts any non-array data type, with automatic promotion of multiple arguments to a common data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anycompatiblerange
       </code>
      </td>
      <td>
       Indicates that a function accepts any range data type, with automatic promotion of multiple arguments to a common data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       and
       <a class=""xref"" href=""rangetypes.html"" title=""8.17. Range Types"">
        Section 8.17
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        anycompatiblemultirange
       </code>
      </td>
      <td>
       Indicates that a function accepts any multirange data type, with automatic promotion of multiple arguments to a common data type (see
       <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
        Section 36.2.5
       </a>
       and
       <a class=""xref"" href=""rangetypes.html"" title=""8.17. Range Types"">
        Section 8.17
       </a>
       ).
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        cstring
       </code>
      </td>
      <td>
       Indicates that a function accepts or returns a null-terminated C string.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        internal
       </code>
      </td>
      <td>
       Indicates that a function accepts or returns a server-internal data type.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        language_handler
       </code>
      </td>
      <td>
       A procedural language call handler is declared to return
       <code class=""type"">
        language_handler
       </code>
       .
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        fdw_handler
       </code>
      </td>
      <td>
       A foreign-data wrapper handler is declared to return
       <code class=""type"">
        fdw_handler
       </code>
       .
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        table_am_handler
       </code>
      </td>
      <td>
       A table access method handler is declared to return
       <code class=""type"">
        table_am_handler
       </code>
       .
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        index_am_handler
       </code>
      </td>
      <td>
       An index access method handler is declared to return
       <code class=""type"">
        index_am_handler
       </code>
       .
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        tsm_handler
       </code>
      </td>
      <td>
       A tablesample method handler is declared to return
       <code class=""type"">
        tsm_handler
       </code>
       .
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        record
       </code>
      </td>
      <td>
       Identifies a function taking or returning an unspecified row type.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        trigger
       </code>
      </td>
      <td>
       A trigger function is declared to return
       <code class=""type"">
        trigger.
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        event_trigger
       </code>
      </td>
      <td>
       An event trigger function is declared to return
       <code class=""type"">
        event_trigger.
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        pg_ddl_command
       </code>
      </td>
      <td>
       Identifies a representation of DDL commands that is available to event triggers.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        void
       </code>
      </td>
      <td>
       Indicates that a function returns no value.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""type"">
        unknown
       </code>
      </td>
      <td>
       Identifies a not-yet-resolved type, e.g., of an undecorated string literal.
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Functions coded in C (whether built-in or dynamically loaded) can be declared to accept or return any of these pseudo-types. It is up to the function author to ensure that the function will behave safely when a pseudo-type is used as an argument type.
 </p>
 <p>
  Functions coded in procedural languages can use pseudo-types only as allowed by their implementation languages. At present most procedural languages forbid use of a pseudo-type as an argument type, and allow only
  <code class=""type"">
   void
  </code>
  and
  <code class=""type"">
   record
  </code>
  as a result type (plus
  <code class=""type"">
   trigger
  </code>
  or
  <code class=""type"">
   event_trigger
  </code>
  when the function is used as a trigger or event trigger). Some also support polymorphic functions using the polymorphic pseudo-types, which are shown above and discussed in detail in
  <a class=""xref"" href=""extend-type-system.html#EXTEND-TYPES-POLYMORPHIC"" title=""36.2.5. Polymorphic Types"">
   Section 36.2.5
  </a>
  .
 </p>
 <p>
  The
  <code class=""type"">
   internal
  </code>
  pseudo-type is used to declare functions that are meant only to be called internally by the database system, and not by direct invocation in an
  <acronym class=""acronym"">
   SQL
  </acronym>
  query. If a function has at least one
  <code class=""type"">
   internal
  </code>
  -type argument then it cannot be called from
  <acronym class=""acronym"">
   SQL
  </acronym>
  . To preserve the type safety of this restriction it is important to follow this coding rule: do not create any function that is declared to return
  <code class=""type"">
   internal
  </code>
  unless it has at least one
  <code class=""type"">
   internal
  </code>
  argument.
 </p>
</div>
"
9. Functions and Operators,9.1. Logical Operators,https://www.postgresql.org/docs/17/functions-logical.html,"<div class=""sect1"" id=""FUNCTIONS-LOGICAL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.1. Logical Operators
     <a class=""id_link"" href=""#FUNCTIONS-LOGICAL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.7.2"" name=""id-1.5.8.7.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.7.3"" name=""id-1.5.8.7.3"">
 </a>
 <p>
  The usual logical operators are available:
  <a class=""indexterm"" id=""id-1.5.8.7.4.1"" name=""id-1.5.8.7.4.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.7.4.2"" name=""id-1.5.8.7.4.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.7.4.3"" name=""id-1.5.8.7.4.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.7.4.4"" name=""id-1.5.8.7.4.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.7.4.5"" name=""id-1.5.8.7.4.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.7.4.6"" name=""id-1.5.8.7.4.6"">
  </a>
 </p>
 <pre class=""synopsis"">
<code class=""type"">boolean</code> <code class=""literal"">AND</code> <code class=""type"">boolean</code> → <code class=""returnvalue"">boolean</code>
<code class=""type"">boolean</code> <code class=""literal"">OR</code> <code class=""type"">boolean</code> → <code class=""returnvalue"">boolean</code>
<code class=""literal"">NOT</code> <code class=""type"">boolean</code> → <code class=""returnvalue"">boolean</code>
</pre>
 <p>
  <acronym class=""acronym"">
   SQL
  </acronym>
  uses a three-valued logic system with true, false, and
  <code class=""literal"">
   null
  </code>
  , which represents
  <span class=""quote"">
   “
   <span class=""quote"">
    unknown
   </span>
   ”
  </span>
  . Observe the following truth tables:
 </p>
 <div class=""informaltable"">
  <table border=""1"" class=""informaltable"">
   <colgroup>
    <col/>
    <col/>
    <col/>
    <col/>
   </colgroup>
   <thead>
    <tr>
     <th>
      <em class=""replaceable"">
       <code>
        a
       </code>
      </em>
     </th>
     <th>
      <em class=""replaceable"">
       <code>
        b
       </code>
      </em>
     </th>
     <th>
      <em class=""replaceable"">
       <code>
        a
       </code>
      </em>
      AND
      <em class=""replaceable"">
       <code>
        b
       </code>
      </em>
     </th>
     <th>
      <em class=""replaceable"">
       <code>
        a
       </code>
      </em>
      OR
      <em class=""replaceable"">
       <code>
        b
       </code>
      </em>
     </th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td>
      TRUE
     </td>
     <td>
      TRUE
     </td>
     <td>
      TRUE
     </td>
     <td>
      TRUE
     </td>
    </tr>
    <tr>
     <td>
      TRUE
     </td>
     <td>
      FALSE
     </td>
     <td>
      FALSE
     </td>
     <td>
      TRUE
     </td>
    </tr>
    <tr>
     <td>
      TRUE
     </td>
     <td>
      NULL
     </td>
     <td>
      NULL
     </td>
     <td>
      TRUE
     </td>
    </tr>
    <tr>
     <td>
      FALSE
     </td>
     <td>
      FALSE
     </td>
     <td>
      FALSE
     </td>
     <td>
      FALSE
     </td>
    </tr>
    <tr>
     <td>
      FALSE
     </td>
     <td>
      NULL
     </td>
     <td>
      FALSE
     </td>
     <td>
      NULL
     </td>
    </tr>
    <tr>
     <td>
      NULL
     </td>
     <td>
      NULL
     </td>
     <td>
      NULL
     </td>
     <td>
      NULL
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div class=""informaltable"">
  <table border=""1"" class=""informaltable"">
   <colgroup>
    <col/>
    <col/>
   </colgroup>
   <thead>
    <tr>
     <th>
      <em class=""replaceable"">
       <code>
        a
       </code>
      </em>
     </th>
     <th>
      NOT
      <em class=""replaceable"">
       <code>
        a
       </code>
      </em>
     </th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td>
      TRUE
     </td>
     <td>
      FALSE
     </td>
    </tr>
    <tr>
     <td>
      FALSE
     </td>
     <td>
      TRUE
     </td>
    </tr>
    <tr>
     <td>
      NULL
     </td>
     <td>
      NULL
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <p>
  The operators
  <code class=""literal"">
   AND
  </code>
  and
  <code class=""literal"">
   OR
  </code>
  are commutative, that is, you can switch the left and right operands without affecting the result. (However, it is not guaranteed that the left operand is evaluated before the right operand. See
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-EXPRESS-EVAL"" title=""4.2.14. Expression Evaluation Rules"">
   Section 4.2.14
  </a>
  for more information about the order of evaluation of subexpressions.)
 </p>
</div>
"
9. Functions and Operators,9.2. Comparison Functions and Operators,https://www.postgresql.org/docs/17/functions-comparison.html,"<div class=""sect1"" id=""FUNCTIONS-COMPARISON"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.2. Comparison Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-COMPARISON"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.8.2"" name=""id-1.5.8.8.2"">
 </a>
 <p>
  The usual comparison operators are available, as shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-COMPARISON-OP-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.1. Comparison Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Comparison Operators"">
    <colgroup>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Operator
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        &lt;
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Less than
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        &gt;
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Greater than
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        &lt;=
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Less than or equal to
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        &gt;=
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Greater than or equal to
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        =
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Equal
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        &lt;&gt;
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Not equal
      </td>
     </tr>
     <tr>
      <td>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       <code class=""literal"">
        !=
       </code>
       <em class=""replaceable"">
        <code>
         datatype
        </code>
       </em>
       →
       <code class=""returnvalue"">
        boolean
       </code>
      </td>
      <td>
       Not equal
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   <code class=""literal"">
    &lt;&gt;
   </code>
   is the standard SQL notation for
   <span class=""quote"">
    “
    <span class=""quote"">
     not equal
    </span>
    ”
   </span>
   .
   <code class=""literal"">
    !=
   </code>
   is an alias, which is converted to
   <code class=""literal"">
    &lt;&gt;
   </code>
   at a very early stage of parsing. Hence, it is not possible to implement
   <code class=""literal"">
    !=
   </code>
   and
   <code class=""literal"">
    &lt;&gt;
   </code>
   operators that do different things.
  </p>
 </div>
 <p>
  These comparison operators are available for all built-in data types that have a natural ordering, including numeric, string, and date/time types. In addition, arrays, composite types, and ranges can be compared if their component data types are comparable.
 </p>
 <p>
  It is usually possible to compare values of related data types as well; for example
  <code class=""type"">
   integer
  </code>
  <code class=""literal"">
   &gt;
  </code>
  <code class=""type"">
   bigint
  </code>
  will work. Some cases of this sort are implemented directly by
  <span class=""quote"">
   “
   <span class=""quote"">
    cross-type
   </span>
   ”
  </span>
  comparison operators, but if no such operator is available, the parser will coerce the less-general type to the more-general type and apply the latter's comparison operator.
 </p>
 <p>
  As shown above, all comparison operators are binary operators that return values of type
  <code class=""type"">
   boolean
  </code>
  . Thus, expressions like
  <code class=""literal"">
   1 &lt; 2 &lt; 3
  </code>
  are not valid (because there is no
  <code class=""literal"">
   &lt;
  </code>
  operator to compare a Boolean value with
  <code class=""literal"">
   3
  </code>
  ). Use the
  <code class=""literal"">
   BETWEEN
  </code>
  predicates shown below to perform range tests.
 </p>
 <p>
  There are also some comparison predicates, as shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-PRED-TABLE"" title=""Table 9.2. Comparison Predicates"">
   Table 9.2
  </a>
  . These behave much like operators, but have special syntax mandated by the SQL standard.
 </p>
 <div class=""table"" id=""FUNCTIONS-COMPARISON-PRED-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.2. Comparison Predicates
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Comparison Predicates"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Predicate
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         BETWEEN
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         AND
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Between (inclusive of the range endpoints).
       </p>
       <p>
        <code class=""literal"">
         2 BETWEEN 1 AND 3
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         2 BETWEEN 3 AND 1
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         NOT BETWEEN
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         AND
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Not between (the negation of
        <code class=""literal"">
         BETWEEN
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         2 NOT BETWEEN 1 AND 3
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         BETWEEN SYMMETRIC
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         AND
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Between, after sorting the two endpoint values.
       </p>
       <p>
        <code class=""literal"">
         2 BETWEEN SYMMETRIC 3 AND 1
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         NOT BETWEEN SYMMETRIC
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         AND
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Not between, after sorting the two endpoint values.
       </p>
       <p>
        <code class=""literal"">
         2 NOT BETWEEN SYMMETRIC 3 AND 1
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         IS DISTINCT FROM
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Not equal, treating null as a comparable value.
       </p>
       <p>
        <code class=""literal"">
         1 IS DISTINCT FROM NULL
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
       <p>
        <code class=""literal"">
         NULL IS DISTINCT FROM NULL
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         IS NOT DISTINCT FROM
        </code>
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Equal, treating null as a comparable value.
       </p>
       <p>
        <code class=""literal"">
         1 IS NOT DISTINCT FROM NULL
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
       <p>
        <code class=""literal"">
         NULL IS NOT DISTINCT FROM NULL
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         IS NULL
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether value is null.
       </p>
       <p>
        <code class=""literal"">
         1.5 IS NULL
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         IS NOT NULL
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether value is not null.
       </p>
       <p>
        <code class=""literal"">
         'null' IS NOT NULL
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         ISNULL
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether value is null (nonstandard syntax).
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          datatype
         </code>
        </em>
        <code class=""literal"">
         NOTNULL
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether value is not null (nonstandard syntax).
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS TRUE
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields true.
       </p>
       <p>
        <code class=""literal"">
         true IS TRUE
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS TRUE
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS NOT TRUE
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields false or unknown.
       </p>
       <p>
        <code class=""literal"">
         true IS NOT TRUE
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS NOT TRUE
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS FALSE
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields false.
       </p>
       <p>
        <code class=""literal"">
         true IS FALSE
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS FALSE
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS NOT FALSE
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields true or unknown.
       </p>
       <p>
        <code class=""literal"">
         true IS NOT FALSE
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS NOT FALSE
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields unknown.
       </p>
       <p>
        <code class=""literal"">
         true IS UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         IS NOT UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test whether boolean expression yields true or false.
       </p>
       <p>
        <code class=""literal"">
         true IS NOT UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         NULL::boolean IS NOT UNKNOWN
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
        (rather than
        <code class=""literal"">
         NULL
        </code>
        )
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.8.11.1"" name=""id-1.5.8.8.11.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.11.2"" name=""id-1.5.8.8.11.2"">
  </a>
  The
  <code class=""token"">
   BETWEEN
  </code>
  predicate simplifies range tests:
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>a</code></em> BETWEEN <em class=""replaceable""><code>x</code></em> AND <em class=""replaceable""><code>y</code></em>
</pre>
 <p>
  is equivalent to
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>a</code></em> &gt;= <em class=""replaceable""><code>x</code></em> AND <em class=""replaceable""><code>a</code></em> &lt;= <em class=""replaceable""><code>y</code></em>
</pre>
 <p>
  Notice that
  <code class=""token"">
   BETWEEN
  </code>
  treats the endpoint values as included in the range.
  <code class=""literal"">
   BETWEEN SYMMETRIC
  </code>
  is like
  <code class=""literal"">
   BETWEEN
  </code>
  except there is no requirement that the argument to the left of
  <code class=""literal"">
   AND
  </code>
  be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied.
 </p>
 <p>
  The various variants of
  <code class=""literal"">
   BETWEEN
  </code>
  are implemented in terms of the ordinary comparison operators, and therefore will work for any data type(s) that can be compared.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   The use of
   <code class=""literal"">
    AND
   </code>
   in the
   <code class=""literal"">
    BETWEEN
   </code>
   syntax creates an ambiguity with the use of
   <code class=""literal"">
    AND
   </code>
   as a logical operator. To resolve this, only a limited set of expression types are allowed as the second argument of a
   <code class=""literal"">
    BETWEEN
   </code>
   clause. If you need to write a more complex sub-expression in
   <code class=""literal"">
    BETWEEN
   </code>
   , write parentheses around the sub-expression.
  </p>
 </div>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.8.14.1"" name=""id-1.5.8.8.14.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.14.2"" name=""id-1.5.8.8.14.2"">
  </a>
  Ordinary comparison operators yield null (signifying
  <span class=""quote"">
   “
   <span class=""quote"">
    unknown
   </span>
   ”
  </span>
  ), not true or false, when either input is null. For example,
  <code class=""literal"">
   7 = NULL
  </code>
  yields null, as does
  <code class=""literal"">
   7 &lt;&gt; NULL
  </code>
  . When this behavior is not suitable, use the
  <code class=""literal"">
   IS [
   <span class=""optional"">
    NOT
   </span>
   ] DISTINCT FROM
  </code>
  predicates:
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>a</code></em> IS DISTINCT FROM <em class=""replaceable""><code>b</code></em>
<em class=""replaceable""><code>a</code></em> IS NOT DISTINCT FROM <em class=""replaceable""><code>b</code></em>
</pre>
 <p>
  For non-null inputs,
  <code class=""literal"">
   IS DISTINCT FROM
  </code>
  is the same as the
  <code class=""literal"">
   &lt;&gt;
  </code>
  operator. However, if both inputs are null it returns false, and if only one input is null it returns true. Similarly,
  <code class=""literal"">
   IS NOT DISTINCT FROM
  </code>
  is identical to
  <code class=""literal"">
   =
  </code>
  for non-null inputs, but it returns true when both inputs are null, and false when only one input is null. Thus, these predicates effectively act as though null were a normal data value, rather than
  <span class=""quote"">
   “
   <span class=""quote"">
    unknown
   </span>
   ”
  </span>
  .
 </p>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.8.15.1"" name=""id-1.5.8.8.15.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.15.2"" name=""id-1.5.8.8.15.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.15.3"" name=""id-1.5.8.8.15.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.15.4"" name=""id-1.5.8.8.15.4"">
  </a>
  To check whether a value is or is not null, use the predicates:
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> IS NULL
<em class=""replaceable""><code>expression</code></em> IS NOT NULL
</pre>
 <p>
  or the equivalent, but nonstandard, predicates:
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> ISNULL
<em class=""replaceable""><code>expression</code></em> NOTNULL
</pre>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.8.15.7"" name=""id-1.5.8.8.15.7"">
  </a>
 </p>
 <p>
  Do
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  write
  <code class=""literal"">
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   = NULL
  </code>
  because
  <code class=""literal"">
   NULL
  </code>
  is not
  <span class=""quote"">
   “
   <span class=""quote"">
    equal to
   </span>
   ”
  </span>
  <code class=""literal"">
   NULL
  </code>
  . (The null value represents an unknown value, and it is not known whether two unknown values are equal.)
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   Some applications might expect that
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      expression
     </code>
    </em>
    = NULL
   </code>
   returns true if
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the
   <a class=""xref"" href=""runtime-config-compatible.html#GUC-TRANSFORM-NULL-EQUALS"">
    transform_null_equals
   </a>
   configuration variable is available. If it is enabled,
   <span class=""productname"">
    PostgreSQL
   </span>
   will convert
   <code class=""literal"">
    x = NULL
   </code>
   clauses to
   <code class=""literal"">
    x IS NULL
   </code>
   .
  </p>
 </div>
 <p>
  If the
  <em class=""replaceable"">
   <code>
    expression
   </code>
  </em>
  is row-valued, then
  <code class=""literal"">
   IS NULL
  </code>
  is true when the row expression itself is null or when all the row's fields are null, while
  <code class=""literal"">
   IS NOT NULL
  </code>
  is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior,
  <code class=""literal"">
   IS NULL
  </code>
  and
  <code class=""literal"">
   IS NOT NULL
  </code>
  do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. For example:
 </p>
 <pre class=""programlisting"">
SELECT ROW(1,2.5,'this is a test') = ROW(1, 3, 'not the same');

SELECT ROW(table.*) IS NULL FROM table;  -- detect all-null rows

SELECT ROW(table.*) IS NOT NULL FROM table;  -- detect all-non-null rows

SELECT NOT(ROW(table.*) IS NOT NULL) FROM TABLE; -- detect at least one null in rows
</pre>
 <p>
  In some cases, it may be preferable to write
  <em class=""replaceable"">
   <code>
    row
   </code>
  </em>
  <code class=""literal"">
   IS DISTINCT FROM NULL
  </code>
  or
  <em class=""replaceable"">
   <code>
    row
   </code>
  </em>
  <code class=""literal"">
   IS NOT DISTINCT FROM NULL
  </code>
  , which will simply check whether the overall row value is null without any additional tests on the row fields.
 </p>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.8.19.1"" name=""id-1.5.8.8.19.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.19.2"" name=""id-1.5.8.8.19.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.19.3"" name=""id-1.5.8.8.19.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.19.4"" name=""id-1.5.8.8.19.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.19.5"" name=""id-1.5.8.8.19.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.8.19.6"" name=""id-1.5.8.8.19.6"">
  </a>
  Boolean values can also be tested using the predicates
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>boolean_expression</code></em> IS TRUE
<em class=""replaceable""><code>boolean_expression</code></em> IS NOT TRUE
<em class=""replaceable""><code>boolean_expression</code></em> IS FALSE
<em class=""replaceable""><code>boolean_expression</code></em> IS NOT FALSE
<em class=""replaceable""><code>boolean_expression</code></em> IS UNKNOWN
<em class=""replaceable""><code>boolean_expression</code></em> IS NOT UNKNOWN
</pre>
 <p>
  These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value
  <span class=""quote"">
   “
   <span class=""quote"">
    unknown
   </span>
   ”
  </span>
  . Notice that
  <code class=""literal"">
   IS UNKNOWN
  </code>
  and
  <code class=""literal"">
   IS NOT UNKNOWN
  </code>
  are effectively the same as
  <code class=""literal"">
   IS NULL
  </code>
  and
  <code class=""literal"">
   IS NOT NULL
  </code>
  , respectively, except that the input expression must be of Boolean type.
 </p>
 <p>
  Some comparison-related functions are also available, as shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-FUNC-TABLE"" title=""Table 9.3. Comparison Functions"">
   Table 9.3
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-COMPARISON-FUNC-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.3. Comparison Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Comparison Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.8.21.2.2.1.1.1.1"" name=""id-1.5.8.8.21.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         num_nonnulls
        </code>
        (
        <code class=""literal"">
         VARIADIC
        </code>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of non-null arguments.
       </p>
       <p>
        <code class=""literal"">
         num_nonnulls(1, NULL, 2)
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.8.21.2.2.2.1.1.1"" name=""id-1.5.8.8.21.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         num_nulls
        </code>
        (
        <code class=""literal"">
         VARIADIC
        </code>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of null arguments.
       </p>
       <p>
        <code class=""literal"">
         num_nulls(1, NULL, 2)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
9. Functions and Operators,9.3. Mathematical Functions and Operators,https://www.postgresql.org/docs/17/functions-math.html,"<div class=""sect1"" id=""FUNCTIONS-MATH"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.3. Mathematical Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-MATH"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Mathematical operators are provided for many
  <span class=""productname"">
   PostgreSQL
  </span>
  types. For types without standard mathematical conventions (e.g., date/time types) we describe the actual behavior in subsequent sections.
 </p>
 <p>
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-OP-TABLE"" title=""Table 9.4. Mathematical Operators"">
   Table 9.4
  </a>
  shows the mathematical operators that are available for the standard numeric types. Unless otherwise noted, operators shown as accepting
  <em class=""replaceable"">
   <code>
    numeric_type
   </code>
  </em>
  are available for all the types
  <code class=""type"">
   smallint
  </code>
  ,
  <code class=""type"">
   integer
  </code>
  ,
  <code class=""type"">
   bigint
  </code>
  ,
  <code class=""type"">
   numeric
  </code>
  ,
  <code class=""type"">
   real
  </code>
  , and
  <code class=""type"">
   double precision
  </code>
  . Operators shown as accepting
  <em class=""replaceable"">
   <code>
    integral_type
   </code>
  </em>
  are available for the types
  <code class=""type"">
   smallint
  </code>
  ,
  <code class=""type"">
   integer
  </code>
  , and
  <code class=""type"">
   bigint
  </code>
  . Except where noted, each form of an operator returns the same data type as its argument(s). Calls involving multiple argument data types, such as
  <code class=""type"">
   integer
  </code>
  <code class=""literal"">
   +
  </code>
  <code class=""type"">
   numeric
  </code>
  , are resolved by using the type appearing later in these lists.
 </p>
 <div class=""table"" id=""FUNCTIONS-MATH-OP-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.4. Mathematical Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Mathematical Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        <code class=""literal"">
         +
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Addition
       </p>
       <p>
        <code class=""literal"">
         2 + 3
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         +
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Unary plus (no operation)
       </p>
       <p>
        <code class=""literal"">
         + 3.5
        </code>
        →
        <code class=""returnvalue"">
         3.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        <code class=""literal"">
         -
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Subtraction
       </p>
       <p>
        <code class=""literal"">
         2 - 3
        </code>
        →
        <code class=""returnvalue"">
         -1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         -
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Negation
       </p>
       <p>
        <code class=""literal"">
         - (-4)
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        <code class=""literal"">
         *
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Multiplication
       </p>
       <p>
        <code class=""literal"">
         2 * 3
        </code>
        →
        <code class=""returnvalue"">
         6
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        <code class=""literal"">
         /
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Division (for integral types, division truncates the result towards zero)
       </p>
       <p>
        <code class=""literal"">
         5.0 / 2
        </code>
        →
        <code class=""returnvalue"">
         2.5000000000000000
        </code>
       </p>
       <p>
        <code class=""literal"">
         5 / 2
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
       <p>
        <code class=""literal"">
         (-5) / 2
        </code>
        →
        <code class=""returnvalue"">
         -2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        <code class=""literal"">
         %
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Modulo (remainder); available for
        <code class=""type"">
         smallint
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        , and
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        <code class=""literal"">
         5 % 4
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         numeric
        </code>
        <code class=""literal"">
         ^
        </code>
        <code class=""type"">
         numeric
        </code>
        →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""type"">
         double precision
        </code>
        <code class=""literal"">
         ^
        </code>
        <code class=""type"">
         double precision
        </code>
        →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Exponentiation
       </p>
       <p>
        <code class=""literal"">
         2 ^ 3
        </code>
        →
        <code class=""returnvalue"">
         8
        </code>
       </p>
       <p>
        Unlike typical mathematical practice, multiple uses of
        <code class=""literal"">
         ^
        </code>
        will associate left to right by default:
       </p>
       <p>
        <code class=""literal"">
         2 ^ 3 ^ 3
        </code>
        →
        <code class=""returnvalue"">
         512
        </code>
       </p>
       <p>
        <code class=""literal"">
         2 ^ (3 ^ 3)
        </code>
        →
        <code class=""returnvalue"">
         134217728
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         |/
        </code>
        <code class=""type"">
         double precision
        </code>
        →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Square root
       </p>
       <p>
        <code class=""literal"">
         |/ 25.0
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ||/
        </code>
        <code class=""type"">
         double precision
        </code>
        →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cube root
       </p>
       <p>
        <code class=""literal"">
         ||/ 64.0
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         @
        </code>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Absolute value
       </p>
       <p>
        <code class=""literal"">
         @ -5.0
        </code>
        →
        <code class=""returnvalue"">
         5.0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        <code class=""literal"">
         &amp;
        </code>
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise AND
       </p>
       <p>
        <code class=""literal"">
         91 &amp; 15
        </code>
        →
        <code class=""returnvalue"">
         11
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        <code class=""literal"">
         |
        </code>
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise OR
       </p>
       <p>
        <code class=""literal"">
         32 | 3
        </code>
        →
        <code class=""returnvalue"">
         35
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        <code class=""literal"">
         #
        </code>
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise exclusive OR
       </p>
       <p>
        <code class=""literal"">
         17 # 5
        </code>
        →
        <code class=""returnvalue"">
         20
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ~
        </code>
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise NOT
       </p>
       <p>
        <code class=""literal"">
         ~1
        </code>
        →
        <code class=""returnvalue"">
         -2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise shift left
       </p>
       <p>
        <code class=""literal"">
         1 &lt;&lt; 4
        </code>
        →
        <code class=""returnvalue"">
         16
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          integral_type
         </code>
        </em>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           integral_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Bitwise shift right
       </p>
       <p>
        <code class=""literal"">
         8 &gt;&gt; 2
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-FUNC-TABLE"" title=""Table 9.5. Mathematical Functions"">
   Table 9.5
  </a>
  shows the available mathematical functions. Many of these functions are provided in multiple forms with different argument types. Except where noted, any given form of a function returns the same data type as its argument(s); cross-type cases are resolved in the same way as explained above for operators. The functions working with
  <code class=""type"">
   double precision
  </code>
  data are mostly implemented on top of the host system's C library; accuracy and behavior in boundary cases can therefore vary depending on the host system.
 </p>
 <div class=""table"" id=""FUNCTIONS-MATH-FUNC-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.5. Mathematical Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Mathematical Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.1.1.1.1"" name=""id-1.5.8.9.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         abs
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Absolute value
       </p>
       <p>
        <code class=""literal"">
         abs(-17.4)
        </code>
        →
        <code class=""returnvalue"">
         17.4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.2.1.1.1"" name=""id-1.5.8.9.6.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         cbrt
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cube root
       </p>
       <p>
        <code class=""literal"">
         cbrt(64.0)
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.3.1.1.1"" name=""id-1.5.8.9.6.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         ceil
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         ceil
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Nearest integer greater than or equal to argument
       </p>
       <p>
        <code class=""literal"">
         ceil(42.2)
        </code>
        →
        <code class=""returnvalue"">
         43
        </code>
       </p>
       <p>
        <code class=""literal"">
         ceil(-42.8)
        </code>
        →
        <code class=""returnvalue"">
         -42
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.4.1.1.1"" name=""id-1.5.8.9.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         ceiling
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         ceiling
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Nearest integer greater than or equal to argument (same as
        <code class=""function"">
         ceil
        </code>
        )
       </p>
       <p>
        <code class=""literal"">
         ceiling(95.3)
        </code>
        →
        <code class=""returnvalue"">
         96
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.5.1.1.1"" name=""id-1.5.8.9.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         degrees
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Converts radians to degrees
       </p>
       <p>
        <code class=""literal"">
         degrees(0.5)
        </code>
        →
        <code class=""returnvalue"">
         28.64788975654116
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.6.1.1.1"" name=""id-1.5.8.9.6.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         div
        </code>
        (
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Integer quotient of
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        /
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        (truncates towards zero)
       </p>
       <p>
        <code class=""literal"">
         div(9, 4)
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.7.1.1.1"" name=""id-1.5.8.9.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         erf
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Error function
       </p>
       <p>
        <code class=""literal"">
         erf(1.0)
        </code>
        →
        <code class=""returnvalue"">
         0.8427007929497149
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.8.1.1.1"" name=""id-1.5.8.9.6.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         erfc
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Complementary error function (
        <code class=""literal"">
         1 - erf(x)
        </code>
        , without loss of precision for large inputs)
       </p>
       <p>
        <code class=""literal"">
         erfc(1.0)
        </code>
        →
        <code class=""returnvalue"">
         0.15729920705028513
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.9.1.1.1"" name=""id-1.5.8.9.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         exp
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         exp
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Exponential (
        <code class=""literal"">
         e
        </code>
        raised to the given power)
       </p>
       <p>
        <code class=""literal"">
         exp(1.0)
        </code>
        →
        <code class=""returnvalue"">
         2.7182818284590452
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-FACTORIAL"" name=""FUNCTION-FACTORIAL"">
        </a>
        <code class=""function"">
         factorial
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Factorial
       </p>
       <p>
        <code class=""literal"">
         factorial(5)
        </code>
        →
        <code class=""returnvalue"">
         120
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.11.1.1.1"" name=""id-1.5.8.9.6.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         floor
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         floor
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Nearest integer less than or equal to argument
       </p>
       <p>
        <code class=""literal"">
         floor(42.8)
        </code>
        →
        <code class=""returnvalue"">
         42
        </code>
       </p>
       <p>
        <code class=""literal"">
         floor(-42.8)
        </code>
        →
        <code class=""returnvalue"">
         -43
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.12.1.1.1"" name=""id-1.5.8.9.6.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         gcd
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ,
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Greatest common divisor (the largest positive number that divides both inputs with no remainder); returns
        <code class=""literal"">
         0
        </code>
        if both inputs are zero; available for
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        , and
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        <code class=""literal"">
         gcd(1071, 462)
        </code>
        →
        <code class=""returnvalue"">
         21
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.13.1.1.1"" name=""id-1.5.8.9.6.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         lcm
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ,
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Least common multiple (the smallest strictly positive number that is an integral multiple of both inputs); returns
        <code class=""literal"">
         0
        </code>
        if either input is zero; available for
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        , and
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        <code class=""literal"">
         lcm(1071, 462)
        </code>
        →
        <code class=""returnvalue"">
         23562
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.14.1.1.1"" name=""id-1.5.8.9.6.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         ln
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         ln
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Natural logarithm
       </p>
       <p>
        <code class=""literal"">
         ln(2.0)
        </code>
        →
        <code class=""returnvalue"">
         0.6931471805599453
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.15.1.1.1"" name=""id-1.5.8.9.6.2.2.15.1.1.1"">
        </a>
        <code class=""function"">
         log
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         log
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Base 10 logarithm
       </p>
       <p>
        <code class=""literal"">
         log(100)
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.16.1.1.1"" name=""id-1.5.8.9.6.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         log10
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         log10
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Base 10 logarithm (same as
        <code class=""function"">
         log
        </code>
        )
       </p>
       <p>
        <code class=""literal"">
         log10(1000)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         log
        </code>
        (
        <em class=""parameter"">
         <code>
          b
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Logarithm of
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        to base
        <em class=""parameter"">
         <code>
          b
         </code>
        </em>
       </p>
       <p>
        <code class=""literal"">
         log(2.0, 64.0)
        </code>
        →
        <code class=""returnvalue"">
         6.0000000000000000
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.18.1.1.1"" name=""id-1.5.8.9.6.2.2.18.1.1.1"">
        </a>
        <code class=""function"">
         min_scale
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Minimum scale (number of fractional decimal digits) needed to represent the supplied value precisely
       </p>
       <p>
        <code class=""literal"">
         min_scale(8.4100)
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.19.1.1.1"" name=""id-1.5.8.9.6.2.2.19.1.1.1"">
        </a>
        <code class=""function"">
         mod
        </code>
        (
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ,
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           numeric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Remainder of
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        /
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        ; available for
        <code class=""type"">
         smallint
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        , and
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        <code class=""literal"">
         mod(9, 4)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.20.1.1.1"" name=""id-1.5.8.9.6.2.2.20.1.1.1"">
        </a>
        <code class=""function"">
         pi
        </code>
        ( ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Approximate value of
        <span class=""symbol_font"">
         π
        </span>
       </p>
       <p>
        <code class=""literal"">
         pi()
        </code>
        →
        <code class=""returnvalue"">
         3.141592653589793
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.21.1.1.1"" name=""id-1.5.8.9.6.2.2.21.1.1.1"">
        </a>
        <code class=""function"">
         power
        </code>
        (
        <em class=""parameter"">
         <code>
          a
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          b
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         power
        </code>
        (
        <em class=""parameter"">
         <code>
          a
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          b
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        <em class=""parameter"">
         <code>
          a
         </code>
        </em>
        raised to the power of
        <em class=""parameter"">
         <code>
          b
         </code>
        </em>
       </p>
       <p>
        <code class=""literal"">
         power(9, 3)
        </code>
        →
        <code class=""returnvalue"">
         729
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.22.1.1.1"" name=""id-1.5.8.9.6.2.2.22.1.1.1"">
        </a>
        <code class=""function"">
         radians
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Converts degrees to radians
       </p>
       <p>
        <code class=""literal"">
         radians(45.0)
        </code>
        →
        <code class=""returnvalue"">
         0.7853981633974483
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.23.1.1.1"" name=""id-1.5.8.9.6.2.2.23.1.1.1"">
        </a>
        <code class=""function"">
         round
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         round
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Rounds to nearest integer. For
        <code class=""type"">
         numeric
        </code>
        , ties are broken by rounding away from zero. For
        <code class=""type"">
         double precision
        </code>
        , the tie-breaking behavior is platform dependent, but
        <span class=""quote"">
         “
         <span class=""quote"">
          round to nearest even
         </span>
         ”
        </span>
        is the most common rule.
       </p>
       <p>
        <code class=""literal"">
         round(42.4)
        </code>
        →
        <code class=""returnvalue"">
         42
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         round
        </code>
        (
        <em class=""parameter"">
         <code>
          v
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          s
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Rounds
        <em class=""parameter"">
         <code>
          v
         </code>
        </em>
        to
        <em class=""parameter"">
         <code>
          s
         </code>
        </em>
        decimal places. Ties are broken by rounding away from zero.
       </p>
       <p>
        <code class=""literal"">
         round(42.4382, 2)
        </code>
        →
        <code class=""returnvalue"">
         42.44
        </code>
       </p>
       <p>
        <code class=""literal"">
         round(1234.56, -1)
        </code>
        →
        <code class=""returnvalue"">
         1230
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.25.1.1.1"" name=""id-1.5.8.9.6.2.2.25.1.1.1"">
        </a>
        <code class=""function"">
         scale
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Scale of the argument (the number of decimal digits in the fractional part)
       </p>
       <p>
        <code class=""literal"">
         scale(8.4100)
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.26.1.1.1"" name=""id-1.5.8.9.6.2.2.26.1.1.1"">
        </a>
        <code class=""function"">
         sign
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sign
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Sign of the argument (-1, 0, or +1)
       </p>
       <p>
        <code class=""literal"">
         sign(-8.4)
        </code>
        →
        <code class=""returnvalue"">
         -1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.27.1.1.1"" name=""id-1.5.8.9.6.2.2.27.1.1.1"">
        </a>
        <code class=""function"">
         sqrt
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sqrt
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Square root
       </p>
       <p>
        <code class=""literal"">
         sqrt(2)
        </code>
        →
        <code class=""returnvalue"">
         1.4142135623730951
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.28.1.1.1"" name=""id-1.5.8.9.6.2.2.28.1.1.1"">
        </a>
        <code class=""function"">
         trim_scale
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Reduces the value's scale (number of fractional decimal digits) by removing trailing zeroes
       </p>
       <p>
        <code class=""literal"">
         trim_scale(8.4100)
        </code>
        →
        <code class=""returnvalue"">
         8.41
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.29.1.1.1"" name=""id-1.5.8.9.6.2.2.29.1.1.1"">
        </a>
        <code class=""function"">
         trunc
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         trunc
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Truncates to integer (towards zero)
       </p>
       <p>
        <code class=""literal"">
         trunc(42.8)
        </code>
        →
        <code class=""returnvalue"">
         42
        </code>
       </p>
       <p>
        <code class=""literal"">
         trunc(-42.8)
        </code>
        →
        <code class=""returnvalue"">
         -42
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         trunc
        </code>
        (
        <em class=""parameter"">
         <code>
          v
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          s
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Truncates
        <em class=""parameter"">
         <code>
          v
         </code>
        </em>
        to
        <em class=""parameter"">
         <code>
          s
         </code>
        </em>
        decimal places
       </p>
       <p>
        <code class=""literal"">
         trunc(42.4382, 2)
        </code>
        →
        <code class=""returnvalue"">
         42.43
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.6.2.2.31.1.1.1"" name=""id-1.5.8.9.6.2.2.31.1.1.1"">
        </a>
        <code class=""function"">
         width_bucket
        </code>
        (
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          low
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          high
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         width_bucket
        </code>
        (
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          low
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          high
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of the bucket in which
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        falls in a histogram having
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        equal-width buckets spanning the range
        <em class=""parameter"">
         <code>
          low
         </code>
        </em>
        to
        <em class=""parameter"">
         <code>
          high
         </code>
        </em>
        . Returns
        <code class=""literal"">
         0
        </code>
        or
        <code class=""literal"">
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         +1
        </code>
        for an input outside that range.
       </p>
       <p>
        <code class=""literal"">
         width_bucket(5.35, 0.024, 10.06, 5)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         width_bucket
        </code>
        (
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        <code class=""type"">
         anycompatible
        </code>
        ,
        <em class=""parameter"">
         <code>
          thresholds
         </code>
        </em>
        <code class=""type"">
         anycompatiblearray
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of the bucket in which
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        falls given an array listing the lower bounds of the buckets. Returns
        <code class=""literal"">
         0
        </code>
        for an input less than the first lower bound.
        <em class=""parameter"">
         <code>
          operand
         </code>
        </em>
        and the array elements can be of any type having standard comparison operators. The
        <em class=""parameter"">
         <code>
          thresholds
         </code>
        </em>
        array
        <span class=""emphasis"">
         <em>
          must be sorted
         </em>
        </span>
        , smallest first, or unexpected results will be obtained.
       </p>
       <p>
        <code class=""literal"">
         width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[])
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE"" title=""Table 9.6. Random Functions"">
   Table 9.6
  </a>
  shows functions for generating random numbers.
 </p>
 <div class=""table"" id=""FUNCTIONS-MATH-RANDOM-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.6. Random Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Random Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.8.2.2.1.1.1.1"" name=""id-1.5.8.9.8.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         random
        </code>
        ( ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Returns a random value in the range 0.0 &lt;= x &lt; 1.0
       </p>
       <p>
        <code class=""literal"">
         random()
        </code>
        →
        <code class=""returnvalue"">
         0.897124072839091
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.8.2.2.2.1.1.1"" name=""id-1.5.8.9.8.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         random
        </code>
        (
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          max
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         random
        </code>
        (
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        ,
        <em class=""parameter"">
         <code>
          max
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         random
        </code>
        (
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          max
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Returns a random value in the range
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        &lt;= x &lt;=
        <em class=""parameter"">
         <code>
          max
         </code>
        </em>
        . For type
        <code class=""type"">
         numeric
        </code>
        , the result will have the same number of fractional decimal digits as
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        or
        <em class=""parameter"">
         <code>
          max
         </code>
        </em>
        , whichever has more.
       </p>
       <p>
        <code class=""literal"">
         random(1, 10)
        </code>
        →
        <code class=""returnvalue"">
         7
        </code>
       </p>
       <p>
        <code class=""literal"">
         random(-0.499, 0.499)
        </code>
        →
        <code class=""returnvalue"">
         0.347
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.8.2.2.3.1.1.1"" name=""id-1.5.8.9.8.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         random_normal
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           mean
          </code>
         </em>
         <code class=""type"">
          double precision
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            stddev
           </code>
          </em>
          <code class=""type"">
           double precision
          </code>
         </span>
         ]
        </span>
        ] ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Returns a random value from the normal distribution with the given parameters;
        <em class=""parameter"">
         <code>
          mean
         </code>
        </em>
        defaults to 0.0 and
        <em class=""parameter"">
         <code>
          stddev
         </code>
        </em>
        defaults to 1.0
       </p>
       <p>
        <code class=""literal"">
         random_normal(0.0, 1.0)
        </code>
        →
        <code class=""returnvalue"">
         0.051285419
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.8.2.2.4.1.1.1"" name=""id-1.5.8.9.8.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         setseed
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         void
        </code>
       </p>
       <p>
        Sets the seed for subsequent
        <code class=""literal"">
         random()
        </code>
        and
        <code class=""literal"">
         random_normal()
        </code>
        calls; argument must be between -1.0 and 1.0, inclusive
       </p>
       <p>
        <code class=""literal"">
         setseed(0.12345)
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The
  <code class=""function"">
   random()
  </code>
  and
  <code class=""function"">
   random_normal()
  </code>
  functions listed in
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-RANDOM-TABLE"" title=""Table 9.6. Random Functions"">
   Table 9.6
  </a>
  use a deterministic pseudo-random number generator. It is fast but not suitable for cryptographic applications; see the
  <a class=""xref"" href=""pgcrypto.html"" title=""F.26. pgcrypto — cryptographic functions"">
   pgcrypto
  </a>
  module for a more secure alternative. If
  <code class=""function"">
   setseed()
  </code>
  is called, the series of results of subsequent calls to these functions in the current session can be repeated by re-issuing
  <code class=""function"">
   setseed()
  </code>
  with the same argument. Without any prior
  <code class=""function"">
   setseed()
  </code>
  call in the same session, the first call to any of these functions obtains a seed from a platform-dependent source of random bits.
 </p>
 <p>
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-TRIG-TABLE"" title=""Table 9.7. Trigonometric Functions"">
   Table 9.7
  </a>
  shows the available trigonometric functions. Each of these functions comes in two variants, one that measures angles in radians and one that measures angles in degrees.
 </p>
 <div class=""table"" id=""FUNCTIONS-MATH-TRIG-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.7. Trigonometric Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Trigonometric Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.1.1.1.1"" name=""id-1.5.8.9.11.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         acos
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse cosine, result in radians
       </p>
       <p>
        <code class=""literal"">
         acos(1)
        </code>
        →
        <code class=""returnvalue"">
         0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.2.1.1.1"" name=""id-1.5.8.9.11.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         acosd
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse cosine, result in degrees
       </p>
       <p>
        <code class=""literal"">
         acosd(0.5)
        </code>
        →
        <code class=""returnvalue"">
         60
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.3.1.1.1"" name=""id-1.5.8.9.11.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         asin
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse sine, result in radians
       </p>
       <p>
        <code class=""literal"">
         asin(1)
        </code>
        →
        <code class=""returnvalue"">
         1.5707963267948966
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.4.1.1.1"" name=""id-1.5.8.9.11.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         asind
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse sine, result in degrees
       </p>
       <p>
        <code class=""literal"">
         asind(0.5)
        </code>
        →
        <code class=""returnvalue"">
         30
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.5.1.1.1"" name=""id-1.5.8.9.11.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         atan
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse tangent, result in radians
       </p>
       <p>
        <code class=""literal"">
         atan(1)
        </code>
        →
        <code class=""returnvalue"">
         0.7853981633974483
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.6.1.1.1"" name=""id-1.5.8.9.11.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         atand
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse tangent, result in degrees
       </p>
       <p>
        <code class=""literal"">
         atand(1)
        </code>
        →
        <code class=""returnvalue"">
         45
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.7.1.1.1"" name=""id-1.5.8.9.11.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         atan2
        </code>
        (
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse tangent of
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        /
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        , result in radians
       </p>
       <p>
        <code class=""literal"">
         atan2(1, 0)
        </code>
        →
        <code class=""returnvalue"">
         1.5707963267948966
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.8.1.1.1"" name=""id-1.5.8.9.11.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         atan2d
        </code>
        (
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse tangent of
        <em class=""parameter"">
         <code>
          y
         </code>
        </em>
        /
        <em class=""parameter"">
         <code>
          x
         </code>
        </em>
        , result in degrees
       </p>
       <p>
        <code class=""literal"">
         atan2d(1, 0)
        </code>
        →
        <code class=""returnvalue"">
         90
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.9.1.1.1"" name=""id-1.5.8.9.11.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         cos
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cosine, argument in radians
       </p>
       <p>
        <code class=""literal"">
         cos(0)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.10.1.1.1"" name=""id-1.5.8.9.11.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         cosd
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cosine, argument in degrees
       </p>
       <p>
        <code class=""literal"">
         cosd(60)
        </code>
        →
        <code class=""returnvalue"">
         0.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.11.1.1.1"" name=""id-1.5.8.9.11.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         cot
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cotangent, argument in radians
       </p>
       <p>
        <code class=""literal"">
         cot(0.5)
        </code>
        →
        <code class=""returnvalue"">
         1.830487721712452
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.12.1.1.1"" name=""id-1.5.8.9.11.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         cotd
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Cotangent, argument in degrees
       </p>
       <p>
        <code class=""literal"">
         cotd(45)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.13.1.1.1"" name=""id-1.5.8.9.11.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         sin
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Sine, argument in radians
       </p>
       <p>
        <code class=""literal"">
         sin(1)
        </code>
        →
        <code class=""returnvalue"">
         0.8414709848078965
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.14.1.1.1"" name=""id-1.5.8.9.11.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         sind
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Sine, argument in degrees
       </p>
       <p>
        <code class=""literal"">
         sind(30)
        </code>
        →
        <code class=""returnvalue"">
         0.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.15.1.1.1"" name=""id-1.5.8.9.11.2.2.15.1.1.1"">
        </a>
        <code class=""function"">
         tan
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Tangent, argument in radians
       </p>
       <p>
        <code class=""literal"">
         tan(1)
        </code>
        →
        <code class=""returnvalue"">
         1.5574077246549023
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.11.2.2.16.1.1.1"" name=""id-1.5.8.9.11.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         tand
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Tangent, argument in degrees
       </p>
       <p>
        <code class=""literal"">
         tand(45)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Another way to work with angles measured in degrees is to use the unit transformation functions
   <code class=""literal"">
    <code class=""function"">
     radians()
    </code>
   </code>
   and
   <code class=""literal"">
    <code class=""function"">
     degrees()
    </code>
   </code>
   shown earlier. However, using the degree-based trigonometric functions is preferred, as that way avoids round-off error for special cases such as
   <code class=""literal"">
    sind(30)
   </code>
   .
  </p>
 </div>
 <p>
  <a class=""xref"" href=""functions-math.html#FUNCTIONS-MATH-HYP-TABLE"" title=""Table 9.8. Hyperbolic Functions"">
   Table 9.8
  </a>
  shows the available hyperbolic functions.
 </p>
 <div class=""table"" id=""FUNCTIONS-MATH-HYP-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.8. Hyperbolic Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Hyperbolic Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.1.1.1.1"" name=""id-1.5.8.9.14.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         sinh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Hyperbolic sine
       </p>
       <p>
        <code class=""literal"">
         sinh(1)
        </code>
        →
        <code class=""returnvalue"">
         1.1752011936438014
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.2.1.1.1"" name=""id-1.5.8.9.14.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         cosh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Hyperbolic cosine
       </p>
       <p>
        <code class=""literal"">
         cosh(0)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.3.1.1.1"" name=""id-1.5.8.9.14.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         tanh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Hyperbolic tangent
       </p>
       <p>
        <code class=""literal"">
         tanh(1)
        </code>
        →
        <code class=""returnvalue"">
         0.7615941559557649
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.4.1.1.1"" name=""id-1.5.8.9.14.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         asinh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse hyperbolic sine
       </p>
       <p>
        <code class=""literal"">
         asinh(1)
        </code>
        →
        <code class=""returnvalue"">
         0.881373587019543
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.5.1.1.1"" name=""id-1.5.8.9.14.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         acosh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse hyperbolic cosine
       </p>
       <p>
        <code class=""literal"">
         acosh(1)
        </code>
        →
        <code class=""returnvalue"">
         0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.9.14.2.2.6.1.1.1"" name=""id-1.5.8.9.14.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         atanh
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Inverse hyperbolic tangent
       </p>
       <p>
        <code class=""literal"">
         atanh(0.5)
        </code>
        →
        <code class=""returnvalue"">
         0.5493061443340548
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
9. Functions and Operators,9.4. String Functions and Operators,https://www.postgresql.org/docs/17/functions-string.html,"<div class=""sect1"" id=""FUNCTIONS-STRING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.4. String Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-STRING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-string.html#FUNCTIONS-STRING-FORMAT"">
      9.4.1.
      <code class=""function"">
       format
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  This section describes functions and operators for examining and manipulating string values. Strings in this context include values of the types
  <code class=""type"">
   character
  </code>
  ,
  <code class=""type"">
   character varying
  </code>
  , and
  <code class=""type"">
   text
  </code>
  . Except where noted, these functions and operators are declared to accept and return type
  <code class=""type"">
   text
  </code>
  . They will interchangeably accept
  <code class=""type"">
   character varying
  </code>
  arguments. Values of type
  <code class=""type"">
   character
  </code>
  will be converted to
  <code class=""type"">
   text
  </code>
  before the function or operator is applied, resulting in stripping any trailing spaces in the
  <code class=""type"">
   character
  </code>
  value.
 </p>
 <p>
  <acronym class=""acronym"">
   SQL
  </acronym>
  defines some string functions that use key words, rather than commas, to separate arguments. Details are in
  <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-SQL"" title=""Table 9.9. SQL String Functions and Operators"">
   Table 9.9
  </a>
  .
  <span class=""productname"">
   PostgreSQL
  </span>
  also provides versions of these functions that use the regular function invocation syntax (see
  <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-OTHER"" title=""Table 9.10. Other String Functions and Operators"">
   Table 9.10
  </a>
  ).
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   The string concatenation operator (
   <code class=""literal"">
    ||
   </code>
   ) will accept non-string input, so long as at least one input is of string type, as shown in
   <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-SQL"" title=""Table 9.9. SQL String Functions and Operators"">
    Table 9.9
   </a>
   . For other cases, inserting an explicit coercion to
   <code class=""type"">
    text
   </code>
   can be used to have non-string input accepted.
  </p>
 </div>
 <div class=""table"" id=""FUNCTIONS-STRING-SQL"">
  <p class=""title"">
   <strong>
    Table 9.9.
    <acronym class=""acronym"">
     SQL
    </acronym>
    String Functions and Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""SQL String Functions and Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function/Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.1.1.1.1"" name=""id-1.5.8.10.5.2.2.1.1.1.1"">
        </a>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         text
        </code>
        →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Concatenates the two strings.
       </p>
       <p>
        <code class=""literal"">
         'Post' || 'greSQL'
        </code>
        →
        <code class=""returnvalue"">
         PostgreSQL
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anynonarray
        </code>
        →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""type"">
         anynonarray
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         text
        </code>
        →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the non-string input to text, then concatenates the two strings. (The non-string input cannot be of an array type, because that would create ambiguity with the array
        <code class=""literal"">
         ||
        </code>
        operators. If you want to concatenate an array's text equivalent, cast it to
        <code class=""type"">
         text
        </code>
        explicitly.)
       </p>
       <p>
        <code class=""literal"">
         'Value: ' || 42
        </code>
        →
        <code class=""returnvalue"">
         Value: 42
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.3.1.1.1"" name=""id-1.5.8.10.5.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         btrim
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           characters
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Removes the longest string containing only characters in
        <em class=""parameter"">
         <code>
          characters
         </code>
        </em>
        (a space by default) from the start and end of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         btrim('xyxtrimyyx', 'xyz')
        </code>
        →
        <code class=""returnvalue"">
         trim
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.4.1.1.1"" name=""id-1.5.8.10.5.2.2.4.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.4.1.1.2"" name=""id-1.5.8.10.5.2.2.4.1.1.2"">
        </a>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         IS
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          NOT
         </code>
        </span>
        ] [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           form
          </code>
         </em>
        </span>
        ]
        <code class=""literal"">
         NORMALIZED
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Checks whether the string is in the specified Unicode normalization form. The optional
        <em class=""parameter"">
         <code>
          form
         </code>
        </em>
        key word specifies the form:
        <code class=""literal"">
         NFC
        </code>
        (the default),
        <code class=""literal"">
         NFD
        </code>
        ,
        <code class=""literal"">
         NFKC
        </code>
        , or
        <code class=""literal"">
         NFKD
        </code>
        . This expression can only be used when the server encoding is
        <code class=""literal"">
         UTF8
        </code>
        . Note that checking for normalization using this expression is often faster than normalizing possibly already normalized strings.
       </p>
       <p>
        <code class=""literal"">
         U&amp;'\0061\0308bc' IS NFD NORMALIZED
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.5.1.1.1"" name=""id-1.5.8.10.5.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         bit_length
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bits in the string (8 times the
        <code class=""function"">
         octet_length
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         bit_length('jose')
        </code>
        →
        <code class=""returnvalue"">
         32
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.6.1.1.1"" name=""id-1.5.8.10.5.2.2.6.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.6.1.1.2"" name=""id-1.5.8.10.5.2.2.6.1.1.2"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.6.1.1.3"" name=""id-1.5.8.10.5.2.2.6.1.1.3"">
        </a>
        <code class=""function"">
         char_length
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.6.1.2.1"" name=""id-1.5.8.10.5.2.2.6.1.2.1"">
        </a>
        <code class=""function"">
         character_length
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of characters in the string.
       </p>
       <p>
        <code class=""literal"">
         char_length('josé')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.7.1.1.1"" name=""id-1.5.8.10.5.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         lower
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the string to all lower case, according to the rules of the database's locale.
       </p>
       <p>
        <code class=""literal"">
         lower('TOM')
        </code>
        →
        <code class=""returnvalue"">
         tom
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.8.1.1.1"" name=""id-1.5.8.10.5.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         lpad
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           fill
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extends the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        to length
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        by prepending the characters
        <em class=""parameter"">
         <code>
          fill
         </code>
        </em>
        (a space by default). If the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        is already longer than
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        then it is truncated (on the right).
       </p>
       <p>
        <code class=""literal"">
         lpad('hi', 5, 'xy')
        </code>
        →
        <code class=""returnvalue"">
         xyxhi
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.9.1.1.1"" name=""id-1.5.8.10.5.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         ltrim
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           characters
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Removes the longest string containing only characters in
        <em class=""parameter"">
         <code>
          characters
         </code>
        </em>
        (a space by default) from the start of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         ltrim('zzzytest', 'xyz')
        </code>
        →
        <code class=""returnvalue"">
         test
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.10.1.1.1"" name=""id-1.5.8.10.5.2.2.10.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.10.1.1.2"" name=""id-1.5.8.10.5.2.2.10.1.1.2"">
        </a>
        <code class=""function"">
         normalize
        </code>
        (
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           form
          </code>
         </em>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the string to the specified Unicode normalization form. The optional
        <em class=""parameter"">
         <code>
          form
         </code>
        </em>
        key word specifies the form:
        <code class=""literal"">
         NFC
        </code>
        (the default),
        <code class=""literal"">
         NFD
        </code>
        ,
        <code class=""literal"">
         NFKC
        </code>
        , or
        <code class=""literal"">
         NFKD
        </code>
        . This function can only be used when the server encoding is
        <code class=""literal"">
         UTF8
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         normalize(U&amp;'\0061\0308bc', NFC)
        </code>
        →
        <code class=""returnvalue"">
         U&amp;'\00E4bc'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.11.1.1.1"" name=""id-1.5.8.10.5.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         octet_length
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bytes in the string.
       </p>
       <p>
        <code class=""literal"">
         octet_length('josé')
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
        (if server encoding is UTF8)
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.12.1.1.1"" name=""id-1.5.8.10.5.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         octet_length
        </code>
        (
        <code class=""type"">
         character
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bytes in the string. Since this version of the function accepts type
        <code class=""type"">
         character
        </code>
        directly, it will not strip trailing spaces.
       </p>
       <p>
        <code class=""literal"">
         octet_length('abc '::character(4))
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.13.1.1.1"" name=""id-1.5.8.10.5.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         overlay
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         PLACING
        </code>
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Replaces the substring of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        that starts at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th character and extends for
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        characters with
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        . If
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        is omitted, it defaults to the length of
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         overlay('Txxxxas' placing 'hom' from 2 for 4)
        </code>
        →
        <code class=""returnvalue"">
         Thomas
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.14.1.1.1"" name=""id-1.5.8.10.5.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         position
        </code>
        (
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         IN
        </code>
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns first starting index of the specified
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        within
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        , or zero if it's not present.
       </p>
       <p>
        <code class=""literal"">
         position('om' in 'Thomas')
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.15.1.1.1"" name=""id-1.5.8.10.5.2.2.15.1.1.1"">
        </a>
        <code class=""function"">
         rpad
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           fill
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extends the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        to length
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        by appending the characters
        <em class=""parameter"">
         <code>
          fill
         </code>
        </em>
        (a space by default). If the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        is already longer than
        <em class=""parameter"">
         <code>
          length
         </code>
        </em>
        then it is truncated.
       </p>
       <p>
        <code class=""literal"">
         rpad('hi', 5, 'xy')
        </code>
        →
        <code class=""returnvalue"">
         hixyx
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.16.1.1.1"" name=""id-1.5.8.10.5.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         rtrim
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           characters
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Removes the longest string containing only characters in
        <em class=""parameter"">
         <code>
          characters
         </code>
        </em>
        (a space by default) from the end of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         rtrim('testxxzx', 'xyz')
        </code>
        →
        <code class=""returnvalue"">
         test
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.17.1.1.1"" name=""id-1.5.8.10.5.2.2.17.1.1.1"">
        </a>
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FROM
         </code>
         <em class=""parameter"">
          <code>
           start
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extracts the substring of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        starting at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th character if that is specified, and stopping after
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        characters if that is specified. Provide at least one of
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         substring('Thomas' from 2 for 3)
        </code>
        →
        <code class=""returnvalue"">
         hom
        </code>
       </p>
       <p>
        <code class=""literal"">
         substring('Thomas' from 3)
        </code>
        →
        <code class=""returnvalue"">
         omas
        </code>
       </p>
       <p>
        <code class=""literal"">
         substring('Thomas' for 2)
        </code>
        →
        <code class=""returnvalue"">
         Th
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extracts the first substring matching POSIX regular expression; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         substring('Thomas' from '...$')
        </code>
        →
        <code class=""returnvalue"">
         mas
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         SIMILAR
        </code>
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         ESCAPE
        </code>
        <em class=""parameter"">
         <code>
          escape
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         FOR
        </code>
        <em class=""parameter"">
         <code>
          escape
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extracts the first substring matching
        <acronym class=""acronym"">
         SQL
        </acronym>
        regular expression; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP"" title=""9.7.2. SIMILAR TO Regular Expressions"">
         Section 9.7.2
        </a>
        . The first form has been specified since SQL:2003; the second form was only in SQL:1999 and should be considered obsolete.
       </p>
       <p>
        <code class=""literal"">
         substring('Thomas' similar '%#""o_a#""_' escape '#')
        </code>
        →
        <code class=""returnvalue"">
         oma
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.20.1.1.1"" name=""id-1.5.8.10.5.2.2.20.1.1.1"">
        </a>
        <code class=""function"">
         trim
        </code>
        ( [
        <span class=""optional"">
         <code class=""literal"">
          LEADING
         </code>
         |
         <code class=""literal"">
          TRAILING
         </code>
         |
         <code class=""literal"">
          BOTH
         </code>
        </span>
        ] [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           characters
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ]
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Removes the longest string containing only characters in
        <em class=""parameter"">
         <code>
          characters
         </code>
        </em>
        (a space by default) from the start, end, or both ends (
        <code class=""literal"">
         BOTH
        </code>
        is the default) of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         trim(both 'xyz' from 'yxTomxx')
        </code>
        →
        <code class=""returnvalue"">
         Tom
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         trim
        </code>
        ( [
        <span class=""optional"">
         <code class=""literal"">
          LEADING
         </code>
         |
         <code class=""literal"">
          TRAILING
         </code>
         |
         <code class=""literal"">
          BOTH
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          FROM
         </code>
        </span>
        ]
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           characters
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        This is a non-standard syntax for
        <code class=""function"">
         trim()
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         trim(both from 'yxTomxx', 'xyz')
        </code>
        →
        <code class=""returnvalue"">
         Tom
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.22.1.1.1"" name=""id-1.5.8.10.5.2.2.22.1.1.1"">
        </a>
        <code class=""function"">
         unicode_assigned
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Returns
        <code class=""literal"">
         true
        </code>
        if all characters in the string are assigned Unicode codepoints;
        <code class=""literal"">
         false
        </code>
        otherwise. This function can only be used when the server encoding is
        <code class=""literal"">
         UTF8
        </code>
        .
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.5.2.2.23.1.1.1"" name=""id-1.5.8.10.5.2.2.23.1.1.1"">
        </a>
        <code class=""function"">
         upper
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the string to all upper case, according to the rules of the database's locale.
       </p>
       <p>
        <code class=""literal"">
         upper('tom')
        </code>
        →
        <code class=""returnvalue"">
         TOM
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Additional string manipulation functions and operators are available and are listed in
  <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-OTHER"" title=""Table 9.10. Other String Functions and Operators"">
   Table 9.10
  </a>
  . (Some of these are used internally to implement the
  <acronym class=""acronym"">
   SQL
  </acronym>
  -standard string functions listed in
  <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-SQL"" title=""Table 9.9. SQL String Functions and Operators"">
   Table 9.9
  </a>
  .) There are also pattern-matching operators, which are described in
  <a class=""xref"" href=""functions-matching.html"" title=""9.7. Pattern Matching"">
   Section 9.7
  </a>
  , and operators for full-text search, which are described in
  <a class=""xref"" href=""textsearch.html"" title=""Chapter 12. Full Text Search"">
   Chapter 12
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-STRING-OTHER"">
  <p class=""title"">
   <strong>
    Table 9.10. Other String Functions and Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Other String Functions and Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function/Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.1.1.1.1"" name=""id-1.5.8.10.7.2.2.1.1.1.1"">
        </a>
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         ^@
        </code>
        <code class=""type"">
         text
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Returns true if the first string starts with the second string (equivalent to the
        <code class=""function"">
         starts_with()
        </code>
        function).
       </p>
       <p>
        <code class=""literal"">
         'alphabet' ^@ 'alph'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.2.1.1.1"" name=""id-1.5.8.10.7.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         ascii
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the numeric code of the first character of the argument. In
        <acronym class=""acronym"">
         UTF8
        </acronym>
        encoding, returns the Unicode code point of the character. In other multibyte encodings, the argument must be an
        <acronym class=""acronym"">
         ASCII
        </acronym>
        character.
       </p>
       <p>
        <code class=""literal"">
         ascii('x')
        </code>
        →
        <code class=""returnvalue"">
         120
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.3.1.1.1"" name=""id-1.5.8.10.7.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         chr
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the character with the given code. In
        <acronym class=""acronym"">
         UTF8
        </acronym>
        encoding the argument is treated as a Unicode code point. In other multibyte encodings the argument must designate an
        <acronym class=""acronym"">
         ASCII
        </acronym>
        character.
        <code class=""literal"">
         chr(0)
        </code>
        is disallowed because text data types cannot store that character.
       </p>
       <p>
        <code class=""literal"">
         chr(65)
        </code>
        →
        <code class=""returnvalue"">
         A
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.4.1.1.1"" name=""id-1.5.8.10.7.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         concat
        </code>
        (
        <em class=""parameter"">
         <code>
          val1
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        [,
        <em class=""parameter"">
         <code>
          val2
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        [, ...] ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Concatenates the text representations of all the arguments. NULL arguments are ignored.
       </p>
       <p>
        <code class=""literal"">
         concat('abcde', 2, NULL, 22)
        </code>
        →
        <code class=""returnvalue"">
         abcde222
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.5.1.1.1"" name=""id-1.5.8.10.7.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         concat_ws
        </code>
        (
        <em class=""parameter"">
         <code>
          sep
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          val1
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        [,
        <em class=""parameter"">
         <code>
          val2
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        [, ...] ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Concatenates all but the first argument, with separators. The first argument is used as the separator string, and should not be NULL. Other NULL arguments are ignored.
       </p>
       <p>
        <code class=""literal"">
         concat_ws(',', 'abcde', 2, NULL, 22)
        </code>
        →
        <code class=""returnvalue"">
         abcde,2,22
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.6.1.1.1"" name=""id-1.5.8.10.7.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         format
        </code>
        (
        <em class=""parameter"">
         <code>
          formatstr
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          formatarg
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        [, ...] ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Formats arguments according to a format string; see
        <a class=""xref"" href=""functions-string.html#FUNCTIONS-STRING-FORMAT"" title=""9.4.1. format"">
         Section 9.4.1
        </a>
        . This function is similar to the C function
        <code class=""function"">
         sprintf
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         format('Hello %s, %1$s', 'World')
        </code>
        →
        <code class=""returnvalue"">
         Hello World, World
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.7.1.1.1"" name=""id-1.5.8.10.7.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         initcap
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.
       </p>
       <p>
        <code class=""literal"">
         initcap('hi THOMAS')
        </code>
        →
        <code class=""returnvalue"">
         Hi Thomas
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.8.1.1.1"" name=""id-1.5.8.10.7.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         left
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns first
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        characters in the string, or when
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        is negative, returns all but last |
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        | characters.
       </p>
       <p>
        <code class=""literal"">
         left('abcde', 2)
        </code>
        →
        <code class=""returnvalue"">
         ab
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.9.1.1.1"" name=""id-1.5.8.10.7.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         length
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of characters in the string.
       </p>
       <p>
        <code class=""literal"">
         length('jose')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.10.1.1.1"" name=""id-1.5.8.10.7.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         md5
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Computes the MD5
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the argument, with the result written in hexadecimal.
       </p>
       <p>
        <code class=""literal"">
         md5('abc')
        </code>
        →
        <code class=""returnvalue"">
         900150983cd24fb0​d6963f7d28e17f72
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.11.1.1.1"" name=""id-1.5.8.10.7.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         parse_ident
        </code>
        (
        <em class=""parameter"">
         <code>
          qualified_identifier
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          strict_mode
         </code>
        </em>
        <code class=""type"">
         boolean
        </code>
        <code class=""literal"">
         DEFAULT
        </code>
        <code class=""literal"">
         true
        </code>
        ] ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Splits
        <em class=""parameter"">
         <code>
          qualified_identifier
         </code>
        </em>
        into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is
        <code class=""literal"">
         false
        </code>
        , then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to
        <code class=""type"">
         name[]
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         parse_ident('""SomeSchema"".someTable')
        </code>
        →
        <code class=""returnvalue"">
         {SomeSchema,sometable}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.12.1.1.1"" name=""id-1.5.8.10.7.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         pg_client_encoding
        </code>
        ( ) →
        <code class=""returnvalue"">
         name
        </code>
       </p>
       <p>
        Returns current client encoding name.
       </p>
       <p>
        <code class=""literal"">
         pg_client_encoding()
        </code>
        →
        <code class=""returnvalue"">
         UTF8
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.13.1.1.1"" name=""id-1.5.8.10.7.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         quote_ident
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the given string suitably quoted to be used as an identifier in an
        <acronym class=""acronym"">
         SQL
        </acronym>
        statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also
        <a class=""xref"" href=""plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE"" title=""Example 41.1. Quoting Values in Dynamic Queries"">
         Example 41.1
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         quote_ident('Foo bar')
        </code>
        →
        <code class=""returnvalue"">
         ""Foo bar""
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.14.1.1.1"" name=""id-1.5.8.10.7.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         quote_literal
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the given string suitably quoted to be used as a string literal in an
        <acronym class=""acronym"">
         SQL
        </acronym>
        statement string. Embedded single-quotes and backslashes are properly doubled. Note that
        <code class=""function"">
         quote_literal
        </code>
        returns null on null input; if the argument might be null,
        <code class=""function"">
         quote_nullable
        </code>
        is often more suitable. See also
        <a class=""xref"" href=""plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE"" title=""Example 41.1. Quoting Values in Dynamic Queries"">
         Example 41.1
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         quote_literal(E'O\'Reilly')
        </code>
        →
        <code class=""returnvalue"">
         'O''Reilly'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         quote_literal
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the given value to text and then quotes it as a literal. Embedded single-quotes and backslashes are properly doubled.
       </p>
       <p>
        <code class=""literal"">
         quote_literal(42.5)
        </code>
        →
        <code class=""returnvalue"">
         '42.5'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.16.1.1.1"" name=""id-1.5.8.10.7.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         quote_nullable
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the given string suitably quoted to be used as a string literal in an
        <acronym class=""acronym"">
         SQL
        </acronym>
        statement string; or, if the argument is null, returns
        <code class=""literal"">
         NULL
        </code>
        . Embedded single-quotes and backslashes are properly doubled. See also
        <a class=""xref"" href=""plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE"" title=""Example 41.1. Quoting Values in Dynamic Queries"">
         Example 41.1
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         quote_nullable(NULL)
        </code>
        →
        <code class=""returnvalue"">
         NULL
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         quote_nullable
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the given value to text and then quotes it as a literal; or, if the argument is null, returns
        <code class=""literal"">
         NULL
        </code>
        . Embedded single-quotes and backslashes are properly doubled.
       </p>
       <p>
        <code class=""literal"">
         quote_nullable(42.5)
        </code>
        →
        <code class=""returnvalue"">
         '42.5'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.18.1.1.1"" name=""id-1.5.8.10.7.2.2.18.1.1.1"">
        </a>
        <code class=""function"">
         regexp_count
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ] ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of times the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        matches in the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        ; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_count('123456789012', '\d\d\d', 2)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.19.1.1.1"" name=""id-1.5.8.10.7.2.2.19.1.1.1"">
        </a>
        <code class=""function"">
         regexp_instr
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          endoption
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          subexpr
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ] ] ] ] ] ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the position within
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        where the
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        'th match of the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        occurs, or zero if there is no such match; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i')
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
       <p>
        <code class=""literal"">
         regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i', 2)
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.20.1.1.1"" name=""id-1.5.8.10.7.2.2.20.1.1.1"">
        </a>
        <code class=""function"">
         regexp_like
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Checks whether a match of the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        occurs within
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        ; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_like('Hello World', 'world$', 'i')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.21.1.1.1"" name=""id-1.5.8.10.7.2.2.21.1.1.1"">
        </a>
        <code class=""function"">
         regexp_match
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Returns substrings within the first match of the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        to the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        ; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_match('foobarbequebaz', '(bar)(beque)')
        </code>
        →
        <code class=""returnvalue"">
         {bar,beque}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.22.1.1.1"" name=""id-1.5.8.10.7.2.2.22.1.1.1"">
        </a>
        <code class=""function"">
         regexp_matches
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         setof text[]
        </code>
       </p>
       <p>
        Returns substrings within the first match of the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        to the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        , or substrings within all such matches if the
        <code class=""literal"">
         g
        </code>
        flag is used; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_matches('foobarbequebaz', 'ba.', 'g')
        </code>
        →
       </p>
       <pre class=""programlisting"">
 {bar}
 {baz}
</pre>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.23.1.1.1"" name=""id-1.5.8.10.7.2.2.23.1.1.1"">
        </a>
        <code class=""function"">
         regexp_replace
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          replacement
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ] [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Replaces the substring that is the first match to the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        , or all such matches if the
        <code class=""literal"">
         g
        </code>
        flag is used; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_replace('Thomas', '.[mN]a.', 'M')
        </code>
        →
        <code class=""returnvalue"">
         ThM
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         regexp_replace
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          replacement
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Replaces the substring that is the
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        'th match to the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        , or all such matches if
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        is zero; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_replace('Thomas', '.', 'X', 3, 2)
        </code>
        →
        <code class=""returnvalue"">
         ThoXas
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.25.1.1.1"" name=""id-1.5.8.10.7.2.2.25.1.1.1"">
        </a>
        <code class=""function"">
         regexp_split_to_array
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Splits
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        using a POSIX regular expression as the delimiter, producing an array of results; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_split_to_array('hello world', '\s+')
        </code>
        →
        <code class=""returnvalue"">
         {hello,world}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.26.1.1.1"" name=""id-1.5.8.10.7.2.2.26.1.1.1"">
        </a>
        <code class=""function"">
         regexp_split_to_table
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ] ) →
        <code class=""returnvalue"">
         setof text
        </code>
       </p>
       <p>
        Splits
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        using a POSIX regular expression as the delimiter, producing a set of results; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_split_to_table('hello world', '\s+')
        </code>
        →
       </p>
       <pre class=""programlisting"">
 hello
 world
</pre>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.27.1.1.1"" name=""id-1.5.8.10.7.2.2.27.1.1.1"">
        </a>
        <code class=""function"">
         regexp_substr
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [,
        <em class=""parameter"">
         <code>
          flags
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [,
        <em class=""parameter"">
         <code>
          subexpr
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ] ] ] ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the substring within
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        that matches the
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        'th occurrence of the POSIX regular expression
        <em class=""parameter"">
         <code>
          pattern
         </code>
        </em>
        , or
        <code class=""literal"">
         NULL
        </code>
        if there is no such match; see
        <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
         Section 9.7.3
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i')
        </code>
        →
        <code class=""returnvalue"">
         CDEF
        </code>
       </p>
       <p>
        <code class=""literal"">
         regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i', 2)
        </code>
        →
        <code class=""returnvalue"">
         EF
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.28.1.1.1"" name=""id-1.5.8.10.7.2.2.28.1.1.1"">
        </a>
        <code class=""function"">
         repeat
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          number
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Repeats
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        the specified
        <em class=""parameter"">
         <code>
          number
         </code>
        </em>
        of times.
       </p>
       <p>
        <code class=""literal"">
         repeat('Pg', 4)
        </code>
        →
        <code class=""returnvalue"">
         PgPgPgPg
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.29.1.1.1"" name=""id-1.5.8.10.7.2.2.29.1.1.1"">
        </a>
        <code class=""function"">
         replace
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          to
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Replaces all occurrences in
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        of substring
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        with substring
        <em class=""parameter"">
         <code>
          to
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         replace('abcdefabcdef', 'cd', 'XX')
        </code>
        →
        <code class=""returnvalue"">
         abXXefabXXef
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.30.1.1.1"" name=""id-1.5.8.10.7.2.2.30.1.1.1"">
        </a>
        <code class=""function"">
         reverse
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Reverses the order of the characters in the string.
       </p>
       <p>
        <code class=""literal"">
         reverse('abcde')
        </code>
        →
        <code class=""returnvalue"">
         edcba
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.31.1.1.1"" name=""id-1.5.8.10.7.2.2.31.1.1.1"">
        </a>
        <code class=""function"">
         right
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns last
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        characters in the string, or when
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        is negative, returns all but first |
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        | characters.
       </p>
       <p>
        <code class=""literal"">
         right('abcde', 2)
        </code>
        →
        <code class=""returnvalue"">
         de
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.32.1.1.1"" name=""id-1.5.8.10.7.2.2.32.1.1.1"">
        </a>
        <code class=""function"">
         split_part
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Splits
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        at occurrences of
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        and returns the
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        'th field (counting from one), or when
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        is negative, returns the |
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        |'th-from-last field.
       </p>
       <p>
        <code class=""literal"">
         split_part('abc~@~def~@~ghi', '~@~', 2)
        </code>
        →
        <code class=""returnvalue"">
         def
        </code>
       </p>
       <p>
        <code class=""literal"">
         split_part('abc,def,ghi,jkl', ',', -2)
        </code>
        →
        <code class=""returnvalue"">
         ghi
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.33.1.1.1"" name=""id-1.5.8.10.7.2.2.33.1.1.1"">
        </a>
        <code class=""function"">
         starts_with
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          prefix
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Returns true if
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        starts with
        <em class=""parameter"">
         <code>
          prefix
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         starts_with('alphabet', 'alph')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-STRING-TO-ARRAY"" name=""FUNCTION-STRING-TO-ARRAY"">
        </a>
        <code class=""function"">
         string_to_array
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           null_string
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Splits the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        at occurrences of
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        and forms the resulting fields into a
        <code class=""type"">
         text
        </code>
        array. If
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        is
        <code class=""literal"">
         NULL
        </code>
        , each character in the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        will become a separate element in the array. If
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        is an empty string, then the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        is treated as a single field. If
        <em class=""parameter"">
         <code>
          null_string
         </code>
        </em>
        is supplied and is not
        <code class=""literal"">
         NULL
        </code>
        , fields matching that string are replaced by
        <code class=""literal"">
         NULL
        </code>
        . See also
        <a class=""link"" href=""functions-array.html#FUNCTION-ARRAY-TO-STRING"">
         <code class=""function"">
          array_to_string
         </code>
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         string_to_array('xx~~yy~~zz', '~~', 'yy')
        </code>
        →
        <code class=""returnvalue"">
         {xx,NULL,zz}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.35.1.1.1"" name=""id-1.5.8.10.7.2.2.35.1.1.1"">
        </a>
        <code class=""function"">
         string_to_table
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           null_string
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof text
        </code>
       </p>
       <p>
        Splits the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        at occurrences of
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        and returns the resulting fields as a set of
        <code class=""type"">
         text
        </code>
        rows. If
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        is
        <code class=""literal"">
         NULL
        </code>
        , each character in the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        will become a separate row of the result. If
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        is an empty string, then the
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        is treated as a single field. If
        <em class=""parameter"">
         <code>
          null_string
         </code>
        </em>
        is supplied and is not
        <code class=""literal"">
         NULL
        </code>
        , fields matching that string are replaced by
        <code class=""literal"">
         NULL
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         string_to_table('xx~^~yy~^~zz', '~^~', 'yy')
        </code>
        →
       </p>
       <pre class=""programlisting"">
 xx
 NULL
 zz
</pre>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.36.1.1.1"" name=""id-1.5.8.10.7.2.2.36.1.1.1"">
        </a>
        <code class=""function"">
         strpos
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns first starting index of the specified
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        within
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        , or zero if it's not present. (Same as
        <code class=""literal"">
         position(
         <em class=""parameter"">
          <code>
           substring
          </code>
         </em>
         in
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         )
        </code>
        , but note the reversed argument order.)
       </p>
       <p>
        <code class=""literal"">
         strpos('high', 'ig')
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.37.1.1.1"" name=""id-1.5.8.10.7.2.2.37.1.1.1"">
        </a>
        <code class=""function"">
         substr
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Extracts the substring of
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        starting at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th character, and extending for
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        characters if that is specified. (Same as
        <code class=""literal"">
         substring(
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         from
         <em class=""parameter"">
          <code>
           start
          </code>
         </em>
         for
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         )
        </code>
        .)
       </p>
       <p>
        <code class=""literal"">
         substr('alphabet', 3)
        </code>
        →
        <code class=""returnvalue"">
         phabet
        </code>
       </p>
       <p>
        <code class=""literal"">
         substr('alphabet', 3, 2)
        </code>
        →
        <code class=""returnvalue"">
         ph
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.38.1.1.1"" name=""id-1.5.8.10.7.2.2.38.1.1.1"">
        </a>
        <code class=""function"">
         to_ascii
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_ascii
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_ascii
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          encoding
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        to
        <acronym class=""acronym"">
         ASCII
        </acronym>
        from another encoding, which may be identified by name or number. If
        <em class=""parameter"">
         <code>
          encoding
         </code>
        </em>
        is omitted the database encoding is assumed (which in practice is the only useful case). The conversion consists primarily of dropping accents. Conversion is only supported from
        <code class=""literal"">
         LATIN1
        </code>
        ,
        <code class=""literal"">
         LATIN2
        </code>
        ,
        <code class=""literal"">
         LATIN9
        </code>
        , and
        <code class=""literal"">
         WIN1250
        </code>
        encodings. (See the
        <a class=""xref"" href=""unaccent.html"" title=""F.46. unaccent — a text search dictionary which removes diacritics"">
         unaccent
        </a>
        module for another, more flexible solution.)
       </p>
       <p>
        <code class=""literal"">
         to_ascii('Karél')
        </code>
        →
        <code class=""returnvalue"">
         Karel
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.39.1.1.1"" name=""id-1.5.8.10.7.2.2.39.1.1.1"">
        </a>
        <code class=""function"">
         to_bin
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_bin
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the number to its equivalent two's complement binary representation.
       </p>
       <p>
        <code class=""literal"">
         to_bin(2147483647)
        </code>
        →
        <code class=""returnvalue"">
         1111111111111111111111111111111
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_bin(-1234)
        </code>
        →
        <code class=""returnvalue"">
         11111111111111111111101100101110
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.40.1.1.1"" name=""id-1.5.8.10.7.2.2.40.1.1.1"">
        </a>
        <code class=""function"">
         to_hex
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_hex
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the number to its equivalent two's complement hexadecimal representation.
       </p>
       <p>
        <code class=""literal"">
         to_hex(2147483647)
        </code>
        →
        <code class=""returnvalue"">
         7fffffff
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_hex(-1234)
        </code>
        →
        <code class=""returnvalue"">
         fffffb2e
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.41.1.1.1"" name=""id-1.5.8.10.7.2.2.41.1.1.1"">
        </a>
        <code class=""function"">
         to_oct
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_oct
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts the number to its equivalent two's complement octal representation.
       </p>
       <p>
        <code class=""literal"">
         to_oct(2147483647)
        </code>
        →
        <code class=""returnvalue"">
         17777777777
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_oct(-1234)
        </code>
        →
        <code class=""returnvalue"">
         37777775456
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.42.1.1.1"" name=""id-1.5.8.10.7.2.2.42.1.1.1"">
        </a>
        <code class=""function"">
         translate
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          to
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Replaces each character in
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        that matches a character in the
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        set with the corresponding character in the
        <em class=""parameter"">
         <code>
          to
         </code>
        </em>
        set. If
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        is longer than
        <em class=""parameter"">
         <code>
          to
         </code>
        </em>
        , occurrences of the extra characters in
        <em class=""parameter"">
         <code>
          from
         </code>
        </em>
        are deleted.
       </p>
       <p>
        <code class=""literal"">
         translate('12345', '143', 'ax')
        </code>
        →
        <code class=""returnvalue"">
         a2x5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.10.7.2.2.43.1.1.1"" name=""id-1.5.8.10.7.2.2.43.1.1.1"">
        </a>
        <code class=""function"">
         unistr
        </code>
        (
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Evaluate escaped Unicode characters in the argument. Unicode characters can be specified as
        <code class=""literal"">
         \
         <em class=""replaceable"">
          <code>
           XXXX
          </code>
         </em>
        </code>
        (4 hexadecimal digits),
        <code class=""literal"">
         \+
         <em class=""replaceable"">
          <code>
           XXXXXX
          </code>
         </em>
        </code>
        (6 hexadecimal digits),
        <code class=""literal"">
         \u
         <em class=""replaceable"">
          <code>
           XXXX
          </code>
         </em>
        </code>
        (4 hexadecimal digits), or
        <code class=""literal"">
         \U
         <em class=""replaceable"">
          <code>
           XXXXXXXX
          </code>
         </em>
        </code>
        (8 hexadecimal digits). To specify a backslash, write two backslashes. All other characters are taken literally.
       </p>
       <p>
        If the server encoding is not UTF-8, the Unicode code point identified by one of these escape sequences is converted to the actual server encoding; an error is reported if that's not possible.
       </p>
       <p>
        This function provides a (non-standard) alternative to string constants with Unicode escapes (see
        <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-UESCAPE"" title=""4.1.2.3. String Constants with Unicode Escapes"">
         Section 4.1.2.3
        </a>
        ).
       </p>
       <p>
        <code class=""literal"">
         unistr('d\0061t\+000061')
        </code>
        →
        <code class=""returnvalue"">
         data
        </code>
       </p>
       <p>
        <code class=""literal"">
         unistr('d\u0061t\U00000061')
        </code>
        →
        <code class=""returnvalue"">
         data
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The
  <code class=""function"">
   concat
  </code>
  ,
  <code class=""function"">
   concat_ws
  </code>
  and
  <code class=""function"">
   format
  </code>
  functions are variadic, so it is possible to pass the values to be concatenated or formatted as an array marked with the
  <code class=""literal"">
   VARIADIC
  </code>
  keyword (see
  <a class=""xref"" href=""xfunc-sql.html#XFUNC-SQL-VARIADIC-FUNCTIONS"" title=""36.5.6. SQL Functions with Variable Numbers of Arguments"">
   Section 36.5.6
  </a>
  ). The array's elements are treated as if they were separate ordinary arguments to the function. If the variadic array argument is NULL,
  <code class=""function"">
   concat
  </code>
  and
  <code class=""function"">
   concat_ws
  </code>
  return NULL, but
  <code class=""function"">
   format
  </code>
  treats a NULL as a zero-element array.
 </p>
 <p>
  See also the aggregate function
  <code class=""function"">
   string_agg
  </code>
  in
  <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
   Section 9.21
  </a>
  , and the functions for converting between strings and the
  <code class=""type"">
   bytea
  </code>
  type in
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-CONVERSIONS"" title=""Table 9.13. Text/Binary String Conversion Functions"">
   Table 9.13
  </a>
  .
 </p>
 <div class=""sect2"" id=""FUNCTIONS-STRING-FORMAT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.4.1.
      <code class=""function"">
       format
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-STRING-FORMAT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.10.10.2"" name=""id-1.5.8.10.10.2"">
  </a>
  <p>
   The function
   <code class=""function"">
    format
   </code>
   produces output formatted according to a format string, in a style similar to the C function
   <code class=""function"">
    sprintf
   </code>
   .
  </p>
  <pre class=""synopsis"">
<code class=""function"">format</code>(<em class=""parameter""><code>formatstr</code></em> <code class=""type"">text</code> [, <em class=""parameter""><code>formatarg</code></em> <code class=""type"">""any""</code> [, ...] ])
</pre>
  <p>
   <em class=""parameter"">
    <code>
     formatstr
    </code>
   </em>
   is a format string that specifies how the result should be formatted. Text in the format string is copied directly to the result, except where
   <em class=""firstterm"">
    format specifiers
   </em>
   are used. Format specifiers act as placeholders in the string, defining how subsequent function arguments should be formatted and inserted into the result. Each
   <em class=""parameter"">
    <code>
     formatarg
    </code>
   </em>
   argument is converted to text according to the usual output rules for its data type, and then formatted and inserted into the result string according to the format specifier(s).
  </p>
  <p>
   Format specifiers are introduced by a
   <code class=""literal"">
    %
   </code>
   character and have the form
  </p>
  <pre class=""synopsis"">
%[<em class=""parameter""><code>position</code></em>][<em class=""parameter""><code>flags</code></em>][<em class=""parameter""><code>width</code></em>]<em class=""parameter""><code>type</code></em>
</pre>
  <p>
   where the component fields are:
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <em class=""parameter"">
       <code>
        position
       </code>
      </em>
      (optional)
     </span>
    </dt>
    <dd>
     <p>
      A string of the form
      <code class=""literal"">
       <em class=""parameter"">
        <code>
         n
        </code>
       </em>
       $
      </code>
      where
      <em class=""parameter"">
       <code>
        n
       </code>
      </em>
      is the index of the argument to print. Index 1 means the first argument after
      <em class=""parameter"">
       <code>
        formatstr
       </code>
      </em>
      . If the
      <em class=""parameter"">
       <code>
        position
       </code>
      </em>
      is omitted, the default is to use the next argument in sequence.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <em class=""parameter"">
       <code>
        flags
       </code>
      </em>
      (optional)
     </span>
    </dt>
    <dd>
     <p>
      Additional options controlling how the format specifier's output is formatted. Currently the only supported flag is a minus sign (
      <code class=""literal"">
       -
      </code>
      ) which will cause the format specifier's output to be left-justified. This has no effect unless the
      <em class=""parameter"">
       <code>
        width
       </code>
      </em>
      field is also specified.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <em class=""parameter"">
       <code>
        width
       </code>
      </em>
      (optional)
     </span>
    </dt>
    <dd>
     <p>
      Specifies the
      <span class=""emphasis"">
       <em>
        minimum
       </em>
      </span>
      number of characters to use to display the format specifier's output. The output is padded on the left or right (depending on the
      <code class=""literal"">
       -
      </code>
      flag) with spaces as needed to fill the width. A too-small width does not cause truncation of the output, but is simply ignored. The width may be specified using any of the following: a positive integer; an asterisk (
      <code class=""literal"">
       *
      </code>
      ) to use the next function argument as the width; or a string of the form
      <code class=""literal"">
       *
       <em class=""parameter"">
        <code>
         n
        </code>
       </em>
       $
      </code>
      to use the
      <em class=""parameter"">
       <code>
        n
       </code>
      </em>
      th function argument as the width.
     </p>
     <p>
      If the width comes from a function argument, that argument is consumed before the argument that is used for the format specifier's value. If the width argument is negative, the result is left aligned (as if the
      <code class=""literal"">
       -
      </code>
      flag had been specified) within a field of length
      <code class=""function"">
       abs
      </code>
      (
      <em class=""parameter"">
       <code>
        width
       </code>
      </em>
      ).
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <em class=""parameter"">
       <code>
        type
       </code>
      </em>
      (required)
     </span>
    </dt>
    <dd>
     <p>
      The type of format conversion to use to produce the format specifier's output. The following types are supported:
     </p>
     <div class=""itemizedlist"">
      <ul class=""itemizedlist"" style=""list-style-type: disc;"">
       <li class=""listitem"">
        <p>
         <code class=""literal"">
          s
         </code>
         formats the argument value as a simple string. A null value is treated as an empty string.
        </p>
       </li>
       <li class=""listitem"">
        <p>
         <code class=""literal"">
          I
         </code>
         treats the argument value as an SQL identifier, double-quoting it if necessary. It is an error for the value to be null (equivalent to
         <code class=""function"">
          quote_ident
         </code>
         ).
        </p>
       </li>
       <li class=""listitem"">
        <p>
         <code class=""literal"">
          L
         </code>
         quotes the argument value as an SQL literal. A null value is displayed as the string
         <code class=""literal"">
          NULL
         </code>
         , without quotes (equivalent to
         <code class=""function"">
          quote_nullable
         </code>
         ).
        </p>
       </li>
      </ul>
     </div>
    </dd>
   </dl>
  </div>
  <p>
   In addition to the format specifiers described above, the special sequence
   <code class=""literal"">
    %%
   </code>
   may be used to output a literal
   <code class=""literal"">
    %
   </code>
   character.
  </p>
  <p>
   Here are some examples of the basic format conversions:
  </p>
  <pre class=""screen"">
SELECT format('Hello %s', 'World');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">Hello World</code>

SELECT format('Testing %s, %s, %s, %%', 'one', 'two', 'three');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">Testing one, two, three, %</code>

SELECT format('INSERT INTO %I VALUES(%L)', 'Foo bar', E'O\'Reilly');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">INSERT INTO ""Foo bar"" VALUES('O''Reilly')</code>

SELECT format('INSERT INTO %I VALUES(%L)', 'locations', 'C:\Program Files');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">INSERT INTO locations VALUES('C:\Program Files')</code>
</pre>
  <p>
   Here are examples using
   <em class=""parameter"">
    <code>
     width
    </code>
   </em>
   fields and the
   <code class=""literal"">
    -
   </code>
   flag:
  </p>
  <pre class=""screen"">
SELECT format('|%10s|', 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|       foo|</code>

SELECT format('|%-10s|', 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|foo       |</code>

SELECT format('|%*s|', 10, 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|       foo|</code>

SELECT format('|%*s|', -10, 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|foo       |</code>

SELECT format('|%-*s|', 10, 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|foo       |</code>

SELECT format('|%-*s|', -10, 'foo');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|foo       |</code>
</pre>
  <p>
   These examples show use of
   <em class=""parameter"">
    <code>
     position
    </code>
   </em>
   fields:
  </p>
  <pre class=""screen"">
SELECT format('Testing %3$s, %2$s, %1$s', 'one', 'two', 'three');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">Testing three, two, one</code>

SELECT format('|%*2$s|', 'foo', 10, 'bar');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|       bar|</code>

SELECT format('|%1$*2$s|', 'foo', 10, 'bar');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">|       foo|</code>
</pre>
  <p>
   Unlike the standard C function
   <code class=""function"">
    sprintf
   </code>
   ,
   <span class=""productname"">
    PostgreSQL
   </span>
   's
   <code class=""function"">
    format
   </code>
   function allows format specifiers with and without
   <em class=""parameter"">
    <code>
     position
    </code>
   </em>
   fields to be mixed in the same format string. A format specifier without a
   <em class=""parameter"">
    <code>
     position
    </code>
   </em>
   field always uses the next argument after the last argument consumed. In addition, the
   <code class=""function"">
    format
   </code>
   function does not require all function arguments to be used in the format string. For example:
  </p>
  <pre class=""screen"">
SELECT format('Testing %3$s, %2$s, %s', 'one', 'two', 'three');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">Testing three, two, three</code>
</pre>
  <p>
   The
   <code class=""literal"">
    %I
   </code>
   and
   <code class=""literal"">
    %L
   </code>
   format specifiers are particularly useful for safely constructing dynamic SQL statements. See
   <a class=""xref"" href=""plpgsql-statements.html#PLPGSQL-QUOTE-LITERAL-EXAMPLE"" title=""Example 41.1. Quoting Values in Dynamic Queries"">
    Example 41.1
   </a>
   .
  </p>
 </div>
</div>
"
9. Functions and Operators,9.5. Binary String Functions and Operators,https://www.postgresql.org/docs/17/functions-binarystring.html,"<div class=""sect1"" id=""FUNCTIONS-BINARYSTRING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.5. Binary String Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-BINARYSTRING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.11.2"" name=""id-1.5.8.11.2"">
 </a>
 <p>
  This section describes functions and operators for examining and manipulating binary strings, that is values of type
  <code class=""type"">
   bytea
  </code>
  . Many of these are equivalent, in purpose and syntax, to the text-string functions described in the previous section.
 </p>
 <p>
  <acronym class=""acronym"">
   SQL
  </acronym>
  defines some string functions that use key words, rather than commas, to separate arguments. Details are in
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-SQL"" title=""Table 9.11. SQL Binary String Functions and Operators"">
   Table 9.11
  </a>
  .
  <span class=""productname"">
   PostgreSQL
  </span>
  also provides versions of these functions that use the regular function invocation syntax (see
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-OTHER"" title=""Table 9.12. Other Binary String Functions"">
   Table 9.12
  </a>
  ).
 </p>
 <div class=""table"" id=""FUNCTIONS-BINARYSTRING-SQL"">
  <p class=""title"">
   <strong>
    Table 9.11.
    <acronym class=""acronym"">
     SQL
    </acronym>
    Binary String Functions and Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""SQL Binary String Functions and Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function/Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.1.1.1.1"" name=""id-1.5.8.11.5.2.2.1.1.1.1"">
        </a>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         bytea
        </code>
        →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Concatenates the two binary strings.
       </p>
       <p>
        <code class=""literal"">
         '\x123456'::bytea || '\x789a00bcde'::bytea
        </code>
        →
        <code class=""returnvalue"">
         \x123456789a00bcde
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.2.1.1.1"" name=""id-1.5.8.11.5.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         bit_length
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bits in the binary string (8 times the
        <code class=""function"">
         octet_length
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         bit_length('\x123456'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         24
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.3.1.1.1"" name=""id-1.5.8.11.5.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         btrim
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Removes the longest string containing only bytes appearing in
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        from the start and end of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         btrim('\x1234567890'::bytea, '\x9012'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x345678
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.4.1.1.1"" name=""id-1.5.8.11.5.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         ltrim
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Removes the longest string containing only bytes appearing in
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        from the start of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         ltrim('\x1234567890'::bytea, '\x9012'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x34567890
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.5.1.1.1"" name=""id-1.5.8.11.5.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         octet_length
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bytes in the binary string.
       </p>
       <p>
        <code class=""literal"">
         octet_length('\x123456'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.6.1.1.1"" name=""id-1.5.8.11.5.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         overlay
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         PLACING
        </code>
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Replaces the substring of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        that starts at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th byte and extends for
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        bytes with
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        . If
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        is omitted, it defaults to the length of
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         overlay('\x1234567890'::bytea placing '\002\003'::bytea from 2 for 3)
        </code>
        →
        <code class=""returnvalue"">
         \x12020390
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.7.1.1.1"" name=""id-1.5.8.11.5.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         position
        </code>
        (
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         IN
        </code>
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns first starting index of the specified
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        within
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        , or zero if it's not present.
       </p>
       <p>
        <code class=""literal"">
         position('\x5678'::bytea in '\x1234567890'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.8.1.1.1"" name=""id-1.5.8.11.5.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         rtrim
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Removes the longest string containing only bytes appearing in
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        from the end of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         rtrim('\x1234567890'::bytea, '\x9012'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x12345678
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.9.1.1.1"" name=""id-1.5.8.11.5.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FROM
         </code>
         <em class=""parameter"">
          <code>
           start
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Extracts the substring of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        starting at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th byte if that is specified, and stopping after
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        bytes if that is specified. Provide at least one of
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         substring('\x1234567890'::bytea from 3 for 2)
        </code>
        →
        <code class=""returnvalue"">
         \x5678
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.5.2.2.10.1.1.1"" name=""id-1.5.8.11.5.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         trim
        </code>
        ( [
        <span class=""optional"">
         <code class=""literal"">
          LEADING
         </code>
         |
         <code class=""literal"">
          TRAILING
         </code>
         |
         <code class=""literal"">
          BOTH
         </code>
        </span>
        ]
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Removes the longest string containing only bytes appearing in
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        from the start, end, or both ends (
        <code class=""literal"">
         BOTH
        </code>
        is the default) of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         trim('\x9012'::bytea from '\x1234567890'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x345678
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         trim
        </code>
        ( [
        <span class=""optional"">
         <code class=""literal"">
          LEADING
         </code>
         |
         <code class=""literal"">
          TRAILING
         </code>
         |
         <code class=""literal"">
          BOTH
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          FROM
         </code>
        </span>
        ]
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          bytesremoved
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        This is a non-standard syntax for
        <code class=""function"">
         trim()
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         trim(both from '\x1234567890'::bytea, '\x9012'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x345678
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Additional binary string manipulation functions are available and are listed in
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-OTHER"" title=""Table 9.12. Other Binary String Functions"">
   Table 9.12
  </a>
  . Some of them are used internally to implement the
  <acronym class=""acronym"">
   SQL
  </acronym>
  -standard string functions listed in
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-SQL"" title=""Table 9.11. SQL Binary String Functions and Operators"">
   Table 9.11
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-BINARYSTRING-OTHER"">
  <p class=""title"">
   <strong>
    Table 9.12. Other Binary String Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Other Binary String Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.1.1.1.1"" name=""id-1.5.8.11.7.2.2.1.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.1.1.1.2"" name=""id-1.5.8.11.7.2.2.1.1.1.2"">
        </a>
        <code class=""function"">
         bit_count
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the number of bits set in the binary string (also known as
        <span class=""quote"">
         “
         <span class=""quote"">
          popcount
         </span>
         ”
        </span>
        ).
       </p>
       <p>
        <code class=""literal"">
         bit_count('\x1234567890'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         15
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.2.1.1.1"" name=""id-1.5.8.11.7.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         get_bit
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Extracts
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-ZEROBASED-NOTE"">
         n'th
        </a>
        bit from binary string.
       </p>
       <p>
        <code class=""literal"">
         get_bit('\x1234567890'::bytea, 30)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.3.1.1.1"" name=""id-1.5.8.11.7.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         get_byte
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Extracts
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-ZEROBASED-NOTE"">
         n'th
        </a>
        byte from binary string.
       </p>
       <p>
        <code class=""literal"">
         get_byte('\x1234567890'::bytea, 4)
        </code>
        →
        <code class=""returnvalue"">
         144
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.4.1.1.1"" name=""id-1.5.8.11.7.2.2.4.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.4.1.1.2"" name=""id-1.5.8.11.7.2.2.4.1.1.2"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.4.1.1.3"" name=""id-1.5.8.11.7.2.2.4.1.1.3"">
        </a>
        <code class=""function"">
         length
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of bytes in the binary string.
       </p>
       <p>
        <code class=""literal"">
         length('\x1234567890'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         length
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of characters in the binary string, assuming that it is text in the given
        <em class=""parameter"">
         <code>
          encoding
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         length('jose'::bytea, 'UTF8')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.6.1.1.1"" name=""id-1.5.8.11.7.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         md5
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Computes the MD5
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the binary string, with the result written in hexadecimal.
       </p>
       <p>
        <code class=""literal"">
         md5('Th\000omas'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         8ab2d3c9689aaf18​b4958c334c82d8b1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.7.1.1.1"" name=""id-1.5.8.11.7.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         set_bit
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        ,
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Sets
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-ZEROBASED-NOTE"">
         n'th
        </a>
        bit in binary string to
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         set_bit('\x1234567890'::bytea, 30, 0)
        </code>
        →
        <code class=""returnvalue"">
         \x1234563890
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.8.1.1.1"" name=""id-1.5.8.11.7.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         set_byte
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Sets
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-ZEROBASED-NOTE"">
         n'th
        </a>
        byte in binary string to
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         set_byte('\x1234567890'::bytea, 4, 64)
        </code>
        →
        <code class=""returnvalue"">
         \x1234567840
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.9.1.1.1"" name=""id-1.5.8.11.7.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         sha224
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Computes the SHA-224
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the binary string.
       </p>
       <p>
        <code class=""literal"">
         sha224('abc'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \x23097d223405d8228642a477bda2​55b32aadbce4bda0b3f7e36c9da7
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.10.1.1.1"" name=""id-1.5.8.11.7.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         sha256
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Computes the SHA-256
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the binary string.
       </p>
       <p>
        <code class=""literal"">
         sha256('abc'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \xba7816bf8f01cfea414140de5dae2223​b00361a396177a9cb410ff61f20015ad
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.11.1.1.1"" name=""id-1.5.8.11.7.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         sha384
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Computes the SHA-384
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the binary string.
       </p>
       <p>
        <code class=""literal"">
         sha384('abc'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \xcb00753f45a35e8bb5a03d699ac65007​272c32ab0eded1631a8b605a43ff5bed​8086072ba1e7cc2358baeca134c825a7
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.12.1.1.1"" name=""id-1.5.8.11.7.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         sha512
        </code>
        (
        <code class=""type"">
         bytea
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Computes the SHA-512
        <a class=""link"" href=""functions-binarystring.html#FUNCTIONS-HASH-NOTE"">
         hash
        </a>
        of the binary string.
       </p>
       <p>
        <code class=""literal"">
         sha512('abc'::bytea)
        </code>
        →
        <code class=""returnvalue"">
         \xddaf35a193617abacc417349ae204131​12e6fa4e89a97ea20a9eeee64b55d39a​2192992a274fc1a836ba3c23a3feebbd​454d4423643ce80e2a9ac94fa54ca49f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.7.2.2.13.1.1.1"" name=""id-1.5.8.11.7.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         substr
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Extracts the substring of
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        starting at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th byte, and extending for
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        bytes if that is specified. (Same as
        <code class=""literal"">
         substring(
         <em class=""parameter"">
          <code>
           bytes
          </code>
         </em>
         from
         <em class=""parameter"">
          <code>
           start
          </code>
         </em>
         for
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         )
        </code>
        .)
       </p>
       <p>
        <code class=""literal"">
         substr('\x1234567890'::bytea, 3, 2)
        </code>
        →
        <code class=""returnvalue"">
         \x5678
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p id=""FUNCTIONS-ZEROBASED-NOTE"">
  Functions
  <code class=""function"">
   get_byte
  </code>
  and
  <code class=""function"">
   set_byte
  </code>
  number the first byte of a binary string as byte 0. Functions
  <code class=""function"">
   get_bit
  </code>
  and
  <code class=""function"">
   set_bit
  </code>
  number bits from the right within each byte; for example bit 0 is the least significant bit of the first byte, and bit 15 is the most significant bit of the second byte.
 </p>
 <p id=""FUNCTIONS-HASH-NOTE"">
  For historical reasons, the function
  <code class=""function"">
   md5
  </code>
  returns a hex-encoded value of type
  <code class=""type"">
   text
  </code>
  whereas the SHA-2 functions return type
  <code class=""type"">
   bytea
  </code>
  . Use the functions
  <a class=""link"" href=""functions-binarystring.html#FUNCTION-ENCODE"">
   <code class=""function"">
    encode
   </code>
  </a>
  and
  <a class=""link"" href=""functions-binarystring.html#FUNCTION-DECODE"">
   <code class=""function"">
    decode
   </code>
  </a>
  to convert between the two. For example write
  <code class=""literal"">
   encode(sha256('abc'), 'hex')
  </code>
  to get a hex-encoded text representation, or
  <code class=""literal"">
   decode(md5('abc'), 'hex')
  </code>
  to get a
  <code class=""type"">
   bytea
  </code>
  value.
 </p>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.11.10.1"" name=""id-1.5.8.11.10.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.11.10.2"" name=""id-1.5.8.11.10.2"">
  </a>
  Functions for converting strings between different character sets (encodings), and for representing arbitrary binary data in textual form, are shown in
  <a class=""xref"" href=""functions-binarystring.html#FUNCTIONS-BINARYSTRING-CONVERSIONS"" title=""Table 9.13. Text/Binary String Conversion Functions"">
   Table 9.13
  </a>
  . For these functions, an argument or result of type
  <code class=""type"">
   text
  </code>
  is expressed in the database's default encoding, while arguments or results of type
  <code class=""type"">
   bytea
  </code>
  are in an encoding named by another argument.
 </p>
 <div class=""table"" id=""FUNCTIONS-BINARYSTRING-CONVERSIONS"">
  <p class=""title"">
   <strong>
    Table 9.13. Text/Binary String Conversion Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Text/Binary String Conversion Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.11.2.2.1.1.1.1"" name=""id-1.5.8.11.11.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         convert
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          src_encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ,
        <em class=""parameter"">
         <code>
          dest_encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Converts a binary string representing text in encoding
        <em class=""parameter"">
         <code>
          src_encoding
         </code>
        </em>
        to a binary string in encoding
        <em class=""parameter"">
         <code>
          dest_encoding
         </code>
        </em>
        (see
        <a class=""xref"" href=""multibyte.html#MULTIBYTE-CONVERSIONS-SUPPORTED"" title=""23.3.4. Available Character Set Conversions"">
         Section 23.3.4
        </a>
        for available conversions).
       </p>
       <p>
        <code class=""literal"">
         convert('text_in_utf8', 'UTF8', 'LATIN1')
        </code>
        →
        <code class=""returnvalue"">
         \x746578745f696e5f75746638
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.11.2.2.2.1.1.1"" name=""id-1.5.8.11.11.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         convert_from
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          src_encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts a binary string representing text in encoding
        <em class=""parameter"">
         <code>
          src_encoding
         </code>
        </em>
        to
        <code class=""type"">
         text
        </code>
        in the database encoding (see
        <a class=""xref"" href=""multibyte.html#MULTIBYTE-CONVERSIONS-SUPPORTED"" title=""23.3.4. Available Character Set Conversions"">
         Section 23.3.4
        </a>
        for available conversions).
       </p>
       <p>
        <code class=""literal"">
         convert_from('text_in_utf8', 'UTF8')
        </code>
        →
        <code class=""returnvalue"">
         text_in_utf8
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.11.11.2.2.3.1.1.1"" name=""id-1.5.8.11.11.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         convert_to
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          dest_encoding
         </code>
        </em>
        <code class=""type"">
         name
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Converts a
        <code class=""type"">
         text
        </code>
        string (in the database encoding) to a binary string encoded in encoding
        <em class=""parameter"">
         <code>
          dest_encoding
         </code>
        </em>
        (see
        <a class=""xref"" href=""multibyte.html#MULTIBYTE-CONVERSIONS-SUPPORTED"" title=""23.3.4. Available Character Set Conversions"">
         Section 23.3.4
        </a>
        for available conversions).
       </p>
       <p>
        <code class=""literal"">
         convert_to('some_text', 'UTF8')
        </code>
        →
        <code class=""returnvalue"">
         \x736f6d655f74657874
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-ENCODE"" name=""FUNCTION-ENCODE"">
        </a>
        <code class=""function"">
         encode
        </code>
        (
        <em class=""parameter"">
         <code>
          bytes
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          format
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Encodes binary data into a textual representation; supported
        <em class=""parameter"">
         <code>
          format
         </code>
        </em>
        values are:
        <a class=""link"" href=""functions-binarystring.html#ENCODE-FORMAT-BASE64"">
         <code class=""literal"">
          base64
         </code>
        </a>
        ,
        <a class=""link"" href=""functions-binarystring.html#ENCODE-FORMAT-ESCAPE"">
         <code class=""literal"">
          escape
         </code>
        </a>
        ,
        <a class=""link"" href=""functions-binarystring.html#ENCODE-FORMAT-HEX"">
         <code class=""literal"">
          hex
         </code>
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         encode('123\000\001', 'base64')
        </code>
        →
        <code class=""returnvalue"">
         MTIzAAE=
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-DECODE"" name=""FUNCTION-DECODE"">
        </a>
        <code class=""function"">
         decode
        </code>
        (
        <em class=""parameter"">
         <code>
          string
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          format
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Decodes binary data from a textual representation; supported
        <em class=""parameter"">
         <code>
          format
         </code>
        </em>
        values are the same as for
        <code class=""function"">
         encode
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         decode('MTIzAAE=', 'base64')
        </code>
        →
        <code class=""returnvalue"">
         \x3132330001
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The
  <code class=""function"">
   encode
  </code>
  and
  <code class=""function"">
   decode
  </code>
  functions support the following textual formats:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt id=""ENCODE-FORMAT-BASE64"">
    <span class=""term"">
     base64
     <a class=""indexterm"" id=""id-1.5.8.11.12.3.1.1.1"" name=""id-1.5.8.11.12.3.1.1.1"">
     </a>
    </span>
    <a class=""id_link"" href=""#ENCODE-FORMAT-BASE64"">
     #
    </a>
   </dt>
   <dd>
    <p>
     The
     <code class=""literal"">
      base64
     </code>
     format is that of
     <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc2045#section-6.8"" target=""_top"">
      RFC 2045 Section 6.8
     </a>
     . As per the
     <acronym class=""acronym"">
      RFC
     </acronym>
     , encoded lines are broken at 76 characters. However instead of the MIME CRLF end-of-line marker, only a newline is used for end-of-line. The
     <code class=""function"">
      decode
     </code>
     function ignores carriage-return, newline, space, and tab characters. Otherwise, an error is raised when
     <code class=""function"">
      decode
     </code>
     is supplied invalid base64 data — including when trailing padding is incorrect.
    </p>
   </dd>
   <dt id=""ENCODE-FORMAT-ESCAPE"">
    <span class=""term"">
     escape
     <a class=""indexterm"" id=""id-1.5.8.11.12.3.2.1.1"" name=""id-1.5.8.11.12.3.2.1.1"">
     </a>
    </span>
    <a class=""id_link"" href=""#ENCODE-FORMAT-ESCAPE"">
     #
    </a>
   </dt>
   <dd>
    <p>
     The
     <code class=""literal"">
      escape
     </code>
     format converts zero bytes and bytes with the high bit set into octal escape sequences (
     <code class=""literal"">
      \
     </code>
     <em class=""replaceable"">
      <code>
       nnn
      </code>
     </em>
     ), and it doubles backslashes. Other byte values are represented literally. The
     <code class=""function"">
      decode
     </code>
     function will raise an error if a backslash is not followed by either a second backslash or three octal digits; it accepts other byte values unchanged.
    </p>
   </dd>
   <dt id=""ENCODE-FORMAT-HEX"">
    <span class=""term"">
     hex
     <a class=""indexterm"" id=""id-1.5.8.11.12.3.3.1.1"" name=""id-1.5.8.11.12.3.3.1.1"">
     </a>
    </span>
    <a class=""id_link"" href=""#ENCODE-FORMAT-HEX"">
     #
    </a>
   </dt>
   <dd>
    <p>
     The
     <code class=""literal"">
      hex
     </code>
     format represents each 4 bits of data as one hexadecimal digit,
     <code class=""literal"">
      0
     </code>
     through
     <code class=""literal"">
      f
     </code>
     , writing the higher-order digit of each byte first. The
     <code class=""function"">
      encode
     </code>
     function outputs the
     <code class=""literal"">
      a
     </code>
     -
     <code class=""literal"">
      f
     </code>
     hex digits in lower case. Because the smallest unit of data is 8 bits, there are always an even number of characters returned by
     <code class=""function"">
      encode
     </code>
     . The
     <code class=""function"">
      decode
     </code>
     function accepts the
     <code class=""literal"">
      a
     </code>
     -
     <code class=""literal"">
      f
     </code>
     characters in either upper or lower case. An error is raised when
     <code class=""function"">
      decode
     </code>
     is given invalid hex data — including when given an odd number of characters.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  See also the aggregate function
  <code class=""function"">
   string_agg
  </code>
  in
  <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
   Section 9.21
  </a>
  and the large object functions in
  <a class=""xref"" href=""lo-funcs.html"" title=""33.4. Server-Side Functions"">
   Section 33.4
  </a>
  .
 </p>
</div>
"
9. Functions and Operators,9.6. Bit String Functions and Operators,https://www.postgresql.org/docs/17/functions-bitstring.html,"<div class=""sect1"" id=""FUNCTIONS-BITSTRING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.6. Bit String Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-BITSTRING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.12.2"" name=""id-1.5.8.12.2"">
 </a>
 <p>
  This section describes functions and operators for examining and manipulating bit strings, that is values of the types
  <code class=""type"">
   bit
  </code>
  and
  <code class=""type"">
   bit varying
  </code>
  . (While only type
  <code class=""type"">
   bit
  </code>
  is mentioned in these tables, values of type
  <code class=""type"">
   bit varying
  </code>
  can be used interchangeably.) Bit strings support the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  , as well as the operators shown in
  <a class=""xref"" href=""functions-bitstring.html#FUNCTIONS-BIT-STRING-OP-TABLE"" title=""Table 9.14. Bit String Operators"">
   Table 9.14
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-BIT-STRING-OP-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.14. Bit String Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Bit String Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         bit
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Concatenation
       </p>
       <p>
        <code class=""literal"">
         B'10001' || B'011'
        </code>
        →
        <code class=""returnvalue"">
         10001011
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         &amp;
        </code>
        <code class=""type"">
         bit
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise AND (inputs must be of equal length)
       </p>
       <p>
        <code class=""literal"">
         B'10001' &amp; B'01101'
        </code>
        →
        <code class=""returnvalue"">
         00001
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         |
        </code>
        <code class=""type"">
         bit
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise OR (inputs must be of equal length)
       </p>
       <p>
        <code class=""literal"">
         B'10001' | B'01101'
        </code>
        →
        <code class=""returnvalue"">
         11101
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         #
        </code>
        <code class=""type"">
         bit
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise exclusive OR (inputs must be of equal length)
       </p>
       <p>
        <code class=""literal"">
         B'10001' # B'01101'
        </code>
        →
        <code class=""returnvalue"">
         11100
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ~
        </code>
        <code class=""type"">
         bit
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise NOT
       </p>
       <p>
        <code class=""literal"">
         ~ B'10001'
        </code>
        →
        <code class=""returnvalue"">
         01110
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise shift left (string length is preserved)
       </p>
       <p>
        <code class=""literal"">
         B'10001' &lt;&lt; 3
        </code>
        →
        <code class=""returnvalue"">
         01000
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Bitwise shift right (string length is preserved)
       </p>
       <p>
        <code class=""literal"">
         B'10001' &gt;&gt; 2
        </code>
        →
        <code class=""returnvalue"">
         00100
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Some of the functions available for binary strings are also available for bit strings, as shown in
  <a class=""xref"" href=""functions-bitstring.html#FUNCTIONS-BIT-STRING-TABLE"" title=""Table 9.15. Bit String Functions"">
   Table 9.15
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-BIT-STRING-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.15. Bit String Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Bit String Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.1.1.1.1"" name=""id-1.5.8.12.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         bit_count
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the number of bits set in the bit string (also known as
        <span class=""quote"">
         “
         <span class=""quote"">
          popcount
         </span>
         ”
        </span>
        ).
       </p>
       <p>
        <code class=""literal"">
         bit_count(B'10111')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.2.1.1.1"" name=""id-1.5.8.12.6.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         bit_length
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bits in the bit string.
       </p>
       <p>
        <code class=""literal"">
         bit_length(B'10111')
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.3.1.1.1"" name=""id-1.5.8.12.6.2.2.3.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.3.1.1.2"" name=""id-1.5.8.12.6.2.2.3.1.1.2"">
        </a>
        <code class=""function"">
         length
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bits in the bit string.
       </p>
       <p>
        <code class=""literal"">
         length(B'10111')
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.4.1.1.1"" name=""id-1.5.8.12.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         octet_length
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns number of bytes in the bit string.
       </p>
       <p>
        <code class=""literal"">
         octet_length(B'1011111011')
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.5.1.1.1"" name=""id-1.5.8.12.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         overlay
        </code>
        (
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         PLACING
        </code>
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         FROM
        </code>
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Replaces the substring of
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        that starts at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th bit and extends for
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        bits with
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        . If
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        is omitted, it defaults to the length of
        <em class=""parameter"">
         <code>
          newsubstring
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         overlay(B'01010101010101010' placing B'11111' from 2 for 3)
        </code>
        →
        <code class=""returnvalue"">
         0111110101010101010
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.6.1.1.1"" name=""id-1.5.8.12.6.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         position
        </code>
        (
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        <code class=""literal"">
         IN
        </code>
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns first starting index of the specified
        <em class=""parameter"">
         <code>
          substring
         </code>
        </em>
        within
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        , or zero if it's not present.
       </p>
       <p>
        <code class=""literal"">
         position(B'010' in B'000001101011')
        </code>
        →
        <code class=""returnvalue"">
         8
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.7.1.1.1"" name=""id-1.5.8.12.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         substring
        </code>
        (
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        [
        <span class=""optional"">
         <code class=""literal"">
          FROM
         </code>
         <em class=""parameter"">
          <code>
           start
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          FOR
         </code>
         <em class=""parameter"">
          <code>
           count
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Extracts the substring of
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        starting at the
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        'th bit if that is specified, and stopping after
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        bits if that is specified. Provide at least one of
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          count
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         substring(B'110010111111' from 3 for 2)
        </code>
        →
        <code class=""returnvalue"">
         00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.8.1.1.1"" name=""id-1.5.8.12.6.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         get_bit
        </code>
        (
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Extracts
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        'th bit from bit string; the first (leftmost) bit is bit 0.
       </p>
       <p>
        <code class=""literal"">
         get_bit(B'101010101010101010', 6)
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.12.6.2.2.9.1.1.1"" name=""id-1.5.8.12.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         set_bit
        </code>
        (
        <em class=""parameter"">
         <code>
          bits
         </code>
        </em>
        <code class=""type"">
         bit
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Sets
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        'th bit in bit string to
        <em class=""parameter"">
         <code>
          newvalue
         </code>
        </em>
        ; the first (leftmost) bit is bit 0.
       </p>
       <p>
        <code class=""literal"">
         set_bit(B'101010101010101010', 6, 0)
        </code>
        →
        <code class=""returnvalue"">
         101010001010101010
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  In addition, it is possible to cast integral values to and from type
  <code class=""type"">
   bit
  </code>
  . Casting an integer to
  <code class=""type"">
   bit(n)
  </code>
  copies the rightmost
  <code class=""literal"">
   n
  </code>
  bits. Casting an integer to a bit string width wider than the integer itself will sign-extend on the left. Some examples:
 </p>
 <pre class=""programlisting"">
44::bit(10)                    <em class=""lineannotation""><span class=""lineannotation"">0000101100</span></em>
44::bit(3)                     <em class=""lineannotation""><span class=""lineannotation"">100</span></em>
cast(-44 as bit(12))           <em class=""lineannotation""><span class=""lineannotation"">111111010100</span></em>
'1110'::bit(4)::integer        <em class=""lineannotation""><span class=""lineannotation"">14</span></em>
</pre>
 <p>
  Note that casting to just
  <span class=""quote"">
   “
   <span class=""quote"">
    bit
   </span>
   ”
  </span>
  means casting to
  <code class=""literal"">
   bit(1)
  </code>
  , and so will deliver only the least significant bit of the integer.
 </p>
</div>
"
9. Functions and Operators,9.7. Pattern Matching,https://www.postgresql.org/docs/17/functions-matching.html,"<div class=""sect1"" id=""FUNCTIONS-MATCHING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.7. Pattern Matching
     <a class=""id_link"" href=""#FUNCTIONS-MATCHING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-matching.html#FUNCTIONS-LIKE"">
      9.7.1.
      <code class=""function"">
       LIKE
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP"">
      9.7.2.
      <code class=""function"">
       SIMILAR TO
      </code>
      Regular Expressions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"">
      9.7.3.
      <acronym class=""acronym"">
       POSIX
      </acronym>
      Regular Expressions
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.13.2"" name=""id-1.5.8.13.2"">
 </a>
 <p>
  There are three separate approaches to pattern matching provided by
  <span class=""productname"">
   PostgreSQL
  </span>
  : the traditional
  <acronym class=""acronym"">
   SQL
  </acronym>
  <code class=""function"">
   LIKE
  </code>
  operator, the more recent
  <code class=""function"">
   SIMILAR TO
  </code>
  operator (added in SQL:1999), and
  <acronym class=""acronym"">
   POSIX
  </acronym>
  -style regular expressions. Aside from the basic
  <span class=""quote"">
   “
   <span class=""quote"">
    does this string match this pattern?
   </span>
   ”
  </span>
  operators, functions are available to extract or replace matching substrings and to split a string at matching locations.
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   If you have pattern matching needs that go beyond this, consider writing a user-defined function in Perl or Tcl.
  </p>
 </div>
 <div class=""caution"">
  <h3 class=""title"">
   Caution
  </h3>
  <p>
   While most regular-expression searches can be executed very quickly, regular expressions can be contrived that take arbitrary amounts of time and memory to process. Be wary of accepting regular-expression search patterns from hostile sources. If you must do so, it is advisable to impose a statement timeout.
  </p>
  <p>
   Searches using
   <code class=""function"">
    SIMILAR TO
   </code>
   patterns have the same security hazards, since
   <code class=""function"">
    SIMILAR TO
   </code>
   provides many of the same capabilities as
   <acronym class=""acronym"">
    POSIX
   </acronym>
   -style regular expressions.
  </p>
  <p>
   <code class=""function"">
    LIKE
   </code>
   searches, being much simpler than the other two options, are safer to use with possibly-hostile pattern sources.
  </p>
 </div>
 <p>
  The pattern matching operators of all three kinds do not support nondeterministic collations. If required, apply a different collation to the expression to work around this limitation.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-LIKE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.7.1.
      <code class=""function"">
       LIKE
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-LIKE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.13.7.2"" name=""id-1.5.8.13.7.2"">
  </a>
  <pre class=""synopsis"">
<em class=""replaceable""><code>string</code></em> LIKE <em class=""replaceable""><code>pattern</code></em> [<span class=""optional"">ESCAPE <em class=""replaceable""><code>escape-character</code></em></span>]
<em class=""replaceable""><code>string</code></em> NOT LIKE <em class=""replaceable""><code>pattern</code></em> [<span class=""optional"">ESCAPE <em class=""replaceable""><code>escape-character</code></em></span>]
</pre>
  <p>
   The
   <code class=""function"">
    LIKE
   </code>
   expression returns true if the
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   matches the supplied
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   . (As expected, the
   <code class=""function"">
    NOT LIKE
   </code>
   expression returns false if
   <code class=""function"">
    LIKE
   </code>
   returns true, and vice versa. An equivalent expression is
   <code class=""literal"">
    NOT (
    <em class=""replaceable"">
     <code>
      string
     </code>
    </em>
    LIKE
    <em class=""replaceable"">
     <code>
      pattern
     </code>
    </em>
    )
   </code>
   .)
  </p>
  <p>
   If
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   does not contain percent signs or underscores, then the pattern only represents the string itself; in that case
   <code class=""function"">
    LIKE
   </code>
   acts like the equals operator. An underscore (
   <code class=""literal"">
    _
   </code>
   ) in
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   stands for (matches) any single character; a percent sign (
   <code class=""literal"">
    %
   </code>
   ) matches any sequence of zero or more characters.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
'abc' LIKE 'abc'    <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abc' LIKE 'a%'     <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abc' LIKE '_b_'    <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abc' LIKE 'c'      <em class=""lineannotation""><span class=""lineannotation"">false</span></em>
</pre>
  <p>
   <code class=""function"">
    LIKE
   </code>
   pattern matching always covers the entire string. Therefore, if it's desired to match a sequence anywhere within a string, the pattern must start and end with a percent sign.
  </p>
  <p>
   To match a literal underscore or percent sign without matching other characters, the respective character in
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   must be preceded by the escape character. The default escape character is the backslash but a different one can be selected by using the
   <code class=""literal"">
    ESCAPE
   </code>
   clause. To match the escape character itself, write two escape characters.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    If you have
    <a class=""xref"" href=""runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS"">
     standard_conforming_strings
    </a>
    turned off, any backslashes you write in literal string constants will need to be doubled. See
    <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
     Section 4.1.2.1
    </a>
    for more information.
   </p>
  </div>
  <p>
   It's also possible to select no escape character by writing
   <code class=""literal"">
    ESCAPE ''
   </code>
   . This effectively disables the escape mechanism, which makes it impossible to turn off the special meaning of underscore and percent signs in the pattern.
  </p>
  <p>
   According to the SQL standard, omitting
   <code class=""literal"">
    ESCAPE
   </code>
   means there is no escape character (rather than defaulting to a backslash), and a zero-length
   <code class=""literal"">
    ESCAPE
   </code>
   value is disallowed.
   <span class=""productname"">
    PostgreSQL
   </span>
   's behavior in this regard is therefore slightly nonstandard.
  </p>
  <p>
   The key word
   <code class=""token"">
    ILIKE
   </code>
   can be used instead of
   <code class=""token"">
    LIKE
   </code>
   to make the match case-insensitive according to the active locale. This is not in the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard but is a
   <span class=""productname"">
    PostgreSQL
   </span>
   extension.
  </p>
  <p>
   The operator
   <code class=""literal"">
    ~~
   </code>
   is equivalent to
   <code class=""function"">
    LIKE
   </code>
   , and
   <code class=""literal"">
    ~~*
   </code>
   corresponds to
   <code class=""function"">
    ILIKE
   </code>
   . There are also
   <code class=""literal"">
    !~~
   </code>
   and
   <code class=""literal"">
    !~~*
   </code>
   operators that represent
   <code class=""function"">
    NOT LIKE
   </code>
   and
   <code class=""function"">
    NOT ILIKE
   </code>
   , respectively. All of these operators are
   <span class=""productname"">
    PostgreSQL
   </span>
   -specific. You may see these operator names in
   <code class=""command"">
    EXPLAIN
   </code>
   output and similar places, since the parser actually translates
   <code class=""function"">
    LIKE
   </code>
   et al. to these operators.
  </p>
  <p>
   The phrases
   <code class=""function"">
    LIKE
   </code>
   ,
   <code class=""function"">
    ILIKE
   </code>
   ,
   <code class=""function"">
    NOT LIKE
   </code>
   , and
   <code class=""function"">
    NOT ILIKE
   </code>
   are generally treated as operators in
   <span class=""productname"">
    PostgreSQL
   </span>
   syntax; for example they can be used in
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   ANY (
   <em class=""replaceable"">
    <code>
     subquery
    </code>
   </em>
   ) constructs, although an
   <code class=""literal"">
    ESCAPE
   </code>
   clause cannot be included there. In some obscure cases it may be necessary to use the underlying operator names instead.
  </p>
  <p>
   Also see the starts-with operator
   <code class=""literal"">
    ^@
   </code>
   and the corresponding
   <code class=""function"">
    starts_with()
   </code>
   function, which are useful in cases where simply matching the beginning of a string is needed.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SIMILARTO-REGEXP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.7.2.
      <code class=""function"">
       SIMILAR TO
      </code>
      Regular Expressions
      <a class=""id_link"" href=""#FUNCTIONS-SIMILARTO-REGEXP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.13.8.2"" name=""id-1.5.8.13.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.8.3"" name=""id-1.5.8.13.8.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.8.4"" name=""id-1.5.8.13.8.4"">
  </a>
  <pre class=""synopsis"">
<em class=""replaceable""><code>string</code></em> SIMILAR TO <em class=""replaceable""><code>pattern</code></em> [<span class=""optional"">ESCAPE <em class=""replaceable""><code>escape-character</code></em></span>]
<em class=""replaceable""><code>string</code></em> NOT SIMILAR TO <em class=""replaceable""><code>pattern</code></em> [<span class=""optional"">ESCAPE <em class=""replaceable""><code>escape-character</code></em></span>]
</pre>
  <p>
   The
   <code class=""function"">
    SIMILAR TO
   </code>
   operator returns true or false depending on whether its pattern matches the given string. It is similar to
   <code class=""function"">
    LIKE
   </code>
   , except that it interprets the pattern using the SQL standard's definition of a regular expression. SQL regular expressions are a curious cross between
   <code class=""function"">
    LIKE
   </code>
   notation and common (POSIX) regular expression notation.
  </p>
  <p>
   Like
   <code class=""function"">
    LIKE
   </code>
   , the
   <code class=""function"">
    SIMILAR TO
   </code>
   operator succeeds only if its pattern matches the entire string; this is unlike common regular expression behavior where the pattern can match any part of the string. Also like
   <code class=""function"">
    LIKE
   </code>
   ,
   <code class=""function"">
    SIMILAR TO
   </code>
   uses
   <code class=""literal"">
    _
   </code>
   and
   <code class=""literal"">
    %
   </code>
   as wildcard characters denoting any single character and any string, respectively (these are comparable to
   <code class=""literal"">
    .
   </code>
   and
   <code class=""literal"">
    .*
   </code>
   in POSIX regular expressions).
  </p>
  <p>
   In addition to these facilities borrowed from
   <code class=""function"">
    LIKE
   </code>
   ,
   <code class=""function"">
    SIMILAR TO
   </code>
   supports these pattern-matching metacharacters borrowed from POSIX regular expressions:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       |
      </code>
      denotes alternation (either of two alternatives).
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       *
      </code>
      denotes repetition of the previous item zero or more times.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       +
      </code>
      denotes repetition of the previous item one or more times.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       ?
      </code>
      denotes repetition of the previous item zero or one time.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       {
      </code>
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      <code class=""literal"">
       }
      </code>
      denotes repetition of the previous item exactly
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      times.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       {
      </code>
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      <code class=""literal"">
       ,}
      </code>
      denotes repetition of the previous item
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      or more times.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      <code class=""literal"">
       {
      </code>
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      <code class=""literal"">
       ,
      </code>
      <em class=""replaceable"">
       <code>
        n
       </code>
      </em>
      <code class=""literal"">
       }
      </code>
      denotes repetition of the previous item at least
      <em class=""replaceable"">
       <code>
        m
       </code>
      </em>
      and not more than
      <em class=""replaceable"">
       <code>
        n
       </code>
      </em>
      times.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Parentheses
      <code class=""literal"">
       ()
      </code>
      can be used to group items into a single logical item.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      A bracket expression
      <code class=""literal"">
       [...]
      </code>
      specifies a character class, just as in POSIX regular expressions.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Notice that the period (
   <code class=""literal"">
    .
   </code>
   ) is not a metacharacter for
   <code class=""function"">
    SIMILAR TO
   </code>
   .
  </p>
  <p>
   As with
   <code class=""function"">
    LIKE
   </code>
   , a backslash disables the special meaning of any of these metacharacters. A different escape character can be specified with
   <code class=""literal"">
    ESCAPE
   </code>
   , or the escape capability can be disabled by writing
   <code class=""literal"">
    ESCAPE ''
   </code>
   .
  </p>
  <p>
   According to the SQL standard, omitting
   <code class=""literal"">
    ESCAPE
   </code>
   means there is no escape character (rather than defaulting to a backslash), and a zero-length
   <code class=""literal"">
    ESCAPE
   </code>
   value is disallowed.
   <span class=""productname"">
    PostgreSQL
   </span>
   's behavior in this regard is therefore slightly nonstandard.
  </p>
  <p>
   Another nonstandard extension is that following the escape character with a letter or digit provides access to the escape sequences defined for POSIX regular expressions; see
   <a class=""xref"" href=""functions-matching.html#POSIX-CHARACTER-ENTRY-ESCAPES-TABLE"" title=""Table 9.20. Regular Expression Character-Entry Escapes"">
    Table 9.20
   </a>
   ,
   <a class=""xref"" href=""functions-matching.html#POSIX-CLASS-SHORTHAND-ESCAPES-TABLE"" title=""Table 9.21. Regular Expression Class-Shorthand Escapes"">
    Table 9.21
   </a>
   , and
   <a class=""xref"" href=""functions-matching.html#POSIX-CONSTRAINT-ESCAPES-TABLE"" title=""Table 9.22. Regular Expression Constraint Escapes"">
    Table 9.22
   </a>
   below.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
'abc' SIMILAR TO 'abc'          <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abc' SIMILAR TO 'a'            <em class=""lineannotation""><span class=""lineannotation"">false</span></em>
'abc' SIMILAR TO '%(b|d)%'      <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abc' SIMILAR TO '(b|c)%'       <em class=""lineannotation""><span class=""lineannotation"">false</span></em>
'-abc-' SIMILAR TO '%\mabc\M%'  <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'xabcy' SIMILAR TO '%\mabc\M%'  <em class=""lineannotation""><span class=""lineannotation"">false</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    substring
   </code>
   function with three parameters provides extraction of a substring that matches an SQL regular expression pattern. The function can be written according to standard SQL syntax:
  </p>
  <pre class=""synopsis"">
substring(<em class=""replaceable""><code>string</code></em> similar <em class=""replaceable""><code>pattern</code></em> escape <em class=""replaceable""><code>escape-character</code></em>)
</pre>
  <p>
   or using the now obsolete SQL:1999 syntax:
  </p>
  <pre class=""synopsis"">
substring(<em class=""replaceable""><code>string</code></em> from <em class=""replaceable""><code>pattern</code></em> for <em class=""replaceable""><code>escape-character</code></em>)
</pre>
  <p>
   or as a plain three-argument function:
  </p>
  <pre class=""synopsis"">
substring(<em class=""replaceable""><code>string</code></em>, <em class=""replaceable""><code>pattern</code></em>, <em class=""replaceable""><code>escape-character</code></em>)
</pre>
  <p>
   As with
   <code class=""literal"">
    SIMILAR TO
   </code>
   , the specified pattern must match the entire data string, or else the function fails and returns null. To indicate the part of the pattern for which the matching data sub-string is of interest, the pattern should contain two occurrences of the escape character followed by a double quote (
   <code class=""literal"">
    ""
   </code>
   ). The text matching the portion of the pattern between these separators is returned when the match is successful.
  </p>
  <p>
   The escape-double-quote separators actually divide
   <code class=""function"">
    substring
   </code>
   's pattern into three independent regular expressions; for example, a vertical bar (
   <code class=""literal"">
    |
   </code>
   ) in any of the three sections affects only that section. Also, the first and third of these regular expressions are defined to match the smallest possible amount of text, not the largest, when there is any ambiguity about how much of the data string matches which pattern. (In POSIX parlance, the first and third regular expressions are forced to be non-greedy.)
  </p>
  <p>
   As an extension to the SQL standard,
   <span class=""productname"">
    PostgreSQL
   </span>
   allows there to be just one escape-double-quote separator, in which case the third regular expression is taken as empty; or no separators, in which case the first and third regular expressions are taken as empty.
  </p>
  <p>
   Some examples, with
   <code class=""literal"">
    #""
   </code>
   delimiting the return string:
  </p>
  <pre class=""programlisting"">
substring('foobar' similar '%#""o_b#""%' escape '#')   <em class=""lineannotation""><span class=""lineannotation"">oob</span></em>
substring('foobar' similar '#""o_b#""%' escape '#')    <em class=""lineannotation""><span class=""lineannotation"">NULL</span></em>
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-POSIX-REGEXP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.7.3.
      <acronym class=""acronym"">
       POSIX
      </acronym>
      Regular Expressions
      <a class=""id_link"" href=""#FUNCTIONS-POSIX-REGEXP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.13.9.2"" name=""id-1.5.8.13.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.3"" name=""id-1.5.8.13.9.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.4"" name=""id-1.5.8.13.9.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.5"" name=""id-1.5.8.13.9.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.6"" name=""id-1.5.8.13.9.6"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.7"" name=""id-1.5.8.13.9.7"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.8"" name=""id-1.5.8.13.9.8"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.9"" name=""id-1.5.8.13.9.9"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.10"" name=""id-1.5.8.13.9.10"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.11"" name=""id-1.5.8.13.9.11"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.13.9.12"" name=""id-1.5.8.13.9.12"">
  </a>
  <p>
   <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-TABLE"" title=""Table 9.16. Regular Expression Match Operators"">
    Table 9.16
   </a>
   lists the available operators for pattern matching using POSIX regular expressions.
  </p>
  <div class=""table"" id=""FUNCTIONS-POSIX-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.16. Regular Expression Match Operators
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Regular Expression Match Operators"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Operator
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          text
         </code>
         <code class=""literal"">
          ~
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         String matches regular expression, case sensitively
        </p>
        <p>
         <code class=""literal"">
          'thomas' ~ 't.*ma'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          text
         </code>
         <code class=""literal"">
          ~*
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         String matches regular expression, case-insensitively
        </p>
        <p>
         <code class=""literal"">
          'thomas' ~* 'T.*ma'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          text
         </code>
         <code class=""literal"">
          !~
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         String does not match regular expression, case sensitively
        </p>
        <p>
         <code class=""literal"">
          'thomas' !~ 't.*max'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          text
         </code>
         <code class=""literal"">
          !~*
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         String does not match regular expression, case-insensitively
        </p>
        <p>
         <code class=""literal"">
          'thomas' !~* 'T.*ma'
         </code>
         →
         <code class=""returnvalue"">
          f
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <acronym class=""acronym"">
    POSIX
   </acronym>
   regular expressions provide a more powerful means for pattern matching than the
   <code class=""function"">
    LIKE
   </code>
   and
   <code class=""function"">
    SIMILAR TO
   </code>
   operators. Many Unix tools such as
   <code class=""command"">
    egrep
   </code>
   ,
   <code class=""command"">
    sed
   </code>
   , or
   <code class=""command"">
    awk
   </code>
   use a pattern matching language that is similar to the one described here.
  </p>
  <p>
   A regular expression is a character sequence that is an abbreviated definition of a set of strings (a
   <em class=""firstterm"">
    regular set
   </em>
   ). A string is said to match a regular expression if it is a member of the regular set described by the regular expression. As with
   <code class=""function"">
    LIKE
   </code>
   , pattern characters match string characters exactly unless they are special characters in the regular expression language — but regular expressions use different special characters than
   <code class=""function"">
    LIKE
   </code>
   does. Unlike
   <code class=""function"">
    LIKE
   </code>
   patterns, a regular expression is allowed to match anywhere within a string, unless the regular expression is explicitly anchored to the beginning or end of the string.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
'abcd' ~ 'bc'     <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
'abcd' ~ 'a.c'    <em class=""lineannotation""><span class=""lineannotation"">true — dot matches any character</span></em>
'abcd' ~ 'a.*d'   <em class=""lineannotation""><span class=""lineannotation"">true — <code class=""literal"">*</code> repeats the preceding pattern item</span></em>
'abcd' ~ '(b|x)'  <em class=""lineannotation""><span class=""lineannotation"">true — <code class=""literal"">|</code> means OR, parentheses group</span></em>
'abcd' ~ '^a'     <em class=""lineannotation""><span class=""lineannotation"">true — <code class=""literal"">^</code> anchors to start of string</span></em>
'abcd' ~ '^(b|c)' <em class=""lineannotation""><span class=""lineannotation"">false — would match except for anchoring</span></em>
</pre>
  <p>
   The
   <acronym class=""acronym"">
    POSIX
   </acronym>
   pattern language is described in much greater detail below.
  </p>
  <p>
   The
   <code class=""function"">
    substring
   </code>
   function with two parameters,
   <code class=""function"">
    substring(
    <em class=""replaceable"">
     <code>
      string
     </code>
    </em>
    from
    <em class=""replaceable"">
     <code>
      pattern
     </code>
    </em>
    )
   </code>
   , provides extraction of a substring that matches a POSIX regular expression pattern. It returns null if there is no match, otherwise the first portion of the text that matched the pattern. But if the pattern contains any parentheses, the portion of the text that matched the first parenthesized subexpression (the one whose left parenthesis comes first) is returned. You can put parentheses around the whole expression if you want to use parentheses within it without triggering this exception. If you need parentheses in the pattern before the subexpression you want to extract, see the non-capturing parentheses described below.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
substring('foobar' from 'o.b')     <em class=""lineannotation""><span class=""lineannotation"">oob</span></em>
substring('foobar' from 'o(.)b')   <em class=""lineannotation""><span class=""lineannotation"">o</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    regexp_count
   </code>
   function counts the number of places where a POSIX regular expression pattern matches a string. It has the syntax
   <code class=""function"">
    regexp_count
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      start
     </code>
    </em>
    [
    <span class=""optional"">
     ,
     <em class=""replaceable"">
      <code>
       flags
      </code>
     </em>
    </span>
    ]
   </span>
   ]).
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   is searched for in
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   , normally from the beginning of the string, but if the
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   parameter is provided then beginning from that character index. The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. For example, including
   <code class=""literal"">
    i
   </code>
   in
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   specifies case-insensitive matching. Supported flags are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   .
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
regexp_count('ABCABCAXYaxy', 'A.')          <em class=""lineannotation""><span class=""lineannotation"">3</span></em>
regexp_count('ABCABCAXYaxy', 'A.', 1, 'i')  <em class=""lineannotation""><span class=""lineannotation"">4</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    regexp_instr
   </code>
   function returns the starting or ending position of the
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   'th match of a POSIX regular expression pattern to a string, or zero if there is no such match. It has the syntax
   <code class=""function"">
    regexp_instr
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      start
     </code>
    </em>
    [
    <span class=""optional"">
     ,
     <em class=""replaceable"">
      <code>
       N
      </code>
     </em>
     [
     <span class=""optional"">
      ,
      <em class=""replaceable"">
       <code>
        endoption
       </code>
      </em>
      [
      <span class=""optional"">
       ,
       <em class=""replaceable"">
        <code>
         flags
        </code>
       </em>
       [
       <span class=""optional"">
        ,
        <em class=""replaceable"">
         <code>
          subexpr
         </code>
        </em>
       </span>
       ]
      </span>
      ]
     </span>
     ]
    </span>
    ]
   </span>
   ]).
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   is searched for in
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   , normally from the beginning of the string, but if the
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   parameter is provided then beginning from that character index. If
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is specified then the
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   'th match of the pattern is located, otherwise the first match is located. If the
   <em class=""replaceable"">
    <code>
     endoption
    </code>
   </em>
   parameter is omitted or specified as zero, the function returns the position of the first character of the match. Otherwise,
   <em class=""replaceable"">
    <code>
     endoption
    </code>
   </em>
   must be one, and the function returns the position of the character following the match. The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Supported flags are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   . For a pattern containing parenthesized subexpressions,
   <em class=""replaceable"">
    <code>
     subexpr
    </code>
   </em>
   is an integer indicating which subexpression is of interest: the result identifies the position of the substring matching that subexpression. Subexpressions are numbered in the order of their leading parentheses. When
   <em class=""replaceable"">
    <code>
     subexpr
    </code>
   </em>
   is omitted or zero, the result identifies the position of the whole match regardless of parenthesized subexpressions.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
regexp_instr('number of your street, town zip, FR', '[^,]+', 1, 2)
                                   <em class=""lineannotation""><span class=""lineannotation"">23</span></em>
regexp_instr('ABCDEFGHI', '(c..)(...)', 1, 1, 0, 'i', 2)
                                   <em class=""lineannotation""><span class=""lineannotation"">6</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    regexp_like
   </code>
   function checks whether a match of a POSIX regular expression pattern occurs within a string, returning boolean true or false. It has the syntax
   <code class=""function"">
    regexp_like
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
   </span>
   ]). The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Supported flags are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   . This function has the same results as the
   <code class=""literal"">
    ~
   </code>
   operator if no flags are specified. If only the
   <code class=""literal"">
    i
   </code>
   flag is specified, it has the same results as the
   <code class=""literal"">
    ~*
   </code>
   operator.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
regexp_like('Hello World', 'world')       <em class=""lineannotation""><span class=""lineannotation"">false</span></em>
regexp_like('Hello World', 'world', 'i')  <em class=""lineannotation""><span class=""lineannotation"">true</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    regexp_match
   </code>
   function returns a text array of matching substring(s) within the first match of a POSIX regular expression pattern to a string. It has the syntax
   <code class=""function"">
    regexp_match
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
   </span>
   ]). If there is no match, the result is
   <code class=""literal"">
    NULL
   </code>
   . If a match is found, and the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   contains no parenthesized subexpressions, then the result is a single-element text array containing the substring matching the whole pattern. If a match is found, and the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   contains parenthesized subexpressions, then the result is a text array whose
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   'th element is the substring matching the
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   'th parenthesized subexpression of the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   (not counting
   <span class=""quote"">
    “
    <span class=""quote"">
     non-capturing
    </span>
    ”
   </span>
   parentheses; see below for details). The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Supported flags are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   .
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
SELECT regexp_match('foobarbequebaz', 'bar.*que');
 regexp_match
--------------
 {barbeque}
(1 row)

SELECT regexp_match('foobarbequebaz', '(bar)(beque)');
 regexp_match
--------------
 {bar,beque}
(1 row)
</pre>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    In the common case where you just want the whole matching substring or
    <code class=""literal"">
     NULL
    </code>
    for no match, the best solution is to use
    <code class=""function"">
     regexp_substr()
    </code>
    . However,
    <code class=""function"">
     regexp_substr()
    </code>
    only exists in
    <span class=""productname"">
     PostgreSQL
    </span>
    version 15 and up. When working in older versions, you can extract the first element of
    <code class=""function"">
     regexp_match()
    </code>
    's result, for example:
   </p>
   <pre class=""programlisting"">
SELECT (regexp_match('foobarbequebaz', 'bar.*que'))[1];
 regexp_match
--------------
 barbeque
(1 row)
</pre>
  </div>
  <p>
   The
   <code class=""function"">
    regexp_matches
   </code>
   function returns a set of text arrays of matching substring(s) within matches of a POSIX regular expression pattern to a string. It has the same syntax as
   <code class=""function"">
    regexp_match
   </code>
   . This function returns no rows if there is no match, one row if there is a match and the
   <code class=""literal"">
    g
   </code>
   flag is not given, or
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   rows if there are
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   matches and the
   <code class=""literal"">
    g
   </code>
   flag is given. Each returned row is a text array containing the whole matched substring or the substrings matching parenthesized subexpressions of the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   , just as described above for
   <code class=""function"">
    regexp_match
   </code>
   .
   <code class=""function"">
    regexp_matches
   </code>
   accepts all the flags shown in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   , plus the
   <code class=""literal"">
    g
   </code>
   flag which commands it to return all matches, not just the first one.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
SELECT regexp_matches('foo', 'not there');
 regexp_matches
----------------
(0 rows)

SELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');
 regexp_matches
----------------
 {bar,beque}
 {bazil,barf}
(2 rows)
</pre>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    In most cases
    <code class=""function"">
     regexp_matches()
    </code>
    should be used with the
    <code class=""literal"">
     g
    </code>
    flag, since if you only want the first match, it's easier and more efficient to use
    <code class=""function"">
     regexp_match()
    </code>
    . However,
    <code class=""function"">
     regexp_match()
    </code>
    only exists in
    <span class=""productname"">
     PostgreSQL
    </span>
    version 10 and up. When working in older versions, a common trick is to place a
    <code class=""function"">
     regexp_matches()
    </code>
    call in a sub-select, for example:
   </p>
   <pre class=""programlisting"">
SELECT col1, (SELECT regexp_matches(col2, '(bar)(beque)')) FROM tab;
</pre>
   <p>
    This produces a text array if there's a match, or
    <code class=""literal"">
     NULL
    </code>
    if not, the same as
    <code class=""function"">
     regexp_match()
    </code>
    would do. Without the sub-select, this query would produce no output at all for table rows without a match, which is typically not the desired behavior.
   </p>
  </div>
  <p>
   The
   <code class=""function"">
    regexp_replace
   </code>
   function provides substitution of new text for substrings that match POSIX regular expression patterns. It has the syntax
   <code class=""function"">
    regexp_replace
   </code>
   (
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     replacement
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      start
     </code>
    </em>
    [
    <span class=""optional"">
     ,
     <em class=""replaceable"">
      <code>
       N
      </code>
     </em>
    </span>
    ]
   </span>
   ] [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
   </span>
   ]). (Notice that
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   cannot be specified unless
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   is, but
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   can be given in any case.) The
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   string is returned unchanged if there is no match to the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   . If there is a match, the
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   string is returned with the
   <em class=""replaceable"">
    <code>
     replacement
    </code>
   </em>
   string substituted for the matching substring. The
   <em class=""replaceable"">
    <code>
     replacement
    </code>
   </em>
   string can contain
   <code class=""literal"">
    \
   </code>
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   , where
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   is 1 through 9, to indicate that the source substring matching the
   <em class=""replaceable"">
    <code>
     n
    </code>
   </em>
   'th parenthesized subexpression of the pattern should be inserted, and it can contain
   <code class=""literal"">
    \&amp;
   </code>
   to indicate that the substring matching the entire pattern should be inserted. Write
   <code class=""literal"">
    \\
   </code>
   if you need to put a literal backslash in the replacement text.
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   is searched for in
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   , normally from the beginning of the string, but if the
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   parameter is provided then beginning from that character index. By default, only the first match of the pattern is replaced. If
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is specified and is greater than zero, then the
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   'th match of the pattern is replaced. If the
   <code class=""literal"">
    g
   </code>
   flag is given, or if
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is specified and is zero, then all matches at or after the
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   position are replaced. (The
   <code class=""literal"">
    g
   </code>
   flag is ignored when
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is specified.) The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Supported flags (though not
   <code class=""literal"">
    g
   </code>
   ) are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   .
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
regexp_replace('foobarbaz', 'b..', 'X')
                                   <em class=""lineannotation""><span class=""lineannotation"">fooXbaz</span></em>
regexp_replace('foobarbaz', 'b..', 'X', 'g')
                                   <em class=""lineannotation""><span class=""lineannotation"">fooXX</span></em>
regexp_replace('foobarbaz', 'b(..)', 'X\1Y', 'g')
                                   <em class=""lineannotation""><span class=""lineannotation"">fooXarYXazY</span></em>
regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 0, 'i')
                                   <em class=""lineannotation""><span class=""lineannotation"">X PXstgrXSQL fXnctXXn</span></em>
regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 3, 'i')
                                   <em class=""lineannotation""><span class=""lineannotation"">A PostgrXSQL function</span></em>
</pre>
  <p>
   The
   <code class=""function"">
    regexp_split_to_table
   </code>
   function splits a string using a POSIX regular expression pattern as a delimiter. It has the syntax
   <code class=""function"">
    regexp_split_to_table
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
   </span>
   ]). If there is no match to the
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   , the function returns the
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   . If there is at least one match, for each match it returns the text from the end of the last match (or the beginning of the string) to the beginning of the match. When there are no more matches, it returns the text from the end of the last match to the end of the string. The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior.
   <code class=""function"">
    regexp_split_to_table
   </code>
   supports the flags described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   .
  </p>
  <p>
   The
   <code class=""function"">
    regexp_split_to_array
   </code>
   function behaves the same as
   <code class=""function"">
    regexp_split_to_table
   </code>
   , except that
   <code class=""function"">
    regexp_split_to_array
   </code>
   returns its result as an array of
   <code class=""type"">
    text
   </code>
   . It has the syntax
   <code class=""function"">
    regexp_split_to_array
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
   </span>
   ]). The parameters are the same as for
   <code class=""function"">
    regexp_split_to_table
   </code>
   .
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
SELECT foo FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '\s+') AS foo;
  foo
-------
 the
 quick
 brown
 fox
 jumps
 over
 the
 lazy
 dog
(9 rows)

SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '\s+');
              regexp_split_to_array
-----------------------------------------------
 {the,quick,brown,fox,jumps,over,the,lazy,dog}
(1 row)

SELECT foo FROM regexp_split_to_table('the quick brown fox', '\s*') AS foo;
 foo
-----
 t
 h
 e
 q
 u
 i
 c
 k
 b
 r
 o
 w
 n
 f
 o
 x
(16 rows)
</pre>
  <p>
   As the last example demonstrates, the regexp split functions ignore zero-length matches that occur at the start or end of the string or immediately after a previous match. This is contrary to the strict definition of regexp matching that is implemented by the other regexp functions, but is usually the most convenient behavior in practice. Other software systems such as Perl use similar definitions.
  </p>
  <p>
   The
   <code class=""function"">
    regexp_substr
   </code>
   function returns the substring that matches a POSIX regular expression pattern, or
   <code class=""literal"">
    NULL
   </code>
   if there is no match. It has the syntax
   <code class=""function"">
    regexp_substr
   </code>
   (
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   ,
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   [
   <span class=""optional"">
    ,
    <em class=""replaceable"">
     <code>
      start
     </code>
    </em>
    [
    <span class=""optional"">
     ,
     <em class=""replaceable"">
      <code>
       N
      </code>
     </em>
     [
     <span class=""optional"">
      ,
      <em class=""replaceable"">
       <code>
        flags
       </code>
      </em>
      [
      <span class=""optional"">
       ,
       <em class=""replaceable"">
        <code>
         subexpr
        </code>
       </em>
      </span>
      ]
     </span>
     ]
    </span>
    ]
   </span>
   ]).
   <em class=""replaceable"">
    <code>
     pattern
    </code>
   </em>
   is searched for in
   <em class=""replaceable"">
    <code>
     string
    </code>
   </em>
   , normally from the beginning of the string, but if the
   <em class=""replaceable"">
    <code>
     start
    </code>
   </em>
   parameter is provided then beginning from that character index. If
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is specified then the
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   'th match of the pattern is returned, otherwise the first match is returned. The
   <em class=""replaceable"">
    <code>
     flags
    </code>
   </em>
   parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Supported flags are described in
   <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
    Table 9.24
   </a>
   . For a pattern containing parenthesized subexpressions,
   <em class=""replaceable"">
    <code>
     subexpr
    </code>
   </em>
   is an integer indicating which subexpression is of interest: the result is the substring matching that subexpression. Subexpressions are numbered in the order of their leading parentheses. When
   <em class=""replaceable"">
    <code>
     subexpr
    </code>
   </em>
   is omitted or zero, the result is the whole match regardless of parenthesized subexpressions.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""programlisting"">
regexp_substr('number of your street, town zip, FR', '[^,]+', 1, 2)
                                   <em class=""lineannotation""><span class=""lineannotation""> town zip</span></em>
regexp_substr('ABCDEFGHI', '(c..)(...)', 1, 1, 'i', 2)
                                   <em class=""lineannotation""><span class=""lineannotation"">FGH</span></em>
</pre>
  <div class=""sect3"" id=""POSIX-SYNTAX-DETAILS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.1. Regular Expression Details
       <a class=""id_link"" href=""#POSIX-SYNTAX-DETAILS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    's regular expressions are implemented using a software package written by Henry Spencer. Much of the description of regular expressions below is copied verbatim from his manual.
   </p>
   <p>
    Regular expressions (
    <acronym class=""acronym"">
     RE
    </acronym>
    s), as defined in
    <acronym class=""acronym"">
     POSIX
    </acronym>
    1003.2, come in two forms:
    <em class=""firstterm"">
     extended
    </em>
    <acronym class=""acronym"">
     RE
    </acronym>
    s or
    <acronym class=""acronym"">
     ERE
    </acronym>
    s (roughly those of
    <code class=""command"">
     egrep
    </code>
    ), and
    <em class=""firstterm"">
     basic
    </em>
    <acronym class=""acronym"">
     RE
    </acronym>
    s or
    <acronym class=""acronym"">
     BRE
    </acronym>
    s (roughly those of
    <code class=""command"">
     ed
    </code>
    ).
    <span class=""productname"">
     PostgreSQL
    </span>
    supports both forms, and also implements some extensions that are not in the POSIX standard, but have become widely used due to their availability in programming languages such as Perl and Tcl.
    <acronym class=""acronym"">
     RE
    </acronym>
    s using these non-POSIX extensions are called
    <em class=""firstterm"">
     advanced
    </em>
    <acronym class=""acronym"">
     RE
    </acronym>
    s or
    <acronym class=""acronym"">
     ARE
    </acronym>
    s in this documentation. AREs are almost an exact superset of EREs, but BREs have several notational incompatibilities (as well as being much more limited). We first describe the ARE and ERE forms, noting features that apply only to AREs, and then describe how BREs differ.
   </p>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     <span class=""productname"">
      PostgreSQL
     </span>
     always initially presumes that a regular expression follows the ARE rules. However, the more limited ERE or BRE rules can be chosen by prepending an
     <em class=""firstterm"">
      embedded option
     </em>
     to the RE pattern, as described in
     <a class=""xref"" href=""functions-matching.html#POSIX-METASYNTAX"" title=""9.7.3.4. Regular Expression Metasyntax"">
      Section 9.7.3.4
     </a>
     . This can be useful for compatibility with applications that expect exactly the
     <acronym class=""acronym"">
      POSIX
     </acronym>
     1003.2 rules.
    </p>
   </div>
   <p>
    A regular expression is defined as one or more
    <em class=""firstterm"">
     branches
    </em>
    , separated by
    <code class=""literal"">
     |
    </code>
    . It matches anything that matches one of the branches.
   </p>
   <p>
    A branch is zero or more
    <em class=""firstterm"">
     quantified atoms
    </em>
    or
    <em class=""firstterm"">
     constraints
    </em>
    , concatenated. It matches a match for the first, followed by a match for the second, etc.; an empty branch matches the empty string.
   </p>
   <p>
    A quantified atom is an
    <em class=""firstterm"">
     atom
    </em>
    possibly followed by a single
    <em class=""firstterm"">
     quantifier
    </em>
    . Without a quantifier, it matches a match for the atom. With a quantifier, it can match some number of matches of the atom. An
    <em class=""firstterm"">
     atom
    </em>
    can be any of the possibilities shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-ATOMS-TABLE"" title=""Table 9.17. Regular Expression Atoms"">
     Table 9.17
    </a>
    . The possible quantifiers and their meanings are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-QUANTIFIERS-TABLE"" title=""Table 9.18. Regular Expression Quantifiers"">
     Table 9.18
    </a>
    .
   </p>
   <p>
    A
    <em class=""firstterm"">
     constraint
    </em>
    matches an empty string, but matches only when specific conditions are met. A constraint can be used where an atom could be used, except it cannot be followed by a quantifier. The simple constraints are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-CONSTRAINTS-TABLE"" title=""Table 9.19. Regular Expression Constraints"">
     Table 9.19
    </a>
    ; some more constraints are described later.
   </p>
   <div class=""table"" id=""POSIX-ATOMS-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.17. Regular Expression Atoms
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Atoms"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Atom
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          (
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         is any regular expression) matches a match for
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         , with the match noted for possible reporting
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          (?:
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         as above, but the match is not noted for reporting (a
         <span class=""quote"">
          “
          <span class=""quote"">
           non-capturing
          </span>
          ”
         </span>
         set of parentheses) (AREs only)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          .
         </code>
        </td>
        <td>
         matches any single character
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          [
         </code>
         <em class=""replaceable"">
          <code>
           chars
          </code>
         </em>
         <code class=""literal"">
          ]
         </code>
        </td>
        <td>
         a
         <em class=""firstterm"">
          bracket expression
         </em>
         , matching any one of the
         <em class=""replaceable"">
          <code>
           chars
          </code>
         </em>
         (see
         <a class=""xref"" href=""functions-matching.html#POSIX-BRACKET-EXPRESSIONS"" title=""9.7.3.2. Bracket Expressions"">
          Section 9.7.3.2
         </a>
         for more detail)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           k
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           k
          </code>
         </em>
         is a non-alphanumeric character) matches that character taken as an ordinary character, e.g.,
         <code class=""literal"">
          \\
         </code>
         matches a backslash character
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           c
          </code>
         </em>
        </td>
        <td>
         where
         <em class=""replaceable"">
          <code>
           c
          </code>
         </em>
         is alphanumeric (possibly followed by other characters) is an
         <em class=""firstterm"">
          escape
         </em>
         , see
         <a class=""xref"" href=""functions-matching.html#POSIX-ESCAPE-SEQUENCES"" title=""9.7.3.3. Regular Expression Escapes"">
          Section 9.7.3.3
         </a>
         (AREs only; in EREs and BREs, this matches
         <em class=""replaceable"">
          <code>
           c
          </code>
         </em>
         )
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
        </td>
        <td>
         when followed by a character other than a digit, matches the left-brace character
         <code class=""literal"">
          {
         </code>
         ; when followed by a digit, it is the beginning of a
         <em class=""replaceable"">
          <code>
           bound
          </code>
         </em>
         (see below)
        </td>
       </tr>
       <tr>
        <td>
         <em class=""replaceable"">
          <code>
           x
          </code>
         </em>
        </td>
        <td>
         where
         <em class=""replaceable"">
          <code>
           x
          </code>
         </em>
         is a single character with no other significance, matches that character
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    An RE cannot end with a backslash (
    <code class=""literal"">
     \
    </code>
    ).
   </p>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     If you have
     <a class=""xref"" href=""runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS"">
      standard_conforming_strings
     </a>
     turned off, any backslashes you write in literal string constants will need to be doubled. See
     <a class=""xref"" href=""sql-syntax-lexical.html#SQL-SYNTAX-STRINGS"" title=""4.1.2.1. String Constants"">
      Section 4.1.2.1
     </a>
     for more information.
    </p>
   </div>
   <div class=""table"" id=""POSIX-QUANTIFIERS-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.18. Regular Expression Quantifiers
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Quantifiers"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Quantifier
        </th>
        <th>
         Matches
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          *
         </code>
        </td>
        <td>
         a sequence of 0 or more matches of the atom
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          +
         </code>
        </td>
        <td>
         a sequence of 1 or more matches of the atom
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          ?
         </code>
        </td>
        <td>
         a sequence of 0 or 1 matches of the atom
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          }
         </code>
        </td>
        <td>
         a sequence of exactly
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         matches of the atom
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,}
         </code>
        </td>
        <td>
         a sequence of
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         or more matches of the atom
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,
         </code>
         <em class=""replaceable"">
          <code>
           n
          </code>
         </em>
         <code class=""literal"">
          }
         </code>
        </td>
        <td>
         a sequence of
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         through
         <em class=""replaceable"">
          <code>
           n
          </code>
         </em>
         (inclusive) matches of the atom;
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         cannot exceed
         <em class=""replaceable"">
          <code>
           n
          </code>
         </em>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          *?
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          *
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          +?
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          +
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          ??
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          ?
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          }?
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          }
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,}?
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,}
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,
         </code>
         <em class=""replaceable"">
          <code>
           n
          </code>
         </em>
         <code class=""literal"">
          }?
         </code>
        </td>
        <td>
         non-greedy version of
         <code class=""literal"">
          {
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         <code class=""literal"">
          ,
         </code>
         <em class=""replaceable"">
          <code>
           n
          </code>
         </em>
         <code class=""literal"">
          }
         </code>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    The forms using
    <code class=""literal"">
     {
    </code>
    <em class=""replaceable"">
     <code>
      ...
     </code>
    </em>
    <code class=""literal"">
     }
    </code>
    are known as
    <em class=""firstterm"">
     bounds
    </em>
    . The numbers
    <em class=""replaceable"">
     <code>
      m
     </code>
    </em>
    and
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    within a bound are unsigned decimal integers with permissible values from 0 to 255 inclusive.
   </p>
   <p>
    <em class=""firstterm"">
     Non-greedy
    </em>
    quantifiers (available in AREs only) match the same possibilities as their corresponding normal (
    <em class=""firstterm"">
     greedy
    </em>
    ) counterparts, but prefer the smallest number rather than the largest number of matches. See
    <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
     Section 9.7.3.5
    </a>
    for more detail.
   </p>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     A quantifier cannot immediately follow another quantifier, e.g.,
     <code class=""literal"">
      **
     </code>
     is invalid. A quantifier cannot begin an expression or subexpression or follow
     <code class=""literal"">
      ^
     </code>
     or
     <code class=""literal"">
      |
     </code>
     .
    </p>
   </div>
   <div class=""table"" id=""POSIX-CONSTRAINTS-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.19. Regular Expression Constraints
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Constraints"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Constraint
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          ^
         </code>
        </td>
        <td>
         matches at the beginning of the string
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          $
         </code>
        </td>
        <td>
         matches at the end of the string
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          (?=
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         <em class=""firstterm"">
          positive lookahead
         </em>
         matches at any point where a substring matching
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         begins (AREs only)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          (?!
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         <em class=""firstterm"">
          negative lookahead
         </em>
         matches at any point where no substring matching
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         begins (AREs only)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          (?&lt;=
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         <em class=""firstterm"">
          positive lookbehind
         </em>
         matches at any point where a substring matching
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         ends (AREs only)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          (?&lt;!
         </code>
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         <code class=""literal"">
          )
         </code>
        </td>
        <td>
         <em class=""firstterm"">
          negative lookbehind
         </em>
         matches at any point where no substring matching
         <em class=""replaceable"">
          <code>
           re
          </code>
         </em>
         ends (AREs only)
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Lookahead and lookbehind constraints cannot contain
    <em class=""firstterm"">
     back references
    </em>
    (see
    <a class=""xref"" href=""functions-matching.html#POSIX-ESCAPE-SEQUENCES"" title=""9.7.3.3. Regular Expression Escapes"">
     Section 9.7.3.3
    </a>
    ), and all parentheses within them are considered non-capturing.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-BRACKET-EXPRESSIONS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.2. Bracket Expressions
       <a class=""id_link"" href=""#POSIX-BRACKET-EXPRESSIONS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    A
    <em class=""firstterm"">
     bracket expression
    </em>
    is a list of characters enclosed in
    <code class=""literal"">
     []
    </code>
    . It normally matches any single character from the list (but see below). If the list begins with
    <code class=""literal"">
     ^
    </code>
    , it matches any single character
    <span class=""emphasis"">
     <em>
      not
     </em>
    </span>
    from the rest of the list. If two characters in the list are separated by
    <code class=""literal"">
     -
    </code>
    , this is shorthand for the full range of characters between those two (inclusive) in the collating sequence, e.g.,
    <code class=""literal"">
     [0-9]
    </code>
    in
    <acronym class=""acronym"">
     ASCII
    </acronym>
    matches any decimal digit. It is illegal for two ranges to share an endpoint, e.g.,
    <code class=""literal"">
     a-c-e
    </code>
    . Ranges are very collating-sequence-dependent, so portable programs should avoid relying on them.
   </p>
   <p>
    To include a literal
    <code class=""literal"">
     ]
    </code>
    in the list, make it the first character (after
    <code class=""literal"">
     ^
    </code>
    , if that is used). To include a literal
    <code class=""literal"">
     -
    </code>
    , make it the first or last character, or the second endpoint of a range. To use a literal
    <code class=""literal"">
     -
    </code>
    as the first endpoint of a range, enclose it in
    <code class=""literal"">
     [.
    </code>
    and
    <code class=""literal"">
     .]
    </code>
    to make it a collating element (see below). With the exception of these characters, some combinations using
    <code class=""literal"">
     [
    </code>
    (see next paragraphs), and escapes (AREs only), all other special characters lose their special significance within a bracket expression. In particular,
    <code class=""literal"">
     \
    </code>
    is not special when following ERE or BRE rules, though it is special (as introducing an escape) in AREs.
   </p>
   <p>
    Within a bracket expression, a collating element (a character, a multiple-character sequence that collates as if it were a single character, or a collating-sequence name for either) enclosed in
    <code class=""literal"">
     [.
    </code>
    and
    <code class=""literal"">
     .]
    </code>
    stands for the sequence of characters of that collating element. The sequence is treated as a single element of the bracket expression's list. This allows a bracket expression containing a multiple-character collating element to match more than one character, e.g., if the collating sequence includes a
    <code class=""literal"">
     ch
    </code>
    collating element, then the RE
    <code class=""literal"">
     [[.ch.]]*c
    </code>
    matches the first five characters of
    <code class=""literal"">
     chchcc
    </code>
    .
   </p>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     <span class=""productname"">
      PostgreSQL
     </span>
     currently does not support multi-character collating elements. This information describes possible future behavior.
    </p>
   </div>
   <p>
    Within a bracket expression, a collating element enclosed in
    <code class=""literal"">
     [=
    </code>
    and
    <code class=""literal"">
     =]
    </code>
    is an
    <em class=""firstterm"">
     equivalence class
    </em>
    , standing for the sequences of characters of all collating elements equivalent to that one, including itself. (If there are no other equivalent collating elements, the treatment is as if the enclosing delimiters were
    <code class=""literal"">
     [.
    </code>
    and
    <code class=""literal"">
     .]
    </code>
    .) For example, if
    <code class=""literal"">
     o
    </code>
    and
    <code class=""literal"">
     ^
    </code>
    are the members of an equivalence class, then
    <code class=""literal"">
     [[=o=]]
    </code>
    ,
    <code class=""literal"">
     [[=^=]]
    </code>
    , and
    <code class=""literal"">
     [o^]
    </code>
    are all synonymous. An equivalence class cannot be an endpoint of a range.
   </p>
   <p>
    Within a bracket expression, the name of a character class enclosed in
    <code class=""literal"">
     [:
    </code>
    and
    <code class=""literal"">
     :]
    </code>
    stands for the list of all characters belonging to that class. A character class cannot be used as an endpoint of a range. The
    <acronym class=""acronym"">
     POSIX
    </acronym>
    standard defines these character class names:
    <code class=""literal"">
     alnum
    </code>
    (letters and numeric digits),
    <code class=""literal"">
     alpha
    </code>
    (letters),
    <code class=""literal"">
     blank
    </code>
    (space and tab),
    <code class=""literal"">
     cntrl
    </code>
    (control characters),
    <code class=""literal"">
     digit
    </code>
    (numeric digits),
    <code class=""literal"">
     graph
    </code>
    (printable characters except space),
    <code class=""literal"">
     lower
    </code>
    (lower-case letters),
    <code class=""literal"">
     print
    </code>
    (printable characters including space),
    <code class=""literal"">
     punct
    </code>
    (punctuation),
    <code class=""literal"">
     space
    </code>
    (any white space),
    <code class=""literal"">
     upper
    </code>
    (upper-case letters), and
    <code class=""literal"">
     xdigit
    </code>
    (hexadecimal digits). The behavior of these standard character classes is generally consistent across platforms for characters in the 7-bit ASCII set. Whether a given non-ASCII character is considered to belong to one of these classes depends on the
    <em class=""firstterm"">
     collation
    </em>
    that is used for the regular-expression function or operator (see
    <a class=""xref"" href=""collation.html"" title=""23.2. Collation Support"">
     Section 23.2
    </a>
    ), or by default on the database's
    <code class=""envar"">
     LC_CTYPE
    </code>
    locale setting (see
    <a class=""xref"" href=""locale.html"" title=""23.1. Locale Support"">
     Section 23.1
    </a>
    ). The classification of non-ASCII characters can vary across platforms even in similarly-named locales. (But the
    <code class=""literal"">
     C
    </code>
    locale never considers any non-ASCII characters to belong to any of these classes.) In addition to these standard character classes,
    <span class=""productname"">
     PostgreSQL
    </span>
    defines the
    <code class=""literal"">
     word
    </code>
    character class, which is the same as
    <code class=""literal"">
     alnum
    </code>
    plus the underscore (
    <code class=""literal"">
     _
    </code>
    ) character, and the
    <code class=""literal"">
     ascii
    </code>
    character class, which contains exactly the 7-bit ASCII set.
   </p>
   <p>
    There are two special cases of bracket expressions: the bracket expressions
    <code class=""literal"">
     [[:&lt;:]]
    </code>
    and
    <code class=""literal"">
     [[:&gt;:]]
    </code>
    are constraints, matching empty strings at the beginning and end of a word respectively. A word is defined as a sequence of word characters that is neither preceded nor followed by word characters. A word character is any character belonging to the
    <code class=""literal"">
     word
    </code>
    character class, that is, any letter, digit, or underscore. This is an extension, compatible with but not specified by
    <acronym class=""acronym"">
     POSIX
    </acronym>
    1003.2, and should be used with caution in software intended to be portable to other systems. The constraint escapes described below are usually preferable; they are no more standard, but are easier to type.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-ESCAPE-SEQUENCES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.3. Regular Expression Escapes
       <a class=""id_link"" href=""#POSIX-ESCAPE-SEQUENCES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    <em class=""firstterm"">
     Escapes
    </em>
    are special sequences beginning with
    <code class=""literal"">
     \
    </code>
    followed by an alphanumeric character. Escapes come in several varieties: character entry, class shorthands, constraint escapes, and back references. A
    <code class=""literal"">
     \
    </code>
    followed by an alphanumeric character but not constituting a valid escape is illegal in AREs. In EREs, there are no escapes: outside a bracket expression, a
    <code class=""literal"">
     \
    </code>
    followed by an alphanumeric character merely stands for that character as an ordinary character, and inside a bracket expression,
    <code class=""literal"">
     \
    </code>
    is an ordinary character. (The latter is the one actual incompatibility between EREs and AREs.)
   </p>
   <p>
    <em class=""firstterm"">
     Character-entry escapes
    </em>
    exist to make it easier to specify non-printing and other inconvenient characters in REs. They are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-CHARACTER-ENTRY-ESCAPES-TABLE"" title=""Table 9.20. Regular Expression Character-Entry Escapes"">
     Table 9.20
    </a>
    .
   </p>
   <p>
    <em class=""firstterm"">
     Class-shorthand escapes
    </em>
    provide shorthands for certain commonly-used character classes. They are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-CLASS-SHORTHAND-ESCAPES-TABLE"" title=""Table 9.21. Regular Expression Class-Shorthand Escapes"">
     Table 9.21
    </a>
    .
   </p>
   <p>
    A
    <em class=""firstterm"">
     constraint escape
    </em>
    is a constraint, matching the empty string if specific conditions are met, written as an escape. They are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-CONSTRAINT-ESCAPES-TABLE"" title=""Table 9.22. Regular Expression Constraint Escapes"">
     Table 9.22
    </a>
    .
   </p>
   <p>
    A
    <em class=""firstterm"">
     back reference
    </em>
    (
    <code class=""literal"">
     \
    </code>
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    ) matches the same string matched by the previous parenthesized subexpression specified by the number
    <em class=""replaceable"">
     <code>
      n
     </code>
    </em>
    (see
    <a class=""xref"" href=""functions-matching.html#POSIX-CONSTRAINT-BACKREF-TABLE"" title=""Table 9.23. Regular Expression Back References"">
     Table 9.23
    </a>
    ). For example,
    <code class=""literal"">
     ([bc])\1
    </code>
    matches
    <code class=""literal"">
     bb
    </code>
    or
    <code class=""literal"">
     cc
    </code>
    but not
    <code class=""literal"">
     bc
    </code>
    or
    <code class=""literal"">
     cb
    </code>
    . The subexpression must entirely precede the back reference in the RE. Subexpressions are numbered in the order of their leading parentheses. Non-capturing parentheses do not define subexpressions. The back reference considers only the string characters matched by the referenced subexpression, not any constraints contained in it. For example,
    <code class=""literal"">
     (^\d)\1
    </code>
    will match
    <code class=""literal"">
     22
    </code>
    .
   </p>
   <div class=""table"" id=""POSIX-CHARACTER-ENTRY-ESCAPES-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.20. Regular Expression Character-Entry Escapes
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Character-Entry Escapes"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Escape
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          \a
         </code>
        </td>
        <td>
         alert (bell) character, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \b
         </code>
        </td>
        <td>
         backspace, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \B
         </code>
        </td>
        <td>
         synonym for backslash (
         <code class=""literal"">
          \
         </code>
         ) to help reduce the need for backslash doubling
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \c
         </code>
         <em class=""replaceable"">
          <code>
           X
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           X
          </code>
         </em>
         is any character) the character whose low-order 5 bits are the same as those of
         <em class=""replaceable"">
          <code>
           X
          </code>
         </em>
         , and whose other bits are all zero
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \e
         </code>
        </td>
        <td>
         the character whose collating-sequence name is
         <code class=""literal"">
          ESC
         </code>
         , or failing that, the character with octal value
         <code class=""literal"">
          033
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \f
         </code>
        </td>
        <td>
         form feed, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \n
         </code>
        </td>
        <td>
         newline, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \r
         </code>
        </td>
        <td>
         carriage return, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \t
         </code>
        </td>
        <td>
         horizontal tab, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \u
         </code>
         <em class=""replaceable"">
          <code>
           wxyz
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           wxyz
          </code>
         </em>
         is exactly four hexadecimal digits) the character whose hexadecimal value is
         <code class=""literal"">
          0x
         </code>
         <em class=""replaceable"">
          <code>
           wxyz
          </code>
         </em>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \U
         </code>
         <em class=""replaceable"">
          <code>
           stuvwxyz
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           stuvwxyz
          </code>
         </em>
         is exactly eight hexadecimal digits) the character whose hexadecimal value is
         <code class=""literal"">
          0x
         </code>
         <em class=""replaceable"">
          <code>
           stuvwxyz
          </code>
         </em>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \v
         </code>
        </td>
        <td>
         vertical tab, as in C
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \x
         </code>
         <em class=""replaceable"">
          <code>
           hhh
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           hhh
          </code>
         </em>
         is any sequence of hexadecimal digits) the character whose hexadecimal value is
         <code class=""literal"">
          0x
         </code>
         <em class=""replaceable"">
          <code>
           hhh
          </code>
         </em>
         (a single character no matter how many hexadecimal digits are used)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \0
         </code>
        </td>
        <td>
         the character whose value is
         <code class=""literal"">
          0
         </code>
         (the null byte)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           xy
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           xy
          </code>
         </em>
         is exactly two octal digits, and is not a
         <em class=""firstterm"">
          back reference
         </em>
         ) the character whose octal value is
         <code class=""literal"">
          0
         </code>
         <em class=""replaceable"">
          <code>
           xy
          </code>
         </em>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           xyz
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           xyz
          </code>
         </em>
         is exactly three octal digits, and is not a
         <em class=""firstterm"">
          back reference
         </em>
         ) the character whose octal value is
         <code class=""literal"">
          0
         </code>
         <em class=""replaceable"">
          <code>
           xyz
          </code>
         </em>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Hexadecimal digits are
    <code class=""literal"">
     0
    </code>
    -
    <code class=""literal"">
     9
    </code>
    ,
    <code class=""literal"">
     a
    </code>
    -
    <code class=""literal"">
     f
    </code>
    , and
    <code class=""literal"">
     A
    </code>
    -
    <code class=""literal"">
     F
    </code>
    . Octal digits are
    <code class=""literal"">
     0
    </code>
    -
    <code class=""literal"">
     7
    </code>
    .
   </p>
   <p>
    Numeric character-entry escapes specifying values outside the ASCII range (0–127) have meanings dependent on the database encoding. When the encoding is UTF-8, escape values are equivalent to Unicode code points, for example
    <code class=""literal"">
     \u1234
    </code>
    means the character
    <code class=""literal"">
     U+1234
    </code>
    . For other multibyte encodings, character-entry escapes usually just specify the concatenation of the byte values for the character. If the escape value does not correspond to any legal character in the database encoding, no error will be raised, but it will never match any data.
   </p>
   <p>
    The character-entry escapes are always taken as ordinary characters. For example,
    <code class=""literal"">
     \135
    </code>
    is
    <code class=""literal"">
     ]
    </code>
    in ASCII, but
    <code class=""literal"">
     \135
    </code>
    does not terminate a bracket expression.
   </p>
   <div class=""table"" id=""POSIX-CLASS-SHORTHAND-ESCAPES-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.21. Regular Expression Class-Shorthand Escapes
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Class-Shorthand Escapes"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Escape
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          \d
         </code>
        </td>
        <td>
         matches any digit, like
         <code class=""literal"">
          [[:digit:]]
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \s
         </code>
        </td>
        <td>
         matches any whitespace character, like
         <code class=""literal"">
          [[:space:]]
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \w
         </code>
        </td>
        <td>
         matches any word character, like
         <code class=""literal"">
          [[:word:]]
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \D
         </code>
        </td>
        <td>
         matches any non-digit, like
         <code class=""literal"">
          [^[:digit:]]
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \S
         </code>
        </td>
        <td>
         matches any non-whitespace character, like
         <code class=""literal"">
          [^[:space:]]
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \W
         </code>
        </td>
        <td>
         matches any non-word character, like
         <code class=""literal"">
          [^[:word:]]
         </code>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    The class-shorthand escapes also work within bracket expressions, although the definitions shown above are not quite syntactically valid in that context. For example,
    <code class=""literal"">
     [a-c\d]
    </code>
    is equivalent to
    <code class=""literal"">
     [a-c[:digit:]]
    </code>
    .
   </p>
   <div class=""table"" id=""POSIX-CONSTRAINT-ESCAPES-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.22. Regular Expression Constraint Escapes
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Constraint Escapes"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Escape
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          \A
         </code>
        </td>
        <td>
         matches only at the beginning of the string (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         for how this differs from
         <code class=""literal"">
          ^
         </code>
         )
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \m
         </code>
        </td>
        <td>
         matches only at the beginning of a word
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \M
         </code>
        </td>
        <td>
         matches only at the end of a word
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \y
         </code>
        </td>
        <td>
         matches only at the beginning or end of a word
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \Y
         </code>
        </td>
        <td>
         matches only at a point that is not the beginning or end of a word
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \Z
         </code>
        </td>
        <td>
         matches only at the end of the string (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         for how this differs from
         <code class=""literal"">
          $
         </code>
         )
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    A word is defined as in the specification of
    <code class=""literal"">
     [[:&lt;:]]
    </code>
    and
    <code class=""literal"">
     [[:&gt;:]]
    </code>
    above. Constraint escapes are illegal within bracket expressions.
   </p>
   <div class=""table"" id=""POSIX-CONSTRAINT-BACKREF-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.23. Regular Expression Back References
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Back References"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Escape
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         is a nonzero digit) a back reference to the
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         'th subexpression
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          \
         </code>
         <em class=""replaceable"">
          <code>
           mnn
          </code>
         </em>
        </td>
        <td>
         (where
         <em class=""replaceable"">
          <code>
           m
          </code>
         </em>
         is a nonzero digit, and
         <em class=""replaceable"">
          <code>
           nn
          </code>
         </em>
         is some more digits, and the decimal value
         <em class=""replaceable"">
          <code>
           mnn
          </code>
         </em>
         is not greater than the number of closing capturing parentheses seen so far) a back reference to the
         <em class=""replaceable"">
          <code>
           mnn
          </code>
         </em>
         'th subexpression
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     There is an inherent ambiguity between octal character-entry escapes and back references, which is resolved by the following heuristics, as hinted at above. A leading zero always indicates an octal escape. A single non-zero digit, not followed by another digit, is always taken as a back reference. A multi-digit sequence not starting with a zero is taken as a back reference if it comes after a suitable subexpression (i.e., the number is in the legal range for a back reference), and otherwise is taken as octal.
    </p>
   </div>
  </div>
  <div class=""sect3"" id=""POSIX-METASYNTAX"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.4. Regular Expression Metasyntax
       <a class=""id_link"" href=""#POSIX-METASYNTAX"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    In addition to the main syntax described above, there are some special forms and miscellaneous syntactic facilities available.
   </p>
   <p>
    An RE can begin with one of two special
    <em class=""firstterm"">
     director
    </em>
    prefixes. If an RE begins with
    <code class=""literal"">
     ***:
    </code>
    , the rest of the RE is taken as an ARE. (This normally has no effect in
    <span class=""productname"">
     PostgreSQL
    </span>
    , since REs are assumed to be AREs; but it does have an effect if ERE or BRE mode had been specified by the
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
    parameter to a regex function.) If an RE begins with
    <code class=""literal"">
     ***=
    </code>
    , the rest of the RE is taken to be a literal string, with all characters considered ordinary characters.
   </p>
   <p>
    An ARE can begin with
    <em class=""firstterm"">
     embedded options
    </em>
    : a sequence
    <code class=""literal"">
     (?
    </code>
    <em class=""replaceable"">
     <code>
      xyz
     </code>
    </em>
    <code class=""literal"">
     )
    </code>
    (where
    <em class=""replaceable"">
     <code>
      xyz
     </code>
    </em>
    is one or more alphabetic characters) specifies options affecting the rest of the RE. These options override any previously determined options — in particular, they can override the case-sensitivity behavior implied by a regex operator, or the
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
    parameter to a regex function. The available option letters are shown in
    <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
     Table 9.24
    </a>
    . Note that these same option letters are used in the
    <em class=""replaceable"">
     <code>
      flags
     </code>
    </em>
    parameters of regex functions.
   </p>
   <div class=""table"" id=""POSIX-EMBEDDED-OPTIONS-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.24. ARE Embedded-Option Letters
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""ARE Embedded-Option Letters"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         Option
        </th>
        <th>
         Description
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          b
         </code>
        </td>
        <td>
         rest of RE is a BRE
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          c
         </code>
        </td>
        <td>
         case-sensitive matching (overrides operator type)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          e
         </code>
        </td>
        <td>
         rest of RE is an ERE
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          i
         </code>
        </td>
        <td>
         case-insensitive matching (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         ) (overrides operator type)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          m
         </code>
        </td>
        <td>
         historical synonym for
         <code class=""literal"">
          n
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          n
         </code>
        </td>
        <td>
         newline-sensitive matching (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         )
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          p
         </code>
        </td>
        <td>
         partial newline-sensitive matching (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         )
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          q
         </code>
        </td>
        <td>
         rest of RE is a literal (
         <span class=""quote"">
          “
          <span class=""quote"">
           quoted
          </span>
          ”
         </span>
         ) string, all ordinary characters
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          s
         </code>
        </td>
        <td>
         non-newline-sensitive matching (default)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          t
         </code>
        </td>
        <td>
         tight syntax (default; see below)
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          w
         </code>
        </td>
        <td>
         inverse partial newline-sensitive (
         <span class=""quote"">
          “
          <span class=""quote"">
           weird
          </span>
          ”
         </span>
         ) matching (see
         <a class=""xref"" href=""functions-matching.html#POSIX-MATCHING-RULES"" title=""9.7.3.5. Regular Expression Matching Rules"">
          Section 9.7.3.5
         </a>
         )
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          x
         </code>
        </td>
        <td>
         expanded syntax (see below)
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Embedded options take effect at the
    <code class=""literal"">
     )
    </code>
    terminating the sequence. They can appear only at the start of an ARE (after the
    <code class=""literal"">
     ***:
    </code>
    director if any).
   </p>
   <p>
    In addition to the usual (
    <em class=""firstterm"">
     tight
    </em>
    ) RE syntax, in which all characters are significant, there is an
    <em class=""firstterm"">
     expanded
    </em>
    syntax, available by specifying the embedded
    <code class=""literal"">
     x
    </code>
    option. In the expanded syntax, white-space characters in the RE are ignored, as are all characters between a
    <code class=""literal"">
     #
    </code>
    and the following newline (or the end of the RE). This permits paragraphing and commenting a complex RE. There are three exceptions to that basic rule:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       a white-space character or
       <code class=""literal"">
        #
       </code>
       preceded by
       <code class=""literal"">
        \
       </code>
       is retained
      </p>
     </li>
     <li class=""listitem"">
      <p>
       white space or
       <code class=""literal"">
        #
       </code>
       within a bracket expression is retained
      </p>
     </li>
     <li class=""listitem"">
      <p>
       white space and comments cannot appear within multi-character symbols, such as
       <code class=""literal"">
        (?:
       </code>
      </p>
     </li>
    </ul>
   </div>
   <p>
    For this purpose, white-space characters are blank, tab, newline, and any character that belongs to the
    <em class=""replaceable"">
     <code>
      space
     </code>
    </em>
    character class.
   </p>
   <p>
    Finally, in an ARE, outside bracket expressions, the sequence
    <code class=""literal"">
     (?#
    </code>
    <em class=""replaceable"">
     <code>
      ttt
     </code>
    </em>
    <code class=""literal"">
     )
    </code>
    (where
    <em class=""replaceable"">
     <code>
      ttt
     </code>
    </em>
    is any text not containing a
    <code class=""literal"">
     )
    </code>
    ) is a comment, completely ignored. Again, this is not allowed between the characters of multi-character symbols, like
    <code class=""literal"">
     (?:
    </code>
    . Such comments are more a historical artifact than a useful facility, and their use is deprecated; use the expanded syntax instead.
   </p>
   <p>
    <span class=""emphasis"">
     <em>
      None
     </em>
    </span>
    of these metasyntax extensions is available if an initial
    <code class=""literal"">
     ***=
    </code>
    director has specified that the user's input be treated as a literal string rather than as an RE.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-MATCHING-RULES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.5. Regular Expression Matching Rules
       <a class=""id_link"" href=""#POSIX-MATCHING-RULES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    In the event that an RE could match more than one substring of a given string, the RE matches the one starting earliest in the string. If the RE could match more than one substring starting at that point, either the longest possible match or the shortest possible match will be taken, depending on whether the RE is
    <em class=""firstterm"">
     greedy
    </em>
    or
    <em class=""firstterm"">
     non-greedy
    </em>
    .
   </p>
   <p>
    Whether an RE is greedy or not is determined by the following rules:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       Most atoms, and all constraints, have no greediness attribute (because they cannot match variable amounts of text anyway).
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Adding parentheses around an RE does not change its greediness.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       A quantified atom with a fixed-repetition quantifier (
       <code class=""literal"">
        {
       </code>
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       <code class=""literal"">
        }
       </code>
       or
       <code class=""literal"">
        {
       </code>
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       <code class=""literal"">
        }?
       </code>
       ) has the same greediness (possibly none) as the atom itself.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       A quantified atom with other normal quantifiers (including
       <code class=""literal"">
        {
       </code>
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       <code class=""literal"">
        ,
       </code>
       <em class=""replaceable"">
        <code>
         n
        </code>
       </em>
       <code class=""literal"">
        }
       </code>
       with
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       equal to
       <em class=""replaceable"">
        <code>
         n
        </code>
       </em>
       ) is greedy (prefers longest match).
      </p>
     </li>
     <li class=""listitem"">
      <p>
       A quantified atom with a non-greedy quantifier (including
       <code class=""literal"">
        {
       </code>
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       <code class=""literal"">
        ,
       </code>
       <em class=""replaceable"">
        <code>
         n
        </code>
       </em>
       <code class=""literal"">
        }?
       </code>
       with
       <em class=""replaceable"">
        <code>
         m
        </code>
       </em>
       equal to
       <em class=""replaceable"">
        <code>
         n
        </code>
       </em>
       ) is non-greedy (prefers shortest match).
      </p>
     </li>
     <li class=""listitem"">
      <p>
       A branch — that is, an RE that has no top-level
       <code class=""literal"">
        |
       </code>
       operator — has the same greediness as the first quantified atom in it that has a greediness attribute.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       An RE consisting of two or more branches connected by the
       <code class=""literal"">
        |
       </code>
       operator is always greedy.
      </p>
     </li>
    </ul>
   </div>
   <p>
    The above rules associate greediness attributes not only with individual quantified atoms, but with branches and entire REs that contain quantified atoms. What that means is that the matching is done in such a way that the branch, or whole RE, matches the longest or shortest possible substring
    <span class=""emphasis"">
     <em>
      as a whole
     </em>
    </span>
    . Once the length of the entire match is determined, the part of it that matches any particular subexpression is determined on the basis of the greediness attribute of that subexpression, with subexpressions starting earlier in the RE taking priority over ones starting later.
   </p>
   <p>
    An example of what this means:
   </p>
   <pre class=""screen"">
SELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">123</code>
SELECT SUBSTRING('XY1234Z', 'Y*?([0-9]{1,3})');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">1</code>
</pre>
   <p>
    In the first case, the RE as a whole is greedy because
    <code class=""literal"">
     Y*
    </code>
    is greedy. It can match beginning at the
    <code class=""literal"">
     Y
    </code>
    , and it matches the longest possible string starting there, i.e.,
    <code class=""literal"">
     Y123
    </code>
    . The output is the parenthesized part of that, or
    <code class=""literal"">
     123
    </code>
    . In the second case, the RE as a whole is non-greedy because
    <code class=""literal"">
     Y*?
    </code>
    is non-greedy. It can match beginning at the
    <code class=""literal"">
     Y
    </code>
    , and it matches the shortest possible string starting there, i.e.,
    <code class=""literal"">
     Y1
    </code>
    . The subexpression
    <code class=""literal"">
     [0-9]{1,3}
    </code>
    is greedy but it cannot change the decision as to the overall match length; so it is forced to match just
    <code class=""literal"">
     1
    </code>
    .
   </p>
   <p>
    In short, when an RE contains both greedy and non-greedy subexpressions, the total match length is either as long as possible or as short as possible, according to the attribute assigned to the whole RE. The attributes assigned to the subexpressions only affect how much of that match they are allowed to
    <span class=""quote"">
     “
     <span class=""quote"">
      eat
     </span>
     ”
    </span>
    relative to each other.
   </p>
   <p>
    The quantifiers
    <code class=""literal"">
     {1,1}
    </code>
    and
    <code class=""literal"">
     {1,1}?
    </code>
    can be used to force greediness or non-greediness, respectively, on a subexpression or a whole RE. This is useful when you need the whole RE to have a greediness attribute different from what's deduced from its elements. As an example, suppose that we are trying to separate a string containing some digits into the digits and the parts before and after them. We might try to do that like this:
   </p>
   <pre class=""screen"">
SELECT regexp_match('abc01234xyz', '(.*)(\d+)(.*)');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">{abc0123,4,xyz}</code>
</pre>
   <p>
    That didn't work: the first
    <code class=""literal"">
     .*
    </code>
    is greedy so it
    <span class=""quote"">
     “
     <span class=""quote"">
      eats
     </span>
     ”
    </span>
    as much as it can, leaving the
    <code class=""literal"">
     \d+
    </code>
    to match at the last possible place, the last digit. We might try to fix that by making it non-greedy:
   </p>
   <pre class=""screen"">
SELECT regexp_match('abc01234xyz', '(.*?)(\d+)(.*)');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">{abc,0,""""}</code>
</pre>
   <p>
    That didn't work either, because now the RE as a whole is non-greedy and so it ends the overall match as soon as possible. We can get what we want by forcing the RE as a whole to be greedy:
   </p>
   <pre class=""screen"">
SELECT regexp_match('abc01234xyz', '(?:(.*?)(\d+)(.*)){1,1}');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">{abc,01234,xyz}</code>
</pre>
   <p>
    Controlling the RE's overall greediness separately from its components' greediness allows great flexibility in handling variable-length patterns.
   </p>
   <p>
    When deciding what is a longer or shorter match, match lengths are measured in characters, not collating elements. An empty string is considered longer than no match at all. For example:
    <code class=""literal"">
     bb*
    </code>
    matches the three middle characters of
    <code class=""literal"">
     abbbc
    </code>
    ;
    <code class=""literal"">
     (week|wee)(night|knights)
    </code>
    matches all ten characters of
    <code class=""literal"">
     weeknights
    </code>
    ; when
    <code class=""literal"">
     (.*).*
    </code>
    is matched against
    <code class=""literal"">
     abc
    </code>
    the parenthesized subexpression matches all three characters; and when
    <code class=""literal"">
     (a*)*
    </code>
    is matched against
    <code class=""literal"">
     bc
    </code>
    both the whole RE and the parenthesized subexpression match an empty string.
   </p>
   <p>
    If case-independent matching is specified, the effect is much as if all case distinctions had vanished from the alphabet. When an alphabetic that exists in multiple cases appears as an ordinary character outside a bracket expression, it is effectively transformed into a bracket expression containing both cases, e.g.,
    <code class=""literal"">
     x
    </code>
    becomes
    <code class=""literal"">
     [xX]
    </code>
    . When it appears inside a bracket expression, all case counterparts of it are added to the bracket expression, e.g.,
    <code class=""literal"">
     [x]
    </code>
    becomes
    <code class=""literal"">
     [xX]
    </code>
    and
    <code class=""literal"">
     [^x]
    </code>
    becomes
    <code class=""literal"">
     [^xX]
    </code>
    .
   </p>
   <p>
    If newline-sensitive matching is specified,
    <code class=""literal"">
     .
    </code>
    and bracket expressions using
    <code class=""literal"">
     ^
    </code>
    will never match the newline character (so that matches will not cross lines unless the RE explicitly includes a newline) and
    <code class=""literal"">
     ^
    </code>
    and
    <code class=""literal"">
     $
    </code>
    will match the empty string after and before a newline respectively, in addition to matching at beginning and end of string respectively. But the ARE escapes
    <code class=""literal"">
     \A
    </code>
    and
    <code class=""literal"">
     \Z
    </code>
    continue to match beginning or end of string
    <span class=""emphasis"">
     <em>
      only
     </em>
    </span>
    . Also, the character class shorthands
    <code class=""literal"">
     \D
    </code>
    and
    <code class=""literal"">
     \W
    </code>
    will match a newline regardless of this mode. (Before
    <span class=""productname"">
     PostgreSQL
    </span>
    14, they did not match newlines when in newline-sensitive mode. Write
    <code class=""literal"">
     [^[:digit:]]
    </code>
    or
    <code class=""literal"">
     [^[:word:]]
    </code>
    to get the old behavior.)
   </p>
   <p>
    If partial newline-sensitive matching is specified, this affects
    <code class=""literal"">
     .
    </code>
    and bracket expressions as with newline-sensitive matching, but not
    <code class=""literal"">
     ^
    </code>
    and
    <code class=""literal"">
     $
    </code>
    .
   </p>
   <p>
    If inverse partial newline-sensitive matching is specified, this affects
    <code class=""literal"">
     ^
    </code>
    and
    <code class=""literal"">
     $
    </code>
    as with newline-sensitive matching, but not
    <code class=""literal"">
     .
    </code>
    and bracket expressions. This isn't very useful but is provided for symmetry.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-LIMITS-COMPATIBILITY"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.6. Limits and Compatibility
       <a class=""id_link"" href=""#POSIX-LIMITS-COMPATIBILITY"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    No particular limit is imposed on the length of REs in this implementation. However, programs intended to be highly portable should not employ REs longer than 256 bytes, as a POSIX-compliant implementation can refuse to accept such REs.
   </p>
   <p>
    The only feature of AREs that is actually incompatible with POSIX EREs is that
    <code class=""literal"">
     \
    </code>
    does not lose its special significance inside bracket expressions. All other ARE features use syntax which is illegal or has undefined or unspecified effects in POSIX EREs; the
    <code class=""literal"">
     ***
    </code>
    syntax of directors likewise is outside the POSIX syntax for both BREs and EREs.
   </p>
   <p>
    Many of the ARE extensions are borrowed from Perl, but some have been changed to clean them up, and a few Perl extensions are not present. Incompatibilities of note include
    <code class=""literal"">
     \b
    </code>
    ,
    <code class=""literal"">
     \B
    </code>
    , the lack of special treatment for a trailing newline, the addition of complemented bracket expressions to the things affected by newline-sensitive matching, the restrictions on parentheses and back references in lookahead/lookbehind constraints, and the longest/shortest-match (rather than first-match) matching semantics.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-BASIC-REGEXES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.7. Basic Regular Expressions
       <a class=""id_link"" href=""#POSIX-BASIC-REGEXES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    BREs differ from EREs in several respects. In BREs,
    <code class=""literal"">
     |
    </code>
    ,
    <code class=""literal"">
     +
    </code>
    , and
    <code class=""literal"">
     ?
    </code>
    are ordinary characters and there is no equivalent for their functionality. The delimiters for bounds are
    <code class=""literal"">
     \{
    </code>
    and
    <code class=""literal"">
     \}
    </code>
    , with
    <code class=""literal"">
     {
    </code>
    and
    <code class=""literal"">
     }
    </code>
    by themselves ordinary characters. The parentheses for nested subexpressions are
    <code class=""literal"">
     \(
    </code>
    and
    <code class=""literal"">
     \)
    </code>
    , with
    <code class=""literal"">
     (
    </code>
    and
    <code class=""literal"">
     )
    </code>
    by themselves ordinary characters.
    <code class=""literal"">
     ^
    </code>
    is an ordinary character except at the beginning of the RE or the beginning of a parenthesized subexpression,
    <code class=""literal"">
     $
    </code>
    is an ordinary character except at the end of the RE or the end of a parenthesized subexpression, and
    <code class=""literal"">
     *
    </code>
    is an ordinary character if it appears at the beginning of the RE or the beginning of a parenthesized subexpression (after a possible leading
    <code class=""literal"">
     ^
    </code>
    ). Finally, single-digit back references are available, and
    <code class=""literal"">
     \&lt;
    </code>
    and
    <code class=""literal"">
     \&gt;
    </code>
    are synonyms for
    <code class=""literal"">
     [[:&lt;:]]
    </code>
    and
    <code class=""literal"">
     [[:&gt;:]]
    </code>
    respectively; no other escapes are available in BREs.
   </p>
  </div>
  <div class=""sect3"" id=""POSIX-VS-XQUERY"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.7.3.8. Differences from SQL Standard and XQuery
       <a class=""id_link"" href=""#POSIX-VS-XQUERY"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.2"" name=""id-1.5.8.13.9.48.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.3"" name=""id-1.5.8.13.9.48.3"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.4"" name=""id-1.5.8.13.9.48.4"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.5"" name=""id-1.5.8.13.9.48.5"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.6"" name=""id-1.5.8.13.9.48.6"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.13.9.48.7"" name=""id-1.5.8.13.9.48.7"">
   </a>
   <p>
    Since SQL:2008, the SQL standard includes regular expression operators and functions that performs pattern matching according to the XQuery regular expression standard:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        LIKE_REGEX
       </code>
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        OCCURRENCES_REGEX
       </code>
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        POSITION_REGEX
       </code>
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        SUBSTRING_REGEX
       </code>
      </p>
     </li>
     <li class=""listitem"">
      <p>
       <code class=""literal"">
        TRANSLATE_REGEX
       </code>
      </p>
     </li>
    </ul>
   </div>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    does not currently implement these operators and functions. You can get approximately equivalent functionality in each case as shown in
    <a class=""xref"" href=""functions-matching.html#FUNCTIONS-REGEXP-SQL-TABLE"" title=""Table 9.25. Regular Expression Functions Equivalencies"">
     Table 9.25
    </a>
    . (Various optional clauses on both sides have been omitted in this table.)
   </p>
   <div class=""table"" id=""FUNCTIONS-REGEXP-SQL-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.25. Regular Expression Functions Equivalencies
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""Regular Expression Functions Equivalencies"">
      <colgroup>
       <col/>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th>
         SQL standard
        </th>
        <th>
         <span class=""productname"">
          PostgreSQL
         </span>
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td>
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          LIKE_REGEX
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
         </code>
        </td>
        <td>
         <code class=""literal"">
          regexp_like(
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          )
         </code>
         or
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ~
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          OCCURRENCES_REGEX(
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          IN
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          )
         </code>
        </td>
        <td>
         <code class=""literal"">
          regexp_count(
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          )
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          POSITION_REGEX(
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          IN
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          )
         </code>
        </td>
        <td>
         <code class=""literal"">
          regexp_instr(
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          )
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          SUBSTRING_REGEX(
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          IN
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          )
         </code>
        </td>
        <td>
         <code class=""literal"">
          regexp_substr(
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          )
         </code>
        </td>
       </tr>
       <tr>
        <td>
         <code class=""literal"">
          TRANSLATE_REGEX(
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          IN
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          WITH
          <em class=""replaceable"">
           <code>
            replacement
           </code>
          </em>
          )
         </code>
        </td>
        <td>
         <code class=""literal"">
          regexp_replace(
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            pattern
           </code>
          </em>
          ,
          <em class=""replaceable"">
           <code>
            replacement
           </code>
          </em>
          )
         </code>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <p>
    Regular expression functions similar to those provided by PostgreSQL are also available in a number of other SQL implementations, whereas the SQL-standard functions are not as widely implemented. Some of the details of the regular expression syntax will likely differ in each implementation.
   </p>
   <p>
    The SQL-standard operators and functions use XQuery regular expressions, which are quite close to the ARE syntax described above. Notable differences between the existing POSIX-based regular-expression feature and XQuery regular expressions include:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       XQuery character class subtraction is not supported. An example of this feature is using the following to match only English consonants:
       <code class=""literal"">
        [a-z-[aeiou]]
       </code>
       .
      </p>
     </li>
     <li class=""listitem"">
      <p>
       XQuery character class shorthands
       <code class=""literal"">
        \c
       </code>
       ,
       <code class=""literal"">
        \C
       </code>
       ,
       <code class=""literal"">
        \i
       </code>
       , and
       <code class=""literal"">
        \I
       </code>
       are not supported.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       XQuery character class elements using
       <code class=""literal"">
        \p{UnicodeProperty}
       </code>
       or the inverse
       <code class=""literal"">
        \P{UnicodeProperty}
       </code>
       are not supported.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       POSIX interprets character classes such as
       <code class=""literal"">
        \w
       </code>
       (see
       <a class=""xref"" href=""functions-matching.html#POSIX-CLASS-SHORTHAND-ESCAPES-TABLE"" title=""Table 9.21. Regular Expression Class-Shorthand Escapes"">
        Table 9.21
       </a>
       ) according to the prevailing locale (which you can control by attaching a
       <code class=""literal"">
        COLLATE
       </code>
       clause to the operator or function). XQuery specifies these classes by reference to Unicode character properties, so equivalent behavior is obtained only with a locale that follows the Unicode rules.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       The SQL standard (not XQuery itself) attempts to cater for more variants of
       <span class=""quote"">
        “
        <span class=""quote"">
         newline
        </span>
        ”
       </span>
       than POSIX does. The newline-sensitive matching options described above consider only ASCII NL (
       <code class=""literal"">
        \n
       </code>
       ) to be a newline, but SQL would have us treat CR (
       <code class=""literal"">
        \r
       </code>
       ), CRLF (
       <code class=""literal"">
        \r\n
       </code>
       ) (a Windows-style newline), and some Unicode-only characters like LINE SEPARATOR (U+2028) as newlines as well. Notably,
       <code class=""literal"">
        .
       </code>
       and
       <code class=""literal"">
        \s
       </code>
       should count
       <code class=""literal"">
        \r\n
       </code>
       as one character not two according to SQL.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       Of the character-entry escapes described in
       <a class=""xref"" href=""functions-matching.html#POSIX-CHARACTER-ENTRY-ESCAPES-TABLE"" title=""Table 9.20. Regular Expression Character-Entry Escapes"">
        Table 9.20
       </a>
       , XQuery supports only
       <code class=""literal"">
        \n
       </code>
       ,
       <code class=""literal"">
        \r
       </code>
       , and
       <code class=""literal"">
        \t
       </code>
       .
      </p>
     </li>
     <li class=""listitem"">
      <p>
       XQuery does not support the
       <code class=""literal"">
        [:
        <em class=""replaceable"">
         <code>
          name
         </code>
        </em>
        :]
       </code>
       syntax for character classes within bracket expressions.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       XQuery does not have lookahead or lookbehind constraints, nor any of the constraint escapes described in
       <a class=""xref"" href=""functions-matching.html#POSIX-CONSTRAINT-ESCAPES-TABLE"" title=""Table 9.22. Regular Expression Constraint Escapes"">
        Table 9.22
       </a>
       .
      </p>
     </li>
     <li class=""listitem"">
      <p>
       The metasyntax forms described in
       <a class=""xref"" href=""functions-matching.html#POSIX-METASYNTAX"" title=""9.7.3.4. Regular Expression Metasyntax"">
        Section 9.7.3.4
       </a>
       do not exist in XQuery.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       The regular expression flag letters defined by XQuery are related to but not the same as the option letters for POSIX (
       <a class=""xref"" href=""functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE"" title=""Table 9.24. ARE Embedded-Option Letters"">
        Table 9.24
       </a>
       ). While the
       <code class=""literal"">
        i
       </code>
       and
       <code class=""literal"">
        q
       </code>
       options behave the same, others do not:
      </p>
      <div class=""itemizedlist"">
       <ul class=""itemizedlist"" style=""list-style-type: circle;"">
        <li class=""listitem"">
         <p>
          XQuery's
          <code class=""literal"">
           s
          </code>
          (allow dot to match newline) and
          <code class=""literal"">
           m
          </code>
          (allow
          <code class=""literal"">
           ^
          </code>
          and
          <code class=""literal"">
           $
          </code>
          to match at newlines) flags provide access to the same behaviors as POSIX's
          <code class=""literal"">
           n
          </code>
          ,
          <code class=""literal"">
           p
          </code>
          and
          <code class=""literal"">
           w
          </code>
          flags, but they do
          <span class=""emphasis"">
           <em>
            not
           </em>
          </span>
          match the behavior of POSIX's
          <code class=""literal"">
           s
          </code>
          and
          <code class=""literal"">
           m
          </code>
          flags. Note in particular that dot-matches-newline is the default behavior in POSIX but not XQuery.
         </p>
        </li>
        <li class=""listitem"">
         <p>
          XQuery's
          <code class=""literal"">
           x
          </code>
          (ignore whitespace in pattern) flag is noticeably different from POSIX's expanded-mode flag. POSIX's
          <code class=""literal"">
           x
          </code>
          flag also allows
          <code class=""literal"">
           #
          </code>
          to begin a comment in the pattern, and POSIX will not ignore a whitespace character after a backslash.
         </p>
        </li>
       </ul>
      </div>
     </li>
    </ul>
   </div>
  </div>
 </div>
</div>
"
9. Functions and Operators,9.8. Data Type Formatting Functions,https://www.postgresql.org/docs/17/functions-formatting.html,"<div class=""sect1"" id=""FUNCTIONS-FORMATTING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.8. Data Type Formatting Functions
     <a class=""id_link"" href=""#FUNCTIONS-FORMATTING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.14.2"" name=""id-1.5.8.14.2"">
 </a>
 <p>
  The
  <span class=""productname"">
   PostgreSQL
  </span>
  formatting functions provide a powerful set of tools for converting various data types (date/time, integer, floating point, numeric) to formatted strings and for converting from formatted strings to specific data types.
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-TABLE"" title=""Table 9.26. Formatting Functions"">
   Table 9.26
  </a>
  lists them. These functions all follow a common calling convention: the first argument is the value to be formatted and the second argument is a template that defines the output or input format.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.26. Formatting Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Formatting Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.14.4.2.2.1.1.1.1"" name=""id-1.5.8.14.4.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         to_char
        </code>
        (
        <code class=""type"">
         timestamp
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_char
        </code>
        (
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts time stamp to string according to the given format.
       </p>
       <p>
        <code class=""literal"">
         to_char(timestamp '2002-04-20 17:31:12.66', 'HH12:MI:SS')
        </code>
        →
        <code class=""returnvalue"">
         05:31:12
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         to_char
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts interval to string according to the given format.
       </p>
       <p>
        <code class=""literal"">
         to_char(interval '15h 2m 12s', 'HH24:MI:SS')
        </code>
        →
        <code class=""returnvalue"">
         15:02:12
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         to_char
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts number to string according to the given format; available for
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        ,
        <code class=""type"">
         numeric
        </code>
        ,
        <code class=""type"">
         real
        </code>
        ,
        <code class=""type"">
         double precision
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         to_char(125, '999')
        </code>
        →
        <code class=""returnvalue"">
         125
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_char(125.8::real, '999D9')
        </code>
        →
        <code class=""returnvalue"">
         125.8
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_char(-125.8, '999D99S')
        </code>
        →
        <code class=""returnvalue"">
         125.80-
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.14.4.2.2.4.1.1.1"" name=""id-1.5.8.14.4.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         to_date
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         date
        </code>
       </p>
       <p>
        Converts string to date according to the given format.
       </p>
       <p>
        <code class=""literal"">
         to_date('05 Dec 2000', 'DD Mon YYYY')
        </code>
        →
        <code class=""returnvalue"">
         2000-12-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.14.4.2.2.5.1.1.1"" name=""id-1.5.8.14.4.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         to_number
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Converts string to numeric according to the given format.
       </p>
       <p>
        <code class=""literal"">
         to_number('12,454.8-', '99G999D9S')
        </code>
        →
        <code class=""returnvalue"">
         -12454.8
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.14.4.2.2.6.1.1.1"" name=""id-1.5.8.14.4.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         to_timestamp
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Converts string to time stamp according to the given format. (See also
        <code class=""function"">
         to_timestamp(double precision)
        </code>
        in
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-TABLE"" title=""Table 9.33. Date/Time Functions"">
         Table 9.33
        </a>
        .)
       </p>
       <p>
        <code class=""literal"">
         to_timestamp('05 Dec 2000', 'DD Mon YYYY')
        </code>
        →
        <code class=""returnvalue"">
         2000-12-05 00:00:00-05
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   <code class=""function"">
    to_timestamp
   </code>
   and
   <code class=""function"">
    to_date
   </code>
   exist to handle input formats that cannot be converted by simple casting. For most standard date/time formats, simply casting the source string to the required data type works, and is much easier. Similarly,
   <code class=""function"">
    to_number
   </code>
   is unnecessary for standard numeric representations.
  </p>
 </div>
 <p>
  In a
  <code class=""function"">
   to_char
  </code>
  output template string, there are certain patterns that are recognized and replaced with appropriately-formatted data based on the given value. Any text that is not a template pattern is simply copied verbatim. Similarly, in an input template string (for the other functions), template patterns identify the values to be supplied by the input data string. If there are characters in the template string that are not template patterns, the corresponding characters in the input data string are simply skipped over (whether or not they are equal to the template string characters).
 </p>
 <p>
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-DATETIME-TABLE"" title=""Table 9.27. Template Patterns for Date/Time Formatting"">
   Table 9.27
  </a>
  shows the template patterns available for formatting date and time values.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-DATETIME-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.27. Template Patterns for Date/Time Formatting
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Template Patterns for Date/Time Formatting"">
    <colgroup>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Pattern
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        HH
       </code>
      </td>
      <td>
       hour of day (01–12)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        HH12
       </code>
      </td>
      <td>
       hour of day (01–12)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        HH24
       </code>
      </td>
      <td>
       hour of day (00–23)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MI
       </code>
      </td>
      <td>
       minute (00–59)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SS
       </code>
      </td>
      <td>
       second (00–59)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MS
       </code>
      </td>
      <td>
       millisecond (000–999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        US
       </code>
      </td>
      <td>
       microsecond (000000–999999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF1
       </code>
      </td>
      <td>
       tenth of second (0–9)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF2
       </code>
      </td>
      <td>
       hundredth of second (00–99)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF3
       </code>
      </td>
      <td>
       millisecond (000–999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF4
       </code>
      </td>
      <td>
       tenth of a millisecond (0000–9999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF5
       </code>
      </td>
      <td>
       hundredth of a millisecond (00000–99999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FF6
       </code>
      </td>
      <td>
       microsecond (000000–999999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SSSS
       </code>
       ,
       <code class=""literal"">
        SSSSS
       </code>
      </td>
      <td>
       seconds past midnight (0–86399)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        AM
       </code>
       ,
       <code class=""literal"">
        am
       </code>
       ,
       <code class=""literal"">
        PM
       </code>
       or
       <code class=""literal"">
        pm
       </code>
      </td>
      <td>
       meridiem indicator (without periods)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        A.M.
       </code>
       ,
       <code class=""literal"">
        a.m.
       </code>
       ,
       <code class=""literal"">
        P.M.
       </code>
       or
       <code class=""literal"">
        p.m.
       </code>
      </td>
      <td>
       meridiem indicator (with periods)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Y,YYY
       </code>
      </td>
      <td>
       year (4 or more digits) with comma
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        YYYY
       </code>
      </td>
      <td>
       year (4 or more digits)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        YYY
       </code>
      </td>
      <td>
       last 3 digits of year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        YY
       </code>
      </td>
      <td>
       last 2 digits of year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Y
       </code>
      </td>
      <td>
       last digit of year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        IYYY
       </code>
      </td>
      <td>
       ISO 8601 week-numbering year (4 or more digits)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        IYY
       </code>
      </td>
      <td>
       last 3 digits of ISO 8601 week-numbering year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        IY
       </code>
      </td>
      <td>
       last 2 digits of ISO 8601 week-numbering year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        I
       </code>
      </td>
      <td>
       last digit of ISO 8601 week-numbering year
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        BC
       </code>
       ,
       <code class=""literal"">
        bc
       </code>
       ,
       <code class=""literal"">
        AD
       </code>
       or
       <code class=""literal"">
        ad
       </code>
      </td>
      <td>
       era indicator (without periods)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        B.C.
       </code>
       ,
       <code class=""literal"">
        b.c.
       </code>
       ,
       <code class=""literal"">
        A.D.
       </code>
       or
       <code class=""literal"">
        a.d.
       </code>
      </td>
      <td>
       era indicator (with periods)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MONTH
       </code>
      </td>
      <td>
       full upper case month name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Month
       </code>
      </td>
      <td>
       full capitalized month name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        month
       </code>
      </td>
      <td>
       full lower case month name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MON
       </code>
      </td>
      <td>
       abbreviated upper case month name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Mon
       </code>
      </td>
      <td>
       abbreviated capitalized month name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        mon
       </code>
      </td>
      <td>
       abbreviated lower case month name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MM
       </code>
      </td>
      <td>
       month number (01–12)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DAY
       </code>
      </td>
      <td>
       full upper case day name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Day
       </code>
      </td>
      <td>
       full capitalized day name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        day
       </code>
      </td>
      <td>
       full lower case day name (blank-padded to 9 chars)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DY
       </code>
      </td>
      <td>
       abbreviated upper case day name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Dy
       </code>
      </td>
      <td>
       abbreviated capitalized day name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        dy
       </code>
      </td>
      <td>
       abbreviated lower case day name (3 chars in English, localized lengths vary)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DDD
       </code>
      </td>
      <td>
       day of year (001–366)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        IDDD
       </code>
      </td>
      <td>
       day of ISO 8601 week-numbering year (001–371; day 1 of the year is Monday of the first ISO week)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        DD
       </code>
      </td>
      <td>
       day of month (01–31)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        D
       </code>
      </td>
      <td>
       day of the week, Sunday (
       <code class=""literal"">
        1
       </code>
       ) to Saturday (
       <code class=""literal"">
        7
       </code>
       )
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        ID
       </code>
      </td>
      <td>
       ISO 8601 day of the week, Monday (
       <code class=""literal"">
        1
       </code>
       ) to Sunday (
       <code class=""literal"">
        7
       </code>
       )
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        W
       </code>
      </td>
      <td>
       week of month (1–5) (the first week starts on the first day of the month)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        WW
       </code>
      </td>
      <td>
       week number of year (1–53) (the first week starts on the first day of the year)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        IW
       </code>
      </td>
      <td>
       week number of ISO 8601 week-numbering year (01–53; the first Thursday of the year is in week 1)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        CC
       </code>
      </td>
      <td>
       century (2 digits) (the twenty-first century starts on 2001-01-01)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        J
       </code>
      </td>
      <td>
       Julian Date (integer days since November 24, 4714 BC at local midnight; see
       <a class=""xref"" href=""datetime-julian-dates.html"" title=""B.7. Julian Dates"">
        Section B.7
       </a>
       )
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        Q
       </code>
      </td>
      <td>
       quarter
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        RM
       </code>
      </td>
      <td>
       month in upper case Roman numerals (I–XII; I=January)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        rm
       </code>
      </td>
      <td>
       month in lower case Roman numerals (i–xii; i=January)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TZ
       </code>
      </td>
      <td>
       upper case time-zone abbreviation
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        tz
       </code>
      </td>
      <td>
       lower case time-zone abbreviation
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TZH
       </code>
      </td>
      <td>
       time-zone hours
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TZM
       </code>
      </td>
      <td>
       time-zone minutes
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        OF
       </code>
      </td>
      <td>
       time-zone offset from UTC (
       <em class=""replaceable"">
        <code>
         HH
        </code>
       </em>
       or
       <em class=""replaceable"">
        <code>
         HH
        </code>
       </em>
       <code class=""literal"">
        :
       </code>
       <em class=""replaceable"">
        <code>
         MM
        </code>
       </em>
       )
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Modifiers can be applied to any template pattern to alter its behavior. For example,
  <code class=""literal"">
   FMMonth
  </code>
  is the
  <code class=""literal"">
   Month
  </code>
  pattern with the
  <code class=""literal"">
   FM
  </code>
  modifier.
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-DATETIMEMOD-TABLE"" title=""Table 9.28. Template Pattern Modifiers for Date/Time Formatting"">
   Table 9.28
  </a>
  shows the modifier patterns for date/time formatting.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-DATETIMEMOD-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.28. Template Pattern Modifiers for Date/Time Formatting
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Template Pattern Modifiers for Date/Time Formatting"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Modifier
      </th>
      <th>
       Description
      </th>
      <th>
       Example
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        FM
       </code>
       prefix
      </td>
      <td>
       fill mode (suppress leading zeroes and padding blanks)
      </td>
      <td>
       <code class=""literal"">
        FMMonth
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TH
       </code>
       suffix
      </td>
      <td>
       upper case ordinal number suffix
      </td>
      <td>
       <code class=""literal"">
        DDTH
       </code>
       , e.g.,
       <code class=""literal"">
        12TH
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        th
       </code>
       suffix
      </td>
      <td>
       lower case ordinal number suffix
      </td>
      <td>
       <code class=""literal"">
        DDth
       </code>
       , e.g.,
       <code class=""literal"">
        12th
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        FX
       </code>
       prefix
      </td>
      <td>
       fixed format global option (see usage notes)
      </td>
      <td>
       <code class=""literal"">
        FX Month DD Day
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TM
       </code>
       prefix
      </td>
      <td>
       translation mode (use localized day and month names based on
       <a class=""xref"" href=""runtime-config-client.html#GUC-LC-TIME"">
        lc_time
       </a>
       )
      </td>
      <td>
       <code class=""literal"">
        TMMonth
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SP
       </code>
       suffix
      </td>
      <td>
       spell mode (not implemented)
      </td>
      <td>
       <code class=""literal"">
        DDSP
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Usage notes for date/time formatting:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      FM
     </code>
     suppresses leading zeroes and trailing blanks that would otherwise be added to make the output of a pattern be fixed-width. In
     <span class=""productname"">
      PostgreSQL
     </span>
     ,
     <code class=""literal"">
      FM
     </code>
     modifies only the next specification, while in Oracle
     <code class=""literal"">
      FM
     </code>
     affects all subsequent specifications, and repeated
     <code class=""literal"">
      FM
     </code>
     modifiers toggle fill mode on and off.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      TM
     </code>
     suppresses trailing blanks whether or not
     <code class=""literal"">
      FM
     </code>
     is specified.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     ignore letter case in the input; so for example
     <code class=""literal"">
      MON
     </code>
     ,
     <code class=""literal"">
      Mon
     </code>
     , and
     <code class=""literal"">
      mon
     </code>
     all accept the same strings. When using the
     <code class=""literal"">
      TM
     </code>
     modifier, case-folding is done according to the rules of the function's input collation (see
     <a class=""xref"" href=""collation.html"" title=""23.2. Collation Support"">
      Section 23.2
     </a>
     ).
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     skip multiple blank spaces at the beginning of the input string and around date and time values unless the
     <code class=""literal"">
      FX
     </code>
     option is used. For example,
     <code class=""literal"">
      to_timestamp(' 2000    JUN', 'YYYY MON')
     </code>
     and
     <code class=""literal"">
      to_timestamp('2000 - JUN', 'YYYY-MON')
     </code>
     work, but
     <code class=""literal"">
      to_timestamp('2000    JUN', 'FXYYYY MON')
     </code>
     returns an error because
     <code class=""function"">
      to_timestamp
     </code>
     expects only a single space.
     <code class=""literal"">
      FX
     </code>
     must be specified as the first item in the template.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A separator (a space or non-letter/non-digit character) in the template string of
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     matches any single separator in the input string or is skipped, unless the
     <code class=""literal"">
      FX
     </code>
     option is used. For example,
     <code class=""literal"">
      to_timestamp('2000JUN', 'YYYY///MON')
     </code>
     and
     <code class=""literal"">
      to_timestamp('2000/JUN', 'YYYY MON')
     </code>
     work, but
     <code class=""literal"">
      to_timestamp('2000//JUN', 'YYYY/MON')
     </code>
     returns an error because the number of separators in the input string exceeds the number of separators in the template.
    </p>
    <p>
     If
     <code class=""literal"">
      FX
     </code>
     is specified, a separator in the template string matches exactly one character in the input string. But note that the input string character is not required to be the same as the separator from the template string. For example,
     <code class=""literal"">
      to_timestamp('2000/JUN', 'FXYYYY MON')
     </code>
     works, but
     <code class=""literal"">
      to_timestamp('2000/JUN', 'FXYYYY  MON')
     </code>
     returns an error because the second space in the template string consumes the letter
     <code class=""literal"">
      J
     </code>
     from the input string.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A
     <code class=""literal"">
      TZH
     </code>
     template pattern can match a signed number. Without the
     <code class=""literal"">
      FX
     </code>
     option, minus signs may be ambiguous, and could be interpreted as a separator. This ambiguity is resolved as follows: If the number of separators before
     <code class=""literal"">
      TZH
     </code>
     in the template string is less than the number of separators before the minus sign in the input string, the minus sign is interpreted as part of
     <code class=""literal"">
      TZH
     </code>
     . Otherwise, the minus sign is considered to be a separator between values. For example,
     <code class=""literal"">
      to_timestamp('2000 -10', 'YYYY TZH')
     </code>
     matches
     <code class=""literal"">
      -10
     </code>
     to
     <code class=""literal"">
      TZH
     </code>
     , but
     <code class=""literal"">
      to_timestamp('2000 -10', 'YYYY  TZH')
     </code>
     matches
     <code class=""literal"">
      10
     </code>
     to
     <code class=""literal"">
      TZH
     </code>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Ordinary text is allowed in
     <code class=""function"">
      to_char
     </code>
     templates and will be output literally. You can put a substring in double quotes to force it to be interpreted as literal text even if it contains template patterns. For example, in
     <code class=""literal"">
      '""Hello Year ""YYYY'
     </code>
     , the
     <code class=""literal"">
      YYYY
     </code>
     will be replaced by the year data, but the single
     <code class=""literal"">
      Y
     </code>
     in
     <code class=""literal"">
      Year
     </code>
     will not be. In
     <code class=""function"">
      to_date
     </code>
     ,
     <code class=""function"">
      to_number
     </code>
     , and
     <code class=""function"">
      to_timestamp
     </code>
     , literal text and double-quoted strings result in skipping the number of characters contained in the string; for example
     <code class=""literal"">
      ""XX""
     </code>
     skips two input characters (whether or not they are
     <code class=""literal"">
      XX
     </code>
     ).
    </p>
    <div class=""tip"">
     <h3 class=""title"">
      Tip
     </h3>
     <p>
      Prior to
      <span class=""productname"">
       PostgreSQL
      </span>
      12, it was possible to skip arbitrary text in the input string using non-letter or non-digit characters. For example,
      <code class=""literal"">
       to_timestamp('2000y6m1d', 'yyyy-MM-DD')
      </code>
      used to work. Now you can only use letter characters for this purpose. For example,
      <code class=""literal"">
       to_timestamp('2000y6m1d', 'yyyytMMtDDt')
      </code>
      and
      <code class=""literal"">
       to_timestamp('2000y6m1d', 'yyyy""y""MM""m""DD""d""')
      </code>
      skip
      <code class=""literal"">
       y
      </code>
      ,
      <code class=""literal"">
       m
      </code>
      , and
      <code class=""literal"">
       d
      </code>
      .
     </p>
    </div>
   </li>
   <li class=""listitem"">
    <p>
     If you want to have a double quote in the output you must precede it with a backslash, for example
     <code class=""literal"">
      '\""YYYY Month\""'
     </code>
     . Backslashes are not otherwise special outside of double-quoted strings. Within a double-quoted string, a backslash causes the next character to be taken literally, whatever it is (but this has no special effect unless the next character is a double quote or another backslash).
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , if the year format specification is less than four digits, e.g.,
     <code class=""literal"">
      YYY
     </code>
     , and the supplied year is less than four digits, the year will be adjusted to be nearest to the year 2020, e.g.,
     <code class=""literal"">
      95
     </code>
     becomes 1995.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , negative years are treated as signifying BC. If you write both a negative year and an explicit
     <code class=""literal"">
      BC
     </code>
     field, you get AD again. An input of year zero is treated as 1 BC.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , the
     <code class=""literal"">
      YYYY
     </code>
     conversion has a restriction when processing years with more than 4 digits. You must use some non-digit character or template after
     <code class=""literal"">
      YYYY
     </code>
     , otherwise the year is always interpreted as 4 digits. For example (with the year 20000):
     <code class=""literal"">
      to_date('200001130', 'YYYYMMDD')
     </code>
     will be interpreted as a 4-digit year; instead use a non-digit separator after the year, like
     <code class=""literal"">
      to_date('20000-1130', 'YYYY-MMDD')
     </code>
     or
     <code class=""literal"">
      to_date('20000Nov30', 'YYYYMonDD')
     </code>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , the
     <code class=""literal"">
      CC
     </code>
     (century) field is accepted but ignored if there is a
     <code class=""literal"">
      YYY
     </code>
     ,
     <code class=""literal"">
      YYYY
     </code>
     or
     <code class=""literal"">
      Y,YYY
     </code>
     field. If
     <code class=""literal"">
      CC
     </code>
     is used with
     <code class=""literal"">
      YY
     </code>
     or
     <code class=""literal"">
      Y
     </code>
     then the result is computed as that year in the specified century. If the century is specified but the year is not, the first year of the century is assumed.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , weekday names or numbers (
     <code class=""literal"">
      DAY
     </code>
     ,
     <code class=""literal"">
      D
     </code>
     , and related field types) are accepted but are ignored for purposes of computing the result. The same is true for quarter (
     <code class=""literal"">
      Q
     </code>
     ) fields.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     and
     <code class=""function"">
      to_date
     </code>
     , an ISO 8601 week-numbering date (as distinct from a Gregorian date) can be specified in one of two ways:
    </p>
    <div class=""itemizedlist"">
     <ul class=""itemizedlist"" style=""list-style-type: circle;"">
      <li class=""listitem"">
       <p>
        Year, week number, and weekday: for example
        <code class=""literal"">
         to_date('2006-42-4', 'IYYY-IW-ID')
        </code>
        returns the date
        <code class=""literal"">
         2006-10-19
        </code>
        . If you omit the weekday it is assumed to be 1 (Monday).
       </p>
      </li>
      <li class=""listitem"">
       <p>
        Year and day of year: for example
        <code class=""literal"">
         to_date('2006-291', 'IYYY-IDDD')
        </code>
        also returns
        <code class=""literal"">
         2006-10-19
        </code>
        .
       </p>
      </li>
     </ul>
    </div>
    <p>
     Attempting to enter a date using a mixture of ISO 8601 week-numbering fields and Gregorian date fields is nonsensical, and will cause an error. In the context of an ISO 8601 week-numbering year, the concept of a
     <span class=""quote"">
      “
      <span class=""quote"">
       month
      </span>
      ”
     </span>
     or
     <span class=""quote"">
      “
      <span class=""quote"">
       day of month
      </span>
      ”
     </span>
     has no meaning. In the context of a Gregorian year, the ISO week has no meaning.
    </p>
    <div class=""caution"">
     <h3 class=""title"">
      Caution
     </h3>
     <p>
      While
      <code class=""function"">
       to_date
      </code>
      will reject a mixture of Gregorian and ISO week-numbering date fields,
      <code class=""function"">
       to_char
      </code>
      will not, since output format specifications like
      <code class=""literal"">
       YYYY-MM-DD (IYYY-IDDD)
      </code>
      can be useful. But avoid writing something like
      <code class=""literal"">
       IYYY-MM-DD
      </code>
      ; that would yield surprising results near the start of the year. (See
      <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"" title=""9.9.1. EXTRACT, date_part"">
       Section 9.9.1
      </a>
      for more information.)
     </p>
    </div>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_timestamp
     </code>
     , millisecond (
     <code class=""literal"">
      MS
     </code>
     ) or microsecond (
     <code class=""literal"">
      US
     </code>
     ) fields are used as the seconds digits after the decimal point. For example
     <code class=""literal"">
      to_timestamp('12.3', 'SS.MS')
     </code>
     is not 3 milliseconds, but 300, because the conversion treats it as 12 + 0.3 seconds. So, for the format
     <code class=""literal"">
      SS.MS
     </code>
     , the input values
     <code class=""literal"">
      12.3
     </code>
     ,
     <code class=""literal"">
      12.30
     </code>
     , and
     <code class=""literal"">
      12.300
     </code>
     specify the same number of milliseconds. To get three milliseconds, one must write
     <code class=""literal"">
      12.003
     </code>
     , which the conversion treats as 12 + 0.003 = 12.003 seconds.
    </p>
    <p>
     Here is a more complex example:
     <code class=""literal"">
      to_timestamp('15:12:02.020.001230', 'HH24:MI:SS.MS.US')
     </code>
     is 15 hours, 12 minutes, and 2 seconds + 20 milliseconds + 1230 microseconds = 2.021230 seconds.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""function"">
      to_char(..., 'ID')
     </code>
     's day of the week numbering matches the
     <code class=""function"">
      extract(isodow from ...)
     </code>
     function, but
     <code class=""function"">
      to_char(..., 'D')
     </code>
     's does not match
     <code class=""function"">
      extract(dow from ...)
     </code>
     's day numbering.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""function"">
      to_char(interval)
     </code>
     formats
     <code class=""literal"">
      HH
     </code>
     and
     <code class=""literal"">
      HH12
     </code>
     as shown on a 12-hour clock, for example zero hours and 36 hours both output as
     <code class=""literal"">
      12
     </code>
     , while
     <code class=""literal"">
      HH24
     </code>
     outputs the full hour value, which can exceed 23 in an
     <code class=""type"">
      interval
     </code>
     value.
    </p>
   </li>
  </ul>
 </div>
 <p>
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-NUMERIC-TABLE"" title=""Table 9.29. Template Patterns for Numeric Formatting"">
   Table 9.29
  </a>
  shows the template patterns available for formatting numeric values.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-NUMERIC-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.29. Template Patterns for Numeric Formatting
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Template Patterns for Numeric Formatting"">
    <colgroup>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Pattern
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        9
       </code>
      </td>
      <td>
       digit position (can be dropped if insignificant)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        0
       </code>
      </td>
      <td>
       digit position (will not be dropped, even if insignificant)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        .
       </code>
       (period)
      </td>
      <td>
       decimal point
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        ,
       </code>
       (comma)
      </td>
      <td>
       group (thousands) separator
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        PR
       </code>
      </td>
      <td>
       negative value in angle brackets
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        S
       </code>
      </td>
      <td>
       sign anchored to number (uses locale)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        L
       </code>
      </td>
      <td>
       currency symbol (uses locale)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        D
       </code>
      </td>
      <td>
       decimal point (uses locale)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        G
       </code>
      </td>
      <td>
       group separator (uses locale)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        MI
       </code>
      </td>
      <td>
       minus sign in specified position (if number &lt; 0)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        PL
       </code>
      </td>
      <td>
       plus sign in specified position (if number &gt; 0)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        SG
       </code>
      </td>
      <td>
       plus/minus sign in specified position
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        RN
       </code>
      </td>
      <td>
       Roman numeral (input between 1 and 3999)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TH
       </code>
       or
       <code class=""literal"">
        th
       </code>
      </td>
      <td>
       ordinal number suffix
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        V
       </code>
      </td>
      <td>
       shift specified number of digits (see notes)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        EEEE
       </code>
      </td>
      <td>
       exponent for scientific notation
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Usage notes for numeric formatting:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      0
     </code>
     specifies a digit position that will always be printed, even if it contains a leading/trailing zero.
     <code class=""literal"">
      9
     </code>
     also specifies a digit position, but if it is a leading zero then it will be replaced by a space, while if it is a trailing zero and fill mode is specified then it will be deleted. (For
     <code class=""function"">
      to_number()
     </code>
     , these two pattern characters are equivalent.)
    </p>
   </li>
   <li class=""listitem"">
    <p>
     If the format provides fewer fractional digits than the number being formatted,
     <code class=""function"">
      to_char()
     </code>
     will round the number to the specified number of fractional digits.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The pattern characters
     <code class=""literal"">
      S
     </code>
     ,
     <code class=""literal"">
      L
     </code>
     ,
     <code class=""literal"">
      D
     </code>
     , and
     <code class=""literal"">
      G
     </code>
     represent the sign, currency symbol, decimal point, and thousands separator characters defined by the current locale (see
     <a class=""xref"" href=""runtime-config-client.html#GUC-LC-MONETARY"">
      lc_monetary
     </a>
     and
     <a class=""xref"" href=""runtime-config-client.html#GUC-LC-NUMERIC"">
      lc_numeric
     </a>
     ). The pattern characters period and comma represent those exact characters, with the meanings of decimal point and thousands separator, regardless of locale.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     If no explicit provision is made for a sign in
     <code class=""function"">
      to_char()
     </code>
     's pattern, one column will be reserved for the sign, and it will be anchored to (appear just left of) the number. If
     <code class=""literal"">
      S
     </code>
     appears just left of some
     <code class=""literal"">
      9
     </code>
     's, it will likewise be anchored to the number.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     A sign formatted using
     <code class=""literal"">
      SG
     </code>
     ,
     <code class=""literal"">
      PL
     </code>
     , or
     <code class=""literal"">
      MI
     </code>
     is not anchored to the number; for example,
     <code class=""literal"">
      to_char(-12, 'MI9999')
     </code>
     produces
     <code class=""literal"">
      '-  12'
     </code>
     but
     <code class=""literal"">
      to_char(-12, 'S9999')
     </code>
     produces
     <code class=""literal"">
      '  -12'
     </code>
     . (The Oracle implementation does not allow the use of
     <code class=""literal"">
      MI
     </code>
     before
     <code class=""literal"">
      9
     </code>
     , but rather requires that
     <code class=""literal"">
      9
     </code>
     precede
     <code class=""literal"">
      MI
     </code>
     .)
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      TH
     </code>
     does not convert values less than zero and does not convert fractional numbers.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      PL
     </code>
     ,
     <code class=""literal"">
      SG
     </code>
     , and
     <code class=""literal"">
      TH
     </code>
     are
     <span class=""productname"">
      PostgreSQL
     </span>
     extensions.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     In
     <code class=""function"">
      to_number
     </code>
     , if non-data template patterns such as
     <code class=""literal"">
      L
     </code>
     or
     <code class=""literal"">
      TH
     </code>
     are used, the corresponding number of input characters are skipped, whether or not they match the template pattern, unless they are data characters (that is, digits, sign, decimal point, or comma). For example,
     <code class=""literal"">
      TH
     </code>
     would skip two non-data characters.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      V
     </code>
     with
     <code class=""function"">
      to_char
     </code>
     multiplies the input values by
     <code class=""literal"">
      10^
      <em class=""replaceable"">
       <code>
        n
       </code>
      </em>
     </code>
     , where
     <em class=""replaceable"">
      <code>
       n
      </code>
     </em>
     is the number of digits following
     <code class=""literal"">
      V
     </code>
     .
     <code class=""literal"">
      V
     </code>
     with
     <code class=""function"">
      to_number
     </code>
     divides in a similar manner.
     <code class=""function"">
      to_char
     </code>
     and
     <code class=""function"">
      to_number
     </code>
     do not support the use of
     <code class=""literal"">
      V
     </code>
     combined with a decimal point (e.g.,
     <code class=""literal"">
      99.9V99
     </code>
     is not allowed).
    </p>
   </li>
   <li class=""listitem"">
    <p>
     <code class=""literal"">
      EEEE
     </code>
     (scientific notation) cannot be used in combination with any of the other formatting patterns or modifiers other than digit and decimal point patterns, and must be at the end of the format string (e.g.,
     <code class=""literal"">
      9.99EEEE
     </code>
     is a valid pattern).
    </p>
   </li>
  </ul>
 </div>
 <p>
  Certain modifiers can be applied to any template pattern to alter its behavior. For example,
  <code class=""literal"">
   FM99.99
  </code>
  is the
  <code class=""literal"">
   99.99
  </code>
  pattern with the
  <code class=""literal"">
   FM
  </code>
  modifier.
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-NUMERICMOD-TABLE"" title=""Table 9.30. Template Pattern Modifiers for Numeric Formatting"">
   Table 9.30
  </a>
  shows the modifier patterns for numeric formatting.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-NUMERICMOD-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.30. Template Pattern Modifiers for Numeric Formatting
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Template Pattern Modifiers for Numeric Formatting"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Modifier
      </th>
      <th>
       Description
      </th>
      <th>
       Example
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        FM
       </code>
       prefix
      </td>
      <td>
       fill mode (suppress trailing zeroes and padding blanks)
      </td>
      <td>
       <code class=""literal"">
        FM99.99
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        TH
       </code>
       suffix
      </td>
      <td>
       upper case ordinal number suffix
      </td>
      <td>
       <code class=""literal"">
        999TH
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        th
       </code>
       suffix
      </td>
      <td>
       lower case ordinal number suffix
      </td>
      <td>
       <code class=""literal"">
        999th
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""functions-formatting.html#FUNCTIONS-FORMATTING-EXAMPLES-TABLE"" title=""Table 9.31. to_char Examples"">
   Table 9.31
  </a>
  shows some examples of the use of the
  <code class=""function"">
   to_char
  </code>
  function.
 </p>
 <div class=""table"" id=""FUNCTIONS-FORMATTING-EXAMPLES-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.31.
    <code class=""function"">
     to_char
    </code>
    Examples
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""to_char Examples"">
    <colgroup>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Expression
      </th>
      <th>
       Result
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        to_char(current_timestamp, 'Day, DD  HH12:MI:SS')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'Tuesday  , 06  05:39:18'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(current_timestamp, 'FMDay, FMDD  HH12:MI:SS')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'Tuesday, 6  05:39:18'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(current_timestamp AT TIME ZONE 'UTC', 'YYYY-MM-DD""T""HH24:MI:SS""Z""')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '2022-12-06T05:39:18Z'
       </code>
       ,
       <acronym class=""acronym"">
        ISO
       </acronym>
       8601 extended format
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-0.1, '99.99')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '  -.10'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-0.1, 'FM9.99')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '-.1'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-0.1, 'FM90.99')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '-0.1'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(0.1, '0.9')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 0.1'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(12, '9990999.9')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '    0012.0'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(12, 'FM9990999.9')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '0012.'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, '999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, '999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '-485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, '9 9 9')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 4 8 5'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(1485, '9,999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 1,485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(1485, '9G999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 1 485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(148.5, '999.999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 148.500'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(148.5, 'FM999.999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '148.5'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(148.5, 'FM999.990')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '148.500'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(148.5, '999D999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 148,500'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(3148.5, '9G999D999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 3 148,500'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, '999S')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '485-'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, '999MI')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '485-'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, '999MI')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '485 '
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'FM999MI')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'PL999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '+485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'SG999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '+485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, 'SG999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '-485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, '9SG99')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '4-85'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(-485, '999PR')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '&lt;485&gt;'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'L999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'DM 485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'RN')
       </code>
      </td>
      <td>
       <code class=""literal"">
        '        CDLXXXV'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, 'FMRN')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'CDLXXXV'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(5.2, 'FMRN')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'V'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(482, '999th')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 482nd'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485, '""Good number:""999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'Good number: 485'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(485.8, '""Pre:""999"" Post:"" .999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        'Pre: 485 Post: .800'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(12, '99V999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 12000'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(12.4, '99V999')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 12400'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(12.45, '99V9')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 125'
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        to_char(0.0004859, '9.99EEEE')
       </code>
      </td>
      <td>
       <code class=""literal"">
        ' 4.86e-04'
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
9. Functions and Operators,9.9. Date/Time Functions and Operators,https://www.postgresql.org/docs/17/functions-datetime.html,"<div class=""sect1"" id=""FUNCTIONS-DATETIME"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.9. Date/Time Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-DATETIME"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"">
      9.9.1.
      <code class=""function"">
       EXTRACT
      </code>
      ,
      <code class=""function"">
       date_part
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-TRUNC"">
      9.9.2.
      <code class=""function"">
       date_trunc
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-BIN"">
      9.9.3.
      <code class=""function"">
       date_bin
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT"">
      9.9.4.
      <code class=""literal"">
       AT TIME ZONE and AT LOCAL
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"">
      9.9.5. Current Date/Time
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-datetime.html#FUNCTIONS-DATETIME-DELAY"">
      9.9.6. Delaying Execution
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-TABLE"" title=""Table 9.33. Date/Time Functions"">
   Table 9.33
  </a>
  shows the available functions for date/time value processing, with details appearing in the following subsections.
  <a class=""xref"" href=""functions-datetime.html#OPERATORS-DATETIME-TABLE"" title=""Table 9.32. Date/Time Operators"">
   Table 9.32
  </a>
  illustrates the behaviors of the basic arithmetic operators (
  <code class=""literal"">
   +
  </code>
  ,
  <code class=""literal"">
   *
  </code>
  , etc.). For formatting functions, refer to
  <a class=""xref"" href=""functions-formatting.html"" title=""9.8. Data Type Formatting Functions"">
   Section 9.8
  </a>
  . You should be familiar with the background information on date/time data types from
  <a class=""xref"" href=""datatype-datetime.html"" title=""8.5. Date/Time Types"">
   Section 8.5
  </a>
  .
 </p>
 <p>
  In addition, the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  are available for the date/time types. Dates and timestamps (with or without time zone) are all comparable, while times (with or without time zone) and intervals can only be compared to other values of the same data type. When comparing a timestamp without time zone to a timestamp with time zone, the former value is assumed to be given in the time zone specified by the
  <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
   TimeZone
  </a>
  configuration parameter, and is rotated to UTC for comparison to the latter value (which is already in UTC internally). Similarly, a date value is assumed to represent midnight in the
  <code class=""varname"">
   TimeZone
  </code>
  zone when comparing it to a timestamp.
 </p>
 <p>
  All the functions and operators described below that take
  <code class=""type"">
   time
  </code>
  or
  <code class=""type"">
   timestamp
  </code>
  inputs actually come in two variants: one that takes
  <code class=""type"">
   time with time zone
  </code>
  or
  <code class=""type"">
   timestamp with time zone
  </code>
  , and one that takes
  <code class=""type"">
   time without time zone
  </code>
  or
  <code class=""type"">
   timestamp without time zone
  </code>
  . For brevity, these variants are not shown separately. Also, the
  <code class=""literal"">
   +
  </code>
  and
  <code class=""literal"">
   *
  </code>
  operators come in commutative pairs (for example both
  <code class=""type"">
   date
  </code>
  <code class=""literal"">
   +
  </code>
  <code class=""type"">
   integer
  </code>
  and
  <code class=""type"">
   integer
  </code>
  <code class=""literal"">
   +
  </code>
  <code class=""type"">
   date
  </code>
  ); we show only one of each such pair.
 </p>
 <div class=""table"" id=""OPERATORS-DATETIME-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.32. Date/Time Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Date/Time Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         date
        </code>
       </p>
       <p>
        Add a number of days to a date
       </p>
       <p>
        <code class=""literal"">
         date '2001-09-28' + 7
        </code>
        →
        <code class=""returnvalue"">
         2001-10-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Add an interval to a date
       </p>
       <p>
        <code class=""literal"">
         date '2001-09-28' + interval '1 hour'
        </code>
        →
        <code class=""returnvalue"">
         2001-09-28 01:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         time
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Add a time-of-day to a date
       </p>
       <p>
        <code class=""literal"">
         date '2001-09-28' + time '03:00'
        </code>
        →
        <code class=""returnvalue"">
         2001-09-28 03:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         interval
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Add intervals
       </p>
       <p>
        <code class=""literal"">
         interval '1 day' + interval '1 hour'
        </code>
        →
        <code class=""returnvalue"">
         1 day 01:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         timestamp
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Add an interval to a timestamp
       </p>
       <p>
        <code class=""literal"">
         timestamp '2001-09-28 01:00' + interval '23 hours'
        </code>
        →
        <code class=""returnvalue"">
         2001-09-29 00:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         time
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         time
        </code>
       </p>
       <p>
        Add an interval to a time
       </p>
       <p>
        <code class=""literal"">
         time '01:00' + interval '3 hours'
        </code>
        →
        <code class=""returnvalue"">
         04:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Negate an interval
       </p>
       <p>
        <code class=""literal"">
         - interval '23 hours'
        </code>
        →
        <code class=""returnvalue"">
         -23:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         date
        </code>
        →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Subtract dates, producing the number of days elapsed
       </p>
       <p>
        <code class=""literal"">
         date '2001-10-01' - date '2001-09-28'
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         integer
        </code>
        →
        <code class=""returnvalue"">
         date
        </code>
       </p>
       <p>
        Subtract a number of days from a date
       </p>
       <p>
        <code class=""literal"">
         date '2001-10-01' - 7
        </code>
        →
        <code class=""returnvalue"">
         2001-09-24
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         date
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Subtract an interval from a date
       </p>
       <p>
        <code class=""literal"">
         date '2001-09-28' - interval '1 hour'
        </code>
        →
        <code class=""returnvalue"">
         2001-09-27 23:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         time
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         time
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Subtract times
       </p>
       <p>
        <code class=""literal"">
         time '05:00' - time '03:00'
        </code>
        →
        <code class=""returnvalue"">
         02:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         time
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         time
        </code>
       </p>
       <p>
        Subtract an interval from a time
       </p>
       <p>
        <code class=""literal"">
         time '05:00' - interval '2 hours'
        </code>
        →
        <code class=""returnvalue"">
         03:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         timestamp
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Subtract an interval from a timestamp
       </p>
       <p>
        <code class=""literal"">
         timestamp '2001-09-28 23:00' - interval '23 hours'
        </code>
        →
        <code class=""returnvalue"">
         2001-09-28 00:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         interval
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Subtract intervals
       </p>
       <p>
        <code class=""literal"">
         interval '1 day' - interval '1 hour'
        </code>
        →
        <code class=""returnvalue"">
         1 day -01:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         timestamp
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         timestamp
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Subtract timestamps (converting 24-hour intervals into days, similarly to
        <a class=""link"" href=""functions-datetime.html#FUNCTION-JUSTIFY-HOURS"">
         <code class=""function"">
          justify_hours()
         </code>
        </a>
        )
       </p>
       <p>
        <code class=""literal"">
         timestamp '2001-09-29 03:00' - timestamp '2001-07-27 12:00'
        </code>
        →
        <code class=""returnvalue"">
         63 days 15:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         interval
        </code>
        <code class=""literal"">
         *
        </code>
        <code class=""type"">
         double precision
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Multiply an interval by a scalar
       </p>
       <p>
        <code class=""literal"">
         interval '1 second' * 900
        </code>
        →
        <code class=""returnvalue"">
         00:15:00
        </code>
       </p>
       <p>
        <code class=""literal"">
         interval '1 day' * 21
        </code>
        →
        <code class=""returnvalue"">
         21 days
        </code>
       </p>
       <p>
        <code class=""literal"">
         interval '1 hour' * 3.5
        </code>
        →
        <code class=""returnvalue"">
         03:30:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         interval
        </code>
        <code class=""literal"">
         /
        </code>
        <code class=""type"">
         double precision
        </code>
        →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Divide an interval by a scalar
       </p>
       <p>
        <code class=""literal"">
         interval '1 hour' / 1.5
        </code>
        →
        <code class=""returnvalue"">
         00:40:00
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""FUNCTIONS-DATETIME-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.33. Date/Time Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Date/Time Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.1.1.1.1"" name=""id-1.5.8.15.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         age
        </code>
        (
        <code class=""type"">
         timestamp
        </code>
        ,
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Subtract arguments, producing a
        <span class=""quote"">
         “
         <span class=""quote"">
          symbolic
         </span>
         ”
        </span>
        result that uses years and months, rather than just days
       </p>
       <p>
        <code class=""literal"">
         age(timestamp '2001-04-10', timestamp '1957-06-13')
        </code>
        →
        <code class=""returnvalue"">
         43 years 9 mons 27 days
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         age
        </code>
        (
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Subtract argument from
        <code class=""function"">
         current_date
        </code>
        (at midnight)
       </p>
       <p>
        <code class=""literal"">
         age(timestamp '1957-06-13')
        </code>
        →
        <code class=""returnvalue"">
         62 years 6 mons 10 days
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.3.1.1.1"" name=""id-1.5.8.15.6.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         clock_timestamp
        </code>
        ( ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (changes during statement execution); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         clock_timestamp()
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.4.1.1.1"" name=""id-1.5.8.15.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         current_date
        </code>
        →
        <code class=""returnvalue"">
         date
        </code>
       </p>
       <p>
        Current date; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         current_date
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.5.1.1.1"" name=""id-1.5.8.15.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         current_time
        </code>
        →
        <code class=""returnvalue"">
         time with time zone
        </code>
       </p>
       <p>
        Current time of day; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         current_time
        </code>
        →
        <code class=""returnvalue"">
         14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         current_time
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         time with time zone
        </code>
       </p>
       <p>
        Current time of day, with limited precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         current_time(2)
        </code>
        →
        <code class=""returnvalue"">
         14:39:53.66-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.7.1.1.1"" name=""id-1.5.8.15.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         current_timestamp
        </code>
        →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (start of current transaction); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         current_timestamp
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         current_timestamp
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (start of current transaction), with limited precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         current_timestamp(0)
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.9.1.1.1"" name=""id-1.5.8.15.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         date_add
        </code>
        (
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        [
        <span class=""optional"">
         ,
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Add an
        <code class=""type"">
         interval
        </code>
        to a
        <code class=""type"">
         timestamp with time zone
        </code>
        , computing times of day and daylight-savings adjustments according to the time zone named by the third argument, or the current
        <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
         TimeZone
        </a>
        setting if that is omitted. The form with two arguments is equivalent to the
        <code class=""type"">
         timestamp with time zone
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         interval
        </code>
        operator.
       </p>
       <p>
        <code class=""literal"">
         date_add('2021-10-31 00:00:00+02'::timestamptz, '1 day'::interval, 'Europe/Warsaw')
        </code>
        →
        <code class=""returnvalue"">
         2021-10-31 23:00:00+00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         date_bin
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ,
        <code class=""type"">
         timestamp
        </code>
        ,
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Bin input into specified interval aligned with specified origin; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-BIN"" title=""9.9.3. date_bin"">
         Section 9.9.3
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_bin('15 minutes', timestamp '2001-02-16 20:38:40', timestamp '2001-02-16 20:05:00')
        </code>
        →
        <code class=""returnvalue"">
         2001-02-16 20:35:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.11.1.1.1"" name=""id-1.5.8.15.6.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         date_part
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Get timestamp subfield (equivalent to
        <code class=""function"">
         extract
        </code>
        ); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"" title=""9.9.1. EXTRACT, date_part"">
         Section 9.9.1
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_part('hour', timestamp '2001-02-16 20:38:40')
        </code>
        →
        <code class=""returnvalue"">
         20
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         date_part
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Get interval subfield (equivalent to
        <code class=""function"">
         extract
        </code>
        ); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"" title=""9.9.1. EXTRACT, date_part"">
         Section 9.9.1
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_part('month', interval '2 years 3 months')
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.13.1.1.1"" name=""id-1.5.8.15.6.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         date_subtract
        </code>
        (
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        [
        <span class=""optional"">
         ,
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Subtract an
        <code class=""type"">
         interval
        </code>
        from a
        <code class=""type"">
         timestamp with time zone
        </code>
        , computing times of day and daylight-savings adjustments according to the time zone named by the third argument, or the current
        <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
         TimeZone
        </a>
        setting if that is omitted. The form with two arguments is equivalent to the
        <code class=""type"">
         timestamp with time zone
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         interval
        </code>
        operator.
       </p>
       <p>
        <code class=""literal"">
         date_subtract('2021-11-01 00:00:00+01'::timestamptz, '1 day'::interval, 'Europe/Warsaw')
        </code>
        →
        <code class=""returnvalue"">
         2021-10-30 22:00:00+00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.14.1.1.1"" name=""id-1.5.8.15.6.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         date_trunc
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Truncate to specified precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-TRUNC"" title=""9.9.2. date_trunc"">
         Section 9.9.2
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_trunc('hour', timestamp '2001-02-16 20:38:40')
        </code>
        →
        <code class=""returnvalue"">
         2001-02-16 20:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         date_trunc
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Truncate to specified precision in the specified time zone; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-TRUNC"" title=""9.9.2. date_trunc"">
         Section 9.9.2
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_trunc('day', timestamptz '2001-02-16 20:38:40+00', 'Australia/Sydney')
        </code>
        →
        <code class=""returnvalue"">
         2001-02-16 13:00:00+00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         date_trunc
        </code>
        (
        <code class=""type"">
         text
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Truncate to specified precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-TRUNC"" title=""9.9.2. date_trunc"">
         Section 9.9.2
        </a>
       </p>
       <p>
        <code class=""literal"">
         date_trunc('hour', interval '2 days 3 hours 40 minutes')
        </code>
        →
        <code class=""returnvalue"">
         2 days 03:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.17.1.1.1"" name=""id-1.5.8.15.6.2.2.17.1.1.1"">
        </a>
        <code class=""function"">
         extract
        </code>
        (
        <em class=""parameter"">
         <code>
          field
         </code>
        </em>
        <code class=""literal"">
         from
        </code>
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Get timestamp subfield; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"" title=""9.9.1. EXTRACT, date_part"">
         Section 9.9.1
        </a>
       </p>
       <p>
        <code class=""literal"">
         extract(hour from timestamp '2001-02-16 20:38:40')
        </code>
        →
        <code class=""returnvalue"">
         20
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         extract
        </code>
        (
        <em class=""parameter"">
         <code>
          field
         </code>
        </em>
        <code class=""literal"">
         from
        </code>
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p>
        Get interval subfield; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-EXTRACT"" title=""9.9.1. EXTRACT, date_part"">
         Section 9.9.1
        </a>
       </p>
       <p>
        <code class=""literal"">
         extract(month from interval '2 years 3 months')
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.19.1.1.1"" name=""id-1.5.8.15.6.2.2.19.1.1.1"">
        </a>
        <code class=""function"">
         isfinite
        </code>
        (
        <code class=""type"">
         date
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test for finite date (not +/-infinity)
       </p>
       <p>
        <code class=""literal"">
         isfinite(date '2001-02-16')
        </code>
        →
        <code class=""returnvalue"">
         true
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         isfinite
        </code>
        (
        <code class=""type"">
         timestamp
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test for finite timestamp (not +/-infinity)
       </p>
       <p>
        <code class=""literal"">
         isfinite(timestamp 'infinity')
        </code>
        →
        <code class=""returnvalue"">
         false
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         isfinite
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Test for finite interval (not +/-infinity)
       </p>
       <p>
        <code class=""literal"">
         isfinite(interval '4 hours')
        </code>
        →
        <code class=""returnvalue"">
         true
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-JUSTIFY-DAYS"" name=""FUNCTION-JUSTIFY-DAYS"">
        </a>
        <code class=""function"">
         justify_days
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Adjust interval, converting 30-day time periods to months
       </p>
       <p>
        <code class=""literal"">
         justify_days(interval '1 year 65 days')
        </code>
        →
        <code class=""returnvalue"">
         1 year 2 mons 5 days
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-JUSTIFY-HOURS"" name=""FUNCTION-JUSTIFY-HOURS"">
        </a>
        <code class=""function"">
         justify_hours
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Adjust interval, converting 24-hour time periods to days
       </p>
       <p>
        <code class=""literal"">
         justify_hours(interval '50 hours 10 minutes')
        </code>
        →
        <code class=""returnvalue"">
         2 days 02:10:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.24.1.1.1"" name=""id-1.5.8.15.6.2.2.24.1.1.1"">
        </a>
        <code class=""function"">
         justify_interval
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Adjust interval using
        <code class=""function"">
         justify_days
        </code>
        and
        <code class=""function"">
         justify_hours
        </code>
        , with additional sign adjustments
       </p>
       <p>
        <code class=""literal"">
         justify_interval(interval '1 mon -1 hour')
        </code>
        →
        <code class=""returnvalue"">
         29 days 23:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.25.1.1.1"" name=""id-1.5.8.15.6.2.2.25.1.1.1"">
        </a>
        <code class=""function"">
         localtime
        </code>
        →
        <code class=""returnvalue"">
         time
        </code>
       </p>
       <p>
        Current time of day; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         localtime
        </code>
        →
        <code class=""returnvalue"">
         14:39:53.662522
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         localtime
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         time
        </code>
       </p>
       <p>
        Current time of day, with limited precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         localtime(0)
        </code>
        →
        <code class=""returnvalue"">
         14:39:53
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.27.1.1.1"" name=""id-1.5.8.15.6.2.2.27.1.1.1"">
        </a>
        <code class=""function"">
         localtimestamp
        </code>
        →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Current date and time (start of current transaction); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         localtimestamp
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         localtimestamp
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Current date and time (start of current transaction), with limited precision; see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         localtimestamp(2)
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.66
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.29.1.1.1"" name=""id-1.5.8.15.6.2.2.29.1.1.1"">
        </a>
        <code class=""function"">
         make_date
        </code>
        (
        <em class=""parameter"">
         <code>
          year
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          month
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          day
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ) →
        <code class=""returnvalue"">
         date
        </code>
       </p>
       <p>
        Create date from year, month and day fields (negative years signify BC)
       </p>
       <p>
        <code class=""literal"">
         make_date(2013, 7, 15)
        </code>
        →
        <code class=""returnvalue"">
         2013-07-15
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.30.1.1.1"" name=""id-1.5.8.15.6.2.2.30.1.1.1"">
        </a>
        <code class=""function"">
         make_interval
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           years
          </code>
         </em>
         <code class=""type"">
          int
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            months
           </code>
          </em>
          <code class=""type"">
           int
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             weeks
            </code>
           </em>
           <code class=""type"">
            int
           </code>
           [
           <span class=""optional"">
            ,
            <em class=""parameter"">
             <code>
              days
             </code>
            </em>
            <code class=""type"">
             int
            </code>
            [
            <span class=""optional"">
             ,
             <em class=""parameter"">
              <code>
               hours
              </code>
             </em>
             <code class=""type"">
              int
             </code>
             [
             <span class=""optional"">
              ,
              <em class=""parameter"">
               <code>
                mins
               </code>
              </em>
              <code class=""type"">
               int
              </code>
              [
              <span class=""optional"">
               ,
               <em class=""parameter"">
                <code>
                 secs
                </code>
               </em>
               <code class=""type"">
                double precision
               </code>
              </span>
              ]
             </span>
             ]
            </span>
            ]
           </span>
           ]
          </span>
          ]
         </span>
         ]
        </span>
        ] ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Create interval from years, months, weeks, days, hours, minutes and seconds fields, each of which can default to zero
       </p>
       <p>
        <code class=""literal"">
         make_interval(days =&gt; 10)
        </code>
        →
        <code class=""returnvalue"">
         10 days
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.31.1.1.1"" name=""id-1.5.8.15.6.2.2.31.1.1.1"">
        </a>
        <code class=""function"">
         make_time
        </code>
        (
        <em class=""parameter"">
         <code>
          hour
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          sec
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         time
        </code>
       </p>
       <p>
        Create time from hour, minute and seconds fields
       </p>
       <p>
        <code class=""literal"">
         make_time(8, 15, 23.5)
        </code>
        →
        <code class=""returnvalue"">
         08:15:23.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.32.1.1.1"" name=""id-1.5.8.15.6.2.2.32.1.1.1"">
        </a>
        <code class=""function"">
         make_timestamp
        </code>
        (
        <em class=""parameter"">
         <code>
          year
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          month
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          day
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          hour
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          sec
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp
        </code>
       </p>
       <p>
        Create timestamp from year, month, day, hour, minute and seconds fields (negative years signify BC)
       </p>
       <p>
        <code class=""literal"">
         make_timestamp(2013, 7, 15, 8, 15, 23.5)
        </code>
        →
        <code class=""returnvalue"">
         2013-07-15 08:15:23.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.33.1.1.1"" name=""id-1.5.8.15.6.2.2.33.1.1.1"">
        </a>
        <code class=""function"">
         make_timestamptz
        </code>
        (
        <em class=""parameter"">
         <code>
          year
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          month
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          day
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          hour
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          min
         </code>
        </em>
        <code class=""type"">
         int
        </code>
        ,
        <em class=""parameter"">
         <code>
          sec
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           timezone
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Create timestamp with time zone from year, month, day, hour, minute and seconds fields (negative years signify BC). If
        <em class=""parameter"">
         <code>
          timezone
         </code>
        </em>
        is not specified, the current time zone is used; the examples assume the session time zone is
        <code class=""literal"">
         Europe/London
        </code>
       </p>
       <p>
        <code class=""literal"">
         make_timestamptz(2013, 7, 15, 8, 15, 23.5)
        </code>
        →
        <code class=""returnvalue"">
         2013-07-15 08:15:23.5+01
        </code>
       </p>
       <p>
        <code class=""literal"">
         make_timestamptz(2013, 7, 15, 8, 15, 23.5, 'America/New_York')
        </code>
        →
        <code class=""returnvalue"">
         2013-07-15 13:15:23.5+01
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.34.1.1.1"" name=""id-1.5.8.15.6.2.2.34.1.1.1"">
        </a>
        <code class=""function"">
         now
        </code>
        ( ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (start of current transaction); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         now()
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.35.1.1.1"" name=""id-1.5.8.15.6.2.2.35.1.1.1"">
        </a>
        <code class=""function"">
         statement_timestamp
        </code>
        ( ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (start of current statement); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         statement_timestamp()
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.36.1.1.1"" name=""id-1.5.8.15.6.2.2.36.1.1.1"">
        </a>
        <code class=""function"">
         timeofday
        </code>
        ( ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Current date and time (like
        <code class=""function"">
         clock_timestamp
        </code>
        , but as a
        <code class=""type"">
         text
        </code>
        string); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         timeofday()
        </code>
        →
        <code class=""returnvalue"">
         Mon Dec 23 14:39:53.662522 2019 EST
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.37.1.1.1"" name=""id-1.5.8.15.6.2.2.37.1.1.1"">
        </a>
        <code class=""function"">
         transaction_timestamp
        </code>
        ( ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Current date and time (start of current transaction); see
        <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-CURRENT"" title=""9.9.5. Current Date/Time"">
         Section 9.9.5
        </a>
       </p>
       <p>
        <code class=""literal"">
         transaction_timestamp()
        </code>
        →
        <code class=""returnvalue"">
         2019-12-23 14:39:53.662522-05
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.15.6.2.2.38.1.1.1"" name=""id-1.5.8.15.6.2.2.38.1.1.1"">
        </a>
        <code class=""function"">
         to_timestamp
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         timestamp with time zone
        </code>
       </p>
       <p>
        Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp with time zone
       </p>
       <p>
        <code class=""literal"">
         to_timestamp(1284352323)
        </code>
        →
        <code class=""returnvalue"">
         2010-09-13 04:32:03+00
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""indexterm"" id=""id-1.5.8.15.7.1"" name=""id-1.5.8.15.7.1"">
  </a>
  In addition to these functions, the SQL
  <code class=""literal"">
   OVERLAPS
  </code>
  operator is supported:
 </p>
 <pre class=""synopsis"">
(<em class=""replaceable""><code>start1</code></em>, <em class=""replaceable""><code>end1</code></em>) OVERLAPS (<em class=""replaceable""><code>start2</code></em>, <em class=""replaceable""><code>end2</code></em>)
(<em class=""replaceable""><code>start1</code></em>, <em class=""replaceable""><code>length1</code></em>) OVERLAPS (<em class=""replaceable""><code>start2</code></em>, <em class=""replaceable""><code>length2</code></em>)
</pre>
 <p>
  This expression yields true when two time periods (defined by their endpoints) overlap, false when they do not overlap. The endpoints can be specified as pairs of dates, times, or time stamps; or as a date, time, or time stamp followed by an interval. When a pair of values is provided, either the start or the end can be written first;
  <code class=""literal"">
   OVERLAPS
  </code>
  automatically takes the earlier value of the pair as the start. Each time period is considered to represent the half-open interval
  <em class=""replaceable"">
   <code>
    start
   </code>
  </em>
  <code class=""literal"">
   &lt;=
  </code>
  <em class=""replaceable"">
   <code>
    time
   </code>
  </em>
  <code class=""literal"">
   &lt;
  </code>
  <em class=""replaceable"">
   <code>
    end
   </code>
  </em>
  , unless
  <em class=""replaceable"">
   <code>
    start
   </code>
  </em>
  and
  <em class=""replaceable"">
   <code>
    end
   </code>
  </em>
  are equal in which case it represents that single time instant. This means for instance that two time periods with only an endpoint in common do not overlap.
 </p>
 <pre class=""screen"">
SELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">true</code>
SELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS
       (DATE '2001-10-30', DATE '2002-10-30');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">false</code>
SELECT (DATE '2001-10-29', DATE '2001-10-30') OVERLAPS
       (DATE '2001-10-30', DATE '2001-10-31');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">false</code>
SELECT (DATE '2001-10-30', DATE '2001-10-30') OVERLAPS
       (DATE '2001-10-30', DATE '2001-10-31');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">true</code>
</pre>
 <p>
  When adding an
  <code class=""type"">
   interval
  </code>
  value to (or subtracting an
  <code class=""type"">
   interval
  </code>
  value from) a
  <code class=""type"">
   timestamp
  </code>
  or
  <code class=""type"">
   timestamp with time zone
  </code>
  value, the months, days, and microseconds fields of the
  <code class=""type"">
   interval
  </code>
  value are handled in turn. First, a nonzero months field advances or decrements the date of the timestamp by the indicated number of months, keeping the day of month the same unless it would be past the end of the new month, in which case the last day of that month is used. (For example, March 31 plus 1 month becomes April 30, but March 31 plus 2 months becomes May 31.) Then the days field advances or decrements the date of the timestamp by the indicated number of days. In both these steps the local time of day is kept the same. Finally, if there is a nonzero microseconds field, it is added or subtracted literally. When doing arithmetic on a
  <code class=""type"">
   timestamp with time zone
  </code>
  value in a time zone that recognizes DST, this means that adding or subtracting (say)
  <code class=""literal"">
   interval '1 day'
  </code>
  does not necessarily have the same result as adding or subtracting
  <code class=""literal"">
   interval '24 hours'
  </code>
  . For example, with the session time zone set to
  <code class=""literal"">
   America/Denver
  </code>
  :
 </p>
 <pre class=""screen"">
SELECT timestamp with time zone '2005-04-02 12:00:00-07' + interval '1 day';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2005-04-03 12:00:00-06</code>
SELECT timestamp with time zone '2005-04-02 12:00:00-07' + interval '24 hours';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2005-04-03 13:00:00-06</code>
</pre>
 <p>
  This happens because an hour was skipped due to a change in daylight saving time at
  <code class=""literal"">
   2005-04-03 02:00:00
  </code>
  in time zone
  <code class=""literal"">
   America/Denver
  </code>
  .
 </p>
 <p>
  Note there can be ambiguity in the
  <code class=""literal"">
   months
  </code>
  field returned by
  <code class=""function"">
   age
  </code>
  because different months have different numbers of days.
  <span class=""productname"">
   PostgreSQL
  </span>
  's approach uses the month from the earlier of the two dates when calculating partial months. For example,
  <code class=""literal"">
   age('2004-06-01', '2004-04-30')
  </code>
  uses April to yield
  <code class=""literal"">
   1 mon 1 day
  </code>
  , while using May would yield
  <code class=""literal"">
   1 mon 2 days
  </code>
  because May has 31 days, while April has only 30.
 </p>
 <p>
  Subtraction of dates and timestamps can also be complex. One conceptually simple way to perform subtraction is to convert each value to a number of seconds using
  <code class=""literal"">
   EXTRACT(EPOCH FROM ...)
  </code>
  , then subtract the results; this produces the number of
  <span class=""emphasis"">
   <em>
    seconds
   </em>
  </span>
  between the two values. This will adjust for the number of days in each month, timezone changes, and daylight saving time adjustments. Subtraction of date or timestamp values with the
  <span class=""quote"">
   “
   <span class=""quote"">
    <code class=""literal"">
     -
    </code>
   </span>
   ”
  </span>
  operator returns the number of days (24-hours) and hours/minutes/seconds between the values, making the same adjustments. The
  <code class=""function"">
   age
  </code>
  function returns years, months, days, and hours/minutes/seconds, performing field-by-field subtraction and then adjusting for negative field values. The following queries illustrate the differences in these approaches. The sample results were produced with
  <code class=""literal"">
   timezone = 'US/Eastern'
  </code>
  ; there is a daylight saving time change between the two dates used:
 </p>
 <pre class=""screen"">
SELECT EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -
       EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">10537200.000000</code>
SELECT (EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -
        EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00'))
        / 60 / 60 / 24;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">121.9583333333333333</code>
SELECT timestamptz '2013-07-01 12:00:00' - timestamptz '2013-03-01 12:00:00';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">121 days 23:00:00</code>
SELECT age(timestamptz '2013-07-01 12:00:00', timestamptz '2013-03-01 12:00:00');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">4 mons</code>
</pre>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-EXTRACT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.1.
      <code class=""function"">
       EXTRACT
      </code>
      ,
      <code class=""function"">
       date_part
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-EXTRACT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.13.2"" name=""id-1.5.8.15.13.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.13.3"" name=""id-1.5.8.15.13.3"">
  </a>
  <pre class=""synopsis"">
EXTRACT(<em class=""replaceable""><code>field</code></em> FROM <em class=""replaceable""><code>source</code></em>)
</pre>
  <p>
   The
   <code class=""function"">
    extract
   </code>
   function retrieves subfields such as year or hour from date/time values.
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   must be a value expression of type
   <code class=""type"">
    timestamp
   </code>
   ,
   <code class=""type"">
    date
   </code>
   ,
   <code class=""type"">
    time
   </code>
   , or
   <code class=""type"">
    interval
   </code>
   . (Timestamps and times can be with or without time zone.)
   <em class=""replaceable"">
    <code>
     field
    </code>
   </em>
   is an identifier or string that selects what field to extract from the source value. Not all fields are valid for every input data type; for example, fields smaller than a day cannot be extracted from a
   <code class=""type"">
    date
   </code>
   , while fields of a day or more cannot be extracted from a
   <code class=""type"">
    time
   </code>
   . The
   <code class=""function"">
    extract
   </code>
   function returns values of type
   <code class=""type"">
    numeric
   </code>
   .
  </p>
  <p>
   The following are valid field names:
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <code class=""literal"">
       century
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The century; for
      <code class=""type"">
       interval
      </code>
      values, the year field divided by 100
     </p>
     <pre class=""screen"">
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">20</code>
SELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">21</code>
SELECT EXTRACT(CENTURY FROM DATE '0001-01-01 AD');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">1</code>
SELECT EXTRACT(CENTURY FROM DATE '0001-12-31 BC');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">-1</code>
SELECT EXTRACT(CENTURY FROM INTERVAL '2001 years');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">20</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       day
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The day of the month (1–31); for
      <code class=""type"">
       interval
      </code>
      values, the number of days
     </p>
     <pre class=""screen"">
SELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">16</code>
SELECT EXTRACT(DAY FROM INTERVAL '40 days 1 minute');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">40</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       decade
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The year field divided by 10
     </p>
     <pre class=""screen"">
SELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">200</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       dow
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The day of the week as Sunday (
      <code class=""literal"">
       0
      </code>
      ) to Saturday (
      <code class=""literal"">
       6
      </code>
      )
     </p>
     <pre class=""screen"">
SELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">5</code>
</pre>
     <p>
      Note that
      <code class=""function"">
       extract
      </code>
      's day of the week numbering differs from that of the
      <code class=""function"">
       to_char(..., 'D')
      </code>
      function.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       doy
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The day of the year (1–365/366)
     </p>
     <pre class=""screen"">
SELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">47</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       epoch
      </code>
     </span>
    </dt>
    <dd>
     <p>
      For
      <code class=""type"">
       timestamp with time zone
      </code>
      values, the number of seconds since 1970-01-01 00:00:00 UTC (negative for timestamps before that); for
      <code class=""type"">
       date
      </code>
      and
      <code class=""type"">
       timestamp
      </code>
      values, the nominal number of seconds since 1970-01-01 00:00:00, without regard to timezone or daylight-savings rules; for
      <code class=""type"">
       interval
      </code>
      values, the total number of seconds in the interval
     </p>
     <pre class=""screen"">
SELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40.12-08');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">982384720.120000</code>
SELECT EXTRACT(EPOCH FROM TIMESTAMP '2001-02-16 20:38:40.12');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">982355920.120000</code>
SELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">442800.000000</code>
</pre>
     <p>
      You can convert an epoch value back to a
      <code class=""type"">
       timestamp with time zone
      </code>
      with
      <code class=""function"">
       to_timestamp
      </code>
      :
     </p>
     <pre class=""screen"">
SELECT to_timestamp(982384720.12);
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-17 04:38:40.12+00</code>
</pre>
     <p>
      Beware that applying
      <code class=""function"">
       to_timestamp
      </code>
      to an epoch extracted from a
      <code class=""type"">
       date
      </code>
      or
      <code class=""type"">
       timestamp
      </code>
      value could produce a misleading result: the result will effectively assume that the original value had been given in UTC, which might not be the case.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       hour
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The hour field (0–23 in timestamps, unrestricted in intervals)
     </p>
     <pre class=""screen"">
SELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">20</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       isodow
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The day of the week as Monday (
      <code class=""literal"">
       1
      </code>
      ) to Sunday (
      <code class=""literal"">
       7
      </code>
      )
     </p>
     <pre class=""screen"">
SELECT EXTRACT(ISODOW FROM TIMESTAMP '2001-02-18 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">7</code>
</pre>
     <p>
      This is identical to
      <code class=""literal"">
       dow
      </code>
      except for Sunday. This matches the
      <acronym class=""acronym"">
       ISO
      </acronym>
      8601 day of the week numbering.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       isoyear
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The
      <acronym class=""acronym"">
       ISO
      </acronym>
      8601 week-numbering year that the date falls in
     </p>
     <pre class=""screen"">
SELECT EXTRACT(ISOYEAR FROM DATE '2006-01-01');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2005</code>
SELECT EXTRACT(ISOYEAR FROM DATE '2006-01-02');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2006</code>
</pre>
     <p>
      Each
      <acronym class=""acronym"">
       ISO
      </acronym>
      8601 week-numbering year begins with the Monday of the week containing the 4th of January, so in early January or late December the
      <acronym class=""acronym"">
       ISO
      </acronym>
      year may be different from the Gregorian year. See the
      <code class=""literal"">
       week
      </code>
      field for more information.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       julian
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The
      <em class=""firstterm"">
       Julian Date
      </em>
      corresponding to the date or timestamp. Timestamps that are not local midnight result in a fractional value. See
      <a class=""xref"" href=""datetime-julian-dates.html"" title=""B.7. Julian Dates"">
       Section B.7
      </a>
      for more information.
     </p>
     <pre class=""screen"">
SELECT EXTRACT(JULIAN FROM DATE '2006-01-01');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2453737</code>
SELECT EXTRACT(JULIAN FROM TIMESTAMP '2006-01-01 12:00');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2453737.50000000000000000000</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       microseconds
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The seconds field, including fractional parts, multiplied by 1 000 000; note that this includes full seconds
     </p>
     <pre class=""screen"">
SELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">28500000</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       millennium
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The millennium; for
      <code class=""type"">
       interval
      </code>
      values, the year field divided by 1000
     </p>
     <pre class=""screen"">
SELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">3</code>
SELECT EXTRACT(MILLENNIUM FROM INTERVAL '2001 years');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2</code>
</pre>
     <p>
      Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       milliseconds
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The seconds field, including fractional parts, multiplied by 1000. Note that this includes full seconds.
     </p>
     <pre class=""screen"">
SELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">28500.000</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       minute
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The minutes field (0–59)
     </p>
     <pre class=""screen"">
SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">38</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       month
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The number of the month within the year (1–12); for
      <code class=""type"">
       interval
      </code>
      values, the number of months modulo 12 (0–11)
     </p>
     <pre class=""screen"">
SELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2</code>
SELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">3</code>
SELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">1</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       quarter
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The quarter of the year (1–4) that the date is in
     </p>
     <pre class=""screen"">
SELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">1</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       second
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The seconds field, including any fractional seconds
     </p>
     <pre class=""screen"">
SELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">40.000000</code>
SELECT EXTRACT(SECOND FROM TIME '17:12:28.5');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">28.500000</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       timezone
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The time zone offset from UTC, measured in seconds. Positive values correspond to time zones east of UTC, negative values to zones west of UTC. (Technically,
      <span class=""productname"">
       PostgreSQL
      </span>
      does not use UTC because leap seconds are not handled.)
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       timezone_hour
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The hour component of the time zone offset
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       timezone_minute
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The minute component of the time zone offset
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       week
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The number of the
      <acronym class=""acronym"">
       ISO
      </acronym>
      8601 week-numbering week of the year. By definition, ISO weeks start on Mondays and the first week of a year contains January 4 of that year. In other words, the first Thursday of a year is in week 1 of that year.
     </p>
     <p>
      In the ISO week-numbering system, it is possible for early-January dates to be part of the 52nd or 53rd week of the previous year, and for late-December dates to be part of the first week of the next year. For example,
      <code class=""literal"">
       2005-01-01
      </code>
      is part of the 53rd week of year 2004, and
      <code class=""literal"">
       2006-01-01
      </code>
      is part of the 52nd week of year 2005, while
      <code class=""literal"">
       2012-12-31
      </code>
      is part of the first week of 2013. It's recommended to use the
      <code class=""literal"">
       isoyear
      </code>
      field together with
      <code class=""literal"">
       week
      </code>
      to get consistent results.
     </p>
     <pre class=""screen"">
SELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">7</code>
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       year
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The year field. Keep in mind there is no
      <code class=""literal"">
       0 AD
      </code>
      , so subtracting
      <code class=""literal"">
       BC
      </code>
      years from
      <code class=""literal"">
       AD
      </code>
      years should be done with care.
     </p>
     <pre class=""screen"">
SELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001</code>
</pre>
    </dd>
   </dl>
  </div>
  <p>
   When processing an
   <code class=""type"">
    interval
   </code>
   value, the
   <code class=""function"">
    extract
   </code>
   function produces field values that match the interpretation used by the interval output function. This can produce surprising results if one starts with a non-normalized interval representation, for example:
  </p>
  <pre class=""screen"">
SELECT INTERVAL '80 minutes';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">01:20:00</code>
SELECT EXTRACT(MINUTES FROM INTERVAL '80 minutes');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">20</code>
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    When the input value is +/-Infinity,
    <code class=""function"">
     extract
    </code>
    returns +/-Infinity for monotonically-increasing fields (
    <code class=""literal"">
     epoch
    </code>
    ,
    <code class=""literal"">
     julian
    </code>
    ,
    <code class=""literal"">
     year
    </code>
    ,
    <code class=""literal"">
     isoyear
    </code>
    ,
    <code class=""literal"">
     decade
    </code>
    ,
    <code class=""literal"">
     century
    </code>
    , and
    <code class=""literal"">
     millennium
    </code>
    for
    <code class=""type"">
     timestamp
    </code>
    inputs;
    <code class=""literal"">
     epoch
    </code>
    ,
    <code class=""literal"">
     hour
    </code>
    ,
    <code class=""literal"">
     day
    </code>
    ,
    <code class=""literal"">
     year
    </code>
    ,
    <code class=""literal"">
     decade
    </code>
    ,
    <code class=""literal"">
     century
    </code>
    , and
    <code class=""literal"">
     millennium
    </code>
    for
    <code class=""type"">
     interval
    </code>
    inputs). For other fields, NULL is returned.
    <span class=""productname"">
     PostgreSQL
    </span>
    versions before 9.6 returned zero for all cases of infinite input.
   </p>
  </div>
  <p>
   The
   <code class=""function"">
    extract
   </code>
   function is primarily intended for computational processing. For formatting date/time values for display, see
   <a class=""xref"" href=""functions-formatting.html"" title=""9.8. Data Type Formatting Functions"">
    Section 9.8
   </a>
   .
  </p>
  <p>
   The
   <code class=""function"">
    date_part
   </code>
   function is modeled on the traditional
   <span class=""productname"">
    Ingres
   </span>
   equivalent to the
   <acronym class=""acronym"">
    SQL
   </acronym>
   -standard function
   <code class=""function"">
    extract
   </code>
   :
  </p>
  <pre class=""synopsis"">
date_part('<em class=""replaceable""><code>field</code></em>', <em class=""replaceable""><code>source</code></em>)
</pre>
  <p>
   Note that here the
   <em class=""replaceable"">
    <code>
     field
    </code>
   </em>
   parameter needs to be a string value, not a name. The valid field names for
   <code class=""function"">
    date_part
   </code>
   are the same as for
   <code class=""function"">
    extract
   </code>
   . For historical reasons, the
   <code class=""function"">
    date_part
   </code>
   function returns values of type
   <code class=""type"">
    double precision
   </code>
   . This can result in a loss of precision in certain uses. Using
   <code class=""function"">
    extract
   </code>
   is recommended instead.
  </p>
  <pre class=""screen"">
SELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">16</code>
SELECT date_part('hour', INTERVAL '4 hours 3 minutes');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">4</code>
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-TRUNC"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.2.
      <code class=""function"">
       date_trunc
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-TRUNC"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.14.2"" name=""id-1.5.8.15.14.2"">
  </a>
  <p>
   The function
   <code class=""function"">
    date_trunc
   </code>
   is conceptually similar to the
   <code class=""function"">
    trunc
   </code>
   function for numbers.
  </p>
  <pre class=""synopsis"">
date_trunc(<em class=""replaceable""><code>field</code></em>, <em class=""replaceable""><code>source</code></em> [, <em class=""replaceable""><code>time_zone</code></em> ])
</pre>
  <p>
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   is a value expression of type
   <code class=""type"">
    timestamp
   </code>
   ,
   <code class=""type"">
    timestamp with time zone
   </code>
   , or
   <code class=""type"">
    interval
   </code>
   . (Values of type
   <code class=""type"">
    date
   </code>
   and
   <code class=""type"">
    time
   </code>
   are cast automatically to
   <code class=""type"">
    timestamp
   </code>
   or
   <code class=""type"">
    interval
   </code>
   , respectively.)
   <em class=""replaceable"">
    <code>
     field
    </code>
   </em>
   selects to which precision to truncate the input value. The return value is likewise of type
   <code class=""type"">
    timestamp
   </code>
   ,
   <code class=""type"">
    timestamp with time zone
   </code>
   , or
   <code class=""type"">
    interval
   </code>
   , and it has all fields that are less significant than the selected one set to zero (or one, for day and month).
  </p>
  <p>
   Valid values for
   <em class=""replaceable"">
    <code>
     field
    </code>
   </em>
   are:
  </p>
  <table border=""0"" class=""simplelist"" summary=""Simple list"">
   <tr>
    <td>
     <code class=""literal"">
      microseconds
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      milliseconds
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      second
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      minute
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      hour
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      day
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      week
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      month
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      quarter
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      year
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      decade
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      century
     </code>
    </td>
   </tr>
   <tr>
    <td>
     <code class=""literal"">
      millennium
     </code>
    </td>
   </tr>
  </table>
  <p>
   When the input value is of type
   <code class=""type"">
    timestamp with time zone
   </code>
   , the truncation is performed with respect to a particular time zone; for example, truncation to
   <code class=""literal"">
    day
   </code>
   produces a value that is midnight in that zone. By default, truncation is done with respect to the current
   <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
    TimeZone
   </a>
   setting, but the optional
   <em class=""replaceable"">
    <code>
     time_zone
    </code>
   </em>
   argument can be provided to specify a different time zone. The time zone name can be specified in any of the ways described in
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-TIMEZONES"" title=""8.5.3. Time Zones"">
    Section 8.5.3
   </a>
   .
  </p>
  <p>
   A time zone cannot be specified when processing
   <code class=""type"">
    timestamp without time zone
   </code>
   or
   <code class=""type"">
    interval
   </code>
   inputs. These are always taken at face value.
  </p>
  <p>
   Examples (assuming the local time zone is
   <code class=""literal"">
    America/New_York
   </code>
   ):
  </p>
  <pre class=""screen"">
SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 20:00:00</code>
SELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-01-01 00:00:00</code>
SELECT date_trunc('day', TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40+00');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 00:00:00-05</code>
SELECT date_trunc('day', TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40+00', 'Australia/Sydney');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 08:00:00-05</code>
SELECT date_trunc('hour', INTERVAL '3 days 02:47:33');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">3 days 02:00:00</code>
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-BIN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.3.
      <code class=""function"">
       date_bin
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-BIN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.15.2"" name=""id-1.5.8.15.15.2"">
  </a>
  <p>
   The function
   <code class=""function"">
    date_bin
   </code>
   <span class=""quote"">
    “
    <span class=""quote"">
     bins
    </span>
    ”
   </span>
   the input timestamp into the specified interval (the
   <em class=""firstterm"">
    stride
   </em>
   ) aligned with a specified origin.
  </p>
  <pre class=""synopsis"">
date_bin(<em class=""replaceable""><code>stride</code></em>, <em class=""replaceable""><code>source</code></em>, <em class=""replaceable""><code>origin</code></em>)
</pre>
  <p>
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   is a value expression of type
   <code class=""type"">
    timestamp
   </code>
   or
   <code class=""type"">
    timestamp with time zone
   </code>
   . (Values of type
   <code class=""type"">
    date
   </code>
   are cast automatically to
   <code class=""type"">
    timestamp
   </code>
   .)
   <em class=""replaceable"">
    <code>
     stride
    </code>
   </em>
   is a value expression of type
   <code class=""type"">
    interval
   </code>
   . The return value is likewise of type
   <code class=""type"">
    timestamp
   </code>
   or
   <code class=""type"">
    timestamp with time zone
   </code>
   , and it marks the beginning of the bin into which the
   <em class=""replaceable"">
    <code>
     source
    </code>
   </em>
   is placed.
  </p>
  <p>
   Examples:
  </p>
  <pre class=""screen"">
SELECT date_bin('15 minutes', TIMESTAMP '2020-02-11 15:44:17', TIMESTAMP '2001-01-01');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2020-02-11 15:30:00</code>
SELECT date_bin('15 minutes', TIMESTAMP '2020-02-11 15:44:17', TIMESTAMP '2001-01-01 00:02:30');
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2020-02-11 15:32:30</code>
</pre>
  <p>
   In the case of full units (1 minute, 1 hour, etc.), it gives the same result as the analogous
   <code class=""function"">
    date_trunc
   </code>
   call, but the difference is that
   <code class=""function"">
    date_bin
   </code>
   can truncate to an arbitrary interval.
  </p>
  <p>
   The
   <em class=""parameter"">
    <code>
     stride
    </code>
   </em>
   interval must be greater than zero and cannot contain units of month or larger.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-ZONECONVERT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.4.
      <code class=""literal"">
       AT TIME ZONE and AT LOCAL
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-ZONECONVERT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.16.2"" name=""id-1.5.8.15.16.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.16.3"" name=""id-1.5.8.15.16.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.16.4"" name=""id-1.5.8.15.16.4"">
  </a>
  <p>
   The
   <code class=""literal"">
    AT TIME ZONE
   </code>
   operator converts time stamp
   <span class=""emphasis"">
    <em>
     without
    </em>
   </span>
   time zone to/from time stamp
   <span class=""emphasis"">
    <em>
     with
    </em>
   </span>
   time zone, and
   <code class=""type"">
    time with time zone
   </code>
   values to different time zones.
   <a class=""xref"" href=""functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT-TABLE"" title=""Table 9.34. AT TIME ZONE and AT LOCAL Variants"">
    Table 9.34
   </a>
   shows its variants.
  </p>
  <div class=""table"" id=""FUNCTIONS-DATETIME-ZONECONVERT-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.34.
     <code class=""literal"">
      AT TIME ZONE
     </code>
     and
     <code class=""literal"">
      AT LOCAL
     </code>
     Variants
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""AT TIME ZONE and AT LOCAL Variants"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Operator
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          timestamp without time zone
         </code>
         <code class=""literal"">
          AT TIME ZONE
         </code>
         <em class=""replaceable"">
          <code>
           zone
          </code>
         </em>
         →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Converts given time stamp
         <span class=""emphasis"">
          <em>
           without
          </em>
         </span>
         time zone to time stamp
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         time zone, assuming the given value is in the named time zone.
        </p>
        <p>
         <code class=""literal"">
          timestamp '2001-02-16 20:38:40' at time zone 'America/Denver'
         </code>
         →
         <code class=""returnvalue"">
          2001-02-17 03:38:40+00
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          timestamp without time zone
         </code>
         <code class=""literal"">
          AT LOCAL
         </code>
         →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Converts given time stamp
         <span class=""emphasis"">
          <em>
           without
          </em>
         </span>
         time zone to time stamp
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         the session's
         <code class=""varname"">
          TimeZone
         </code>
         value as time zone.
        </p>
        <p>
         <code class=""literal"">
          timestamp '2001-02-16 20:38:40' at local
         </code>
         →
         <code class=""returnvalue"">
          2001-02-17 03:38:40+00
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          timestamp with time zone
         </code>
         <code class=""literal"">
          AT TIME ZONE
         </code>
         <em class=""replaceable"">
          <code>
           zone
          </code>
         </em>
         →
         <code class=""returnvalue"">
          timestamp without time zone
         </code>
        </p>
        <p>
         Converts given time stamp
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         time zone to time stamp
         <span class=""emphasis"">
          <em>
           without
          </em>
         </span>
         time zone, as the time would appear in that zone.
        </p>
        <p>
         <code class=""literal"">
          timestamp with time zone '2001-02-16 20:38:40-05' at time zone 'America/Denver'
         </code>
         →
         <code class=""returnvalue"">
          2001-02-16 18:38:40
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          timestamp with time zone
         </code>
         <code class=""literal"">
          AT LOCAL
         </code>
         →
         <code class=""returnvalue"">
          timestamp without time zone
         </code>
        </p>
        <p>
         Converts given time stamp
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         time zone to time stamp
         <span class=""emphasis"">
          <em>
           without
          </em>
         </span>
         time zone, as the time would appear with the session's
         <code class=""varname"">
          TimeZone
         </code>
         value as time zone.
        </p>
        <p>
         <code class=""literal"">
          timestamp with time zone '2001-02-16 20:38:40-05' at local
         </code>
         →
         <code class=""returnvalue"">
          2001-02-16 18:38:40
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          time with time zone
         </code>
         <code class=""literal"">
          AT TIME ZONE
         </code>
         <em class=""replaceable"">
          <code>
           zone
          </code>
         </em>
         →
         <code class=""returnvalue"">
          time with time zone
         </code>
        </p>
        <p>
         Converts given time
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         time zone to a new time zone. Since no date is supplied, this uses the currently active UTC offset for the named destination zone.
        </p>
        <p>
         <code class=""literal"">
          time with time zone '05:34:17-05' at time zone 'UTC'
         </code>
         →
         <code class=""returnvalue"">
          10:34:17+00
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          time with time zone
         </code>
         <code class=""literal"">
          AT LOCAL
         </code>
         →
         <code class=""returnvalue"">
          time with time zone
         </code>
        </p>
        <p>
         Converts given time
         <span class=""emphasis"">
          <em>
           with
          </em>
         </span>
         time zone to a new time zone. Since no date is supplied, this uses the currently active UTC offset for the session's
         <code class=""varname"">
          TimeZone
         </code>
         value.
        </p>
        <p>
         Assuming the session's
         <code class=""varname"">
          TimeZone
         </code>
         is set to
         <code class=""literal"">
          UTC
         </code>
         :
        </p>
        <p>
         <code class=""literal"">
          time with time zone '05:34:17-05' at local
         </code>
         →
         <code class=""returnvalue"">
          10:34:17+00
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   In these expressions, the desired time zone
   <em class=""replaceable"">
    <code>
     zone
    </code>
   </em>
   can be specified either as a text value (e.g.,
   <code class=""literal"">
    'America/Los_Angeles'
   </code>
   ) or as an interval (e.g.,
   <code class=""literal"">
    INTERVAL '-08:00'
   </code>
   ). In the text case, a time zone name can be specified in any of the ways described in
   <a class=""xref"" href=""datatype-datetime.html#DATATYPE-TIMEZONES"" title=""8.5.3. Time Zones"">
    Section 8.5.3
   </a>
   . The interval case is only useful for zones that have fixed offsets from UTC, so it is not very common in practice.
  </p>
  <p>
   The syntax
   <code class=""literal"">
    AT LOCAL
   </code>
   may be used as shorthand for
   <code class=""literal"">
    AT TIME ZONE
    <em class=""replaceable"">
     <code>
      local
     </code>
    </em>
   </code>
   , where
   <em class=""replaceable"">
    <code>
     local
    </code>
   </em>
   is the session's
   <code class=""varname"">
    TimeZone
   </code>
   value.
  </p>
  <p>
   Examples (assuming the current
   <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
    TimeZone
   </a>
   setting is
   <code class=""literal"">
    America/Los_Angeles
   </code>
   ):
  </p>
  <pre class=""screen"">
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'America/Denver';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 19:38:40-08</code>
SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'America/Denver';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 18:38:40</code>
SELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'Asia/Tokyo' AT TIME ZONE 'America/Chicago';
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 05:38:40</code>
SELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT LOCAL;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2001-02-16 17:38:40</code>
SELECT TIME WITH TIME ZONE '20:38:40-05' AT LOCAL;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">17:38:40</code>
</pre>
  <p>
   The first example adds a time zone to a value that lacks it, and displays the value using the current
   <code class=""varname"">
    TimeZone
   </code>
   setting. The second example shifts the time stamp with time zone value to the specified time zone, and returns the value without a time zone. This allows storage and display of values different from the current
   <code class=""varname"">
    TimeZone
   </code>
   setting. The third example converts Tokyo time to Chicago time. The fourth example shifts the time stamp with time zone value to the time zone currently specified by the
   <code class=""varname"">
    TimeZone
   </code>
   setting and returns the value without a time zone.
  </p>
  <p>
   The fifth example is a cautionary tale. Due to the fact that there is no date associated with the input value, the conversion is made using the current date of the session. Therefore, this static example may show a wrong result depending on the time of the year it is viewed because
   <code class=""literal"">
    'America/Los_Angeles'
   </code>
   observes Daylight Savings Time.
  </p>
  <p>
   The function
   <code class=""literal"">
    <code class=""function"">
     timezone
    </code>
    (
    <em class=""replaceable"">
     <code>
      zone
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      timestamp
     </code>
    </em>
    )
   </code>
   is equivalent to the SQL-conforming construct
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      timestamp
     </code>
    </em>
    AT TIME ZONE
    <em class=""replaceable"">
     <code>
      zone
     </code>
    </em>
   </code>
   .
  </p>
  <p>
   The function
   <code class=""literal"">
    <code class=""function"">
     timezone
    </code>
    (
    <em class=""replaceable"">
     <code>
      zone
     </code>
    </em>
    ,
    <em class=""replaceable"">
     <code>
      time
     </code>
    </em>
    )
   </code>
   is equivalent to the SQL-conforming construct
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      time
     </code>
    </em>
    AT TIME ZONE
    <em class=""replaceable"">
     <code>
      zone
     </code>
    </em>
   </code>
   .
  </p>
  <p>
   The function
   <code class=""literal"">
    <code class=""function"">
     timezone
    </code>
    (
    <em class=""replaceable"">
     <code>
      timestamp
     </code>
    </em>
    )
   </code>
   is equivalent to the SQL-conforming construct
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      timestamp
     </code>
    </em>
    AT LOCAL
   </code>
   .
  </p>
  <p>
   The function
   <code class=""literal"">
    <code class=""function"">
     timezone
    </code>
    (
    <em class=""replaceable"">
     <code>
      time
     </code>
    </em>
    )
   </code>
   is equivalent to the SQL-conforming construct
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      time
     </code>
    </em>
    AT LOCAL
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-CURRENT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.5. Current Date/Time
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-CURRENT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.17.2"" name=""id-1.5.8.15.17.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.17.3"" name=""id-1.5.8.15.17.3"">
  </a>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   provides a number of functions that return values related to the current date and time. These SQL-standard functions all return values based on the start time of the current transaction:
  </p>
  <pre class=""synopsis"">
CURRENT_DATE
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_TIME(<em class=""replaceable""><code>precision</code></em>)
CURRENT_TIMESTAMP(<em class=""replaceable""><code>precision</code></em>)
LOCALTIME
LOCALTIMESTAMP
LOCALTIME(<em class=""replaceable""><code>precision</code></em>)
LOCALTIMESTAMP(<em class=""replaceable""><code>precision</code></em>)
</pre>
  <p>
   <code class=""function"">
    CURRENT_TIME
   </code>
   and
   <code class=""function"">
    CURRENT_TIMESTAMP
   </code>
   deliver values with time zone;
   <code class=""function"">
    LOCALTIME
   </code>
   and
   <code class=""function"">
    LOCALTIMESTAMP
   </code>
   deliver values without time zone.
  </p>
  <p>
   <code class=""function"">
    CURRENT_TIME
   </code>
   ,
   <code class=""function"">
    CURRENT_TIMESTAMP
   </code>
   ,
   <code class=""function"">
    LOCALTIME
   </code>
   , and
   <code class=""function"">
    LOCALTIMESTAMP
   </code>
   can optionally take a precision parameter, which causes the result to be rounded to that many fractional digits in the seconds field. Without a precision parameter, the result is given to the full available precision.
  </p>
  <p>
   Some examples:
  </p>
  <pre class=""screen"">
SELECT CURRENT_TIME;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">14:39:53.662522-05</code>
SELECT CURRENT_DATE;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2019-12-23</code>
SELECT CURRENT_TIMESTAMP;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2019-12-23 14:39:53.662522-05</code>
SELECT CURRENT_TIMESTAMP(2);
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2019-12-23 14:39:53.66-05</code>
SELECT LOCALTIMESTAMP;
<em class=""lineannotation""><span class=""lineannotation"">Result: </span></em><code class=""computeroutput"">2019-12-23 14:39:53.662522</code>
</pre>
  <p>
   Since these functions return the start time of the current transaction, their values do not change during the transaction. This is considered a feature: the intent is to allow a single transaction to have a consistent notion of the
   <span class=""quote"">
    “
    <span class=""quote"">
     current
    </span>
    ”
   </span>
   time, so that multiple modifications within the same transaction bear the same time stamp.
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Other database systems might advance these values more frequently.
   </p>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   also provides functions that return the start time of the current statement, as well as the actual current time at the instant the function is called. The complete list of non-SQL-standard time functions is:
  </p>
  <pre class=""synopsis"">
transaction_timestamp()
statement_timestamp()
clock_timestamp()
timeofday()
now()
</pre>
  <p>
   <code class=""function"">
    transaction_timestamp()
   </code>
   is equivalent to
   <code class=""function"">
    CURRENT_TIMESTAMP
   </code>
   , but is named to clearly reflect what it returns.
   <code class=""function"">
    statement_timestamp()
   </code>
   returns the start time of the current statement (more specifically, the time of receipt of the latest command message from the client).
   <code class=""function"">
    statement_timestamp()
   </code>
   and
   <code class=""function"">
    transaction_timestamp()
   </code>
   return the same value during the first command of a transaction, but might differ during subsequent commands.
   <code class=""function"">
    clock_timestamp()
   </code>
   returns the actual current time, and therefore its value changes even within a single SQL command.
   <code class=""function"">
    timeofday()
   </code>
   is a historical
   <span class=""productname"">
    PostgreSQL
   </span>
   function. Like
   <code class=""function"">
    clock_timestamp()
   </code>
   , it returns the actual current time, but as a formatted
   <code class=""type"">
    text
   </code>
   string rather than a
   <code class=""type"">
    timestamp with time zone
   </code>
   value.
   <code class=""function"">
    now()
   </code>
   is a traditional
   <span class=""productname"">
    PostgreSQL
   </span>
   equivalent to
   <code class=""function"">
    transaction_timestamp()
   </code>
   .
  </p>
  <p>
   All the date/time data types also accept the special literal value
   <code class=""literal"">
    now
   </code>
   to specify the current date and time (again, interpreted as the transaction start time). Thus, the following three all return the same result:
  </p>
  <pre class=""programlisting"">
SELECT CURRENT_TIMESTAMP;
SELECT now();
SELECT TIMESTAMP 'now';  -- but see tip below
</pre>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Do not use the third form when specifying a value to be evaluated later, for example in a
    <code class=""literal"">
     DEFAULT
    </code>
    clause for a table column. The system will convert
    <code class=""literal"">
     now
    </code>
    to a
    <code class=""type"">
     timestamp
    </code>
    as soon as the constant is parsed, so that when the default value is needed, the time of the table creation would be used! The first two forms will not be evaluated until the default value is used, because they are function calls. Thus they will give the desired behavior of defaulting to the time of row insertion. (See also
    <a class=""xref"" href=""datatype-datetime.html#DATATYPE-DATETIME-SPECIAL-VALUES"" title=""8.5.1.4. Special Values"">
     Section 8.5.1.4
    </a>
    .)
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-DATETIME-DELAY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.9.6. Delaying Execution
      <a class=""id_link"" href=""#FUNCTIONS-DATETIME-DELAY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.15.18.2"" name=""id-1.5.8.15.18.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.18.3"" name=""id-1.5.8.15.18.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.18.4"" name=""id-1.5.8.15.18.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.18.5"" name=""id-1.5.8.15.18.5"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.15.18.6"" name=""id-1.5.8.15.18.6"">
  </a>
  <p>
   The following functions are available to delay execution of the server process:
  </p>
  <pre class=""synopsis"">
pg_sleep ( <code class=""type"">double precision</code> )
pg_sleep_for ( <code class=""type"">interval</code> )
pg_sleep_until ( <code class=""type"">timestamp with time zone</code> )
</pre>
  <p>
   <code class=""function"">
    pg_sleep
   </code>
   makes the current session's process sleep until the given number of seconds have elapsed. Fractional-second delays can be specified.
   <code class=""function"">
    pg_sleep_for
   </code>
   is a convenience function to allow the sleep time to be specified as an
   <code class=""type"">
    interval
   </code>
   .
   <code class=""function"">
    pg_sleep_until
   </code>
   is a convenience function for when a specific wake-up time is desired. For example:
  </p>
  <pre class=""programlisting"">
SELECT pg_sleep(1.5);
SELECT pg_sleep_for('5 minutes');
SELECT pg_sleep_until('tomorrow 03:00');
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The effective resolution of the sleep interval is platform-specific; 0.01 seconds is a common value. The sleep delay will be at least as long as specified. It might be longer depending on factors such as server load. In particular,
    <code class=""function"">
     pg_sleep_until
    </code>
    is not guaranteed to wake up exactly at the specified time, but it will not wake up any earlier.
   </p>
  </div>
  <div class=""warning"">
   <h3 class=""title"">
    Warning
   </h3>
   <p>
    Make sure that your session does not hold more locks than necessary when calling
    <code class=""function"">
     pg_sleep
    </code>
    or its variants. Otherwise other sessions might have to wait for your sleeping process, slowing down the entire system.
   </p>
  </div>
 </div>
</div>
"
9. Functions and Operators,9.10. Enum Support Functions,https://www.postgresql.org/docs/17/functions-enum.html,"<div class=""sect1"" id=""FUNCTIONS-ENUM"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.10. Enum Support Functions
     <a class=""id_link"" href=""#FUNCTIONS-ENUM"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  For enum types (described in
  <a class=""xref"" href=""datatype-enum.html"" title=""8.7. Enumerated Types"">
   Section 8.7
  </a>
  ), there are several functions that allow cleaner programming without hard-coding particular values of an enum type. These are listed in
  <a class=""xref"" href=""functions-enum.html#FUNCTIONS-ENUM-TABLE"" title=""Table 9.35. Enum Support Functions"">
   Table 9.35
  </a>
  . The examples assume an enum type created as:
 </p>
 <pre class=""programlisting"">
CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');
</pre>
 <div class=""table"" id=""FUNCTIONS-ENUM-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.35. Enum Support Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Enum Support Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.16.3.2.2.1.1.1.1"" name=""id-1.5.8.16.3.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         enum_first
        </code>
        (
        <code class=""type"">
         anyenum
        </code>
        ) →
        <code class=""returnvalue"">
         anyenum
        </code>
       </p>
       <p>
        Returns the first value of the input enum type.
       </p>
       <p>
        <code class=""literal"">
         enum_first(null::rainbow)
        </code>
        →
        <code class=""returnvalue"">
         red
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.16.3.2.2.2.1.1.1"" name=""id-1.5.8.16.3.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         enum_last
        </code>
        (
        <code class=""type"">
         anyenum
        </code>
        ) →
        <code class=""returnvalue"">
         anyenum
        </code>
       </p>
       <p>
        Returns the last value of the input enum type.
       </p>
       <p>
        <code class=""literal"">
         enum_last(null::rainbow)
        </code>
        →
        <code class=""returnvalue"">
         purple
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.16.3.2.2.3.1.1.1"" name=""id-1.5.8.16.3.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         enum_range
        </code>
        (
        <code class=""type"">
         anyenum
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Returns all values of the input enum type in an ordered array.
       </p>
       <p>
        <code class=""literal"">
         enum_range(null::rainbow)
        </code>
        →
        <code class=""returnvalue"">
         {red,orange,yellow,​green,blue,purple}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         enum_range
        </code>
        (
        <code class=""type"">
         anyenum
        </code>
        ,
        <code class=""type"">
         anyenum
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type.
       </p>
       <p>
        <code class=""literal"">
         enum_range('orange'::rainbow, 'green'::rainbow)
        </code>
        →
        <code class=""returnvalue"">
         {orange,yellow,green}
        </code>
       </p>
       <p>
        <code class=""literal"">
         enum_range(NULL, 'green'::rainbow)
        </code>
        →
        <code class=""returnvalue"">
         {red,orange,​yellow,green}
        </code>
       </p>
       <p>
        <code class=""literal"">
         enum_range('orange'::rainbow, NULL)
        </code>
        →
        <code class=""returnvalue"">
         {orange,yellow,green,​blue,purple}
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Notice that except for the two-argument form of
  <code class=""function"">
   enum_range
  </code>
  , these functions disregard the specific value passed to them; they care only about its declared data type. Either null or a specific value of the type can be passed, with the same result. It is more common to apply these functions to a table column or function argument than to a hardwired type name as used in the examples.
 </p>
</div>
"
9. Functions and Operators,9.11. Geometric Functions and Operators,https://www.postgresql.org/docs/17/functions-geometry.html,"<div class=""sect1"" id=""FUNCTIONS-GEOMETRY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.11. Geometric Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-GEOMETRY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  The geometric types
  <code class=""type"">
   point
  </code>
  ,
  <code class=""type"">
   box
  </code>
  ,
  <code class=""type"">
   lseg
  </code>
  ,
  <code class=""type"">
   line
  </code>
  ,
  <code class=""type"">
   path
  </code>
  ,
  <code class=""type"">
   polygon
  </code>
  , and
  <code class=""type"">
   circle
  </code>
  have a large set of native support functions and operators, shown in
  <a class=""xref"" href=""functions-geometry.html#FUNCTIONS-GEOMETRY-OP-TABLE"" title=""Table 9.36. Geometric Operators"">
   Table 9.36
  </a>
  ,
  <a class=""xref"" href=""functions-geometry.html#FUNCTIONS-GEOMETRY-FUNC-TABLE"" title=""Table 9.37. Geometric Functions"">
   Table 9.37
  </a>
  , and
  <a class=""xref"" href=""functions-geometry.html#FUNCTIONS-GEOMETRY-CONV-TABLE"" title=""Table 9.38. Geometric Type Conversion Functions"">
   Table 9.38
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-GEOMETRY-OP-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.36. Geometric Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Geometric Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           geometric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Adds the coordinates of the second
        <code class=""type"">
         point
        </code>
        to those of each point of the first argument, thus performing translation. Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(1,1),(0,0)' + point '(2,0)'
        </code>
        →
        <code class=""returnvalue"">
         (3,1),(2,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         path
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         path
        </code>
        →
        <code class=""returnvalue"">
         path
        </code>
       </p>
       <p>
        Concatenates two open paths (returns NULL if either path is closed).
       </p>
       <p>
        <code class=""literal"">
         path '[(0,0),(1,1)]' + path '[(2,2),(3,3),(4,4)]'
        </code>
        →
        <code class=""returnvalue"">
         [(0,0),(1,1),(2,2),(3,3),(4,4)]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           geometric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Subtracts the coordinates of the second
        <code class=""type"">
         point
        </code>
        from those of each point of the first argument, thus performing translation. Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(1,1),(0,0)' - point '(2,0)'
        </code>
        →
        <code class=""returnvalue"">
         (-1,1),(-2,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         *
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           geometric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Multiplies each point of the first argument by the second
        <code class=""type"">
         point
        </code>
        (treating a point as being a complex number represented by real and imaginary parts, and performing standard complex multiplication). If one interprets the second
        <code class=""type"">
         point
        </code>
        as a vector, this is equivalent to scaling the object's size and distance from the origin by the length of the vector, and rotating it counterclockwise around the origin by the vector's angle from the
        <em class=""replaceable"">
         <code>
          x
         </code>
        </em>
        axis. Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <a class=""footnote"" href=""#ftn.FUNCTIONS-GEOMETRY-ROTATION-FN"">
         <sup class=""footnote"" id=""FUNCTIONS-GEOMETRY-ROTATION-FN"">
          [a]
         </sup>
        </a>
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         path '((0,0),(1,0),(1,1))' * point '(3.0,0)'
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(3,0),(3,3))
        </code>
       </p>
       <p>
        <code class=""literal"">
         path '((0,0),(1,0),(1,1))' * point(cosd(45), sind(45))
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),​(0.7071067811865475,0.7071067811865475),​(0,1.414213562373095))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         /
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           geometric_type
          </code>
         </em>
        </code>
       </p>
       <p>
        Divides each point of the first argument by the second
        <code class=""type"">
         point
        </code>
        (treating a point as being a complex number represented by real and imaginary parts, and performing standard complex division). If one interprets the second
        <code class=""type"">
         point
        </code>
        as a vector, this is equivalent to scaling the object's size and distance from the origin down by the length of the vector, and rotating it clockwise around the origin by the vector's angle from the
        <em class=""replaceable"">
         <code>
          x
         </code>
        </em>
        axis. Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <a class=""footnoteref"" href=""functions-geometry.html#ftn.FUNCTIONS-GEOMETRY-ROTATION-FN"">
         <sup class=""footnoteref"">
          [a]
         </sup>
        </a>
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         path '((0,0),(1,0),(1,1))' / point '(2.0,0)'
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(0.5,0),(0.5,0.5))
        </code>
       </p>
       <p>
        <code class=""literal"">
         path '((0,0),(1,0),(1,1))' / point(cosd(45), sind(45))
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),​(0.7071067811865476,-0.7071067811865476),​(1.4142135623730951,0))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         @-@
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the total length. Available for
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         path
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         @-@ path '[(0,0),(1,0),(1,1)]'
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         @@
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes the center point. Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         @@ box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         (1,1)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         #
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of points. Available for
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         # path '((1,0),(0,1),(-1,0))'
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         #
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes the point of intersection, or NULL if there is none. Available for
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         line
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         lseg '[(0,0),(1,1)]' # lseg '[(1,0),(0,1)]'
        </code>
        →
        <code class=""returnvalue"">
         (0.5,0.5)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         box
        </code>
        <code class=""literal"">
         #
        </code>
        <code class=""type"">
         box
        </code>
        →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Computes the intersection of two boxes, or NULL if there is none.
       </p>
       <p>
        <code class=""literal"">
         box '(2,2),(-1,-1)' # box '(1,1),(-2,-2)'
        </code>
        →
        <code class=""returnvalue"">
         (1,1),(-1,-1)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         ##
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes the closest point to the first object on the second object. Available for these pairs of types: (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ), (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ), (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         line
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ), (
        <code class=""type"">
         line
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         point '(0,0)' ## lseg '[(2,0),(0,2)]'
        </code>
        →
        <code class=""returnvalue"">
         (1,1)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &lt;-&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the distance between the objects. Available for all seven geometric types, for all combinations of
        <code class=""type"">
         point
        </code>
        with another geometric type, and for these additional pairs of types: (
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         line
        </code>
        ), (
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        ) (and the commutator cases).
       </p>
       <p>
        <code class=""literal"">
         circle '&lt;(0,0),1&gt;' &lt;-&gt; circle '&lt;(5,0),1&gt;'
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         @&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first object contain second? Available for these pairs of types: (
        <code class=""literal"">
         box
        </code>
        ,
        <code class=""literal"">
         point
        </code>
        ), (
        <code class=""literal"">
         box
        </code>
        ,
        <code class=""literal"">
         box
        </code>
        ), (
        <code class=""literal"">
         path
        </code>
        ,
        <code class=""literal"">
         point
        </code>
        ), (
        <code class=""literal"">
         polygon
        </code>
        ,
        <code class=""literal"">
         point
        </code>
        ), (
        <code class=""literal"">
         polygon
        </code>
        ,
        <code class=""literal"">
         polygon
        </code>
        ), (
        <code class=""literal"">
         circle
        </code>
        ,
        <code class=""literal"">
         point
        </code>
        ), (
        <code class=""literal"">
         circle
        </code>
        ,
        <code class=""literal"">
         circle
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         circle '&lt;(0,0),2&gt;' @&gt; point '(1,1)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &lt;@
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object contained in or on second? Available for these pairs of types: (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         box
        </code>
        ), (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         lseg
        </code>
        ), (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         line
        </code>
        ), (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         path
        </code>
        ), (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         polygon
        </code>
        ), (
        <code class=""literal"">
         point
        </code>
        ,
        <code class=""literal"">
         circle
        </code>
        ), (
        <code class=""literal"">
         box
        </code>
        ,
        <code class=""literal"">
         box
        </code>
        ), (
        <code class=""literal"">
         lseg
        </code>
        ,
        <code class=""literal"">
         box
        </code>
        ), (
        <code class=""literal"">
         lseg
        </code>
        ,
        <code class=""literal"">
         line
        </code>
        ), (
        <code class=""literal"">
         polygon
        </code>
        ,
        <code class=""literal"">
         polygon
        </code>
        ), (
        <code class=""literal"">
         circle
        </code>
        ,
        <code class=""literal"">
         circle
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         point '(1,1)' &lt;@ circle '&lt;(0,0),2&gt;'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Do these objects overlap? (One point in common makes this true.) Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(1,1),(0,0)' &amp;&amp; box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object strictly left of second? Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         circle '&lt;(0,0),1&gt;' &lt;&lt; circle '&lt;(5,0),1&gt;'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object strictly right of second? Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         circle '&lt;(5,0),1&gt;' &gt;&gt; circle '&lt;(0,0),1&gt;'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &amp;&lt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first object not extend to the right of second? Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(1,1),(0,0)' &amp;&lt; box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &amp;&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first object not extend to the left of second? Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(3,3),(0,0)' &amp;&gt; box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &lt;&lt;|
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object strictly below second? Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(3,3),(0,0)' &lt;&lt;| box '(5,5),(3,4)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         |&gt;&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object strictly above second? Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(5,5),(3,4)' |&gt;&gt; box '(3,3),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         &amp;&lt;|
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first object not extend above second? Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(1,1),(0,0)' &amp;&lt;| box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         |&amp;&gt;
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first object not extend below second? Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         box '(3,3),(0,0)' |&amp;&gt; box '(2,2),(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         box
        </code>
        <code class=""literal"">
         &lt;^
        </code>
        <code class=""type"">
         box
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object below second (allows edges to touch)?
       </p>
       <p>
        <code class=""literal"">
         box '((1,1),(0,0))' &lt;^ box '((2,2),(1,1))'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         box
        </code>
        <code class=""literal"">
         &gt;^
        </code>
        <code class=""type"">
         box
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first object above second (allows edges to touch)?
       </p>
       <p>
        <code class=""literal"">
         box '((2,2),(1,1))' &gt;^ box '((1,1),(0,0))'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         ?#
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Do these objects intersect? Available for these pairs of types: (
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         lseg
        </code>
        ), (
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         line
        </code>
        ), (
        <code class=""type"">
         line
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ), (
        <code class=""type"">
         line
        </code>
        ,
        <code class=""type"">
         line
        </code>
        ), (
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         path
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         lseg '[(-1,0),(1,0)]' ?# box '(2,2),(-2,-2)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ?-
        </code>
        <code class=""type"">
         line
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""literal"">
         ?-
        </code>
        <code class=""type"">
         lseg
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is line horizontal?
       </p>
       <p>
        <code class=""literal"">
         ?- lseg '[(-1,0),(1,0)]'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         point
        </code>
        <code class=""literal"">
         ?-
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are points horizontally aligned (that is, have same y coordinate)?
       </p>
       <p>
        <code class=""literal"">
         point '(1,0)' ?- point '(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ?|
        </code>
        <code class=""type"">
         line
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""literal"">
         ?|
        </code>
        <code class=""type"">
         lseg
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is line vertical?
       </p>
       <p>
        <code class=""literal"">
         ?| lseg '[(-1,0),(1,0)]'
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         point
        </code>
        <code class=""literal"">
         ?|
        </code>
        <code class=""type"">
         point
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are points vertically aligned (that is, have same x coordinate)?
       </p>
       <p>
        <code class=""literal"">
         point '(0,1)' ?| point '(0,0)'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         line
        </code>
        <code class=""literal"">
         ?-|
        </code>
        <code class=""type"">
         line
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""type"">
         lseg
        </code>
        <code class=""literal"">
         ?-|
        </code>
        <code class=""type"">
         lseg
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are lines perpendicular?
       </p>
       <p>
        <code class=""literal"">
         lseg '[(0,0),(0,1)]' ?-| lseg '[(0,0),(1,0)]'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         line
        </code>
        <code class=""literal"">
         ?||
        </code>
        <code class=""type"">
         line
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""type"">
         lseg
        </code>
        <code class=""literal"">
         ?||
        </code>
        <code class=""type"">
         lseg
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are lines parallel?
       </p>
       <p>
        <code class=""literal"">
         lseg '[(-1,0),(1,0)]' ?|| lseg '[(-1,2),(1,2)]'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        <code class=""literal"">
         ~=
        </code>
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are these objects the same? Available for
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         polygon '((0,0),(1,1))' ~= polygon '((1,1),(0,0))'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
    </tbody>
    <tbody class=""footnotes"">
     <tr>
      <td colspan=""1"">
       <div class=""footnote"" id=""ftn.FUNCTIONS-GEOMETRY-ROTATION-FN"">
        <p>
         <a class=""para"" href=""#FUNCTIONS-GEOMETRY-ROTATION-FN"">
          <sup class=""para"">
           [a]
          </sup>
         </a>
         <span class=""quote"">
          “
          <span class=""quote"">
           Rotating
          </span>
          ”
         </span>
         a box with these operators only moves its corner points: the box is still considered to have sides parallel to the axes. Hence the box's size is not preserved, as a true rotation would do.
        </p>
       </div>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""caution"">
  <h3 class=""title"">
   Caution
  </h3>
  <p>
   Note that the
   <span class=""quote"">
    “
    <span class=""quote"">
     same as
    </span>
    ”
   </span>
   operator,
   <code class=""literal"">
    ~=
   </code>
   , represents the usual notion of equality for the
   <code class=""type"">
    point
   </code>
   ,
   <code class=""type"">
    box
   </code>
   ,
   <code class=""type"">
    polygon
   </code>
   , and
   <code class=""type"">
    circle
   </code>
   types. Some of the geometric types also have an
   <code class=""literal"">
    =
   </code>
   operator, but
   <code class=""literal"">
    =
   </code>
   compares for equal
   <span class=""emphasis"">
    <em>
     areas
    </em>
   </span>
   only. The other scalar comparison operators (
   <code class=""literal"">
    &lt;=
   </code>
   and so on), where available for these types, likewise compare areas.
  </p>
 </div>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Before
   <span class=""productname"">
    PostgreSQL
   </span>
   14, the point is strictly below/above comparison operators
   <code class=""type"">
    point
   </code>
   <code class=""literal"">
    &lt;&lt;|
   </code>
   <code class=""type"">
    point
   </code>
   and
   <code class=""type"">
    point
   </code>
   <code class=""literal"">
    |&gt;&gt;
   </code>
   <code class=""type"">
    point
   </code>
   were respectively called
   <code class=""literal"">
    &lt;^
   </code>
   and
   <code class=""literal"">
    &gt;^
   </code>
   . These names are still available, but are deprecated and will eventually be removed.
  </p>
 </div>
 <div class=""table"" id=""FUNCTIONS-GEOMETRY-FUNC-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.37. Geometric Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Geometric Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.1.1.1.1"" name=""id-1.5.8.17.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         area
        </code>
        (
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes area. Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        . A
        <code class=""type"">
         path
        </code>
        input must be closed, else NULL is returned. Also, if the
        <code class=""type"">
         path
        </code>
        is self-intersecting, the result may be meaningless.
       </p>
       <p>
        <code class=""literal"">
         area(box '(2,2),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.2.1.1.1"" name=""id-1.5.8.17.6.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         center
        </code>
        (
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes center point. Available for
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         center(box '(1,2),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         (0.5,1)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.3.1.1.1"" name=""id-1.5.8.17.6.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         diagonal
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         lseg
        </code>
       </p>
       <p>
        Extracts box's diagonal as a line segment (same as
        <code class=""function"">
         lseg(box)
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         diagonal(box '(1,2),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         [(1,2),(0,0)]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.4.1.1.1"" name=""id-1.5.8.17.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         diameter
        </code>
        (
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes diameter of circle.
       </p>
       <p>
        <code class=""literal"">
         diameter(circle '&lt;(0,0),2&gt;')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.5.1.1.1"" name=""id-1.5.8.17.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         height
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes vertical size of box.
       </p>
       <p>
        <code class=""literal"">
         height(box '(1,2),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.6.1.1.1"" name=""id-1.5.8.17.6.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         isclosed
        </code>
        (
        <code class=""type"">
         path
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is path closed?
       </p>
       <p>
        <code class=""literal"">
         isclosed(path '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.7.1.1.1"" name=""id-1.5.8.17.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         isopen
        </code>
        (
        <code class=""type"">
         path
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is path open?
       </p>
       <p>
        <code class=""literal"">
         isopen(path '[(0,0),(1,1),(2,0)]')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.8.1.1.1"" name=""id-1.5.8.17.6.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         length
        </code>
        (
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the total length. Available for
        <code class=""type"">
         lseg
        </code>
        ,
        <code class=""type"">
         path
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         length(path '((-1,0),(1,0))')
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.9.1.1.1"" name=""id-1.5.8.17.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         npoints
        </code>
        (
        <em class=""replaceable"">
         <code>
          geometric_type
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of points. Available for
        <code class=""type"">
         path
        </code>
        ,
        <code class=""type"">
         polygon
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         npoints(path '[(0,0),(1,1),(2,0)]')
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.10.1.1.1"" name=""id-1.5.8.17.6.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         pclose
        </code>
        (
        <code class=""type"">
         path
        </code>
        ) →
        <code class=""returnvalue"">
         path
        </code>
       </p>
       <p>
        Converts path to closed form.
       </p>
       <p>
        <code class=""literal"">
         pclose(path '[(0,0),(1,1),(2,0)]')
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(1,1),(2,0))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.11.1.1.1"" name=""id-1.5.8.17.6.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         popen
        </code>
        (
        <code class=""type"">
         path
        </code>
        ) →
        <code class=""returnvalue"">
         path
        </code>
       </p>
       <p>
        Converts path to open form.
       </p>
       <p>
        <code class=""literal"">
         popen(path '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         [(0,0),(1,1),(2,0)]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.12.1.1.1"" name=""id-1.5.8.17.6.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         radius
        </code>
        (
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes radius of circle.
       </p>
       <p>
        <code class=""literal"">
         radius(circle '&lt;(0,0),2&gt;')
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.13.1.1.1"" name=""id-1.5.8.17.6.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         slope
        </code>
        (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         point
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes slope of a line drawn through the two points.
       </p>
       <p>
        <code class=""literal"">
         slope(point '(0,0)', point '(2,1)')
        </code>
        →
        <code class=""returnvalue"">
         0.5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.6.2.2.14.1.1.1"" name=""id-1.5.8.17.6.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         width
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes horizontal size of box.
       </p>
       <p>
        <code class=""literal"">
         width(box '(1,2),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         1
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""FUNCTIONS-GEOMETRY-CONV-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.38. Geometric Type Conversion Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Geometric Type Conversion Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.1.1.1.1"" name=""id-1.5.8.17.7.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         box
        </code>
        (
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Computes box inscribed within the circle.
       </p>
       <p>
        <code class=""literal"">
         box(circle '&lt;(0,0),2&gt;')
        </code>
        →
        <code class=""returnvalue"">
         (1.414213562373095,1.414213562373095),​(-1.414213562373095,-1.414213562373095)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         box
        </code>
        (
        <code class=""type"">
         point
        </code>
        ) →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Converts point to empty box.
       </p>
       <p>
        <code class=""literal"">
         box(point '(1,0)')
        </code>
        →
        <code class=""returnvalue"">
         (1,0),(1,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         box
        </code>
        (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         point
        </code>
        ) →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Converts any two corner points to box.
       </p>
       <p>
        <code class=""literal"">
         box(point '(0,1)', point '(1,0)')
        </code>
        →
        <code class=""returnvalue"">
         (1,1),(0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         box
        </code>
        (
        <code class=""type"">
         polygon
        </code>
        ) →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Computes bounding box of polygon.
       </p>
       <p>
        <code class=""literal"">
         box(polygon '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         (2,1),(0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.5.1.1.1"" name=""id-1.5.8.17.7.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         bound_box
        </code>
        (
        <code class=""type"">
         box
        </code>
        ,
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         box
        </code>
       </p>
       <p>
        Computes bounding box of two boxes.
       </p>
       <p>
        <code class=""literal"">
         bound_box(box '(1,1),(0,0)', box '(4,4),(3,3)')
        </code>
        →
        <code class=""returnvalue"">
         (4,4),(0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.6.1.1.1"" name=""id-1.5.8.17.7.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         circle
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         circle
        </code>
       </p>
       <p>
        Computes smallest circle enclosing box.
       </p>
       <p>
        <code class=""literal"">
         circle(box '(1,1),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         &lt;(0.5,0.5),0.7071067811865476&gt;
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         circle
        </code>
        (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         circle
        </code>
       </p>
       <p>
        Constructs circle from center and radius.
       </p>
       <p>
        <code class=""literal"">
         circle(point '(0,0)', 2.0)
        </code>
        →
        <code class=""returnvalue"">
         &lt;(0,0),2&gt;
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         circle
        </code>
        (
        <code class=""type"">
         polygon
        </code>
        ) →
        <code class=""returnvalue"">
         circle
        </code>
       </p>
       <p>
        Converts polygon to circle. The circle's center is the mean of the positions of the polygon's points, and the radius is the average distance of the polygon's points from that center.
       </p>
       <p>
        <code class=""literal"">
         circle(polygon '((0,0),(1,3),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         &lt;(1,1),1.6094757082487299&gt;
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.9.1.1.1"" name=""id-1.5.8.17.7.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         line
        </code>
        (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         point
        </code>
        ) →
        <code class=""returnvalue"">
         line
        </code>
       </p>
       <p>
        Converts two points to the line through them.
       </p>
       <p>
        <code class=""literal"">
         line(point '(-1,0)', point '(1,0)')
        </code>
        →
        <code class=""returnvalue"">
         {0,-1,0}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.10.1.1.1"" name=""id-1.5.8.17.7.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         lseg
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         lseg
        </code>
       </p>
       <p>
        Extracts box's diagonal as a line segment.
       </p>
       <p>
        <code class=""literal"">
         lseg(box '(1,0),(-1,0)')
        </code>
        →
        <code class=""returnvalue"">
         [(1,0),(-1,0)]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         lseg
        </code>
        (
        <code class=""type"">
         point
        </code>
        ,
        <code class=""type"">
         point
        </code>
        ) →
        <code class=""returnvalue"">
         lseg
        </code>
       </p>
       <p>
        Constructs line segment from two endpoints.
       </p>
       <p>
        <code class=""literal"">
         lseg(point '(-1,0)', point '(1,0)')
        </code>
        →
        <code class=""returnvalue"">
         [(-1,0),(1,0)]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.12.1.1.1"" name=""id-1.5.8.17.7.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         path
        </code>
        (
        <code class=""type"">
         polygon
        </code>
        ) →
        <code class=""returnvalue"">
         path
        </code>
       </p>
       <p>
        Converts polygon to a closed path with the same list of points.
       </p>
       <p>
        <code class=""literal"">
         path(polygon '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(1,1),(2,0))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.13.1.1.1"" name=""id-1.5.8.17.7.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         point
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ,
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Constructs point from its coordinates.
       </p>
       <p>
        <code class=""literal"">
         point(23.4, -44.5)
        </code>
        →
        <code class=""returnvalue"">
         (23.4,-44.5)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         point
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes center of box.
       </p>
       <p>
        <code class=""literal"">
         point(box '(1,0),(-1,0)')
        </code>
        →
        <code class=""returnvalue"">
         (0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         point
        </code>
        (
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes center of circle.
       </p>
       <p>
        <code class=""literal"">
         point(circle '&lt;(0,0),2&gt;')
        </code>
        →
        <code class=""returnvalue"">
         (0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         point
        </code>
        (
        <code class=""type"">
         lseg
        </code>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes center of line segment.
       </p>
       <p>
        <code class=""literal"">
         point(lseg '[(-1,0),(1,0)]')
        </code>
        →
        <code class=""returnvalue"">
         (0,0)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         point
        </code>
        (
        <code class=""type"">
         polygon
        </code>
        ) →
        <code class=""returnvalue"">
         point
        </code>
       </p>
       <p>
        Computes center of polygon (the mean of the positions of the polygon's points).
       </p>
       <p>
        <code class=""literal"">
         point(polygon '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         (1,0.3333333333333333)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.17.7.2.2.18.1.1.1"" name=""id-1.5.8.17.7.2.2.18.1.1.1"">
        </a>
        <code class=""function"">
         polygon
        </code>
        (
        <code class=""type"">
         box
        </code>
        ) →
        <code class=""returnvalue"">
         polygon
        </code>
       </p>
       <p>
        Converts box to a 4-point polygon.
       </p>
       <p>
        <code class=""literal"">
         polygon(box '(1,1),(0,0)')
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(0,1),(1,1),(1,0))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         polygon
        </code>
        (
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         polygon
        </code>
       </p>
       <p>
        Converts circle to a 12-point polygon.
       </p>
       <p>
        <code class=""literal"">
         polygon(circle '&lt;(0,0),2&gt;')
        </code>
        →
        <code class=""returnvalue"">
         ((-2,0),​(-1.7320508075688774,0.9999999999999999),​(-1.0000000000000002,1.7320508075688772),​(-1.2246063538223773e-16,2),​(0.9999999999999996,1.7320508075688774),​(1.732050807568877,1.0000000000000007),​(2,2.4492127076447545e-16),​(1.7320508075688776,-0.9999999999999994),​(1.0000000000000009,-1.7320508075688767),​(3.673819061467132e-16,-2),​(-0.9999999999999987,-1.732050807568878),​(-1.7320508075688767,-1.0000000000000009))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         polygon
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ,
        <code class=""type"">
         circle
        </code>
        ) →
        <code class=""returnvalue"">
         polygon
        </code>
       </p>
       <p>
        Converts circle to an
        <em class=""replaceable"">
         <code>
          n
         </code>
        </em>
        -point polygon.
       </p>
       <p>
        <code class=""literal"">
         polygon(4, circle '&lt;(3,0),1&gt;')
        </code>
        →
        <code class=""returnvalue"">
         ((2,0),​(3,1),​(4,1.2246063538223773e-16),​(3,-1))
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         polygon
        </code>
        (
        <code class=""type"">
         path
        </code>
        ) →
        <code class=""returnvalue"">
         polygon
        </code>
       </p>
       <p>
        Converts closed path to a polygon with the same list of points.
       </p>
       <p>
        <code class=""literal"">
         polygon(path '((0,0),(1,1),(2,0))')
        </code>
        →
        <code class=""returnvalue"">
         ((0,0),(1,1),(2,0))
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  It is possible to access the two component numbers of a
  <code class=""type"">
   point
  </code>
  as though the point were an array with indexes 0 and 1. For example, if
  <code class=""literal"">
   t.p
  </code>
  is a
  <code class=""type"">
   point
  </code>
  column then
  <code class=""literal"">
   SELECT p[0] FROM t
  </code>
  retrieves the X coordinate and
  <code class=""literal"">
   UPDATE t SET p[1] = ...
  </code>
  changes the Y coordinate. In the same way, a value of type
  <code class=""type"">
   box
  </code>
  or
  <code class=""type"">
   lseg
  </code>
  can be treated as an array of two
  <code class=""type"">
   point
  </code>
  values.
 </p>
</div>
"
9. Functions and Operators,9.12. Network Address Functions and Operators,https://www.postgresql.org/docs/17/functions-net.html,"<div class=""sect1"" id=""FUNCTIONS-NET"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.12. Network Address Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-NET"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  The IP network address types,
  <code class=""type"">
   cidr
  </code>
  and
  <code class=""type"">
   inet
  </code>
  , support the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  as well as the specialized operators and functions shown in
  <a class=""xref"" href=""functions-net.html#CIDR-INET-OPERATORS-TABLE"" title=""Table 9.39. IP Address Operators"">
   Table 9.39
  </a>
  and
  <a class=""xref"" href=""functions-net.html#CIDR-INET-FUNCTIONS-TABLE"" title=""Table 9.40. IP Address Functions"">
   Table 9.40
  </a>
  .
 </p>
 <p>
  Any
  <code class=""type"">
   cidr
  </code>
  value can be cast to
  <code class=""type"">
   inet
  </code>
  implicitly; therefore, the operators and functions shown below as operating on
  <code class=""type"">
   inet
  </code>
  also work on
  <code class=""type"">
   cidr
  </code>
  values. (Where there are separate functions for
  <code class=""type"">
   inet
  </code>
  and
  <code class=""type"">
   cidr
  </code>
  , it is because the behavior should be different for the two cases.) Also, it is permitted to cast an
  <code class=""type"">
   inet
  </code>
  value to
  <code class=""type"">
   cidr
  </code>
  . When this is done, any bits to the right of the netmask are silently zeroed to create a valid
  <code class=""type"">
   cidr
  </code>
  value.
 </p>
 <div class=""table"" id=""CIDR-INET-OPERATORS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.39. IP Address Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""IP Address Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is subnet strictly contained by subnet? This operator, and the next four, test for subnet inclusion. They consider only the network parts of the two addresses (ignoring any bits to the right of the netmasks) and determine whether one network is identical to or a subnet of the other.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.5' &lt;&lt; inet '192.168.1/24'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.0.5' &lt;&lt; inet '192.168.1/24'
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &lt;&lt; inet '192.168.1/24'
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &lt;&lt;=
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is subnet contained by or equal to subnet?
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &lt;&lt;= inet '192.168.1/24'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does subnet strictly contain subnet?
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &gt;&gt; inet '192.168.1.5'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &gt;&gt;=
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does subnet contain or equal subnet?
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &gt;&gt;= inet '192.168.1/24'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does either subnet contain or equal the other?
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &amp;&amp; inet '192.168.1.80/28'
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1/24' &amp;&amp; inet '192.168.2.0/28'
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         ~
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes bitwise NOT.
       </p>
       <p>
        <code class=""literal"">
         ~ inet '192.168.1.6'
        </code>
        →
        <code class=""returnvalue"">
         63.87.254.249
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         &amp;
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes bitwise AND.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.6' &amp; inet '0.0.0.255'
        </code>
        →
        <code class=""returnvalue"">
         0.0.0.6
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         |
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes bitwise OR.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.6' | inet '0.0.0.255'
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.255
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         bigint
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Adds an offset to an address.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.6' + 25
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.31
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         bigint
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Adds an offset to an address.
       </p>
       <p>
        <code class=""literal"">
         200 + inet '::ffff:fff0:1'
        </code>
        →
        <code class=""returnvalue"">
         ::ffff:255.240.0.201
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         bigint
        </code>
        →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Subtracts an offset from an address.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.43' - 36
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.7
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         inet
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         inet
        </code>
        →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the difference of two addresses.
       </p>
       <p>
        <code class=""literal"">
         inet '192.168.1.43' - inet '192.168.1.19'
        </code>
        →
        <code class=""returnvalue"">
         24
        </code>
       </p>
       <p>
        <code class=""literal"">
         inet '::1' - inet '::ffff:1'
        </code>
        →
        <code class=""returnvalue"">
         -4294901760
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""CIDR-INET-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.40. IP Address Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""IP Address Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.1.1.1.1"" name=""id-1.5.8.18.5.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         abbrev
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Creates an abbreviated display format as text. (The result is the same as the
        <code class=""type"">
         inet
        </code>
        output function produces; it is
        <span class=""quote"">
         “
         <span class=""quote"">
          abbreviated
         </span>
         ”
        </span>
        only in comparison to the result of an explicit cast to
        <code class=""type"">
         text
        </code>
        , which for historical reasons will never suppress the netmask part.)
       </p>
       <p>
        <code class=""literal"">
         abbrev(inet '10.1.0.0/32')
        </code>
        →
        <code class=""returnvalue"">
         10.1.0.0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         abbrev
        </code>
        (
        <code class=""type"">
         cidr
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Creates an abbreviated display format as text. (The abbreviation consists of dropping all-zero octets to the right of the netmask; more examples are in
        <a class=""xref"" href=""datatype-net-types.html#DATATYPE-NET-CIDR-TABLE"" title=""Table 8.22. cidr Type Input Examples"">
         Table 8.22
        </a>
        .)
       </p>
       <p>
        <code class=""literal"">
         abbrev(cidr '10.1.0.0/16')
        </code>
        →
        <code class=""returnvalue"">
         10.1/16
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.3.1.1.1"" name=""id-1.5.8.18.5.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         broadcast
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes the broadcast address for the address's network.
       </p>
       <p>
        <code class=""literal"">
         broadcast(inet '192.168.1.5/24')
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.255/24
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.4.1.1.1"" name=""id-1.5.8.18.5.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         family
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the address's family:
        <code class=""literal"">
         4
        </code>
        for IPv4,
        <code class=""literal"">
         6
        </code>
        for IPv6.
       </p>
       <p>
        <code class=""literal"">
         family(inet '::1')
        </code>
        →
        <code class=""returnvalue"">
         6
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.5.1.1.1"" name=""id-1.5.8.18.5.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         host
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the IP address as text, ignoring the netmask.
       </p>
       <p>
        <code class=""literal"">
         host(inet '192.168.1.0/24')
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.6.1.1.1"" name=""id-1.5.8.18.5.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         hostmask
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes the host mask for the address's network.
       </p>
       <p>
        <code class=""literal"">
         hostmask(inet '192.168.23.20/30')
        </code>
        →
        <code class=""returnvalue"">
         0.0.0.3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.7.1.1.1"" name=""id-1.5.8.18.5.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         inet_merge
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ,
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         cidr
        </code>
       </p>
       <p>
        Computes the smallest network that includes both of the given networks.
       </p>
       <p>
        <code class=""literal"">
         inet_merge(inet '192.168.1.5/24', inet '192.168.2.5/24')
        </code>
        →
        <code class=""returnvalue"">
         192.168.0.0/22
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.8.1.1.1"" name=""id-1.5.8.18.5.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         inet_same_family
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ,
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Tests whether the addresses belong to the same IP family.
       </p>
       <p>
        <code class=""literal"">
         inet_same_family(inet '192.168.1.5/24', inet '::1')
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.9.1.1.1"" name=""id-1.5.8.18.5.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         masklen
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the netmask length in bits.
       </p>
       <p>
        <code class=""literal"">
         masklen(inet '192.168.1.5/24')
        </code>
        →
        <code class=""returnvalue"">
         24
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.10.1.1.1"" name=""id-1.5.8.18.5.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         netmask
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Computes the network mask for the address's network.
       </p>
       <p>
        <code class=""literal"">
         netmask(inet '192.168.1.5/24')
        </code>
        →
        <code class=""returnvalue"">
         255.255.255.0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.11.1.1.1"" name=""id-1.5.8.18.5.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         network
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         cidr
        </code>
       </p>
       <p>
        Returns the network part of the address, zeroing out whatever is to the right of the netmask. (This is equivalent to casting the value to
        <code class=""type"">
         cidr
        </code>
        .)
       </p>
       <p>
        <code class=""literal"">
         network(inet '192.168.1.5/24')
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.0/24
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.12.1.1.1"" name=""id-1.5.8.18.5.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         set_masklen
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         inet
        </code>
       </p>
       <p>
        Sets the netmask length for an
        <code class=""type"">
         inet
        </code>
        value. The address part does not change.
       </p>
       <p>
        <code class=""literal"">
         set_masklen(inet '192.168.1.5/24', 16)
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.5/16
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         set_masklen
        </code>
        (
        <code class=""type"">
         cidr
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         cidr
        </code>
       </p>
       <p>
        Sets the netmask length for a
        <code class=""type"">
         cidr
        </code>
        value. Address bits to the right of the new netmask are set to zero.
       </p>
       <p>
        <code class=""literal"">
         set_masklen(cidr '192.168.1.0/24', 16)
        </code>
        →
        <code class=""returnvalue"">
         192.168.0.0/16
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.5.2.2.14.1.1.1"" name=""id-1.5.8.18.5.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         text
        </code>
        (
        <code class=""type"">
         inet
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the unabbreviated IP address and netmask length as text. (This has the same result as an explicit cast to
        <code class=""type"">
         text
        </code>
        .)
       </p>
       <p>
        <code class=""literal"">
         text(inet '192.168.1.5')
        </code>
        →
        <code class=""returnvalue"">
         192.168.1.5/32
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   The
   <code class=""function"">
    abbrev
   </code>
   ,
   <code class=""function"">
    host
   </code>
   , and
   <code class=""function"">
    text
   </code>
   functions are primarily intended to offer alternative display formats for IP addresses.
  </p>
 </div>
 <p>
  The MAC address types,
  <code class=""type"">
   macaddr
  </code>
  and
  <code class=""type"">
   macaddr8
  </code>
  , support the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  as well as the specialized functions shown in
  <a class=""xref"" href=""functions-net.html#MACADDR-FUNCTIONS-TABLE"" title=""Table 9.41. MAC Address Functions"">
   Table 9.41
  </a>
  . In addition, they support the bitwise logical operators
  <code class=""literal"">
   ~
  </code>
  ,
  <code class=""literal"">
   &amp;
  </code>
  and
  <code class=""literal"">
   |
  </code>
  (NOT, AND and OR), just as shown above for IP addresses.
 </p>
 <div class=""table"" id=""MACADDR-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.41. MAC Address Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""MAC Address Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.8.2.2.1.1.1.1"" name=""id-1.5.8.18.8.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         trunc
        </code>
        (
        <code class=""type"">
         macaddr
        </code>
        ) →
        <code class=""returnvalue"">
         macaddr
        </code>
       </p>
       <p>
        Sets the last 3 bytes of the address to zero. The remaining prefix can be associated with a particular manufacturer (using data not included in
        <span class=""productname"">
         PostgreSQL
        </span>
        ).
       </p>
       <p>
        <code class=""literal"">
         trunc(macaddr '12:34:56:78:90:ab')
        </code>
        →
        <code class=""returnvalue"">
         12:34:56:00:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         trunc
        </code>
        (
        <code class=""type"">
         macaddr8
        </code>
        ) →
        <code class=""returnvalue"">
         macaddr8
        </code>
       </p>
       <p>
        Sets the last 5 bytes of the address to zero. The remaining prefix can be associated with a particular manufacturer (using data not included in
        <span class=""productname"">
         PostgreSQL
        </span>
        ).
       </p>
       <p>
        <code class=""literal"">
         trunc(macaddr8 '12:34:56:78:90:ab:cd:ef')
        </code>
        →
        <code class=""returnvalue"">
         12:34:56:00:00:00:00:00
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.18.8.2.2.3.1.1.1"" name=""id-1.5.8.18.8.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         macaddr8_set7bit
        </code>
        (
        <code class=""type"">
         macaddr8
        </code>
        ) →
        <code class=""returnvalue"">
         macaddr8
        </code>
       </p>
       <p>
        Sets the 7th bit of the address to one, creating what is known as modified EUI-64, for inclusion in an IPv6 address.
       </p>
       <p>
        <code class=""literal"">
         macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef')
        </code>
        →
        <code class=""returnvalue"">
         02:34:56:ff:fe:ab:cd:ef
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
9. Functions and Operators,9.13. Text Search Functions and Operators,https://www.postgresql.org/docs/17/functions-textsearch.html,"<div class=""sect1"" id=""FUNCTIONS-TEXTSEARCH"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.13. Text Search Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-TEXTSEARCH"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.19.2"" name=""id-1.5.8.19.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.19.3"" name=""id-1.5.8.19.3"">
 </a>
 <p>
  <a class=""xref"" href=""functions-textsearch.html#TEXTSEARCH-OPERATORS-TABLE"" title=""Table 9.42. Text Search Operators"">
   Table 9.42
  </a>
  ,
  <a class=""xref"" href=""functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE"" title=""Table 9.43. Text Search Functions"">
   Table 9.43
  </a>
  and
  <a class=""xref"" href=""functions-textsearch.html#TEXTSEARCH-FUNCTIONS-DEBUG-TABLE"" title=""Table 9.44. Text Search Debugging Functions"">
   Table 9.44
  </a>
  summarize the functions and operators that are provided for full text searching. See
  <a class=""xref"" href=""textsearch.html"" title=""Chapter 12. Full Text Search"">
   Chapter 12
  </a>
  for a detailed explanation of
  <span class=""productname"">
   PostgreSQL
  </span>
  's text search facility.
 </p>
 <div class=""table"" id=""TEXTSEARCH-OPERATORS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.42. Text Search Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Text Search Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsvector
        </code>
        <code class=""literal"">
         @@
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         @@
        </code>
        <code class=""type"">
         tsvector
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does
        <code class=""type"">
         tsvector
        </code>
        match
        <code class=""type"">
         tsquery
        </code>
        ? (The arguments can be given in either order.)
       </p>
       <p>
        <code class=""literal"">
         to_tsvector('fat cats ate rats') @@ to_tsquery('cat &amp; rat')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         text
        </code>
        <code class=""literal"">
         @@
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does text string, after implicit invocation of
        <code class=""function"">
         to_tsvector()
        </code>
        , match
        <code class=""type"">
         tsquery
        </code>
        ?
       </p>
       <p>
        <code class=""literal"">
         'fat cats ate rats' @@ to_tsquery('cat &amp; rat')
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsvector
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         tsvector
        </code>
        →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Concatenates two
        <code class=""type"">
         tsvector
        </code>
        s. If both inputs contain lexeme positions, the second input's positions are adjusted accordingly.
       </p>
       <p>
        <code class=""literal"">
         'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector
        </code>
        →
        <code class=""returnvalue"">
         'a':1 'b':2,5 'c':3 'd':4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        ANDs two
        <code class=""type"">
         tsquery
        </code>
        s together, producing a query that matches documents that match both input queries.
       </p>
       <p>
        <code class=""literal"">
         'fat | rat'::tsquery &amp;&amp; 'cat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         ( 'fat' | 'rat' ) &amp; 'cat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        ORs two
        <code class=""type"">
         tsquery
        </code>
        s together, producing a query that matches documents that match either input query.
       </p>
       <p>
        <code class=""literal"">
         'fat | rat'::tsquery || 'cat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         'fat' | 'rat' | 'cat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""literal"">
         !!
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Negates a
        <code class=""type"">
         tsquery
        </code>
        , producing a query that matches documents that do not match the input query.
       </p>
       <p>
        <code class=""literal"">
         !! 'cat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         !'cat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         &lt;-&gt;
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Constructs a phrase query, which matches if the two input queries match at successive lexemes.
       </p>
       <p>
        <code class=""literal"">
         to_tsquery('fat') &lt;-&gt; to_tsquery('rat')
        </code>
        →
        <code class=""returnvalue"">
         'fat' &lt;-&gt; 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does first
        <code class=""type"">
         tsquery
        </code>
        contain the second? (This considers only whether all the lexemes appearing in one query appear in the other, ignoring the combining operators.)
       </p>
       <p>
        <code class=""literal"">
         'cat'::tsquery @&gt; 'cat &amp; rat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         tsquery
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         tsquery
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is first
        <code class=""type"">
         tsquery
        </code>
        contained in the second? (This considers only whether all the lexemes appearing in one query appear in the other, ignoring the combining operators.)
       </p>
       <p>
        <code class=""literal"">
         'cat'::tsquery &lt;@ 'cat &amp; rat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
       <p>
        <code class=""literal"">
         'cat'::tsquery &lt;@ '!cat &amp; rat'::tsquery
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  In addition to these specialized operators, the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  are available for types
  <code class=""type"">
   tsvector
  </code>
  and
  <code class=""type"">
   tsquery
  </code>
  . These are not very useful for text searching but allow, for example, unique indexes to be built on columns of these types.
 </p>
 <div class=""table"" id=""TEXTSEARCH-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.43. Text Search Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Text Search Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.1.1.1.1"" name=""id-1.5.8.19.7.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         array_to_tsvector
        </code>
        (
        <code class=""type"">
         text[]
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Converts an array of text strings to a
        <code class=""type"">
         tsvector
        </code>
        . The given strings are used as lexemes as-is, without further processing. Array elements must not be empty strings or
        <code class=""literal"">
         NULL
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         array_to_tsvector('{fat,cat,rat}'::text[])
        </code>
        →
        <code class=""returnvalue"">
         'cat' 'fat' 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.2.1.1.1"" name=""id-1.5.8.19.7.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         get_current_ts_config
        </code>
        ( ) →
        <code class=""returnvalue"">
         regconfig
        </code>
       </p>
       <p>
        Returns the OID of the current default text search configuration (as set by
        <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
         default_text_search_config
        </a>
        ).
       </p>
       <p>
        <code class=""literal"">
         get_current_ts_config()
        </code>
        →
        <code class=""returnvalue"">
         english
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.3.1.1.1"" name=""id-1.5.8.19.7.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         length
        </code>
        (
        <code class=""type"">
         tsvector
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of lexemes in the
        <code class=""type"">
         tsvector
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         length('fat:2,4 cat:3 rat:5A'::tsvector)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.4.1.1.1"" name=""id-1.5.8.19.7.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         numnode
        </code>
        (
        <code class=""type"">
         tsquery
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of lexemes plus operators in the
        <code class=""type"">
         tsquery
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         numnode('(fat &amp; rat) | cat'::tsquery)
        </code>
        →
        <code class=""returnvalue"">
         5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.5.1.1.1"" name=""id-1.5.8.19.7.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         plainto_tsquery
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Converts text to a
        <code class=""type"">
         tsquery
        </code>
        , normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches documents containing all non-stopwords in the text.
       </p>
       <p>
        <code class=""literal"">
         plainto_tsquery('english', 'The Fat Rats')
        </code>
        →
        <code class=""returnvalue"">
         'fat' &amp; 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.6.1.1.1"" name=""id-1.5.8.19.7.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         phraseto_tsquery
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Converts text to a
        <code class=""type"">
         tsquery
        </code>
        , normalizing words according to the specified or default configuration. Any punctuation in the string is ignored (it does not determine query operators). The resulting query matches phrases containing all non-stopwords in the text.
       </p>
       <p>
        <code class=""literal"">
         phraseto_tsquery('english', 'The Fat Rats')
        </code>
        →
        <code class=""returnvalue"">
         'fat' &lt;-&gt; 'rat'
        </code>
       </p>
       <p>
        <code class=""literal"">
         phraseto_tsquery('english', 'The Cat and Rats')
        </code>
        →
        <code class=""returnvalue"">
         'cat' &lt;2&gt; 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.7.1.1.1"" name=""id-1.5.8.19.7.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         websearch_to_tsquery
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Converts text to a
        <code class=""type"">
         tsquery
        </code>
        , normalizing words according to the specified or default configuration. Quoted word sequences are converted to phrase tests. The word
        <span class=""quote"">
         “
         <span class=""quote"">
          or
         </span>
         ”
        </span>
        is understood as producing an OR operator, and a dash produces a NOT operator; other punctuation is ignored. This approximates the behavior of some common web search tools.
       </p>
       <p>
        <code class=""literal"">
         websearch_to_tsquery('english', '""fat rat"" or cat dog')
        </code>
        →
        <code class=""returnvalue"">
         'fat' &lt;-&gt; 'rat' | 'cat' &amp; 'dog'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.8.1.1.1"" name=""id-1.5.8.19.7.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         querytree
        </code>
        (
        <code class=""type"">
         tsquery
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Produces a representation of the indexable portion of a
        <code class=""type"">
         tsquery
        </code>
        . A result that is empty or just
        <code class=""literal"">
         T
        </code>
        indicates a non-indexable query.
       </p>
       <p>
        <code class=""literal"">
         querytree('foo &amp; ! bar'::tsquery)
        </code>
        →
        <code class=""returnvalue"">
         'foo'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.9.1.1.1"" name=""id-1.5.8.19.7.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         setweight
        </code>
        (
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          weight
         </code>
        </em>
        <code class=""type"">
         ""char""
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Assigns the specified
        <em class=""parameter"">
         <code>
          weight
         </code>
        </em>
        to each element of the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')
        </code>
        →
        <code class=""returnvalue"">
         'cat':3A 'fat':2A,4A 'rat':5A
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.10.1.1.1"" name=""id-1.5.8.19.7.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         setweight
        </code>
        (
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          weight
         </code>
        </em>
        <code class=""type"">
         ""char""
        </code>
        ,
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        <code class=""type"">
         text[]
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Assigns the specified
        <em class=""parameter"">
         <code>
          weight
         </code>
        </em>
        to elements of the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        that are listed in
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        . The strings in
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        are ignored.
       </p>
       <p>
        <code class=""literal"">
         setweight('fat:2,4 cat:3 rat:5,6B'::tsvector, 'A', '{cat,rat}')
        </code>
        →
        <code class=""returnvalue"">
         'cat':3A 'fat':2,4 'rat':5A,6A
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.11.1.1.1"" name=""id-1.5.8.19.7.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         strip
        </code>
        (
        <code class=""type"">
         tsvector
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Removes positions and weights from the
        <code class=""type"">
         tsvector
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         strip('fat:2,4 cat:3 rat:5A'::tsvector)
        </code>
        →
        <code class=""returnvalue"">
         'cat' 'fat' 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.12.1.1.1"" name=""id-1.5.8.19.7.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         to_tsquery
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Converts text to a
        <code class=""type"">
         tsquery
        </code>
        , normalizing words according to the specified or default configuration. The words must be combined by valid
        <code class=""type"">
         tsquery
        </code>
        operators.
       </p>
       <p>
        <code class=""literal"">
         to_tsquery('english', 'The &amp; Fat &amp; Rats')
        </code>
        →
        <code class=""returnvalue"">
         'fat' &amp; 'rat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.13.1.1.1"" name=""id-1.5.8.19.7.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         to_tsvector
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Converts text to a
        <code class=""type"">
         tsvector
        </code>
        , normalizing words according to the specified or default configuration. Position information is included in the result.
       </p>
       <p>
        <code class=""literal"">
         to_tsvector('english', 'The Fat Rats')
        </code>
        →
        <code class=""returnvalue"">
         'fat':2 'rat':3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         to_tsvector
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         json
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         to_tsvector
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         jsonb
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Converts each string value in the JSON document to a
        <code class=""type"">
         tsvector
        </code>
        , normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of string values. (Beware that
        <span class=""quote"">
         “
         <span class=""quote"">
          document order
         </span>
         ”
        </span>
        of the fields of a JSON object is implementation-dependent when the input is
        <code class=""type"">
         jsonb
        </code>
        ; observe the difference in the examples.)
       </p>
       <p>
        <code class=""literal"">
         to_tsvector('english', '{""aa"": ""The Fat Rats"", ""b"": ""dog""}'::json)
        </code>
        →
        <code class=""returnvalue"">
         'dog':5 'fat':2 'rat':3
        </code>
       </p>
       <p>
        <code class=""literal"">
         to_tsvector('english', '{""aa"": ""The Fat Rats"", ""b"": ""dog""}'::jsonb)
        </code>
        →
        <code class=""returnvalue"">
         'dog':1 'fat':4 'rat':5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.15.1.1.1"" name=""id-1.5.8.19.7.2.2.15.1.1.1"">
        </a>
        <code class=""function"">
         json_to_tsvector
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         json
        </code>
        ,
        <em class=""parameter"">
         <code>
          filter
         </code>
        </em>
        <code class=""type"">
         jsonb
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.15.1.2.1"" name=""id-1.5.8.19.7.2.2.15.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_to_tsvector
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         jsonb
        </code>
        ,
        <em class=""parameter"">
         <code>
          filter
         </code>
        </em>
        <code class=""type"">
         jsonb
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Selects each item in the JSON document that is requested by the
        <em class=""parameter"">
         <code>
          filter
         </code>
        </em>
        and converts each one to a
        <code class=""type"">
         tsvector
        </code>
        , normalizing words according to the specified or default configuration. The results are then concatenated in document order to produce the output. Position information is generated as though one stopword exists between each pair of selected items. (Beware that
        <span class=""quote"">
         “
         <span class=""quote"">
          document order
         </span>
         ”
        </span>
        of the fields of a JSON object is implementation-dependent when the input is
        <code class=""type"">
         jsonb
        </code>
        .) The
        <em class=""parameter"">
         <code>
          filter
         </code>
        </em>
        must be a
        <code class=""type"">
         jsonb
        </code>
        array containing zero or more of these keywords:
        <code class=""literal"">
         ""string""
        </code>
        (to include all string values),
        <code class=""literal"">
         ""numeric""
        </code>
        (to include all numeric values),
        <code class=""literal"">
         ""boolean""
        </code>
        (to include all boolean values),
        <code class=""literal"">
         ""key""
        </code>
        (to include all keys), or
        <code class=""literal"">
         ""all""
        </code>
        (to include all the above). As a special case, the
        <em class=""parameter"">
         <code>
          filter
         </code>
        </em>
        can also be a simple JSON value that is one of these keywords.
       </p>
       <p>
        <code class=""literal"">
         json_to_tsvector('english', '{""a"": ""The Fat Rats"", ""b"": 123}'::json, '[""string"", ""numeric""]')
        </code>
        →
        <code class=""returnvalue"">
         '123':5 'fat':2 'rat':3
        </code>
       </p>
       <p>
        <code class=""literal"">
         json_to_tsvector('english', '{""cat"": ""The Fat Rats"", ""dog"": 123}'::json, '""all""')
        </code>
        →
        <code class=""returnvalue"">
         '123':9 'cat':1 'dog':7 'fat':4 'rat':5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.16.1.1.1"" name=""id-1.5.8.19.7.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         ts_delete
        </code>
        (
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          lexeme
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Removes any occurrence of the given
        <em class=""parameter"">
         <code>
          lexeme
         </code>
        </em>
        from the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        . The
        <em class=""parameter"">
         <code>
          lexeme
         </code>
        </em>
        string is treated as a lexeme as-is, without further processing.
       </p>
       <p>
        <code class=""literal"">
         ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, 'fat')
        </code>
        →
        <code class=""returnvalue"">
         'cat':3 'rat':5A
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         ts_delete
        </code>
        (
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        <code class=""type"">
         text[]
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Removes any occurrences of the lexemes in
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        from the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        . The strings in
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        are taken as lexemes as-is, without further processing. Strings that do not match any lexeme in
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        are ignored.
       </p>
       <p>
        <code class=""literal"">
         ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat'])
        </code>
        →
        <code class=""returnvalue"">
         'cat':3
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.18.1.1.1"" name=""id-1.5.8.19.7.2.2.18.1.1.1"">
        </a>
        <code class=""function"">
         ts_filter
        </code>
        (
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          weights
         </code>
        </em>
        <code class=""type"">
         ""char""[]
        </code>
        ) →
        <code class=""returnvalue"">
         tsvector
        </code>
       </p>
       <p>
        Selects only elements with the given
        <em class=""parameter"">
         <code>
          weights
         </code>
        </em>
        from the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         ts_filter('fat:2,4 cat:3b,7c rat:5A'::tsvector, '{a,b}')
        </code>
        →
        <code class=""returnvalue"">
         'cat':3B 'rat':5A
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.19.1.1.1"" name=""id-1.5.8.19.7.2.2.19.1.1.1"">
        </a>
        <code class=""function"">
         ts_headline
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Displays, in an abbreviated form, the match(es) for the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        in the
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        , which must be raw text not a
        <code class=""type"">
         tsvector
        </code>
        . Words in the document are normalized according to the specified or default configuration before matching to the query. Use of this function is discussed in
        <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-HEADLINE"" title=""12.3.4. Highlighting Results"">
         Section 12.3.4
        </a>
        , which also describes the available
        <em class=""parameter"">
         <code>
          options
         </code>
        </em>
        .
       </p>
       <p>
        <code class=""literal"">
         ts_headline('The fat cat ate the rat.', 'cat')
        </code>
        →
        <code class=""returnvalue"">
         The fat &lt;b&gt;cat&lt;/b&gt; ate the rat.
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         ts_headline
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         json
        </code>
        ,
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         ts_headline
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         jsonb
        </code>
        ,
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Displays, in an abbreviated form, match(es) for the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        that occur in string values within the JSON
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        . See
        <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-HEADLINE"" title=""12.3.4. Highlighting Results"">
         Section 12.3.4
        </a>
        for more details.
       </p>
       <p>
        <code class=""literal"">
         ts_headline('{""cat"":""raining cats and dogs""}'::jsonb, 'cat')
        </code>
        →
        <code class=""returnvalue"">
         {""cat"": ""raining &lt;b&gt;cats&lt;/b&gt; and dogs""}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.21.1.1.1"" name=""id-1.5.8.19.7.2.2.21.1.1.1"">
        </a>
        <code class=""function"">
         ts_rank
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           weights
          </code>
         </em>
         <code class=""type"">
          real[]
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           normalization
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         real
        </code>
       </p>
       <p>
        Computes a score showing how well the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        matches the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        . See
        <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-RANKING"" title=""12.3.3. Ranking Search Results"">
         Section 12.3.3
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_rank(to_tsvector('raining cats and dogs'), 'cat')
        </code>
        →
        <code class=""returnvalue"">
         0.06079271
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.22.1.1.1"" name=""id-1.5.8.19.7.2.2.22.1.1.1"">
        </a>
        <code class=""function"">
         ts_rank_cd
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           weights
          </code>
         </em>
         <code class=""type"">
          real[]
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        <code class=""type"">
         tsvector
        </code>
        ,
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           normalization
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         real
        </code>
       </p>
       <p>
        Computes a score showing how well the
        <em class=""parameter"">
         <code>
          vector
         </code>
        </em>
        matches the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        , using a cover density algorithm. See
        <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-RANKING"" title=""12.3.3. Ranking Search Results"">
         Section 12.3.3
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_rank_cd(to_tsvector('raining cats and dogs'), 'cat')
        </code>
        →
        <code class=""returnvalue"">
         0.1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.23.1.1.1"" name=""id-1.5.8.19.7.2.2.23.1.1.1"">
        </a>
        <code class=""function"">
         ts_rewrite
        </code>
        (
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          target
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          substitute
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Replaces occurrences of
        <em class=""parameter"">
         <code>
          target
         </code>
        </em>
        with
        <em class=""parameter"">
         <code>
          substitute
         </code>
        </em>
        within the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        . See
        <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-QUERY-REWRITING"" title=""12.4.2.1. Query Rewriting"">
         Section 12.4.2.1
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)
        </code>
        →
        <code class=""returnvalue"">
         'b' &amp; ( 'foo' | 'bar' )
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         ts_rewrite
        </code>
        (
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          select
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Replaces portions of the
        <em class=""parameter"">
         <code>
          query
         </code>
        </em>
        according to target(s) and substitute(s) obtained by executing a
        <code class=""command"">
         SELECT
        </code>
        command. See
        <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-QUERY-REWRITING"" title=""12.4.2.1. Query Rewriting"">
         Section 12.4.2.1
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases')
        </code>
        →
        <code class=""returnvalue"">
         'b' &amp; ( 'foo' | 'bar' )
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.25.1.1.1"" name=""id-1.5.8.19.7.2.2.25.1.1.1"">
        </a>
        <code class=""function"">
         tsquery_phrase
        </code>
        (
        <em class=""parameter"">
         <code>
          query1
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          query2
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Constructs a phrase query that searches for matches of
        <em class=""parameter"">
         <code>
          query1
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          query2
         </code>
        </em>
        at successive lexemes (same as
        <code class=""literal"">
         &lt;-&gt;
        </code>
        operator).
       </p>
       <p>
        <code class=""literal"">
         tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'))
        </code>
        →
        <code class=""returnvalue"">
         'fat' &lt;-&gt; 'cat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         tsquery_phrase
        </code>
        (
        <em class=""parameter"">
         <code>
          query1
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          query2
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""parameter"">
         <code>
          distance
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         tsquery
        </code>
       </p>
       <p>
        Constructs a phrase query that searches for matches of
        <em class=""parameter"">
         <code>
          query1
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          query2
         </code>
        </em>
        that occur exactly
        <em class=""parameter"">
         <code>
          distance
         </code>
        </em>
        lexemes apart.
       </p>
       <p>
        <code class=""literal"">
         tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)
        </code>
        →
        <code class=""returnvalue"">
         'fat' &lt;10&gt; 'cat'
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.27.1.1.1"" name=""id-1.5.8.19.7.2.2.27.1.1.1"">
        </a>
        <code class=""function"">
         tsvector_to_array
        </code>
        (
        <code class=""type"">
         tsvector
        </code>
        ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Converts a
        <code class=""type"">
         tsvector
        </code>
        to an array of lexemes.
       </p>
       <p>
        <code class=""literal"">
         tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector)
        </code>
        →
        <code class=""returnvalue"">
         {cat,fat,rat}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.7.2.2.28.1.1.1"" name=""id-1.5.8.19.7.2.2.28.1.1.1"">
        </a>
        <code class=""function"">
         unnest
        </code>
        (
        <code class=""type"">
         tsvector
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          lexeme
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          positions
         </code>
        </em>
        <code class=""type"">
         smallint[]
        </code>
        ,
        <em class=""parameter"">
         <code>
          weights
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        )
       </p>
       <p>
        Expands a
        <code class=""type"">
         tsvector
        </code>
        into a set of rows, one per lexeme.
       </p>
       <p>
        <code class=""literal"">
         select * from unnest('cat:3 fat:2,4 rat:5A'::tsvector)
        </code>
        →
       </p>
       <pre class=""programlisting"">
 lexeme | positions | weights
--------+-----------+---------
 cat    | {3}       | {D}
 fat    | {2,4}     | {D,D}
 rat    | {5}       | {A}
</pre>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   All the text search functions that accept an optional
   <code class=""type"">
    regconfig
   </code>
   argument will use the configuration specified by
   <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
    default_text_search_config
   </a>
   when that argument is omitted.
  </p>
 </div>
 <p>
  The functions in
  <a class=""xref"" href=""functions-textsearch.html#TEXTSEARCH-FUNCTIONS-DEBUG-TABLE"" title=""Table 9.44. Text Search Debugging Functions"">
   Table 9.44
  </a>
  are listed separately because they are not usually used in everyday text searching operations. They are primarily helpful for development and debugging of new text search configurations.
 </p>
 <div class=""table"" id=""TEXTSEARCH-FUNCTIONS-DEBUG-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.44. Text Search Debugging Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Text Search Debugging Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.10.2.2.1.1.1.1"" name=""id-1.5.8.19.10.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         ts_debug
        </code>
        ( [
        <span class=""optional"">
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          regconfig
         </code>
         ,
        </span>
        ]
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          alias
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          description
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          token
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          dictionaries
         </code>
        </em>
        <code class=""type"">
         regdictionary[]
        </code>
        ,
        <em class=""parameter"">
         <code>
          dictionary
         </code>
        </em>
        <code class=""type"">
         regdictionary
        </code>
        ,
        <em class=""parameter"">
         <code>
          lexemes
         </code>
        </em>
        <code class=""type"">
         text[]
        </code>
        )
       </p>
       <p>
        Extracts and normalizes tokens from the
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        according to the specified or default text search configuration, and returns information about how each token was processed. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-CONFIGURATION-TESTING"" title=""12.8.1. Configuration Testing"">
         Section 12.8.1
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_debug('english', 'The Brightest supernovaes')
        </code>
        →
        <code class=""returnvalue"">
         (asciiword,""Word, all ASCII"",The,{english_stem},english_stem,{}) ...
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.10.2.2.2.1.1.1"" name=""id-1.5.8.19.10.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         ts_lexize
        </code>
        (
        <em class=""parameter"">
         <code>
          dict
         </code>
        </em>
        <code class=""type"">
         regdictionary
        </code>
        ,
        <em class=""parameter"">
         <code>
          token
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text[]
        </code>
       </p>
       <p>
        Returns an array of replacement lexemes if the input token is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or NULL if it is not a known word. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-DICTIONARY-TESTING"" title=""12.8.3. Dictionary Testing"">
         Section 12.8.3
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_lexize('english_stem', 'stars')
        </code>
        →
        <code class=""returnvalue"">
         {star}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.10.2.2.3.1.1.1"" name=""id-1.5.8.19.10.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         ts_parse
        </code>
        (
        <em class=""parameter"">
         <code>
          parser_name
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          tokid
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          token
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        )
       </p>
       <p>
        Extracts tokens from the
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        using the named parser. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-PARSER-TESTING"" title=""12.8.2. Parser Testing"">
         Section 12.8.2
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_parse('default', 'foo - bar')
        </code>
        →
        <code class=""returnvalue"">
         (1,foo) ...
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         ts_parse
        </code>
        (
        <em class=""parameter"">
         <code>
          parser_oid
         </code>
        </em>
        <code class=""type"">
         oid
        </code>
        ,
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          tokid
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          token
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        )
       </p>
       <p>
        Extracts tokens from the
        <em class=""parameter"">
         <code>
          document
         </code>
        </em>
        using a parser specified by OID. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-PARSER-TESTING"" title=""12.8.2. Parser Testing"">
         Section 12.8.2
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_parse(3722, 'foo - bar')
        </code>
        →
        <code class=""returnvalue"">
         (1,foo) ...
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.10.2.2.5.1.1.1"" name=""id-1.5.8.19.10.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         ts_token_type
        </code>
        (
        <em class=""parameter"">
         <code>
          parser_name
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          tokid
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          alias
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          description
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        )
       </p>
       <p>
        Returns a table that describes each type of token the named parser can recognize. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-PARSER-TESTING"" title=""12.8.2. Parser Testing"">
         Section 12.8.2
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_token_type('default')
        </code>
        →
        <code class=""returnvalue"">
         (1,asciiword,""Word, all ASCII"") ...
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         ts_token_type
        </code>
        (
        <em class=""parameter"">
         <code>
          parser_oid
         </code>
        </em>
        <code class=""type"">
         oid
        </code>
        ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          tokid
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          alias
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          description
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        )
       </p>
       <p>
        Returns a table that describes each type of token a parser specified by OID can recognize. See
        <a class=""xref"" href=""textsearch-debugging.html#TEXTSEARCH-PARSER-TESTING"" title=""12.8.2. Parser Testing"">
         Section 12.8.2
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_token_type(3722)
        </code>
        →
        <code class=""returnvalue"">
         (1,asciiword,""Word, all ASCII"") ...
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.19.10.2.2.7.1.1.1"" name=""id-1.5.8.19.10.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         ts_stat
        </code>
        (
        <em class=""parameter"">
         <code>
          sqlquery
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           weights
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof record
        </code>
        (
        <em class=""parameter"">
         <code>
          word
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          ndoc
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          nentry
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        )
       </p>
       <p>
        Executes the
        <em class=""parameter"">
         <code>
          sqlquery
         </code>
        </em>
        , which must return a single
        <code class=""type"">
         tsvector
        </code>
        column, and returns statistics about each distinct lexeme contained in the data. See
        <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-STATISTICS"" title=""12.4.4. Gathering Document Statistics"">
         Section 12.4.4
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         ts_stat('SELECT vector FROM apod')
        </code>
        →
        <code class=""returnvalue"">
         (foo,10,15) ...
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
</div>
"
9. Functions and Operators,9.14. UUID Functions,https://www.postgresql.org/docs/17/functions-uuid.html,"<div class=""sect1"" id=""FUNCTIONS-UUID"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.14. UUID Functions
     <a class=""id_link"" href=""#FUNCTIONS-UUID"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.20.2"" name=""id-1.5.8.20.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.20.3"" name=""id-1.5.8.20.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.20.4"" name=""id-1.5.8.20.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.20.5"" name=""id-1.5.8.20.5"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  includes one function to generate a UUID:
 </p>
 <pre class=""synopsis"">
<code class=""function"">gen_random_uuid</code> () → <code class=""returnvalue"">uuid</code>
</pre>
 <p>
  This function returns a version 4 (random) UUID. This is the most commonly used type of UUID and is appropriate for most applications.
 </p>
 <p>
  The
  <a class=""xref"" href=""uuid-ossp.html"" title=""F.47. uuid-ossp — a UUID generator"">
   uuid-ossp
  </a>
  module provides additional functions that implement other standard algorithms for generating UUIDs.
 </p>
 <p>
  There are also functions to extract data from UUIDs:
 </p>
 <pre class=""synopsis"">
<code class=""function"">uuid_extract_timestamp</code> (uuid) → <code class=""returnvalue"">timestamp with time zone</code>
</pre>
 <p>
  This function extracts a
  <code class=""type"">
   timestamp with time zone
  </code>
  from UUID version 1. For other versions, this function returns null. Note that the extracted timestamp is not necessarily exactly equal to the time the UUID was generated; this depends on the implementation that generated the UUID.
 </p>
 <pre class=""synopsis"">
<code class=""function"">uuid_extract_version</code> (uuid) → <code class=""returnvalue"">smallint</code>
</pre>
 <p>
  This function extracts the version from a UUID of the variant described by
  <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc4122"" target=""_top"">
   RFC 4122
  </a>
  . For other variants, this function returns null. For example, for a UUID generated by
  <code class=""function"">
   gen_random_uuid
  </code>
  , this function will return 4.
 </p>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  also provides the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  for UUIDs.
 </p>
</div>
"
9. Functions and Operators,9.15. XML Functions,https://www.postgresql.org/docs/17/functions-xml.html,"<div class=""sect1"" id=""FUNCTIONS-XML"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.15. XML Functions
     <a class=""id_link"" href=""#FUNCTIONS-XML"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-xml.html#FUNCTIONS-PRODUCING-XML"">
      9.15.1. Producing XML Content
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-xml.html#FUNCTIONS-XML-PREDICATES"">
      9.15.2. XML Predicates
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-xml.html#FUNCTIONS-XML-PROCESSING"">
      9.15.3. Processing XML
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-xml.html#FUNCTIONS-XML-MAPPING"">
      9.15.4. Mapping Tables to XML
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.21.2"" name=""id-1.5.8.21.2"">
 </a>
 <p>
  The functions and function-like expressions described in this section operate on values of type
  <code class=""type"">
   xml
  </code>
  . See
  <a class=""xref"" href=""datatype-xml.html"" title=""8.13. XML Type"">
   Section 8.13
  </a>
  for information about the
  <code class=""type"">
   xml
  </code>
  type. The function-like expressions
  <code class=""function"">
   xmlparse
  </code>
  and
  <code class=""function"">
   xmlserialize
  </code>
  for converting to and from type
  <code class=""type"">
   xml
  </code>
  are documented there, not in this section.
 </p>
 <p>
  Use of most of these functions requires
  <span class=""productname"">
   PostgreSQL
  </span>
  to have been built with
  <code class=""command"">
   configure --with-libxml
  </code>
  .
 </p>
 <div class=""sect2"" id=""FUNCTIONS-PRODUCING-XML"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.15.1. Producing XML Content
      <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   A set of functions and function-like expressions is available for producing XML content from SQL data. As such, they are particularly suitable for formatting query results into XML documents for processing in client applications.
  </p>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLTEXT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.1.
       <code class=""literal"">
        xmltext
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLTEXT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.3.2"" name=""id-1.5.8.21.5.3.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmltext</code> ( <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xmltext
    </code>
    returns an XML value with a single text node containing the input argument as its content. Predefined entities like ampersand (
    <code class=""literal"">
     &amp;
    </code>
    ), left and right angle brackets (
    <code class=""literal"">
     &lt; &gt;
    </code>
    ), and quotation marks (
    <code class=""literal"">
     """"
    </code>
    ) are escaped.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmltext('&lt; foo &amp; bar &gt;');
         xmltext
-------------------------
 &amp;lt; foo &amp;amp; bar &amp;gt;
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLCOMMENT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.2.
       <code class=""literal"">
        xmlcomment
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLCOMMENT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.4.2"" name=""id-1.5.8.21.5.4.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlcomment</code> ( <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xmlcomment
    </code>
    creates an XML value containing an XML comment with the specified text as content. The text cannot contain
    <span class=""quote"">
     “
     <span class=""quote"">
      <code class=""literal"">
       --
      </code>
     </span>
     ”
    </span>
    or end with a
    <span class=""quote"">
     “
     <span class=""quote"">
      <code class=""literal"">
       -
      </code>
     </span>
     ”
    </span>
    , otherwise the resulting construct would not be a valid XML comment. If the argument is null, the result is null.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmlcomment('hello');

  xmlcomment
--------------
 &lt;!--hello--&gt;
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLCONCAT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.3.
       <code class=""literal"">
        xmlconcat
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLCONCAT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.5.2"" name=""id-1.5.8.21.5.5.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlconcat</code> ( <code class=""type"">xml</code> [<span class=""optional"">, ...</span>] ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xmlconcat
    </code>
    concatenates a list of individual XML values to create a single value containing an XML content fragment. Null values are omitted; the result is only null if there are no nonnull arguments.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmlconcat('&lt;abc/&gt;', '&lt;bar&gt;foo&lt;/bar&gt;');

      xmlconcat
----------------------
 &lt;abc/&gt;&lt;bar&gt;foo&lt;/bar&gt;
</pre>
   <p>
    XML declarations, if present, are combined as follows. If all argument values have the same XML version declaration, that version is used in the result, else no version is used. If all argument values have the standalone declaration value
    <span class=""quote"">
     “
     <span class=""quote"">
      yes
     </span>
     ”
    </span>
    , then that value is used in the result. If all argument values have a standalone declaration value and at least one is
    <span class=""quote"">
     “
     <span class=""quote"">
      no
     </span>
     ”
    </span>
    , then that is used in the result. Else the result will have no standalone declaration. If the result is determined to require a standalone declaration but no version declaration, a version declaration with version 1.0 will be used because XML requires an XML declaration to contain a version declaration. Encoding declarations are ignored and removed in all cases.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmlconcat('&lt;?xml version=""1.1""?&gt;&lt;foo/&gt;', '&lt;?xml version=""1.1"" standalone=""no""?&gt;&lt;bar/&gt;');

             xmlconcat
-----------------------------------
 &lt;?xml version=""1.1""?&gt;&lt;foo/&gt;&lt;bar/&gt;
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLELEMENT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.4.
       <code class=""literal"">
        xmlelement
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLELEMENT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.6.2"" name=""id-1.5.8.21.5.6.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlelement</code> ( <code class=""literal"">NAME</code> <em class=""replaceable""><code>name</code></em> [<span class=""optional"">, <code class=""literal"">XMLATTRIBUTES</code> ( <em class=""replaceable""><code>attvalue</code></em> [<span class=""optional""> <code class=""literal"">AS</code> <em class=""replaceable""><code>attname</code></em> </span>] [<span class=""optional"">, ...</span>] ) </span>] [<span class=""optional"">, <em class=""replaceable""><code>content</code></em> [<span class=""optional"">, ...</span>]</span>] ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The
    <code class=""function"">
     xmlelement
    </code>
    expression produces an XML element with the given name, attributes, and content. The
    <em class=""replaceable"">
     <code>
      name
     </code>
    </em>
    and
    <em class=""replaceable"">
     <code>
      attname
     </code>
    </em>
    items shown in the syntax are simple identifiers, not values. The
    <em class=""replaceable"">
     <code>
      attvalue
     </code>
    </em>
    and
    <em class=""replaceable"">
     <code>
      content
     </code>
    </em>
    items are expressions, which can yield any
    <span class=""productname"">
     PostgreSQL
    </span>
    data type. The argument(s) within
    <code class=""literal"">
     XMLATTRIBUTES
    </code>
    generate attributes of the XML element; the
    <em class=""replaceable"">
     <code>
      content
     </code>
    </em>
    value(s) are concatenated to form its content.
   </p>
   <p>
    Examples:
   </p>
   <pre class=""screen"">
SELECT xmlelement(name foo);

 xmlelement
------------
 &lt;foo/&gt;

SELECT xmlelement(name foo, xmlattributes('xyz' as bar));

    xmlelement
------------------
 &lt;foo bar=""xyz""/&gt;

SELECT xmlelement(name foo, xmlattributes(current_date as bar), 'cont', 'ent');

             xmlelement
-------------------------------------
 &lt;foo bar=""2007-01-26""&gt;content&lt;/foo&gt;
</pre>
   <p>
    Element and attribute names that are not valid XML names are escaped by replacing the offending characters by the sequence
    <code class=""literal"">
     _x
     <em class=""replaceable"">
      <code>
       HHHH
      </code>
     </em>
     _
    </code>
    , where
    <em class=""replaceable"">
     <code>
      HHHH
     </code>
    </em>
    is the character's Unicode codepoint in hexadecimal notation. For example:
   </p>
   <pre class=""screen"">
SELECT xmlelement(name ""foo$bar"", xmlattributes('xyz' as ""a&amp;b""));

            xmlelement
----------------------------------
 &lt;foo_x0024_bar a_x0026_b=""xyz""/&gt;
</pre>
   <p>
    An explicit attribute name need not be specified if the attribute value is a column reference, in which case the column's name will be used as the attribute name by default. In other cases, the attribute must be given an explicit name. So this example is valid:
   </p>
   <pre class=""screen"">
CREATE TABLE test (a xml, b xml);
SELECT xmlelement(name test, xmlattributes(a, b)) FROM test;
</pre>
   <p>
    But these are not:
   </p>
   <pre class=""screen"">
SELECT xmlelement(name test, xmlattributes('constant'), a, b) FROM test;
SELECT xmlelement(name test, xmlattributes(func(a, b))) FROM test;
</pre>
   <p>
    Element content, if specified, will be formatted according to its data type. If the content is itself of type
    <code class=""type"">
     xml
    </code>
    , complex XML documents can be constructed. For example:
   </p>
   <pre class=""screen"">
SELECT xmlelement(name foo, xmlattributes('xyz' as bar),
                            xmlelement(name abc),
                            xmlcomment('test'),
                            xmlelement(name xyz));

                  xmlelement
----------------------------------------------
 &lt;foo bar=""xyz""&gt;&lt;abc/&gt;&lt;!--test--&gt;&lt;xyz/&gt;&lt;/foo&gt;
</pre>
   <p>
    Content of other types will be formatted into valid XML character data. This means in particular that the characters &lt;, &gt;, and &amp; will be converted to entities. Binary data (data type
    <code class=""type"">
     bytea
    </code>
    ) will be represented in base64 or hex encoding, depending on the setting of the configuration parameter
    <a class=""xref"" href=""runtime-config-client.html#GUC-XMLBINARY"">
     xmlbinary
    </a>
    . The particular behavior for individual data types is expected to evolve in order to align the PostgreSQL mappings with those specified in SQL:2006 and later, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-CASTS"" title=""D.3.1.3. Mappings between SQL and XML Data Types and Values"">
     Section D.3.1.3
    </a>
    .
   </p>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLFOREST"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.5.
       <code class=""literal"">
        xmlforest
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLFOREST"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.7.2"" name=""id-1.5.8.21.5.7.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlforest</code> ( <em class=""replaceable""><code>content</code></em> [<span class=""optional""> <code class=""literal"">AS</code> <em class=""replaceable""><code>name</code></em> </span>] [<span class=""optional"">, ...</span>] ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The
    <code class=""function"">
     xmlforest
    </code>
    expression produces an XML forest (sequence) of elements using the given names and content. As for
    <code class=""function"">
     xmlelement
    </code>
    , each
    <em class=""replaceable"">
     <code>
      name
     </code>
    </em>
    must be a simple identifier, while the
    <em class=""replaceable"">
     <code>
      content
     </code>
    </em>
    expressions can have any data type.
   </p>
   <p>
    Examples:
   </p>
   <pre class=""screen"">
SELECT xmlforest('abc' AS foo, 123 AS bar);

          xmlforest
------------------------------
 &lt;foo&gt;abc&lt;/foo&gt;&lt;bar&gt;123&lt;/bar&gt;


SELECT xmlforest(table_name, column_name)
FROM information_schema.columns
WHERE table_schema = 'pg_catalog';

                                xmlforest
------------------------------------​-----------------------------------
 &lt;table_name&gt;pg_authid&lt;/table_name&gt;​&lt;column_name&gt;rolname&lt;/column_name&gt;
 &lt;table_name&gt;pg_authid&lt;/table_name&gt;​&lt;column_name&gt;rolsuper&lt;/column_name&gt;
 ...
</pre>
   <p>
    As seen in the second example, the element name can be omitted if the content value is a column reference, in which case the column name is used by default. Otherwise, a name must be specified.
   </p>
   <p>
    Element names that are not valid XML names are escaped as shown for
    <code class=""function"">
     xmlelement
    </code>
    above. Similarly, content data is escaped to make valid XML content, unless it is already of type
    <code class=""type"">
     xml
    </code>
    .
   </p>
   <p>
    Note that XML forests are not valid XML documents if they consist of more than one element, so it might be useful to wrap
    <code class=""function"">
     xmlforest
    </code>
    expressions in
    <code class=""function"">
     xmlelement
    </code>
    .
   </p>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLPI"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.6.
       <code class=""literal"">
        xmlpi
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLPI"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.8.2"" name=""id-1.5.8.21.5.8.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlpi</code> ( <code class=""literal"">NAME</code> <em class=""replaceable""><code>name</code></em> [<span class=""optional"">, <em class=""replaceable""><code>content</code></em> </span>] ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The
    <code class=""function"">
     xmlpi
    </code>
    expression creates an XML processing instruction. As for
    <code class=""function"">
     xmlelement
    </code>
    , the
    <em class=""replaceable"">
     <code>
      name
     </code>
    </em>
    must be a simple identifier, while the
    <em class=""replaceable"">
     <code>
      content
     </code>
    </em>
    expression can have any data type. The
    <em class=""replaceable"">
     <code>
      content
     </code>
    </em>
    , if present, must not contain the character sequence
    <code class=""literal"">
     ?&gt;
    </code>
    .
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmlpi(name php, 'echo ""hello world"";');

            xmlpi
-----------------------------
 &lt;?php echo ""hello world"";?&gt;
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-XMLROOT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.7.
       <code class=""literal"">
        xmlroot
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-XMLROOT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.9.2"" name=""id-1.5.8.21.5.9.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlroot</code> ( <code class=""type"">xml</code>, <code class=""literal"">VERSION</code> {<code class=""type"">text</code>|<code class=""literal"">NO VALUE</code>} [<span class=""optional"">, <code class=""literal"">STANDALONE</code> {<code class=""literal"">YES</code>|<code class=""literal"">NO</code>|<code class=""literal"">NO VALUE</code>} </span>] ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The
    <code class=""function"">
     xmlroot
    </code>
    expression alters the properties of the root node of an XML value. If a version is specified, it replaces the value in the root node's version declaration; if a standalone setting is specified, it replaces the value in the root node's standalone declaration.
   </p>
   <pre class=""screen"">
SELECT xmlroot(xmlparse(document '&lt;?xml version=""1.1""?&gt;&lt;content&gt;abc&lt;/content&gt;'),
               version '1.0', standalone yes);

                xmlroot
----------------------------------------
 &lt;?xml version=""1.0"" standalone=""yes""?&gt;
 &lt;content&gt;abc&lt;/content&gt;
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-XML-XMLAGG"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.1.8.
       <code class=""literal"">
        xmlagg
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-XML-XMLAGG"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.5.10.2"" name=""id-1.5.8.21.5.10.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xmlagg</code> ( <code class=""type"">xml</code> ) → <code class=""returnvalue"">xml</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xmlagg
    </code>
    is, unlike the other functions described here, an aggregate function. It concatenates the input values to the aggregate function call, much like
    <code class=""function"">
     xmlconcat
    </code>
    does, except that concatenation occurs across rows rather than across expressions in a single row. See
    <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
     Section 9.21
    </a>
    for additional information about aggregate functions.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
CREATE TABLE test (y int, x xml);
INSERT INTO test VALUES (1, '&lt;foo&gt;abc&lt;/foo&gt;');
INSERT INTO test VALUES (2, '&lt;bar/&gt;');
SELECT xmlagg(x) FROM test;
        xmlagg
----------------------
 &lt;foo&gt;abc&lt;/foo&gt;&lt;bar/&gt;
</pre>
   <p>
    To determine the order of the concatenation, an
    <code class=""literal"">
     ORDER BY
    </code>
    clause may be added to the aggregate call as described in
    <a class=""xref"" href=""sql-expressions.html#SYNTAX-AGGREGATES"" title=""4.2.7. Aggregate Expressions"">
     Section 4.2.7
    </a>
    . For example:
   </p>
   <pre class=""screen"">
SELECT xmlagg(x ORDER BY y DESC) FROM test;
        xmlagg
----------------------
 &lt;bar/&gt;&lt;foo&gt;abc&lt;/foo&gt;
</pre>
   <p>
    The following non-standard approach used to be recommended in previous versions, and may still be useful in specific cases:
   </p>
   <pre class=""screen"">
SELECT xmlagg(x) FROM (SELECT * FROM test ORDER BY y DESC) AS tab;
        xmlagg
----------------------
 &lt;bar/&gt;&lt;foo&gt;abc&lt;/foo&gt;
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-XML-PREDICATES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.15.2. XML Predicates
      <a class=""id_link"" href=""#FUNCTIONS-XML-PREDICATES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The expressions described in this section check properties of
   <code class=""type"">
    xml
   </code>
   values.
  </p>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-IS-DOCUMENT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.2.1.
       <code class=""literal"">
        IS DOCUMENT
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-IS-DOCUMENT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.6.3.2"" name=""id-1.5.8.21.6.3.2"">
   </a>
   <pre class=""synopsis"">
<code class=""type"">xml</code> <code class=""literal"">IS DOCUMENT</code> → <code class=""returnvalue"">boolean</code>
</pre>
   <p>
    The expression
    <code class=""literal"">
     IS DOCUMENT
    </code>
    returns true if the argument XML value is a proper XML document, false if it is not (that is, it is a content fragment), or null if the argument is null. See
    <a class=""xref"" href=""datatype-xml.html"" title=""8.13. XML Type"">
     Section 8.13
    </a>
    about the difference between documents and content fragments.
   </p>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-PRODUCING-XML-IS-NOT-DOCUMENT"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.2.2.
       <code class=""literal"">
        IS NOT DOCUMENT
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-PRODUCING-XML-IS-NOT-DOCUMENT"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.6.4.2"" name=""id-1.5.8.21.6.4.2"">
   </a>
   <pre class=""synopsis"">
<code class=""type"">xml</code> <code class=""literal"">IS NOT DOCUMENT</code> → <code class=""returnvalue"">boolean</code>
</pre>
   <p>
    The expression
    <code class=""literal"">
     IS NOT DOCUMENT
    </code>
    returns false if the argument XML value is a proper XML document, true if it is not (that is, it is a content fragment), or null if the argument is null.
   </p>
  </div>
  <div class=""sect3"" id=""XML-EXISTS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.2.3.
       <code class=""literal"">
        XMLEXISTS
       </code>
       <a class=""id_link"" href=""#XML-EXISTS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.6.5.2"" name=""id-1.5.8.21.6.5.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">XMLEXISTS</code> ( <code class=""type"">text</code> <code class=""literal"">PASSING</code> [<span class=""optional""><code class=""literal"">BY</code> {<code class=""literal"">REF</code>|<code class=""literal"">VALUE</code>}</span>] <code class=""type"">xml</code> [<span class=""optional""><code class=""literal"">BY</code> {<code class=""literal"">REF</code>|<code class=""literal"">VALUE</code>}</span>] ) → <code class=""returnvalue"">boolean</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xmlexists
    </code>
    evaluates an XPath 1.0 expression (the first argument), with the passed XML value as its context item. The function returns false if the result of that evaluation yields an empty node-set, true if it yields any other value. The function returns null if any argument is null. A nonnull value passed as the context item must be an XML document, not a content fragment or any non-XML value.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xmlexists('//town[text() = ''Toronto'']' PASSING BY VALUE '&lt;towns&gt;&lt;town&gt;Toronto&lt;/town&gt;&lt;town&gt;Ottawa&lt;/town&gt;&lt;/towns&gt;');

 xmlexists
------------
 t
(1 row)
</pre>
   <p>
    The
    <code class=""literal"">
     BY REF
    </code>
    and
    <code class=""literal"">
     BY VALUE
    </code>
    clauses are accepted in
    <span class=""productname"">
     PostgreSQL
    </span>
    , but are ignored, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-POSTGRESQL"" title=""D.3.2. Incidental Limits of the Implementation"">
     Section D.3.2
    </a>
    .
   </p>
   <p>
    In the SQL standard, the
    <code class=""function"">
     xmlexists
    </code>
    function evaluates an expression in the XML Query language, but
    <span class=""productname"">
     PostgreSQL
    </span>
    allows only an XPath 1.0 expression, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-XPATH1"" title=""D.3.1. Queries Are Restricted to XPath 1.0"">
     Section D.3.1
    </a>
    .
   </p>
  </div>
  <div class=""sect3"" id=""XML-IS-WELL-FORMED"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.2.4.
       <code class=""literal"">
        xml_is_well_formed
       </code>
       <a class=""id_link"" href=""#XML-IS-WELL-FORMED"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.6.6.2"" name=""id-1.5.8.21.6.6.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.21.6.6.3"" name=""id-1.5.8.21.6.6.3"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.21.6.6.4"" name=""id-1.5.8.21.6.6.4"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xml_is_well_formed</code> ( <code class=""type"">text</code> ) → <code class=""returnvalue"">boolean</code>
<code class=""function"">xml_is_well_formed_document</code> ( <code class=""type"">text</code> ) → <code class=""returnvalue"">boolean</code>
<code class=""function"">xml_is_well_formed_content</code> ( <code class=""type"">text</code> ) → <code class=""returnvalue"">boolean</code>
</pre>
   <p>
    These functions check whether a
    <code class=""type"">
     text
    </code>
    string represents well-formed XML, returning a Boolean result.
    <code class=""function"">
     xml_is_well_formed_document
    </code>
    checks for a well-formed document, while
    <code class=""function"">
     xml_is_well_formed_content
    </code>
    checks for well-formed content.
    <code class=""function"">
     xml_is_well_formed
    </code>
    does the former if the
    <a class=""xref"" href=""runtime-config-client.html#GUC-XMLOPTION"">
     xmloption
    </a>
    configuration parameter is set to
    <code class=""literal"">
     DOCUMENT
    </code>
    , or the latter if it is set to
    <code class=""literal"">
     CONTENT
    </code>
    . This means that
    <code class=""function"">
     xml_is_well_formed
    </code>
    is useful for seeing whether a simple cast to type
    <code class=""type"">
     xml
    </code>
    will succeed, whereas the other two functions are useful for seeing whether the corresponding variants of
    <code class=""function"">
     XMLPARSE
    </code>
    will succeed.
   </p>
   <p>
    Examples:
   </p>
   <pre class=""screen"">
SET xmloption TO DOCUMENT;
SELECT xml_is_well_formed('&lt;&gt;');
 xml_is_well_formed
--------------------
 f
(1 row)

SELECT xml_is_well_formed('&lt;abc/&gt;');
 xml_is_well_formed
--------------------
 t
(1 row)

SET xmloption TO CONTENT;
SELECT xml_is_well_formed('abc');
 xml_is_well_formed
--------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg=""http://postgresql.org/stuff""&gt;bar&lt;/pg:foo&gt;');
 xml_is_well_formed_document
-----------------------------
 t
(1 row)

SELECT xml_is_well_formed_document('&lt;pg:foo xmlns:pg=""http://postgresql.org/stuff""&gt;bar&lt;/my:foo&gt;');
 xml_is_well_formed_document
-----------------------------
 f
(1 row)
</pre>
   <p>
    The last example shows that the checks include whether namespaces are correctly matched.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-XML-PROCESSING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.15.3. Processing XML
      <a class=""id_link"" href=""#FUNCTIONS-XML-PROCESSING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   To process values of data type
   <code class=""type"">
    xml
   </code>
   , PostgreSQL offers the functions
   <code class=""function"">
    xpath
   </code>
   and
   <code class=""function"">
    xpath_exists
   </code>
   , which evaluate XPath 1.0 expressions, and the
   <code class=""function"">
    XMLTABLE
   </code>
   table function.
  </p>
  <div class=""sect3"" id=""FUNCTIONS-XML-PROCESSING-XPATH"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.3.1.
       <code class=""literal"">
        xpath
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-XML-PROCESSING-XPATH"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.7.3.2"" name=""id-1.5.8.21.7.3.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xpath</code> ( <em class=""parameter""><code>xpath</code></em> <code class=""type"">text</code>, <em class=""parameter""><code>xml</code></em> <code class=""type"">xml</code> [<span class=""optional"">, <em class=""parameter""><code>nsarray</code></em> <code class=""type"">text[]</code> </span>] ) → <code class=""returnvalue"">xml[]</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xpath
    </code>
    evaluates the XPath 1.0 expression
    <em class=""parameter"">
     <code>
      xpath
     </code>
    </em>
    (given as text) against the XML value
    <em class=""parameter"">
     <code>
      xml
     </code>
    </em>
    . It returns an array of XML values corresponding to the node-set produced by the XPath expression. If the XPath expression returns a scalar value rather than a node-set, a single-element array is returned.
   </p>
   <p>
    The second argument must be a well formed XML document. In particular, it must have a single root node element.
   </p>
   <p>
    The optional third argument of the function is an array of namespace mappings. This array should be a two-dimensional
    <code class=""type"">
     text
    </code>
    array with the length of the second axis being equal to 2 (i.e., it should be an array of arrays, each of which consists of exactly 2 elements). The first element of each array entry is the namespace name (alias), the second the namespace URI. It is not required that aliases provided in this array be the same as those being used in the XML document itself (in other words, both in the XML document and in the
    <code class=""function"">
     xpath
    </code>
    function context, aliases are
    <span class=""emphasis"">
     <em>
      local
     </em>
    </span>
    ).
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xpath('/my:a/text()', '&lt;my:a xmlns:my=""http://example.com""&gt;test&lt;/my:a&gt;',
             ARRAY[ARRAY['my', 'http://example.com']]);

 xpath
--------
 {test}
(1 row)
</pre>
   <p>
    To deal with default (anonymous) namespaces, do something like this:
   </p>
   <pre class=""screen"">
SELECT xpath('//mydefns:b/text()', '&lt;a xmlns=""http://example.com""&gt;&lt;b&gt;test&lt;/b&gt;&lt;/a&gt;',
             ARRAY[ARRAY['mydefns', 'http://example.com']]);

 xpath
--------
 {test}
(1 row)
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-XML-PROCESSING-XPATH-EXISTS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.3.2.
       <code class=""literal"">
        xpath_exists
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-XML-PROCESSING-XPATH-EXISTS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.7.4.2"" name=""id-1.5.8.21.7.4.2"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">xpath_exists</code> ( <em class=""parameter""><code>xpath</code></em> <code class=""type"">text</code>, <em class=""parameter""><code>xml</code></em> <code class=""type"">xml</code> [<span class=""optional"">, <em class=""parameter""><code>nsarray</code></em> <code class=""type"">text[]</code> </span>] ) → <code class=""returnvalue"">boolean</code>
</pre>
   <p>
    The function
    <code class=""function"">
     xpath_exists
    </code>
    is a specialized form of the
    <code class=""function"">
     xpath
    </code>
    function. Instead of returning the individual XML values that satisfy the XPath 1.0 expression, this function returns a Boolean indicating whether the query was satisfied or not (specifically, whether it produced any value other than an empty node-set). This function is equivalent to the
    <code class=""literal"">
     XMLEXISTS
    </code>
    predicate, except that it also offers support for a namespace mapping argument.
   </p>
   <p>
    Example:
   </p>
   <pre class=""screen"">
SELECT xpath_exists('/my:a/text()', '&lt;my:a xmlns:my=""http://example.com""&gt;test&lt;/my:a&gt;',
                     ARRAY[ARRAY['my', 'http://example.com']]);

 xpath_exists
--------------
 t
(1 row)
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-XML-PROCESSING-XMLTABLE"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.15.3.3.
       <code class=""literal"">
        xmltable
       </code>
       <a class=""id_link"" href=""#FUNCTIONS-XML-PROCESSING-XMLTABLE"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.21.7.5.2"" name=""id-1.5.8.21.7.5.2"">
   </a>
   <a class=""indexterm"" id=""id-1.5.8.21.7.5.3"" name=""id-1.5.8.21.7.5.3"">
   </a>
   <pre class=""synopsis"">
<code class=""function"">XMLTABLE</code> (
    [<span class=""optional""> <code class=""literal"">XMLNAMESPACES</code> ( <em class=""replaceable""><code>namespace_uri</code></em> <code class=""literal"">AS</code> <em class=""replaceable""><code>namespace_name</code></em> [<span class=""optional"">, ...</span>] ), </span>]
    <em class=""replaceable""><code>row_expression</code></em> <code class=""literal"">PASSING</code> [<span class=""optional""><code class=""literal"">BY</code> {<code class=""literal"">REF</code>|<code class=""literal"">VALUE</code>}</span>] <em class=""replaceable""><code>document_expression</code></em> [<span class=""optional""><code class=""literal"">BY</code> {<code class=""literal"">REF</code>|<code class=""literal"">VALUE</code>}</span>]
    <code class=""literal"">COLUMNS</code> <em class=""replaceable""><code>name</code></em> { <em class=""replaceable""><code>type</code></em> [<span class=""optional""><code class=""literal"">PATH</code> <em class=""replaceable""><code>column_expression</code></em></span>] [<span class=""optional""><code class=""literal"">DEFAULT</code> <em class=""replaceable""><code>default_expression</code></em></span>] [<span class=""optional""><code class=""literal"">NOT NULL</code> | <code class=""literal"">NULL</code></span>]
                  | <code class=""literal"">FOR ORDINALITY</code> }
            [<span class=""optional"">, ...</span>]
) → <code class=""returnvalue"">setof record</code>
</pre>
   <p>
    The
    <code class=""function"">
     xmltable
    </code>
    expression produces a table based on an XML value, an XPath filter to extract rows, and a set of column definitions. Although it syntactically resembles a function, it can only appear as a table in a query's
    <code class=""literal"">
     FROM
    </code>
    clause.
   </p>
   <p>
    The optional
    <code class=""literal"">
     XMLNAMESPACES
    </code>
    clause gives a comma-separated list of namespace definitions, where each
    <em class=""replaceable"">
     <code>
      namespace_uri
     </code>
    </em>
    is a
    <code class=""type"">
     text
    </code>
    expression and each
    <em class=""replaceable"">
     <code>
      namespace_name
     </code>
    </em>
    is a simple identifier. It specifies the XML namespaces used in the document and their aliases. A default namespace specification is not currently supported.
   </p>
   <p>
    The required
    <em class=""replaceable"">
     <code>
      row_expression
     </code>
    </em>
    argument is an XPath 1.0 expression (given as
    <code class=""type"">
     text
    </code>
    ) that is evaluated, passing the XML value
    <em class=""replaceable"">
     <code>
      document_expression
     </code>
    </em>
    as its context item, to obtain a set of XML nodes. These nodes are what
    <code class=""function"">
     xmltable
    </code>
    transforms into output rows. No rows will be produced if the
    <em class=""replaceable"">
     <code>
      document_expression
     </code>
    </em>
    is null, nor if the
    <em class=""replaceable"">
     <code>
      row_expression
     </code>
    </em>
    produces an empty node-set or any value other than a node-set.
   </p>
   <p>
    <em class=""replaceable"">
     <code>
      document_expression
     </code>
    </em>
    provides the context item for the
    <em class=""replaceable"">
     <code>
      row_expression
     </code>
    </em>
    . It must be a well-formed XML document; fragments/forests are not accepted. The
    <code class=""literal"">
     BY REF
    </code>
    and
    <code class=""literal"">
     BY VALUE
    </code>
    clauses are accepted but ignored, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-POSTGRESQL"" title=""D.3.2. Incidental Limits of the Implementation"">
     Section D.3.2
    </a>
    .
   </p>
   <p>
    In the SQL standard, the
    <code class=""function"">
     xmltable
    </code>
    function evaluates expressions in the XML Query language, but
    <span class=""productname"">
     PostgreSQL
    </span>
    allows only XPath 1.0 expressions, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-XPATH1"" title=""D.3.1. Queries Are Restricted to XPath 1.0"">
     Section D.3.1
    </a>
    .
   </p>
   <p>
    The required
    <code class=""literal"">
     COLUMNS
    </code>
    clause specifies the column(s) that will be produced in the output table. See the syntax summary above for the format. A name is required for each column, as is a data type (unless
    <code class=""literal"">
     FOR ORDINALITY
    </code>
    is specified, in which case type
    <code class=""type"">
     integer
    </code>
    is implicit). The path, default and nullability clauses are optional.
   </p>
   <p>
    A column marked
    <code class=""literal"">
     FOR ORDINALITY
    </code>
    will be populated with row numbers, starting with 1, in the order of nodes retrieved from the
    <em class=""replaceable"">
     <code>
      row_expression
     </code>
    </em>
    's result node-set. At most one column may be marked
    <code class=""literal"">
     FOR ORDINALITY
    </code>
    .
   </p>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     XPath 1.0 does not specify an order for nodes in a node-set, so code that relies on a particular order of the results will be implementation-dependent. Details can be found in
     <a class=""xref"" href=""xml-limits-conformance.html#XML-XPATH-1-SPECIFICS"" title=""D.3.1.2. Restriction of XPath to 1.0"">
      Section D.3.1.2
     </a>
     .
    </p>
   </div>
   <p>
    The
    <em class=""replaceable"">
     <code>
      column_expression
     </code>
    </em>
    for a column is an XPath 1.0 expression that is evaluated for each row, with the current node from the
    <em class=""replaceable"">
     <code>
      row_expression
     </code>
    </em>
    result as its context item, to find the value of the column. If no
    <em class=""replaceable"">
     <code>
      column_expression
     </code>
    </em>
    is given, then the column name is used as an implicit path.
   </p>
   <p>
    If a column's XPath expression returns a non-XML value (which is limited to string, boolean, or double in XPath 1.0) and the column has a PostgreSQL type other than
    <code class=""type"">
     xml
    </code>
    , the column will be set as if by assigning the value's string representation to the PostgreSQL type. (If the value is a boolean, its string representation is taken to be
    <code class=""literal"">
     1
    </code>
    or
    <code class=""literal"">
     0
    </code>
    if the output column's type category is numeric, otherwise
    <code class=""literal"">
     true
    </code>
    or
    <code class=""literal"">
     false
    </code>
    .)
   </p>
   <p>
    If a column's XPath expression returns a non-empty set of XML nodes and the column's PostgreSQL type is
    <code class=""type"">
     xml
    </code>
    , the column will be assigned the expression result exactly, if it is of document or content form.
    <a class=""footnote"" href=""#ftn.id-1.5.8.21.7.5.15.2"">
     <sup class=""footnote"" id=""id-1.5.8.21.7.5.15.2"">
      [8]
     </sup>
    </a>
   </p>
   <p>
    A non-XML result assigned to an
    <code class=""type"">
     xml
    </code>
    output column produces content, a single text node with the string value of the result. An XML result assigned to a column of any other type may not have more than one node, or an error is raised. If there is exactly one node, the column will be set as if by assigning the node's string value (as defined for the XPath 1.0
    <code class=""function"">
     string
    </code>
    function) to the PostgreSQL type.
   </p>
   <p>
    The string value of an XML element is the concatenation, in document order, of all text nodes contained in that element and its descendants. The string value of an element with no descendant text nodes is an empty string (not
    <code class=""literal"">
     NULL
    </code>
    ). Any
    <code class=""literal"">
     xsi:nil
    </code>
    attributes are ignored. Note that the whitespace-only
    <code class=""literal"">
     text()
    </code>
    node between two non-text elements is preserved, and that leading whitespace on a
    <code class=""literal"">
     text()
    </code>
    node is not flattened. The XPath 1.0
    <code class=""function"">
     string
    </code>
    function may be consulted for the rules defining the string value of other XML node types and non-XML values.
   </p>
   <p>
    The conversion rules presented here are not exactly those of the SQL standard, as discussed in
    <a class=""xref"" href=""xml-limits-conformance.html#FUNCTIONS-XML-LIMITS-CASTS"" title=""D.3.1.3. Mappings between SQL and XML Data Types and Values"">
     Section D.3.1.3
    </a>
    .
   </p>
   <p>
    If the path expression returns an empty node-set (typically, when it does not match) for a given row, the column will be set to
    <code class=""literal"">
     NULL
    </code>
    , unless a
    <em class=""replaceable"">
     <code>
      default_expression
     </code>
    </em>
    is specified; then the value resulting from evaluating that expression is used.
   </p>
   <p>
    A
    <em class=""replaceable"">
     <code>
      default_expression
     </code>
    </em>
    , rather than being evaluated immediately when
    <code class=""function"">
     xmltable
    </code>
    is called, is evaluated each time a default is needed for the column. If the expression qualifies as stable or immutable, the repeat evaluation may be skipped. This means that you can usefully use volatile functions like
    <code class=""function"">
     nextval
    </code>
    in
    <em class=""replaceable"">
     <code>
      default_expression
     </code>
    </em>
    .
   </p>
   <p>
    Columns may be marked
    <code class=""literal"">
     NOT NULL
    </code>
    . If the
    <em class=""replaceable"">
     <code>
      column_expression
     </code>
    </em>
    for a
    <code class=""literal"">
     NOT NULL
    </code>
    column does not match anything and there is no
    <code class=""literal"">
     DEFAULT
    </code>
    or the
    <em class=""replaceable"">
     <code>
      default_expression
     </code>
    </em>
    also evaluates to null, an error is reported.
   </p>
   <p>
    Examples:
   </p>
   <pre class=""screen"">
CREATE TABLE xmldata AS SELECT
xml $$
&lt;ROWS&gt;
  &lt;ROW id=""1""&gt;
    &lt;COUNTRY_ID&gt;AU&lt;/COUNTRY_ID&gt;
    &lt;COUNTRY_NAME&gt;Australia&lt;/COUNTRY_NAME&gt;
  &lt;/ROW&gt;
  &lt;ROW id=""5""&gt;
    &lt;COUNTRY_ID&gt;JP&lt;/COUNTRY_ID&gt;
    &lt;COUNTRY_NAME&gt;Japan&lt;/COUNTRY_NAME&gt;
    &lt;PREMIER_NAME&gt;Shinzo Abe&lt;/PREMIER_NAME&gt;
    &lt;SIZE unit=""sq_mi""&gt;145935&lt;/SIZE&gt;
  &lt;/ROW&gt;
  &lt;ROW id=""6""&gt;
    &lt;COUNTRY_ID&gt;SG&lt;/COUNTRY_ID&gt;
    &lt;COUNTRY_NAME&gt;Singapore&lt;/COUNTRY_NAME&gt;
    &lt;SIZE unit=""sq_km""&gt;697&lt;/SIZE&gt;
  &lt;/ROW&gt;
&lt;/ROWS&gt;
$$ AS data;

SELECT xmltable.*
  FROM xmldata,
       XMLTABLE('//ROWS/ROW'
                PASSING data
                COLUMNS id int PATH '@id',
                        ordinality FOR ORDINALITY,
                        ""COUNTRY_NAME"" text,
                        country_id text PATH 'COUNTRY_ID',
                        size_sq_km float PATH 'SIZE[@unit = ""sq_km""]',
                        size_other text PATH
                             'concat(SIZE[@unit!=""sq_km""], "" "", SIZE[@unit!=""sq_km""]/@unit)',
                        premier_name text PATH 'PREMIER_NAME' DEFAULT 'not specified');

 id | ordinality | COUNTRY_NAME | country_id | size_sq_km |  size_other  | premier_name
----+------------+--------------+------------+------------+--------------+---------------
  1 |          1 | Australia    | AU         |            |              | not specified
  5 |          2 | Japan        | JP         |            | 145935 sq_mi | Shinzo Abe
  6 |          3 | Singapore    | SG         |        697 |              | not specified
</pre>
   <p>
    The following example shows concatenation of multiple text() nodes, usage of the column name as XPath filter, and the treatment of whitespace, XML comments and processing instructions:
   </p>
   <pre class=""screen"">
CREATE TABLE xmlelements AS SELECT
xml $$
  &lt;root&gt;
   &lt;element&gt;  Hello&lt;!-- xyxxz --&gt;2a2&lt;?aaaaa?&gt; &lt;!--x--&gt;  bbb&lt;x&gt;xxx&lt;/x&gt;CC  &lt;/element&gt;
  &lt;/root&gt;
$$ AS data;

SELECT xmltable.*
  FROM xmlelements, XMLTABLE('/root' PASSING data COLUMNS element text);
         element
-------------------------
   Hello2a2   bbbxxxCC
</pre>
   <p>
    The following example illustrates how the
    <code class=""literal"">
     XMLNAMESPACES
    </code>
    clause can be used to specify a list of namespaces used in the XML document as well as in the XPath expressions:
   </p>
   <pre class=""screen"">
WITH xmldata(data) AS (VALUES ('
&lt;example xmlns=""http://example.com/myns"" xmlns:B=""http://example.com/b""&gt;
 &lt;item foo=""1"" B:bar=""2""/&gt;
 &lt;item foo=""3"" B:bar=""4""/&gt;
 &lt;item foo=""4"" B:bar=""5""/&gt;
&lt;/example&gt;'::xml)
)
SELECT xmltable.*
  FROM XMLTABLE(XMLNAMESPACES('http://example.com/myns' AS x,
                              'http://example.com/b' AS ""B""),
             '/x:example/x:item'
                PASSING (SELECT data FROM xmldata)
                COLUMNS foo int PATH '@foo',
                  bar int PATH '@B:bar');
 foo | bar
-----+-----
   1 |   2
   3 |   4
   4 |   5
(3 rows)
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-XML-MAPPING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.15.4. Mapping Tables to XML
      <a class=""id_link"" href=""#FUNCTIONS-XML-MAPPING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.21.8.2"" name=""id-1.5.8.21.8.2"">
  </a>
  <p>
   The following functions map the contents of relational tables to XML values. They can be thought of as XML export functionality:
  </p>
  <pre class=""synopsis"">
<code class=""function"">table_to_xml</code> ( <em class=""parameter""><code>table</code></em> <code class=""type"">regclass</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
               <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">query_to_xml</code> ( <em class=""parameter""><code>query</code></em> <code class=""type"">text</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
               <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">cursor_to_xml</code> ( <em class=""parameter""><code>cursor</code></em> <code class=""type"">refcursor</code>, <em class=""parameter""><code>count</code></em> <code class=""type"">integer</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
  <p>
   <code class=""function"">
    table_to_xml
   </code>
   maps the content of the named table, passed as parameter
   <em class=""parameter"">
    <code>
     table
    </code>
   </em>
   . The
   <code class=""type"">
    regclass
   </code>
   type accepts strings identifying tables using the usual notation, including optional schema qualification and double quotes (see
   <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
    Section 8.19
   </a>
   for details).
   <code class=""function"">
    query_to_xml
   </code>
   executes the query whose text is passed as parameter
   <em class=""parameter"">
    <code>
     query
    </code>
   </em>
   and maps the result set.
   <code class=""function"">
    cursor_to_xml
   </code>
   fetches the indicated number of rows from the cursor specified by the parameter
   <em class=""parameter"">
    <code>
     cursor
    </code>
   </em>
   . This variant is recommended if large tables have to be mapped, because the result value is built up in memory by each function.
  </p>
  <p>
   If
   <em class=""parameter"">
    <code>
     tableforest
    </code>
   </em>
   is false, then the resulting XML document looks like this:
  </p>
  <pre class=""screen"">
&lt;tablename&gt;
  &lt;row&gt;
    &lt;columnname1&gt;data&lt;/columnname1&gt;
    &lt;columnname2&gt;data&lt;/columnname2&gt;
  &lt;/row&gt;

  &lt;row&gt;
    ...
  &lt;/row&gt;

  ...
&lt;/tablename&gt;
</pre>
  <p>
   If
   <em class=""parameter"">
    <code>
     tableforest
    </code>
   </em>
   is true, the result is an XML content fragment that looks like this:
  </p>
  <pre class=""screen"">
&lt;tablename&gt;
  &lt;columnname1&gt;data&lt;/columnname1&gt;
  &lt;columnname2&gt;data&lt;/columnname2&gt;
&lt;/tablename&gt;

&lt;tablename&gt;
  ...
&lt;/tablename&gt;

...
</pre>
  <p>
   If no table name is available, that is, when mapping a query or a cursor, the string
   <code class=""literal"">
    table
   </code>
   is used in the first format,
   <code class=""literal"">
    row
   </code>
   in the second format.
  </p>
  <p>
   The choice between these formats is up to the user. The first format is a proper XML document, which will be important in many applications. The second format tends to be more useful in the
   <code class=""function"">
    cursor_to_xml
   </code>
   function if the result values are to be reassembled into one document later on. The functions for producing XML content discussed above, in particular
   <code class=""function"">
    xmlelement
   </code>
   , can be used to alter the results to taste.
  </p>
  <p>
   The data values are mapped in the same way as described for the function
   <code class=""function"">
    xmlelement
   </code>
   above.
  </p>
  <p>
   The parameter
   <em class=""parameter"">
    <code>
     nulls
    </code>
   </em>
   determines whether null values should be included in the output. If true, null values in columns are represented as:
  </p>
  <pre class=""screen"">
&lt;columnname xsi:nil=""true""/&gt;
</pre>
  <p>
   where
   <code class=""literal"">
    xsi
   </code>
   is the XML namespace prefix for XML Schema Instance. An appropriate namespace declaration will be added to the result value. If false, columns containing null values are simply omitted from the output.
  </p>
  <p>
   The parameter
   <em class=""parameter"">
    <code>
     targetns
    </code>
   </em>
   specifies the desired XML namespace of the result. If no particular namespace is wanted, an empty string should be passed.
  </p>
  <p>
   The following functions return XML Schema documents describing the mappings performed by the corresponding functions above:
  </p>
  <pre class=""synopsis"">
<code class=""function"">table_to_xmlschema</code> ( <em class=""parameter""><code>table</code></em> <code class=""type"">regclass</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                     <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">query_to_xmlschema</code> ( <em class=""parameter""><code>query</code></em> <code class=""type"">text</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                     <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">cursor_to_xmlschema</code> ( <em class=""parameter""><code>cursor</code></em> <code class=""type"">refcursor</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                      <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
  <p>
   It is essential that the same parameters are passed in order to obtain matching XML data mappings and XML Schema documents.
  </p>
  <p>
   The following functions produce XML data mappings and the corresponding XML Schema in one document (or forest), linked together. They can be useful where self-contained and self-describing results are wanted:
  </p>
  <pre class=""synopsis"">
<code class=""function"">table_to_xml_and_xmlschema</code> ( <em class=""parameter""><code>table</code></em> <code class=""type"">regclass</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                             <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">query_to_xml_and_xmlschema</code> ( <em class=""parameter""><code>query</code></em> <code class=""type"">text</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                             <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
  <p>
   In addition, the following functions are available to produce analogous mappings of entire schemas or the entire current database:
  </p>
  <pre class=""synopsis"">
<code class=""function"">schema_to_xml</code> ( <em class=""parameter""><code>schema</code></em> <code class=""type"">name</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">schema_to_xmlschema</code> ( <em class=""parameter""><code>schema</code></em> <code class=""type"">name</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                      <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">schema_to_xml_and_xmlschema</code> ( <em class=""parameter""><code>schema</code></em> <code class=""type"">name</code>, <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                              <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>

<code class=""function"">database_to_xml</code> ( <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                  <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">database_to_xmlschema</code> ( <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                        <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
<code class=""function"">database_to_xml_and_xmlschema</code> ( <em class=""parameter""><code>nulls</code></em> <code class=""type"">boolean</code>,
                                <em class=""parameter""><code>tableforest</code></em> <code class=""type"">boolean</code>, <em class=""parameter""><code>targetns</code></em> <code class=""type"">text</code> ) → <code class=""returnvalue"">xml</code>
</pre>
  <p>
   These functions ignore tables that are not readable by the current user. The database-wide functions additionally ignore schemas that the current user does not have
   <code class=""literal"">
    USAGE
   </code>
   (lookup) privilege for.
  </p>
  <p>
   Note that these potentially produce a lot of data, which needs to be built up in memory. When requesting content mappings of large schemas or databases, it might be worthwhile to consider mapping the tables separately instead, possibly even through a cursor.
  </p>
  <p>
   The result of a schema content mapping looks like this:
  </p>
  <pre class=""screen"">
&lt;schemaname&gt;

table1-mapping

table2-mapping

...

&lt;/schemaname&gt;</pre>
  <p>
   where the format of a table mapping depends on the
   <em class=""parameter"">
    <code>
     tableforest
    </code>
   </em>
   parameter as explained above.
  </p>
  <p>
   The result of a database content mapping looks like this:
  </p>
  <pre class=""screen"">
&lt;dbname&gt;

&lt;schema1name&gt;
  ...
&lt;/schema1name&gt;

&lt;schema2name&gt;
  ...
&lt;/schema2name&gt;

...

&lt;/dbname&gt;</pre>
  <p>
   where the schema mapping is as above.
  </p>
  <p>
   As an example of using the output produced by these functions,
   <a class=""xref"" href=""functions-xml.html#XSLT-XML-HTML"" title=""Example 9.1. XSLT Stylesheet for Converting SQL/XML Output to HTML"">
    Example 9.1
   </a>
   shows an XSLT stylesheet that converts the output of
   <code class=""function"">
    table_to_xml_and_xmlschema
   </code>
   to an HTML document containing a tabular rendition of the table data. In a similar manner, the results from these functions can be converted into other XML-based formats.
  </p>
  <div class=""example"" id=""XSLT-XML-HTML"">
   <p class=""title"">
    <strong>
     Example 9.1. XSLT Stylesheet for Converting SQL/XML Output to HTML
    </strong>
   </p>
   <div class=""example-contents"">
    <pre class=""programlisting"">
&lt;?xml version=""1.0""?&gt;
&lt;xsl:stylesheet version=""1.0""
    xmlns:xsl=""http://www.w3.org/1999/XSL/Transform""
    xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
    xmlns=""http://www.w3.org/1999/xhtml""
&gt;

  &lt;xsl:output method=""xml""
      doctype-system=""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd""
      doctype-public=""-//W3C/DTD XHTML 1.0 Strict//EN""
      indent=""yes""/&gt;

  &lt;xsl:template match=""/*""&gt;
    &lt;xsl:variable name=""schema"" select=""//xsd:schema""/&gt;
    &lt;xsl:variable name=""tabletypename""
                  select=""$schema/xsd:element[@name=name(current())]/@type""/&gt;
    &lt;xsl:variable name=""rowtypename""
                  select=""$schema/xsd:complexType[@name=$tabletypename]/xsd:sequence/xsd:element[@name='row']/@type""/&gt;

    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;&lt;xsl:value-of select=""name(current())""/&gt;&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;table&gt;
          &lt;tr&gt;
            &lt;xsl:for-each select=""$schema/xsd:complexType[@name=$rowtypename]/xsd:sequence/xsd:element/@name""&gt;
              &lt;th&gt;&lt;xsl:value-of select="".""/&gt;&lt;/th&gt;
            &lt;/xsl:for-each&gt;
          &lt;/tr&gt;

          &lt;xsl:for-each select=""row""&gt;
            &lt;tr&gt;
              &lt;xsl:for-each select=""*""&gt;
                &lt;td&gt;&lt;xsl:value-of select="".""/&gt;&lt;/td&gt;
              &lt;/xsl:for-each&gt;
            &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
        &lt;/table&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</pre>
   </div>
  </div>
  <br class=""example-break""/>
 </div>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.id-1.5.8.21.7.5.15.2"">
   <p>
    <a class=""para"" href=""#id-1.5.8.21.7.5.15.2"">
     <sup class=""para"">
      [8]
     </sup>
    </a>
    A result containing more than one element node at the top level, or non-whitespace text outside of an element, is an example of content form. An XPath result can be of neither form, for example if it returns an attribute node selected from the element that contains it. Such a result will be put into content form with each such disallowed node replaced by its string value, as defined for the XPath 1.0
    <code class=""function"">
     string
    </code>
    function.
   </p>
  </div>
 </div>
</div>
"
9. Functions and Operators,9.16. JSON Functions and Operators,https://www.postgresql.org/docs/17/functions-json.html,"<div class=""sect1"" id=""FUNCTIONS-JSON"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.16. JSON Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-JSON"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-json.html#FUNCTIONS-JSON-PROCESSING"">
      9.16.1. Processing and Creating JSON Data
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-json.html#FUNCTIONS-SQLJSON-PATH"">
      9.16.2. The SQL/JSON Path Language
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-json.html#SQLJSON-QUERY-FUNCTIONS"">
      9.16.3. SQL/JSON Query Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-json.html#FUNCTIONS-SQLJSON-TABLE"">
      9.16.4. JSON_TABLE
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.22.2"" name=""id-1.5.8.22.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.22.3"" name=""id-1.5.8.22.3"">
 </a>
 <p>
  This section describes:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     functions and operators for processing and creating JSON data
    </p>
   </li>
   <li class=""listitem"">
    <p>
     the SQL/JSON path language
    </p>
   </li>
   <li class=""listitem"">
    <p>
     the SQL/JSON query functions
    </p>
   </li>
  </ul>
 </div>
 <p>
  To provide native support for JSON data types within the SQL environment,
  <span class=""productname"">
   PostgreSQL
  </span>
  implements the
  <em class=""firstterm"">
   SQL/JSON data model
  </em>
  . This model comprises sequences of items. Each item can hold SQL scalar values, with an additional SQL/JSON null value, and composite data structures that use JSON arrays and objects. The model is a formalization of the implied data model in the JSON specification
  <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc7159"" target=""_top"">
   RFC 7159
  </a>
  .
 </p>
 <p>
  SQL/JSON allows you to handle JSON data alongside regular SQL data, with transaction support, including:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Uploading JSON data into the database and storing it in regular SQL columns as character or binary strings.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Generating JSON objects and arrays from relational data.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Querying JSON data using SQL/JSON query functions and SQL/JSON path language expressions.
    </p>
   </li>
  </ul>
 </div>
 <p>
  To learn more about the SQL/JSON standard, see
  <a class=""xref"" href=""biblio.html#SQLTR-19075-6"" title=""SQL Technical Report"">
   [sqltr-19075-6]
  </a>
  . For details on JSON types supported in
  <span class=""productname"">
   PostgreSQL
  </span>
  , see
  <a class=""xref"" href=""datatype-json.html"" title=""8.14. JSON Types"">
   Section 8.14
  </a>
  .
 </p>
 <div class=""sect2"" id=""FUNCTIONS-JSON-PROCESSING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.16.1. Processing and Creating JSON Data
      <a class=""id_link"" href=""#FUNCTIONS-JSON-PROCESSING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSON-OP-TABLE"" title=""Table 9.45. json and jsonb Operators"">
    Table 9.45
   </a>
   shows the operators that are available for use with JSON data types (see
   <a class=""xref"" href=""datatype-json.html"" title=""8.14. JSON Types"">
    Section 8.14
   </a>
   ). In addition, the usual comparison operators shown in
   <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
    Table 9.1
   </a>
   are available for
   <code class=""type"">
    jsonb
   </code>
   , though not for
   <code class=""type"">
    json
   </code>
   . The comparison operators follow the ordering rules for B-tree operations outlined in
   <a class=""xref"" href=""datatype-json.html#JSON-INDEXING"" title=""8.14.4. jsonb Indexing"">
    Section 8.14.4
   </a>
   . See also
   <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
    Section 9.21
   </a>
   for the aggregate function
   <code class=""function"">
    json_agg
   </code>
   which aggregates record values as JSON, the aggregate function
   <code class=""function"">
    json_object_agg
   </code>
   which aggregates pairs of values into a JSON object, and their
   <code class=""type"">
    jsonb
   </code>
   equivalents,
   <code class=""function"">
    jsonb_agg
   </code>
   and
   <code class=""function"">
    jsonb_object_agg
   </code>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-JSON-OP-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.45.
     <code class=""type"">
      json
     </code>
     and
     <code class=""type"">
      jsonb
     </code>
     Operators
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""json and jsonb Operators"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Operator
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          -&gt;
         </code>
         <code class=""type"">
          integer
         </code>
         →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -&gt;
         </code>
         <code class=""type"">
          integer
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Extracts
         <em class=""parameter"">
          <code>
           n
          </code>
         </em>
         'th element of JSON array (array elements are indexed from zero, but negative integers count from the end).
        </p>
        <p>
         <code class=""literal"">
          '[{""a"":""foo""},{""b"":""bar""},{""c"":""baz""}]'::json -&gt; 2
         </code>
         →
         <code class=""returnvalue"">
          {""c"":""baz""}
         </code>
        </p>
        <p>
         <code class=""literal"">
          '[{""a"":""foo""},{""b"":""bar""},{""c"":""baz""}]'::json -&gt; -3
         </code>
         →
         <code class=""returnvalue"">
          {""a"":""foo""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          -&gt;
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -&gt;
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Extracts JSON object field with the given key.
        </p>
        <p>
         <code class=""literal"">
          '{""a"": {""b"":""foo""}}'::json -&gt; 'a'
         </code>
         →
         <code class=""returnvalue"">
          {""b"":""foo""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          -&gt;&gt;
         </code>
         <code class=""type"">
          integer
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -&gt;&gt;
         </code>
         <code class=""type"">
          integer
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Extracts
         <em class=""parameter"">
          <code>
           n
          </code>
         </em>
         'th element of JSON array, as
         <code class=""type"">
          text
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          '[1,2,3]'::json -&gt;&gt; 2
         </code>
         →
         <code class=""returnvalue"">
          3
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          -&gt;&gt;
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -&gt;&gt;
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Extracts JSON object field with the given key, as
         <code class=""type"">
          text
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          '{""a"":1,""b"":2}'::json -&gt;&gt; 'b'
         </code>
         →
         <code class=""returnvalue"">
          2
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          #&gt;
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          #&gt;
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Extracts JSON sub-object at the specified path, where path elements can be either field keys or array indexes.
        </p>
        <p>
         <code class=""literal"">
          '{""a"": {""b"": [""foo"",""bar""]}}'::json #&gt; '{a,b,1}'
         </code>
         →
         <code class=""returnvalue"">
          ""bar""
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          json
         </code>
         <code class=""literal"">
          #&gt;&gt;
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          #&gt;&gt;
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Extracts JSON sub-object at the specified path as
         <code class=""type"">
          text
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          '{""a"": {""b"": [""foo"",""bar""]}}'::json #&gt;&gt; '{a,b,1}'
         </code>
         →
         <code class=""returnvalue"">
          bar
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The field/element/path extraction operators return NULL, rather than failing, if the JSON input does not have the right structure to match the request; for example if no such key or array element exists.
   </p>
  </div>
  <p>
   Some further operators exist only for
   <code class=""type"">
    jsonb
   </code>
   , as shown in
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSONB-OP-TABLE"" title=""Table 9.46. Additional jsonb Operators"">
    Table 9.46
   </a>
   .
   <a class=""xref"" href=""datatype-json.html#JSON-INDEXING"" title=""8.14.4. jsonb Indexing"">
    Section 8.14.4
   </a>
   describes how these operators can be used to effectively search indexed
   <code class=""type"">
    jsonb
   </code>
   data.
  </p>
  <div class=""table"" id=""FUNCTIONS-JSONB-OP-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.46. Additional
     <code class=""type"">
      jsonb
     </code>
     Operators
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Additional jsonb Operators"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Operator
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          @&gt;
         </code>
         <code class=""type"">
          jsonb
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does the first JSON value contain the second? (See
         <a class=""xref"" href=""datatype-json.html#JSON-CONTAINMENT"" title=""8.14.3. jsonb Containment and Existence"">
          Section 8.14.3
         </a>
         for details about containment.)
        </p>
        <p>
         <code class=""literal"">
          '{""a"":1, ""b"":2}'::jsonb @&gt; '{""b"":2}'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          &lt;@
         </code>
         <code class=""type"">
          jsonb
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is the first JSON value contained in the second?
        </p>
        <p>
         <code class=""literal"">
          '{""b"":2}'::jsonb &lt;@ '{""a"":1, ""b"":2}'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          ?
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does the text string exist as a top-level key or array element within the JSON value?
        </p>
        <p>
         <code class=""literal"">
          '{""a"":1, ""b"":2}'::jsonb ? 'b'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
        <p>
         <code class=""literal"">
          '[""a"", ""b"", ""c""]'::jsonb ? 'b'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          ?|
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Do any of the strings in the text array exist as top-level keys or array elements?
        </p>
        <p>
         <code class=""literal"">
          '{""a"":1, ""b"":2, ""c"":3}'::jsonb ?| array['b', 'd']
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          ?&amp;
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Do all of the strings in the text array exist as top-level keys or array elements?
        </p>
        <p>
         <code class=""literal"">
          '[""a"", ""b"", ""c""]'::jsonb ?&amp; array['a', 'b']
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          ||
         </code>
         <code class=""type"">
          jsonb
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Concatenates two
         <code class=""type"">
          jsonb
         </code>
         values. Concatenating two arrays generates an array containing all the elements of each input. Concatenating two objects generates an object containing the union of their keys, taking the second object's value when there are duplicate keys. All other cases are treated by converting a non-array input into a single-element array, and then proceeding as for two arrays. Does not operate recursively: only the top-level array or object structure is merged.
        </p>
        <p>
         <code class=""literal"">
          '[""a"", ""b""]'::jsonb || '[""a"", ""d""]'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          [""a"", ""b"", ""a"", ""d""]
         </code>
        </p>
        <p>
         <code class=""literal"">
          '{""a"": ""b""}'::jsonb || '{""c"": ""d""}'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          {""a"": ""b"", ""c"": ""d""}
         </code>
        </p>
        <p>
         <code class=""literal"">
          '[1, 2]'::jsonb || '3'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          [1, 2, 3]
         </code>
        </p>
        <p>
         <code class=""literal"">
          '{""a"": ""b""}'::jsonb || '42'::jsonb
         </code>
         →
         <code class=""returnvalue"">
          [{""a"": ""b""}, 42]
         </code>
        </p>
        <p>
         To append an array to another array as a single entry, wrap it in an additional layer of array, for example:
        </p>
        <p>
         <code class=""literal"">
          '[1, 2]'::jsonb || jsonb_build_array('[3, 4]'::jsonb)
         </code>
         →
         <code class=""returnvalue"">
          [1, 2, [3, 4]]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -
         </code>
         <code class=""type"">
          text
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Deletes a key (and its value) from a JSON object, or matching string value(s) from a JSON array.
        </p>
        <p>
         <code class=""literal"">
          '{""a"": ""b"", ""c"": ""d""}'::jsonb - 'a'
         </code>
         →
         <code class=""returnvalue"">
          {""c"": ""d""}
         </code>
        </p>
        <p>
         <code class=""literal"">
          '[""a"", ""b"", ""c"", ""b""]'::jsonb - 'b'
         </code>
         →
         <code class=""returnvalue"">
          [""a"", ""c""]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Deletes all matching keys or array elements from the left operand.
        </p>
        <p>
         <code class=""literal"">
          '{""a"": ""b"", ""c"": ""d""}'::jsonb - '{a,c}'::text[]
         </code>
         →
         <code class=""returnvalue"">
          {}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          -
         </code>
         <code class=""type"">
          integer
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Deletes the array element with specified index (negative integers count from the end). Throws an error if JSON value is not an array.
        </p>
        <p>
         <code class=""literal"">
          '[""a"", ""b""]'::jsonb - 1
         </code>
         →
         <code class=""returnvalue"">
          [""a""]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          #-
         </code>
         <code class=""type"">
          text[]
         </code>
         →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Deletes the field or array element at the specified path, where path elements can be either field keys or array indexes.
        </p>
        <p>
         <code class=""literal"">
          '[""a"", {""b"":1}]'::jsonb #- '{1,b}'
         </code>
         →
         <code class=""returnvalue"">
          [""a"", {}]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          @?
         </code>
         <code class=""type"">
          jsonpath
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does JSON path return any item for the specified JSON value? (This is useful only with SQL-standard JSON path expressions, not
         <a class=""link"" href=""functions-json.html#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"" title=""9.16.2.1.1. Boolean Predicate Check Expressions"">
          predicate check expressions
         </a>
         , since those always return a value.)
        </p>
        <p>
         <code class=""literal"">
          '{""a"":[1,2,3,4,5]}'::jsonb @? '$.a[*] ? (@ &gt; 2)'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          jsonb
         </code>
         <code class=""literal"">
          @@
         </code>
         <code class=""type"">
          jsonpath
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns the result of a JSON path predicate check for the specified JSON value. (This is useful only with
         <a class=""link"" href=""functions-json.html#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"" title=""9.16.2.1.1. Boolean Predicate Check Expressions"">
          predicate check expressions
         </a>
         , not SQL-standard JSON path expressions, since it will return
         <code class=""literal"">
          NULL
         </code>
         if the path result is not a single boolean value.)
        </p>
        <p>
         <code class=""literal"">
          '{""a"":[1,2,3,4,5]}'::jsonb @@ '$.a[*] &gt; 2'
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The
    <code class=""type"">
     jsonpath
    </code>
    operators
    <code class=""literal"">
     @?
    </code>
    and
    <code class=""literal"">
     @@
    </code>
    suppress the following errors: missing object field or array element, unexpected JSON item type, datetime and numeric errors. The
    <code class=""type"">
     jsonpath
    </code>
    -related functions described below can also be told to suppress these types of errors. This behavior might be helpful when searching JSON document collections of varying structure.
   </p>
  </div>
  <p>
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSON-CREATION-TABLE"" title=""Table 9.47. JSON Creation Functions"">
    Table 9.47
   </a>
   shows the functions that are available for constructing
   <code class=""type"">
    json
   </code>
   and
   <code class=""type"">
    jsonb
   </code>
   values. Some functions in this table have a
   <code class=""literal"">
    RETURNING
   </code>
   clause, which specifies the data type returned. It must be one of
   <code class=""type"">
    json
   </code>
   ,
   <code class=""type"">
    jsonb
   </code>
   ,
   <code class=""type"">
    bytea
   </code>
   , a character string type (
   <code class=""type"">
    text
   </code>
   ,
   <code class=""type"">
    char
   </code>
   , or
   <code class=""type"">
    varchar
   </code>
   ), or a type that can be cast to
   <code class=""type"">
    json
   </code>
   . By default, the
   <code class=""type"">
    json
   </code>
   type is returned.
  </p>
  <div class=""table"" id=""FUNCTIONS-JSON-CREATION-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.47. JSON Creation Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""JSON Creation Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.1.1.1.1"" name=""id-1.5.8.22.8.9.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          to_json
         </code>
         (
         <code class=""type"">
          anyelement
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.1.1.2.1"" name=""id-1.5.8.22.8.9.2.2.1.1.2.1"">
         </a>
         <code class=""function"">
          to_jsonb
         </code>
         (
         <code class=""type"">
          anyelement
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Converts any SQL value to
         <code class=""type"">
          json
         </code>
         or
         <code class=""type"">
          jsonb
         </code>
         . Arrays and composites are converted recursively to arrays and objects (multidimensional arrays become arrays of arrays in JSON). Otherwise, if there is a cast from the SQL data type to
         <code class=""type"">
          json
         </code>
         , the cast function will be used to perform the conversion;
         <a class=""footnote"" href=""#ftn.id-1.5.8.22.8.9.2.2.1.1.3.4"">
          <sup class=""footnote"" id=""id-1.5.8.22.8.9.2.2.1.1.3.4"">
           [a]
          </sup>
         </a>
         otherwise, a scalar JSON value is produced. For any scalar other than a number, a Boolean, or a null value, the text representation will be used, with escaping as necessary to make it a valid JSON string value.
        </p>
        <p>
         <code class=""literal"">
          to_json('Fred said ""Hi.""'::text)
         </code>
         →
         <code class=""returnvalue"">
          ""Fred said \""Hi.\""""
         </code>
        </p>
        <p>
         <code class=""literal"">
          to_jsonb(row(42, 'Fred said ""Hi.""'::text))
         </code>
         →
         <code class=""returnvalue"">
          {""f1"": 42, ""f2"": ""Fred said \""Hi.\""""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.2.1.1.1"" name=""id-1.5.8.22.8.9.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          array_to_json
         </code>
         (
         <code class=""type"">
          anyarray
         </code>
         [
         <span class=""optional"">
          ,
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p>
         Converts an SQL array to a JSON array. The behavior is the same as
         <code class=""function"">
          to_json
         </code>
         except that line feeds will be added between top-level array elements if the optional boolean parameter is true.
        </p>
        <p>
         <code class=""literal"">
          array_to_json('{{1,5},{99,100}}'::int[])
         </code>
         →
         <code class=""returnvalue"">
          [[1,5],[99,100]]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.3.1.1.1"" name=""id-1.5.8.22.8.9.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          json_array
         </code>
         ( [
         <span class=""optional"">
          {
          <em class=""replaceable"">
           <code>
            value_expression
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
          </span>
          ] } [
          <span class=""optional"">
           , ...
          </span>
          ]
         </span>
         ] [
         <span class=""optional"">
          {
          <code class=""literal"">
           NULL
          </code>
          |
          <code class=""literal"">
           ABSENT
          </code>
          }
          <code class=""literal"">
           ON NULL
          </code>
         </span>
         ] [
         <span class=""optional"">
          <code class=""literal"">
           RETURNING
          </code>
          <em class=""replaceable"">
           <code>
            data_type
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            <code class=""literal"">
             ENCODING UTF8
            </code>
           </span>
           ]
          </span>
          ]
         </span>
         ])
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          json_array
         </code>
         ( [
         <span class=""optional"">
          <em class=""replaceable"">
           <code>
            query_expression
           </code>
          </em>
         </span>
         ] [
         <span class=""optional"">
          <code class=""literal"">
           RETURNING
          </code>
          <em class=""replaceable"">
           <code>
            data_type
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            <code class=""literal"">
             ENCODING UTF8
            </code>
           </span>
           ]
          </span>
          ]
         </span>
         ])
        </p>
        <p>
         Constructs a JSON array from either a series of
         <em class=""replaceable"">
          <code>
           value_expression
          </code>
         </em>
         parameters or from the results of
         <em class=""replaceable"">
          <code>
           query_expression
          </code>
         </em>
         , which must be a SELECT query returning a single column. If
         <code class=""literal"">
          ABSENT ON NULL
         </code>
         is specified, NULL values are ignored. This is always the case if a
         <em class=""replaceable"">
          <code>
           query_expression
          </code>
         </em>
         is used.
        </p>
        <p>
         <code class=""literal"">
          json_array(1,true,json '{""a"":null}')
         </code>
         →
         <code class=""returnvalue"">
          [1, true, {""a"":null}]
         </code>
        </p>
        <p>
         <code class=""literal"">
          json_array(SELECT * FROM (VALUES(1),(2)) t)
         </code>
         →
         <code class=""returnvalue"">
          [1, 2]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.4.1.1.1"" name=""id-1.5.8.22.8.9.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          row_to_json
         </code>
         (
         <code class=""type"">
          record
         </code>
         [
         <span class=""optional"">
          ,
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p>
         Converts an SQL composite value to a JSON object. The behavior is the same as
         <code class=""function"">
          to_json
         </code>
         except that line feeds will be added between top-level elements if the optional boolean parameter is true.
        </p>
        <p>
         <code class=""literal"">
          row_to_json(row(1,'foo'))
         </code>
         →
         <code class=""returnvalue"">
          {""f1"":1,""f2"":""foo""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.5.1.1.1"" name=""id-1.5.8.22.8.9.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          json_build_array
         </code>
         (
         <code class=""literal"">
          VARIADIC
         </code>
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.5.1.2.1"" name=""id-1.5.8.22.8.9.2.2.5.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_build_array
         </code>
         (
         <code class=""literal"">
          VARIADIC
         </code>
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list. Each argument is converted as per
         <code class=""function"">
          to_json
         </code>
         or
         <code class=""function"">
          to_jsonb
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          json_build_array(1, 2, 'foo', 4, 5)
         </code>
         →
         <code class=""returnvalue"">
          [1, 2, ""foo"", 4, 5]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.6.1.1.1"" name=""id-1.5.8.22.8.9.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          json_build_object
         </code>
         (
         <code class=""literal"">
          VARIADIC
         </code>
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.6.1.2.1"" name=""id-1.5.8.22.8.9.2.2.6.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_build_object
         </code>
         (
         <code class=""literal"">
          VARIADIC
         </code>
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values. Key arguments are coerced to text; value arguments are converted as per
         <code class=""function"">
          to_json
         </code>
         or
         <code class=""function"">
          to_jsonb
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          json_build_object('foo', 1, 2, row(3,'bar'))
         </code>
         →
         <code class=""returnvalue"">
          {""foo"" : 1, ""2"" : {""f1"":3,""f2"":""bar""}}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.7.1.1.1"" name=""id-1.5.8.22.8.9.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          json_object
         </code>
         ( [
         <span class=""optional"">
          {
          <em class=""replaceable"">
           <code>
            key_expression
           </code>
          </em>
          {
          <code class=""literal"">
           VALUE
          </code>
          | ':' }
          <em class=""replaceable"">
           <code>
            value_expression
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            <code class=""literal"">
             ENCODING UTF8
            </code>
           </span>
           ]
          </span>
          ] }[
          <span class=""optional"">
           , ...
          </span>
          ]
         </span>
         ] [
         <span class=""optional"">
          {
          <code class=""literal"">
           NULL
          </code>
          |
          <code class=""literal"">
           ABSENT
          </code>
          }
          <code class=""literal"">
           ON NULL
          </code>
         </span>
         ] [
         <span class=""optional"">
          {
          <code class=""literal"">
           WITH
          </code>
          |
          <code class=""literal"">
           WITHOUT
          </code>
          }
          <code class=""literal"">
           UNIQUE
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            KEYS
           </code>
          </span>
          ]
         </span>
         ] [
         <span class=""optional"">
          <code class=""literal"">
           RETURNING
          </code>
          <em class=""replaceable"">
           <code>
            data_type
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            <code class=""literal"">
             ENCODING UTF8
            </code>
           </span>
           ]
          </span>
          ]
         </span>
         ])
        </p>
        <p>
         Constructs a JSON object of all the key/value pairs given, or an empty object if none are given.
         <em class=""replaceable"">
          <code>
           key_expression
          </code>
         </em>
         is a scalar expression defining the
         <acronym class=""acronym"">
          JSON
         </acronym>
         key, which is converted to the
         <code class=""type"">
          text
         </code>
         type. It cannot be
         <code class=""literal"">
          NULL
         </code>
         nor can it belong to a type that has a cast to the
         <code class=""type"">
          json
         </code>
         type. If
         <code class=""literal"">
          WITH UNIQUE KEYS
         </code>
         is specified, there must not be any duplicate
         <em class=""replaceable"">
          <code>
           key_expression
          </code>
         </em>
         . Any pair for which the
         <em class=""replaceable"">
          <code>
           value_expression
          </code>
         </em>
         evaluates to
         <code class=""literal"">
          NULL
         </code>
         is omitted from the output if
         <code class=""literal"">
          ABSENT ON NULL
         </code>
         is specified; if
         <code class=""literal"">
          NULL ON NULL
         </code>
         is specified or the clause omitted, the key is included with value
         <code class=""literal"">
          NULL
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          json_object('code' VALUE 'P123', 'title': 'Jaws')
         </code>
         →
         <code class=""returnvalue"">
          {""code"" : ""P123"", ""title"" : ""Jaws""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.8.1.1.1"" name=""id-1.5.8.22.8.9.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          json_object
         </code>
         (
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.8.1.2.1"" name=""id-1.5.8.22.8.9.2.2.8.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_object
         </code>
         (
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair. All values are converted to JSON strings.
        </p>
        <p>
         <code class=""literal"">
          json_object('{a, 1, b, ""def"", c, 3.5}')
         </code>
         →
         <code class=""returnvalue"">
          {""a"" : ""1"", ""b"" : ""def"", ""c"" : ""3.5""}
         </code>
        </p>
        <p>
         <code class=""literal"">
          json_object('{{a, 1}, {b, ""def""}, {c, 3.5}}')
         </code>
         →
         <code class=""returnvalue"">
          {""a"" : ""1"", ""b"" : ""def"", ""c"" : ""3.5""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""function"">
          json_object
         </code>
         (
         <em class=""parameter"">
          <code>
           keys
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           values
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          jsonb_object
         </code>
         (
         <em class=""parameter"">
          <code>
           keys
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           values
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         This form of
         <code class=""function"">
          json_object
         </code>
         takes keys and values pairwise from separate text arrays. Otherwise it is identical to the one-argument form.
        </p>
        <p>
         <code class=""literal"">
          json_object('{a,b}', '{1,2}')
         </code>
         →
         <code class=""returnvalue"">
          {""a"": ""1"", ""b"": ""2""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.10.1.1.1"" name=""id-1.5.8.22.8.9.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          json
         </code>
         (
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         [
         <span class=""optional"">
          <code class=""literal"">
           FORMAT JSON
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            ENCODING UTF8
           </code>
          </span>
          ]
         </span>
         ] [
         <span class=""optional"">
          {
          <code class=""literal"">
           WITH
          </code>
          |
          <code class=""literal"">
           WITHOUT
          </code>
          }
          <code class=""literal"">
           UNIQUE
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            KEYS
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p>
         Converts a given expression specified as
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          bytea
         </code>
         string (in UTF8 encoding) into a JSON value. If
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         is NULL, an
         <acronym class=""acronym"">
          SQL
         </acronym>
         null value is returned. If
         <code class=""literal"">
          WITH UNIQUE
         </code>
         is specified, the
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         must not contain any duplicate object keys.
        </p>
        <p>
         <code class=""literal"">
          json('{""a"":123, ""b"":[true,""foo""], ""a"":""bar""}')
         </code>
         →
         <code class=""returnvalue"">
          {""a"":123, ""b"":[true,""foo""], ""a"":""bar""}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.9.2.2.11.1.1.1"" name=""id-1.5.8.22.8.9.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          json_scalar
         </code>
         (
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         )
        </p>
        <p>
         Converts a given SQL scalar value into a JSON scalar value. If the input is NULL, an
         <acronym class=""acronym"">
          SQL
         </acronym>
         null is returned. If the input is number or a boolean value, a corresponding JSON number or boolean value is returned. For any other value, a JSON string is returned.
        </p>
        <p>
         <code class=""literal"">
          json_scalar(123.45)
         </code>
         →
         <code class=""returnvalue"">
          123.45
         </code>
        </p>
        <p>
         <code class=""literal"">
          json_scalar(CURRENT_TIMESTAMP)
         </code>
         →
         <code class=""returnvalue"">
          ""2022-05-10T10:51:04.62128-04:00""
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""function"">
          json_serialize
         </code>
         (
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         [
         <span class=""optional"">
          <code class=""literal"">
           FORMAT JSON
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            ENCODING UTF8
           </code>
          </span>
          ]
         </span>
         ] [
         <span class=""optional"">
          <code class=""literal"">
           RETURNING
          </code>
          <em class=""replaceable"">
           <code>
            data_type
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            <code class=""literal"">
             ENCODING UTF8
            </code>
           </span>
           ]
          </span>
          ]
         </span>
         ] )
        </p>
        <p>
         Converts an SQL/JSON expression into a character or binary string. The
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         can be of any JSON type, any character string type, or
         <code class=""type"">
          bytea
         </code>
         in UTF8 encoding. The returned type used in
         <code class=""literal"">
          RETURNING
         </code>
         can be any character string type or
         <code class=""type"">
          bytea
         </code>
         . The default is
         <code class=""type"">
          text
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          json_serialize('{ ""a"" : 1 } ' RETURNING bytea)
         </code>
         →
         <code class=""returnvalue"">
          \x7b20226122203a2031207d20
         </code>
        </p>
       </td>
      </tr>
     </tbody>
     <tbody class=""footnotes"">
      <tr>
       <td colspan=""1"">
        <div class=""footnote"" id=""ftn.id-1.5.8.22.8.9.2.2.1.1.3.4"">
         <p>
          <a class=""para"" href=""#id-1.5.8.22.8.9.2.2.1.1.3.4"">
           <sup class=""para"">
            [a]
           </sup>
          </a>
          For example, the
          <a class=""xref"" href=""hstore.html"" title=""F.17. hstore — hstore key/value datatype"">
           hstore
          </a>
          extension has a cast from
          <code class=""type"">
           hstore
          </code>
          to
          <code class=""type"">
           json
          </code>
          , so that
          <code class=""type"">
           hstore
          </code>
          values converted via the JSON creation functions will be represented as JSON objects, not as primitive string values.
         </p>
        </div>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-MISC"" title=""Table 9.48. SQL/JSON Testing Functions"">
    Table 9.48
   </a>
   details SQL/JSON facilities for testing JSON.
  </p>
  <div class=""table"" id=""FUNCTIONS-SQLJSON-MISC"">
   <p class=""title"">
    <strong>
     Table 9.48. SQL/JSON Testing Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""SQL/JSON Testing Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function signature
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.11.2.2.1.1.1.1"" name=""id-1.5.8.22.8.11.2.2.1.1.1.1"">
         </a>
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         <code class=""literal"">
          IS
         </code>
         [
         <span class=""optional"">
          <code class=""literal"">
           NOT
          </code>
         </span>
         ]
         <code class=""literal"">
          JSON
         </code>
         [
         <span class=""optional"">
          {
          <code class=""literal"">
           VALUE
          </code>
          |
          <code class=""literal"">
           SCALAR
          </code>
          |
          <code class=""literal"">
           ARRAY
          </code>
          |
          <code class=""literal"">
           OBJECT
          </code>
          }
         </span>
         ] [
         <span class=""optional"">
          {
          <code class=""literal"">
           WITH
          </code>
          |
          <code class=""literal"">
           WITHOUT
          </code>
          }
          <code class=""literal"">
           UNIQUE
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            KEYS
           </code>
          </span>
          ]
         </span>
         ]
        </p>
        <p>
         This predicate tests whether
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         can be parsed as JSON, possibly of a specified type. If
         <code class=""literal"">
          SCALAR
         </code>
         or
         <code class=""literal"">
          ARRAY
         </code>
         or
         <code class=""literal"">
          OBJECT
         </code>
         is specified, the test is whether or not the JSON is of that particular type. If
         <code class=""literal"">
          WITH UNIQUE KEYS
         </code>
         is specified, then any object in the
         <em class=""replaceable"">
          <code>
           expression
          </code>
         </em>
         is also tested to see if it has duplicate keys.
        </p>
        <pre class=""programlisting"">
SELECT js,
  js IS JSON ""json?"",
  js IS JSON SCALAR ""scalar?"",
  js IS JSON OBJECT ""object?"",
  js IS JSON ARRAY ""array?""
FROM (VALUES
      ('123'), ('""abc""'), ('{""a"": ""b""}'), ('[1,2]'),('abc')) foo(js);
     js     | json? | scalar? | object? | array?
------------+-------+---------+---------+--------
 123        | t     | t       | f       | f
 ""abc""      | t     | t       | f       | f
 {""a"": ""b""} | t     | f       | t       | f
 [1,2]      | t     | f       | f       | t
 abc        | f     | f       | f       | f
</pre>
        <pre class=""programlisting"">
SELECT js,
  js IS JSON OBJECT ""object?"",
  js IS JSON ARRAY ""array?"",
  js IS JSON ARRAY WITH UNIQUE KEYS ""array w. UK?"",
  js IS JSON ARRAY WITHOUT UNIQUE KEYS ""array w/o UK?""
FROM (VALUES ('[{""a"":""1""},
 {""b"":""2"",""b"":""3""}]')) foo(js);
-[ RECORD 1 ]-+--------------------
js            | [{""a"":""1""},        +
              |  {""b"":""2"",""b"":""3""}]
object?       | f
array?        | t
array w. UK?  | f
array w/o UK? | t
</pre>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE"" title=""Table 9.49. JSON Processing Functions"">
    Table 9.49
   </a>
   shows the functions that are available for processing
   <code class=""type"">
    json
   </code>
   and
   <code class=""type"">
    jsonb
   </code>
   values.
  </p>
  <div class=""table"" id=""FUNCTIONS-JSON-PROCESSING-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.49. JSON Processing Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""JSON Processing Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.1.1.1.1"" name=""id-1.5.8.22.8.13.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          json_array_elements
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.1.1.2.1"" name=""id-1.5.8.22.8.13.2.2.1.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_array_elements
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof jsonb
         </code>
        </p>
        <p>
         Expands the top-level JSON array into a set of JSON values.
        </p>
        <p>
         <code class=""literal"">
          select * from json_array_elements('[1,true, [2,false]]')
         </code>
         →
        </p>
        <pre class=""programlisting"">
   value
-----------
 1
 true
 [2,false]
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.2.1.1.1"" name=""id-1.5.8.22.8.13.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          json_array_elements_text
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.2.1.2.1"" name=""id-1.5.8.22.8.13.2.2.2.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_array_elements_text
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p>
         Expands the top-level JSON array into a set of
         <code class=""type"">
          text
         </code>
         values.
        </p>
        <p>
         <code class=""literal"">
          select * from json_array_elements_text('[""foo"", ""bar""]')
         </code>
         →
        </p>
        <pre class=""programlisting"">
   value
-----------
 foo
 bar
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.3.1.1.1"" name=""id-1.5.8.22.8.13.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          json_array_length
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.3.1.2.1"" name=""id-1.5.8.22.8.13.2.2.3.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_array_length
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the number of elements in the top-level JSON array.
        </p>
        <p>
         <code class=""literal"">
          json_array_length('[1,2,3,{""f1"":1,""f2"":[5,6]},4]')
         </code>
         →
         <code class=""returnvalue"">
          5
         </code>
        </p>
        <p>
         <code class=""literal"">
          jsonb_array_length('[]')
         </code>
         →
         <code class=""returnvalue"">
          0
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.4.1.1.1"" name=""id-1.5.8.22.8.13.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          json_each
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           value
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         )
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.4.1.2.1"" name=""id-1.5.8.22.8.13.2.2.4.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_each
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           value
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         )
        </p>
        <p>
         Expands the top-level JSON object into a set of key/value pairs.
        </p>
        <p>
         <code class=""literal"">
          select * from json_each('{""a"":""foo"", ""b"":""bar""}')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 key | value
-----+-------
 a   | ""foo""
 b   | ""bar""
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.5.1.1.1"" name=""id-1.5.8.22.8.13.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          json_each_text
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           value
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.5.1.2.1"" name=""id-1.5.8.22.8.13.2.2.5.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_each_text
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           value
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Expands the top-level JSON object into a set of key/value pairs. The returned
         <em class=""parameter"">
          <code>
           value
          </code>
         </em>
         s will be of type
         <code class=""type"">
          text
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          select * from json_each_text('{""a"":""foo"", ""b"":""bar""}')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 key | value
-----+-------
 a   | foo
 b   | bar
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.6.1.1.1"" name=""id-1.5.8.22.8.13.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          json_extract_path
         </code>
         (
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           path_elems
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.6.1.2.1"" name=""id-1.5.8.22.8.13.2.2.6.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_extract_path
         </code>
         (
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           path_elems
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Extracts JSON sub-object at the specified path. (This is functionally equivalent to the
         <code class=""literal"">
          #&gt;
         </code>
         operator, but writing the path out as a variadic list can be more convenient in some cases.)
        </p>
        <p>
         <code class=""literal"">
          json_extract_path('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""foo""}}', 'f4', 'f6')
         </code>
         →
         <code class=""returnvalue"">
          ""foo""
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.7.1.1.1"" name=""id-1.5.8.22.8.13.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          json_extract_path_text
         </code>
         (
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           path_elems
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.7.1.2.1"" name=""id-1.5.8.22.8.13.2.2.7.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_extract_path_text
         </code>
         (
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           path_elems
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Extracts JSON sub-object at the specified path as
         <code class=""type"">
          text
         </code>
         . (This is functionally equivalent to the
         <code class=""literal"">
          #&gt;&gt;
         </code>
         operator.)
        </p>
        <p>
         <code class=""literal"">
          json_extract_path_text('{""f2"":{""f3"":1},""f4"":{""f5"":99,""f6"":""foo""}}', 'f4', 'f6')
         </code>
         →
         <code class=""returnvalue"">
          foo
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.8.1.1.1"" name=""id-1.5.8.22.8.13.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          json_object_keys
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.8.1.2.1"" name=""id-1.5.8.22.8.13.2.2.8.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_object_keys
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p>
         Returns the set of keys in the top-level JSON object.
        </p>
        <p>
         <code class=""literal"">
          select * from json_object_keys('{""f1"":""abc"",""f2"":{""f3"":""a"", ""f4"":""b""}}')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 json_object_keys
------------------
 f1
 f2
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.9.1.1.1"" name=""id-1.5.8.22.8.13.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          json_populate_record
         </code>
         (
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         <code class=""type"">
          anyelement
         </code>
         ,
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          anyelement
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.9.1.2.1"" name=""id-1.5.8.22.8.13.2.2.9.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_populate_record
         </code>
         (
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         <code class=""type"">
          anyelement
         </code>
         ,
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          anyelement
         </code>
        </p>
        <p>
         Expands the top-level JSON object to a row having the composite type of the
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         argument. The JSON object is scanned for fields whose names match column names of the output row type, and their values are inserted into those columns of the output. (Fields that do not correspond to any output column name are ignored.) In typical use, the value of
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         is just
         <code class=""literal"">
          NULL
         </code>
         , which means that any output columns that do not match any object field will be filled with nulls. However, if
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         isn't
         <code class=""literal"">
          NULL
         </code>
         then the values it contains will be used for unmatched columns.
        </p>
        <p>
         To convert a JSON value to the SQL type of an output column, the following rules are applied in sequence:
        </p>
        <div class=""itemizedlist"">
         <ul class=""itemizedlist compact"" style=""list-style-type: disc;"">
          <li class=""listitem"">
           <p>
            A JSON null value is converted to an SQL null in all cases.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            If the output column is of type
            <code class=""type"">
             json
            </code>
            or
            <code class=""type"">
             jsonb
            </code>
            , the JSON value is just reproduced exactly.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            If the output column is a composite (row) type, and the JSON value is a JSON object, the fields of the object are converted to columns of the output row type by recursive application of these rules.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            Likewise, if the output column is an array type and the JSON value is a JSON array, the elements of the JSON array are converted to elements of the output array by recursive application of these rules.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            Otherwise, if the JSON value is a string, the contents of the string are fed to the input conversion function for the column's data type.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            Otherwise, the ordinary text representation of the JSON value is fed to the input conversion function for the column's data type.
           </p>
          </li>
         </ul>
        </div>
        <p>
         While the example below uses a constant JSON value, typical use would be to reference a
         <code class=""type"">
          json
         </code>
         or
         <code class=""type"">
          jsonb
         </code>
         column laterally from another table in the query's
         <code class=""literal"">
          FROM
         </code>
         clause. Writing
         <code class=""function"">
          json_populate_record
         </code>
         in the
         <code class=""literal"">
          FROM
         </code>
         clause is good practice, since all of the extracted columns are available for use without duplicate function calls.
        </p>
        <p>
         <code class=""literal"">
          create type subrowtype as (d int, e text);
         </code>
         <code class=""literal"">
          create type myrowtype as (a int, b text[], c subrowtype);
         </code>
        </p>
        <p>
         <code class=""literal"">
          select * from json_populate_record(null::myrowtype, '{""a"": 1, ""b"": [""2"", ""a b""], ""c"": {""d"": 4, ""e"": ""a b c""}, ""x"": ""foo""}')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 a |   b       |      c
---+-----------+-------------
 1 | {2,""a b""} | (4,""a b c"")
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.10.1.1.1"" name=""id-1.5.8.22.8.13.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_populate_record_valid
         </code>
         (
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         <code class=""type"">
          anyelement
         </code>
         ,
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Function for testing
         <code class=""function"">
          jsonb_populate_record
         </code>
         . Returns
         <code class=""literal"">
          true
         </code>
         if the input
         <code class=""function"">
          jsonb_populate_record
         </code>
         would finish without an error for the given input JSON object; that is, it's valid input,
         <code class=""literal"">
          false
         </code>
         otherwise.
        </p>
        <p>
         <code class=""literal"">
          create type jsb_char2 as (a char(2));
         </code>
        </p>
        <p>
         <code class=""literal"">
          select jsonb_populate_record_valid(NULL::jsb_char2, '{""a"": ""aaa""}');
         </code>
         →
        </p>
        <pre class=""programlisting"">
 jsonb_populate_record_valid
-----------------------------
 f
(1 row)
</pre>
        <p>
         <code class=""literal"">
          select * from jsonb_populate_record(NULL::jsb_char2, '{""a"": ""aaa""}') q;
         </code>
         →
        </p>
        <pre class=""programlisting"">
ERROR:  value too long for type character(2)
</pre>
        <p>
         <code class=""literal"">
          select jsonb_populate_record_valid(NULL::jsb_char2, '{""a"": ""aa""}');
         </code>
         →
        </p>
        <pre class=""programlisting"">
 jsonb_populate_record_valid
-----------------------------
 t
(1 row)
</pre>
        <p>
         <code class=""literal"">
          select * from jsonb_populate_record(NULL::jsb_char2, '{""a"": ""aa""}') q;
         </code>
         →
        </p>
        <pre class=""programlisting"">
 a
----
 aa
(1 row)
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.11.1.1.1"" name=""id-1.5.8.22.8.13.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          json_populate_recordset
         </code>
         (
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         <code class=""type"">
          anyelement
         </code>
         ,
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof anyelement
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.11.1.2.1"" name=""id-1.5.8.22.8.13.2.2.11.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_populate_recordset
         </code>
         (
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         <code class=""type"">
          anyelement
         </code>
         ,
         <em class=""parameter"">
          <code>
           from_json
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof anyelement
         </code>
        </p>
        <p>
         Expands the top-level JSON array of objects to a set of rows having the composite type of the
         <em class=""parameter"">
          <code>
           base
          </code>
         </em>
         argument. Each element of the JSON array is processed as described above for
         <code class=""function"">
          json[b]_populate_record
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          create type twoints as (a int, b int);
         </code>
        </p>
        <p>
         <code class=""literal"">
          select * from json_populate_recordset(null::twoints, '[{""a"":1,""b"":2}, {""a"":3,""b"":4}]')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 a | b
---+---
 1 | 2
 3 | 4
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.12.1.1.1"" name=""id-1.5.8.22.8.13.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          json_to_record
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.12.1.2.1"" name=""id-1.5.8.22.8.13.2.2.12.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_to_record
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p>
         Expands the top-level JSON object to a row having the composite type defined by an
         <code class=""literal"">
          AS
         </code>
         clause. (As with all functions returning
         <code class=""type"">
          record
         </code>
         , the calling query must explicitly define the structure of the record with an
         <code class=""literal"">
          AS
         </code>
         clause.) The output record is filled from fields of the JSON object, in the same way as described above for
         <code class=""function"">
          json[b]_populate_record
         </code>
         . Since there is no input record value, unmatched columns are always filled with nulls.
        </p>
        <p>
         <code class=""literal"">
          create type myrowtype as (a int, b text);
         </code>
        </p>
        <p>
         <code class=""literal"">
          select * from json_to_record('{""a"":1,""b"":[1,2,3],""c"":[1,2,3],""e"":""bar"",""r"": {""a"": 123, ""b"": ""a b c""}}') as x(a int, b text, c int[], d text, r myrowtype)
         </code>
         →
        </p>
        <pre class=""programlisting"">
 a |    b    |    c    | d |       r
---+---------+---------+---+---------------
 1 | [1,2,3] | {1,2,3} |   | (123,""a b c"")
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.13.1.1.1"" name=""id-1.5.8.22.8.13.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          json_to_recordset
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.13.1.2.1"" name=""id-1.5.8.22.8.13.2.2.13.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_to_recordset
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
        </p>
        <p>
         Expands the top-level JSON array of objects to a set of rows having the composite type defined by an
         <code class=""literal"">
          AS
         </code>
         clause. (As with all functions returning
         <code class=""type"">
          record
         </code>
         , the calling query must explicitly define the structure of the record with an
         <code class=""literal"">
          AS
         </code>
         clause.) Each element of the JSON array is processed as described above for
         <code class=""function"">
          json[b]_populate_record
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          select * from json_to_recordset('[{""a"":1,""b"":""foo""}, {""a"":""2"",""c"":""bar""}]') as x(a int, b text)
         </code>
         →
        </p>
        <pre class=""programlisting"">
 a |  b
---+-----
 1 | foo
 2 |
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.14.1.1.1"" name=""id-1.5.8.22.8.13.2.2.14.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_set
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            create_if_missing
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Returns
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         with the item designated by
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         replaced by
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         , or with
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         added if
         <em class=""parameter"">
          <code>
           create_if_missing
          </code>
         </em>
         is true (which is the default) and the item designated by
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         does not exist. All earlier steps in the path must exist, or the
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         is returned unchanged. As with the path oriented operators, negative integers that appear in the
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         count from the end of JSON arrays. If the last path step is an array index that is out of range, and
         <em class=""parameter"">
          <code>
           create_if_missing
          </code>
         </em>
         is true, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive.
        </p>
        <p>
         <code class=""literal"">
          jsonb_set('[{""f1"":1,""f2"":null},2,null,3]', '{0,f1}', '[2,3,4]', false)
         </code>
         →
         <code class=""returnvalue"">
          [{""f1"": [2, 3, 4], ""f2"": null}, 2, null, 3]
         </code>
        </p>
        <p>
         <code class=""literal"">
          jsonb_set('[{""f1"":1,""f2"":null},2]', '{0,f3}', '[2,3,4]')
         </code>
         →
         <code class=""returnvalue"">
          [{""f1"": 1, ""f2"": null, ""f3"": [2, 3, 4]}, 2]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.15.1.1.1"" name=""id-1.5.8.22.8.13.2.2.15.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_set_lax
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            create_if_missing
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             null_value_treatment
            </code>
           </em>
           <code class=""type"">
            text
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         If
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         is not
         <code class=""literal"">
          NULL
         </code>
         , behaves identically to
         <code class=""literal"">
          jsonb_set
         </code>
         . Otherwise behaves according to the value of
         <em class=""parameter"">
          <code>
           null_value_treatment
          </code>
         </em>
         which must be one of
         <code class=""literal"">
          'raise_exception'
         </code>
         ,
         <code class=""literal"">
          'use_json_null'
         </code>
         ,
         <code class=""literal"">
          'delete_key'
         </code>
         , or
         <code class=""literal"">
          'return_target'
         </code>
         . The default is
         <code class=""literal"">
          'use_json_null'
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          jsonb_set_lax('[{""f1"":1,""f2"":null},2,null,3]', '{0,f1}', null)
         </code>
         →
         <code class=""returnvalue"">
          [{""f1"": null, ""f2"": null}, 2, null, 3]
         </code>
        </p>
        <p>
         <code class=""literal"">
          jsonb_set_lax('[{""f1"":99,""f2"":null},2]', '{0,f3}', null, true, 'return_target')
         </code>
         →
         <code class=""returnvalue"">
          [{""f1"": 99, ""f2"": null}, 2]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.16.1.1.1"" name=""id-1.5.8.22.8.13.2.2.16.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_insert
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            insert_after
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Returns
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         with
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         inserted. If the item designated by the
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         is an array element,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         will be inserted before that item if
         <em class=""parameter"">
          <code>
           insert_after
          </code>
         </em>
         is false (which is the default), or after it if
         <em class=""parameter"">
          <code>
           insert_after
          </code>
         </em>
         is true. If the item designated by the
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         is an object field,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         will be inserted only if the object does not already contain that key. All earlier steps in the path must exist, or the
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         is returned unchanged. As with the path oriented operators, negative integers that appear in the
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         count from the end of JSON arrays. If the last path step is an array index that is out of range, the new value is added at the beginning of the array if the index is negative, or at the end of the array if it is positive.
        </p>
        <p>
         <code class=""literal"">
          jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '""new_value""')
         </code>
         →
         <code class=""returnvalue"">
          {""a"": [0, ""new_value"", 1, 2]}
         </code>
        </p>
        <p>
         <code class=""literal"">
          jsonb_insert('{""a"": [0,1,2]}', '{a, 1}', '""new_value""', true)
         </code>
         →
         <code class=""returnvalue"">
          {""a"": [0, 1, ""new_value"", 2]}
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.17.1.1.1"" name=""id-1.5.8.22.8.13.2.2.17.1.1.1"">
         </a>
         <code class=""function"">
          json_strip_nulls
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          json
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.17.1.2.1"" name=""id-1.5.8.22.8.13.2.2.17.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_strip_nulls
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Deletes all object fields that have null values from the given JSON value, recursively. Null values that are not object fields are untouched.
        </p>
        <p>
         <code class=""literal"">
          json_strip_nulls('[{""f1"":1, ""f2"":null}, 2, null, 3]')
         </code>
         →
         <code class=""returnvalue"">
          [{""f1"":1},2,null,3]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.18.1.1.1"" name=""id-1.5.8.22.8.13.2.2.18.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_exists
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Checks whether the JSON path returns any item for the specified JSON value. (This is useful only with SQL-standard JSON path expressions, not
         <a class=""link"" href=""functions-json.html#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"" title=""9.16.2.1.1. Boolean Predicate Check Expressions"">
          predicate check expressions
         </a>
         , since those always return a value.) If the
         <em class=""parameter"">
          <code>
           vars
          </code>
         </em>
         argument is specified, it must be a JSON object, and its fields provide named values to be substituted into the
         <code class=""type"">
          jsonpath
         </code>
         expression. If the
         <em class=""parameter"">
          <code>
           silent
          </code>
         </em>
         argument is specified and is
         <code class=""literal"">
          true
         </code>
         , the function suppresses the same errors as the
         <code class=""literal"">
          @?
         </code>
         and
         <code class=""literal"">
          @@
         </code>
         operators do.
        </p>
        <p>
         <code class=""literal"">
          jsonb_path_exists('{""a"":[1,2,3,4,5]}', '$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)', '{""min"":2, ""max"":4}')
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.19.1.1.1"" name=""id-1.5.8.22.8.13.2.2.19.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_match
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns the SQL boolean result of a JSON path predicate check for the specified JSON value. (This is useful only with
         <a class=""link"" href=""functions-json.html#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"" title=""9.16.2.1.1. Boolean Predicate Check Expressions"">
          predicate check expressions
         </a>
         , not SQL-standard JSON path expressions, since it will either fail or return
         <code class=""literal"">
          NULL
         </code>
         if the path result is not a single boolean value.) The optional
         <em class=""parameter"">
          <code>
           vars
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           silent
          </code>
         </em>
         arguments act the same as for
         <code class=""function"">
          jsonb_path_exists
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          jsonb_path_match('{""a"":[1,2,3,4,5]}', 'exists($.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max))', '{""min"":2, ""max"":4}')
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.20.1.1.1"" name=""id-1.5.8.22.8.13.2.2.20.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_query
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          setof jsonb
         </code>
        </p>
        <p>
         Returns all JSON items returned by the JSON path for the specified JSON value. For SQL-standard JSON path expressions it returns the JSON values selected from
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         . For
         <a class=""link"" href=""functions-json.html#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"" title=""9.16.2.1.1. Boolean Predicate Check Expressions"">
          predicate check expressions
         </a>
         it returns the result of the predicate check:
         <code class=""literal"">
          true
         </code>
         ,
         <code class=""literal"">
          false
         </code>
         , or
         <code class=""literal"">
          null
         </code>
         . The optional
         <em class=""parameter"">
          <code>
           vars
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           silent
          </code>
         </em>
         arguments act the same as for
         <code class=""function"">
          jsonb_path_exists
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          select * from jsonb_path_query('{""a"":[1,2,3,4,5]}', '$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)', '{""min"":2, ""max"":4}')
         </code>
         →
        </p>
        <pre class=""programlisting"">
 jsonb_path_query
------------------
 2
 3
 4
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.21.1.1.1"" name=""id-1.5.8.22.8.13.2.2.21.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_query_array
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Returns all JSON items returned by the JSON path for the specified JSON value, as a JSON array. The parameters are the same as for
         <code class=""function"">
          jsonb_path_query
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          jsonb_path_query_array('{""a"":[1,2,3,4,5]}', '$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)', '{""min"":2, ""max"":4}')
         </code>
         →
         <code class=""returnvalue"">
          [2, 3, 4]
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.22.1.1.1"" name=""id-1.5.8.22.8.13.2.2.22.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_query_first
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         Returns the first JSON item returned by the JSON path for the specified JSON value, or
         <code class=""literal"">
          NULL
         </code>
         if there are no results. The parameters are the same as for
         <code class=""function"">
          jsonb_path_query
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          jsonb_path_query_first('{""a"":[1,2,3,4,5]}', '$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)', '{""min"":2, ""max"":4}')
         </code>
         →
         <code class=""returnvalue"">
          2
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.23.1.1.1"" name=""id-1.5.8.22.8.13.2.2.23.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_path_exists_tz
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.23.1.2.1"" name=""id-1.5.8.22.8.13.2.2.23.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_path_match_tz
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.23.1.3.1"" name=""id-1.5.8.22.8.13.2.2.23.1.3.1"">
         </a>
         <code class=""function"">
          jsonb_path_query_tz
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          setof jsonb
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.23.1.4.1"" name=""id-1.5.8.22.8.13.2.2.23.1.4.1"">
         </a>
         <code class=""function"">
          jsonb_path_query_array_tz
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.23.1.5.1"" name=""id-1.5.8.22.8.13.2.2.23.1.5.1"">
         </a>
         <code class=""function"">
          jsonb_path_query_first_tz
         </code>
         (
         <em class=""parameter"">
          <code>
           target
          </code>
         </em>
         <code class=""type"">
          jsonb
         </code>
         ,
         <em class=""parameter"">
          <code>
           path
          </code>
         </em>
         <code class=""type"">
          jsonpath
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            vars
           </code>
          </em>
          <code class=""type"">
           jsonb
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             silent
            </code>
           </em>
           <code class=""type"">
            boolean
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          jsonb
         </code>
        </p>
        <p>
         These functions act like their counterparts described above without the
         <code class=""literal"">
          _tz
         </code>
         suffix, except that these functions support comparisons of date/time values that require timezone-aware conversions. The example below requires interpretation of the date-only value
         <code class=""literal"">
          2015-08-02
         </code>
         as a timestamp with time zone, so the result depends on the current
         <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
          TimeZone
         </a>
         setting. Due to this dependency, these functions are marked as stable, which means these functions cannot be used in indexes. Their counterparts are immutable, and so can be used in indexes; but they will throw errors if asked to make such comparisons.
        </p>
        <p>
         <code class=""literal"">
          jsonb_path_exists_tz('[""2015-08-01 12:00:00-05""]', '$[*] ? (@.datetime() &lt; ""2015-08-02"".datetime())')
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.24.1.1.1"" name=""id-1.5.8.22.8.13.2.2.24.1.1.1"">
         </a>
         <code class=""function"">
          jsonb_pretty
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Converts the given JSON value to pretty-printed, indented text.
        </p>
        <p>
         <code class=""literal"">
          jsonb_pretty('[{""f1"":1,""f2"":null}, 2]')
         </code>
         →
        </p>
        <pre class=""programlisting"">
[
    {
        ""f1"": 1,
        ""f2"": null
    },
    2
]
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.25.1.1.1"" name=""id-1.5.8.22.8.13.2.2.25.1.1.1"">
         </a>
         <code class=""function"">
          json_typeof
         </code>
         (
         <code class=""type"">
          json
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.8.13.2.2.25.1.2.1"" name=""id-1.5.8.22.8.13.2.2.25.1.2.1"">
         </a>
         <code class=""function"">
          jsonb_typeof
         </code>
         (
         <code class=""type"">
          jsonb
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the type of the top-level JSON value as a text string. Possible types are
         <code class=""literal"">
          object
         </code>
         ,
         <code class=""literal"">
          array
         </code>
         ,
         <code class=""literal"">
          string
         </code>
         ,
         <code class=""literal"">
          number
         </code>
         ,
         <code class=""literal"">
          boolean
         </code>
         , and
         <code class=""literal"">
          null
         </code>
         . (The
         <code class=""literal"">
          null
         </code>
         result should not be confused with an SQL NULL; see the examples.)
        </p>
        <p>
         <code class=""literal"">
          json_typeof('-123.4')
         </code>
         →
         <code class=""returnvalue"">
          number
         </code>
        </p>
        <p>
         <code class=""literal"">
          json_typeof('null'::json)
         </code>
         →
         <code class=""returnvalue"">
          null
         </code>
        </p>
        <p>
         <code class=""literal"">
          json_typeof(NULL::json) IS NULL
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SQLJSON-PATH"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.16.2. The SQL/JSON Path Language
      <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-PATH"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.22.9.2"" name=""id-1.5.8.22.9.2"">
  </a>
  <p>
   SQL/JSON path expressions specify item(s) to be retrieved from a JSON value, similarly to XPath expressions used for access to XML content. In
   <span class=""productname"">
    PostgreSQL
   </span>
   , path expressions are implemented as the
   <code class=""type"">
    jsonpath
   </code>
   data type and can use any elements described in
   <a class=""xref"" href=""datatype-json.html#DATATYPE-JSONPATH"" title=""8.14.7. jsonpath Type"">
    Section 8.14.7
   </a>
   .
  </p>
  <p>
   JSON query functions and operators pass the provided path expression to the
   <em class=""firstterm"">
    path engine
   </em>
   for evaluation. If the expression matches the queried JSON data, the corresponding JSON item, or set of items, is returned. If there is no match, the result will be
   <code class=""literal"">
    NULL
   </code>
   ,
   <code class=""literal"">
    false
   </code>
   , or an error, depending on the function. Path expressions are written in the SQL/JSON path language and can include arithmetic expressions and functions.
  </p>
  <p>
   A path expression consists of a sequence of elements allowed by the
   <code class=""type"">
    jsonpath
   </code>
   data type. The path expression is normally evaluated from left to right, but you can use parentheses to change the order of operations. If the evaluation is successful, a sequence of JSON items is produced, and the evaluation result is returned to the JSON query function that completes the specified computation.
  </p>
  <p>
   To refer to the JSON value being queried (the
   <em class=""firstterm"">
    context item
   </em>
   ), use the
   <code class=""literal"">
    $
   </code>
   variable in the path expression. The first element of a path must always be
   <code class=""literal"">
    $
   </code>
   . It can be followed by one or more
   <a class=""link"" href=""datatype-json.html#TYPE-JSONPATH-ACCESSORS"" title=""Table 8.25. jsonpath Accessors"">
    accessor operators
   </a>
   , which go down the JSON structure level by level to retrieve sub-items of the context item. Each accessor operator acts on the result(s) of the previous evaluation step, producing zero, one, or more output items from each input item.
  </p>
  <p>
   For example, suppose you have some JSON data from a GPS tracker that you would like to parse, such as:
  </p>
  <pre class=""programlisting"">
SELECT '{
  ""track"": {
    ""segments"": [
      {
        ""location"":   [ 47.763, 13.4034 ],
        ""start time"": ""2018-10-14 10:05:14"",
        ""HR"": 73
      },
      {
        ""location"":   [ 47.706, 13.2635 ],
        ""start time"": ""2018-10-14 10:39:21"",
        ""HR"": 135
      }
    ]
  }
}' AS json \gset
</pre>
  <p>
   (The above example can be copied-and-pasted into
   <span class=""application"">
    psql
   </span>
   to set things up for the following examples. Then
   <span class=""application"">
    psql
   </span>
   will expand
   <code class=""literal"">
    :'json'
   </code>
   into a suitably-quoted string constant containing the JSON value.)
  </p>
  <p>
   To retrieve the available track segments, you need to use the
   <code class=""literal"">
    .
    <em class=""replaceable"">
     <code>
      key
     </code>
    </em>
   </code>
   accessor operator to descend through surrounding JSON objects, for example:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments');</code></strong>
                                                                         jsonb_path_query
-----------------------------------------------------------​-----------------------------------------------------------​---------------------------------------------
 [{""HR"": 73, ""location"": [47.763, 13.4034], ""start time"": ""2018-10-14 10:05:14""}, {""HR"": 135, ""location"": [47.706, 13.2635], ""start time"": ""2018-10-14 10:39:21""}]
</pre>
  <p>
   To retrieve the contents of an array, you typically use the
   <code class=""literal"">
    [*]
   </code>
   operator. The following example will return the location coordinates for all the available track segments:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*].location');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
 [47.706, 13.2635]
</pre>
  <p>
   Here we started with the whole JSON input value (
   <code class=""literal"">
    $
   </code>
   ), then the
   <code class=""literal"">
    .track
   </code>
   accessor selected the JSON object associated with the
   <code class=""literal"">
    ""track""
   </code>
   object key, then the
   <code class=""literal"">
    .segments
   </code>
   accessor selected the JSON array associated with the
   <code class=""literal"">
    ""segments""
   </code>
   key within that object, then the
   <code class=""literal"">
    [*]
   </code>
   accessor selected each element of that array (producing a series of items), then the
   <code class=""literal"">
    .location
   </code>
   accessor selected the JSON array associated with the
   <code class=""literal"">
    ""location""
   </code>
   key within each of those objects. In this example, each of those objects had a
   <code class=""literal"">
    ""location""
   </code>
   key; but if any of them did not, the
   <code class=""literal"">
    .location
   </code>
   accessor would have simply produced no output for that input item.
  </p>
  <p>
   To return the coordinates of the first segment only, you can specify the corresponding subscript in the
   <code class=""literal"">
    []
   </code>
   accessor operator. Recall that JSON array indexes are 0-relative:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[0].location');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
</pre>
  <p>
   The result of each path evaluation step can be processed by one or more of the
   <code class=""type"">
    jsonpath
   </code>
   operators and methods listed in
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-PATH-OPERATORS"" title=""9.16.2.3. SQL/JSON Path Operators and Methods"">
    Section 9.16.2.3
   </a>
   . Each method name must be preceded by a dot. For example, you can get the size of an array:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments.size()');</code></strong>
 jsonb_path_query
------------------
 2
</pre>
  <p>
   More examples of using
   <code class=""type"">
    jsonpath
   </code>
   operators and methods within path expressions appear below in
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-PATH-OPERATORS"" title=""9.16.2.3. SQL/JSON Path Operators and Methods"">
    Section 9.16.2.3
   </a>
   .
  </p>
  <p>
   A path can also contain
   <em class=""firstterm"">
    filter expressions
   </em>
   that work similarly to the
   <code class=""literal"">
    WHERE
   </code>
   clause in SQL. A filter expression begins with a question mark and provides a condition in parentheses:
  </p>
  <pre class=""synopsis"">
? (<em class=""replaceable""><code>condition</code></em>)
</pre>
  <p>
   Filter expressions must be written just after the path evaluation step to which they should apply. The result of that step is filtered to include only those items that satisfy the provided condition. SQL/JSON defines three-valued logic, so the condition can produce
   <code class=""literal"">
    true
   </code>
   ,
   <code class=""literal"">
    false
   </code>
   , or
   <code class=""literal"">
    unknown
   </code>
   . The
   <code class=""literal"">
    unknown
   </code>
   value plays the same role as SQL
   <code class=""literal"">
    NULL
   </code>
   and can be tested for with the
   <code class=""literal"">
    is unknown
   </code>
   predicate. Further path evaluation steps use only those items for which the filter expression returned
   <code class=""literal"">
    true
   </code>
   .
  </p>
  <p>
   The functions and operators that can be used in filter expressions are listed in
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-FILTER-EX-TABLE"" title=""Table 9.51. jsonpath Filter Expression Elements"">
    Table 9.51
   </a>
   . Within a filter expression, the
   <code class=""literal"">
    @
   </code>
   variable denotes the value being considered (i.e., one result of the preceding path step). You can write accessor operators after
   <code class=""literal"">
    @
   </code>
   to retrieve component items.
  </p>
  <p>
   For example, suppose you would like to retrieve all heart rate values higher than 130. You can achieve this as follows:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*].HR ? (@ &gt; 130)');</code></strong>
 jsonb_path_query
------------------
 135
</pre>
  <p>
   To get the start times of segments with such values, you have to filter out irrelevant segments before selecting the start times, so the filter expression is applied to the previous step, and the path used in the condition is different:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*] ? (@.HR &gt; 130).""start time""');</code></strong>
   jsonb_path_query
-----------------------
 ""2018-10-14 10:39:21""
</pre>
  <p>
   You can use several filter expressions in sequence, if required. The following example selects start times of all segments that contain locations with relevant coordinates and high heart rate values:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*] ? (@.location[1] &lt; 13.4) ? (@.HR &gt; 130).""start time""');</code></strong>
   jsonb_path_query
-----------------------
 ""2018-10-14 10:39:21""
</pre>
  <p>
   Using filter expressions at different nesting levels is also allowed. The following example first filters all segments by location, and then returns high heart rate values for these segments, if available:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*] ? (@.location[1] &lt; 13.4).HR ? (@ &gt; 130)');</code></strong>
 jsonb_path_query
------------------
 135
</pre>
  <p>
   You can also nest filter expressions within each other. This example returns the size of the track if it contains any segments with high heart rate values, or an empty sequence otherwise:
  </p>
  <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track ? (exists(@.segments[*] ? (@.HR &gt; 130))).segments.size()');</code></strong>
 jsonb_path_query
------------------
 2
</pre>
  <div class=""sect3"" id=""FUNCTIONS-SQLJSON-DEVIATIONS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.16.2.1. Deviations from the SQL Standard
       <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-DEVIATIONS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    <span class=""productname"">
     PostgreSQL
    </span>
    's implementation of the SQL/JSON path language has the following deviations from the SQL/JSON standard.
   </p>
   <div class=""sect4"" id=""FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"">
    <div class=""titlepage"">
     <div>
      <div>
       <h5 class=""title"">
        9.16.2.1.1. Boolean Predicate Check Expressions
        <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-CHECK-EXPRESSIONS"">
         #
        </a>
       </h5>
      </div>
     </div>
    </div>
    <p>
     As an extension to the SQL standard, a
     <span class=""productname"">
      PostgreSQL
     </span>
     path expression can be a Boolean predicate, whereas the SQL standard allows predicates only within filters. While SQL-standard path expressions return the relevant element(s) of the queried JSON value, predicate check expressions return the single three-valued
     <code class=""type"">
      jsonb
     </code>
     result of the predicate:
     <code class=""literal"">
      true
     </code>
     ,
     <code class=""literal"">
      false
     </code>
     , or
     <code class=""literal"">
      null
     </code>
     . For example, we could write this SQL-standard filter expression:
    </p>
    <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments ?(@[*].HR &gt; 130)');</code></strong>
                                jsonb_path_query
-----------------------------------------------------------​----------------------
 {""HR"": 135, ""location"": [47.706, 13.2635], ""start time"": ""2018-10-14 10:39:21""}
</pre>
    <p>
     The similar predicate check expression simply returns
     <code class=""literal"">
      true
     </code>
     , indicating that a match exists:
    </p>
    <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', '$.track.segments[*].HR &gt; 130');</code></strong>
 jsonb_path_query
------------------
 true
</pre>
    <div class=""note"">
     <h3 class=""title"">
      Note
     </h3>
     <p>
      Predicate check expressions are required in the
      <code class=""literal"">
       @@
      </code>
      operator (and the
      <code class=""function"">
       jsonb_path_match
      </code>
      function), and should not be used with the
      <code class=""literal"">
       @?
      </code>
      operator (or the
      <code class=""function"">
       jsonb_path_exists
      </code>
      function).
     </p>
    </div>
   </div>
   <div class=""sect4"" id=""FUNCTIONS-SQLJSON-REGULAR-EXPRESSION-DEVIATION"">
    <div class=""titlepage"">
     <div>
      <div>
       <h5 class=""title"">
        9.16.2.1.2. Regular Expression Interpretation
        <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-REGULAR-EXPRESSION-DEVIATION"">
         #
        </a>
       </h5>
      </div>
     </div>
    </div>
    <p>
     There are minor differences in the interpretation of regular expression patterns used in
     <code class=""literal"">
      like_regex
     </code>
     filters, as described in
     <a class=""xref"" href=""functions-json.html#JSONPATH-REGULAR-EXPRESSIONS"" title=""9.16.2.4. SQL/JSON Regular Expressions"">
      Section 9.16.2.4
     </a>
     .
    </p>
   </div>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-SQLJSON-STRICT-AND-LAX-MODES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.16.2.2. Strict and Lax Modes
       <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-STRICT-AND-LAX-MODES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    When you query JSON data, the path expression may not match the actual JSON data structure. An attempt to access a non-existent member of an object or element of an array is defined as a structural error. SQL/JSON path expressions have two modes of handling structural errors:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       lax (default) — the path engine implicitly adapts the queried data to the specified path. Any structural errors that cannot be fixed as described below are suppressed, producing no match.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       strict — if a structural error occurs, an error is raised.
      </p>
     </li>
    </ul>
   </div>
   <p>
    Lax mode facilitates matching of a JSON document and path expression when the JSON data does not conform to the expected schema. If an operand does not match the requirements of a particular operation, it can be automatically wrapped as an SQL/JSON array, or unwrapped by converting its elements into an SQL/JSON sequence before performing the operation. Also, comparison operators automatically unwrap their operands in lax mode, so you can compare SQL/JSON arrays out-of-the-box. An array of size 1 is considered equal to its sole element. Automatic unwrapping is not performed when:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist"" style=""list-style-type: disc;"">
     <li class=""listitem"">
      <p>
       The path expression contains
       <code class=""literal"">
        type()
       </code>
       or
       <code class=""literal"">
        size()
       </code>
       methods that return the type and the number of elements in the array, respectively.
      </p>
     </li>
     <li class=""listitem"">
      <p>
       The queried JSON data contain nested arrays. In this case, only the outermost array is unwrapped, while all the inner arrays remain unchanged. Thus, implicit unwrapping can only go one level down within each path evaluation step.
      </p>
     </li>
    </ul>
   </div>
   <p>
    For example, when querying the GPS data listed above, you can abstract from the fact that it stores an array of segments when using lax mode:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'lax $.track.segments.location');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
 [47.706, 13.2635]
</pre>
   <p>
    In strict mode, the specified path must exactly match the structure of the queried JSON document, so using this path expression will cause an error:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'strict $.track.segments.location');</code></strong>
ERROR:  jsonpath member accessor can only be applied to an object
</pre>
   <p>
    To get the same result as in lax mode, you have to explicitly unwrap the
    <code class=""literal"">
     segments
    </code>
    array:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'strict $.track.segments[*].location');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
 [47.706, 13.2635]
</pre>
   <p>
    The unwrapping behavior of lax mode can lead to surprising results. For instance, the following query using the
    <code class=""literal"">
     .**
    </code>
    accessor selects every
    <code class=""literal"">
     HR
    </code>
    value twice:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'lax $.**.HR');</code></strong>
 jsonb_path_query
------------------
 73
 135
 73
 135
</pre>
   <p>
    This happens because the
    <code class=""literal"">
     .**
    </code>
    accessor selects both the
    <code class=""literal"">
     segments
    </code>
    array and each of its elements, while the
    <code class=""literal"">
     .HR
    </code>
    accessor automatically unwraps arrays when using lax mode. To avoid surprising results, we recommend using the
    <code class=""literal"">
     .**
    </code>
    accessor only in strict mode. The following query selects each
    <code class=""literal"">
     HR
    </code>
    value just once:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'strict $.**.HR');</code></strong>
 jsonb_path_query
------------------
 73
 135
</pre>
   <p>
    The unwrapping of arrays can also lead to unexpected results. Consider this example, which selects all the
    <code class=""literal"">
     location
    </code>
    arrays:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'lax $.track.segments[*].location');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
 [47.706, 13.2635]
(2 rows)
</pre>
   <p>
    As expected it returns the full arrays. But applying a filter expression causes the arrays to be unwrapped to evaluate each item, returning only the items that match the expression:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'lax $.track.segments[*].location ?(@[*] &gt; 15)');</code></strong>
 jsonb_path_query
------------------
 47.763
 47.706
(2 rows)
</pre>
   <p>
    This despite the fact that the full arrays are selected by the path expression. Use strict mode to restore selecting the arrays:
   </p>
   <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>select jsonb_path_query(:'json', 'strict $.track.segments[*].location ?(@[*] &gt; 15)');</code></strong>
 jsonb_path_query
-------------------
 [47.763, 13.4034]
 [47.706, 13.2635]
(2 rows)
</pre>
  </div>
  <div class=""sect3"" id=""FUNCTIONS-SQLJSON-PATH-OPERATORS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.16.2.3. SQL/JSON Path Operators and Methods
       <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-PATH-OPERATORS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-OP-TABLE"" title=""Table 9.50. jsonpath Operators and Methods"">
     Table 9.50
    </a>
    shows the operators and methods available in
    <code class=""type"">
     jsonpath
    </code>
    . Note that while the unary operators and methods can be applied to multiple values resulting from a preceding path step, the binary operators (addition etc.) can only be applied to single values. In lax mode, methods applied to an array will be executed for each value in the array. The exceptions are
    <code class=""literal"">
     .type()
    </code>
    and
    <code class=""literal"">
     .size()
    </code>
    , which apply to the array itself.
   </p>
   <div class=""table"" id=""FUNCTIONS-SQLJSON-OP-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.50.
      <code class=""type"">
       jsonpath
      </code>
      Operators and Methods
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""jsonpath Operators and Methods"">
      <colgroup>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th class=""func_table_entry"">
         <p class=""func_signature"">
          Operator/Method
         </p>
         <p>
          Description
         </p>
         <p>
          Example(s)
         </p>
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           +
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Addition
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[2]', '$[0] + 3')
          </code>
          →
          <code class=""returnvalue"">
           5
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           +
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Unary plus (no operation); unlike addition, this can iterate over multiple values
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('{""x"": [2,3,4]}', '+ $.x')
          </code>
          →
          <code class=""returnvalue"">
           [2, 3, 4]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           -
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Subtraction
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[2]', '7 - $[0]')
          </code>
          →
          <code class=""returnvalue"">
           5
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           -
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Negation; unlike subtraction, this can iterate over multiple values
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('{""x"": [2,3,4]}', '- $.x')
          </code>
          →
          <code class=""returnvalue"">
           [-2, -3, -4]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           *
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Multiplication
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[4]', '2 * $[0]')
          </code>
          →
          <code class=""returnvalue"">
           8
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           /
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Division
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[8.5]', '$[0] / 2')
          </code>
          →
          <code class=""returnvalue"">
           4.2500000000000000
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           %
          </code>
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Modulo (remainder)
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[32]', '$[0] % 10')
          </code>
          →
          <code class=""returnvalue"">
           2
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           type()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             string
            </code>
           </em>
          </code>
         </p>
         <p>
          Type of the JSON item (see
          <code class=""function"">
           json_typeof
          </code>
          )
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, ""2"", {}]', '$[*].type()')
          </code>
          →
          <code class=""returnvalue"">
           [""number"", ""string"", ""object""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           size()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Size of the JSON item (number of array elements, or 1 if not an array)
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""m"": [11, 15]}', '$.m.size()')
          </code>
          →
          <code class=""returnvalue"">
           2
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           boolean()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             boolean
            </code>
           </em>
          </code>
         </p>
         <p>
          Boolean value converted from a JSON boolean, number, or string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, ""yes"", false]', '$[*].boolean()')
          </code>
          →
          <code class=""returnvalue"">
           [true, true, false]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           string()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             string
            </code>
           </em>
          </code>
         </p>
         <p>
          String value converted from a JSON boolean, number, string, or datetime
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1.23, ""xyz"", false]', '$[*].string()')
          </code>
          →
          <code class=""returnvalue"">
           [""1.23"", ""xyz"", ""false""]
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15 12:34:56""', '$.timestamp().string()')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15T12:34:56""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           double()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Approximate floating-point number converted from a JSON number or string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""len"": ""1.9""}', '$.len.double() * 2')
          </code>
          →
          <code class=""returnvalue"">
           3.8
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           ceiling()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Nearest integer greater than or equal to the given number
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""h"": 1.3}', '$.h.ceiling()')
          </code>
          →
          <code class=""returnvalue"">
           2
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           floor()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Nearest integer less than or equal to the given number
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""h"": 1.7}', '$.h.floor()')
          </code>
          →
          <code class=""returnvalue"">
           1
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            number
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           abs()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             number
            </code>
           </em>
          </code>
         </p>
         <p>
          Absolute value of the given number
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""z"": -0.3}', '$.z.abs()')
          </code>
          →
          <code class=""returnvalue"">
           0.3
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           bigint()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             bigint
            </code>
           </em>
          </code>
         </p>
         <p>
          Big integer value converted from a JSON number or string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""len"": ""9876543219""}', '$.len.bigint()')
          </code>
          →
          <code class=""returnvalue"">
           9876543219
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           decimal( [
           <em class=""replaceable"">
            <code>
             precision
            </code>
           </em>
           [ ,
           <em class=""replaceable"">
            <code>
             scale
            </code>
           </em>
           ] ] )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             decimal
            </code>
           </em>
          </code>
         </p>
         <p>
          Rounded decimal value converted from a JSON number or string (
          <code class=""literal"">
           precision
          </code>
          and
          <code class=""literal"">
           scale
          </code>
          must be integer values)
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('1234.5678', '$.decimal(6, 2)')
          </code>
          →
          <code class=""returnvalue"">
           1234.57
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           integer()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             integer
            </code>
           </em>
          </code>
         </p>
         <p>
          Integer value converted from a JSON number or string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""len"": ""12345""}', '$.len.integer()')
          </code>
          →
          <code class=""returnvalue"">
           12345
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           number()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             numeric
            </code>
           </em>
          </code>
         </p>
         <p>
          Numeric value converted from a JSON number or string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""len"": ""123.45""}', '$.len.number()')
          </code>
          →
          <code class=""returnvalue"">
           123.45
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           datetime()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             datetime_type
            </code>
           </em>
          </code>
          (see note)
         </p>
         <p>
          Date/time value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[""2015-8-1"", ""2015-08-12""]', '$[*] ? (@.datetime() &lt; ""2015-08-2"".datetime())')
          </code>
          →
          <code class=""returnvalue"">
           ""2015-8-1""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           datetime(
           <em class=""replaceable"">
            <code>
             template
            </code>
           </em>
           )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             datetime_type
            </code>
           </em>
          </code>
          (see note)
         </p>
         <p>
          Date/time value converted from a string using the specified
          <code class=""function"">
           to_timestamp
          </code>
          template
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[""12:30"", ""18:40""]', '$[*].datetime(""HH24:MI"")')
          </code>
          →
          <code class=""returnvalue"">
           [""12:30:00"", ""18:40:00""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           date()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             date
            </code>
           </em>
          </code>
         </p>
         <p>
          Date value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15""', '$.date()')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           time()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             time without time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Time without time zone value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""12:34:56""', '$.time()')
          </code>
          →
          <code class=""returnvalue"">
           ""12:34:56""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           time(
           <em class=""replaceable"">
            <code>
             precision
            </code>
           </em>
           )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             time without time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Time without time zone value converted from a string, with fractional seconds adjusted to the given precision
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""12:34:56.789""', '$.time(2)')
          </code>
          →
          <code class=""returnvalue"">
           ""12:34:56.79""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           time_tz()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             time with time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Time with time zone value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""12:34:56 +05:30""', '$.time_tz()')
          </code>
          →
          <code class=""returnvalue"">
           ""12:34:56+05:30""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           time_tz(
           <em class=""replaceable"">
            <code>
             precision
            </code>
           </em>
           )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             time with time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Time with time zone value converted from a string, with fractional seconds adjusted to the given precision
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""12:34:56.789 +05:30""', '$.time_tz(2)')
          </code>
          →
          <code class=""returnvalue"">
           ""12:34:56.79+05:30""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           timestamp()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             timestamp without time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Timestamp without time zone value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15 12:34:56""', '$.timestamp()')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15T12:34:56""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           timestamp(
           <em class=""replaceable"">
            <code>
             precision
            </code>
           </em>
           )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             timestamp without time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Timestamp without time zone value converted from a string, with fractional seconds adjusted to the given precision
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15 12:34:56.789""', '$.timestamp(2)')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15T12:34:56.79""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           timestamp_tz()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             timestamp with time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Timestamp with time zone value converted from a string
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15 12:34:56 +05:30""', '$.timestamp_tz()')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15T12:34:56+05:30""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           timestamp_tz(
           <em class=""replaceable"">
            <code>
             precision
            </code>
           </em>
           )
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             timestamp with time zone
            </code>
           </em>
          </code>
         </p>
         <p>
          Timestamp with time zone value converted from a string, with fractional seconds adjusted to the given precision
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('""2023-08-15 12:34:56.789 +05:30""', '$.timestamp_tz(2)')
          </code>
          →
          <code class=""returnvalue"">
           ""2023-08-15T12:34:56.79+05:30""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            object
           </code>
          </em>
          <code class=""literal"">
           .
          </code>
          <code class=""literal"">
           keyvalue()
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             array
            </code>
           </em>
          </code>
         </p>
         <p>
          The object's key-value pairs, represented as an array of objects containing three fields:
          <code class=""literal"">
           ""key""
          </code>
          ,
          <code class=""literal"">
           ""value""
          </code>
          , and
          <code class=""literal"">
           ""id""
          </code>
          ;
          <code class=""literal"">
           ""id""
          </code>
          is a unique identifier of the object the key-value pair belongs to
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('{""x"": ""20"", ""y"": 32}', '$.keyvalue()')
          </code>
          →
          <code class=""returnvalue"">
           [{""id"": 0, ""key"": ""x"", ""value"": ""20""}, {""id"": 0, ""key"": ""y"", ""value"": 32}]
          </code>
         </p>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     The result type of the
     <code class=""literal"">
      datetime()
     </code>
     and
     <code class=""literal"">
      datetime(
      <em class=""replaceable"">
       <code>
        template
       </code>
      </em>
      )
     </code>
     methods can be
     <code class=""type"">
      date
     </code>
     ,
     <code class=""type"">
      timetz
     </code>
     ,
     <code class=""type"">
      time
     </code>
     ,
     <code class=""type"">
      timestamptz
     </code>
     , or
     <code class=""type"">
      timestamp
     </code>
     . Both methods determine their result type dynamically.
    </p>
    <p>
     The
     <code class=""literal"">
      datetime()
     </code>
     method sequentially tries to match its input string to the ISO formats for
     <code class=""type"">
      date
     </code>
     ,
     <code class=""type"">
      timetz
     </code>
     ,
     <code class=""type"">
      time
     </code>
     ,
     <code class=""type"">
      timestamptz
     </code>
     , and
     <code class=""type"">
      timestamp
     </code>
     . It stops on the first matching format and emits the corresponding data type.
    </p>
    <p>
     The
     <code class=""literal"">
      datetime(
      <em class=""replaceable"">
       <code>
        template
       </code>
      </em>
      )
     </code>
     method determines the result type according to the fields used in the provided template string.
    </p>
    <p>
     The
     <code class=""literal"">
      datetime()
     </code>
     and
     <code class=""literal"">
      datetime(
      <em class=""replaceable"">
       <code>
        template
       </code>
      </em>
      )
     </code>
     methods use the same parsing rules as the
     <code class=""literal"">
      to_timestamp
     </code>
     SQL function does (see
     <a class=""xref"" href=""functions-formatting.html"" title=""9.8. Data Type Formatting Functions"">
      Section 9.8
     </a>
     ), with three exceptions. First, these methods don't allow unmatched template patterns. Second, only the following separators are allowed in the template string: minus sign, period, solidus (slash), comma, apostrophe, semicolon, colon and space. Third, separators in the template string must exactly match the input string.
    </p>
    <p>
     If different date/time types need to be compared, an implicit cast is applied. A
     <code class=""type"">
      date
     </code>
     value can be cast to
     <code class=""type"">
      timestamp
     </code>
     or
     <code class=""type"">
      timestamptz
     </code>
     ,
     <code class=""type"">
      timestamp
     </code>
     can be cast to
     <code class=""type"">
      timestamptz
     </code>
     , and
     <code class=""type"">
      time
     </code>
     to
     <code class=""type"">
      timetz
     </code>
     . However, all but the first of these conversions depend on the current
     <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
      TimeZone
     </a>
     setting, and thus can only be performed within timezone-aware
     <code class=""type"">
      jsonpath
     </code>
     functions. Similarly, other date/time-related methods that convert strings to date/time types also do this casting, which may involve the current
     <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
      TimeZone
     </a>
     setting. Therefore, these conversions can also only be performed within timezone-aware
     <code class=""type"">
      jsonpath
     </code>
     functions.
    </p>
   </div>
   <p>
    <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-FILTER-EX-TABLE"" title=""Table 9.51. jsonpath Filter Expression Elements"">
     Table 9.51
    </a>
    shows the available filter expression elements.
   </p>
   <div class=""table"" id=""FUNCTIONS-SQLJSON-FILTER-EX-TABLE"">
    <p class=""title"">
     <strong>
      Table 9.51.
      <code class=""type"">
       jsonpath
      </code>
      Filter Expression Elements
     </strong>
    </p>
    <div class=""table-contents"">
     <table border=""1"" class=""table"" summary=""jsonpath Filter Expression Elements"">
      <colgroup>
       <col/>
      </colgroup>
      <thead>
       <tr>
        <th class=""func_table_entry"">
         <p class=""func_signature"">
          Predicate/Value
         </p>
         <p>
          Description
         </p>
         <p>
          Example(s)
         </p>
        </th>
       </tr>
      </thead>
      <tbody>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           ==
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Equality comparison (this, and the other comparison operators, work on all JSON scalar values)
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, ""a"", 1, 3]', '$[*] ? (@ == 1)')
          </code>
          →
          <code class=""returnvalue"">
           [1, 1]
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, ""a"", 1, 3]', '$[*] ? (@ == ""a"")')
          </code>
          →
          <code class=""returnvalue"">
           [""a""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           !=
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           &lt;&gt;
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Non-equality comparison
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, 2, 1, 3]', '$[*] ? (@ != 1)')
          </code>
          →
          <code class=""returnvalue"">
           [2, 3]
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[""a"", ""b"", ""c""]', '$[*] ? (@ &lt;&gt; ""b"")')
          </code>
          →
          <code class=""returnvalue"">
           [""a"", ""c""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           &lt;
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Less-than comparison
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, 2, 3]', '$[*] ? (@ &lt; 2)')
          </code>
          →
          <code class=""returnvalue"">
           [1]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           &lt;=
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Less-than-or-equal-to comparison
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[""a"", ""b"", ""c""]', '$[*] ? (@ &lt;= ""b"")')
          </code>
          →
          <code class=""returnvalue"">
           [""a"", ""b""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           &gt;
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Greater-than comparison
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, 2, 3]', '$[*] ? (@ &gt; 2)')
          </code>
          →
          <code class=""returnvalue"">
           [3]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          <code class=""literal"">
           &gt;=
          </code>
          <em class=""replaceable"">
           <code>
            value
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Greater-than-or-equal-to comparison
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[1, 2, 3]', '$[*] ? (@ &gt;= 2)')
          </code>
          →
          <code class=""returnvalue"">
           [2, 3]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           true
          </code>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          JSON constant
          <code class=""literal"">
           true
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[{""name"": ""John"", ""parent"": false}, {""name"": ""Chris"", ""parent"": true}]', '$[*] ? (@.parent == true)')
          </code>
          →
          <code class=""returnvalue"">
           {""name"": ""Chris"", ""parent"": true}
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           false
          </code>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          JSON constant
          <code class=""literal"">
           false
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[{""name"": ""John"", ""parent"": false}, {""name"": ""Chris"", ""parent"": true}]', '$[*] ? (@.parent == false)')
          </code>
          →
          <code class=""returnvalue"">
           {""name"": ""John"", ""parent"": false}
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           null
          </code>
          →
          <code class=""returnvalue"">
           <em class=""replaceable"">
            <code>
             value
            </code>
           </em>
          </code>
         </p>
         <p>
          JSON constant
          <code class=""literal"">
           null
          </code>
          (note that, unlike in SQL, comparison to
          <code class=""literal"">
           null
          </code>
          works normally)
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[{""name"": ""Mary"", ""job"": null}, {""name"": ""Michael"", ""job"": ""driver""}]', '$[*] ? (@.job == null) .name')
          </code>
          →
          <code class=""returnvalue"">
           ""Mary""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          <code class=""literal"">
           &amp;&amp;
          </code>
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Boolean AND
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[1, 3, 7]', '$[*] ? (@ &gt; 1 &amp;&amp; @ &lt; 5)')
          </code>
          →
          <code class=""returnvalue"">
           3
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          <code class=""literal"">
           ||
          </code>
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Boolean OR
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[1, 3, 7]', '$[*] ? (@ &lt; 1 || @ &gt; 5)')
          </code>
          →
          <code class=""returnvalue"">
           7
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           !
          </code>
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Boolean NOT
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[1, 3, 7]', '$[*] ? (!(@ &lt; 5))')
          </code>
          →
          <code class=""returnvalue"">
           7
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            boolean
           </code>
          </em>
          <code class=""literal"">
           is unknown
          </code>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Tests whether a Boolean condition is
          <code class=""literal"">
           unknown
          </code>
          .
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[-1, 2, 7, ""foo""]', '$[*] ? ((@ &gt; 0) is unknown)')
          </code>
          →
          <code class=""returnvalue"">
           ""foo""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           like_regex
          </code>
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            flag
           </code>
           <em class=""replaceable"">
            <code>
             string
            </code>
           </em>
          </span>
          ] →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Tests whether the first operand matches the regular expression given by the second operand, optionally with modifications described by a string of
          <code class=""literal"">
           flag
          </code>
          characters (see
          <a class=""xref"" href=""functions-json.html#JSONPATH-REGULAR-EXPRESSIONS"" title=""9.16.2.4. SQL/JSON Regular Expressions"">
           Section 9.16.2.4
          </a>
          ).
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc""]', '$[*] ? (@ like_regex ""^ab.*c"")')
          </code>
          →
          <code class=""returnvalue"">
           [""abc"", ""abdacb""]
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('[""abc"", ""abd"", ""aBdC"", ""abdacb"", ""babc""]', '$[*] ? (@ like_regex ""^ab.*c"" flag ""i"")')
          </code>
          →
          <code class=""returnvalue"">
           [""abc"", ""aBdC"", ""abdacb""]
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          <code class=""literal"">
           starts with
          </code>
          <em class=""replaceable"">
           <code>
            string
           </code>
          </em>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Tests whether the second operand is an initial substring of the first operand.
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('[""John Smith"", ""Mary Stone"", ""Bob Johnson""]', '$[*] ? (@ starts with ""John"")')
          </code>
          →
          <code class=""returnvalue"">
           ""John Smith""
          </code>
         </p>
        </td>
       </tr>
       <tr>
        <td class=""func_table_entry"">
         <p class=""func_signature"">
          <code class=""literal"">
           exists
          </code>
          <code class=""literal"">
           (
          </code>
          <em class=""replaceable"">
           <code>
            path_expression
           </code>
          </em>
          <code class=""literal"">
           )
          </code>
          →
          <code class=""returnvalue"">
           boolean
          </code>
         </p>
         <p>
          Tests whether a path expression matches at least one SQL/JSON item. Returns
          <code class=""literal"">
           unknown
          </code>
          if the path expression would result in an error; the second example uses this to avoid a no-such-key error in strict mode.
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query('{""x"": [1, 2], ""y"": [2, 4]}', 'strict $.* ? (exists (@ ? (@[*] &gt; 2)))')
          </code>
          →
          <code class=""returnvalue"">
           [2, 4]
          </code>
         </p>
         <p>
          <code class=""literal"">
           jsonb_path_query_array('{""value"": 41}', 'strict $ ? (exists (@.name)) .name')
          </code>
          →
          <code class=""returnvalue"">
           []
          </code>
         </p>
        </td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <br class=""table-break""/>
  </div>
  <div class=""sect3"" id=""JSONPATH-REGULAR-EXPRESSIONS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       9.16.2.4. SQL/JSON Regular Expressions
       <a class=""id_link"" href=""#JSONPATH-REGULAR-EXPRESSIONS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.8.22.9.23.2"" name=""id-1.5.8.22.9.23.2"">
   </a>
   <p>
    SQL/JSON path expressions allow matching text to a regular expression with the
    <code class=""literal"">
     like_regex
    </code>
    filter. For example, the following SQL/JSON path query would case-insensitively match all strings in an array that start with an English vowel:
   </p>
   <pre class=""programlisting"">
$[*] ? (@ like_regex ""^[aeiou]"" flag ""i"")
</pre>
   <p>
    The optional
    <code class=""literal"">
     flag
    </code>
    string may include one or more of the characters
    <code class=""literal"">
     i
    </code>
    for case-insensitive match,
    <code class=""literal"">
     m
    </code>
    to allow
    <code class=""literal"">
     ^
    </code>
    and
    <code class=""literal"">
     $
    </code>
    to match at newlines,
    <code class=""literal"">
     s
    </code>
    to allow
    <code class=""literal"">
     .
    </code>
    to match a newline, and
    <code class=""literal"">
     q
    </code>
    to quote the whole pattern (reducing the behavior to a simple substring match).
   </p>
   <p>
    The SQL/JSON standard borrows its definition for regular expressions from the
    <code class=""literal"">
     LIKE_REGEX
    </code>
    operator, which in turn uses the XQuery standard. PostgreSQL does not currently support the
    <code class=""literal"">
     LIKE_REGEX
    </code>
    operator. Therefore, the
    <code class=""literal"">
     like_regex
    </code>
    filter is implemented using the POSIX regular expression engine described in
    <a class=""xref"" href=""functions-matching.html#FUNCTIONS-POSIX-REGEXP"" title=""9.7.3. POSIX Regular Expressions"">
     Section 9.7.3
    </a>
    . This leads to various minor discrepancies from standard SQL/JSON behavior, which are cataloged in
    <a class=""xref"" href=""functions-matching.html#POSIX-VS-XQUERY"" title=""9.7.3.8. Differences from SQL Standard and XQuery"">
     Section 9.7.3.8
    </a>
    . Note, however, that the flag-letter incompatibilities described there do not apply to SQL/JSON, as it translates the XQuery flag letters to match what the POSIX engine expects.
   </p>
   <p>
    Keep in mind that the pattern argument of
    <code class=""literal"">
     like_regex
    </code>
    is a JSON path string literal, written according to the rules given in
    <a class=""xref"" href=""datatype-json.html#DATATYPE-JSONPATH"" title=""8.14.7. jsonpath Type"">
     Section 8.14.7
    </a>
    . This means in particular that any backslashes you want to use in the regular expression must be doubled. For example, to match string values of the root document that contain only digits:
   </p>
   <pre class=""programlisting"">
$.* ? (@ like_regex ""^\\d+$"")
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""SQLJSON-QUERY-FUNCTIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.16.3. SQL/JSON Query Functions
      <a class=""id_link"" href=""#SQLJSON-QUERY-FUNCTIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   SQL/JSON functions
   <code class=""literal"">
    JSON_EXISTS()
   </code>
   ,
   <code class=""literal"">
    JSON_QUERY()
   </code>
   , and
   <code class=""literal"">
    JSON_VALUE()
   </code>
   described in
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-QUERYING"" title=""Table 9.52. SQL/JSON Query Functions"">
    Table 9.52
   </a>
   can be used to query JSON documents. Each of these functions apply a
   <em class=""replaceable"">
    <code>
     path_expression
    </code>
   </em>
   (an SQL/JSON path query) to a
   <em class=""replaceable"">
    <code>
     context_item
    </code>
   </em>
   (the document). See
   <a class=""xref"" href=""functions-json.html#FUNCTIONS-SQLJSON-PATH"" title=""9.16.2. The SQL/JSON Path Language"">
    Section 9.16.2
   </a>
   for more details on what the
   <em class=""replaceable"">
    <code>
     path_expression
    </code>
   </em>
   can contain. The
   <em class=""replaceable"">
    <code>
     path_expression
    </code>
   </em>
   can also reference variables, whose values are specified with their respective names in the
   <code class=""literal"">
    PASSING
   </code>
   clause that is supported by each function.
   <em class=""replaceable"">
    <code>
     context_item
    </code>
   </em>
   can be a
   <code class=""type"">
    jsonb
   </code>
   value or a character string that can be successfully cast to
   <code class=""type"">
    jsonb
   </code>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-SQLJSON-QUERYING"">
   <p class=""title"">
    <strong>
     Table 9.52. SQL/JSON Query Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""SQL/JSON Query Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function signature
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.10.3.2.2.1.1.1.1"" name=""id-1.5.8.22.10.3.2.2.1.1.1.1"">
         </a>
        </p>
        <pre class=""synopsis"">
<code class=""function"">JSON_EXISTS</code> (
<em class=""replaceable""><code>context_item</code></em>, <em class=""replaceable""><code>path_expression</code></em>
[<span class=""optional""> <code class=""literal"">PASSING</code> { <em class=""replaceable""><code>value</code></em> <code class=""literal"">AS</code> <em class=""replaceable""><code>varname</code></em> } [<span class=""optional"">, ...</span>]</span>]
[<span class=""optional"">{ <code class=""literal"">TRUE</code> | <code class=""literal"">FALSE</code> |<code class=""literal""> UNKNOWN</code> | <code class=""literal"">ERROR</code> } <code class=""literal"">ON ERROR</code> </span>]) → <code class=""returnvalue"">boolean</code>
</pre>
        <p class=""func_signature"">
        </p>
        <div class=""itemizedlist"">
         <ul class=""itemizedlist"" style=""list-style-type: disc;"">
          <li class=""listitem"">
           <p>
            Returns true if the SQL/JSON
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            applied to the
            <em class=""replaceable"">
             <code>
              context_item
             </code>
            </em>
            yields any items, false otherwise.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            The
            <code class=""literal"">
             ON ERROR
            </code>
            clause specifies the behavior if an error occurs during
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            evaluation. Specifying
            <code class=""literal"">
             ERROR
            </code>
            will cause an error to be thrown with the appropriate message. Other options include returning
            <code class=""type"">
             boolean
            </code>
            values
            <code class=""literal"">
             FALSE
            </code>
            or
            <code class=""literal"">
             TRUE
            </code>
            or the value
            <code class=""literal"">
             UNKNOWN
            </code>
            which is actually an SQL NULL. The default when no
            <code class=""literal"">
             ON ERROR
            </code>
            clause is specified is to return the
            <code class=""type"">
             boolean
            </code>
            value
            <code class=""literal"">
             FALSE
            </code>
            .
           </p>
          </li>
         </ul>
        </div>
        <p>
         Examples:
        </p>
        <p>
         <code class=""literal"">
          JSON_EXISTS(jsonb '{""key1"": [1,2,3]}', 'strict $.key1[*] ? (@ &gt; $x)' PASSING 2 AS x)
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_EXISTS(jsonb '{""a"": [1,2,3]}', 'lax $.a[5]' ERROR ON ERROR)
         </code>
         →
         <code class=""returnvalue"">
          f
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_EXISTS(jsonb '{""a"": [1,2,3]}', 'strict $.a[5]' ERROR ON ERROR)
         </code>
         →
        </p>
        <pre class=""programlisting"">
ERROR:  jsonpath array subscript is out of bounds
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.10.3.2.2.2.1.1.1"" name=""id-1.5.8.22.10.3.2.2.2.1.1.1"">
         </a>
        </p>
        <pre class=""synopsis"">
<code class=""function"">JSON_QUERY</code> (
<em class=""replaceable""><code>context_item</code></em>, <em class=""replaceable""><code>path_expression</code></em>
[<span class=""optional""> <code class=""literal"">PASSING</code> { <em class=""replaceable""><code>value</code></em> <code class=""literal"">AS</code> <em class=""replaceable""><code>varname</code></em> } [<span class=""optional"">, ...</span>]</span>]
[<span class=""optional""> <code class=""literal"">RETURNING</code> <em class=""replaceable""><code>data_type</code></em> [<span class=""optional""> <code class=""literal"">FORMAT JSON</code> [<span class=""optional""> <code class=""literal"">ENCODING UTF8</code> </span>] </span>] </span>]
[<span class=""optional""> { <code class=""literal"">WITHOUT</code> | <code class=""literal"">WITH</code> { <code class=""literal"">CONDITIONAL</code> | [<span class=""optional""><code class=""literal"">UNCONDITIONAL</code></span>] } } [<span class=""optional""> <code class=""literal"">ARRAY</code> </span>] <code class=""literal"">WRAPPER</code> </span>]
[<span class=""optional""> { <code class=""literal"">KEEP</code> | <code class=""literal"">OMIT</code> } <code class=""literal"">QUOTES</code> [<span class=""optional""> <code class=""literal"">ON SCALAR STRING</code> </span>] </span>]
[<span class=""optional""> { <code class=""literal"">ERROR</code> | <code class=""literal"">NULL</code> | <code class=""literal"">EMPTY</code> { [<span class=""optional""> <code class=""literal"">ARRAY</code> </span>] | <code class=""literal"">OBJECT</code> } | <code class=""literal"">DEFAULT</code> <em class=""replaceable""><code>expression</code></em> } <code class=""literal"">ON EMPTY</code> </span>]
[<span class=""optional""> { <code class=""literal"">ERROR</code> | <code class=""literal"">NULL</code> | <code class=""literal"">EMPTY</code> { [<span class=""optional""> <code class=""literal"">ARRAY</code> </span>] | <code class=""literal"">OBJECT</code> } | <code class=""literal"">DEFAULT</code> <em class=""replaceable""><code>expression</code></em> } <code class=""literal"">ON ERROR</code> </span>]) → <code class=""returnvalue"">jsonb</code>
</pre>
        <p class=""func_signature"">
        </p>
        <div class=""itemizedlist"">
         <ul class=""itemizedlist"" style=""list-style-type: disc;"">
          <li class=""listitem"">
           <p>
            Returns the result of applying the SQL/JSON
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            to the
            <em class=""replaceable"">
             <code>
              context_item
             </code>
            </em>
            .
           </p>
          </li>
          <li class=""listitem"">
           <p>
            By default, the result is returned as a value of type
            <code class=""type"">
             jsonb
            </code>
            , though the
            <code class=""literal"">
             RETURNING
            </code>
            clause can be used to return as some other type to which it can be successfully coerced.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            If the path expression may return multiple values, it might be necessary to wrap those values using the
            <code class=""literal"">
             WITH WRAPPER
            </code>
            clause to make it a valid JSON string, because the default behavior is to not wrap them, as if
            <code class=""literal"">
             WITHOUT WRAPPER
            </code>
            were specified. The
            <code class=""literal"">
             WITH WRAPPER
            </code>
            clause is by default taken to mean
            <code class=""literal"">
             WITH UNCONDITIONAL WRAPPER
            </code>
            , which means that even a single result value will be wrapped. To apply the wrapper only when multiple values are present, specify
            <code class=""literal"">
             WITH CONDITIONAL WRAPPER
            </code>
            . Getting multiple values in result will be treated as an error if
            <code class=""literal"">
             WITHOUT WRAPPER
            </code>
            is specified.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            If the result is a scalar string, by default, the returned value will be surrounded by quotes, making it a valid JSON value. It can be made explicit by specifying
            <code class=""literal"">
             KEEP QUOTES
            </code>
            . Conversely, quotes can be omitted by specifying
            <code class=""literal"">
             OMIT QUOTES
            </code>
            . To ensure that the result is a valid JSON value,
            <code class=""literal"">
             OMIT QUOTES
            </code>
            cannot be specified when
            <code class=""literal"">
             WITH WRAPPER
            </code>
            is also specified.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            The
            <code class=""literal"">
             ON EMPTY
            </code>
            clause specifies the behavior if evaluating
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            yields an empty set. The
            <code class=""literal"">
             ON ERROR
            </code>
            clause specifies the behavior if an error occurs when evaluating
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            , when coercing the result value to the
            <code class=""literal"">
             RETURNING
            </code>
            type, or when evaluating the
            <code class=""literal"">
             ON EMPTY
            </code>
            expression if the
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            evaluation returns an empty set.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            For both
            <code class=""literal"">
             ON EMPTY
            </code>
            and
            <code class=""literal"">
             ON ERROR
            </code>
            , specifying
            <code class=""literal"">
             ERROR
            </code>
            will cause an error to be thrown with the appropriate message. Other options include returning an SQL NULL, an empty array (
            <code class=""literal"">
             EMPTY [
             <span class=""optional"">
              ARRAY
             </span>
             ]
            </code>
            ), an empty object (
            <code class=""literal"">
             EMPTY OBJECT
            </code>
            ), or a user-specified expression (
            <code class=""literal"">
             DEFAULT
            </code>
            <em class=""replaceable"">
             <code>
              expression
             </code>
            </em>
            ) that can be coerced to jsonb or the type specified in
            <code class=""literal"">
             RETURNING
            </code>
            . The default when
            <code class=""literal"">
             ON EMPTY
            </code>
            or
            <code class=""literal"">
             ON ERROR
            </code>
            is not specified is to return an SQL NULL value.
           </p>
          </li>
         </ul>
        </div>
        <p>
         Examples:
        </p>
        <p>
         <code class=""literal"">
          JSON_QUERY(jsonb '[1,[2,3],null]', 'lax $[*][$off]' PASSING 1 AS off WITH CONDITIONAL WRAPPER)
         </code>
         →
         <code class=""returnvalue"">
          3
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_QUERY(jsonb '{""a"": ""[1, 2]""}', 'lax $.a' OMIT QUOTES)
         </code>
         →
         <code class=""returnvalue"">
          [1, 2]
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_QUERY(jsonb '{""a"": ""[1, 2]""}', 'lax $.a' RETURNING int[] OMIT QUOTES ERROR ON ERROR)
         </code>
         →
        </p>
        <pre class=""programlisting"">
ERROR:  malformed array literal: ""[1, 2]""
DETAIL:  Missing ""]"" after array dimensions.
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.22.10.3.2.2.3.1.1.1"" name=""id-1.5.8.22.10.3.2.2.3.1.1.1"">
         </a>
        </p>
        <pre class=""synopsis"">
<code class=""function"">JSON_VALUE</code> (
<em class=""replaceable""><code>context_item</code></em>, <em class=""replaceable""><code>path_expression</code></em>
[<span class=""optional""> <code class=""literal"">PASSING</code> { <em class=""replaceable""><code>value</code></em> <code class=""literal"">AS</code> <em class=""replaceable""><code>varname</code></em> } [<span class=""optional"">, ...</span>]</span>]
[<span class=""optional""> <code class=""literal"">RETURNING</code> <em class=""replaceable""><code>data_type</code></em> </span>]
[<span class=""optional""> { <code class=""literal"">ERROR</code> | <code class=""literal"">NULL</code> | <code class=""literal"">DEFAULT</code> <em class=""replaceable""><code>expression</code></em> } <code class=""literal"">ON EMPTY</code> </span>]
[<span class=""optional""> { <code class=""literal"">ERROR</code> | <code class=""literal"">NULL</code> | <code class=""literal"">DEFAULT</code> <em class=""replaceable""><code>expression</code></em> } <code class=""literal"">ON ERROR</code> </span>]) → <code class=""returnvalue"">text</code>
</pre>
        <p class=""func_signature"">
        </p>
        <div class=""itemizedlist"">
         <ul class=""itemizedlist"" style=""list-style-type: disc;"">
          <li class=""listitem"">
           <p>
            Returns the result of applying the SQL/JSON
            <em class=""replaceable"">
             <code>
              path_expression
             </code>
            </em>
            to the
            <em class=""replaceable"">
             <code>
              context_item
             </code>
            </em>
            .
           </p>
          </li>
          <li class=""listitem"">
           <p>
            Only use
            <code class=""function"">
             JSON_VALUE()
            </code>
            if the extracted value is expected to be a single
            <acronym class=""acronym"">
             SQL/JSON
            </acronym>
            scalar item; getting multiple values will be treated as an error. If you expect that extracted value might be an object or an array, use the
            <code class=""function"">
             JSON_QUERY
            </code>
            function instead.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            By default, the result, which must be a single scalar value, is returned as a value of type
            <code class=""type"">
             text
            </code>
            , though the
            <code class=""literal"">
             RETURNING
            </code>
            clause can be used to return as some other type to which it can be successfully coerced.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            The
            <code class=""literal"">
             ON ERROR
            </code>
            and
            <code class=""literal"">
             ON EMPTY
            </code>
            clauses have similar semantics as mentioned in the description of
            <code class=""function"">
             JSON_QUERY
            </code>
            , except the set of values returned in lieu of throwing an error is different.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            Note that scalar strings returned by
            <code class=""function"">
             JSON_VALUE
            </code>
            always have their quotes removed, equivalent to specifying
            <code class=""literal"">
             OMIT QUOTES
            </code>
            in
            <code class=""function"">
             JSON_QUERY
            </code>
            .
           </p>
          </li>
         </ul>
        </div>
        <p>
         Examples:
        </p>
        <p>
         <code class=""literal"">
          JSON_VALUE(jsonb '""123.45""', '$' RETURNING float)
         </code>
         →
         <code class=""returnvalue"">
          123.45
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_VALUE(jsonb '""03:04 2015-02-01""', '$.datetime(""HH24:MI YYYY-MM-DD"")' RETURNING date)
         </code>
         →
         <code class=""returnvalue"">
          2015-02-01
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_VALUE(jsonb '[1,2]', 'strict $[$off]' PASSING 1 as off)
         </code>
         →
         <code class=""returnvalue"">
          2
         </code>
        </p>
        <p>
         <code class=""literal"">
          JSON_VALUE(jsonb '[1,2]', 'strict $[*]' DEFAULT 9 ON ERROR)
         </code>
         →
         <code class=""returnvalue"">
          9
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The
    <em class=""replaceable"">
     <code>
      context_item
     </code>
    </em>
    expression is converted to
    <code class=""type"">
     jsonb
    </code>
    by an implicit cast if the expression is not already of type
    <code class=""type"">
     jsonb
    </code>
    . Note, however, that any parsing errors that occur during that conversion are thrown unconditionally, that is, are not handled according to the (specified or implicit)
    <code class=""literal"">
     ON ERROR
    </code>
    clause.
   </p>
  </div>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <code class=""function"">
     JSON_VALUE()
    </code>
    returns an SQL NULL if
    <em class=""replaceable"">
     <code>
      path_expression
     </code>
    </em>
    returns a JSON
    <code class=""literal"">
     null
    </code>
    , whereas
    <code class=""function"">
     JSON_QUERY()
    </code>
    returns the JSON
    <code class=""literal"">
     null
    </code>
    as is.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SQLJSON-TABLE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.16.4. JSON_TABLE
      <a class=""id_link"" href=""#FUNCTIONS-SQLJSON-TABLE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.22.11.2"" name=""id-1.5.8.22.11.2"">
  </a>
  <p>
   <code class=""function"">
    JSON_TABLE
   </code>
   is an SQL/JSON function which queries
   <acronym class=""acronym"">
    JSON
   </acronym>
   data and presents the results as a relational view, which can be accessed as a regular SQL table. You can use
   <code class=""function"">
    JSON_TABLE
   </code>
   inside the
   <code class=""literal"">
    FROM
   </code>
   clause of a
   <code class=""literal"">
    SELECT
   </code>
   ,
   <code class=""literal"">
    UPDATE
   </code>
   , or
   <code class=""literal"">
    DELETE
   </code>
   and as data source in a
   <code class=""literal"">
    MERGE
   </code>
   statement.
  </p>
  <p>
   Taking JSON data as input,
   <code class=""function"">
    JSON_TABLE
   </code>
   uses a JSON path expression to extract a part of the provided data to use as a
   <em class=""firstterm"">
    row pattern
   </em>
   for the constructed view. Each SQL/JSON value given by the row pattern serves as source for a separate row in the constructed view.
  </p>
  <p>
   To split the row pattern into columns,
   <code class=""function"">
    JSON_TABLE
   </code>
   provides the
   <code class=""literal"">
    COLUMNS
   </code>
   clause that defines the schema of the created view. For each column, a separate JSON path expression can be specified to be evaluated against the row pattern to get an SQL/JSON value that will become the value for the specified column in a given output row.
  </p>
  <p>
   JSON data stored at a nested level of the row pattern can be extracted using the
   <code class=""literal"">
    NESTED PATH
   </code>
   clause. Each
   <code class=""literal"">
    NESTED PATH
   </code>
   clause can be used to generate one or more columns using the data from a nested level of the row pattern. Those columns can be specified using a
   <code class=""literal"">
    COLUMNS
   </code>
   clause that looks similar to the top-level COLUMNS clause. Rows constructed from NESTED COLUMNS are called
   <em class=""firstterm"">
    child rows
   </em>
   and are joined against the row constructed from the columns specified in the parent
   <code class=""literal"">
    COLUMNS
   </code>
   clause to get the row in the final view. Child columns themselves may contain a
   <code class=""literal"">
    NESTED PATH
   </code>
   specification thus allowing to extract data located at arbitrary nesting levels. Columns produced by multiple
   <code class=""literal"">
    NESTED PATH
   </code>
   s at the same level are considered to be
   <em class=""firstterm"">
    siblings
   </em>
   of each other and their rows after joining with the parent row are combined using UNION.
  </p>
  <p>
   The rows produced by
   <code class=""function"">
    JSON_TABLE
   </code>
   are laterally joined to the row that generated them, so you do not have to explicitly join the constructed view with the original table holding
   <acronym class=""acronym"">
    JSON
   </acronym>
   data.
  </p>
  <p>
   The syntax is:
  </p>
  <pre class=""synopsis"">
JSON_TABLE (
    <em class=""replaceable""><code>context_item</code></em>, <em class=""replaceable""><code>path_expression</code></em> [<span class=""optional""> AS <em class=""replaceable""><code>json_path_name</code></em> </span>] [<span class=""optional""> PASSING { <em class=""replaceable""><code>value</code></em> AS <em class=""replaceable""><code>varname</code></em> } [<span class=""optional"">, ...</span>] </span>]
    COLUMNS ( <em class=""replaceable""><code>json_table_column</code></em> [<span class=""optional"">, ...</span>] )
    [<span class=""optional""> { <code class=""literal"">ERROR</code> | <code class=""literal"">EMPTY</code> [<span class=""optional"">ARRAY</span>]} <code class=""literal"">ON ERROR</code> </span>]
)

<span class=""phrase"">
where <em class=""replaceable""><code>json_table_column</code></em> is:
</span>
  <em class=""replaceable""><code>name</code></em> FOR ORDINALITY
  | <em class=""replaceable""><code>name</code></em> <em class=""replaceable""><code>type</code></em>
        [<span class=""optional""> FORMAT JSON [<span class=""optional"">ENCODING <code class=""literal"">UTF8</code></span>]</span>]
        [<span class=""optional""> PATH <em class=""replaceable""><code>path_expression</code></em> </span>]
        [<span class=""optional""> { WITHOUT | WITH { CONDITIONAL | [<span class=""optional"">UNCONDITIONAL</span>] } } [<span class=""optional""> ARRAY </span>] WRAPPER </span>]
        [<span class=""optional""> { KEEP | OMIT } QUOTES [<span class=""optional""> ON SCALAR STRING </span>] </span>]
        [<span class=""optional""> { ERROR | NULL | EMPTY { [<span class=""optional"">ARRAY</span>] | OBJECT } | DEFAULT <em class=""replaceable""><code>expression</code></em> } ON EMPTY </span>]
        [<span class=""optional""> { ERROR | NULL | EMPTY { [<span class=""optional"">ARRAY</span>] | OBJECT } | DEFAULT <em class=""replaceable""><code>expression</code></em> } ON ERROR </span>]
  | <em class=""replaceable""><code>name</code></em> <em class=""replaceable""><code>type</code></em> EXISTS [<span class=""optional""> PATH <em class=""replaceable""><code>path_expression</code></em> </span>]
        [<span class=""optional""> { ERROR | TRUE | FALSE | UNKNOWN } ON ERROR </span>]
  | NESTED [<span class=""optional""> PATH </span>] <em class=""replaceable""><code>path_expression</code></em> [<span class=""optional""> AS <em class=""replaceable""><code>json_path_name</code></em> </span>] COLUMNS ( <em class=""replaceable""><code>json_table_column</code></em> [<span class=""optional"">, ...</span>] )
</pre>
  <p>
   Each syntax element is described below in more detail.
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <code class=""literal"">
       <em class=""replaceable"">
        <code>
         context_item
        </code>
       </em>
       ,
       <em class=""replaceable"">
        <code>
         path_expression
        </code>
       </em>
       [
       <span class=""optional"">
        <code class=""literal"">
         AS
        </code>
        <em class=""replaceable"">
         <code>
          json_path_name
         </code>
        </em>
       </span>
       ] [
       <span class=""optional"">
        <code class=""literal"">
         PASSING
        </code>
        {
        <em class=""replaceable"">
         <code>
          value
         </code>
        </em>
        <code class=""literal"">
         AS
        </code>
        <em class=""replaceable"">
         <code>
          varname
         </code>
        </em>
        } [
        <span class=""optional"">
         , ...
        </span>
        ]
       </span>
       ]
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The
      <em class=""replaceable"">
       <code>
        context_item
       </code>
      </em>
      specifies the input document to query, the
      <em class=""replaceable"">
       <code>
        path_expression
       </code>
      </em>
      is an SQL/JSON path expression defining the query, and
      <em class=""replaceable"">
       <code>
        json_path_name
       </code>
      </em>
      is an optional name for the
      <em class=""replaceable"">
       <code>
        path_expression
       </code>
      </em>
      . The optional
      <code class=""literal"">
       PASSING
      </code>
      clause provides data values for the variables mentioned in the
      <em class=""replaceable"">
       <code>
        path_expression
       </code>
      </em>
      . The result of the input data evaluation using the aforementioned elements is called the
      <em class=""firstterm"">
       row pattern
      </em>
      , which is used as the source for row values in the constructed view.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       COLUMNS
      </code>
      (
      <em class=""replaceable"">
       <code>
        json_table_column
       </code>
      </em>
      [
      <span class=""optional"">
       , ...
      </span>
      ] )
     </span>
    </dt>
    <dd>
     <p>
      The
      <code class=""literal"">
       COLUMNS
      </code>
      clause defining the schema of the constructed view. In this clause, you can specify each column to be filled with an SQL/JSON value obtained by applying a JSON path expression against the row pattern.
      <em class=""replaceable"">
       <code>
        json_table_column
       </code>
      </em>
      has the following variants:
     </p>
     <div class=""variablelist"">
      <dl class=""variablelist"">
       <dt>
        <span class=""term"">
         <em class=""replaceable"">
          <code>
           name
          </code>
         </em>
         <code class=""literal"">
          FOR ORDINALITY
         </code>
        </span>
       </dt>
       <dd>
        <p>
         Adds an ordinality column that provides sequential row numbering starting from 1. Each
         <code class=""literal"">
          NESTED PATH
         </code>
         (see below) gets its own counter for any nested ordinality columns.
        </p>
       </dd>
       <dt>
        <span class=""term"">
         <code class=""literal"">
          <em class=""replaceable"">
           <code>
            name
           </code>
          </em>
          <em class=""replaceable"">
           <code>
            type
           </code>
          </em>
          [
          <span class=""optional"">
           <code class=""literal"">
            FORMAT JSON
           </code>
           [
           <span class=""optional"">
            ENCODING
            <code class=""literal"">
             UTF8
            </code>
           </span>
           ]
          </span>
          ] [
          <span class=""optional"">
           <code class=""literal"">
            PATH
           </code>
           <em class=""replaceable"">
            <code>
             path_expression
            </code>
           </em>
          </span>
          ]
         </code>
        </span>
       </dt>
       <dd>
        <p>
         Inserts an SQL/JSON value obtained by applying
         <em class=""replaceable"">
          <code>
           path_expression
          </code>
         </em>
         against the row pattern into the view's output row after coercing it to specified
         <em class=""replaceable"">
          <code>
           type
          </code>
         </em>
         .
        </p>
        <p>
         Specifying
         <code class=""literal"">
          FORMAT JSON
         </code>
         makes it explicit that you expect the value to be a valid
         <code class=""type"">
          json
         </code>
         object. It only makes sense to specify
         <code class=""literal"">
          FORMAT JSON
         </code>
         if
         <em class=""replaceable"">
          <code>
           type
          </code>
         </em>
         is one of
         <code class=""type"">
          bpchar
         </code>
         ,
         <code class=""type"">
          bytea
         </code>
         ,
         <code class=""type"">
          character varying
         </code>
         ,
         <code class=""type"">
          name
         </code>
         ,
         <code class=""type"">
          json
         </code>
         ,
         <code class=""type"">
          jsonb
         </code>
         ,
         <code class=""type"">
          text
         </code>
         , or a domain over these types.
        </p>
        <p>
         Optionally, you can specify
         <code class=""literal"">
          WRAPPER
         </code>
         and
         <code class=""literal"">
          QUOTES
         </code>
         clauses to format the output. Note that specifying
         <code class=""literal"">
          OMIT QUOTES
         </code>
         overrides
         <code class=""literal"">
          FORMAT JSON
         </code>
         if also specified, because unquoted literals do not constitute valid
         <code class=""type"">
          json
         </code>
         values.
        </p>
        <p>
         Optionally, you can use
         <code class=""literal"">
          ON EMPTY
         </code>
         and
         <code class=""literal"">
          ON ERROR
         </code>
         clauses to specify whether to throw the error or return the specified value when the result of JSON path evaluation is empty and when an error occurs during JSON path evaluation or when coercing the SQL/JSON value to the specified type, respectively. The default for both is to return a
         <code class=""literal"">
          NULL
         </code>
         value.
        </p>
        <div class=""note"">
         <h3 class=""title"">
          Note
         </h3>
         <p>
          This clause is internally turned into and has the same semantics as
          <code class=""function"">
           JSON_VALUE
          </code>
          or
          <code class=""function"">
           JSON_QUERY
          </code>
          . The latter if the specified type is not a scalar type or if either of
          <code class=""literal"">
           FORMAT JSON
          </code>
          ,
          <code class=""literal"">
           WRAPPER
          </code>
          , or
          <code class=""literal"">
           QUOTES
          </code>
          clause is present.
         </p>
        </div>
       </dd>
       <dt>
        <span class=""term"">
         <em class=""replaceable"">
          <code>
           name
          </code>
         </em>
         <em class=""replaceable"">
          <code>
           type
          </code>
         </em>
         <code class=""literal"">
          EXISTS
         </code>
         [
         <span class=""optional"">
          <code class=""literal"">
           PATH
          </code>
          <em class=""replaceable"">
           <code>
            path_expression
           </code>
          </em>
         </span>
         ]
        </span>
       </dt>
       <dd>
        <p>
         Inserts a boolean value obtained by applying
         <em class=""replaceable"">
          <code>
           path_expression
          </code>
         </em>
         against the row pattern into the view's output row after coercing it to specified
         <em class=""replaceable"">
          <code>
           type
          </code>
         </em>
         .
        </p>
        <p>
         The value corresponds to whether applying the
         <code class=""literal"">
          PATH
         </code>
         expression to the row pattern yields any values.
        </p>
        <p>
         The specified
         <em class=""replaceable"">
          <code>
           type
          </code>
         </em>
         should have a cast from the
         <code class=""type"">
          boolean
         </code>
         type.
        </p>
        <p>
         Optionally, you can use
         <code class=""literal"">
          ON ERROR
         </code>
         to specify whether to throw the error or return the specified value when an error occurs during JSON path evaluation or when coercing SQL/JSON value to the specified type. The default is to return a boolean value
         <code class=""literal"">
          FALSE
         </code>
         .
        </p>
        <div class=""note"">
         <h3 class=""title"">
          Note
         </h3>
         <p>
          This clause is internally turned into and has the same semantics as
          <code class=""function"">
           JSON_EXISTS
          </code>
          .
         </p>
        </div>
       </dd>
       <dt>
        <span class=""term"">
         <code class=""literal"">
          NESTED [
          <span class=""optional"">
           PATH
          </span>
          ]
         </code>
         <em class=""replaceable"">
          <code>
           path_expression
          </code>
         </em>
         [
         <span class=""optional"">
          <code class=""literal"">
           AS
          </code>
          <em class=""replaceable"">
           <code>
            json_path_name
           </code>
          </em>
         </span>
         ]
         <code class=""literal"">
          COLUMNS
         </code>
         (
         <em class=""replaceable"">
          <code>
           json_table_column
          </code>
         </em>
         [
         <span class=""optional"">
          , ...
         </span>
         ] )
        </span>
       </dt>
       <dd>
        <p>
         Extracts SQL/JSON values from nested levels of the row pattern, generates one or more columns as defined by the
         <code class=""literal"">
          COLUMNS
         </code>
         subclause, and inserts the extracted SQL/JSON values into those columns. The
         <em class=""replaceable"">
          <code>
           json_table_column
          </code>
         </em>
         expression in the
         <code class=""literal"">
          COLUMNS
         </code>
         subclause uses the same syntax as in the parent
         <code class=""literal"">
          COLUMNS
         </code>
         clause.
        </p>
        <p>
         The
         <code class=""literal"">
          NESTED PATH
         </code>
         syntax is recursive, so you can go down multiple nested levels by specifying several
         <code class=""literal"">
          NESTED PATH
         </code>
         subclauses within each other. It allows to unnest the hierarchy of JSON objects and arrays in a single function invocation rather than chaining several
         <code class=""function"">
          JSON_TABLE
         </code>
         expressions in an SQL statement.
        </p>
       </dd>
      </dl>
     </div>
     <div class=""note"">
      <h3 class=""title"">
       Note
      </h3>
      <p>
       In each variant of
       <em class=""replaceable"">
        <code>
         json_table_column
        </code>
       </em>
       described above, if the
       <code class=""literal"">
        PATH
       </code>
       clause is omitted, path expression
       <code class=""literal"">
        $.
        <em class=""replaceable"">
         <code>
          name
         </code>
        </em>
       </code>
       is used, where
       <em class=""replaceable"">
        <code>
         name
        </code>
       </em>
       is the provided column name.
      </p>
     </div>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       AS
      </code>
      <em class=""replaceable"">
       <code>
        json_path_name
       </code>
      </em>
     </span>
    </dt>
    <dd>
     <p>
      The optional
      <em class=""replaceable"">
       <code>
        json_path_name
       </code>
      </em>
      serves as an identifier of the provided
      <em class=""replaceable"">
       <code>
        path_expression
       </code>
      </em>
      . The name must be unique and distinct from the column names.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      {
      <code class=""literal"">
       ERROR
      </code>
      |
      <code class=""literal"">
       EMPTY
      </code>
      }
      <code class=""literal"">
       ON ERROR
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The optional
      <code class=""literal"">
       ON ERROR
      </code>
      can be used to specify how to handle errors when evaluating the top-level
      <em class=""replaceable"">
       <code>
        path_expression
       </code>
      </em>
      . Use
      <code class=""literal"">
       ERROR
      </code>
      if you want the errors to be thrown and
      <code class=""literal"">
       EMPTY
      </code>
      to return an empty table, that is, a table containing 0 rows. Note that this clause does not affect the errors that occur when evaluating columns, for which the behavior depends on whether the
      <code class=""literal"">
       ON ERROR
      </code>
      clause is specified against a given column.
     </p>
    </dd>
   </dl>
  </div>
  <p>
   Examples
  </p>
  <p>
   In the examples that follow, the following table containing JSON data will be used:
  </p>
  <pre class=""programlisting"">
CREATE TABLE my_films ( js jsonb );

INSERT INTO my_films VALUES (
'{ ""favorites"" : [
   { ""kind"" : ""comedy"", ""films"" : [
     { ""title"" : ""Bananas"",
       ""director"" : ""Woody Allen""},
     { ""title"" : ""The Dinner Game"",
       ""director"" : ""Francis Veber"" } ] },
   { ""kind"" : ""horror"", ""films"" : [
     { ""title"" : ""Psycho"",
       ""director"" : ""Alfred Hitchcock"" } ] },
   { ""kind"" : ""thriller"", ""films"" : [
     { ""title"" : ""Vertigo"",
       ""director"" : ""Alfred Hitchcock"" } ] },
   { ""kind"" : ""drama"", ""films"" : [
     { ""title"" : ""Yojimbo"",
       ""director"" : ""Akira Kurosawa"" } ] }
  ] }');
</pre>
  <p>
   The following query shows how to use
   <code class=""function"">
    JSON_TABLE
   </code>
   to turn the JSON objects in the
   <code class=""structname"">
    my_films
   </code>
   table to a view containing columns for the keys
   <code class=""literal"">
    kind
   </code>
   ,
   <code class=""literal"">
    title
   </code>
   , and
   <code class=""literal"">
    director
   </code>
   contained in the original JSON along with an ordinality column:
  </p>
  <pre class=""programlisting"">
SELECT jt.* FROM
 my_films,
 JSON_TABLE (js, '$.favorites[*]' COLUMNS (
   id FOR ORDINALITY,
   kind text PATH '$.kind',
   title text PATH '$.films[*].title' WITH WRAPPER,
   director text PATH '$.films[*].director' WITH WRAPPER)) AS jt;
</pre>
  <pre class=""screen"">
 id |   kind   |             title              |             director
----+----------+--------------------------------+----------------------------------
  1 | comedy   | [""Bananas"", ""The Dinner Game""] | [""Woody Allen"", ""Francis Veber""]
  2 | horror   | [""Psycho""]                     | [""Alfred Hitchcock""]
  3 | thriller | [""Vertigo""]                    | [""Alfred Hitchcock""]
  4 | drama    | [""Yojimbo""]                    | [""Akira Kurosawa""]
(4 rows)
</pre>
  <p>
   The following is a modified version of the above query to show the usage of
   <code class=""literal"">
    PASSING
   </code>
   arguments in the filter specified in the top-level JSON path expression and the various options for the individual columns:
  </p>
  <pre class=""programlisting"">
SELECT jt.* FROM
 my_films,
 JSON_TABLE (js, '$.favorites[*] ? (@.films[*].director == $filter)'
   PASSING 'Alfred Hitchcock' AS filter, 'Vertigo' AS filter2
     COLUMNS (
     id FOR ORDINALITY,
     kind text PATH '$.kind',
     title text FORMAT JSON PATH '$.films[*].title' OMIT QUOTES,
     director text PATH '$.films[*].director' KEEP QUOTES)) AS jt;
</pre>
  <pre class=""screen"">
 id |   kind   |  title  |      director
----+----------+---------+--------------------
  1 | horror   | Psycho  | ""Alfred Hitchcock""
  2 | thriller | Vertigo | ""Alfred Hitchcock""
(2 rows)
</pre>
  <p>
   The following is a modified version of the above query to show the usage of
   <code class=""literal"">
    NESTED PATH
   </code>
   for populating title and director columns, illustrating how they are joined to the parent columns id and kind:
  </p>
  <pre class=""programlisting"">
SELECT jt.* FROM
 my_films,
 JSON_TABLE ( js, '$.favorites[*] ? (@.films[*].director == $filter)'
   PASSING 'Alfred Hitchcock' AS filter
   COLUMNS (
    id FOR ORDINALITY,
    kind text PATH '$.kind',
    NESTED PATH '$.films[*]' COLUMNS (
      title text FORMAT JSON PATH '$.title' OMIT QUOTES,
      director text PATH '$.director' KEEP QUOTES))) AS jt;
</pre>
  <pre class=""screen"">
 id |   kind   |  title  |      director
----+----------+---------+--------------------
  1 | horror   | Psycho  | ""Alfred Hitchcock""
  2 | thriller | Vertigo | ""Alfred Hitchcock""
(2 rows)
</pre>
  <p>
   The following is the same query but without the filter in the root path:
  </p>
  <pre class=""programlisting"">
SELECT jt.* FROM
 my_films,
 JSON_TABLE ( js, '$.favorites[*]'
   COLUMNS (
    id FOR ORDINALITY,
    kind text PATH '$.kind',
    NESTED PATH '$.films[*]' COLUMNS (
      title text FORMAT JSON PATH '$.title' OMIT QUOTES,
      director text PATH '$.director' KEEP QUOTES))) AS jt;
</pre>
  <pre class=""screen"">
 id |   kind   |      title      |      director
----+----------+-----------------+--------------------
  1 | comedy   | Bananas         | ""Woody Allen""
  1 | comedy   | The Dinner Game | ""Francis Veber""
  2 | horror   | Psycho          | ""Alfred Hitchcock""
  3 | thriller | Vertigo         | ""Alfred Hitchcock""
  4 | drama    | Yojimbo         | ""Akira Kurosawa""
(5 rows)
</pre>
  <p>
   The following shows another query using a different
   <code class=""type"">
    JSON
   </code>
   object as input. It shows the UNION ""sibling join"" between
   <code class=""literal"">
    NESTED
   </code>
   paths
   <code class=""literal"">
    $.movies[*]
   </code>
   and
   <code class=""literal"">
    $.books[*]
   </code>
   and also the usage of
   <code class=""literal"">
    FOR ORDINALITY
   </code>
   column at
   <code class=""literal"">
    NESTED
   </code>
   levels (columns
   <code class=""literal"">
    movie_id
   </code>
   ,
   <code class=""literal"">
    book_id
   </code>
   , and
   <code class=""literal"">
    author_id
   </code>
   ):
  </p>
  <pre class=""programlisting"">
SELECT * FROM JSON_TABLE (
'{""favorites"":
    {""movies"":
      [{""name"": ""One"", ""director"": ""John Doe""},
       {""name"": ""Two"", ""director"": ""Don Joe""}],
     ""books"":
      [{""name"": ""Mystery"", ""authors"": [{""name"": ""Brown Dan""}]},
       {""name"": ""Wonder"", ""authors"": [{""name"": ""Jun Murakami""}, {""name"":""Craig Doe""}]}]
}}'::json, '$.favorites[*]'
COLUMNS (
  user_id FOR ORDINALITY,
  NESTED '$.movies[*]'
    COLUMNS (
    movie_id FOR ORDINALITY,
    mname text PATH '$.name',
    director text),
  NESTED '$.books[*]'
    COLUMNS (
      book_id FOR ORDINALITY,
      bname text PATH '$.name',
      NESTED '$.authors[*]'
        COLUMNS (
          author_id FOR ORDINALITY,
          author_name text PATH '$.name'))));
</pre>
  <pre class=""screen"">
 user_id | movie_id | mname | director | book_id |  bname  | author_id | author_name
---------+----------+-------+----------+---------+---------+-----------+--------------
       1 |        1 | One   | John Doe |         |         |           |
       1 |        2 | Two   | Don Joe  |         |         |           |
       1 |          |       |          |       1 | Mystery |         1 | Brown Dan
       1 |          |       |          |       2 | Wonder  |         1 | Jun Murakami
       1 |          |       |          |       2 | Wonder  |         2 | Craig Doe
(5 rows)
</pre>
 </div>
</div>
"
9. Functions and Operators,9.17. Sequence Manipulation Functions,https://www.postgresql.org/docs/17/functions-sequence.html,"<div class=""sect1"" id=""FUNCTIONS-SEQUENCE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.17. Sequence Manipulation Functions
     <a class=""id_link"" href=""#FUNCTIONS-SEQUENCE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.23.2"" name=""id-1.5.8.23.2"">
 </a>
 <p>
  This section describes functions for operating on
  <em class=""firstterm"">
   sequence objects
  </em>
  , also called sequence generators or just sequences. Sequence objects are special single-row tables created with
  <a class=""xref"" href=""sql-createsequence.html"" title=""CREATE SEQUENCE"">
   <span class=""refentrytitle"">
    CREATE SEQUENCE
   </span>
  </a>
  . Sequence objects are commonly used to generate unique identifiers for rows of a table. The sequence functions, listed in
  <a class=""xref"" href=""functions-sequence.html#FUNCTIONS-SEQUENCE-TABLE"" title=""Table 9.53. Sequence Functions"">
   Table 9.53
  </a>
  , provide simple, multiuser-safe methods for obtaining successive sequence values from sequence objects.
 </p>
 <div class=""table"" id=""FUNCTIONS-SEQUENCE-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.53. Sequence Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Sequence Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.23.4.2.2.1.1.1.1"" name=""id-1.5.8.23.4.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         nextval
        </code>
        (
        <code class=""type"">
         regclass
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Advances the sequence object to its next value and returns that value. This is done atomically: even if multiple sessions execute
        <code class=""function"">
         nextval
        </code>
        concurrently, each will safely receive a distinct sequence value. If the sequence object has been created with default parameters, successive
        <code class=""function"">
         nextval
        </code>
        calls will return successive values beginning with 1. Other behaviors can be obtained by using appropriate parameters in the
        <a class=""xref"" href=""sql-createsequence.html"" title=""CREATE SEQUENCE"">
         <span class=""refentrytitle"">
          CREATE SEQUENCE
         </span>
        </a>
        command.
       </p>
       <p>
        This function requires
        <code class=""literal"">
         USAGE
        </code>
        or
        <code class=""literal"">
         UPDATE
        </code>
        privilege on the sequence.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.23.4.2.2.2.1.1.1"" name=""id-1.5.8.23.4.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         setval
        </code>
        (
        <code class=""type"">
         regclass
        </code>
        ,
        <code class=""type"">
         bigint
        </code>
        [
        <span class=""optional"">
         ,
         <code class=""type"">
          boolean
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Sets the sequence object's current value, and optionally its
        <code class=""literal"">
         is_called
        </code>
        flag. The two-parameter form sets the sequence's
        <code class=""literal"">
         last_value
        </code>
        field to the specified value and sets its
        <code class=""literal"">
         is_called
        </code>
        field to
        <code class=""literal"">
         true
        </code>
        , meaning that the next
        <code class=""function"">
         nextval
        </code>
        will advance the sequence before returning a value. The value that will be reported by
        <code class=""function"">
         currval
        </code>
        is also set to the specified value. In the three-parameter form,
        <code class=""literal"">
         is_called
        </code>
        can be set to either
        <code class=""literal"">
         true
        </code>
        or
        <code class=""literal"">
         false
        </code>
        .
        <code class=""literal"">
         true
        </code>
        has the same effect as the two-parameter form. If it is set to
        <code class=""literal"">
         false
        </code>
        , the next
        <code class=""function"">
         nextval
        </code>
        will return exactly the specified value, and sequence advancement commences with the following
        <code class=""function"">
         nextval
        </code>
        . Furthermore, the value reported by
        <code class=""function"">
         currval
        </code>
        is not changed in this case. For example,
       </p>
       <pre class=""programlisting"">
SELECT setval('myseq', 42);           <em class=""lineannotation""><span class=""lineannotation"">Next <code class=""function"">nextval</code> will return 43</span></em>
SELECT setval('myseq', 42, true);     <em class=""lineannotation""><span class=""lineannotation"">Same as above</span></em>
SELECT setval('myseq', 42, false);    <em class=""lineannotation""><span class=""lineannotation"">Next <code class=""function"">nextval</code> will return 42</span></em>
</pre>
       <p>
        The result returned by
        <code class=""function"">
         setval
        </code>
        is just the value of its second argument.
       </p>
       <p>
        This function requires
        <code class=""literal"">
         UPDATE
        </code>
        privilege on the sequence.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.23.4.2.2.3.1.1.1"" name=""id-1.5.8.23.4.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         currval
        </code>
        (
        <code class=""type"">
         regclass
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the value most recently obtained by
        <code class=""function"">
         nextval
        </code>
        for this sequence in the current session. (An error is reported if
        <code class=""function"">
         nextval
        </code>
        has never been called for this sequence in this session.) Because this is returning a session-local value, it gives a predictable answer whether or not other sessions have executed
        <code class=""function"">
         nextval
        </code>
        since the current session did.
       </p>
       <p>
        This function requires
        <code class=""literal"">
         USAGE
        </code>
        or
        <code class=""literal"">
         SELECT
        </code>
        privilege on the sequence.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.23.4.2.2.4.1.1.1"" name=""id-1.5.8.23.4.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         lastval
        </code>
        () →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the value most recently returned by
        <code class=""function"">
         nextval
        </code>
        in the current session. This function is identical to
        <code class=""function"">
         currval
        </code>
        , except that instead of taking the sequence name as an argument it refers to whichever sequence
        <code class=""function"">
         nextval
        </code>
        was most recently applied to in the current session. It is an error to call
        <code class=""function"">
         lastval
        </code>
        if
        <code class=""function"">
         nextval
        </code>
        has not yet been called in the current session.
       </p>
       <p>
        This function requires
        <code class=""literal"">
         USAGE
        </code>
        or
        <code class=""literal"">
         SELECT
        </code>
        privilege on the last used sequence.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""caution"">
  <h3 class=""title"">
   Caution
  </h3>
  <p>
   To avoid blocking concurrent transactions that obtain numbers from the same sequence, the value obtained by
   <code class=""function"">
    nextval
   </code>
   is not reclaimed for re-use if the calling transaction later aborts. This means that transaction aborts or database crashes can result in gaps in the sequence of assigned values. That can happen without a transaction abort, too. For example an
   <code class=""command"">
    INSERT
   </code>
   with an
   <code class=""literal"">
    ON CONFLICT
   </code>
   clause will compute the to-be-inserted tuple, including doing any required
   <code class=""function"">
    nextval
   </code>
   calls, before detecting any conflict that would cause it to follow the
   <code class=""literal"">
    ON CONFLICT
   </code>
   rule instead. Thus,
   <span class=""productname"">
    PostgreSQL
   </span>
   sequence objects
   <span class=""emphasis"">
    <em>
     cannot be used to obtain
     <span class=""quote"">
      “
      <span class=""quote"">
       gapless
      </span>
      ”
     </span>
     sequences
    </em>
   </span>
   .
  </p>
  <p>
   Likewise, sequence state changes made by
   <code class=""function"">
    setval
   </code>
   are immediately visible to other transactions, and are not undone if the calling transaction rolls back.
  </p>
  <p>
   If the database cluster crashes before committing a transaction containing a
   <code class=""function"">
    nextval
   </code>
   or
   <code class=""function"">
    setval
   </code>
   call, the sequence state change might not have made its way to persistent storage, so that it is uncertain whether the sequence will have its original or updated state after the cluster restarts. This is harmless for usage of the sequence within the database, since other effects of uncommitted transactions will not be visible either. However, if you wish to use a sequence value for persistent outside-the-database purposes, make sure that the
   <code class=""function"">
    nextval
   </code>
   call has been committed before doing so.
  </p>
 </div>
 <p>
  The sequence to be operated on by a sequence function is specified by a
  <code class=""type"">
   regclass
  </code>
  argument, which is simply the OID of the sequence in the
  <code class=""structname"">
   pg_class
  </code>
  system catalog. You do not have to look up the OID by hand, however, since the
  <code class=""type"">
   regclass
  </code>
  data type's input converter will do the work for you. See
  <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
   Section 8.19
  </a>
  for details.
 </p>
</div>
"
9. Functions and Operators,9.18. Conditional Expressions,https://www.postgresql.org/docs/17/functions-conditional.html,"<div class=""sect1"" id=""FUNCTIONS-CONDITIONAL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.18. Conditional Expressions
     <a class=""id_link"" href=""#FUNCTIONS-CONDITIONAL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-conditional.html#FUNCTIONS-CASE"">
      9.18.1.
      <code class=""literal"">
       CASE
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-conditional.html#FUNCTIONS-COALESCE-NVL-IFNULL"">
      9.18.2.
      <code class=""literal"">
       COALESCE
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-conditional.html#FUNCTIONS-NULLIF"">
      9.18.3.
      <code class=""literal"">
       NULLIF
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-conditional.html#FUNCTIONS-GREATEST-LEAST"">
      9.18.4.
      <code class=""literal"">
       GREATEST
      </code>
      and
      <code class=""literal"">
       LEAST
      </code>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.24.2"" name=""id-1.5.8.24.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.24.3"" name=""id-1.5.8.24.3"">
 </a>
 <p>
  This section describes the
  <acronym class=""acronym"">
   SQL
  </acronym>
  -compliant conditional expressions available in
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   If your needs go beyond the capabilities of these conditional expressions, you might want to consider writing a server-side function in a more expressive programming language.
  </p>
 </div>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Although
   <code class=""token"">
    COALESCE
   </code>
   ,
   <code class=""token"">
    GREATEST
   </code>
   , and
   <code class=""token"">
    LEAST
   </code>
   are syntactically similar to functions, they are not ordinary functions, and thus cannot be used with explicit
   <code class=""token"">
    VARIADIC
   </code>
   array arguments.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-CASE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.18.1.
      <code class=""literal"">
       CASE
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-CASE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <acronym class=""acronym"">
    SQL
   </acronym>
   <code class=""token"">
    CASE
   </code>
   expression is a generic conditional expression, similar to if/else statements in other programming languages:
  </p>
  <pre class=""synopsis"">
CASE WHEN <em class=""replaceable""><code>condition</code></em> THEN <em class=""replaceable""><code>result</code></em>
     [<span class=""optional"">WHEN ...</span>]
     [<span class=""optional"">ELSE <em class=""replaceable""><code>result</code></em></span>]
END
</pre>
  <p>
   <code class=""token"">
    CASE
   </code>
   clauses can be used wherever an expression is valid. Each
   <em class=""replaceable"">
    <code>
     condition
    </code>
   </em>
   is an expression that returns a
   <code class=""type"">
    boolean
   </code>
   result. If the condition's result is true, the value of the
   <code class=""token"">
    CASE
   </code>
   expression is the
   <em class=""replaceable"">
    <code>
     result
    </code>
   </em>
   that follows the condition, and the remainder of the
   <code class=""token"">
    CASE
   </code>
   expression is not processed. If the condition's result is not true, any subsequent
   <code class=""token"">
    WHEN
   </code>
   clauses are examined in the same manner. If no
   <code class=""token"">
    WHEN
   </code>
   <em class=""replaceable"">
    <code>
     condition
    </code>
   </em>
   yields true, the value of the
   <code class=""token"">
    CASE
   </code>
   expression is the
   <em class=""replaceable"">
    <code>
     result
    </code>
   </em>
   of the
   <code class=""token"">
    ELSE
   </code>
   clause. If the
   <code class=""token"">
    ELSE
   </code>
   clause is omitted and no condition is true, the result is null.
  </p>
  <p>
   An example:
  </p>
  <pre class=""screen"">
SELECT * FROM test;

 a
---
 1
 2
 3


SELECT a,
       CASE WHEN a=1 THEN 'one'
            WHEN a=2 THEN 'two'
            ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</pre>
  <p>
   The data types of all the
   <em class=""replaceable"">
    <code>
     result
    </code>
   </em>
   expressions must be convertible to a single output type. See
   <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
    Section 10.5
   </a>
   for more details.
  </p>
  <p>
   There is a
   <span class=""quote"">
    “
    <span class=""quote"">
     simple
    </span>
    ”
   </span>
   form of
   <code class=""token"">
    CASE
   </code>
   expression that is a variant of the general form above:
  </p>
  <pre class=""synopsis"">
CASE <em class=""replaceable""><code>expression</code></em>
    WHEN <em class=""replaceable""><code>value</code></em> THEN <em class=""replaceable""><code>result</code></em>
    [<span class=""optional"">WHEN ...</span>]
    [<span class=""optional"">ELSE <em class=""replaceable""><code>result</code></em></span>]
END
</pre>
  <p>
   The first
   <em class=""replaceable"">
    <code>
     expression
    </code>
   </em>
   is computed, then compared to each of the
   <em class=""replaceable"">
    <code>
     value
    </code>
   </em>
   expressions in the
   <code class=""token"">
    WHEN
   </code>
   clauses until one is found that is equal to it. If no match is found, the
   <em class=""replaceable"">
    <code>
     result
    </code>
   </em>
   of the
   <code class=""token"">
    ELSE
   </code>
   clause (or a null value) is returned. This is similar to the
   <code class=""function"">
    switch
   </code>
   statement in C.
  </p>
  <p>
   The example above can be written using the simple
   <code class=""token"">
    CASE
   </code>
   syntax:
  </p>
  <pre class=""screen"">
SELECT a,
       CASE a WHEN 1 THEN 'one'
              WHEN 2 THEN 'two'
              ELSE 'other'
       END
    FROM test;

 a | case
---+-------
 1 | one
 2 | two
 3 | other
</pre>
  <p>
   A
   <code class=""token"">
    CASE
   </code>
   expression does not evaluate any subexpressions that are not needed to determine the result. For example, this is a possible way of avoiding a division-by-zero failure:
  </p>
  <pre class=""programlisting"">
SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    As described in
    <a class=""xref"" href=""sql-expressions.html#SYNTAX-EXPRESS-EVAL"" title=""4.2.14. Expression Evaluation Rules"">
     Section 4.2.14
    </a>
    , there are various situations in which subexpressions of an expression are evaluated at different times, so that the principle that
    <span class=""quote"">
     “
     <span class=""quote"">
      <code class=""token"">
       CASE
      </code>
      evaluates only necessary subexpressions
     </span>
     ”
    </span>
    is not ironclad. For example a constant
    <code class=""literal"">
     1/0
    </code>
    subexpression will usually result in a division-by-zero failure at planning time, even if it's within a
    <code class=""token"">
     CASE
    </code>
    arm that would never be entered at run time.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-COALESCE-NVL-IFNULL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.18.2.
      <code class=""literal"">
       COALESCE
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-COALESCE-NVL-IFNULL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.24.8.2"" name=""id-1.5.8.24.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.24.8.3"" name=""id-1.5.8.24.8.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.24.8.4"" name=""id-1.5.8.24.8.4"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">COALESCE</code>(<em class=""replaceable""><code>value</code></em> [<span class=""optional"">, ...</span>])
</pre>
  <p>
   The
   <code class=""function"">
    COALESCE
   </code>
   function returns the first of its arguments that is not null. Null is returned only if all arguments are null. It is often used to substitute a default value for null values when data is retrieved for display, for example:
  </p>
  <pre class=""programlisting"">
SELECT COALESCE(description, short_description, '(none)') ...
</pre>
  <p>
   This returns
   <code class=""varname"">
    description
   </code>
   if it is not null, otherwise
   <code class=""varname"">
    short_description
   </code>
   if it is not null, otherwise
   <code class=""literal"">
    (none)
   </code>
   .
  </p>
  <p>
   The arguments must all be convertible to a common data type, which will be the type of the result (see
   <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
    Section 10.5
   </a>
   for details).
  </p>
  <p>
   Like a
   <code class=""token"">
    CASE
   </code>
   expression,
   <code class=""function"">
    COALESCE
   </code>
   only evaluates the arguments that are needed to determine the result; that is, arguments to the right of the first non-null argument are not evaluated. This SQL-standard function provides capabilities similar to
   <code class=""function"">
    NVL
   </code>
   and
   <code class=""function"">
    IFNULL
   </code>
   , which are used in some other database systems.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-NULLIF"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.18.3.
      <code class=""literal"">
       NULLIF
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-NULLIF"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.24.9.2"" name=""id-1.5.8.24.9.2"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">NULLIF</code>(<em class=""replaceable""><code>value1</code></em>, <em class=""replaceable""><code>value2</code></em>)
</pre>
  <p>
   The
   <code class=""function"">
    NULLIF
   </code>
   function returns a null value if
   <em class=""replaceable"">
    <code>
     value1
    </code>
   </em>
   equals
   <em class=""replaceable"">
    <code>
     value2
    </code>
   </em>
   ; otherwise it returns
   <em class=""replaceable"">
    <code>
     value1
    </code>
   </em>
   . This can be used to perform the inverse operation of the
   <code class=""function"">
    COALESCE
   </code>
   example given above:
  </p>
  <pre class=""programlisting"">
SELECT NULLIF(value, '(none)') ...
</pre>
  <p>
   In this example, if
   <code class=""literal"">
    value
   </code>
   is
   <code class=""literal"">
    (none)
   </code>
   , null is returned, otherwise the value of
   <code class=""literal"">
    value
   </code>
   is returned.
  </p>
  <p>
   The two arguments must be of comparable types. To be specific, they are compared exactly as if you had written
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      value1
     </code>
    </em>
    =
    <em class=""replaceable"">
     <code>
      value2
     </code>
    </em>
   </code>
   , so there must be a suitable
   <code class=""literal"">
    =
   </code>
   operator available.
  </p>
  <p>
   The result has the same type as the first argument — but there is a subtlety. What is actually returned is the first argument of the implied
   <code class=""literal"">
    =
   </code>
   operator, and in some cases that will have been promoted to match the second argument's type. For example,
   <code class=""literal"">
    NULLIF(1, 2.2)
   </code>
   yields
   <code class=""type"">
    numeric
   </code>
   , because there is no
   <code class=""type"">
    integer
   </code>
   <code class=""literal"">
    =
   </code>
   <code class=""type"">
    numeric
   </code>
   operator, only
   <code class=""type"">
    numeric
   </code>
   <code class=""literal"">
    =
   </code>
   <code class=""type"">
    numeric
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-GREATEST-LEAST"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.18.4.
      <code class=""literal"">
       GREATEST
      </code>
      and
      <code class=""literal"">
       LEAST
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-GREATEST-LEAST"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.24.10.2"" name=""id-1.5.8.24.10.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.24.10.3"" name=""id-1.5.8.24.10.3"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">GREATEST</code>(<em class=""replaceable""><code>value</code></em> [<span class=""optional"">, ...</span>])
</pre>
  <pre class=""synopsis"">
<code class=""function"">LEAST</code>(<em class=""replaceable""><code>value</code></em> [<span class=""optional"">, ...</span>])
</pre>
  <p>
   The
   <code class=""function"">
    GREATEST
   </code>
   and
   <code class=""function"">
    LEAST
   </code>
   functions select the largest or smallest value from a list of any number of expressions. The expressions must all be convertible to a common data type, which will be the type of the result (see
   <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
    Section 10.5
   </a>
   for details).
  </p>
  <p>
   NULL values in the argument list are ignored. The result will be NULL only if all the expressions evaluate to NULL. (This is a deviation from the SQL standard. According to the standard, the return value is NULL if any argument is NULL. Some other databases behave this way.)
  </p>
 </div>
</div>
"
9. Functions and Operators,9.19. Array Functions and Operators,https://www.postgresql.org/docs/17/functions-array.html,"<div class=""sect1"" id=""FUNCTIONS-ARRAY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.19. Array Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-ARRAY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  <a class=""xref"" href=""functions-array.html#ARRAY-OPERATORS-TABLE"" title=""Table 9.54. Array Operators"">
   Table 9.54
  </a>
  shows the specialized operators available for array types. In addition to those, the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  are available for arrays. The comparison operators compare the array contents element-by-element, using the default B-tree comparison function for the element data type, and sort based on the first difference. In multidimensional arrays the elements are visited in row-major order (last subscript varies most rapidly). If the contents of two arrays are equal but the dimensionality is different, the first difference in the dimensionality information determines the sort order.
 </p>
 <div class=""table"" id=""ARRAY-OPERATORS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.54. Array Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Array Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyarray
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anyarray
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first array contain the second, that is, does each element appearing in the second array equal some element of the first array? (Duplicates are not treated specially, thus
        <code class=""literal"">
         ARRAY[1]
        </code>
        and
        <code class=""literal"">
         ARRAY[1,1]
        </code>
        are each considered to contain the other.)
       </p>
       <p>
        <code class=""literal"">
         ARRAY[1,4,3] @&gt; ARRAY[3,1,3]
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyarray
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anyarray
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first array contained by the second?
       </p>
       <p>
        <code class=""literal"">
         ARRAY[2,2,7] &lt;@ ARRAY[1,7,4,2,6]
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyarray
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         anyarray
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Do the arrays overlap, that is, have any elements in common?
       </p>
       <p>
        <code class=""literal"">
         ARRAY[1,4,3] &amp;&amp; ARRAY[2,1]
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anycompatiblearray
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatiblearray
        </code>
        →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Concatenates the two arrays. Concatenating a null or empty array is a no-op; otherwise the arrays must have the same number of dimensions (as illustrated by the first example) or differ in number of dimensions by one (as illustrated by the second). If the arrays are not of identical element types, they will be coerced to a common type (see
        <a class=""xref"" href=""typeconv-union-case.html"" title=""10.5. UNION, CASE, and Related Constructs"">
         Section 10.5
        </a>
        ).
       </p>
       <p>
        <code class=""literal"">
         ARRAY[1,2,3] || ARRAY[4,5,6,7]
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3,4,5,6,7}
        </code>
       </p>
       <p>
        <code class=""literal"">
         ARRAY[1,2,3] || ARRAY[[4,5,6],[7,8,9.9]]
        </code>
        →
        <code class=""returnvalue"">
         {{1,2,3},{4,5,6},{7,8,9.9}}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anycompatible
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatiblearray
        </code>
        →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Concatenates an element onto the front of an array (which must be empty or one-dimensional).
       </p>
       <p>
        <code class=""literal"">
         3 || ARRAY[4,5,6]
        </code>
        →
        <code class=""returnvalue"">
         {3,4,5,6}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anycompatiblearray
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatible
        </code>
        →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Concatenates an element onto the end of an array (which must be empty or one-dimensional).
       </p>
       <p>
        <code class=""literal"">
         ARRAY[4,5,6] || 7
        </code>
        →
        <code class=""returnvalue"">
         {4,5,6,7}
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  See
  <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
   Section 8.15
  </a>
  for more details about array operator behavior. See
  <a class=""xref"" href=""indexes-types.html"" title=""11.2. Index Types"">
   Section 11.2
  </a>
  for more details about which operators support indexed operations.
 </p>
 <p>
  <a class=""xref"" href=""functions-array.html#ARRAY-FUNCTIONS-TABLE"" title=""Table 9.55. Array Functions"">
   Table 9.55
  </a>
  shows the functions available for use with array types. See
  <a class=""xref"" href=""arrays.html"" title=""8.15. Arrays"">
   Section 8.15
  </a>
  for more information and examples of the use of these functions.
 </p>
 <div class=""table"" id=""ARRAY-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.55. Array Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Array Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.1.1.1.1"" name=""id-1.5.8.25.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         array_append
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        ) →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Appends an element to the end of an array (same as the
        <code class=""type"">
         anycompatiblearray
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatible
        </code>
        operator).
       </p>
       <p>
        <code class=""literal"">
         array_append(ARRAY[1,2], 3)
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.2.1.1.1"" name=""id-1.5.8.25.6.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         array_cat
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatiblearray
        </code>
        ) →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Concatenates two arrays (same as the
        <code class=""type"">
         anycompatiblearray
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatiblearray
        </code>
        operator).
       </p>
       <p>
        <code class=""literal"">
         array_cat(ARRAY[1,2,3], ARRAY[4,5])
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3,4,5}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.3.1.1.1"" name=""id-1.5.8.25.6.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         array_dims
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns a text representation of the array's dimensions.
       </p>
       <p>
        <code class=""literal"">
         array_dims(ARRAY[[1,2,3], [4,5,6]])
        </code>
        →
        <code class=""returnvalue"">
         [1:2][1:3]
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.4.1.1.1"" name=""id-1.5.8.25.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         array_fill
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ,
        <code class=""type"">
         integer[]
        </code>
        [
        <span class=""optional"">
         ,
         <code class=""type"">
          integer[]
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Returns an array filled with copies of the given value, having dimensions of the lengths specified by the second argument. The optional third argument supplies lower-bound values for each dimension (which default to all
        <code class=""literal"">
         1
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         array_fill(11, ARRAY[2,3])
        </code>
        →
        <code class=""returnvalue"">
         {{11,11,11},{11,11,11}}
        </code>
       </p>
       <p>
        <code class=""literal"">
         array_fill(7, ARRAY[3], ARRAY[2])
        </code>
        →
        <code class=""returnvalue"">
         [2:4]={7,7,7}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.5.1.1.1"" name=""id-1.5.8.25.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         array_length
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the length of the requested array dimension. (Produces NULL instead of 0 for empty or missing array dimensions.)
       </p>
       <p>
        <code class=""literal"">
         array_length(array[1,2,3], 1)
        </code>
        →
        <code class=""returnvalue"">
         3
        </code>
       </p>
       <p>
        <code class=""literal"">
         array_length(array[]::int[], 1)
        </code>
        →
        <code class=""returnvalue"">
         NULL
        </code>
       </p>
       <p>
        <code class=""literal"">
         array_length(array['text'], 2)
        </code>
        →
        <code class=""returnvalue"">
         NULL
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.6.1.1.1"" name=""id-1.5.8.25.6.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         array_lower
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the lower bound of the requested array dimension.
       </p>
       <p>
        <code class=""literal"">
         array_lower('[0:2]={1,2,3}'::integer[], 1)
        </code>
        →
        <code class=""returnvalue"">
         0
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.7.1.1.1"" name=""id-1.5.8.25.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         array_ndims
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the number of dimensions of the array.
       </p>
       <p>
        <code class=""literal"">
         array_ndims(ARRAY[[1,2,3], [4,5,6]])
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.8.1.1.1"" name=""id-1.5.8.25.6.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         array_position
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        [
        <span class=""optional"">
         ,
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the subscript of the first occurrence of the second argument in the array, or
        <code class=""literal"">
         NULL
        </code>
        if it's not present. If the third argument is given, the search begins at that subscript. The array must be one-dimensional. Comparisons are done using
        <code class=""literal"">
         IS NOT DISTINCT FROM
        </code>
        semantics, so it is possible to search for
        <code class=""literal"">
         NULL
        </code>
        .
       </p>
       <p>
        <code class=""literal"">
         array_position(ARRAY['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'], 'mon')
        </code>
        →
        <code class=""returnvalue"">
         2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.9.1.1.1"" name=""id-1.5.8.25.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         array_positions
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        ) →
        <code class=""returnvalue"">
         integer[]
        </code>
       </p>
       <p>
        Returns an array of the subscripts of all occurrences of the second argument in the array given as first argument. The array must be one-dimensional. Comparisons are done using
        <code class=""literal"">
         IS NOT DISTINCT FROM
        </code>
        semantics, so it is possible to search for
        <code class=""literal"">
         NULL
        </code>
        .
        <code class=""literal"">
         NULL
        </code>
        is returned only if the array is
        <code class=""literal"">
         NULL
        </code>
        ; if the value is not found in the array, an empty array is returned.
       </p>
       <p>
        <code class=""literal"">
         array_positions(ARRAY['A','A','B','A'], 'A')
        </code>
        →
        <code class=""returnvalue"">
         {1,2,4}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.10.1.1.1"" name=""id-1.5.8.25.6.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         array_prepend
        </code>
        (
        <code class=""type"">
         anycompatible
        </code>
        ,
        <code class=""type"">
         anycompatiblearray
        </code>
        ) →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Prepends an element to the beginning of an array (same as the
        <code class=""type"">
         anycompatible
        </code>
        <code class=""literal"">
         ||
        </code>
        <code class=""type"">
         anycompatiblearray
        </code>
        operator).
       </p>
       <p>
        <code class=""literal"">
         array_prepend(1, ARRAY[2,3])
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.11.1.1.1"" name=""id-1.5.8.25.6.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         array_remove
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        ) →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Removes all elements equal to the given value from the array. The array must be one-dimensional. Comparisons are done using
        <code class=""literal"">
         IS NOT DISTINCT FROM
        </code>
        semantics, so it is possible to remove
        <code class=""literal"">
         NULL
        </code>
        s.
       </p>
       <p>
        <code class=""literal"">
         array_remove(ARRAY[1,2,3,2], 2)
        </code>
        →
        <code class=""returnvalue"">
         {1,3}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.12.1.1.1"" name=""id-1.5.8.25.6.2.2.12.1.1.1"">
        </a>
        <code class=""function"">
         array_replace
        </code>
        (
        <code class=""type"">
         anycompatiblearray
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        ,
        <code class=""type"">
         anycompatible
        </code>
        ) →
        <code class=""returnvalue"">
         anycompatiblearray
        </code>
       </p>
       <p>
        Replaces each array element equal to the second argument with the third argument.
       </p>
       <p>
        <code class=""literal"">
         array_replace(ARRAY[1,2,5,4], 5, 3)
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3,4}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.13.1.1.1"" name=""id-1.5.8.25.6.2.2.13.1.1.1"">
        </a>
        <code class=""function"">
         array_sample
        </code>
        (
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        <code class=""type"">
         anyarray
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Returns an array of
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        items randomly selected from
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        .
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        may not exceed the length of
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        's first dimension. If
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        is multi-dimensional, an
        <span class=""quote"">
         “
         <span class=""quote"">
          item
         </span>
         ”
        </span>
        is a slice having a given first subscript.
       </p>
       <p>
        <code class=""literal"">
         array_sample(ARRAY[1,2,3,4,5,6], 3)
        </code>
        →
        <code class=""returnvalue"">
         {2,6,1}
        </code>
       </p>
       <p>
        <code class=""literal"">
         array_sample(ARRAY[[1,2],[3,4],[5,6]], 2)
        </code>
        →
        <code class=""returnvalue"">
         {{5,6},{1,2}}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.14.1.1.1"" name=""id-1.5.8.25.6.2.2.14.1.1.1"">
        </a>
        <code class=""function"">
         array_shuffle
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Randomly shuffles the first dimension of the array.
       </p>
       <p>
        <code class=""literal"">
         array_shuffle(ARRAY[[1,2],[3,4],[5,6]])
        </code>
        →
        <code class=""returnvalue"">
         {{5,6},{1,2},{3,4}}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""FUNCTION-ARRAY-TO-STRING"" name=""FUNCTION-ARRAY-TO-STRING"">
        </a>
        <code class=""function"">
         array_to_string
        </code>
        (
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        <code class=""type"">
         anyarray
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           null_string
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Converts each array element to its text representation, and concatenates those separated by the
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        string. If
        <em class=""parameter"">
         <code>
          null_string
         </code>
        </em>
        is given and is not
        <code class=""literal"">
         NULL
        </code>
        , then
        <code class=""literal"">
         NULL
        </code>
        array entries are represented by that string; otherwise, they are omitted. See also
        <a class=""link"" href=""functions-string.html#FUNCTION-STRING-TO-ARRAY"">
         <code class=""function"">
          string_to_array
         </code>
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')
        </code>
        →
        <code class=""returnvalue"">
         1,2,3,*,5
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.16.1.1.1"" name=""id-1.5.8.25.6.2.2.16.1.1.1"">
        </a>
        <code class=""function"">
         array_upper
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ,
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the upper bound of the requested array dimension.
       </p>
       <p>
        <code class=""literal"">
         array_upper(ARRAY[1,8,3,7], 1)
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.17.1.1.1"" name=""id-1.5.8.25.6.2.2.17.1.1.1"">
        </a>
        <code class=""function"">
         cardinality
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns the total number of elements in the array, or 0 if the array is empty.
       </p>
       <p>
        <code class=""literal"">
         cardinality(ARRAY[[1,2],[3,4]])
        </code>
        →
        <code class=""returnvalue"">
         4
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.18.1.1.1"" name=""id-1.5.8.25.6.2.2.18.1.1.1"">
        </a>
        <code class=""function"">
         trim_array
        </code>
        (
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        <code class=""type"">
         anyarray
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Trims an array by removing the last
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        elements. If the array is multidimensional, only the first dimension is trimmed.
       </p>
       <p>
        <code class=""literal"">
         trim_array(ARRAY[1,2,3,4,5,6], 2)
        </code>
        →
        <code class=""returnvalue"">
         {1,2,3,4}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.25.6.2.2.19.1.1.1"" name=""id-1.5.8.25.6.2.2.19.1.1.1"">
        </a>
        <code class=""function"">
         unnest
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ) →
        <code class=""returnvalue"">
         setof anyelement
        </code>
       </p>
       <p>
        Expands an array into a set of rows. The array's elements are read out in storage order.
       </p>
       <p>
        <code class=""literal"">
         unnest(ARRAY[1,2])
        </code>
        →
       </p>
       <pre class=""programlisting"">
 1
 2
</pre>
       <p>
        <code class=""literal"">
         unnest(ARRAY[['foo','bar'],['baz','quux']])
        </code>
        →
       </p>
       <pre class=""programlisting"">
 foo
 bar
 baz
 quux
</pre>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         unnest
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        ,
        <code class=""type"">
         anyarray
        </code>
        [
        <span class=""optional"">
         , ...
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof anyelement, anyelement [, ... ]
        </code>
       </p>
       <p>
        Expands multiple arrays (possibly of different data types) into a set of rows. If the arrays are not all the same length then the shorter ones are padded with
        <code class=""literal"">
         NULL
        </code>
        s. This form is only allowed in a query's FROM clause; see
        <a class=""xref"" href=""queries-table-expressions.html#QUERIES-TABLEFUNCTIONS"" title=""7.2.1.4. Table Functions"">
         Section 7.2.1.4
        </a>
        .
       </p>
       <p>
        <code class=""literal"">
         select * from unnest(ARRAY[1,2], ARRAY['foo','bar','baz']) as x(a,b)
        </code>
        →
       </p>
       <pre class=""programlisting"">
 a |  b
---+-----
 1 | foo
 2 | bar
   | baz
</pre>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  See also
  <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
   Section 9.21
  </a>
  about the aggregate function
  <code class=""function"">
   array_agg
  </code>
  for use with arrays.
 </p>
</div>
"
9. Functions and Operators,9.20. Range/Multirange Functions and Operators,https://www.postgresql.org/docs/17/functions-range.html,"<div class=""sect1"" id=""FUNCTIONS-RANGE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.20. Range/Multirange Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-RANGE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  See
  <a class=""xref"" href=""rangetypes.html"" title=""8.17. Range Types"">
   Section 8.17
  </a>
  for an overview of range types.
 </p>
 <p>
  <a class=""xref"" href=""functions-range.html#RANGE-OPERATORS-TABLE"" title=""Table 9.56. Range Operators"">
   Table 9.56
  </a>
  shows the specialized operators available for range types.
  <a class=""xref"" href=""functions-range.html#MULTIRANGE-OPERATORS-TABLE"" title=""Table 9.57. Multirange Operators"">
   Table 9.57
  </a>
  shows the specialized operators available for multirange types. In addition to those, the usual comparison operators shown in
  <a class=""xref"" href=""functions-comparison.html#FUNCTIONS-COMPARISON-OP-TABLE"" title=""Table 9.1. Comparison Operators"">
   Table 9.1
  </a>
  are available for range and multirange types. The comparison operators order first by the range lower bounds, and only if those are equal do they compare the upper bounds. The multirange operators compare each range until one is unequal. This does not usually result in a useful overall ordering, but the operators are provided to allow unique indexes to be constructed on ranges.
 </p>
 <div class=""table"" id=""RANGE-OPERATORS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.56. Range Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Range Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first range contain the second?
       </p>
       <p>
        <code class=""literal"">
         int4range(2,4) @&gt; int4range(2,3)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anyelement
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range contain the element?
       </p>
       <p>
        <code class=""literal"">
         '[2011-01-01,2011-03-01)'::tsrange @&gt; '2011-01-10'::timestamp
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first range contained by the second?
       </p>
       <p>
        <code class=""literal"">
         int4range(2,4) &lt;@ int4range(1,7)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyelement
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the element contained in the range?
       </p>
       <p>
        <code class=""literal"">
         42 &lt;@ int4range(1,7)
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Do the ranges overlap, that is, have any elements in common?
       </p>
       <p>
        <code class=""literal"">
         int8range(3,7) &amp;&amp; int8range(4,12)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first range strictly left of the second?
       </p>
       <p>
        <code class=""literal"">
         int8range(1,10) &lt;&lt; int8range(100,110)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first range strictly right of the second?
       </p>
       <p>
        <code class=""literal"">
         int8range(50,60) &gt;&gt; int8range(20,30)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&lt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first range not extend to the right of the second?
       </p>
       <p>
        <code class=""literal"">
         int8range(1,20) &amp;&lt; int8range(18,20)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first range not extend to the left of the second?
       </p>
       <p>
        <code class=""literal"">
         int8range(7,20) &amp;&gt; int8range(5,10)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         -|-
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are the ranges adjacent?
       </p>
       <p>
        <code class=""literal"">
         numrange(1.1,2.2) -|- numrange(2.2,3.3)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p>
        Computes the union of the ranges. The ranges must overlap or be adjacent, so that the union is a single range (but see
        <code class=""function"">
         range_merge()
        </code>
        ).
       </p>
       <p>
        <code class=""literal"">
         numrange(5,15) + numrange(10,20)
        </code>
        →
        <code class=""returnvalue"">
         [5,20)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         *
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p>
        Computes the intersection of the ranges.
       </p>
       <p>
        <code class=""literal"">
         int8range(5,15) * int8range(10,20)
        </code>
        →
        <code class=""returnvalue"">
         [10,15)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p>
        Computes the difference of the ranges. The second range must not be contained in the first in such a way that the difference would not be a single range.
       </p>
       <p>
        <code class=""literal"">
         int8range(5,15) - int8range(10,20)
        </code>
        →
        <code class=""returnvalue"">
         [5,10)
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""MULTIRANGE-OPERATORS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.57. Multirange Operators
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Multirange Operators"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Operator
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first multirange contain the second?
       </p>
       <p>
        <code class=""literal"">
         '{[2,4)}'::int4multirange @&gt; '{[2,3)}'::int4multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange contain the range?
       </p>
       <p>
        <code class=""literal"">
         '{[2,4)}'::int4multirange @&gt; int4range(2,3)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anyelement
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange contain the element?
       </p>
       <p>
        <code class=""literal"">
         '{[2011-01-01,2011-03-01)}'::tsmultirange @&gt; '2011-01-10'::timestamp
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         @&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range contain the multirange?
       </p>
       <p>
        <code class=""literal"">
         '[2,4)'::int4range @&gt; '{[2,3)}'::int4multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first multirange contained by the second?
       </p>
       <p>
        <code class=""literal"">
         '{[2,4)}'::int4multirange &lt;@ '{[1,7)}'::int4multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange contained by the range?
       </p>
       <p>
        <code class=""literal"">
         '{[2,4)}'::int4multirange &lt;@ int4range(1,7)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range contained by the multirange?
       </p>
       <p>
        <code class=""literal"">
         int4range(2,4) &lt;@ '{[1,7)}'::int4multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyelement
        </code>
        <code class=""literal"">
         &lt;@
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the element contained by the multirange?
       </p>
       <p>
        <code class=""literal"">
         4 &lt;@ '{[1,7)}'::int4multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Do the multiranges overlap, that is, have any elements in common?
       </p>
       <p>
        <code class=""literal"">
         '{[3,7)}'::int8multirange &amp;&amp; '{[4,12)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange overlap the range?
       </p>
       <p>
        <code class=""literal"">
         '{[3,7)}'::int8multirange &amp;&amp; int8range(4,12)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&amp;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range overlap the multirange?
       </p>
       <p>
        <code class=""literal"">
         int8range(3,7) &amp;&amp; '{[4,12)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first multirange strictly left of the second?
       </p>
       <p>
        <code class=""literal"">
         '{[1,10)}'::int8multirange &lt;&lt; '{[100,110)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange strictly left of the range?
       </p>
       <p>
        <code class=""literal"">
         '{[1,10)}'::int8multirange &lt;&lt; int8range(100,110)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &lt;&lt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range strictly left of the multirange?
       </p>
       <p>
        <code class=""literal"">
         int8range(1,10) &lt;&lt; '{[100,110)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the first multirange strictly right of the second?
       </p>
       <p>
        <code class=""literal"">
         '{[50,60)}'::int8multirange &gt;&gt; '{[20,30)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange strictly right of the range?
       </p>
       <p>
        <code class=""literal"">
         '{[50,60)}'::int8multirange &gt;&gt; int8range(20,30)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &gt;&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range strictly right of the multirange?
       </p>
       <p>
        <code class=""literal"">
         int8range(50,60) &gt;&gt; '{[20,30)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&lt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first multirange not extend to the right of the second?
       </p>
       <p>
        <code class=""literal"">
         '{[1,20)}'::int8multirange &amp;&lt; '{[18,20)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&lt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange not extend to the right of the range?
       </p>
       <p>
        <code class=""literal"">
         '{[1,20)}'::int8multirange &amp;&lt; int8range(18,20)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&lt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range not extend to the right of the multirange?
       </p>
       <p>
        <code class=""literal"">
         int8range(1,20) &amp;&lt; '{[18,20)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the first multirange not extend to the left of the second?
       </p>
       <p>
        <code class=""literal"">
         '{[7,20)}'::int8multirange &amp;&gt; '{[5,10)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         &amp;&gt;
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange not extend to the left of the range?
       </p>
       <p>
        <code class=""literal"">
         '{[7,20)}'::int8multirange &amp;&gt; int8range(5,10)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         &amp;&gt;
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range not extend to the left of the multirange?
       </p>
       <p>
        <code class=""literal"">
         int8range(7,20) &amp;&gt; '{[5,10)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         -|-
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Are the multiranges adjacent?
       </p>
       <p>
        <code class=""literal"">
         '{[1.1,2.2)}'::nummultirange -|- '{[2.2,3.3)}'::nummultirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         -|-
        </code>
        <code class=""type"">
         anyrange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange adjacent to the range?
       </p>
       <p>
        <code class=""literal"">
         '{[1.1,2.2)}'::nummultirange -|- numrange(2.2,3.3)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anyrange
        </code>
        <code class=""literal"">
         -|-
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range adjacent to the multirange?
       </p>
       <p>
        <code class=""literal"">
         numrange(1.1,2.2) -|- '{[2.2,3.3)}'::nummultirange
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         +
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Computes the union of the multiranges. The multiranges need not overlap or be adjacent.
       </p>
       <p>
        <code class=""literal"">
         '{[5,10)}'::nummultirange + '{[15,20)}'::nummultirange
        </code>
        →
        <code class=""returnvalue"">
         {[5,10), [15,20)}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         *
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Computes the intersection of the multiranges.
       </p>
       <p>
        <code class=""literal"">
         '{[5,15)}'::int8multirange * '{[10,20)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         {[10,15)}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""type"">
         anymultirange
        </code>
        <code class=""literal"">
         -
        </code>
        <code class=""type"">
         anymultirange
        </code>
        →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Computes the difference of the multiranges.
       </p>
       <p>
        <code class=""literal"">
         '{[5,20)}'::int8multirange - '{[10,15)}'::int8multirange
        </code>
        →
        <code class=""returnvalue"">
         {[5,10), [15,20)}
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The left-of/right-of/adjacent operators always return false when an empty range or multirange is involved; that is, an empty range is not considered to be either before or after any other range.
 </p>
 <p>
  Elsewhere empty ranges and multiranges are treated as the additive identity: anything unioned with an empty value is itself. Anything minus an empty value is itself. An empty multirange has exactly the same points as an empty range. Every range contains the empty range. Every multirange contains as many empty ranges as you like.
 </p>
 <p>
  The range union and difference operators will fail if the resulting range would need to contain two disjoint sub-ranges, as such a range cannot be represented. There are separate operators for union and difference that take multirange parameters and return a multirange, and they do not fail even if their arguments are disjoint. So if you need a union or difference operation for ranges that may be disjoint, you can avoid errors by first casting your ranges to multiranges.
 </p>
 <p>
  <a class=""xref"" href=""functions-range.html#RANGE-FUNCTIONS-TABLE"" title=""Table 9.58. Range Functions"">
   Table 9.58
  </a>
  shows the functions available for use with range types.
  <a class=""xref"" href=""functions-range.html#MULTIRANGE-FUNCTIONS-TABLE"" title=""Table 9.59. Multirange Functions"">
   Table 9.59
  </a>
  shows the functions available for use with multirange types.
 </p>
 <div class=""table"" id=""RANGE-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.58. Range Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Range Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.1.1.1.1"" name=""id-1.5.8.26.10.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         lower
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Extracts the lower bound of the range (
        <code class=""literal"">
         NULL
        </code>
        if the range is empty or has no lower bound).
       </p>
       <p>
        <code class=""literal"">
         lower(numrange(1.1,2.2))
        </code>
        →
        <code class=""returnvalue"">
         1.1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.2.1.1.1"" name=""id-1.5.8.26.10.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         upper
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Extracts the upper bound of the range (
        <code class=""literal"">
         NULL
        </code>
        if the range is empty or has no upper bound).
       </p>
       <p>
        <code class=""literal"">
         upper(numrange(1.1,2.2))
        </code>
        →
        <code class=""returnvalue"">
         2.2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.3.1.1.1"" name=""id-1.5.8.26.10.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         isempty
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range empty?
       </p>
       <p>
        <code class=""literal"">
         isempty(numrange(1.1,2.2))
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.4.1.1.1"" name=""id-1.5.8.26.10.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         lower_inc
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range's lower bound inclusive?
       </p>
       <p>
        <code class=""literal"">
         lower_inc(numrange(1.1,2.2))
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.5.1.1.1"" name=""id-1.5.8.26.10.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         upper_inc
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the range's upper bound inclusive?
       </p>
       <p>
        <code class=""literal"">
         upper_inc(numrange(1.1,2.2))
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.6.1.1.1"" name=""id-1.5.8.26.10.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         lower_inf
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range have no lower bound? (A lower bound of
        <code class=""literal"">
         -Infinity
        </code>
        returns false.)
       </p>
       <p>
        <code class=""literal"">
         lower_inf('(,)'::daterange)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.7.1.1.1"" name=""id-1.5.8.26.10.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         upper_inf
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the range have no upper bound? (An upper bound of
        <code class=""literal"">
         Infinity
        </code>
        returns false.)
       </p>
       <p>
        <code class=""literal"">
         upper_inf('(,)'::daterange)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.10.2.2.8.1.1.1"" name=""id-1.5.8.26.10.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         range_merge
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ,
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p>
        Computes the smallest range that includes both of the given ranges.
       </p>
       <p>
        <code class=""literal"">
         range_merge('[1,2)'::int4range, '[3,4)'::int4range)
        </code>
        →
        <code class=""returnvalue"">
         [1,4)
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""MULTIRANGE-FUNCTIONS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.59. Multirange Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Multirange Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example(s)
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.1.1.1.1"" name=""id-1.5.8.26.11.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         lower
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Extracts the lower bound of the multirange (
        <code class=""literal"">
         NULL
        </code>
        if the multirange is empty has no lower bound).
       </p>
       <p>
        <code class=""literal"">
         lower('{[1.1,2.2)}'::nummultirange)
        </code>
        →
        <code class=""returnvalue"">
         1.1
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.2.1.1.1"" name=""id-1.5.8.26.11.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         upper
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Extracts the upper bound of the multirange (
        <code class=""literal"">
         NULL
        </code>
        if the multirange is empty or has no upper bound).
       </p>
       <p>
        <code class=""literal"">
         upper('{[1.1,2.2)}'::nummultirange)
        </code>
        →
        <code class=""returnvalue"">
         2.2
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.3.1.1.1"" name=""id-1.5.8.26.11.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         isempty
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange empty?
       </p>
       <p>
        <code class=""literal"">
         isempty('{[1.1,2.2)}'::nummultirange)
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.4.1.1.1"" name=""id-1.5.8.26.11.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         lower_inc
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange's lower bound inclusive?
       </p>
       <p>
        <code class=""literal"">
         lower_inc('{[1.1,2.2)}'::nummultirange)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.5.1.1.1"" name=""id-1.5.8.26.11.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         upper_inc
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Is the multirange's upper bound inclusive?
       </p>
       <p>
        <code class=""literal"">
         upper_inc('{[1.1,2.2)}'::nummultirange)
        </code>
        →
        <code class=""returnvalue"">
         f
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.6.1.1.1"" name=""id-1.5.8.26.11.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         lower_inf
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange have no lower bound? (A lower bound of
        <code class=""literal"">
         -Infinity
        </code>
        returns false.)
       </p>
       <p>
        <code class=""literal"">
         lower_inf('{(,)}'::datemultirange)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.7.1.1.1"" name=""id-1.5.8.26.11.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         upper_inf
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Does the multirange have no upper bound? (An upper bound of
        <code class=""literal"">
         Infinity
        </code>
        returns false.)
       </p>
       <p>
        <code class=""literal"">
         upper_inf('{(,)}'::datemultirange)
        </code>
        →
        <code class=""returnvalue"">
         t
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.8.1.1.1"" name=""id-1.5.8.26.11.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         range_merge
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p>
        Computes the smallest range that includes the entire multirange.
       </p>
       <p>
        <code class=""literal"">
         range_merge('{[1,2), [3,4)}'::int4multirange)
        </code>
        →
        <code class=""returnvalue"">
         [1,4)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.9.1.1.1"" name=""id-1.5.8.26.11.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         multirange
        </code>
        (
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Returns a multirange containing just the given range.
       </p>
       <p>
        <code class=""literal"">
         multirange('[1,2)'::int4range)
        </code>
        →
        <code class=""returnvalue"">
         {[1,2)}
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.26.11.2.2.10.1.1.1"" name=""id-1.5.8.26.11.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         unnest
        </code>
        (
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         setof anyrange
        </code>
       </p>
       <p>
        Expands a multirange into a set of ranges in ascending order.
       </p>
       <p>
        <code class=""literal"">
         unnest('{[1,2), [3,4)}'::int4multirange)
        </code>
        →
       </p>
       <pre class=""programlisting"">
 [1,2)
 [3,4)
</pre>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The
  <code class=""function"">
   lower_inc
  </code>
  ,
  <code class=""function"">
   upper_inc
  </code>
  ,
  <code class=""function"">
   lower_inf
  </code>
  , and
  <code class=""function"">
   upper_inf
  </code>
  functions all return false for an empty range or multirange.
 </p>
</div>
"
9. Functions and Operators,9.21. Aggregate Functions,https://www.postgresql.org/docs/17/functions-aggregate.html,"<div class=""sect1"" id=""FUNCTIONS-AGGREGATE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.21. Aggregate Functions
     <a class=""id_link"" href=""#FUNCTIONS-AGGREGATE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.27.2"" name=""id-1.5.8.27.2"">
 </a>
 <p>
  <em class=""firstterm"">
   Aggregate functions
  </em>
  compute a single result from a set of input values. The built-in general-purpose aggregate functions are listed in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE"" title=""Table 9.60. General-Purpose Aggregate Functions"">
   Table 9.60
  </a>
  while statistical aggregates are in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE"" title=""Table 9.61. Aggregate Functions for Statistics"">
   Table 9.61
  </a>
  . The built-in within-group ordered-set aggregate functions are listed in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE"" title=""Table 9.62. Ordered-Set Aggregate Functions"">
   Table 9.62
  </a>
  while the built-in within-group hypothetical-set ones are in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-HYPOTHETICAL-TABLE"" title=""Table 9.63. Hypothetical-Set Aggregate Functions"">
   Table 9.63
  </a>
  . Grouping operations, which are closely related to aggregate functions, are listed in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-GROUPING-TABLE"" title=""Table 9.64. Grouping Operations"">
   Table 9.64
  </a>
  . The special syntax considerations for aggregate functions are explained in
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-AGGREGATES"" title=""4.2.7. Aggregate Expressions"">
   Section 4.2.7
  </a>
  . Consult
  <a class=""xref"" href=""tutorial-agg.html"" title=""2.7. Aggregate Functions"">
   Section 2.7
  </a>
  for additional introductory information.
 </p>
 <p>
  Aggregate functions that support
  <em class=""firstterm"">
   Partial Mode
  </em>
  are eligible to participate in various optimizations, such as parallel aggregation.
 </p>
 <p>
  While all aggregates below accept an optional
  <code class=""literal"">
   ORDER BY
  </code>
  clause (as outlined in
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-AGGREGATES"" title=""4.2.7. Aggregate Expressions"">
   Section 4.2.7
  </a>
  ), the clause has only been added to aggregates whose output is affected by ordering.
 </p>
 <div class=""table"" id=""FUNCTIONS-AGGREGATE-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.60. General-Purpose Aggregate Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""General-Purpose Aggregate Functions"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
      <th>
       Partial Mode
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.1.1.1.1"" name=""id-1.5.8.27.6.2.4.1.1.1.1"">
        </a>
        <code class=""function"">
         any_value
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           same as input type
          </code>
         </em>
        </code>
       </p>
       <p>
        Returns an arbitrary value from the non-null input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.2.1.1.1"" name=""id-1.5.8.27.6.2.4.2.1.1.1"">
        </a>
        <code class=""function"">
         array_agg
        </code>
        (
        <code class=""type"">
         anynonarray
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Collects all the input values, including nulls, into an array.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         array_agg
        </code>
        (
        <code class=""type"">
         anyarray
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Concatenates all the input arrays into an array of one higher dimension. (The inputs must all have the same dimensionality, and cannot be empty or null.)
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.4.1.1.1"" name=""id-1.5.8.27.6.2.4.4.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.4.1.1.2"" name=""id-1.5.8.27.6.2.4.4.1.1.2"">
        </a>
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         smallint
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         real
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         avg
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Computes the average (arithmetic mean) of all the non-null input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.5.1.1.1"" name=""id-1.5.8.27.6.2.4.5.1.1.1"">
        </a>
        <code class=""function"">
         bit_and
        </code>
        (
        <code class=""type"">
         smallint
        </code>
        ) →
        <code class=""returnvalue"">
         smallint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_and
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_and
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_and
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Computes the bitwise AND of all non-null input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.6.1.1.1"" name=""id-1.5.8.27.6.2.4.6.1.1.1"">
        </a>
        <code class=""function"">
         bit_or
        </code>
        (
        <code class=""type"">
         smallint
        </code>
        ) →
        <code class=""returnvalue"">
         smallint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_or
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_or
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_or
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Computes the bitwise OR of all non-null input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.7.1.1.1"" name=""id-1.5.8.27.6.2.4.7.1.1.1"">
        </a>
        <code class=""function"">
         bit_xor
        </code>
        (
        <code class=""type"">
         smallint
        </code>
        ) →
        <code class=""returnvalue"">
         smallint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_xor
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_xor
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         bit_xor
        </code>
        (
        <code class=""type"">
         bit
        </code>
        ) →
        <code class=""returnvalue"">
         bit
        </code>
       </p>
       <p>
        Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.8.1.1.1"" name=""id-1.5.8.27.6.2.4.8.1.1.1"">
        </a>
        <code class=""function"">
         bool_and
        </code>
        (
        <code class=""type"">
         boolean
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Returns true if all non-null input values are true, otherwise false.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.9.1.1.1"" name=""id-1.5.8.27.6.2.4.9.1.1.1"">
        </a>
        <code class=""function"">
         bool_or
        </code>
        (
        <code class=""type"">
         boolean
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        Returns true if any non-null input value is true, otherwise false.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.10.1.1.1"" name=""id-1.5.8.27.6.2.4.10.1.1.1"">
        </a>
        <code class=""function"">
         count
        </code>
        (
        <code class=""literal"">
         *
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the number of input rows.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         count
        </code>
        (
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the number of input rows in which the input value is not null.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.12.1.1.1"" name=""id-1.5.8.27.6.2.4.12.1.1.1"">
        </a>
        <code class=""function"">
         every
        </code>
        (
        <code class=""type"">
         boolean
        </code>
        ) →
        <code class=""returnvalue"">
         boolean
        </code>
       </p>
       <p>
        This is the SQL standard's equivalent to
        <code class=""function"">
         bool_and
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.13.1.1.1"" name=""id-1.5.8.27.6.2.4.13.1.1.1"">
        </a>
        <code class=""function"">
         json_agg
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.13.1.2.1"" name=""id-1.5.8.27.6.2.4.13.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_agg
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        .
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.14.1.1.1"" name=""id-1.5.8.27.6.2.4.14.1.1.1"">
        </a>
        <code class=""function"">
         json_agg_strict
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.14.1.2.1"" name=""id-1.5.8.27.6.2.4.14.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_agg_strict
        </code>
        (
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the input values, skipping nulls, into a JSON array. Values are converted to JSON as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        .
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.15.1.1.1"" name=""id-1.5.8.27.6.2.4.15.1.1.1"">
        </a>
        <code class=""function"">
         json_arrayagg
        </code>
        ( [
        <span class=""optional"">
         <em class=""replaceable"">
          <code>
           value_expression
          </code>
         </em>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          ORDER BY
         </code>
         <em class=""replaceable"">
          <code>
           sort_expression
          </code>
         </em>
        </span>
        ] [
        <span class=""optional"">
         {
         <code class=""literal"">
          NULL
         </code>
         |
         <code class=""literal"">
          ABSENT
         </code>
         }
         <code class=""literal"">
          ON NULL
         </code>
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          RETURNING
         </code>
         <em class=""replaceable"">
          <code>
           data_type
          </code>
         </em>
         [
         <span class=""optional"">
          <code class=""literal"">
           FORMAT JSON
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            ENCODING UTF8
           </code>
          </span>
          ]
         </span>
         ]
        </span>
        ])
       </p>
       <p>
        Behaves in the same way as
        <code class=""function"">
         json_array
        </code>
        but as an aggregate function so it only takes one
        <em class=""replaceable"">
         <code>
          value_expression
         </code>
        </em>
        parameter. If
        <code class=""literal"">
         ABSENT ON NULL
        </code>
        is specified, any NULL values are omitted. If
        <code class=""literal"">
         ORDER BY
        </code>
        is specified, the elements will appear in the array in that order rather than in the input order.
       </p>
       <p>
        <code class=""literal"">
         SELECT json_arrayagg(v) FROM (VALUES(2),(1)) t(v)
        </code>
        →
        <code class=""returnvalue"">
         [2, 1]
        </code>
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.16.1.1.1"" name=""id-1.5.8.27.6.2.4.16.1.1.1"">
        </a>
        <code class=""function"">
         json_objectagg
        </code>
        ( [
        <span class=""optional"">
         {
         <em class=""replaceable"">
          <code>
           key_expression
          </code>
         </em>
         {
         <code class=""literal"">
          VALUE
         </code>
         | ':' }
         <em class=""replaceable"">
          <code>
           value_expression
          </code>
         </em>
         }
        </span>
        ] [
        <span class=""optional"">
         {
         <code class=""literal"">
          NULL
         </code>
         |
         <code class=""literal"">
          ABSENT
         </code>
         }
         <code class=""literal"">
          ON NULL
         </code>
        </span>
        ] [
        <span class=""optional"">
         {
         <code class=""literal"">
          WITH
         </code>
         |
         <code class=""literal"">
          WITHOUT
         </code>
         }
         <code class=""literal"">
          UNIQUE
         </code>
         [
         <span class=""optional"">
          <code class=""literal"">
           KEYS
          </code>
         </span>
         ]
        </span>
        ] [
        <span class=""optional"">
         <code class=""literal"">
          RETURNING
         </code>
         <em class=""replaceable"">
          <code>
           data_type
          </code>
         </em>
         [
         <span class=""optional"">
          <code class=""literal"">
           FORMAT JSON
          </code>
          [
          <span class=""optional"">
           <code class=""literal"">
            ENCODING UTF8
           </code>
          </span>
          ]
         </span>
         ]
        </span>
        ])
       </p>
       <p>
        Behaves like
        <code class=""function"">
         json_object
        </code>
        , but as an aggregate function, so it only takes one
        <em class=""replaceable"">
         <code>
          key_expression
         </code>
        </em>
        and one
        <em class=""replaceable"">
         <code>
          value_expression
         </code>
        </em>
        parameter.
       </p>
       <p>
        <code class=""literal"">
         SELECT json_objectagg(k:v) FROM (VALUES ('a'::text,current_date),('b',current_date + 1)) AS t(k,v)
        </code>
        →
        <code class=""returnvalue"">
         { ""a"" : ""2022-05-10"", ""b"" : ""2022-05-11"" }
        </code>
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.17.1.1.1"" name=""id-1.5.8.27.6.2.4.17.1.1.1"">
        </a>
        <code class=""function"">
         json_object_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.17.1.2.1"" name=""id-1.5.8.27.6.2.4.17.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_object_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        . Values can be null, but keys cannot.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.18.1.1.1"" name=""id-1.5.8.27.6.2.4.18.1.1.1"">
        </a>
        <code class=""function"">
         json_object_agg_strict
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.18.1.2.1"" name=""id-1.5.8.27.6.2.4.18.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_object_agg_strict
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        . The
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        can not be null. If the
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        is null then the entry is skipped,
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.19.1.1.1"" name=""id-1.5.8.27.6.2.4.19.1.1.1"">
        </a>
        <code class=""function"">
         json_object_agg_unique
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.19.1.2.1"" name=""id-1.5.8.27.6.2.4.19.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_object_agg_unique
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        . Values can be null, but keys cannot. If there is a duplicate key an error is thrown.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.20.1.1.1"" name=""id-1.5.8.27.6.2.4.20.1.1.1"">
        </a>
        <code class=""function"">
         json_object_agg_unique_strict
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         json
        </code>
       </p>
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.20.1.2.1"" name=""id-1.5.8.27.6.2.4.20.1.2.1"">
        </a>
        <code class=""function"">
         jsonb_object_agg_unique_strict
        </code>
        (
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ,
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         ""any""
        </code>
        ) →
        <code class=""returnvalue"">
         jsonb
        </code>
       </p>
       <p>
        Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per
        <code class=""function"">
         to_json
        </code>
        or
        <code class=""function"">
         to_jsonb
        </code>
        . The
        <em class=""parameter"">
         <code>
          key
         </code>
        </em>
        can not be null. If the
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        is null then the entry is skipped. If there is a duplicate key an error is thrown.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.21.1.1.1"" name=""id-1.5.8.27.6.2.4.21.1.1.1"">
        </a>
        <code class=""function"">
         max
        </code>
        (
        <em class=""replaceable"">
         <code>
          see text
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           same as input type
          </code>
         </em>
        </code>
       </p>
       <p>
        Computes the maximum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as
        <code class=""type"">
         inet
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        ,
        <code class=""type"">
         money
        </code>
        ,
        <code class=""type"">
         oid
        </code>
        ,
        <code class=""type"">
         pg_lsn
        </code>
        ,
        <code class=""type"">
         tid
        </code>
        ,
        <code class=""type"">
         xid8
        </code>
        , and arrays of any of these types.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.22.1.1.1"" name=""id-1.5.8.27.6.2.4.22.1.1.1"">
        </a>
        <code class=""function"">
         min
        </code>
        (
        <em class=""replaceable"">
         <code>
          see text
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         <em class=""replaceable"">
          <code>
           same as input type
          </code>
         </em>
        </code>
       </p>
       <p>
        Computes the minimum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as
        <code class=""type"">
         inet
        </code>
        ,
        <code class=""type"">
         interval
        </code>
        ,
        <code class=""type"">
         money
        </code>
        ,
        <code class=""type"">
         oid
        </code>
        ,
        <code class=""type"">
         pg_lsn
        </code>
        ,
        <code class=""type"">
         tid
        </code>
        ,
        <code class=""type"">
         xid8
        </code>
        , and arrays of any of these types.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.23.1.1.1"" name=""id-1.5.8.27.6.2.4.23.1.1.1"">
        </a>
        <code class=""function"">
         range_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         range_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Computes the union of the non-null input values.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.24.1.1.1"" name=""id-1.5.8.27.6.2.4.24.1.1.1"">
        </a>
        <code class=""function"">
         range_intersect_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anyrange
        </code>
        ) →
        <code class=""returnvalue"">
         anyrange
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         range_intersect_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anymultirange
        </code>
        ) →
        <code class=""returnvalue"">
         anymultirange
        </code>
       </p>
       <p>
        Computes the intersection of the non-null input values.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.25.1.1.1"" name=""id-1.5.8.27.6.2.4.25.1.1.1"">
        </a>
        <code class=""function"">
         string_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         string_agg
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        ,
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        <code class=""type"">
         bytea
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         bytea
        </code>
       </p>
       <p>
        Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding
        <em class=""parameter"">
         <code>
          delimiter
         </code>
        </em>
        (if it's not null).
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.26.1.1.1"" name=""id-1.5.8.27.6.2.4.26.1.1.1"">
        </a>
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         smallint
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         bigint
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         numeric
        </code>
        ) →
        <code class=""returnvalue"">
         numeric
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         real
        </code>
        ) →
        <code class=""returnvalue"">
         real
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         sum
        </code>
        (
        <code class=""type"">
         money
        </code>
        ) →
        <code class=""returnvalue"">
         money
        </code>
       </p>
       <p>
        Computes the sum of the non-null input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.6.2.4.27.1.1.1"" name=""id-1.5.8.27.6.2.4.27.1.1.1"">
        </a>
        <code class=""function"">
         xmlagg
        </code>
        (
        <code class=""type"">
         xml
        </code>
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""literal"">
         input_sort_columns
        </code>
        ) →
        <code class=""returnvalue"">
         xml
        </code>
       </p>
       <p>
        Concatenates the non-null XML input values (see
        <a class=""xref"" href=""functions-xml.html#FUNCTIONS-XML-XMLAGG"" title=""9.15.1.8. xmlagg"">
         Section 9.15.1.8
        </a>
        ).
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  It should be noted that except for
  <code class=""function"">
   count
  </code>
  , these functions return a null value when no rows are selected. In particular,
  <code class=""function"">
   sum
  </code>
  of no rows returns null, not zero as one might expect, and
  <code class=""function"">
   array_agg
  </code>
  returns null rather than an empty array when there are no input rows. The
  <code class=""function"">
   coalesce
  </code>
  function can be used to substitute zero or an empty array for null when necessary.
 </p>
 <p>
  The aggregate functions
  <code class=""function"">
   array_agg
  </code>
  ,
  <code class=""function"">
   json_agg
  </code>
  ,
  <code class=""function"">
   jsonb_agg
  </code>
  ,
  <code class=""function"">
   json_agg_strict
  </code>
  ,
  <code class=""function"">
   jsonb_agg_strict
  </code>
  ,
  <code class=""function"">
   json_object_agg
  </code>
  ,
  <code class=""function"">
   jsonb_object_agg
  </code>
  ,
  <code class=""function"">
   json_object_agg_strict
  </code>
  ,
  <code class=""function"">
   jsonb_object_agg_strict
  </code>
  ,
  <code class=""function"">
   json_object_agg_unique
  </code>
  ,
  <code class=""function"">
   jsonb_object_agg_unique
  </code>
  ,
  <code class=""function"">
   json_object_agg_unique_strict
  </code>
  ,
  <code class=""function"">
   jsonb_object_agg_unique_strict
  </code>
  ,
  <code class=""function"">
   string_agg
  </code>
  , and
  <code class=""function"">
   xmlagg
  </code>
  , as well as similar user-defined aggregate functions, produce meaningfully different result values depending on the order of the input values. This ordering is unspecified by default, but can be controlled by writing an
  <code class=""literal"">
   ORDER BY
  </code>
  clause within the aggregate call, as shown in
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-AGGREGATES"" title=""4.2.7. Aggregate Expressions"">
   Section 4.2.7
  </a>
  . Alternatively, supplying the input values from a sorted subquery will usually work. For example:
 </p>
 <pre class=""screen"">
SELECT xmlagg(x) FROM (SELECT x FROM test ORDER BY y DESC) AS tab;
</pre>
 <p>
  Beware that this approach can fail if the outer query level contains additional processing, such as a join, because that might cause the subquery's output to be reordered before the aggregate is computed.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <a class=""indexterm"" id=""id-1.5.8.27.9.1"" name=""id-1.5.8.27.9.1"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.27.9.2"" name=""id-1.5.8.27.9.2"">
  </a>
  <p>
   The boolean aggregates
   <code class=""function"">
    bool_and
   </code>
   and
   <code class=""function"">
    bool_or
   </code>
   correspond to the standard SQL aggregates
   <code class=""function"">
    every
   </code>
   and
   <code class=""function"">
    any
   </code>
   or
   <code class=""function"">
    some
   </code>
   .
   <span class=""productname"">
    PostgreSQL
   </span>
   supports
   <code class=""function"">
    every
   </code>
   , but not
   <code class=""function"">
    any
   </code>
   or
   <code class=""function"">
    some
   </code>
   , because there is an ambiguity built into the standard syntax:
  </p>
  <pre class=""programlisting"">
SELECT b1 = ANY((SELECT b2 FROM t2 ...)) FROM t1 ...;
</pre>
  <p>
   Here
   <code class=""function"">
    ANY
   </code>
   can be considered either as introducing a subquery, or as being an aggregate function, if the subquery returns one row with a Boolean value. Thus the standard name cannot be given to these aggregates.
  </p>
 </div>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Users accustomed to working with other SQL database management systems might be disappointed by the performance of the
   <code class=""function"">
    count
   </code>
   aggregate when it is applied to the entire table. A query like:
  </p>
  <pre class=""programlisting"">
SELECT count(*) FROM sometable;
</pre>
  <p>
   will require effort proportional to the size of the table:
   <span class=""productname"">
    PostgreSQL
   </span>
   will need to scan either the entire table or the entirety of an index that includes all rows in the table.
  </p>
 </div>
 <p>
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE"" title=""Table 9.61. Aggregate Functions for Statistics"">
   Table 9.61
  </a>
  shows aggregate functions typically used in statistical analysis. (These are separated out merely to avoid cluttering the listing of more-commonly-used aggregates.) Functions shown as accepting
  <em class=""replaceable"">
   <code>
    numeric_type
   </code>
  </em>
  are available for all the types
  <code class=""type"">
   smallint
  </code>
  ,
  <code class=""type"">
   integer
  </code>
  ,
  <code class=""type"">
   bigint
  </code>
  ,
  <code class=""type"">
   numeric
  </code>
  ,
  <code class=""type"">
   real
  </code>
  , and
  <code class=""type"">
   double precision
  </code>
  . Where the description mentions
  <em class=""parameter"">
   <code>
    N
   </code>
  </em>
  , it means the number of input rows for which all the input expressions are non-null. In all cases, null is returned if the computation is meaningless, for example when
  <em class=""parameter"">
   <code>
    N
   </code>
  </em>
  is zero.
 </p>
 <a class=""indexterm"" id=""id-1.5.8.27.12"" name=""id-1.5.8.27.12"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.27.13"" name=""id-1.5.8.27.13"">
 </a>
 <div class=""table"" id=""FUNCTIONS-AGGREGATE-STATISTICS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.61. Aggregate Functions for Statistics
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Aggregate Functions for Statistics"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
      <th>
       Partial Mode
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.1.1.1.1"" name=""id-1.5.8.27.14.2.4.1.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.1.1.1.2"" name=""id-1.5.8.27.14.2.4.1.1.1.2"">
        </a>
        <code class=""function"">
         corr
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the correlation coefficient.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.2.1.1.1"" name=""id-1.5.8.27.14.2.4.2.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.2.1.1.2"" name=""id-1.5.8.27.14.2.4.2.1.1.2"">
        </a>
        <code class=""function"">
         covar_pop
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the population covariance.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.3.1.1.1"" name=""id-1.5.8.27.14.2.4.3.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.3.1.1.2"" name=""id-1.5.8.27.14.2.4.3.1.1.2"">
        </a>
        <code class=""function"">
         covar_samp
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the sample covariance.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.4.1.1.1"" name=""id-1.5.8.27.14.2.4.4.1.1.1"">
        </a>
        <code class=""function"">
         regr_avgx
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the average of the independent variable,
        <code class=""literal"">
         sum(
         <em class=""parameter"">
          <code>
           X
          </code>
         </em>
         )/
         <em class=""parameter"">
          <code>
           N
          </code>
         </em>
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.5.1.1.1"" name=""id-1.5.8.27.14.2.4.5.1.1.1"">
        </a>
        <code class=""function"">
         regr_avgy
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the average of the dependent variable,
        <code class=""literal"">
         sum(
         <em class=""parameter"">
          <code>
           Y
          </code>
         </em>
         )/
         <em class=""parameter"">
          <code>
           N
          </code>
         </em>
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.6.1.1.1"" name=""id-1.5.8.27.14.2.4.6.1.1.1"">
        </a>
        <code class=""function"">
         regr_count
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the number of rows in which both inputs are non-null.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.7.1.1.1"" name=""id-1.5.8.27.14.2.4.7.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.7.1.1.2"" name=""id-1.5.8.27.14.2.4.7.1.1.2"">
        </a>
        <code class=""function"">
         regr_intercept
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the y-intercept of the least-squares-fit linear equation determined by the (
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        ,
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        ) pairs.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.8.1.1.1"" name=""id-1.5.8.27.14.2.4.8.1.1.1"">
        </a>
        <code class=""function"">
         regr_r2
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the square of the correlation coefficient.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.9.1.1.1"" name=""id-1.5.8.27.14.2.4.9.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.9.1.1.2"" name=""id-1.5.8.27.14.2.4.9.1.1.2"">
        </a>
        <code class=""function"">
         regr_slope
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the slope of the least-squares-fit linear equation determined by the (
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        ,
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        ) pairs.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.10.1.1.1"" name=""id-1.5.8.27.14.2.4.10.1.1.1"">
        </a>
        <code class=""function"">
         regr_sxx
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the
        <span class=""quote"">
         “
         <span class=""quote"">
          sum of squares
         </span>
         ”
        </span>
        of the independent variable,
        <code class=""literal"">
         sum(
         <em class=""parameter"">
          <code>
           X
          </code>
         </em>
         ^2) - sum(
         <em class=""parameter"">
          <code>
           X
          </code>
         </em>
         )^2/
         <em class=""parameter"">
          <code>
           N
          </code>
         </em>
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.11.1.1.1"" name=""id-1.5.8.27.14.2.4.11.1.1.1"">
        </a>
        <code class=""function"">
         regr_sxy
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the
        <span class=""quote"">
         “
         <span class=""quote"">
          sum of products
         </span>
         ”
        </span>
        of independent times dependent variables,
        <code class=""literal"">
         sum(
         <em class=""parameter"">
          <code>
           X
          </code>
         </em>
         *
         <em class=""parameter"">
          <code>
           Y
          </code>
         </em>
         ) - sum(
         <em class=""parameter"">
          <code>
           X
          </code>
         </em>
         ) * sum(
         <em class=""parameter"">
          <code>
           Y
          </code>
         </em>
         )/
         <em class=""parameter"">
          <code>
           N
          </code>
         </em>
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.12.1.1.1"" name=""id-1.5.8.27.14.2.4.12.1.1.1"">
        </a>
        <code class=""function"">
         regr_syy
        </code>
        (
        <em class=""parameter"">
         <code>
          Y
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ,
        <em class=""parameter"">
         <code>
          X
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the
        <span class=""quote"">
         “
         <span class=""quote"">
          sum of squares
         </span>
         ”
        </span>
        of the dependent variable,
        <code class=""literal"">
         sum(
         <em class=""parameter"">
          <code>
           Y
          </code>
         </em>
         ^2) - sum(
         <em class=""parameter"">
          <code>
           Y
          </code>
         </em>
         )^2/
         <em class=""parameter"">
          <code>
           N
          </code>
         </em>
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.13.1.1.1"" name=""id-1.5.8.27.14.2.4.13.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.13.1.1.2"" name=""id-1.5.8.27.14.2.4.13.1.1.2"">
        </a>
        <code class=""function"">
         stddev
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        This is a historical alias for
        <code class=""function"">
         stddev_samp
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.14.1.1.1"" name=""id-1.5.8.27.14.2.4.14.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.14.1.1.2"" name=""id-1.5.8.27.14.2.4.14.1.1.2"">
        </a>
        <code class=""function"">
         stddev_pop
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        Computes the population standard deviation of the input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.15.1.1.1"" name=""id-1.5.8.27.14.2.4.15.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.15.1.1.2"" name=""id-1.5.8.27.14.2.4.15.1.1.2"">
        </a>
        <code class=""function"">
         stddev_samp
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        Computes the sample standard deviation of the input values.
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.16.1.1.1"" name=""id-1.5.8.27.14.2.4.16.1.1.1"">
        </a>
        <code class=""function"">
         variance
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        This is a historical alias for
        <code class=""function"">
         var_samp
        </code>
        .
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.17.1.1.1"" name=""id-1.5.8.27.14.2.4.17.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.17.1.1.2"" name=""id-1.5.8.27.14.2.4.17.1.1.2"">
        </a>
        <code class=""function"">
         var_pop
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        Computes the population variance of the input values (square of the population standard deviation).
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.18.1.1.1"" name=""id-1.5.8.27.14.2.4.18.1.1.1"">
        </a>
        <a class=""indexterm"" id=""id-1.5.8.27.14.2.4.18.1.1.2"" name=""id-1.5.8.27.14.2.4.18.1.1.2"">
        </a>
        <code class=""function"">
         var_samp
        </code>
        (
        <em class=""replaceable"">
         <code>
          numeric_type
         </code>
        </em>
        ) →
        <code class=""type"">
         double precision
        </code>
        for
        <code class=""type"">
         real
        </code>
        or
        <code class=""type"">
         double precision
        </code>
        , otherwise
        <code class=""type"">
         numeric
        </code>
       </p>
       <p>
        Computes the sample variance of the input values (square of the sample standard deviation).
       </p>
      </td>
      <td>
       Yes
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-ORDEREDSET-TABLE"" title=""Table 9.62. Ordered-Set Aggregate Functions"">
   Table 9.62
  </a>
  shows some aggregate functions that use the
  <em class=""firstterm"">
   ordered-set aggregate
  </em>
  syntax. These functions are sometimes referred to as
  <span class=""quote"">
   “
   <span class=""quote"">
    inverse distribution
   </span>
   ”
  </span>
  functions. Their aggregated input is introduced by
  <code class=""literal"">
   ORDER BY
  </code>
  , and they may also take a
  <em class=""firstterm"">
   direct argument
  </em>
  that is not aggregated, but is computed only once. All these functions ignore null values in their aggregated input. For those that take a
  <em class=""parameter"">
   <code>
    fraction
   </code>
  </em>
  parameter, the fraction value must be between 0 and 1; an error is thrown if not. However, a null
  <em class=""parameter"">
   <code>
    fraction
   </code>
  </em>
  value simply produces a null result.
 </p>
 <a class=""indexterm"" id=""id-1.5.8.27.16"" name=""id-1.5.8.27.16"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.27.17"" name=""id-1.5.8.27.17"">
 </a>
 <div class=""table"" id=""FUNCTIONS-ORDEREDSET-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.62. Ordered-Set Aggregate Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Ordered-Set Aggregate Functions"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
      <th>
       Partial Mode
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.18.2.4.1.1.1.1"" name=""id-1.5.8.27.18.2.4.1.1.1.1"">
        </a>
        <code class=""function"">
         mode
        </code>
        ()
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Computes the
        <em class=""firstterm"">
         mode
        </em>
        , the most frequent value of the aggregated argument (arbitrarily choosing the first one if there are multiple equally-frequent values). The aggregated argument must be of a sortable type.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.18.2.4.2.1.1.1"" name=""id-1.5.8.27.18.2.4.2.1.1.1"">
        </a>
        <code class=""function"">
         percentile_cont
        </code>
        (
        <em class=""parameter"">
         <code>
          fraction
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         percentile_cont
        </code>
        (
        <em class=""parameter"">
         <code>
          fraction
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval
        </code>
       </p>
       <p>
        Computes the
        <em class=""firstterm"">
         continuous percentile
        </em>
        , a value corresponding to the specified
        <em class=""parameter"">
         <code>
          fraction
         </code>
        </em>
        within the ordered set of aggregated argument values. This will interpolate between adjacent input items if needed.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         percentile_cont
        </code>
        (
        <em class=""parameter"">
         <code>
          fractions
         </code>
        </em>
        <code class=""type"">
         double precision[]
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         double precision
        </code>
        ) →
        <code class=""returnvalue"">
         double precision[]
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         percentile_cont
        </code>
        (
        <em class=""parameter"">
         <code>
          fractions
         </code>
        </em>
        <code class=""type"">
         double precision[]
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         interval[]
        </code>
       </p>
       <p>
        Computes multiple continuous percentiles. The result is an array of the same dimensions as the
        <em class=""parameter"">
         <code>
          fractions
         </code>
        </em>
        parameter, with each non-null element replaced by the (possibly interpolated) value corresponding to that percentile.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.18.2.4.4.1.1.1"" name=""id-1.5.8.27.18.2.4.4.1.1.1"">
        </a>
        <code class=""function"">
         percentile_disc
        </code>
        (
        <em class=""parameter"">
         <code>
          fraction
         </code>
        </em>
        <code class=""type"">
         double precision
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Computes the
        <em class=""firstterm"">
         discrete percentile
        </em>
        , the first value within the ordered set of aggregated argument values whose position in the ordering equals or exceeds the specified
        <em class=""parameter"">
         <code>
          fraction
         </code>
        </em>
        . The aggregated argument must be of a sortable type.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         percentile_disc
        </code>
        (
        <em class=""parameter"">
         <code>
          fractions
         </code>
        </em>
        <code class=""type"">
         double precision[]
        </code>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         anyarray
        </code>
       </p>
       <p>
        Computes multiple discrete percentiles. The result is an array of the same dimensions as the
        <em class=""parameter"">
         <code>
          fractions
         </code>
        </em>
        parameter, with each non-null element replaced by the input value corresponding to that percentile. The aggregated argument must be of a sortable type.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <a class=""indexterm"" id=""id-1.5.8.27.19"" name=""id-1.5.8.27.19"">
 </a>
 <p>
  Each of the
  <span class=""quote"">
   “
   <span class=""quote"">
    hypothetical-set
   </span>
   ”
  </span>
  aggregates listed in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-HYPOTHETICAL-TABLE"" title=""Table 9.63. Hypothetical-Set Aggregate Functions"">
   Table 9.63
  </a>
  is associated with a window function of the same name defined in
  <a class=""xref"" href=""functions-window.html"" title=""9.22. Window Functions"">
   Section 9.22
  </a>
  . In each case, the aggregate's result is the value that the associated window function would have returned for the
  <span class=""quote"">
   “
   <span class=""quote"">
    hypothetical
   </span>
   ”
  </span>
  row constructed from
  <em class=""replaceable"">
   <code>
    args
   </code>
  </em>
  , if such a row had been added to the sorted group of rows represented by the
  <em class=""replaceable"">
   <code>
    sorted_args
   </code>
  </em>
  . For each of these functions, the list of direct arguments given in
  <em class=""replaceable"">
   <code>
    args
   </code>
  </em>
  must match the number and types of the aggregated arguments given in
  <em class=""replaceable"">
   <code>
    sorted_args
   </code>
  </em>
  . Unlike most built-in aggregates, these aggregates are not strict, that is they do not drop input rows containing nulls. Null values sort according to the rule specified in the
  <code class=""literal"">
   ORDER BY
  </code>
  clause.
 </p>
 <div class=""table"" id=""FUNCTIONS-HYPOTHETICAL-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.63. Hypothetical-Set Aggregate Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Hypothetical-Set Aggregate Functions"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
      <th>
       Partial Mode
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.21.2.4.1.1.1.1"" name=""id-1.5.8.27.21.2.4.1.1.1.1"">
        </a>
        <code class=""function"">
         rank
        </code>
        (
        <em class=""replaceable"">
         <code>
          args
         </code>
        </em>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <em class=""replaceable"">
         <code>
          sorted_args
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the rank of the hypothetical row, with gaps; that is, the row number of the first row in its peer group.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.21.2.4.2.1.1.1"" name=""id-1.5.8.27.21.2.4.2.1.1.1"">
        </a>
        <code class=""function"">
         dense_rank
        </code>
        (
        <em class=""replaceable"">
         <code>
          args
         </code>
        </em>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <em class=""replaceable"">
         <code>
          sorted_args
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Computes the rank of the hypothetical row, without gaps; this function effectively counts peer groups.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.21.2.4.3.1.1.1"" name=""id-1.5.8.27.21.2.4.3.1.1.1"">
        </a>
        <code class=""function"">
         percent_rank
        </code>
        (
        <em class=""replaceable"">
         <code>
          args
         </code>
        </em>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <em class=""replaceable"">
         <code>
          sorted_args
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the relative rank of the hypothetical row, that is (
        <code class=""function"">
         rank
        </code>
        - 1) / (total rows - 1). The value thus ranges from 0 to 1 inclusive.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.21.2.4.4.1.1.1"" name=""id-1.5.8.27.21.2.4.4.1.1.1"">
        </a>
        <code class=""function"">
         cume_dist
        </code>
        (
        <em class=""replaceable"">
         <code>
          args
         </code>
        </em>
        )
        <code class=""literal"">
         WITHIN GROUP
        </code>
        (
        <code class=""literal"">
         ORDER BY
        </code>
        <em class=""replaceable"">
         <code>
          sorted_args
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Computes the cumulative distribution, that is (number of rows preceding or peers with hypothetical row) / (total rows). The value thus ranges from 1/
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        to 1.
       </p>
      </td>
      <td>
       No
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""table"" id=""FUNCTIONS-GROUPING-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.64. Grouping Operations
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Grouping Operations"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.27.22.2.2.1.1.1.1"" name=""id-1.5.8.27.22.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         GROUPING
        </code>
        (
        <em class=""replaceable"">
         <code>
          group_by_expression(s)
         </code>
        </em>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns a bit mask indicating which
        <code class=""literal"">
         GROUP BY
        </code>
        expressions are not included in the current grouping set. Bits are assigned with the rightmost argument corresponding to the least-significant bit; each bit is 0 if the corresponding expression is included in the grouping criteria of the grouping set generating the current result row, and 1 if it is not included.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The grouping operations shown in
  <a class=""xref"" href=""functions-aggregate.html#FUNCTIONS-GROUPING-TABLE"" title=""Table 9.64. Grouping Operations"">
   Table 9.64
  </a>
  are used in conjunction with grouping sets (see
  <a class=""xref"" href=""queries-table-expressions.html#QUERIES-GROUPING-SETS"" title=""7.2.4. GROUPING SETS, CUBE, and ROLLUP"">
   Section 7.2.4
  </a>
  ) to distinguish result rows. The arguments to the
  <code class=""literal"">
   GROUPING
  </code>
  function are not actually evaluated, but they must exactly match expressions given in the
  <code class=""literal"">
   GROUP BY
  </code>
  clause of the associated query level. For example:
 </p>
 <pre class=""screen"">
<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT * FROM items_sold;</code></strong>
 make  | model | sales
-------+-------+-------
 Foo   | GT    |  10
 Foo   | Tour  |  20
 Bar   | City  |  15
 Bar   | Sport |  5
(4 rows)

<code class=""prompt"">=&gt;</code> <strong class=""userinput""><code>SELECT make, model, GROUPING(make,model), sum(sales) FROM items_sold GROUP BY ROLLUP(make,model);</code></strong>
 make  | model | grouping | sum
-------+-------+----------+-----
 Foo   | GT    |        0 | 10
 Foo   | Tour  |        0 | 20
 Bar   | City  |        0 | 15
 Bar   | Sport |        0 | 5
 Foo   |       |        1 | 30
 Bar   |       |        1 | 20
       |       |        3 | 50
(7 rows)
</pre>
 <p>
  Here, the
  <code class=""literal"">
   grouping
  </code>
  value
  <code class=""literal"">
   0
  </code>
  in the first four rows shows that those have been grouped normally, over both the grouping columns. The value
  <code class=""literal"">
   1
  </code>
  indicates that
  <code class=""literal"">
   model
  </code>
  was not grouped by in the next-to-last two rows, and the value
  <code class=""literal"">
   3
  </code>
  indicates that neither
  <code class=""literal"">
   make
  </code>
  nor
  <code class=""literal"">
   model
  </code>
  was grouped by in the last row (which therefore is an aggregate over all the input rows).
 </p>
</div>
"
9. Functions and Operators,9.22. Window Functions,https://www.postgresql.org/docs/17/functions-window.html,"<div class=""sect1"" id=""FUNCTIONS-WINDOW"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.22. Window Functions
     <a class=""id_link"" href=""#FUNCTIONS-WINDOW"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.28.2"" name=""id-1.5.8.28.2"">
 </a>
 <p>
  <em class=""firstterm"">
   Window functions
  </em>
  provide the ability to perform calculations across sets of rows that are related to the current query row. See
  <a class=""xref"" href=""tutorial-window.html"" title=""3.5. Window Functions"">
   Section 3.5
  </a>
  for an introduction to this feature, and
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS"" title=""4.2.8. Window Function Calls"">
   Section 4.2.8
  </a>
  for syntax details.
 </p>
 <p>
  The built-in window functions are listed in
  <a class=""xref"" href=""functions-window.html#FUNCTIONS-WINDOW-TABLE"" title=""Table 9.65. General-Purpose Window Functions"">
   Table 9.65
  </a>
  . Note that these functions
  <span class=""emphasis"">
   <em>
    must
   </em>
  </span>
  be invoked using window function syntax, i.e., an
  <code class=""literal"">
   OVER
  </code>
  clause is required.
 </p>
 <p>
  In addition to these functions, any built-in or user-defined ordinary aggregate (i.e., not ordered-set or hypothetical-set aggregates) can be used as a window function; see
  <a class=""xref"" href=""functions-aggregate.html"" title=""9.21. Aggregate Functions"">
   Section 9.21
  </a>
  for a list of the built-in aggregates. Aggregate functions act as window functions only when an
  <code class=""literal"">
   OVER
  </code>
  clause follows the call; otherwise they act as plain aggregates and return a single row for the entire set.
 </p>
 <div class=""table"" id=""FUNCTIONS-WINDOW-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.65. General-Purpose Window Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""General-Purpose Window Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.1.1.1.1"" name=""id-1.5.8.28.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         row_number
        </code>
        () →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the number of the current row within its partition, counting from 1.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.2.1.1.1"" name=""id-1.5.8.28.6.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         rank
        </code>
        () →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the rank of the current row, with gaps; that is, the
        <code class=""function"">
         row_number
        </code>
        of the first row in its peer group.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.3.1.1.1"" name=""id-1.5.8.28.6.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         dense_rank
        </code>
        () →
        <code class=""returnvalue"">
         bigint
        </code>
       </p>
       <p>
        Returns the rank of the current row, without gaps; this function effectively counts peer groups.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.4.1.1.1"" name=""id-1.5.8.28.6.2.2.4.1.1.1"">
        </a>
        <code class=""function"">
         percent_rank
        </code>
        () →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Returns the relative rank of the current row, that is (
        <code class=""function"">
         rank
        </code>
        - 1) / (total partition rows - 1). The value thus ranges from 0 to 1 inclusive.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.5.1.1.1"" name=""id-1.5.8.28.6.2.2.5.1.1.1"">
        </a>
        <code class=""function"">
         cume_dist
        </code>
        () →
        <code class=""returnvalue"">
         double precision
        </code>
       </p>
       <p>
        Returns the cumulative distribution, that is (number of partition rows preceding or peers with current row) / (total partition rows). The value thus ranges from 1/
        <em class=""parameter"">
         <code>
          N
         </code>
        </em>
        to 1.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.6.1.1.1"" name=""id-1.5.8.28.6.2.2.6.1.1.1"">
        </a>
        <code class=""function"">
         ntile
        </code>
        (
        <em class=""parameter"">
         <code>
          num_buckets
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         integer
        </code>
       </p>
       <p>
        Returns an integer ranging from 1 to the argument value, dividing the partition as equally as possible.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.7.1.1.1"" name=""id-1.5.8.28.6.2.2.7.1.1.1"">
        </a>
        <code class=""function"">
         lag
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anycompatible
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           offset
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            default
           </code>
          </em>
          <code class=""type"">
           anycompatible
          </code>
         </span>
         ]
        </span>
        ] ) →
        <code class=""returnvalue"">
         anycompatible
        </code>
       </p>
       <p>
        Returns
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        evaluated at the row that is
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        rows before the current row within the partition; if there is no such row, instead returns
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        (which must be of a type compatible with
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        ). Both
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        are evaluated with respect to the current row. If omitted,
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        defaults to 1 and
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        to
        <code class=""literal"">
         NULL
        </code>
        .
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.8.1.1.1"" name=""id-1.5.8.28.6.2.2.8.1.1.1"">
        </a>
        <code class=""function"">
         lead
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anycompatible
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           offset
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            default
           </code>
          </em>
          <code class=""type"">
           anycompatible
          </code>
         </span>
         ]
        </span>
        ] ) →
        <code class=""returnvalue"">
         anycompatible
        </code>
       </p>
       <p>
        Returns
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        evaluated at the row that is
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        rows after the current row within the partition; if there is no such row, instead returns
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        (which must be of a type compatible with
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        ). Both
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        and
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        are evaluated with respect to the current row. If omitted,
        <em class=""parameter"">
         <code>
          offset
         </code>
        </em>
        defaults to 1 and
        <em class=""parameter"">
         <code>
          default
         </code>
        </em>
        to
        <code class=""literal"">
         NULL
        </code>
        .
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.9.1.1.1"" name=""id-1.5.8.28.6.2.2.9.1.1.1"">
        </a>
        <code class=""function"">
         first_value
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Returns
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        evaluated at the row that is the first row of the window frame.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.10.1.1.1"" name=""id-1.5.8.28.6.2.2.10.1.1.1"">
        </a>
        <code class=""function"">
         last_value
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anyelement
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Returns
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        evaluated at the row that is the last row of the window frame.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.28.6.2.2.11.1.1.1"" name=""id-1.5.8.28.6.2.2.11.1.1.1"">
        </a>
        <code class=""function"">
         nth_value
        </code>
        (
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        <code class=""type"">
         anyelement
        </code>
        ,
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         anyelement
        </code>
       </p>
       <p>
        Returns
        <em class=""parameter"">
         <code>
          value
         </code>
        </em>
        evaluated at the row that is the
        <em class=""parameter"">
         <code>
          n
         </code>
        </em>
        'th row of the window frame (counting from 1); returns
        <code class=""literal"">
         NULL
        </code>
        if there is no such row.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  All of the functions listed in
  <a class=""xref"" href=""functions-window.html#FUNCTIONS-WINDOW-TABLE"" title=""Table 9.65. General-Purpose Window Functions"">
   Table 9.65
  </a>
  depend on the sort ordering specified by the
  <code class=""literal"">
   ORDER BY
  </code>
  clause of the associated window definition. Rows that are not distinct when considering only the
  <code class=""literal"">
   ORDER BY
  </code>
  columns are said to be
  <em class=""firstterm"">
   peers
  </em>
  . The four ranking functions (including
  <code class=""function"">
   cume_dist
  </code>
  ) are defined so that they give the same answer for all rows of a peer group.
 </p>
 <p>
  Note that
  <code class=""function"">
   first_value
  </code>
  ,
  <code class=""function"">
   last_value
  </code>
  , and
  <code class=""function"">
   nth_value
  </code>
  consider only the rows within the
  <span class=""quote"">
   “
   <span class=""quote"">
    window frame
   </span>
   ”
  </span>
  , which by default contains the rows from the start of the partition through the last peer of the current row. This is likely to give unhelpful results for
  <code class=""function"">
   last_value
  </code>
  and sometimes also
  <code class=""function"">
   nth_value
  </code>
  . You can redefine the frame by adding a suitable frame specification (
  <code class=""literal"">
   RANGE
  </code>
  ,
  <code class=""literal"">
   ROWS
  </code>
  or
  <code class=""literal"">
   GROUPS
  </code>
  ) to the
  <code class=""literal"">
   OVER
  </code>
  clause. See
  <a class=""xref"" href=""sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS"" title=""4.2.8. Window Function Calls"">
   Section 4.2.8
  </a>
  for more information about frame specifications.
 </p>
 <p>
  When an aggregate function is used as a window function, it aggregates over the rows within the current row's window frame. An aggregate used with
  <code class=""literal"">
   ORDER BY
  </code>
  and the default window frame definition produces a
  <span class=""quote"">
   “
   <span class=""quote"">
    running sum
   </span>
   ”
  </span>
  type of behavior, which may or may not be what's wanted. To obtain aggregation over the whole partition, omit
  <code class=""literal"">
   ORDER BY
  </code>
  or use
  <code class=""literal"">
   ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
  </code>
  . Other frame specifications can be used to obtain other effects.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   The SQL standard defines a
   <code class=""literal"">
    RESPECT NULLS
   </code>
   or
   <code class=""literal"">
    IGNORE NULLS
   </code>
   option for
   <code class=""function"">
    lead
   </code>
   ,
   <code class=""function"">
    lag
   </code>
   ,
   <code class=""function"">
    first_value
   </code>
   ,
   <code class=""function"">
    last_value
   </code>
   , and
   <code class=""function"">
    nth_value
   </code>
   . This is not implemented in
   <span class=""productname"">
    PostgreSQL
   </span>
   : the behavior is always the same as the standard's default, namely
   <code class=""literal"">
    RESPECT NULLS
   </code>
   . Likewise, the standard's
   <code class=""literal"">
    FROM FIRST
   </code>
   or
   <code class=""literal"">
    FROM LAST
   </code>
   option for
   <code class=""function"">
    nth_value
   </code>
   is not implemented: only the default
   <code class=""literal"">
    FROM FIRST
   </code>
   behavior is supported. (You can achieve the result of
   <code class=""literal"">
    FROM LAST
   </code>
   by reversing the
   <code class=""literal"">
    ORDER BY
   </code>
   ordering.)
  </p>
 </div>
</div>
"
9. Functions and Operators,9.23. Merge Support Functions,https://www.postgresql.org/docs/17/functions-merge-support.html,"<div class=""sect1"" id=""FUNCTIONS-MERGE-SUPPORT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.23. Merge Support Functions
     <a class=""id_link"" href=""#FUNCTIONS-MERGE-SUPPORT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.29.2"" name=""id-1.5.8.29.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  includes one merge support function that may be used in the
  <code class=""literal"">
   RETURNING
  </code>
  list of a
  <a class=""xref"" href=""sql-merge.html"" title=""MERGE"">
   <span class=""refentrytitle"">
    MERGE
   </span>
  </a>
  command to identify the action taken for each row; see
  <a class=""xref"" href=""functions-merge-support.html#FUNCTIONS-MERGE-SUPPORT-TABLE"" title=""Table 9.66. Merge Support Functions"">
   Table 9.66
  </a>
  .
 </p>
 <div class=""table"" id=""FUNCTIONS-MERGE-SUPPORT-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.66. Merge Support Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Merge Support Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"" id=""MERGE-ACTION"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.29.4.2.2.1.1.1.1"" name=""id-1.5.8.29.4.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         merge_action
        </code>
        ( ) →
        <code class=""returnvalue"">
         text
        </code>
       </p>
       <p>
        Returns the merge action command executed for the current row. This will be
        <code class=""literal"">
         'INSERT'
        </code>
        ,
        <code class=""literal"">
         'UPDATE'
        </code>
        , or
        <code class=""literal"">
         'DELETE'
        </code>
        .
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  Example:
 </p>
 <pre class=""screen"">
MERGE INTO products p
  USING stock s ON p.product_id = s.product_id
  WHEN MATCHED AND s.quantity &gt; 0 THEN
    UPDATE SET in_stock = true, quantity = s.quantity
  WHEN MATCHED THEN
    UPDATE SET in_stock = false, quantity = 0
  WHEN NOT MATCHED THEN
    INSERT (product_id, in_stock, quantity)
      VALUES (s.product_id, true, s.quantity)
  RETURNING merge_action(), p.*;

 merge_action | product_id | in_stock | quantity
--------------+------------+----------+----------
 UPDATE       |       1001 | t        |       50
 UPDATE       |       1002 | f        |        0
 INSERT       |       1003 | t        |       10
</pre>
 <p>
  Note that this function can only be used in the
  <code class=""literal"">
   RETURNING
  </code>
  list of a
  <code class=""command"">
   MERGE
  </code>
  command. It is an error to use it in any other part of a query.
 </p>
</div>
"
9. Functions and Operators,9.24. Subquery Expressions,https://www.postgresql.org/docs/17/functions-subquery.html,"<div class=""sect1"" id=""FUNCTIONS-SUBQUERY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.24. Subquery Expressions
     <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-EXISTS"">
      9.24.1.
      <code class=""literal"">
       EXISTS
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-IN"">
      9.24.2.
      <code class=""literal"">
       IN
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-NOTIN"">
      9.24.3.
      <code class=""literal"">
       NOT IN
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-ANY-SOME"">
      9.24.4.
      <code class=""literal"">
       ANY
      </code>
      /
      <code class=""literal"">
       SOME
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-ALL"">
      9.24.5.
      <code class=""literal"">
       ALL
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-subquery.html#FUNCTIONS-SUBQUERY-SINGLE-ROW-COMP"">
      9.24.6. Single-Row Comparison
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.30.2"" name=""id-1.5.8.30.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.3"" name=""id-1.5.8.30.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.4"" name=""id-1.5.8.30.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.5"" name=""id-1.5.8.30.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.6"" name=""id-1.5.8.30.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.7"" name=""id-1.5.8.30.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.30.8"" name=""id-1.5.8.30.8"">
 </a>
 <p>
  This section describes the
  <acronym class=""acronym"">
   SQL
  </acronym>
  -compliant subquery expressions available in
  <span class=""productname"">
   PostgreSQL
  </span>
  . All of the expression forms documented in this section return Boolean (true/false) results.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-EXISTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.1.
      <code class=""literal"">
       EXISTS
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-EXISTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
EXISTS (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The argument of
   <code class=""token"">
    EXISTS
   </code>
   is an arbitrary
   <code class=""command"">
    SELECT
   </code>
   statement, or
   <em class=""firstterm"">
    subquery
   </em>
   . The subquery is evaluated to determine whether it returns any rows. If it returns at least one row, the result of
   <code class=""token"">
    EXISTS
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   ; if the subquery returns no rows, the result of
   <code class=""token"">
    EXISTS
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   .
  </p>
  <p>
   The subquery can refer to variables from the surrounding query, which will act as constants during any one evaluation of the subquery.
  </p>
  <p>
   The subquery will generally only be executed long enough to determine whether at least one row is returned, not all the way to completion. It is unwise to write a subquery that has side effects (such as calling sequence functions); whether the side effects occur might be unpredictable.
  </p>
  <p>
   Since the result depends only on whether any rows are returned, and not on the contents of those rows, the output list of the subquery is normally unimportant. A common coding convention is to write all
   <code class=""literal"">
    EXISTS
   </code>
   tests in the form
   <code class=""literal"">
    EXISTS(SELECT 1 WHERE ...)
   </code>
   . There are exceptions to this rule however, such as subqueries that use
   <code class=""token"">
    INTERSECT
   </code>
   .
  </p>
  <p>
   This simple example is like an inner join on
   <code class=""literal"">
    col2
   </code>
   , but it produces at most one output row for each
   <code class=""literal"">
    tab1
   </code>
   row, even if there are several matching
   <code class=""literal"">
    tab2
   </code>
   rows:
  </p>
  <pre class=""screen"">
SELECT col1
FROM tab1
WHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-IN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.2.
      <code class=""literal"">
       IN
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-IN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> IN (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result. The result of
   <code class=""token"">
    IN
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if any equal subquery row is found. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if no equal row is found (including the case where the subquery returns no rows).
  </p>
  <p>
   Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand row yields null, the result of the
   <code class=""token"">
    IN
   </code>
   construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
  <p>
   As with
   <code class=""token"">
    EXISTS
   </code>
   , it's unwise to assume that the subquery will be evaluated completely.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> IN (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The left-hand side of this form of
   <code class=""token"">
    IN
   </code>
   is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result. The result of
   <code class=""token"">
    IN
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if any equal subquery row is found. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if no equal row is found (including the case where the subquery returns no rows).
  </p>
  <p>
   As usual, null values in the rows are combined per the normal rules of SQL Boolean expressions. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of that row comparison is unknown (null). If all the per-row results are either unequal or null, with at least one null, then the result of
   <code class=""token"">
    IN
   </code>
   is null.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-NOTIN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.3.
      <code class=""literal"">
       NOT IN
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-NOTIN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> NOT IN (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result. The result of
   <code class=""token"">
    NOT IN
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if only unequal subquery rows are found (including the case where the subquery returns no rows). The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if any equal row is found.
  </p>
  <p>
   Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand row yields null, the result of the
   <code class=""token"">
    NOT IN
   </code>
   construct will be null, not true. This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
  <p>
   As with
   <code class=""token"">
    EXISTS
   </code>
   , it's unwise to assume that the subquery will be evaluated completely.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> NOT IN (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The left-hand side of this form of
   <code class=""token"">
    NOT IN
   </code>
   is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result. The result of
   <code class=""token"">
    NOT IN
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if only unequal subquery rows are found (including the case where the subquery returns no rows). The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if any equal row is found.
  </p>
  <p>
   As usual, null values in the rows are combined per the normal rules of SQL Boolean expressions. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of that row comparison is unknown (null). If all the per-row results are either unequal or null, with at least one null, then the result of
   <code class=""token"">
    NOT IN
   </code>
   is null.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-ANY-SOME"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.4.
      <code class=""literal"">
       ANY
      </code>
      /
      <code class=""literal"">
       SOME
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-ANY-SOME"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> ANY (<em class=""replaceable""><code>subquery</code></em>)
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> SOME (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   , which must yield a Boolean result. The result of
   <code class=""token"">
    ANY
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if any true result is obtained. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if no true result is found (including the case where the subquery returns no rows).
  </p>
  <p>
   <code class=""token"">
    SOME
   </code>
   is a synonym for
   <code class=""token"">
    ANY
   </code>
   .
   <code class=""token"">
    IN
   </code>
   is equivalent to
   <code class=""literal"">
    = ANY
   </code>
   .
  </p>
  <p>
   Note that if there are no successes and at least one right-hand row yields null for the operator's result, the result of the
   <code class=""token"">
    ANY
   </code>
   construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
  <p>
   As with
   <code class=""token"">
    EXISTS
   </code>
   , it's unwise to assume that the subquery will be evaluated completely.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> <em class=""replaceable""><code>operator</code></em> ANY (<em class=""replaceable""><code>subquery</code></em>)
<em class=""replaceable""><code>row_constructor</code></em> <em class=""replaceable""><code>operator</code></em> SOME (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The left-hand side of this form of
   <code class=""token"">
    ANY
   </code>
   is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result, using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   . The result of
   <code class=""token"">
    ANY
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if the comparison returns true for any subquery row. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if the comparison returns false for every subquery row (including the case where the subquery returns no rows). The result is NULL if no comparison with a subquery row returns true, and at least one comparison returns NULL.
  </p>
  <p>
   See
   <a class=""xref"" href=""functions-comparisons.html#ROW-WISE-COMPARISON"" title=""9.25.5. Row Constructor Comparison"">
    Section 9.25.5
   </a>
   for details about the meaning of a row constructor comparison.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-ALL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.5.
      <code class=""literal"">
       ALL
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-ALL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> ALL (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   , which must yield a Boolean result. The result of
   <code class=""token"">
    ALL
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if all rows yield true (including the case where the subquery returns no rows). The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if any false result is found. The result is NULL if no comparison with a subquery row returns false, and at least one comparison returns NULL.
  </p>
  <p>
   <code class=""token"">
    NOT IN
   </code>
   is equivalent to
   <code class=""literal"">
    &lt;&gt; ALL
   </code>
   .
  </p>
  <p>
   As with
   <code class=""token"">
    EXISTS
   </code>
   , it's unwise to assume that the subquery will be evaluated completely.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> <em class=""replaceable""><code>operator</code></em> ALL (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The left-hand side of this form of
   <code class=""token"">
    ALL
   </code>
   is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result, using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   . The result of
   <code class=""token"">
    ALL
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if the comparison returns true for all subquery rows (including the case where the subquery returns no rows). The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if the comparison returns false for any subquery row. The result is NULL if no comparison with a subquery row returns false, and at least one comparison returns NULL.
  </p>
  <p>
   See
   <a class=""xref"" href=""functions-comparisons.html#ROW-WISE-COMPARISON"" title=""9.25.5. Row Constructor Comparison"">
    Section 9.25.5
   </a>
   for details about the meaning of a row constructor comparison.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SUBQUERY-SINGLE-ROW-COMP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.24.6. Single-Row Comparison
      <a class=""id_link"" href=""#FUNCTIONS-SUBQUERY-SINGLE-ROW-COMP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.30.15.2"" name=""id-1.5.8.30.15.2"">
  </a>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> <em class=""replaceable""><code>operator</code></em> (<em class=""replaceable""><code>subquery</code></em>)
</pre>
  <p>
   The left-hand side is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. Furthermore, the subquery cannot return more than one row. (If it returns zero rows, the result is taken to be null.) The left-hand side is evaluated and compared row-wise to the single subquery result row.
  </p>
  <p>
   See
   <a class=""xref"" href=""functions-comparisons.html#ROW-WISE-COMPARISON"" title=""9.25.5. Row Constructor Comparison"">
    Section 9.25.5
   </a>
   for details about the meaning of a row constructor comparison.
  </p>
 </div>
</div>
"
9. Functions and Operators,9.25. Row and Array Comparisons,https://www.postgresql.org/docs/17/functions-comparisons.html,"<div class=""sect1"" id=""FUNCTIONS-COMPARISONS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.25. Row and Array Comparisons
     <a class=""id_link"" href=""#FUNCTIONS-COMPARISONS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#FUNCTIONS-COMPARISONS-IN-SCALAR"">
      9.25.1.
      <code class=""literal"">
       IN
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#FUNCTIONS-COMPARISONS-NOT-IN"">
      9.25.2.
      <code class=""literal"">
       NOT IN
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#FUNCTIONS-COMPARISONS-ANY-SOME"">
      9.25.3.
      <code class=""literal"">
       ANY
      </code>
      /
      <code class=""literal"">
       SOME
      </code>
      (array)
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#FUNCTIONS-COMPARISONS-ALL"">
      9.25.4.
      <code class=""literal"">
       ALL
      </code>
      (array)
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#ROW-WISE-COMPARISON"">
      9.25.5. Row Constructor Comparison
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-comparisons.html#COMPOSITE-TYPE-COMPARISON"">
      9.25.6. Composite Type Comparison
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.31.2"" name=""id-1.5.8.31.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.3"" name=""id-1.5.8.31.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.4"" name=""id-1.5.8.31.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.5"" name=""id-1.5.8.31.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.6"" name=""id-1.5.8.31.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.7"" name=""id-1.5.8.31.7"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.8"" name=""id-1.5.8.31.8"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.9"" name=""id-1.5.8.31.9"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.10"" name=""id-1.5.8.31.10"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.11"" name=""id-1.5.8.31.11"">
 </a>
 <a class=""indexterm"" id=""id-1.5.8.31.12"" name=""id-1.5.8.31.12"">
 </a>
 <p>
  This section describes several specialized constructs for making multiple comparisons between groups of values. These forms are syntactically related to the subquery forms of the previous section, but do not involve subqueries. The forms involving array subexpressions are
  <span class=""productname"">
   PostgreSQL
  </span>
  extensions; the rest are
  <acronym class=""acronym"">
   SQL
  </acronym>
  -compliant. All of the expression forms documented in this section return Boolean (true/false) results.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-COMPARISONS-IN-SCALAR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.1.
      <code class=""literal"">
       IN
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-COMPARISONS-IN-SCALAR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> IN (<em class=""replaceable""><code>value</code></em> [<span class=""optional"">, ...</span>])
</pre>
  <p>
   The right-hand side is a parenthesized list of expressions. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if the left-hand expression's result is equal to any of the right-hand expressions. This is a shorthand notation for
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> = <em class=""replaceable""><code>value1</code></em>
OR
<em class=""replaceable""><code>expression</code></em> = <em class=""replaceable""><code>value2</code></em>
OR
...
</pre>
  <p>
   Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand expression yields null, the result of the
   <code class=""token"">
    IN
   </code>
   construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-COMPARISONS-NOT-IN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.2.
      <code class=""literal"">
       NOT IN
      </code>
      <a class=""id_link"" href=""#FUNCTIONS-COMPARISONS-NOT-IN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> NOT IN (<em class=""replaceable""><code>value</code></em> [<span class=""optional"">, ...</span>])
</pre>
  <p>
   The right-hand side is a parenthesized list of expressions. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if the left-hand expression's result is unequal to all of the right-hand expressions. This is a shorthand notation for
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> &lt;&gt; <em class=""replaceable""><code>value1</code></em>
AND
<em class=""replaceable""><code>expression</code></em> &lt;&gt; <em class=""replaceable""><code>value2</code></em>
AND
...
</pre>
  <p>
   Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand expression yields null, the result of the
   <code class=""token"">
    NOT IN
   </code>
   construct will be null, not true as one might naively expect. This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    <code class=""literal"">
     x NOT IN y
    </code>
    is equivalent to
    <code class=""literal"">
     NOT (x IN y)
    </code>
    in all cases. However, null values are much more likely to trip up the novice when working with
    <code class=""token"">
     NOT IN
    </code>
    than when working with
    <code class=""token"">
     IN
    </code>
    . It is best to express your condition positively if possible.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-COMPARISONS-ANY-SOME"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.3.
      <code class=""literal"">
       ANY
      </code>
      /
      <code class=""literal"">
       SOME
      </code>
      (array)
      <a class=""id_link"" href=""#FUNCTIONS-COMPARISONS-ANY-SOME"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> ANY (<em class=""replaceable""><code>array expression</code></em>)
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> SOME (<em class=""replaceable""><code>array expression</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized expression, which must yield an array value. The left-hand expression is evaluated and compared to each element of the array using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   , which must yield a Boolean result. The result of
   <code class=""token"">
    ANY
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if any true result is obtained. The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if no true result is found (including the case where the array has zero elements).
  </p>
  <p>
   If the array expression yields a null array, the result of
   <code class=""token"">
    ANY
   </code>
   will be null. If the left-hand expression yields null, the result of
   <code class=""token"">
    ANY
   </code>
   is ordinarily null (though a non-strict comparison operator could possibly yield a different result). Also, if the right-hand array contains any null elements and no true comparison result is obtained, the result of
   <code class=""token"">
    ANY
   </code>
   will be null, not false (again, assuming a strict comparison operator). This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
  <p>
   <code class=""token"">
    SOME
   </code>
   is a synonym for
   <code class=""token"">
    ANY
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-COMPARISONS-ALL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.4.
      <code class=""literal"">
       ALL
      </code>
      (array)
      <a class=""id_link"" href=""#FUNCTIONS-COMPARISONS-ALL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>expression</code></em> <em class=""replaceable""><code>operator</code></em> ALL (<em class=""replaceable""><code>array expression</code></em>)
</pre>
  <p>
   The right-hand side is a parenthesized expression, which must yield an array value. The left-hand expression is evaluated and compared to each element of the array using the given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   , which must yield a Boolean result. The result of
   <code class=""token"">
    ALL
   </code>
   is
   <span class=""quote"">
    “
    <span class=""quote"">
     true
    </span>
    ”
   </span>
   if all comparisons yield true (including the case where the array has zero elements). The result is
   <span class=""quote"">
    “
    <span class=""quote"">
     false
    </span>
    ”
   </span>
   if any false result is found.
  </p>
  <p>
   If the array expression yields a null array, the result of
   <code class=""token"">
    ALL
   </code>
   will be null. If the left-hand expression yields null, the result of
   <code class=""token"">
    ALL
   </code>
   is ordinarily null (though a non-strict comparison operator could possibly yield a different result). Also, if the right-hand array contains any null elements and no false comparison result is obtained, the result of
   <code class=""token"">
    ALL
   </code>
   will be null, not true (again, assuming a strict comparison operator). This is in accordance with SQL's normal rules for Boolean combinations of null values.
  </p>
 </div>
 <div class=""sect2"" id=""ROW-WISE-COMPARISON"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.5. Row Constructor Comparison
      <a class=""id_link"" href=""#ROW-WISE-COMPARISON"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> <em class=""replaceable""><code>operator</code></em> <em class=""replaceable""><code>row_constructor</code></em>
</pre>
  <p>
   Each side is a row constructor, as described in
   <a class=""xref"" href=""sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS"" title=""4.2.13. Row Constructors"">
    Section 4.2.13
   </a>
   . The two row constructors must have the same number of fields. The given
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   is applied to each pair of corresponding fields. (Since the fields could be of different types, this means that a different specific operator could be selected for each pair.) All the selected operators must be members of some B-tree operator class, or be the negator of an
   <code class=""literal"">
    =
   </code>
   member of a B-tree operator class, meaning that row constructor comparison is only possible when the
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   is
   <code class=""literal"">
    =
   </code>
   ,
   <code class=""literal"">
    &lt;&gt;
   </code>
   ,
   <code class=""literal"">
    &lt;
   </code>
   ,
   <code class=""literal"">
    &lt;=
   </code>
   ,
   <code class=""literal"">
    &gt;
   </code>
   , or
   <code class=""literal"">
    &gt;=
   </code>
   , or has semantics similar to one of these.
  </p>
  <p>
   The
   <code class=""literal"">
    =
   </code>
   and
   <code class=""literal"">
    &lt;&gt;
   </code>
   cases work slightly differently from the others. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of the row comparison is unknown (null).
  </p>
  <p>
   For the
   <code class=""literal"">
    &lt;
   </code>
   ,
   <code class=""literal"">
    &lt;=
   </code>
   ,
   <code class=""literal"">
    &gt;
   </code>
   and
   <code class=""literal"">
    &gt;=
   </code>
   cases, the row elements are compared left-to-right, stopping as soon as an unequal or null pair of elements is found. If either of this pair of elements is null, the result of the row comparison is unknown (null); otherwise comparison of this pair of elements determines the result. For example,
   <code class=""literal"">
    ROW(1,2,NULL) &lt; ROW(1,3,0)
   </code>
   yields true, not null, because the third pair of elements are not considered.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> IS DISTINCT FROM <em class=""replaceable""><code>row_constructor</code></em>
</pre>
  <p>
   This construct is similar to a
   <code class=""literal"">
    &lt;&gt;
   </code>
   row comparison, but it does not yield null for null inputs. Instead, any null value is considered unequal to (distinct from) any non-null value, and any two nulls are considered equal (not distinct). Thus the result will either be true or false, never null.
  </p>
  <pre class=""synopsis"">
<em class=""replaceable""><code>row_constructor</code></em> IS NOT DISTINCT FROM <em class=""replaceable""><code>row_constructor</code></em>
</pre>
  <p>
   This construct is similar to a
   <code class=""literal"">
    =
   </code>
   row comparison, but it does not yield null for null inputs. Instead, any null value is considered unequal to (distinct from) any non-null value, and any two nulls are considered equal (not distinct). Thus the result will always be either true or false, never null.
  </p>
 </div>
 <div class=""sect2"" id=""COMPOSITE-TYPE-COMPARISON"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.25.6. Composite Type Comparison
      <a class=""id_link"" href=""#COMPOSITE-TYPE-COMPARISON"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <pre class=""synopsis"">
<em class=""replaceable""><code>record</code></em> <em class=""replaceable""><code>operator</code></em> <em class=""replaceable""><code>record</code></em>
</pre>
  <p>
   The SQL specification requires row-wise comparison to return NULL if the result depends on comparing two NULL values or a NULL and a non-NULL.
   <span class=""productname"">
    PostgreSQL
   </span>
   does this only when comparing the results of two row constructors (as in
   <a class=""xref"" href=""functions-comparisons.html#ROW-WISE-COMPARISON"" title=""9.25.5. Row Constructor Comparison"">
    Section 9.25.5
   </a>
   ) or comparing a row constructor to the output of a subquery (as in
   <a class=""xref"" href=""functions-subquery.html"" title=""9.24. Subquery Expressions"">
    Section 9.24
   </a>
   ). In other contexts where two composite-type values are compared, two NULL field values are considered equal, and a NULL is considered larger than a non-NULL. This is necessary in order to have consistent sorting and indexing behavior for composite types.
  </p>
  <p>
   Each side is evaluated and they are compared row-wise. Composite type comparisons are allowed when the
   <em class=""replaceable"">
    <code>
     operator
    </code>
   </em>
   is
   <code class=""literal"">
    =
   </code>
   ,
   <code class=""literal"">
    &lt;&gt;
   </code>
   ,
   <code class=""literal"">
    &lt;
   </code>
   ,
   <code class=""literal"">
    &lt;=
   </code>
   ,
   <code class=""literal"">
    &gt;
   </code>
   or
   <code class=""literal"">
    &gt;=
   </code>
   , or has semantics similar to one of these. (To be specific, an operator can be a row comparison operator if it is a member of a B-tree operator class, or is the negator of the
   <code class=""literal"">
    =
   </code>
   member of a B-tree operator class.) The default behavior of the above operators is the same as for
   <code class=""literal"">
    IS [ NOT ] DISTINCT FROM
   </code>
   for row constructors (see
   <a class=""xref"" href=""functions-comparisons.html#ROW-WISE-COMPARISON"" title=""9.25.5. Row Constructor Comparison"">
    Section 9.25.5
   </a>
   ).
  </p>
  <p>
   To support matching of rows which include elements without a default B-tree operator class, the following operators are defined for composite type comparison:
   <code class=""literal"">
    *=
   </code>
   ,
   <code class=""literal"">
    *&lt;&gt;
   </code>
   ,
   <code class=""literal"">
    *&lt;
   </code>
   ,
   <code class=""literal"">
    *&lt;=
   </code>
   ,
   <code class=""literal"">
    *&gt;
   </code>
   , and
   <code class=""literal"">
    *&gt;=
   </code>
   . These operators compare the internal binary representation of the two rows. Two rows might have a different binary representation even though comparisons of the two rows with the equality operator is true. The ordering of rows under these comparison operators is deterministic but not otherwise meaningful. These operators are used internally for materialized views and might be useful for other specialized purposes such as replication and B-Tree deduplication (see
   <a class=""xref"" href=""btree.html#BTREE-DEDUPLICATION"" title=""64.1.4.3. Deduplication"">
    Section 64.1.4.3
   </a>
   ). They are not intended to be generally useful for writing queries, though.
  </p>
 </div>
</div>
"
9. Functions and Operators,9.26. Set Returning Functions,https://www.postgresql.org/docs/17/functions-srf.html,"<div class=""sect1"" id=""FUNCTIONS-SRF"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.26. Set Returning Functions
     <a class=""id_link"" href=""#FUNCTIONS-SRF"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.32.2"" name=""id-1.5.8.32.2"">
 </a>
 <p>
  This section describes functions that possibly return more than one row. The most widely used functions in this class are series generating functions, as detailed in
  <a class=""xref"" href=""functions-srf.html#FUNCTIONS-SRF-SERIES"" title=""Table 9.67. Series Generating Functions"">
   Table 9.67
  </a>
  and
  <a class=""xref"" href=""functions-srf.html#FUNCTIONS-SRF-SUBSCRIPTS"" title=""Table 9.68. Subscript Generating Functions"">
   Table 9.68
  </a>
  . Other, more specialized set-returning functions are described elsewhere in this manual. See
  <a class=""xref"" href=""queries-table-expressions.html#QUERIES-TABLEFUNCTIONS"" title=""7.2.1.4. Table Functions"">
   Section 7.2.1.4
  </a>
  for ways to combine multiple set-returning functions.
 </p>
 <div class=""table"" id=""FUNCTIONS-SRF-SERIES"">
  <p class=""title"">
   <strong>
    Table 9.67. Series Generating Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Series Generating Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.32.4.2.2.1.1.1.1"" name=""id-1.5.8.32.4.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         generate_series
        </code>
        (
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           step
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof integer
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         generate_series
        </code>
        (
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        ,
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        <code class=""type"">
         bigint
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           step
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof bigint
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         generate_series
        </code>
        (
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        ,
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        <code class=""type"">
         numeric
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           step
          </code>
         </em>
         <code class=""type"">
          numeric
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof numeric
        </code>
       </p>
       <p>
        Generates a series of values from
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        to
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        , with a step size of
        <em class=""parameter"">
         <code>
          step
         </code>
        </em>
        .
        <em class=""parameter"">
         <code>
          step
         </code>
        </em>
        defaults to 1.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         generate_series
        </code>
        (
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         timestamp
        </code>
        ,
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        <code class=""type"">
         timestamp
        </code>
        ,
        <em class=""parameter"">
         <code>
          step
         </code>
        </em>
        <code class=""type"">
         interval
        </code>
        ) →
        <code class=""returnvalue"">
         setof timestamp
        </code>
       </p>
       <p class=""func_signature"">
        <code class=""function"">
         generate_series
        </code>
        (
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        <code class=""type"">
         timestamp with time zone
        </code>
        ,
        <em class=""parameter"">
         <code>
          step
         </code>
        </em>
        <code class=""type"">
         interval
        </code>
        [
        <span class=""optional"">
         ,
         <em class=""parameter"">
          <code>
           timezone
          </code>
         </em>
         <code class=""type"">
          text
         </code>
        </span>
        ] ) →
        <code class=""returnvalue"">
         setof timestamp with time zone
        </code>
       </p>
       <p>
        Generates a series of values from
        <em class=""parameter"">
         <code>
          start
         </code>
        </em>
        to
        <em class=""parameter"">
         <code>
          stop
         </code>
        </em>
        , with a step size of
        <em class=""parameter"">
         <code>
          step
         </code>
        </em>
        . In the timezone-aware form, times of day and daylight-savings adjustments are computed according to the time zone named by the
        <em class=""parameter"">
         <code>
          timezone
         </code>
        </em>
        argument, or the current
        <a class=""xref"" href=""runtime-config-client.html#GUC-TIMEZONE"">
         TimeZone
        </a>
        setting if that is omitted.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  When
  <em class=""parameter"">
   <code>
    step
   </code>
  </em>
  is positive, zero rows are returned if
  <em class=""parameter"">
   <code>
    start
   </code>
  </em>
  is greater than
  <em class=""parameter"">
   <code>
    stop
   </code>
  </em>
  . Conversely, when
  <em class=""parameter"">
   <code>
    step
   </code>
  </em>
  is negative, zero rows are returned if
  <em class=""parameter"">
   <code>
    start
   </code>
  </em>
  is less than
  <em class=""parameter"">
   <code>
    stop
   </code>
  </em>
  . Zero rows are also returned if any input is
  <code class=""literal"">
   NULL
  </code>
  . It is an error for
  <em class=""parameter"">
   <code>
    step
   </code>
  </em>
  to be zero. Some examples follow:
 </p>
 <pre class=""programlisting"">
SELECT * FROM generate_series(2,4);
 generate_series
-----------------
               2
               3
               4
(3 rows)

SELECT * FROM generate_series(5,1,-2);
 generate_series
-----------------
               5
               3
               1
(3 rows)

SELECT * FROM generate_series(4,3);
 generate_series
-----------------
(0 rows)

SELECT generate_series(1.1, 4, 1.3);
 generate_series
-----------------
             1.1
             2.4
             3.7
(3 rows)

-- this example relies on the date-plus-integer operator:
SELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);
   dates
------------
 2004-02-05
 2004-02-12
 2004-02-19
(3 rows)

SELECT * FROM generate_series('2008-03-01 00:00'::timestamp,
                              '2008-03-04 12:00', '10 hours');
   generate_series
---------------------
 2008-03-01 00:00:00
 2008-03-01 10:00:00
 2008-03-01 20:00:00
 2008-03-02 06:00:00
 2008-03-02 16:00:00
 2008-03-03 02:00:00
 2008-03-03 12:00:00
 2008-03-03 22:00:00
 2008-03-04 08:00:00
(9 rows)

-- this example assumes that TimeZone is set to UTC; note the DST transition:
SELECT * FROM generate_series('2001-10-22 00:00 -04:00'::timestamptz,
                              '2001-11-01 00:00 -05:00'::timestamptz,
                              '1 day'::interval, 'America/New_York');
    generate_series
------------------------
 2001-10-22 04:00:00+00
 2001-10-23 04:00:00+00
 2001-10-24 04:00:00+00
 2001-10-25 04:00:00+00
 2001-10-26 04:00:00+00
 2001-10-27 04:00:00+00
 2001-10-28 04:00:00+00
 2001-10-29 05:00:00+00
 2001-10-30 05:00:00+00
 2001-10-31 05:00:00+00
 2001-11-01 05:00:00+00
(11 rows)
</pre>
 <div class=""table"" id=""FUNCTIONS-SRF-SUBSCRIPTS"">
  <p class=""title"">
   <strong>
    Table 9.68. Subscript Generating Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Subscript Generating Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.32.6.2.2.1.1.1.1"" name=""id-1.5.8.32.6.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         generate_subscripts
        </code>
        (
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        <code class=""type"">
         anyarray
        </code>
        ,
        <em class=""parameter"">
         <code>
          dim
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ) →
        <code class=""returnvalue"">
         setof integer
        </code>
       </p>
       <p>
        Generates a series comprising the valid subscripts of the
        <em class=""parameter"">
         <code>
          dim
         </code>
        </em>
        'th dimension of the given array.
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <code class=""function"">
         generate_subscripts
        </code>
        (
        <em class=""parameter"">
         <code>
          array
         </code>
        </em>
        <code class=""type"">
         anyarray
        </code>
        ,
        <em class=""parameter"">
         <code>
          dim
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
        ,
        <em class=""parameter"">
         <code>
          reverse
         </code>
        </em>
        <code class=""type"">
         boolean
        </code>
        ) →
        <code class=""returnvalue"">
         setof integer
        </code>
       </p>
       <p>
        Generates a series comprising the valid subscripts of the
        <em class=""parameter"">
         <code>
          dim
         </code>
        </em>
        'th dimension of the given array. When
        <em class=""parameter"">
         <code>
          reverse
         </code>
        </em>
        is true, returns the series in reverse order.
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  <code class=""function"">
   generate_subscripts
  </code>
  is a convenience function that generates the set of valid subscripts for the specified dimension of the given array. Zero rows are returned for arrays that do not have the requested dimension, or if any input is
  <code class=""literal"">
   NULL
  </code>
  . Some examples follow:
 </p>
 <pre class=""programlisting"">
-- basic usage:
SELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;
 s
---
 1
 2
 3
 4
(4 rows)

-- presenting an array, the subscript and the subscripted
-- value requires a subquery:
SELECT * FROM arrays;
         a
--------------------
 {-1,-2}
 {100,200,300}
(2 rows)

SELECT a AS array, s AS subscript, a[s] AS value
FROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;
     array     | subscript | value
---------------+-----------+-------
 {-1,-2}       |         1 |    -1
 {-1,-2}       |         2 |    -2
 {100,200,300} |         1 |   100
 {100,200,300} |         2 |   200
 {100,200,300} |         3 |   300
(5 rows)

-- unnest a 2D array:
CREATE OR REPLACE FUNCTION unnest2(anyarray)
RETURNS SETOF anyelement AS $$
select $1[i][j]
   from generate_subscripts($1,1) g1(i),
        generate_subscripts($1,2) g2(j);
$$ LANGUAGE sql IMMUTABLE;
CREATE FUNCTION
SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);
 unnest2
---------
       1
       2
       3
       4
(4 rows)
</pre>
 <a class=""indexterm"" id=""id-1.5.8.32.8"" name=""id-1.5.8.32.8"">
 </a>
 <p>
  When a function in the
  <code class=""literal"">
   FROM
  </code>
  clause is suffixed by
  <code class=""literal"">
   WITH ORDINALITY
  </code>
  , a
  <code class=""type"">
   bigint
  </code>
  column is appended to the function's output column(s), which starts from 1 and increments by 1 for each row of the function's output. This is most useful in the case of set returning functions such as
  <code class=""function"">
   unnest()
  </code>
  .
 </p>
 <pre class=""programlisting"">
-- set returning function WITH ORDINALITY:
SELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);
       ls        | n
-----------------+----
 pg_serial       |  1
 pg_twophase     |  2
 postmaster.opts |  3
 pg_notify       |  4
 postgresql.conf |  5
 pg_tblspc       |  6
 logfile         |  7
 base            |  8
 postmaster.pid  |  9
 pg_ident.conf   | 10
 global          | 11
 pg_xact         | 12
 pg_snapshots    | 13
 pg_multixact    | 14
 PG_VERSION      | 15
 pg_wal          | 16
 pg_hba.conf     | 17
 pg_stat_tmp     | 18
 pg_subtrans     | 19
(19 rows)
</pre>
</div>
"
9. Functions and Operators,9.27. System Information Functions and Operators,https://www.postgresql.org/docs/17/functions-info.html,"<div class=""sect1"" id=""FUNCTIONS-INFO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.27. System Information Functions and Operators
     <a class=""id_link"" href=""#FUNCTIONS-INFO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-SESSION"">
      9.27.1. Session Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-ACCESS"">
      9.27.2. Access Privilege Inquiry Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-SCHEMA"">
      9.27.3. Schema Visibility Inquiry Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-CATALOG"">
      9.27.4. System Catalog Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-OBJECT"">
      9.27.5. Object Information and Addressing Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-COMMENT"">
      9.27.6. Comment Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-VALIDITY"">
      9.27.7. Data Validity Checking Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-SNAPSHOT"">
      9.27.8. Transaction ID and Snapshot Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-COMMIT-TIMESTAMP"">
      9.27.9. Committed Transaction Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-CONTROLDATA"">
      9.27.10. Control Data Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-VERSION"">
      9.27.11. Version Information Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-info.html#FUNCTIONS-INFO-WAL-SUMMARY"">
      9.27.12. WAL Summarization Information Functions
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  The functions described in this section are used to obtain various information about a
  <span class=""productname"">
   PostgreSQL
  </span>
  installation.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-INFO-SESSION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.1. Session Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-SESSION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-SESSION-TABLE"" title=""Table 9.69. Session Information Functions"">
    Table 9.69
   </a>
   shows several functions that extract session and system information.
  </p>
  <p>
   In addition to the functions listed in this section, there are a number of functions related to the statistics system that also provide system information. See
   <a class=""xref"" href=""monitoring-stats.html#MONITORING-STATS-FUNCTIONS"" title=""27.2.26. Statistics Functions"">
    Section 27.2.26
   </a>
   for more information.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-SESSION-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.69. Session Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Session Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.1.1.1.1"" name=""id-1.5.8.33.3.4.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          current_catalog
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.1.1.2.1"" name=""id-1.5.8.33.3.4.2.2.1.1.2.1"">
         </a>
         <code class=""function"">
          current_database
         </code>
         () →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Returns the name of the current database. (Databases are called
         <span class=""quote"">
          “
          <span class=""quote"">
           catalogs
          </span>
          ”
         </span>
         in the SQL standard, so
         <code class=""function"">
          current_catalog
         </code>
         is the standard's spelling.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.2.1.1.1"" name=""id-1.5.8.33.3.4.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          current_query
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the text of the currently executing query, as submitted by the client (which might contain more than one statement).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.3.1.1.1"" name=""id-1.5.8.33.3.4.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          current_role
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         This is equivalent to
         <code class=""function"">
          current_user
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.4.1.1.1"" name=""id-1.5.8.33.3.4.2.2.4.1.1.1"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.4.1.1.2"" name=""id-1.5.8.33.3.4.2.2.4.1.1.2"">
         </a>
         <code class=""function"">
          current_schema
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          current_schema
         </code>
         () →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Returns the name of the schema that is first in the search path (or a null value if the search path is empty). This is the schema that will be used for any tables or other named objects that are created without specifying a target schema.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.5.1.1.1"" name=""id-1.5.8.33.3.4.2.2.5.1.1.1"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.5.1.1.2"" name=""id-1.5.8.33.3.4.2.2.5.1.1.2"">
         </a>
         <code class=""function"">
          current_schemas
         </code>
         (
         <em class=""parameter"">
          <code>
           include_implicit
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ) →
         <code class=""returnvalue"">
          name[]
         </code>
        </p>
        <p>
         Returns an array of the names of all schemas presently in the effective search path, in their priority order. (Items in the current
         <a class=""xref"" href=""runtime-config-client.html#GUC-SEARCH-PATH"">
          search_path
         </a>
         setting that do not correspond to existing, searchable schemas are omitted.) If the Boolean argument is
         <code class=""literal"">
          true
         </code>
         , then implicitly-searched system schemas such as
         <code class=""literal"">
          pg_catalog
         </code>
         are included in the result.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.6.1.1.1"" name=""id-1.5.8.33.3.4.2.2.6.1.1.1"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.6.1.1.2"" name=""id-1.5.8.33.3.4.2.2.6.1.1.2"">
         </a>
         <code class=""function"">
          current_user
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Returns the user name of the current execution context.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.7.1.1.1"" name=""id-1.5.8.33.3.4.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          inet_client_addr
         </code>
         () →
         <code class=""returnvalue"">
          inet
         </code>
        </p>
        <p>
         Returns the IP address of the current client, or
         <code class=""literal"">
          NULL
         </code>
         if the current connection is via a Unix-domain socket.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.8.1.1.1"" name=""id-1.5.8.33.3.4.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          inet_client_port
         </code>
         () →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the IP port number of the current client, or
         <code class=""literal"">
          NULL
         </code>
         if the current connection is via a Unix-domain socket.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.9.1.1.1"" name=""id-1.5.8.33.3.4.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          inet_server_addr
         </code>
         () →
         <code class=""returnvalue"">
          inet
         </code>
        </p>
        <p>
         Returns the IP address on which the server accepted the current connection, or
         <code class=""literal"">
          NULL
         </code>
         if the current connection is via a Unix-domain socket.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.10.1.1.1"" name=""id-1.5.8.33.3.4.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          inet_server_port
         </code>
         () →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the IP port number on which the server accepted the current connection, or
         <code class=""literal"">
          NULL
         </code>
         if the current connection is via a Unix-domain socket.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.11.1.1.1"" name=""id-1.5.8.33.3.4.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_backend_pid
         </code>
         () →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the process ID of the server process attached to the current session.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.12.1.1.1"" name=""id-1.5.8.33.3.4.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          pg_blocking_pids
         </code>
         (
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          integer[]
         </code>
        </p>
        <p>
         Returns an array of the process ID(s) of the sessions that are blocking the server process with the specified process ID from acquiring a lock, or an empty array if there is no such server process or it is not blocked.
        </p>
        <p>
         One server process blocks another if it either holds a lock that conflicts with the blocked process's lock request (hard block), or is waiting for a lock that would conflict with the blocked process's lock request and is ahead of it in the wait queue (soft block). When using parallel queries the result always lists client-visible process IDs (that is,
         <code class=""function"">
          pg_backend_pid
         </code>
         results) even if the actual lock is held or awaited by a child worker process. As a result of that, there may be duplicated PIDs in the result. Also note that when a prepared transaction holds a conflicting lock, it will be represented by a zero process ID.
        </p>
        <p>
         Frequent calls to this function could have some impact on database performance, because it needs exclusive access to the lock manager's shared state for a short time.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.13.1.1.1"" name=""id-1.5.8.33.3.4.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          pg_conf_load_time
         </code>
         () →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Returns the time when the server configuration files were last loaded. If the current session was alive at the time, this will be the time when the session itself re-read the configuration files (so the reading will vary a little in different sessions). Otherwise it is the time when the postmaster process re-read the configuration files.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.14.1.1.1"" name=""id-1.5.8.33.3.4.2.2.14.1.1.1"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.14.1.1.2"" name=""id-1.5.8.33.3.4.2.2.14.1.1.2"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.14.1.1.3"" name=""id-1.5.8.33.3.4.2.2.14.1.1.3"">
         </a>
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.14.1.1.4"" name=""id-1.5.8.33.3.4.2.2.14.1.1.4"">
         </a>
         <code class=""function"">
          pg_current_logfile
         </code>
         ( [
         <span class=""optional"">
          <code class=""type"">
           text
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the path name of the log file currently in use by the logging collector. The path includes the
         <a class=""xref"" href=""runtime-config-logging.html#GUC-LOG-DIRECTORY"">
          log_directory
         </a>
         directory and the individual log file name. The result is
         <code class=""literal"">
          NULL
         </code>
         if the logging collector is disabled. When multiple log files exist, each in a different format,
         <code class=""function"">
          pg_current_logfile
         </code>
         without an argument returns the path of the file having the first format found in the ordered list:
         <code class=""literal"">
          stderr
         </code>
         ,
         <code class=""literal"">
          csvlog
         </code>
         ,
         <code class=""literal"">
          jsonlog
         </code>
         .
         <code class=""literal"">
          NULL
         </code>
         is returned if no log file has any of these formats. To request information about a specific log file format, supply either
         <code class=""literal"">
          csvlog
         </code>
         ,
         <code class=""literal"">
          jsonlog
         </code>
         or
         <code class=""literal"">
          stderr
         </code>
         as the value of the optional parameter. The result is
         <code class=""literal"">
          NULL
         </code>
         if the log format requested is not configured in
         <a class=""xref"" href=""runtime-config-logging.html#GUC-LOG-DESTINATION"">
          log_destination
         </a>
         . The result reflects the contents of the
         <code class=""filename"">
          current_logfiles
         </code>
         file.
        </p>
        <p>
         This function is restricted to superusers and roles with privileges of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.15.1.1.1"" name=""id-1.5.8.33.3.4.2.2.15.1.1.1"">
         </a>
         <code class=""function"">
          pg_my_temp_schema
         </code>
         () →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Returns the OID of the current session's temporary schema, or zero if it has none (because it has not created any temporary tables).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.16.1.1.1"" name=""id-1.5.8.33.3.4.2.2.16.1.1.1"">
         </a>
         <code class=""function"">
          pg_is_other_temp_schema
         </code>
         (
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns true if the given OID is the OID of another session's temporary schema. (This can be useful, for example, to exclude other sessions' temporary tables from a catalog display.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.17.1.1.1"" name=""id-1.5.8.33.3.4.2.2.17.1.1.1"">
         </a>
         <code class=""function"">
          pg_jit_available
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns true if a
         <acronym class=""acronym"">
          JIT
         </acronym>
         compiler extension is available (see
         <a class=""xref"" href=""jit.html"" title=""Chapter 30. Just-in-Time Compilation (JIT)"">
          Chapter 30
         </a>
         ) and the
         <a class=""xref"" href=""runtime-config-query.html#GUC-JIT"">
          jit
         </a>
         configuration parameter is set to
         <code class=""literal"">
          on
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.18.1.1.1"" name=""id-1.5.8.33.3.4.2.2.18.1.1.1"">
         </a>
         <code class=""function"">
          pg_listening_channels
         </code>
         () →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p>
         Returns the set of names of asynchronous notification channels that the current session is listening to.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.19.1.1.1"" name=""id-1.5.8.33.3.4.2.2.19.1.1.1"">
         </a>
         <code class=""function"">
          pg_notification_queue_usage
         </code>
         () →
         <code class=""returnvalue"">
          double precision
         </code>
        </p>
        <p>
         Returns the fraction (0–1) of the asynchronous notification queue's maximum size that is currently occupied by notifications that are waiting to be processed. See
         <a class=""xref"" href=""sql-listen.html"" title=""LISTEN"">
          <span class=""refentrytitle"">
           LISTEN
          </span>
         </a>
         and
         <a class=""xref"" href=""sql-notify.html"" title=""NOTIFY"">
          <span class=""refentrytitle"">
           NOTIFY
          </span>
         </a>
         for more information.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.20.1.1.1"" name=""id-1.5.8.33.3.4.2.2.20.1.1.1"">
         </a>
         <code class=""function"">
          pg_postmaster_start_time
         </code>
         () →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Returns the time when the server started.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.21.1.1.1"" name=""id-1.5.8.33.3.4.2.2.21.1.1.1"">
         </a>
         <code class=""function"">
          pg_safe_snapshot_blocking_pids
         </code>
         (
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          integer[]
         </code>
        </p>
        <p>
         Returns an array of the process ID(s) of the sessions that are blocking the server process with the specified process ID from acquiring a safe snapshot, or an empty array if there is no such server process or it is not blocked.
        </p>
        <p>
         A session running a
         <code class=""literal"">
          SERIALIZABLE
         </code>
         transaction blocks a
         <code class=""literal"">
          SERIALIZABLE READ ONLY DEFERRABLE
         </code>
         transaction from acquiring a snapshot until the latter determines that it is safe to avoid taking any predicate locks. See
         <a class=""xref"" href=""transaction-iso.html#XACT-SERIALIZABLE"" title=""13.2.3. Serializable Isolation Level"">
          Section 13.2.3
         </a>
         for more information about serializable and deferrable transactions.
        </p>
        <p>
         Frequent calls to this function could have some impact on database performance, because it needs access to the predicate lock manager's shared state for a short time.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.22.1.1.1"" name=""id-1.5.8.33.3.4.2.2.22.1.1.1"">
         </a>
         <code class=""function"">
          pg_trigger_depth
         </code>
         () →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the current nesting level of
         <span class=""productname"">
          PostgreSQL
         </span>
         triggers (0 if not called, directly or indirectly, from inside a trigger).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.23.1.1.1"" name=""id-1.5.8.33.3.4.2.2.23.1.1.1"">
         </a>
         <code class=""function"">
          session_user
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Returns the session user's name.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.24.1.1.1"" name=""id-1.5.8.33.3.4.2.2.24.1.1.1"">
         </a>
         <code class=""function"">
          system_user
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the authentication method and the identity (if any) that the user presented during the authentication cycle before they were assigned a database role. It is represented as
         <code class=""literal"">
          auth_method:identity
         </code>
         or
         <code class=""literal"">
          NULL
         </code>
         if the user has not been authenticated (for example if
         <a class=""link"" href=""auth-trust.html"" title=""20.4. Trust Authentication"">
          Trust authentication
         </a>
         has been used).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.3.4.2.2.25.1.1.1"" name=""id-1.5.8.33.3.4.2.2.25.1.1.1"">
         </a>
         <code class=""function"">
          user
         </code>
         →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         This is equivalent to
         <code class=""function"">
          current_user
         </code>
         .
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <code class=""function"">
     current_catalog
    </code>
    ,
    <code class=""function"">
     current_role
    </code>
    ,
    <code class=""function"">
     current_schema
    </code>
    ,
    <code class=""function"">
     current_user
    </code>
    ,
    <code class=""function"">
     session_user
    </code>
    , and
    <code class=""function"">
     user
    </code>
    have special syntactic status in
    <acronym class=""acronym"">
     SQL
    </acronym>
    : they must be called without trailing parentheses. In PostgreSQL, parentheses can optionally be used with
    <code class=""function"">
     current_schema
    </code>
    , but not with the others.
   </p>
  </div>
  <p>
   The
   <code class=""function"">
    session_user
   </code>
   is normally the user who initiated the current database connection; but superusers can change this setting with
   <a class=""xref"" href=""sql-set-session-authorization.html"" title=""SET SESSION AUTHORIZATION"">
    <span class=""refentrytitle"">
     SET SESSION AUTHORIZATION
    </span>
   </a>
   . The
   <code class=""function"">
    current_user
   </code>
   is the user identifier that is applicable for permission checking. Normally it is equal to the session user, but it can be changed with
   <a class=""xref"" href=""sql-set-role.html"" title=""SET ROLE"">
    <span class=""refentrytitle"">
     SET ROLE
    </span>
   </a>
   . It also changes during the execution of functions with the attribute
   <code class=""literal"">
    SECURITY DEFINER
   </code>
   . In Unix parlance, the session user is the
   <span class=""quote"">
    “
    <span class=""quote"">
     real user
    </span>
    ”
   </span>
   and the current user is the
   <span class=""quote"">
    “
    <span class=""quote"">
     effective user
    </span>
    ”
   </span>
   .
   <code class=""function"">
    current_role
   </code>
   and
   <code class=""function"">
    user
   </code>
   are synonyms for
   <code class=""function"">
    current_user
   </code>
   . (The SQL standard draws a distinction between
   <code class=""function"">
    current_role
   </code>
   and
   <code class=""function"">
    current_user
   </code>
   , but
   <span class=""productname"">
    PostgreSQL
   </span>
   does not, since it unifies users and roles into a single kind of entity.)
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-ACCESS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.2. Access Privilege Inquiry Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-ACCESS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.33.4.2"" name=""id-1.5.8.33.4.2"">
  </a>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-ACCESS-TABLE"" title=""Table 9.70. Access Privilege Inquiry Functions"">
    Table 9.70
   </a>
   lists functions that allow querying object access privileges programmatically. (See
   <a class=""xref"" href=""ddl-priv.html"" title=""5.8. Privileges"">
    Section 5.8
   </a>
   for more information about privileges.) In these functions, the user whose privileges are being inquired about can be specified by name or by OID (
   <code class=""structname"">
    pg_authid
   </code>
   .
   <code class=""structfield"">
    oid
   </code>
   ), or if the name is given as
   <code class=""literal"">
    public
   </code>
   then the privileges of the PUBLIC pseudo-role are checked. Also, the
   <em class=""parameter"">
    <code>
     user
    </code>
   </em>
   argument can be omitted entirely, in which case the
   <code class=""function"">
    current_user
   </code>
   is assumed. The object that is being inquired about can be specified either by name or by OID, too. When specifying by name, a schema name can be included if relevant. The access privilege of interest is specified by a text string, which must evaluate to one of the appropriate privilege keywords for the object's type (e.g.,
   <code class=""literal"">
    SELECT
   </code>
   ). Optionally,
   <code class=""literal"">
    WITH GRANT OPTION
   </code>
   can be added to a privilege type to test whether the privilege is held with grant option. Also, multiple privilege types can be listed separated by commas, in which case the result will be true if any of the listed privileges is held. (Case of the privilege string is not significant, and extra whitespace is allowed between but not within privilege names.) Some examples:
  </p>
  <pre class=""programlisting"">
SELECT has_table_privilege('myschema.mytable', 'select');
SELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');
</pre>
  <div class=""table"" id=""FUNCTIONS-INFO-ACCESS-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.70. Access Privilege Inquiry Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Access Privilege Inquiry Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.1.1.1.1"" name=""id-1.5.8.33.4.4.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          has_any_column_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for any column of table? This succeeds either if the privilege is held for the whole table, or if there is a column-level grant of the privilege for at least one column. Allowable privilege types are
         <code class=""literal"">
          SELECT
         </code>
         ,
         <code class=""literal"">
          INSERT
         </code>
         ,
         <code class=""literal"">
          UPDATE
         </code>
         , and
         <code class=""literal"">
          REFERENCES
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.2.1.1.1"" name=""id-1.5.8.33.4.4.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          has_column_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           column
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          smallint
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for the specified table column? This succeeds either if the privilege is held for the whole table, or if there is a column-level grant of the privilege for the column. The column can be specified by name or by attribute number (
         <code class=""structname"">
          pg_attribute
         </code>
         .
         <code class=""structfield"">
          attnum
         </code>
         ). Allowable privilege types are
         <code class=""literal"">
          SELECT
         </code>
         ,
         <code class=""literal"">
          INSERT
         </code>
         ,
         <code class=""literal"">
          UPDATE
         </code>
         , and
         <code class=""literal"">
          REFERENCES
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.3.1.1.1"" name=""id-1.5.8.33.4.4.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          has_database_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           database
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for database? Allowable privilege types are
         <code class=""literal"">
          CREATE
         </code>
         ,
         <code class=""literal"">
          CONNECT
         </code>
         ,
         <code class=""literal"">
          TEMPORARY
         </code>
         , and
         <code class=""literal"">
          TEMP
         </code>
         (which is equivalent to
         <code class=""literal"">
          TEMPORARY
         </code>
         ).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.4.1.1.1"" name=""id-1.5.8.33.4.4.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          has_foreign_data_wrapper_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           fdw
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for foreign-data wrapper? The only allowable privilege type is
         <code class=""literal"">
          USAGE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.5.1.1.1"" name=""id-1.5.8.33.4.4.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          has_function_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           function
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for function? The only allowable privilege type is
         <code class=""literal"">
          EXECUTE
         </code>
         .
        </p>
        <p>
         When specifying a function by name rather than by OID, the allowed input is the same as for the
         <code class=""type"">
          regprocedure
         </code>
         data type (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ). An example is:
        </p>
        <pre class=""programlisting"">
SELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.6.1.1.1"" name=""id-1.5.8.33.4.4.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          has_language_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           language
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for language? The only allowable privilege type is
         <code class=""literal"">
          USAGE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.7.1.1.1"" name=""id-1.5.8.33.4.4.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          has_parameter_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           parameter
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for configuration parameter? The parameter name is case-insensitive. Allowable privilege types are
         <code class=""literal"">
          SET
         </code>
         and
         <code class=""literal"">
          ALTER SYSTEM
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.8.1.1.1"" name=""id-1.5.8.33.4.4.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          has_schema_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           schema
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for schema? Allowable privilege types are
         <code class=""literal"">
          CREATE
         </code>
         and
         <code class=""literal"">
          USAGE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.9.1.1.1"" name=""id-1.5.8.33.4.4.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          has_sequence_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           sequence
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for sequence? Allowable privilege types are
         <code class=""literal"">
          USAGE
         </code>
         ,
         <code class=""literal"">
          SELECT
         </code>
         , and
         <code class=""literal"">
          UPDATE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.10.1.1.1"" name=""id-1.5.8.33.4.4.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          has_server_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           server
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for foreign server? The only allowable privilege type is
         <code class=""literal"">
          USAGE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.11.1.1.1"" name=""id-1.5.8.33.4.4.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          has_table_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for table? Allowable privilege types are
         <code class=""literal"">
          SELECT
         </code>
         ,
         <code class=""literal"">
          INSERT
         </code>
         ,
         <code class=""literal"">
          UPDATE
         </code>
         ,
         <code class=""literal"">
          DELETE
         </code>
         ,
         <code class=""literal"">
          TRUNCATE
         </code>
         ,
         <code class=""literal"">
          REFERENCES
         </code>
         ,
         <code class=""literal"">
          TRIGGER
         </code>
         , and
         <code class=""literal"">
          MAINTAIN
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.12.1.1.1"" name=""id-1.5.8.33.4.4.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          has_tablespace_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for tablespace? The only allowable privilege type is
         <code class=""literal"">
          CREATE
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.13.1.1.1"" name=""id-1.5.8.33.4.4.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          has_type_privilege
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for data type? The only allowable privilege type is
         <code class=""literal"">
          USAGE
         </code>
         . When specifying a type by name rather than by OID, the allowed input is the same as for the
         <code class=""type"">
          regtype
         </code>
         data type (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.14.1.1.1"" name=""id-1.5.8.33.4.4.2.2.14.1.1.1"">
         </a>
         <code class=""function"">
          pg_has_role
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            user
           </code>
          </em>
          <code class=""type"">
           name
          </code>
          or
          <code class=""type"">
           oid
          </code>
          ,
         </span>
         ]
         <em class=""parameter"">
          <code>
           role
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does user have privilege for role? Allowable privilege types are
         <code class=""literal"">
          MEMBER
         </code>
         ,
         <code class=""literal"">
          USAGE
         </code>
         , and
         <code class=""literal"">
          SET
         </code>
         .
         <code class=""literal"">
          MEMBER
         </code>
         denotes direct or indirect membership in the role without regard to what specific privileges may be conferred.
         <code class=""literal"">
          USAGE
         </code>
         denotes whether the privileges of the role are immediately available without doing
         <code class=""command"">
          SET ROLE
         </code>
         , while
         <code class=""literal"">
          SET
         </code>
         denotes whether it is possible to change to the role using the
         <code class=""literal"">
          SET ROLE
         </code>
         command.
         <code class=""literal"">
          WITH ADMIN OPTION
         </code>
         or
         <code class=""literal"">
          WITH GRANT OPTION
         </code>
         can be added to any of these privilege types to test whether the
         <code class=""literal"">
          ADMIN
         </code>
         privilege is held (all six spellings test the same thing). This function does not allow the special case of setting
         <em class=""parameter"">
          <code>
           user
          </code>
         </em>
         to
         <code class=""literal"">
          public
         </code>
         , because the PUBLIC pseudo-role can never be a member of real roles.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.4.2.2.15.1.1.1"" name=""id-1.5.8.33.4.4.2.2.15.1.1.1"">
         </a>
         <code class=""function"">
          row_security_active
         </code>
         (
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         or
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is row-level security active for the specified table in the context of the current user and current environment?
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-ACLITEM-OP-TABLE"" title=""Table 9.71. aclitem Operators"">
    Table 9.71
   </a>
   shows the operators available for the
   <code class=""type"">
    aclitem
   </code>
   type, which is the catalog representation of access privileges. See
   <a class=""xref"" href=""ddl-priv.html"" title=""5.8. Privileges"">
    Section 5.8
   </a>
   for information about how to read access privilege values.
  </p>
  <div class=""table"" id=""FUNCTIONS-ACLITEM-OP-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.71.
     <code class=""type"">
      aclitem
     </code>
     Operators
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""aclitem Operators"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Operator
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.6.2.2.1.1.1.1"" name=""id-1.5.8.33.4.6.2.2.1.1.1.1"">
         </a>
         <code class=""type"">
          aclitem
         </code>
         <code class=""literal"">
          =
         </code>
         <code class=""type"">
          aclitem
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Are
         <code class=""type"">
          aclitem
         </code>
         s equal? (Notice that type
         <code class=""type"">
          aclitem
         </code>
         lacks the usual set of comparison operators; it has only equality. In turn,
         <code class=""type"">
          aclitem
         </code>
         arrays can only be compared for equality.)
        </p>
        <p>
         <code class=""literal"">
          'calvin=r*w/hobbes'::aclitem = 'calvin=r*w*/hobbes'::aclitem
         </code>
         →
         <code class=""returnvalue"">
          f
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.6.2.2.2.1.1.1"" name=""id-1.5.8.33.4.6.2.2.2.1.1.1"">
         </a>
         <code class=""type"">
          aclitem[]
         </code>
         <code class=""literal"">
          @&gt;
         </code>
         <code class=""type"">
          aclitem
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Does array contain the specified privileges? (This is true if there is an array entry that matches the
         <code class=""type"">
          aclitem
         </code>
         's grantee and grantor, and has at least the specified set of privileges.)
        </p>
        <p>
         <code class=""literal"">
          '{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] @&gt; 'calvin=r*/hobbes'::aclitem
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""type"">
          aclitem[]
         </code>
         <code class=""literal"">
          ~
         </code>
         <code class=""type"">
          aclitem
         </code>
         →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         This is a deprecated alias for
         <code class=""literal"">
          @&gt;
         </code>
         .
        </p>
        <p>
         <code class=""literal"">
          '{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] ~ 'calvin=r*/hobbes'::aclitem
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-ACLITEM-FN-TABLE"" title=""Table 9.72. aclitem Functions"">
    Table 9.72
   </a>
   shows some additional functions to manage the
   <code class=""type"">
    aclitem
   </code>
   type.
  </p>
  <div class=""table"" id=""FUNCTIONS-ACLITEM-FN-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.72.
     <code class=""type"">
      aclitem
     </code>
     Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""aclitem Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.8.2.2.1.1.1.1"" name=""id-1.5.8.33.4.8.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          acldefault
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          ""char""
         </code>
         ,
         <em class=""parameter"">
          <code>
           ownerId
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          aclitem[]
         </code>
        </p>
        <p>
         Constructs an
         <code class=""type"">
          aclitem
         </code>
         array holding the default access privileges for an object of type
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         belonging to the role with OID
         <em class=""parameter"">
          <code>
           ownerId
          </code>
         </em>
         . This represents the access privileges that will be assumed when an object's ACL entry is null. (The default access privileges are described in
         <a class=""xref"" href=""ddl-priv.html"" title=""5.8. Privileges"">
          Section 5.8
         </a>
         .) The
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         parameter must be one of 'c' for
         <code class=""literal"">
          COLUMN
         </code>
         , 'r' for
         <code class=""literal"">
          TABLE
         </code>
         and table-like objects, 's' for
         <code class=""literal"">
          SEQUENCE
         </code>
         , 'd' for
         <code class=""literal"">
          DATABASE
         </code>
         , 'f' for
         <code class=""literal"">
          FUNCTION
         </code>
         or
         <code class=""literal"">
          PROCEDURE
         </code>
         , 'l' for
         <code class=""literal"">
          LANGUAGE
         </code>
         , 'L' for
         <code class=""literal"">
          LARGE OBJECT
         </code>
         , 'n' for
         <code class=""literal"">
          SCHEMA
         </code>
         , 'p' for
         <code class=""literal"">
          PARAMETER
         </code>
         , 't' for
         <code class=""literal"">
          TABLESPACE
         </code>
         , 'F' for
         <code class=""literal"">
          FOREIGN DATA WRAPPER
         </code>
         , 'S' for
         <code class=""literal"">
          FOREIGN SERVER
         </code>
         , or 'T' for
         <code class=""literal"">
          TYPE
         </code>
         or
         <code class=""literal"">
          DOMAIN
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.8.2.2.2.1.1.1"" name=""id-1.5.8.33.4.8.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          aclexplode
         </code>
         (
         <code class=""type"">
          aclitem[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           grantor
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           grantee
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privilege_type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_grantable
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         )
        </p>
        <p>
         Returns the
         <code class=""type"">
          aclitem
         </code>
         array as a set of rows. If the grantee is the pseudo-role PUBLIC, it is represented by zero in the
         <em class=""parameter"">
          <code>
           grantee
          </code>
         </em>
         column. Each granted privilege is represented as
         <code class=""literal"">
          SELECT
         </code>
         ,
         <code class=""literal"">
          INSERT
         </code>
         , etc (see
         <a class=""xref"" href=""ddl-priv.html#PRIVILEGE-ABBREVS-TABLE"" title=""Table 5.1. ACL Privilege Abbreviations"">
          Table 5.1
         </a>
         for a full list). Note that each privilege is broken out as a separate row, so only one keyword appears in the
         <em class=""parameter"">
          <code>
           privilege_type
          </code>
         </em>
         column.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.4.8.2.2.3.1.1.1"" name=""id-1.5.8.33.4.8.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          makeaclitem
         </code>
         (
         <em class=""parameter"">
          <code>
           grantee
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           grantor
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           privileges
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_grantable
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ) →
         <code class=""returnvalue"">
          aclitem
         </code>
        </p>
        <p>
         Constructs an
         <code class=""type"">
          aclitem
         </code>
         with the given properties.
         <em class=""parameter"">
          <code>
           privileges
          </code>
         </em>
         is a comma-separated list of privilege names such as
         <code class=""literal"">
          SELECT
         </code>
         ,
         <code class=""literal"">
          INSERT
         </code>
         , etc, all of which are set in the result. (Case of the privilege string is not significant, and extra whitespace is allowed between but not within privilege names.)
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-SCHEMA"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.3. Schema Visibility Inquiry Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-SCHEMA"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-SCHEMA-TABLE"" title=""Table 9.73. Schema Visibility Inquiry Functions"">
    Table 9.73
   </a>
   shows functions that determine whether a certain object is
   <em class=""firstterm"">
    visible
   </em>
   in the current schema search path. For example, a table is said to be visible if its containing schema is in the search path and no table of the same name appears earlier in the search path. This is equivalent to the statement that the table can be referenced by name without explicit schema qualification. Thus, to list the names of all visible tables:
  </p>
  <pre class=""programlisting"">
SELECT relname FROM pg_class WHERE pg_table_is_visible(oid);
</pre>
  <p>
   For functions and operators, an object in the search path is said to be visible if there is no object of the same name
   <span class=""emphasis"">
    <em>
     and argument data type(s)
    </em>
   </span>
   earlier in the path. For operator classes and families, both the name and the associated index access method are considered.
  </p>
  <a class=""indexterm"" id=""id-1.5.8.33.5.3"" name=""id-1.5.8.33.5.3"">
  </a>
  <div class=""table"" id=""FUNCTIONS-INFO-SCHEMA-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.73. Schema Visibility Inquiry Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Schema Visibility Inquiry Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.1.1.1.1"" name=""id-1.5.8.33.5.4.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_collation_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           collation
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is collation visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.2.1.1.1"" name=""id-1.5.8.33.5.4.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_conversion_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           conversion
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is conversion visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.3.1.1.1"" name=""id-1.5.8.33.5.4.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_function_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           function
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is function visible in search path? (This also works for procedures and aggregates.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.4.1.1.1"" name=""id-1.5.8.33.5.4.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_opclass_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           opclass
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is operator class visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.5.1.1.1"" name=""id-1.5.8.33.5.4.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_operator_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           operator
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is operator visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.6.1.1.1"" name=""id-1.5.8.33.5.4.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_opfamily_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           opclass
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is operator family visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.7.1.1.1"" name=""id-1.5.8.33.5.4.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_statistics_obj_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           stat
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is statistics object visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.8.1.1.1"" name=""id-1.5.8.33.5.4.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_table_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is table visible in search path? (This works for all types of relations, including views, materialized views, indexes, sequences and foreign tables.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.9.1.1.1"" name=""id-1.5.8.33.5.4.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_ts_config_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           config
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is text search configuration visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.10.1.1.1"" name=""id-1.5.8.33.5.4.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_ts_dict_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           dict
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is text search dictionary visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.11.1.1.1"" name=""id-1.5.8.33.5.4.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_ts_parser_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           parser
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is text search parser visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.12.1.1.1"" name=""id-1.5.8.33.5.4.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          pg_ts_template_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           template
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is text search template visible in search path?
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.5.4.2.2.13.1.1.1"" name=""id-1.5.8.33.5.4.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          pg_type_is_visible
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is type (or domain) visible in search path?
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   All these functions require object OIDs to identify the object to be checked. If you want to test an object by name, it is convenient to use the OID alias types (
   <code class=""type"">
    regclass
   </code>
   ,
   <code class=""type"">
    regtype
   </code>
   ,
   <code class=""type"">
    regprocedure
   </code>
   ,
   <code class=""type"">
    regoperator
   </code>
   ,
   <code class=""type"">
    regconfig
   </code>
   , or
   <code class=""type"">
    regdictionary
   </code>
   ), for example:
  </p>
  <pre class=""programlisting"">
SELECT pg_type_is_visible('myschema.widget'::regtype);
</pre>
  <p>
   Note that it would not make much sense to test a non-schema-qualified type name in this way — if the name can be recognized at all, it must be visible.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-CATALOG"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.4. System Catalog Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-CATALOG"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-CATALOG-TABLE"" title=""Table 9.74. System Catalog Information Functions"">
    Table 9.74
   </a>
   lists functions that extract information from the system catalogs.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-CATALOG-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.74. System Catalog Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""System Catalog Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"" id=""FORMAT-TYPE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.1.1.1.1"" name=""id-1.5.8.33.6.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          format_type
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           typemod
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the SQL name for a data type that is identified by its type OID and possibly a type modifier. Pass NULL for the type modifier if no specific modifier is known.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.2.1.1.1"" name=""id-1.5.8.33.6.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_basetype
         </code>
         (
         <code class=""type"">
          regtype
         </code>
         ) →
         <code class=""returnvalue"">
          regtype
         </code>
        </p>
        <p>
         Returns the OID of the base type of a domain identified by its type OID. If the argument is the OID of a non-domain type, returns the argument as-is. Returns NULL if the argument is not a valid type OID. If there's a chain of domain dependencies, it will recurse until finding the base type.
        </p>
        <p>
         Assuming
         <code class=""literal"">
          CREATE DOMAIN mytext AS text
         </code>
         :
        </p>
        <p>
         <code class=""literal"">
          pg_basetype('mytext'::regtype)
         </code>
         →
         <code class=""returnvalue"">
          text
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-CHAR-TO-ENCODING"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.3.1.1.1"" name=""id-1.5.8.33.6.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_char_to_encoding
         </code>
         (
         <em class=""parameter"">
          <code>
           encoding
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Converts the supplied encoding name into an integer representing the internal identifier used in some system catalog tables. Returns
         <code class=""literal"">
          -1
         </code>
         if an unknown encoding name is provided.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-ENCODING-TO-CHAR"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.4.1.1.1"" name=""id-1.5.8.33.6.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_encoding_to_char
         </code>
         (
         <em class=""parameter"">
          <code>
           encoding
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Converts the integer used as the internal identifier of an encoding in some system catalog tables into a human-readable string. Returns an empty string if an invalid encoding number is provided.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.5.1.1.1"" name=""id-1.5.8.33.6.3.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_catalog_foreign_keys
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           fktable
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           fkcols
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           pktable
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           pkcols
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_array
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_opt
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         )
        </p>
        <p>
         Returns a set of records describing the foreign key relationships that exist within the
         <span class=""productname"">
          PostgreSQL
         </span>
         system catalogs. The
         <em class=""parameter"">
          <code>
           fktable
          </code>
         </em>
         column contains the name of the referencing catalog, and the
         <em class=""parameter"">
          <code>
           fkcols
          </code>
         </em>
         column contains the name(s) of the referencing column(s). Similarly, the
         <em class=""parameter"">
          <code>
           pktable
          </code>
         </em>
         column contains the name of the referenced catalog, and the
         <em class=""parameter"">
          <code>
           pkcols
          </code>
         </em>
         column contains the name(s) of the referenced column(s). If
         <em class=""parameter"">
          <code>
           is_array
          </code>
         </em>
         is true, the last referencing column is an array, each of whose elements should match some entry in the referenced catalog. If
         <em class=""parameter"">
          <code>
           is_opt
          </code>
         </em>
         is true, the referencing column(s) are allowed to contain zeroes instead of a valid reference.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.6.1.1.1"" name=""id-1.5.8.33.6.3.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_constraintdef
         </code>
         (
         <em class=""parameter"">
          <code>
           constraint
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for a constraint. (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.7.1.1.1"" name=""id-1.5.8.33.6.3.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_expr
         </code>
         (
         <em class=""parameter"">
          <code>
           expr
          </code>
         </em>
         <code class=""type"">
          pg_node_tree
         </code>
         ,
         <em class=""parameter"">
          <code>
           relation
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Decompiles the internal form of an expression stored in the system catalogs, such as the default value for a column. If the expression might contain Vars, specify the OID of the relation they refer to as the second parameter; if no Vars are expected, passing zero is sufficient.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.8.1.1.1"" name=""id-1.5.8.33.6.3.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_functiondef
         </code>
         (
         <em class=""parameter"">
          <code>
           func
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for a function or procedure. (This is a decompiled reconstruction, not the original text of the command.) The result is a complete
         <code class=""command"">
          CREATE OR REPLACE FUNCTION
         </code>
         or
         <code class=""command"">
          CREATE OR REPLACE PROCEDURE
         </code>
         statement.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.9.1.1.1"" name=""id-1.5.8.33.6.3.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_function_arguments
         </code>
         (
         <em class=""parameter"">
          <code>
           func
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the argument list of a function or procedure, in the form it would need to appear in within
         <code class=""command"">
          CREATE FUNCTION
         </code>
         (including default values).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.10.1.1.1"" name=""id-1.5.8.33.6.3.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_function_identity_arguments
         </code>
         (
         <em class=""parameter"">
          <code>
           func
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the argument list necessary to identify a function or procedure, in the form it would need to appear in within commands such as
         <code class=""command"">
          ALTER FUNCTION
         </code>
         . This form omits default values.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.11.1.1.1"" name=""id-1.5.8.33.6.3.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_function_result
         </code>
         (
         <em class=""parameter"">
          <code>
           func
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the
         <code class=""literal"">
          RETURNS
         </code>
         clause of a function, in the form it would need to appear in within
         <code class=""command"">
          CREATE FUNCTION
         </code>
         . Returns
         <code class=""literal"">
          NULL
         </code>
         for a procedure.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.12.1.1.1"" name=""id-1.5.8.33.6.3.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_indexdef
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            column
           </code>
          </em>
          <code class=""type"">
           integer
          </code>
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for an index. (This is a decompiled reconstruction, not the original text of the command.) If
         <em class=""parameter"">
          <code>
           column
          </code>
         </em>
         is supplied and is not zero, only the definition of that column is reconstructed.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.13.1.1.1"" name=""id-1.5.8.33.6.3.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_keywords
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           word
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           catcode
          </code>
         </em>
         <code class=""type"">
          ""char""
         </code>
         ,
         <em class=""parameter"">
          <code>
           barelabel
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ,
         <em class=""parameter"">
          <code>
           catdesc
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           baredesc
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Returns a set of records describing the SQL keywords recognized by the server. The
         <em class=""parameter"">
          <code>
           word
          </code>
         </em>
         column contains the keyword. The
         <em class=""parameter"">
          <code>
           catcode
          </code>
         </em>
         column contains a category code:
         <code class=""literal"">
          U
         </code>
         for an unreserved keyword,
         <code class=""literal"">
          C
         </code>
         for a keyword that can be a column name,
         <code class=""literal"">
          T
         </code>
         for a keyword that can be a type or function name, or
         <code class=""literal"">
          R
         </code>
         for a fully reserved keyword. The
         <em class=""parameter"">
          <code>
           barelabel
          </code>
         </em>
         column contains
         <code class=""literal"">
          true
         </code>
         if the keyword can be used as a
         <span class=""quote"">
          “
          <span class=""quote"">
           bare
          </span>
          ”
         </span>
         column label in
         <code class=""command"">
          SELECT
         </code>
         lists, or
         <code class=""literal"">
          false
         </code>
         if it can only be used after
         <code class=""literal"">
          AS
         </code>
         . The
         <em class=""parameter"">
          <code>
           catdesc
          </code>
         </em>
         column contains a possibly-localized string describing the keyword's category. The
         <em class=""parameter"">
          <code>
           baredesc
          </code>
         </em>
         column contains a possibly-localized string describing the keyword's column label status.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.14.1.1.1"" name=""id-1.5.8.33.6.3.2.2.14.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_partkeydef
         </code>
         (
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the definition of a partitioned table's partition key, in the form it would have in the
         <code class=""literal"">
          PARTITION BY
         </code>
         clause of
         <code class=""command"">
          CREATE TABLE
         </code>
         . (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.15.1.1.1"" name=""id-1.5.8.33.6.3.2.2.15.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_ruledef
         </code>
         (
         <em class=""parameter"">
          <code>
           rule
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for a rule. (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.16.1.1.1"" name=""id-1.5.8.33.6.3.2.2.16.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_serial_sequence
         </code>
         (
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           column
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the name of the sequence associated with a column, or NULL if no sequence is associated with the column. If the column is an identity column, the associated sequence is the sequence internally created for that column. For columns created using one of the serial types (
         <code class=""type"">
          serial
         </code>
         ,
         <code class=""type"">
          smallserial
         </code>
         ,
         <code class=""type"">
          bigserial
         </code>
         ), it is the sequence created for that serial column definition. In the latter case, the association can be modified or removed with
         <code class=""command"">
          ALTER SEQUENCE OWNED BY
         </code>
         . (This function probably should have been called
         <code class=""function"">
          pg_get_owned_sequence
         </code>
         ; its current name reflects the fact that it has historically been used with serial-type columns.) The first parameter is a table name with optional schema, and the second parameter is a column name. Because the first parameter potentially contains both schema and table names, it is parsed per usual SQL rules, meaning it is lower-cased by default. The second parameter, being just a column name, is treated literally and so has its case preserved. The result is suitably formatted for passing to the sequence functions (see
         <a class=""xref"" href=""functions-sequence.html"" title=""9.17. Sequence Manipulation Functions"">
          Section 9.17
         </a>
         ).
        </p>
        <p>
         A typical use is in reading the current value of the sequence for an identity or serial column, for example:
        </p>
        <pre class=""programlisting"">
SELECT currval(pg_get_serial_sequence('sometable', 'id'));
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.17.1.1.1"" name=""id-1.5.8.33.6.3.2.2.17.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_statisticsobjdef
         </code>
         (
         <em class=""parameter"">
          <code>
           statobj
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for an extended statistics object. (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.18.1.1.1"" name=""id-1.5.8.33.6.3.2.2.18.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_triggerdef
         </code>
         (
         <em class=""parameter"">
          <code>
           trigger
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the creating command for a trigger. (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.19.1.1.1"" name=""id-1.5.8.33.6.3.2.2.19.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_userbyid
         </code>
         (
         <em class=""parameter"">
          <code>
           role
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          name
         </code>
        </p>
        <p>
         Returns a role's name given its OID.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.20.1.1.1"" name=""id-1.5.8.33.6.3.2.2.20.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_viewdef
         </code>
         (
         <em class=""parameter"">
          <code>
           view
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the underlying
         <code class=""command"">
          SELECT
         </code>
         command for a view or materialized view. (This is a decompiled reconstruction, not the original text of the command.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""function"">
          pg_get_viewdef
         </code>
         (
         <em class=""parameter"">
          <code>
           view
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           wrap_column
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the underlying
         <code class=""command"">
          SELECT
         </code>
         command for a view or materialized view. (This is a decompiled reconstruction, not the original text of the command.) In this form of the function, pretty-printing is always enabled, and long lines are wrapped to try to keep them shorter than the specified number of columns.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""function"">
          pg_get_viewdef
         </code>
         (
         <em class=""parameter"">
          <code>
           view
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            pretty
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reconstructs the underlying
         <code class=""command"">
          SELECT
         </code>
         command for a view or materialized view, working from a textual name for the view rather than its OID. (This is deprecated; use the OID variant instead.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.23.1.1.1"" name=""id-1.5.8.33.6.3.2.2.23.1.1.1"">
         </a>
         <code class=""function"">
          pg_index_column_has_property
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           column
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           property
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Tests whether an index column has the named property. Common index column properties are listed in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-INDEX-COLUMN-PROPS"" title=""Table 9.75. Index Column Properties"">
          Table 9.75
         </a>
         . (Note that extension access methods can define additional property names for their indexes.)
         <code class=""literal"">
          NULL
         </code>
         is returned if the property name is not known or does not apply to the particular object, or if the OID or column number does not identify a valid object.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.24.1.1.1"" name=""id-1.5.8.33.6.3.2.2.24.1.1.1"">
         </a>
         <code class=""function"">
          pg_index_has_property
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           property
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Tests whether an index has the named property. Common index properties are listed in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-INDEX-PROPS"" title=""Table 9.76. Index Properties"">
          Table 9.76
         </a>
         . (Note that extension access methods can define additional property names for their indexes.)
         <code class=""literal"">
          NULL
         </code>
         is returned if the property name is not known or does not apply to the particular object, or if the OID does not identify a valid object.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.25.1.1.1"" name=""id-1.5.8.33.6.3.2.2.25.1.1.1"">
         </a>
         <code class=""function"">
          pg_indexam_has_property
         </code>
         (
         <em class=""parameter"">
          <code>
           am
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           property
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Tests whether an index access method has the named property. Access method properties are listed in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-INDEXAM-PROPS"" title=""Table 9.77. Index Access Method Properties"">
          Table 9.77
         </a>
         .
         <code class=""literal"">
          NULL
         </code>
         is returned if the property name is not known or does not apply to the particular object, or if the OID does not identify a valid object.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.26.1.1.1"" name=""id-1.5.8.33.6.3.2.2.26.1.1.1"">
         </a>
         <code class=""function"">
          pg_options_to_table
         </code>
         (
         <em class=""parameter"">
          <code>
           options_array
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           option_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           option_value
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Returns the set of storage options represented by a value from
         <code class=""structname"">
          pg_class
         </code>
         .
         <code class=""structfield"">
          reloptions
         </code>
         or
         <code class=""structname"">
          pg_attribute
         </code>
         .
         <code class=""structfield"">
          attoptions
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.27.1.1.1"" name=""id-1.5.8.33.6.3.2.2.27.1.1.1"">
         </a>
         <code class=""function"">
          pg_settings_get_flags
         </code>
         (
         <em class=""parameter"">
          <code>
           guc
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          text[]
         </code>
        </p>
        <p>
         Returns an array of the flags associated with the given GUC, or
         <code class=""literal"">
          NULL
         </code>
         if it does not exist. The result is an empty array if the GUC exists but there are no flags to show. Only the most useful flags listed in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-SETTINGS-FLAGS"" title=""Table 9.78. GUC Flags"">
          Table 9.78
         </a>
         are exposed.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.28.1.1.1"" name=""id-1.5.8.33.6.3.2.2.28.1.1.1"">
         </a>
         <code class=""function"">
          pg_tablespace_databases
         </code>
         (
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          setof oid
         </code>
        </p>
        <p>
         Returns the set of OIDs of databases that have objects stored in the specified tablespace. If this function returns any rows, the tablespace is not empty and cannot be dropped. To identify the specific objects populating the tablespace, you will need to connect to the database(s) identified by
         <code class=""function"">
          pg_tablespace_databases
         </code>
         and query their
         <code class=""structname"">
          pg_class
         </code>
         catalogs.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.29.1.1.1"" name=""id-1.5.8.33.6.3.2.2.29.1.1.1"">
         </a>
         <code class=""function"">
          pg_tablespace_location
         </code>
         (
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the file system path that this tablespace is located in.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.30.1.1.1"" name=""id-1.5.8.33.6.3.2.2.30.1.1.1"">
         </a>
         <code class=""function"">
          pg_typeof
         </code>
         (
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          regtype
         </code>
        </p>
        <p>
         Returns the OID of the data type of the value that is passed to it. This can be helpful for troubleshooting or dynamically constructing SQL queries. The function is declared as returning
         <code class=""type"">
          regtype
         </code>
         , which is an OID alias type (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); this means that it is the same as an OID for comparison purposes but displays as a type name.
        </p>
        <p>
         <code class=""literal"">
          pg_typeof(33)
         </code>
         →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.31.1.1.1"" name=""id-1.5.8.33.6.3.2.2.31.1.1.1"">
         </a>
         <code class=""function"">
          COLLATION FOR
         </code>
         (
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the name of the collation of the value that is passed to it. The value is quoted and schema-qualified if necessary. If no collation was derived for the argument expression, then
         <code class=""literal"">
          NULL
         </code>
         is returned. If the argument is not of a collatable data type, then an error is raised.
        </p>
        <p>
         <code class=""literal"">
          collation for ('foo'::text)
         </code>
         →
         <code class=""returnvalue"">
          ""default""
         </code>
        </p>
        <p>
         <code class=""literal"">
          collation for ('foo' COLLATE ""de_DE"")
         </code>
         →
         <code class=""returnvalue"">
          ""de_DE""
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.32.1.1.1"" name=""id-1.5.8.33.6.3.2.2.32.1.1.1"">
         </a>
         <code class=""function"">
          to_regclass
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regclass
         </code>
        </p>
        <p>
         Translates a textual relation name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regclass
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.33.1.1.1"" name=""id-1.5.8.33.6.3.2.2.33.1.1.1"">
         </a>
         <code class=""function"">
          to_regcollation
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regcollation
         </code>
        </p>
        <p>
         Translates a textual collation name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regcollation
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.34.1.1.1"" name=""id-1.5.8.33.6.3.2.2.34.1.1.1"">
         </a>
         <code class=""function"">
          to_regnamespace
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regnamespace
         </code>
        </p>
        <p>
         Translates a textual schema name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regnamespace
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.35.1.1.1"" name=""id-1.5.8.33.6.3.2.2.35.1.1.1"">
         </a>
         <code class=""function"">
          to_regoper
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regoper
         </code>
        </p>
        <p>
         Translates a textual operator name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regoper
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found or is ambiguous.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.36.1.1.1"" name=""id-1.5.8.33.6.3.2.2.36.1.1.1"">
         </a>
         <code class=""function"">
          to_regoperator
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regoperator
         </code>
        </p>
        <p>
         Translates a textual operator name (with parameter types) to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regoperator
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.37.1.1.1"" name=""id-1.5.8.33.6.3.2.2.37.1.1.1"">
         </a>
         <code class=""function"">
          to_regproc
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regproc
         </code>
        </p>
        <p>
         Translates a textual function or procedure name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regproc
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found or is ambiguous.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.38.1.1.1"" name=""id-1.5.8.33.6.3.2.2.38.1.1.1"">
         </a>
         <code class=""function"">
          to_regprocedure
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regprocedure
         </code>
        </p>
        <p>
         Translates a textual function or procedure name (with argument types) to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regprocedure
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.39.1.1.1"" name=""id-1.5.8.33.6.3.2.2.39.1.1.1"">
         </a>
         <code class=""function"">
          to_regrole
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regrole
         </code>
        </p>
        <p>
         Translates a textual role name to its OID. A similar result is obtained by casting the string to type
         <code class=""type"">
          regrole
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ); however, this function will return
         <code class=""literal"">
          NULL
         </code>
         rather than throwing an error if the name is not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""TO-REGTYPE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.40.1.1.1"" name=""id-1.5.8.33.6.3.2.2.40.1.1.1"">
         </a>
         <code class=""function"">
          to_regtype
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          regtype
         </code>
        </p>
        <p>
         Parses a string of text, extracts a potential type name from it, and translates that name into a type OID. A syntax error in the string will result in an error; but if the string is a syntactically valid type name that happens not to be found in the catalogs, the result is
         <code class=""literal"">
          NULL
         </code>
         . A similar result is obtained by casting the string to type
         <code class=""type"">
          regtype
         </code>
         (see
         <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
          Section 8.19
         </a>
         ), except that that will throw error for name not found.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.6.3.2.2.41.1.1.1"" name=""id-1.5.8.33.6.3.2.2.41.1.1.1"">
         </a>
         <code class=""function"">
          to_regtypemod
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Parses a string of text, extracts a potential type name from it, and translates its type modifier, if any. A syntax error in the string will result in an error; but if the string is a syntactically valid type name that happens not to be found in the catalogs, the result is
         <code class=""literal"">
          NULL
         </code>
         . The result is
         <code class=""literal"">
          -1
         </code>
         if no type modifier is present.
        </p>
        <p>
         <code class=""function"">
          to_regtypemod
         </code>
         can be combined with
         <a class=""xref"" href=""functions-info.html#TO-REGTYPE"">
          to_regtype
         </a>
         to produce appropriate inputs for
         <a class=""xref"" href=""functions-info.html#FORMAT-TYPE"">
          format_type
         </a>
         , allowing a string representing a type name to be canonicalized.
        </p>
        <p>
         <code class=""literal"">
          format_type(to_regtype('varchar(32)'), to_regtypemod('varchar(32)'))
         </code>
         →
         <code class=""returnvalue"">
          character varying(32)
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   Most of the functions that reconstruct (decompile) database objects have an optional
   <em class=""parameter"">
    <code>
     pretty
    </code>
   </em>
   flag, which if
   <code class=""literal"">
    true
   </code>
   causes the result to be
   <span class=""quote"">
    “
    <span class=""quote"">
     pretty-printed
    </span>
    ”
   </span>
   . Pretty-printing suppresses unnecessary parentheses and adds whitespace for legibility. The pretty-printed format is more readable, but the default format is more likely to be interpreted the same way by future versions of
   <span class=""productname"">
    PostgreSQL
   </span>
   ; so avoid using pretty-printed output for dump purposes. Passing
   <code class=""literal"">
    false
   </code>
   for the
   <em class=""parameter"">
    <code>
     pretty
    </code>
   </em>
   parameter yields the same result as omitting the parameter.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-INDEX-COLUMN-PROPS"">
   <p class=""title"">
    <strong>
     Table 9.75. Index Column Properties
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Index Column Properties"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Name
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         asc
        </code>
       </td>
       <td>
        Does the column sort in ascending order on a forward scan?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         desc
        </code>
       </td>
       <td>
        Does the column sort in descending order on a forward scan?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         nulls_first
        </code>
       </td>
       <td>
        Does the column sort with nulls first on a forward scan?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         nulls_last
        </code>
       </td>
       <td>
        Does the column sort with nulls last on a forward scan?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         orderable
        </code>
       </td>
       <td>
        Does the column possess any defined sort ordering?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         distance_orderable
        </code>
       </td>
       <td>
        Can the column be scanned in order by a
        <span class=""quote"">
         “
         <span class=""quote"">
          distance
         </span>
         ”
        </span>
        operator, for example
        <code class=""literal"">
         ORDER BY col &lt;-&gt; constant
        </code>
        ?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         returnable
        </code>
       </td>
       <td>
        Can the column value be returned by an index-only scan?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         search_array
        </code>
       </td>
       <td>
        Does the column natively support
        <code class=""literal"">
         col = ANY(array)
        </code>
        searches?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         search_nulls
        </code>
       </td>
       <td>
        Does the column support
        <code class=""literal"">
         IS NULL
        </code>
        and
        <code class=""literal"">
         IS NOT NULL
        </code>
        searches?
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-INFO-INDEX-PROPS"">
   <p class=""title"">
    <strong>
     Table 9.76. Index Properties
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Index Properties"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Name
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         clusterable
        </code>
       </td>
       <td>
        Can the index be used in a
        <code class=""literal"">
         CLUSTER
        </code>
        command?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         index_scan
        </code>
       </td>
       <td>
        Does the index support plain (non-bitmap) scans?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         bitmap_scan
        </code>
       </td>
       <td>
        Does the index support bitmap scans?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         backward_scan
        </code>
       </td>
       <td>
        Can the scan direction be changed in mid-scan (to support
        <code class=""literal"">
         FETCH BACKWARD
        </code>
        on a cursor without needing materialization)?
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-INFO-INDEXAM-PROPS"">
   <p class=""title"">
    <strong>
     Table 9.77. Index Access Method Properties
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Index Access Method Properties"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Name
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         can_order
        </code>
       </td>
       <td>
        Does the access method support
        <code class=""literal"">
         ASC
        </code>
        ,
        <code class=""literal"">
         DESC
        </code>
        and related keywords in
        <code class=""literal"">
         CREATE INDEX
        </code>
        ?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         can_unique
        </code>
       </td>
       <td>
        Does the access method support unique indexes?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         can_multi_col
        </code>
       </td>
       <td>
        Does the access method support indexes with multiple columns?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         can_exclude
        </code>
       </td>
       <td>
        Does the access method support exclusion constraints?
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         can_include
        </code>
       </td>
       <td>
        Does the access method support the
        <code class=""literal"">
         INCLUDE
        </code>
        clause of
        <code class=""literal"">
         CREATE INDEX
        </code>
        ?
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-PG-SETTINGS-FLAGS"">
   <p class=""title"">
    <strong>
     Table 9.78. GUC Flags
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""GUC Flags"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Flag
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         EXPLAIN
        </code>
       </td>
       <td>
        Parameters with this flag are included in
        <code class=""command"">
         EXPLAIN (SETTINGS)
        </code>
        commands.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         NO_SHOW_ALL
        </code>
       </td>
       <td>
        Parameters with this flag are excluded from
        <code class=""command"">
         SHOW ALL
        </code>
        commands.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         NO_RESET
        </code>
       </td>
       <td>
        Parameters with this flag do not support
        <code class=""command"">
         RESET
        </code>
        commands.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         NO_RESET_ALL
        </code>
       </td>
       <td>
        Parameters with this flag are excluded from
        <code class=""command"">
         RESET ALL
        </code>
        commands.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         NOT_IN_SAMPLE
        </code>
       </td>
       <td>
        Parameters with this flag are not included in
        <code class=""filename"">
         postgresql.conf
        </code>
        by default.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         RUNTIME_COMPUTED
        </code>
       </td>
       <td>
        Parameters with this flag are runtime-computed ones.
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-OBJECT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.5. Object Information and Addressing Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-OBJECT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-OBJECT-TABLE"" title=""Table 9.79. Object Information and Addressing Functions"">
    Table 9.79
   </a>
   lists functions related to database object identification and addressing.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-OBJECT-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.79. Object Information and Addressing Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Object Information and Addressing Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.7.3.2.2.1.1.1.1"" name=""id-1.5.8.33.7.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_describe_object
         </code>
         (
         <em class=""parameter"">
          <code>
           classid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objsubid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns a textual description of a database object identified by catalog OID, object OID, and sub-object ID (such as a column number within a table; the sub-object ID is zero when referring to a whole object). This description is intended to be human-readable, and might be translated, depending on server configuration. This is especially useful to determine the identity of an object referenced in the
         <code class=""structname"">
          pg_depend
         </code>
         catalog. This function returns
         <code class=""literal"">
          NULL
         </code>
         values for undefined objects.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.7.3.2.2.2.1.1.1"" name=""id-1.5.8.33.7.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_identify_object
         </code>
         (
         <em class=""parameter"">
          <code>
           classid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objsubid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           schema
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           identity
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Returns a row containing enough information to uniquely identify the database object specified by catalog OID, object OID and sub-object ID. This information is intended to be machine-readable, and is never translated.
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         identifies the type of database object;
         <em class=""parameter"">
          <code>
           schema
          </code>
         </em>
         is the schema name that the object belongs in, or
         <code class=""literal"">
          NULL
         </code>
         for object types that do not belong to schemas;
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         is the name of the object, quoted if necessary, if the name (along with schema name, if pertinent) is sufficient to uniquely identify the object, otherwise
         <code class=""literal"">
          NULL
         </code>
         ;
         <em class=""parameter"">
          <code>
           identity
          </code>
         </em>
         is the complete object identity, with the precise format depending on object type, and each name within the format being schema-qualified and quoted as necessary. Undefined objects are identified with
         <code class=""literal"">
          NULL
         </code>
         values.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.7.3.2.2.3.1.1.1"" name=""id-1.5.8.33.7.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_identify_object_as_address
         </code>
         (
         <em class=""parameter"">
          <code>
           classid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objsubid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           object_names
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           object_args
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         )
        </p>
        <p>
         Returns a row containing enough information to uniquely identify the database object specified by catalog OID, object OID and sub-object ID. The returned information is independent of the current server, that is, it could be used to identify an identically named object in another server.
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         identifies the type of database object;
         <em class=""parameter"">
          <code>
           object_names
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           object_args
          </code>
         </em>
         are text arrays that together form a reference to the object. These three values can be passed to
         <code class=""function"">
          pg_get_object_address
         </code>
         to obtain the internal address of the object.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.7.3.2.2.4.1.1.1"" name=""id-1.5.8.33.7.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_object_address
         </code>
         (
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           object_names
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ,
         <em class=""parameter"">
          <code>
           object_args
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           classid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objid
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           objsubid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         )
        </p>
        <p>
         Returns a row containing enough information to uniquely identify the database object specified by a type code and object name and argument arrays. The returned values are the ones that would be used in system catalogs such as
         <code class=""structname"">
          pg_depend
         </code>
         ; they can be passed to other system functions such as
         <code class=""function"">
          pg_describe_object
         </code>
         or
         <code class=""function"">
          pg_identify_object
         </code>
         .
         <em class=""parameter"">
          <code>
           classid
          </code>
         </em>
         is the OID of the system catalog containing the object;
         <em class=""parameter"">
          <code>
           objid
          </code>
         </em>
         is the OID of the object itself, and
         <em class=""parameter"">
          <code>
           objsubid
          </code>
         </em>
         is the sub-object ID, or zero if none. This function is the inverse of
         <code class=""function"">
          pg_identify_object_as_address
         </code>
         . Undefined objects are identified with
         <code class=""literal"">
          NULL
         </code>
         values.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-COMMENT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.6. Comment Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-COMMENT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.33.8.2"" name=""id-1.5.8.33.8.2"">
  </a>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-COMMENT-TABLE"" title=""Table 9.80. Comment Information Functions"">
    Table 9.80
   </a>
   extract comments previously stored with the
   <a class=""xref"" href=""sql-comment.html"" title=""COMMENT"">
    <span class=""refentrytitle"">
     COMMENT
    </span>
   </a>
   command. A null value is returned if no comment could be found for the specified parameters.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-COMMENT-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.80. Comment Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Comment Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.8.4.2.2.1.1.1.1"" name=""id-1.5.8.33.8.4.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          col_description
         </code>
         (
         <em class=""parameter"">
          <code>
           table
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           column
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the comment for a table column, which is specified by the OID of its table and its column number. (
         <code class=""function"">
          obj_description
         </code>
         cannot be used for table columns, since columns do not have OIDs of their own.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.8.4.2.2.2.1.1.1"" name=""id-1.5.8.33.8.4.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          obj_description
         </code>
         (
         <em class=""parameter"">
          <code>
           object
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           catalog
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the comment for a database object specified by its OID and the name of the containing system catalog. For example,
         <code class=""literal"">
          obj_description(123456, 'pg_class')
         </code>
         would retrieve the comment for the table with OID 123456.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <code class=""function"">
          obj_description
         </code>
         (
         <em class=""parameter"">
          <code>
           object
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the comment for a database object specified by its OID alone. This is
         <span class=""emphasis"">
          <em>
           deprecated
          </em>
         </span>
         since there is no guarantee that OIDs are unique across different system catalogs; therefore, the wrong comment might be returned.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.8.4.2.2.4.1.1.1"" name=""id-1.5.8.33.8.4.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          shobj_description
         </code>
         (
         <em class=""parameter"">
          <code>
           object
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           catalog
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the comment for a shared database object specified by its OID and the name of the containing system catalog. This is just like
         <code class=""function"">
          obj_description
         </code>
         except that it is used for retrieving comments on shared objects (that is, databases, roles, and tablespaces). Some system catalogs are global to all databases within each cluster, and the descriptions for objects in them are stored globally as well.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-VALIDITY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.7. Data Validity Checking Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-VALIDITY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-INFO-VALIDITY-TABLE"" title=""Table 9.81. Data Validity Checking Functions"">
    Table 9.81
   </a>
   can be helpful for checking validity of proposed input data.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-VALIDITY-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.81. Data Validity Checking Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Data Validity Checking Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.9.3.2.2.1.1.1.1"" name=""id-1.5.8.33.9.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_input_is_valid
         </code>
         (
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Tests whether the given
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         is valid input for the specified data type, returning true or false.
        </p>
        <p>
         This function will only work as desired if the data type's input function has been updated to report invalid input as a
         <span class=""quote"">
          “
          <span class=""quote"">
           soft
          </span>
          ”
         </span>
         error. Otherwise, invalid input will abort the transaction, just as if the string had been cast to the type directly.
        </p>
        <p>
         <code class=""literal"">
          pg_input_is_valid('42', 'integer')
         </code>
         →
         <code class=""returnvalue"">
          t
         </code>
        </p>
        <p>
         <code class=""literal"">
          pg_input_is_valid('42000000000', 'integer')
         </code>
         →
         <code class=""returnvalue"">
          f
         </code>
        </p>
        <p>
         <code class=""literal"">
          pg_input_is_valid('1234.567', 'numeric(7,4)')
         </code>
         →
         <code class=""returnvalue"">
          f
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.9.3.2.2.2.1.1.1"" name=""id-1.5.8.33.9.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_input_error_info
         </code>
         (
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           type
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           message
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           detail
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           hint
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           sql_error_code
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Tests whether the given
         <em class=""parameter"">
          <code>
           string
          </code>
         </em>
         is valid input for the specified data type; if not, return the details of the error that would have been thrown. If the input is valid, the results are NULL. The inputs are the same as for
         <code class=""function"">
          pg_input_is_valid
         </code>
         .
        </p>
        <p>
         This function will only work as desired if the data type's input function has been updated to report invalid input as a
         <span class=""quote"">
          “
          <span class=""quote"">
           soft
          </span>
          ”
         </span>
         error. Otherwise, invalid input will abort the transaction, just as if the string had been cast to the type directly.
        </p>
        <p>
         <code class=""literal"">
          SELECT * FROM pg_input_error_info('42000000000', 'integer')
         </code>
         →
        </p>
        <pre class=""programlisting"">
                       message                        | detail | hint | sql_error_code
------------------------------------------------------+--------+------+----------------
 value ""42000000000"" is out of range for type integer |        |      | 22003
</pre>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-SNAPSHOT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.8. Transaction ID and Snapshot Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-SNAPSHOT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-SNAPSHOT"" title=""Table 9.82. Transaction ID and Snapshot Information Functions"">
    Table 9.82
   </a>
   provide server transaction information in an exportable form. The main use of these functions is to determine which transactions were committed between two snapshots.
  </p>
  <div class=""table"" id=""FUNCTIONS-PG-SNAPSHOT"">
   <p class=""title"">
    <strong>
     Table 9.82. Transaction ID and Snapshot Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Transaction ID and Snapshot Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.1.1.1.1"" name=""id-1.5.8.33.10.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          age
         </code>
         (
         <code class=""type"">
          xid
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the number of transactions between the supplied transaction id and the current transaction counter.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.2.1.1.1"" name=""id-1.5.8.33.10.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          mxid_age
         </code>
         (
         <code class=""type"">
          xid
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns the number of multixacts IDs between the supplied multixact ID and the current multixacts counter.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.3.1.1.1"" name=""id-1.5.8.33.10.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_xact_id
         </code>
         () →
         <code class=""returnvalue"">
          xid8
         </code>
        </p>
        <p>
         Returns the current transaction's ID. It will assign a new one if the current transaction does not have one already (because it has not performed any database updates); see
         <a class=""xref"" href=""transaction-id.html"" title=""66.1. Transactions and Identifiers"">
          Section 66.1
         </a>
         for details. If executed in a subtransaction, this will return the top-level transaction ID; see
         <a class=""xref"" href=""subxacts.html"" title=""66.3. Subtransactions"">
          Section 66.3
         </a>
         for details.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.4.1.1.1"" name=""id-1.5.8.33.10.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_xact_id_if_assigned
         </code>
         () →
         <code class=""returnvalue"">
          xid8
         </code>
        </p>
        <p>
         Returns the current transaction's ID, or
         <code class=""literal"">
          NULL
         </code>
         if no ID is assigned yet. (It's best to use this variant if the transaction might otherwise be read-only, to avoid unnecessary consumption of an XID.) If executed in a subtransaction, this will return the top-level transaction ID.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.5.1.1.1"" name=""id-1.5.8.33.10.3.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_xact_status
         </code>
         (
         <code class=""type"">
          xid8
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Reports the commit status of a recent transaction. The result is one of
         <code class=""literal"">
          in progress
         </code>
         ,
         <code class=""literal"">
          committed
         </code>
         , or
         <code class=""literal"">
          aborted
         </code>
         , provided that the transaction is recent enough that the system retains the commit status of that transaction. If it is old enough that no references to the transaction survive in the system and the commit status information has been discarded, the result is
         <code class=""literal"">
          NULL
         </code>
         . Applications might use this function, for example, to determine whether their transaction committed or aborted after the application and database server become disconnected while a
         <code class=""literal"">
          COMMIT
         </code>
         is in progress. Note that prepared transactions are reported as
         <code class=""literal"">
          in progress
         </code>
         ; applications must check
         <a class=""link"" href=""view-pg-prepared-xacts.html"" title=""52.16. pg_prepared_xacts"">
          <code class=""structname"">
           pg_prepared_xacts
          </code>
         </a>
         if they need to determine whether a transaction ID belongs to a prepared transaction.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.6.1.1.1"" name=""id-1.5.8.33.10.3.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_snapshot
         </code>
         () →
         <code class=""returnvalue"">
          pg_snapshot
         </code>
        </p>
        <p>
         Returns a current
         <em class=""firstterm"">
          snapshot
         </em>
         , a data structure showing which transaction IDs are now in-progress. Only top-level transaction IDs are included in the snapshot; subtransaction IDs are not shown; see
         <a class=""xref"" href=""subxacts.html"" title=""66.3. Subtransactions"">
          Section 66.3
         </a>
         for details.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.7.1.1.1"" name=""id-1.5.8.33.10.3.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_snapshot_xip
         </code>
         (
         <code class=""type"">
          pg_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          setof xid8
         </code>
        </p>
        <p>
         Returns the set of in-progress transaction IDs contained in a snapshot.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.8.1.1.1"" name=""id-1.5.8.33.10.3.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_snapshot_xmax
         </code>
         (
         <code class=""type"">
          pg_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          xid8
         </code>
        </p>
        <p>
         Returns the
         <code class=""structfield"">
          xmax
         </code>
         of a snapshot.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.9.1.1.1"" name=""id-1.5.8.33.10.3.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_snapshot_xmin
         </code>
         (
         <code class=""type"">
          pg_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          xid8
         </code>
        </p>
        <p>
         Returns the
         <code class=""structfield"">
          xmin
         </code>
         of a snapshot.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.3.2.2.10.1.1.1"" name=""id-1.5.8.33.10.3.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_visible_in_snapshot
         </code>
         (
         <code class=""type"">
          xid8
         </code>
         ,
         <code class=""type"">
          pg_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Is the given transaction ID
         <em class=""firstterm"">
          visible
         </em>
         according to this snapshot (that is, was it completed before the snapshot was taken)? Note that this function will not give the correct answer for a subtransaction ID (subxid); see
         <a class=""xref"" href=""subxacts.html"" title=""66.3. Subtransactions"">
          Section 66.3
         </a>
         for details.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   The internal transaction ID type
   <code class=""type"">
    xid
   </code>
   is 32 bits wide and wraps around every 4 billion transactions. However, the functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-SNAPSHOT"" title=""Table 9.82. Transaction ID and Snapshot Information Functions"">
    Table 9.82
   </a>
   , except
   <code class=""function"">
    age
   </code>
   and
   <code class=""function"">
    mxid_age
   </code>
   , use a 64-bit type
   <code class=""type"">
    xid8
   </code>
   that does not wrap around during the life of an installation and can be converted to
   <code class=""type"">
    xid
   </code>
   by casting if required; see
   <a class=""xref"" href=""transaction-id.html"" title=""66.1. Transactions and Identifiers"">
    Section 66.1
   </a>
   for details. The data type
   <code class=""type"">
    pg_snapshot
   </code>
   stores information about transaction ID visibility at a particular moment in time. Its components are described in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-SNAPSHOT-PARTS"" title=""Table 9.83. Snapshot Components"">
    Table 9.83
   </a>
   .
   <code class=""type"">
    pg_snapshot
   </code>
   's textual representation is
   <code class=""literal"">
    <em class=""replaceable"">
     <code>
      xmin
     </code>
    </em>
    :
    <em class=""replaceable"">
     <code>
      xmax
     </code>
    </em>
    :
    <em class=""replaceable"">
     <code>
      xip_list
     </code>
    </em>
   </code>
   . For example
   <code class=""literal"">
    10:20:10,14,15
   </code>
   means
   <code class=""literal"">
    xmin=10, xmax=20, xip_list=10, 14, 15
   </code>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-PG-SNAPSHOT-PARTS"">
   <p class=""title"">
    <strong>
     Table 9.83. Snapshot Components
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Snapshot Components"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Name
       </th>
       <th>
        Description
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""structfield"">
         xmin
        </code>
       </td>
       <td>
        Lowest transaction ID that was still active. All transaction IDs less than
        <code class=""structfield"">
         xmin
        </code>
        are either committed and visible, or rolled back and dead.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         xmax
        </code>
       </td>
       <td>
        One past the highest completed transaction ID. All transaction IDs greater than or equal to
        <code class=""structfield"">
         xmax
        </code>
        had not yet completed as of the time of the snapshot, and thus are invisible.
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         xip_list
        </code>
       </td>
       <td>
        Transactions in progress at the time of the snapshot. A transaction ID that is
        <code class=""literal"">
         xmin &lt;=
         <em class=""replaceable"">
          <code>
           X
          </code>
         </em>
         &lt; xmax
        </code>
        and not in this list was already completed at the time of the snapshot, and thus is either visible or dead according to its commit status. This list does not include the transaction IDs of subtransactions (subxids).
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   In releases of
   <span class=""productname"">
    PostgreSQL
   </span>
   before 13 there was no
   <code class=""type"">
    xid8
   </code>
   type, so variants of these functions were provided that used
   <code class=""type"">
    bigint
   </code>
   to represent a 64-bit XID, with a correspondingly distinct snapshot data type
   <code class=""type"">
    txid_snapshot
   </code>
   . These older functions have
   <code class=""literal"">
    txid
   </code>
   in their names. They are still supported for backward compatibility, but may be removed from a future release. See
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-TXID-SNAPSHOT"" title=""Table 9.84. Deprecated Transaction ID and Snapshot Information Functions"">
    Table 9.84
   </a>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-TXID-SNAPSHOT"">
   <p class=""title"">
    <strong>
     Table 9.84. Deprecated Transaction ID and Snapshot Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Deprecated Transaction ID and Snapshot Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.1.1.1.1"" name=""id-1.5.8.33.10.7.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          txid_current
         </code>
         () →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_current_xact_id()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.2.1.1.1"" name=""id-1.5.8.33.10.7.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          txid_current_if_assigned
         </code>
         () →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_current_xact_id_if_assigned()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.3.1.1.1"" name=""id-1.5.8.33.10.7.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          txid_current_snapshot
         </code>
         () →
         <code class=""returnvalue"">
          txid_snapshot
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_current_snapshot()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.4.1.1.1"" name=""id-1.5.8.33.10.7.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          txid_snapshot_xip
         </code>
         (
         <code class=""type"">
          txid_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          setof bigint
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_snapshot_xip()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.5.1.1.1"" name=""id-1.5.8.33.10.7.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          txid_snapshot_xmax
         </code>
         (
         <code class=""type"">
          txid_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_snapshot_xmax()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.6.1.1.1"" name=""id-1.5.8.33.10.7.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          txid_snapshot_xmin
         </code>
         (
         <code class=""type"">
          txid_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_snapshot_xmin()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.7.1.1.1"" name=""id-1.5.8.33.10.7.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          txid_visible_in_snapshot
         </code>
         (
         <code class=""type"">
          bigint
         </code>
         ,
         <code class=""type"">
          txid_snapshot
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_visible_in_snapshot()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.10.7.2.2.8.1.1.1"" name=""id-1.5.8.33.10.7.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          txid_status
         </code>
         (
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         See
         <code class=""function"">
          pg_xact_status()
         </code>
         .
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-COMMIT-TIMESTAMP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.9. Committed Transaction Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-COMMIT-TIMESTAMP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-COMMIT-TIMESTAMP"" title=""Table 9.85. Committed Transaction Information Functions"">
    Table 9.85
   </a>
   provide information about when past transactions were committed. They only provide useful data when the
   <a class=""xref"" href=""runtime-config-replication.html#GUC-TRACK-COMMIT-TIMESTAMP"">
    track_commit_timestamp
   </a>
   configuration option is enabled, and only for transactions that were committed after it was enabled. Commit timestamp information is routinely removed during vacuum.
  </p>
  <div class=""table"" id=""FUNCTIONS-COMMIT-TIMESTAMP"">
   <p class=""title"">
    <strong>
     Table 9.85. Committed Transaction Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Committed Transaction Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.11.3.2.2.1.1.1.1"" name=""id-1.5.8.33.11.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_xact_commit_timestamp
         </code>
         (
         <code class=""type"">
          xid
         </code>
         ) →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Returns the commit timestamp of a transaction.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.11.3.2.2.2.1.1.1"" name=""id-1.5.8.33.11.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_xact_commit_timestamp_origin
         </code>
         (
         <code class=""type"">
          xid
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           timestamp
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           roident
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         )
        </p>
        <p>
         Returns the commit timestamp and replication origin of a transaction.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.11.3.2.2.3.1.1.1"" name=""id-1.5.8.33.11.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_last_committed_xact
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           xid
          </code>
         </em>
         <code class=""type"">
          xid
         </code>
         ,
         <em class=""parameter"">
          <code>
           timestamp
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           roident
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         )
        </p>
        <p>
         Returns the transaction ID, commit timestamp and replication origin of the latest committed transaction.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-CONTROLDATA"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.10. Control Data Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-CONTROLDATA"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-CONTROLDATA"" title=""Table 9.86. Control Data Functions"">
    Table 9.86
   </a>
   print information initialized during
   <code class=""command"">
    initdb
   </code>
   , such as the catalog version. They also show information about write-ahead logging and checkpoint processing. This information is cluster-wide, not specific to any one database. These functions provide most of the same information, from the same source, as the
   <a class=""xref"" href=""app-pgcontroldata.html"" title=""pg_controldata"">
    <span class=""refentrytitle"">
     <span class=""application"">
      pg_controldata
     </span>
    </span>
   </a>
   application.
  </p>
  <div class=""table"" id=""FUNCTIONS-CONTROLDATA"">
   <p class=""title"">
    <strong>
     Table 9.86. Control Data Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Control Data Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.12.3.2.2.1.1.1.1"" name=""id-1.5.8.33.12.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_control_checkpoint
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p>
         Returns information about current checkpoint state, as shown in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-CONTROL-CHECKPOINT"" title=""Table 9.87. pg_control_checkpoint Output Columns"">
          Table 9.87
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.12.3.2.2.2.1.1.1"" name=""id-1.5.8.33.12.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_control_system
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p>
         Returns information about current control file state, as shown in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-CONTROL-SYSTEM"" title=""Table 9.88. pg_control_system Output Columns"">
          Table 9.88
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.12.3.2.2.3.1.1.1"" name=""id-1.5.8.33.12.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_control_init
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p>
         Returns information about cluster initialization state, as shown in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-CONTROL-INIT"" title=""Table 9.89. pg_control_init Output Columns"">
          Table 9.89
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.12.3.2.2.4.1.1.1"" name=""id-1.5.8.33.12.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_control_recovery
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
        </p>
        <p>
         Returns information about recovery state, as shown in
         <a class=""xref"" href=""functions-info.html#FUNCTIONS-PG-CONTROL-RECOVERY"" title=""Table 9.90. pg_control_recovery Output Columns"">
          Table 9.90
         </a>
         .
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-PG-CONTROL-CHECKPOINT"">
   <p class=""title"">
    <strong>
     Table 9.87.
     <code class=""function"">
      pg_control_checkpoint
     </code>
     Output Columns
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""pg_control_checkpoint Output Columns"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Column Name
       </th>
       <th>
        Data Type
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""structfield"">
         checkpoint_lsn
        </code>
       </td>
       <td>
        <code class=""type"">
         pg_lsn
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         redo_lsn
        </code>
       </td>
       <td>
        <code class=""type"">
         pg_lsn
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         redo_wal_file
        </code>
       </td>
       <td>
        <code class=""type"">
         text
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         timeline_id
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         prev_timeline_id
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         full_page_writes
        </code>
       </td>
       <td>
        <code class=""type"">
         boolean
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         next_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         text
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         next_oid
        </code>
       </td>
       <td>
        <code class=""type"">
         oid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         next_multixact_id
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         next_multi_offset
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_xid_dbid
        </code>
       </td>
       <td>
        <code class=""type"">
         oid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_active_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_multi_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_multi_dbid
        </code>
       </td>
       <td>
        <code class=""type"">
         oid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         oldest_commit_ts_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         newest_commit_ts_xid
        </code>
       </td>
       <td>
        <code class=""type"">
         xid
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         checkpoint_time
        </code>
       </td>
       <td>
        <code class=""type"">
         timestamp with time zone
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-PG-CONTROL-SYSTEM"">
   <p class=""title"">
    <strong>
     Table 9.88.
     <code class=""function"">
      pg_control_system
     </code>
     Output Columns
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""pg_control_system Output Columns"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Column Name
       </th>
       <th>
        Data Type
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""structfield"">
         pg_control_version
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         catalog_version_no
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         system_identifier
        </code>
       </td>
       <td>
        <code class=""type"">
         bigint
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         pg_control_last_modified
        </code>
       </td>
       <td>
        <code class=""type"">
         timestamp with time zone
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-PG-CONTROL-INIT"">
   <p class=""title"">
    <strong>
     Table 9.89.
     <code class=""function"">
      pg_control_init
     </code>
     Output Columns
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""pg_control_init Output Columns"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Column Name
       </th>
       <th>
        Data Type
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""structfield"">
         max_data_alignment
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         database_block_size
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         blocks_per_segment
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         wal_block_size
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         bytes_per_wal_segment
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         max_identifier_length
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         max_index_columns
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         max_toast_chunk_size
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         large_object_chunk_size
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         float8_pass_by_value
        </code>
       </td>
       <td>
        <code class=""type"">
         boolean
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         data_page_checksum_version
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <div class=""table"" id=""FUNCTIONS-PG-CONTROL-RECOVERY"">
   <p class=""title"">
    <strong>
     Table 9.90.
     <code class=""function"">
      pg_control_recovery
     </code>
     Output Columns
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""pg_control_recovery Output Columns"">
     <colgroup>
      <col/>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th>
        Column Name
       </th>
       <th>
        Data Type
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""structfield"">
         min_recovery_end_lsn
        </code>
       </td>
       <td>
        <code class=""type"">
         pg_lsn
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         min_recovery_end_timeline
        </code>
       </td>
       <td>
        <code class=""type"">
         integer
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         backup_start_lsn
        </code>
       </td>
       <td>
        <code class=""type"">
         pg_lsn
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         backup_end_lsn
        </code>
       </td>
       <td>
        <code class=""type"">
         pg_lsn
        </code>
       </td>
      </tr>
      <tr>
       <td>
        <code class=""structfield"">
         end_of_backup_record_required
        </code>
       </td>
       <td>
        <code class=""type"">
         boolean
        </code>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-VERSION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.11. Version Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-VERSION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-VERSION"" title=""Table 9.91. Version Information Functions"">
    Table 9.91
   </a>
   print version information.
  </p>
  <div class=""table"" id=""FUNCTIONS-VERSION"">
   <p class=""title"">
    <strong>
     Table 9.91. Version Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Version Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.13.3.2.2.1.1.1.1"" name=""id-1.5.8.33.13.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          version
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns a string describing the
         <span class=""productname"">
          PostgreSQL
         </span>
         server's version. You can also get this information from
         <a class=""xref"" href=""runtime-config-preset.html#GUC-SERVER-VERSION"">
          server_version
         </a>
         , or for a machine-readable version use
         <a class=""xref"" href=""runtime-config-preset.html#GUC-SERVER-VERSION-NUM"">
          server_version_num
         </a>
         . Software developers should use
         <code class=""varname"">
          server_version_num
         </code>
         (available since 8.2) or
         <a class=""xref"" href=""libpq-status.html#LIBPQ-PQSERVERVERSION"">
          <code class=""function"">
           PQserverVersion
          </code>
         </a>
         instead of parsing the text version.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.13.3.2.2.2.1.1.1"" name=""id-1.5.8.33.13.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          unicode_version
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns a string representing the version of Unicode used by
         <span class=""productname"">
          PostgreSQL
         </span>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.13.3.2.2.3.1.1.1"" name=""id-1.5.8.33.13.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          icu_unicode_version
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns a string representing the version of Unicode used by ICU, if the server was built with ICU support; otherwise returns
         <code class=""literal"">
          NULL
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-INFO-WAL-SUMMARY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.27.12. WAL Summarization Information Functions
      <a class=""id_link"" href=""#FUNCTIONS-INFO-WAL-SUMMARY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-info.html#FUNCTIONS-WAL-SUMMARY"" title=""Table 9.92. WAL Summarization Information Functions"">
    Table 9.92
   </a>
   print information about the status of WAL summarization. See
   <a class=""xref"" href=""runtime-config-wal.html#GUC-SUMMARIZE-WAL"">
    summarize_wal
   </a>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-WAL-SUMMARY"">
   <p class=""title"">
    <strong>
     Table 9.92. WAL Summarization Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""WAL Summarization Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.14.3.2.2.1.1.1.1"" name=""id-1.5.8.33.14.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_available_wal_summaries
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           tli
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           start_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           end_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Returns information about the WAL summary files present in the data directory, under
         <code class=""literal"">
          pg_wal/summaries
         </code>
         . One row will be returned per WAL summary file. Each file summarizes WAL on the indicated TLI within the indicated LSN range. This function might be useful to determine whether enough WAL summaries are present on the server to take an incremental backup based on some prior backup whose start LSN is known.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.14.3.2.2.2.1.1.1"" name=""id-1.5.8.33.14.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_wal_summary_contents
         </code>
         (
         <em class=""parameter"">
          <code>
           tli
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           start_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           end_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           relfilenode
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           reltablespace
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           reldatabase
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           relforknumber
          </code>
         </em>
         <code class=""type"">
          smallint
         </code>
         ,
         <em class=""parameter"">
          <code>
           relblocknumber
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_limit_block
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         )
        </p>
        <p>
         Returns one information about the contents of a single WAL summary file identified by TLI and starting and ending LSNs. Each row with
         <code class=""literal"">
          is_limit_block
         </code>
         false indicates that the block identified by the remaining output columns was modified by at least one WAL record within the range of records summarized by this file. Each row with
         <code class=""literal"">
          is_limit_block
         </code>
         true indicates either that (a) the relation fork was truncated to the length given by
         <code class=""literal"">
          relblocknumber
         </code>
         within the relevant range of WAL records or (b) that the relation fork was created or dropped within the relevant range of WAL records; in such cases,
         <code class=""literal"">
          relblocknumber
         </code>
         will be zero.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.33.14.3.2.2.3.1.1.1"" name=""id-1.5.8.33.14.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_wal_summarizer_state
         </code>
         () →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           summarized_tli
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           summarized_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           pending_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           summarizer_pid
          </code>
         </em>
         <code class=""type"">
          int
         </code>
         )
        </p>
        <p>
         Returns information about the progress of the WAL summarizer. If the WAL summarizer has never run since the instance was started, then
         <code class=""literal"">
          summarized_tli
         </code>
         and
         <code class=""literal"">
          summarized_lsn
         </code>
         will be
         <code class=""literal"">
          0
         </code>
         and
         <code class=""literal"">
          0/0
         </code>
         respectively; otherwise, they will be the TLI and ending LSN of the last WAL summary file written to disk. If the WAL summarizer is currently running,
         <code class=""literal"">
          pending_lsn
         </code>
         will be the ending LSN of the last record that it has consumed, which must always be greater than or equal to
         <code class=""literal"">
          summarized_lsn
         </code>
         ; if the WAL summarizer is not running, it will be equal to
         <code class=""literal"">
          summarized_lsn
         </code>
         .
         <code class=""literal"">
          summarizer_pid
         </code>
         is the PID of the WAL summarizer process, if it is running, and otherwise NULL.
        </p>
        <p>
         As a special exception, the WAL summarizer will refuse to generate WAL summary files if run on WAL generated under
         <code class=""literal"">
          wal_level=minimal
         </code>
         , since such summaries would be unsafe to use as the basis for an incremental backup. In this case, the fields above will continue to advance as if summaries were being generated, but nothing will be written to disk. Once the summarizer reaches WAL generated while
         <code class=""literal"">
          wal_level
         </code>
         was set to
         <code class=""literal"">
          replica
         </code>
         or higher, it will resume writing summaries to disk.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
</div>
"
9. Functions and Operators,9.28. System Administration Functions,https://www.postgresql.org/docs/17/functions-admin.html,"<div class=""sect1"" id=""FUNCTIONS-ADMIN"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.28. System Administration Functions
     <a class=""id_link"" href=""#FUNCTIONS-ADMIN"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-SET"">
      9.28.1. Configuration Settings Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-SIGNAL"">
      9.28.2. Server Signaling Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-BACKUP"">
      9.28.3. Backup Control Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-RECOVERY-CONTROL"">
      9.28.4. Recovery Control Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION"">
      9.28.5. Snapshot Synchronization Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-REPLICATION"">
      9.28.6. Replication Management Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-DBOBJECT"">
      9.28.7. Database Object Management Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-INDEX"">
      9.28.8. Index Maintenance Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADMIN-GENFILE"">
      9.28.9. Generic File Access Functions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-admin.html#FUNCTIONS-ADVISORY-LOCKS"">
      9.28.10. Advisory Lock Functions
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  The functions described in this section are used to control and monitor a
  <span class=""productname"">
   PostgreSQL
  </span>
  installation.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-SET"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.1. Configuration Settings Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-SET"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.34.3.2"" name=""id-1.5.8.34.3.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.34.3.3"" name=""id-1.5.8.34.3.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.8.34.3.4"" name=""id-1.5.8.34.3.4"">
  </a>
  <p>
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-SET-TABLE"" title=""Table 9.93. Configuration Settings Functions"">
    Table 9.93
   </a>
   shows the functions available to query and alter run-time configuration parameters.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-SET-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.93. Configuration Settings Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Configuration Settings Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
        <p>
         Example(s)
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.3.6.2.2.1.1.1.1"" name=""id-1.5.8.34.3.6.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          current_setting
         </code>
         (
         <em class=""parameter"">
          <code>
           setting_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            missing_ok
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the current value of the setting
         <em class=""parameter"">
          <code>
           setting_name
          </code>
         </em>
         . If there is no such setting,
         <code class=""function"">
          current_setting
         </code>
         throws an error unless
         <em class=""parameter"">
          <code>
           missing_ok
          </code>
         </em>
         is supplied and is
         <code class=""literal"">
          true
         </code>
         (in which case NULL is returned). This function corresponds to the
         <acronym class=""acronym"">
          SQL
         </acronym>
         command
         <a class=""xref"" href=""sql-show.html"" title=""SHOW"">
          <span class=""refentrytitle"">
           SHOW
          </span>
         </a>
         .
        </p>
        <p>
         <code class=""literal"">
          current_setting('datestyle')
         </code>
         →
         <code class=""returnvalue"">
          ISO, MDY
         </code>
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.3.6.2.2.2.1.1.1"" name=""id-1.5.8.34.3.6.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          set_config
         </code>
         (
         <em class=""parameter"">
          <code>
           setting_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           is_local
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Sets the parameter
         <em class=""parameter"">
          <code>
           setting_name
          </code>
         </em>
         to
         <em class=""parameter"">
          <code>
           new_value
          </code>
         </em>
         , and returns that value. If
         <em class=""parameter"">
          <code>
           is_local
          </code>
         </em>
         is
         <code class=""literal"">
          true
         </code>
         , the new value will only apply during the current transaction. If you want the new value to apply for the rest of the current session, use
         <code class=""literal"">
          false
         </code>
         instead. This function corresponds to the SQL command
         <a class=""xref"" href=""sql-set.html"" title=""SET"">
          <span class=""refentrytitle"">
           SET
          </span>
         </a>
         .
        </p>
        <p>
         <code class=""literal"">
          set_config('log_statement_stats', 'off', false)
         </code>
         →
         <code class=""returnvalue"">
          off
         </code>
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-SIGNAL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.2. Server Signaling Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-SIGNAL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.34.4.2"" name=""id-1.5.8.34.4.2"">
  </a>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-SIGNAL-TABLE"" title=""Table 9.94. Server Signaling Functions"">
    Table 9.94
   </a>
   send control signals to other server processes. Use of these functions is restricted to superusers by default but access may be granted to others using
   <code class=""command"">
    GRANT
   </code>
   , with noted exceptions.
  </p>
  <p>
   Each of these functions returns
   <code class=""literal"">
    true
   </code>
   if the signal was successfully sent and
   <code class=""literal"">
    false
   </code>
   if sending the signal failed.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-SIGNAL-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.94. Server Signaling Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Server Signaling Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.4.5.2.2.1.1.1.1"" name=""id-1.5.8.34.4.5.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_cancel_backend
         </code>
         (
         <em class=""parameter"">
          <code>
           pid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Cancels the current query of the session whose backend process has the specified process ID. This is also allowed if the calling role is a member of the role whose backend is being canceled or the calling role has privileges of
         <code class=""literal"">
          pg_signal_backend
         </code>
         , however only superusers can cancel superuser backends.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.4.5.2.2.2.1.1.1"" name=""id-1.5.8.34.4.5.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_log_backend_memory_contexts
         </code>
         (
         <em class=""parameter"">
          <code>
           pid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Requests to log the memory contexts of the backend with the specified process ID. This function can send the request to backends and auxiliary processes except logger. These memory contexts will be logged at
         <code class=""literal"">
          LOG
         </code>
         message level. They will appear in the server log based on the log configuration set (see
         <a class=""xref"" href=""runtime-config-logging.html"" title=""19.8. Error Reporting and Logging"">
          Section 19.8
         </a>
         for more information), but will not be sent to the client regardless of
         <a class=""xref"" href=""runtime-config-client.html#GUC-CLIENT-MIN-MESSAGES"">
          client_min_messages
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.4.5.2.2.3.1.1.1"" name=""id-1.5.8.34.4.5.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_reload_conf
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Causes all processes of the
         <span class=""productname"">
          PostgreSQL
         </span>
         server to reload their configuration files. (This is initiated by sending a
         <span class=""systemitem"">
          SIGHUP
         </span>
         signal to the postmaster process, which in turn sends
         <span class=""systemitem"">
          SIGHUP
         </span>
         to each of its children.) You can use the
         <a class=""link"" href=""view-pg-file-settings.html"" title=""52.7. pg_file_settings"">
          <code class=""structname"">
           pg_file_settings
          </code>
         </a>
         ,
         <a class=""link"" href=""view-pg-hba-file-rules.html"" title=""52.9. pg_hba_file_rules"">
          <code class=""structname"">
           pg_hba_file_rules
          </code>
         </a>
         and
         <a class=""link"" href=""view-pg-ident-file-mappings.html"" title=""52.10. pg_ident_file_mappings"">
          <code class=""structname"">
           pg_ident_file_mappings
          </code>
         </a>
         views to check the configuration files for possible errors, before reloading.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.4.5.2.2.4.1.1.1"" name=""id-1.5.8.34.4.5.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_rotate_logfile
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Signals the log-file manager to switch to a new output file immediately. This works only when the built-in log collector is running, since otherwise there is no log-file manager subprocess.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.4.5.2.2.5.1.1.1"" name=""id-1.5.8.34.4.5.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_terminate_backend
         </code>
         (
         <em class=""parameter"">
          <code>
           pid
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           timeout
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         <code class=""literal"">
          DEFAULT
         </code>
         <code class=""literal"">
          0
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Terminates the session whose backend process has the specified process ID. This is also allowed if the calling role is a member of the role whose backend is being terminated or the calling role has privileges of
         <code class=""literal"">
          pg_signal_backend
         </code>
         , however only superusers can terminate superuser backends.
        </p>
        <p>
         If
         <em class=""parameter"">
          <code>
           timeout
          </code>
         </em>
         is not specified or zero, this function returns
         <code class=""literal"">
          true
         </code>
         whether the process actually terminates or not, indicating only that the sending of the signal was successful. If the
         <em class=""parameter"">
          <code>
           timeout
          </code>
         </em>
         is specified (in milliseconds) and greater than zero, the function waits until the process is actually terminated or until the given time has passed. If the process is terminated, the function returns
         <code class=""literal"">
          true
         </code>
         . On timeout, a warning is emitted and
         <code class=""literal"">
          false
         </code>
         is returned.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <code class=""function"">
    pg_cancel_backend
   </code>
   and
   <code class=""function"">
    pg_terminate_backend
   </code>
   send signals (
   <span class=""systemitem"">
    SIGINT
   </span>
   or
   <span class=""systemitem"">
    SIGTERM
   </span>
   respectively) to backend processes identified by process ID. The process ID of an active backend can be found from the
   <code class=""structfield"">
    pid
   </code>
   column of the
   <code class=""structname"">
    pg_stat_activity
   </code>
   view, or by listing the
   <code class=""command"">
    postgres
   </code>
   processes on the server (using
   <span class=""application"">
    ps
   </span>
   on Unix or the
   <span class=""application"">
    Task Manager
   </span>
   on
   <span class=""productname"">
    Windows
   </span>
   ). The role of an active backend can be found from the
   <code class=""structfield"">
    usename
   </code>
   column of the
   <code class=""structname"">
    pg_stat_activity
   </code>
   view.
  </p>
  <p>
   <code class=""function"">
    pg_log_backend_memory_contexts
   </code>
   can be used to log the memory contexts of a backend process. For example:
  </p>
  <pre class=""programlisting"">
postgres=# SELECT pg_log_backend_memory_contexts(pg_backend_pid());
 pg_log_backend_memory_contexts
--------------------------------
 t
(1 row)
</pre>
  <p>
   One message for each memory context will be logged. For example:
  </p>
  <pre class=""screen"">
LOG:  logging memory contexts of PID 10377
STATEMENT:  SELECT pg_log_backend_memory_contexts(pg_backend_pid());
LOG:  level: 0; TopMemoryContext: 80800 total in 6 blocks; 14432 free (5 chunks); 66368 used
LOG:  level: 1; pgstat TabStatusArray lookup hash table: 8192 total in 1 blocks; 1408 free (0 chunks); 6784 used
LOG:  level: 1; TopTransactionContext: 8192 total in 1 blocks; 7720 free (1 chunks); 472 used
LOG:  level: 1; RowDescriptionContext: 8192 total in 1 blocks; 6880 free (0 chunks); 1312 used
LOG:  level: 1; MessageContext: 16384 total in 2 blocks; 5152 free (0 chunks); 11232 used
LOG:  level: 1; Operator class cache: 8192 total in 1 blocks; 512 free (0 chunks); 7680 used
LOG:  level: 1; smgr relation table: 16384 total in 2 blocks; 4544 free (3 chunks); 11840 used
LOG:  level: 1; TransactionAbortContext: 32768 total in 1 blocks; 32504 free (0 chunks); 264 used
...
LOG:  level: 1; ErrorContext: 8192 total in 1 blocks; 7928 free (3 chunks); 264 used
LOG:  Grand total: 1651920 bytes in 201 blocks; 622360 free (88 chunks); 1029560 used
</pre>
  <p>
   If there are more than 100 child contexts under the same parent, the first 100 child contexts are logged, along with a summary of the remaining contexts. Note that frequent calls to this function could incur significant overhead, because it may generate a large number of log messages.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-BACKUP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.3. Backup Control Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-BACKUP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.34.5.2"" name=""id-1.5.8.34.5.2"">
  </a>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE"" title=""Table 9.95. Backup Control Functions"">
    Table 9.95
   </a>
   assist in making on-line backups. These functions cannot be executed during recovery (except
   <code class=""function"">
    pg_backup_start
   </code>
   ,
   <code class=""function"">
    pg_backup_stop
   </code>
   , and
   <code class=""function"">
    pg_wal_lsn_diff
   </code>
   ).
  </p>
  <p>
   For details about proper usage of these functions, see
   <a class=""xref"" href=""continuous-archiving.html"" title=""25.3. Continuous Archiving and Point-in-Time Recovery (PITR)"">
    Section 25.3
   </a>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-BACKUP-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.95. Backup Control Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Backup Control Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.1.1.1.1"" name=""id-1.5.8.34.5.5.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_create_restore_point
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Creates a named marker record in the write-ahead log that can later be used as a recovery target, and returns the corresponding write-ahead log location. The given name can then be used with
         <a class=""xref"" href=""runtime-config-wal.html#GUC-RECOVERY-TARGET-NAME"">
          recovery_target_name
         </a>
         to specify the point up to which recovery will proceed. Avoid creating multiple restore points with the same name, since recovery will stop at the first one whose name matches the recovery target.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.2.1.1.1"" name=""id-1.5.8.34.5.5.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_wal_flush_lsn
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the current write-ahead log flush location (see notes below).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.3.1.1.1"" name=""id-1.5.8.34.5.5.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_wal_insert_lsn
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the current write-ahead log insert location (see notes below).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.4.1.1.1"" name=""id-1.5.8.34.5.5.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_current_wal_lsn
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the current write-ahead log write location (see notes below).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.5.1.1.1"" name=""id-1.5.8.34.5.5.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_backup_start
         </code>
         (
         <em class=""parameter"">
          <code>
           label
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            fast
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Prepares the server to begin an on-line backup. The only required parameter is an arbitrary user-defined label for the backup. (Typically this would be the name under which the backup dump file will be stored.) If the optional second parameter is given as
         <code class=""literal"">
          true
         </code>
         , it specifies executing
         <code class=""function"">
          pg_backup_start
         </code>
         as quickly as possible. This forces an immediate checkpoint which will cause a spike in I/O operations, slowing any concurrently executing queries.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.6.1.1.1"" name=""id-1.5.8.34.5.5.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_backup_stop
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            wait_for_archive
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           labelfile
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           spcmapfile
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Finishes performing an on-line backup. The desired contents of the backup label file and the tablespace map file are returned as part of the result of the function and must be written to files in the backup area. These files must not be written to the live data directory (doing so will cause PostgreSQL to fail to restart in the event of a crash).
        </p>
        <p>
         There is an optional parameter of type
         <code class=""type"">
          boolean
         </code>
         . If false, the function will return immediately after the backup is completed, without waiting for WAL to be archived. This behavior is only useful with backup software that independently monitors WAL archiving. Otherwise, WAL required to make the backup consistent might be missing and make the backup useless. By default or when this parameter is true,
         <code class=""function"">
          pg_backup_stop
         </code>
         will wait for WAL to be archived when archiving is enabled. (On a standby, this means that it will wait only when
         <code class=""varname"">
          archive_mode
         </code>
         =
         <code class=""literal"">
          always
         </code>
         . If write activity on the primary is low, it may be useful to run
         <code class=""function"">
          pg_switch_wal
         </code>
         on the primary in order to trigger an immediate segment switch.)
        </p>
        <p>
         When executed on a primary, this function also creates a backup history file in the write-ahead log archive area. The history file includes the label given to
         <code class=""function"">
          pg_backup_start
         </code>
         , the starting and ending write-ahead log locations for the backup, and the starting and ending times of the backup. After recording the ending location, the current write-ahead log insertion point is automatically advanced to the next write-ahead log file, so that the ending write-ahead log file can be archived immediately to complete the backup.
        </p>
        <p>
         The result of the function is a single record. The
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         column holds the backup's ending write-ahead log location (which again can be ignored). The second column returns the contents of the backup label file, and the third column returns the contents of the tablespace map file. These must be stored as part of the backup and are required as part of the restore process.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.7.1.1.1"" name=""id-1.5.8.34.5.5.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_switch_wal
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Forces the server to switch to a new write-ahead log file, which allows the current file to be archived (assuming you are using continuous archiving). The result is the ending write-ahead log location plus 1 within the just-completed write-ahead log file. If there has been no write-ahead log activity since the last write-ahead log switch,
         <code class=""function"">
          pg_switch_wal
         </code>
         does nothing and returns the start location of the write-ahead log file currently in use.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.8.1.1.1"" name=""id-1.5.8.34.5.5.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_walfile_name
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Converts a write-ahead log location to the name of the WAL file holding that location.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.9.1.1.1"" name=""id-1.5.8.34.5.5.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_walfile_name_offset
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           file_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           file_offset
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         )
        </p>
        <p>
         Converts a write-ahead log location to a WAL file name and byte offset within that file.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.10.1.1.1"" name=""id-1.5.8.34.5.5.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_split_walfile_name
         </code>
         (
         <em class=""parameter"">
          <code>
           file_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           segment_number
          </code>
         </em>
         <code class=""type"">
          numeric
         </code>
         ,
         <em class=""parameter"">
          <code>
           timeline_id
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         )
        </p>
        <p>
         Extracts the sequence number and timeline ID from a WAL file name.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.5.5.2.2.11.1.1.1"" name=""id-1.5.8.34.5.5.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_wal_lsn_diff
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn1
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn2
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          numeric
         </code>
        </p>
        <p>
         Calculates the difference in bytes (
         <em class=""parameter"">
          <code>
           lsn1
          </code>
         </em>
         -
         <em class=""parameter"">
          <code>
           lsn2
          </code>
         </em>
         ) between two write-ahead log locations. This can be used with
         <code class=""structname"">
          pg_stat_replication
         </code>
         or some of the functions shown in
         <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE"" title=""Table 9.95. Backup Control Functions"">
          Table 9.95
         </a>
         to get the replication lag.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <code class=""function"">
    pg_current_wal_lsn
   </code>
   displays the current write-ahead log write location in the same format used by the above functions. Similarly,
   <code class=""function"">
    pg_current_wal_insert_lsn
   </code>
   displays the current write-ahead log insertion location and
   <code class=""function"">
    pg_current_wal_flush_lsn
   </code>
   displays the current write-ahead log flush location. The insertion location is the
   <span class=""quote"">
    “
    <span class=""quote"">
     logical
    </span>
    ”
   </span>
   end of the write-ahead log at any instant, while the write location is the end of what has actually been written out from the server's internal buffers, and the flush location is the last location known to be written to durable storage. The write location is the end of what can be examined from outside the server, and is usually what you want if you are interested in archiving partially-complete write-ahead log files. The insertion and flush locations are made available primarily for server debugging purposes. These are all read-only operations and do not require superuser permissions.
  </p>
  <p>
   You can use
   <code class=""function"">
    pg_walfile_name_offset
   </code>
   to extract the corresponding write-ahead log file name and byte offset from a
   <code class=""type"">
    pg_lsn
   </code>
   value. For example:
  </p>
  <pre class=""programlisting"">
postgres=# SELECT * FROM pg_walfile_name_offset((pg_backup_stop()).lsn);
        file_name         | file_offset
--------------------------+-------------
 00000001000000000000000D |     4039624
(1 row)
</pre>
  <p>
   Similarly,
   <code class=""function"">
    pg_walfile_name
   </code>
   extracts just the write-ahead log file name.
  </p>
  <p>
   <code class=""function"">
    pg_split_walfile_name
   </code>
   is useful to compute a
   <acronym class=""acronym"">
    LSN
   </acronym>
   from a file offset and WAL file name, for example:
  </p>
  <pre class=""programlisting"">
postgres=# \set file_name '000000010000000100C000AB'
postgres=# \set offset 256
postgres=# SELECT '0/0'::pg_lsn + pd.segment_number * ps.setting::int + :offset AS lsn
  FROM pg_split_walfile_name(:'file_name') pd,
       pg_show_all_settings() ps
  WHERE ps.name = 'wal_segment_size';
      lsn
---------------
 C001/AB000100
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-RECOVERY-CONTROL"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.4. Recovery Control Functions
      <a class=""id_link"" href=""#FUNCTIONS-RECOVERY-CONTROL"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-RECOVERY-INFO-TABLE"" title=""Table 9.96. Recovery Information Functions"">
    Table 9.96
   </a>
   provide information about the current status of a standby server. These functions may be executed both during recovery and in normal running.
  </p>
  <div class=""table"" id=""FUNCTIONS-RECOVERY-INFO-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.96. Recovery Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Recovery Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.3.2.2.1.1.1.1"" name=""id-1.5.8.34.6.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_is_in_recovery
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns true if recovery is still in progress.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.3.2.2.2.1.1.1"" name=""id-1.5.8.34.6.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_last_wal_receive_lsn
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the last write-ahead log location that has been received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed then this will remain static at the location of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns
         <code class=""literal"">
          NULL
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.3.2.2.3.1.1.1"" name=""id-1.5.8.34.6.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_last_wal_replay_lsn
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the last write-ahead log location that has been replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this will remain static at the location of the last WAL record applied during recovery. When the server has been started normally without recovery, the function returns
         <code class=""literal"">
          NULL
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.3.2.2.4.1.1.1"" name=""id-1.5.8.34.6.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_last_xact_replay_timestamp
         </code>
         () →
         <code class=""returnvalue"">
          timestamp with time zone
         </code>
        </p>
        <p>
         Returns the time stamp of the last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, the function returns
         <code class=""literal"">
          NULL
         </code>
         . Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this will remain static at the time of the last transaction applied during recovery. When the server has been started normally without recovery, the function returns
         <code class=""literal"">
          NULL
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.3.2.2.5.1.1.1"" name=""id-1.5.8.34.6.3.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_wal_resource_managers
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           rm_id
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           rm_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           rm_builtin
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         )
        </p>
        <p>
         Returns the currently-loaded WAL resource managers in the system. The column
         <em class=""parameter"">
          <code>
           rm_builtin
          </code>
         </em>
         indicates whether it's a built-in resource manager, or a custom resource manager loaded by an extension.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-RECOVERY-CONTROL-TABLE"" title=""Table 9.97. Recovery Control Functions"">
    Table 9.97
   </a>
   control the progress of recovery. These functions may be executed only during recovery.
  </p>
  <div class=""table"" id=""FUNCTIONS-RECOVERY-CONTROL-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.97. Recovery Control Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Recovery Control Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.5.2.2.1.1.1.1"" name=""id-1.5.8.34.6.5.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_is_wal_replay_paused
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns true if recovery pause is requested.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.5.2.2.2.1.1.1"" name=""id-1.5.8.34.6.5.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_get_wal_replay_pause_state
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns recovery pause state. The return values are
         <code class=""literal"">
          not paused
         </code>
         if pause is not requested,
         <code class=""literal"">
          pause requested
         </code>
         if pause is requested but recovery is not yet paused, and
         <code class=""literal"">
          paused
         </code>
         if the recovery is actually paused.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.5.2.2.3.1.1.1"" name=""id-1.5.8.34.6.5.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_promote
         </code>
         (
         <em class=""parameter"">
          <code>
           wait
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         <code class=""literal"">
          DEFAULT
         </code>
         <code class=""literal"">
          true
         </code>
         ,
         <em class=""parameter"">
          <code>
           wait_seconds
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         <code class=""literal"">
          DEFAULT
         </code>
         <code class=""literal"">
          60
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Promotes a standby server to primary status. With
         <em class=""parameter"">
          <code>
           wait
          </code>
         </em>
         set to
         <code class=""literal"">
          true
         </code>
         (the default), the function waits until promotion is completed or
         <em class=""parameter"">
          <code>
           wait_seconds
          </code>
         </em>
         seconds have passed, and returns
         <code class=""literal"">
          true
         </code>
         if promotion is successful and
         <code class=""literal"">
          false
         </code>
         otherwise. If
         <em class=""parameter"">
          <code>
           wait
          </code>
         </em>
         is set to
         <code class=""literal"">
          false
         </code>
         , the function returns
         <code class=""literal"">
          true
         </code>
         immediately after sending a
         <code class=""literal"">
          SIGUSR1
         </code>
         signal to the postmaster to trigger promotion.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.5.2.2.4.1.1.1"" name=""id-1.5.8.34.6.5.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_wal_replay_pause
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Request to pause recovery. A request doesn't mean that recovery stops right away. If you want a guarantee that recovery is actually paused, you need to check for the recovery pause state returned by
         <code class=""function"">
          pg_get_wal_replay_pause_state()
         </code>
         . Note that
         <code class=""function"">
          pg_is_wal_replay_paused()
         </code>
         returns whether a request is made. While recovery is paused, no further database changes are applied. If hot standby is active, all new queries will see the same consistent snapshot of the database, and no further query conflicts will be generated until recovery is resumed.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.6.5.2.2.5.1.1.1"" name=""id-1.5.8.34.6.5.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_wal_replay_resume
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Restarts recovery if it was paused.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <code class=""function"">
    pg_wal_replay_pause
   </code>
   and
   <code class=""function"">
    pg_wal_replay_resume
   </code>
   cannot be executed while a promotion is ongoing. If a promotion is triggered while recovery is paused, the paused state ends and promotion continues.
  </p>
  <p>
   If streaming replication is disabled, the paused state may continue indefinitely without a problem. If streaming replication is in progress then WAL records will continue to be received, which will eventually fill available disk space, depending upon the duration of the pause, the rate of WAL generation and available disk space.
  </p>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-SNAPSHOT-SYNCHRONIZATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.5. Snapshot Synchronization Functions
      <a class=""id_link"" href=""#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   allows database sessions to synchronize their snapshots. A
   <em class=""firstterm"">
    snapshot
   </em>
   determines which data is visible to the transaction that is using the snapshot. Synchronized snapshots are necessary when two or more sessions need to see identical content in the database. If two sessions just start their transactions independently, there is always a possibility that some third transaction commits between the executions of the two
   <code class=""command"">
    START TRANSACTION
   </code>
   commands, so that one session sees the effects of that transaction and the other does not.
  </p>
  <p>
   To solve this problem,
   <span class=""productname"">
    PostgreSQL
   </span>
   allows a transaction to
   <em class=""firstterm"">
    export
   </em>
   the snapshot it is using. As long as the exporting transaction remains open, other transactions can
   <em class=""firstterm"">
    import
   </em>
   its snapshot, and thereby be guaranteed that they see exactly the same view of the database that the first transaction sees. But note that any database changes made by any one of these transactions remain invisible to the other transactions, as is usual for changes made by uncommitted transactions. So the transactions are synchronized with respect to pre-existing data, but act normally for changes they make themselves.
  </p>
  <p>
   Snapshots are exported with the
   <code class=""function"">
    pg_export_snapshot
   </code>
   function, shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION-TABLE"" title=""Table 9.98. Snapshot Synchronization Functions"">
    Table 9.98
   </a>
   , and imported with the
   <a class=""xref"" href=""sql-set-transaction.html"" title=""SET TRANSACTION"">
    <span class=""refentrytitle"">
     SET TRANSACTION
    </span>
   </a>
   command.
  </p>
  <div class=""table"" id=""FUNCTIONS-SNAPSHOT-SYNCHRONIZATION-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.98. Snapshot Synchronization Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Snapshot Synchronization Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.7.5.2.2.1.1.1.1"" name=""id-1.5.8.34.7.5.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_export_snapshot
         </code>
         () →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Saves the transaction's current snapshot and returns a
         <code class=""type"">
          text
         </code>
         string identifying the snapshot. This string must be passed (outside the database) to clients that want to import the snapshot. The snapshot is available for import only until the end of the transaction that exported it.
        </p>
        <p>
         A transaction can export more than one snapshot, if needed. Note that doing so is only useful in
         <code class=""literal"">
          READ COMMITTED
         </code>
         transactions, since in
         <code class=""literal"">
          REPEATABLE READ
         </code>
         and higher isolation levels, transactions use the same snapshot throughout their lifetime. Once a transaction has exported any snapshots, it cannot be prepared with
         <a class=""xref"" href=""sql-prepare-transaction.html"" title=""PREPARE TRANSACTION"">
          <span class=""refentrytitle"">
           PREPARE TRANSACTION
          </span>
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.7.5.2.2.2.1.1.1"" name=""id-1.5.8.34.7.5.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_log_standby_snapshot
         </code>
         () →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Take a snapshot of running transactions and write it to WAL, without having to wait for bgwriter or checkpointer to log one. This is useful for logical decoding on standby, as logical slot creation has to wait until such a record is replayed on the standby.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-REPLICATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.6. Replication Management Functions
      <a class=""id_link"" href=""#FUNCTIONS-REPLICATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-REPLICATION-TABLE"" title=""Table 9.99. Replication Management Functions"">
    Table 9.99
   </a>
   are for controlling and interacting with replication features. See
   <a class=""xref"" href=""warm-standby.html#STREAMING-REPLICATION"" title=""26.2.5. Streaming Replication"">
    Section 26.2.5
   </a>
   ,
   <a class=""xref"" href=""warm-standby.html#STREAMING-REPLICATION-SLOTS"" title=""26.2.6. Replication Slots"">
    Section 26.2.6
   </a>
   , and
   <a class=""xref"" href=""replication-origins.html"" title=""Chapter 48. Replication Progress Tracking"">
    Chapter 48
   </a>
   for information about the underlying features. Use of functions for replication origin is only allowed to the superuser by default, but may be allowed to other users by using the
   <code class=""literal"">
    GRANT
   </code>
   command. Use of functions for replication slots is restricted to superusers and users having
   <code class=""literal"">
    REPLICATION
   </code>
   privilege.
  </p>
  <p>
   Many of these functions have equivalent commands in the replication protocol; see
   <a class=""xref"" href=""protocol-replication.html"" title=""53.4. Streaming Replication Protocol"">
    Section 53.4
   </a>
   .
  </p>
  <p>
   The functions described in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-BACKUP"" title=""9.28.3. Backup Control Functions"">
    Section 9.28.3
   </a>
   ,
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-RECOVERY-CONTROL"" title=""9.28.4. Recovery Control Functions"">
    Section 9.28.4
   </a>
   , and
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-SNAPSHOT-SYNCHRONIZATION"" title=""9.28.5. Snapshot Synchronization Functions"">
    Section 9.28.5
   </a>
   are also relevant for replication.
  </p>
  <div class=""table"" id=""FUNCTIONS-REPLICATION-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.99. Replication Management Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Replication Management Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.1.1.1.1"" name=""id-1.5.8.34.8.5.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_create_physical_replication_slot
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            immediately_reserve
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          ,
          <em class=""parameter"">
           <code>
            temporary
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Creates a new physical replication slot named
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         . The optional second parameter, when
         <code class=""literal"">
          true
         </code>
         , specifies that the
         <acronym class=""acronym"">
          LSN
         </acronym>
         for this replication slot be reserved immediately; otherwise the
         <acronym class=""acronym"">
          LSN
         </acronym>
         is reserved on first connection from a streaming replication client. Streaming changes from a physical slot is only possible with the streaming-replication protocol — see
         <a class=""xref"" href=""protocol-replication.html"" title=""53.4. Streaming Replication Protocol"">
          Section 53.4
         </a>
         . The optional third parameter,
         <em class=""parameter"">
          <code>
           temporary
          </code>
         </em>
         , when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by the current session. Temporary slots are also released upon any error. This function corresponds to the replication protocol command
         <code class=""literal"">
          CREATE_REPLICATION_SLOT ... PHYSICAL
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.2.1.1.1"" name=""id-1.5.8.34.8.5.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_drop_replication_slot
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Drops the physical or logical replication slot named
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         . Same as replication protocol command
         <code class=""literal"">
          DROP_REPLICATION_SLOT
         </code>
         . For logical slots, this must be called while connected to the same database the slot was created on.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-CREATE-LOGICAL-REPLICATION-SLOT"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.3.1.1.1"" name=""id-1.5.8.34.8.5.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_create_logical_replication_slot
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           plugin
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            temporary
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          ,
          <em class=""parameter"">
           <code>
            twophase
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          ,
          <em class=""parameter"">
           <code>
            failover
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Creates a new logical (decoding) replication slot named
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         using the output plugin
         <em class=""parameter"">
          <code>
           plugin
          </code>
         </em>
         . The optional third parameter,
         <em class=""parameter"">
          <code>
           temporary
          </code>
         </em>
         , when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by the current session. Temporary slots are also released upon any error. The optional fourth parameter,
         <em class=""parameter"">
          <code>
           twophase
          </code>
         </em>
         , when set to true, specifies that the decoding of prepared transactions is enabled for this slot. The optional fifth parameter,
         <em class=""parameter"">
          <code>
           failover
          </code>
         </em>
         , when set to true, specifies that this slot is enabled to be synced to the standbys so that logical replication can be resumed after failover. A call to this function has the same effect as the replication protocol command
         <code class=""literal"">
          CREATE_REPLICATION_SLOT ... LOGICAL
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.4.1.1.1"" name=""id-1.5.8.34.8.5.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_copy_physical_replication_slot
         </code>
         (
         <em class=""parameter"">
          <code>
           src_slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           dst_slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            temporary
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Copies an existing physical replication slot named
         <em class=""parameter"">
          <code>
           src_slot_name
          </code>
         </em>
         to a physical replication slot named
         <em class=""parameter"">
          <code>
           dst_slot_name
          </code>
         </em>
         . The copied physical slot starts to reserve WAL from the same
         <acronym class=""acronym"">
          LSN
         </acronym>
         as the source slot.
         <em class=""parameter"">
          <code>
           temporary
          </code>
         </em>
         is optional. If
         <em class=""parameter"">
          <code>
           temporary
          </code>
         </em>
         is omitted, the same value as the source slot is used.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.5.1.1.1"" name=""id-1.5.8.34.8.5.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_copy_logical_replication_slot
         </code>
         (
         <em class=""parameter"">
          <code>
           src_slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           dst_slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            temporary
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          [
          <span class=""optional"">
           ,
           <em class=""parameter"">
            <code>
             plugin
            </code>
           </em>
           <code class=""type"">
            name
           </code>
          </span>
          ]
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Copies an existing logical replication slot named
         <em class=""parameter"">
          <code>
           src_slot_name
          </code>
         </em>
         to a logical replication slot named
         <em class=""parameter"">
          <code>
           dst_slot_name
          </code>
         </em>
         , optionally changing the output plugin and persistence. The copied logical slot starts from the same
         <acronym class=""acronym"">
          LSN
         </acronym>
         as the source logical slot. Both
         <em class=""parameter"">
          <code>
           temporary
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           plugin
          </code>
         </em>
         are optional; if they are omitted, the values of the source slot are used.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-LOGICAL-SLOT-GET-CHANGES"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.6.1.1.1"" name=""id-1.5.8.34.8.5.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_logical_slot_get_changes
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           xid
          </code>
         </em>
         <code class=""type"">
          xid
         </code>
         ,
         <em class=""parameter"">
          <code>
           data
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Returns changes in the slot
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         , starting from the point from which changes have been consumed last. If
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         are NULL, logical decoding will continue until end of WAL. If
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit. If the specified slot is a logical failover slot then the function will not return until all physical slots specified in
         <a class=""link"" href=""runtime-config-replication.html#GUC-SYNCHRONIZED-STANDBY-SLOTS"">
          <code class=""varname"">
           synchronized_standby_slots
          </code>
         </a>
         have confirmed WAL receipt.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-LOGICAL-SLOT-PEEK-CHANGES"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.7.1.1.1"" name=""id-1.5.8.34.8.5.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_logical_slot_peek_changes
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           xid
          </code>
         </em>
         <code class=""type"">
          xid
         </code>
         ,
         <em class=""parameter"">
          <code>
           data
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         )
        </p>
        <p>
         Behaves just like the
         <code class=""function"">
          pg_logical_slot_get_changes()
         </code>
         function, except that changes are not consumed; that is, they will be returned again on future calls.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.8.1.1.1"" name=""id-1.5.8.34.8.5.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_logical_slot_get_binary_changes
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           xid
          </code>
         </em>
         <code class=""type"">
          xid
         </code>
         ,
         <em class=""parameter"">
          <code>
           data
          </code>
         </em>
         <code class=""type"">
          bytea
         </code>
         )
        </p>
        <p>
         Behaves just like the
         <code class=""function"">
          pg_logical_slot_get_changes()
         </code>
         function, except that changes are returned as
         <code class=""type"">
          bytea
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.9.1.1.1"" name=""id-1.5.8.34.8.5.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_logical_slot_peek_binary_changes
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_nchanges
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <code class=""literal"">
          VARIADIC
         </code>
         <em class=""parameter"">
          <code>
           options
          </code>
         </em>
         <code class=""type"">
          text[]
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           xid
          </code>
         </em>
         <code class=""type"">
          xid
         </code>
         ,
         <em class=""parameter"">
          <code>
           data
          </code>
         </em>
         <code class=""type"">
          bytea
         </code>
         )
        </p>
        <p>
         Behaves just like the
         <code class=""function"">
          pg_logical_slot_peek_changes()
         </code>
         function, except that changes are returned as
         <code class=""type"">
          bytea
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-SLOT-ADVANCE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.10.1.1.1"" name=""id-1.5.8.34.8.5.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_slot_advance
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           upto_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          name
         </code>
         ,
         <em class=""parameter"">
          <code>
           end_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         )
        </p>
        <p>
         Advances the current confirmed position of a replication slot named
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         . The slot will not be moved backwards, and it will not be moved beyond the current insert location. Returns the name of the slot and the actual position that it was advanced to. The updated slot position information is written out at the next checkpoint if any advancing is done. So in the event of a crash, the slot may return to an earlier position. If the specified slot is a logical failover slot then the function will not return until all physical slots specified in
         <a class=""link"" href=""runtime-config-replication.html#GUC-SYNCHRONIZED-STANDBY-SLOTS"">
          <code class=""varname"">
           synchronized_standby_slots
          </code>
         </a>
         have confirmed WAL receipt.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-CREATE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.11.1.1.1"" name=""id-1.5.8.34.8.5.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_create
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Creates a replication origin with the given external name, and returns the internal ID assigned to it.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-DROP"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.12.1.1.1"" name=""id-1.5.8.34.8.5.2.2.12.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_drop
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Deletes a previously-created replication origin, including any associated replay progress.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.13.1.1.1"" name=""id-1.5.8.34.8.5.2.2.13.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_oid
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Looks up a replication origin by name and returns the internal ID. If no such replication origin is found,
         <code class=""literal"">
          NULL
         </code>
         is returned.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-SESSION-SETUP"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.14.1.1.1"" name=""id-1.5.8.34.8.5.2.2.14.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_session_setup
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Marks the current session as replaying from the given origin, allowing replay progress to be tracked. Can only be used if no origin is currently selected. Use
         <code class=""function"">
          pg_replication_origin_session_reset
         </code>
         to undo.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.15.1.1.1"" name=""id-1.5.8.34.8.5.2.2.15.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_session_reset
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Cancels the effects of
         <code class=""function"">
          pg_replication_origin_session_setup()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.16.1.1.1"" name=""id-1.5.8.34.8.5.2.2.16.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_session_is_setup
         </code>
         () →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Returns true if a replication origin has been selected in the current session.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-SESSION-PROGRESS"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.17.1.1.1"" name=""id-1.5.8.34.8.5.2.2.17.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_session_progress
         </code>
         (
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the replay location for the replication origin selected in the current session. The parameter
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-XACT-SETUP"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.18.1.1.1"" name=""id-1.5.8.34.8.5.2.2.18.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_xact_setup
         </code>
         (
         <em class=""parameter"">
          <code>
           origin_lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ,
         <em class=""parameter"">
          <code>
           origin_timestamp
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Marks the current transaction as replaying a transaction that has committed at the given
         <acronym class=""acronym"">
          LSN
         </acronym>
         and timestamp. Can only be called when a replication origin has been selected using
         <code class=""function"">
          pg_replication_origin_session_setup
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-XACT-RESET"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.19.1.1.1"" name=""id-1.5.8.34.8.5.2.2.19.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_xact_reset
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Cancels the effects of
         <code class=""function"">
          pg_replication_origin_xact_setup()
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-ADVANCE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.20.1.1.1"" name=""id-1.5.8.34.8.5.2.2.20.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_advance
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           lsn
          </code>
         </em>
         <code class=""type"">
          pg_lsn
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Sets replication progress for the given node to the given location. This is primarily useful for setting up the initial location, or setting a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-REPLICATION-ORIGIN-PROGRESS"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.21.1.1.1"" name=""id-1.5.8.34.8.5.2.2.21.1.1.1"">
         </a>
         <code class=""function"">
          pg_replication_origin_progress
         </code>
         (
         <em class=""parameter"">
          <code>
           node_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Returns the replay location for the given replication origin. The parameter
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-LOGICAL-EMIT-MESSAGE"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.22.1.1.1"" name=""id-1.5.8.34.8.5.2.2.22.1.1.1"">
         </a>
         <code class=""function"">
          pg_logical_emit_message
         </code>
         (
         <em class=""parameter"">
          <code>
           transactional
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ,
         <em class=""parameter"">
          <code>
           prefix
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           content
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [,
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         <code class=""literal"">
          DEFAULT
         </code>
         <code class=""literal"">
          false
         </code>
         ] ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_logical_emit_message
         </code>
         (
         <em class=""parameter"">
          <code>
           transactional
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ,
         <em class=""parameter"">
          <code>
           prefix
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           content
          </code>
         </em>
         <code class=""type"">
          bytea
         </code>
         [,
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         <code class=""literal"">
          DEFAULT
         </code>
         <code class=""literal"">
          false
         </code>
         ] ) →
         <code class=""returnvalue"">
          pg_lsn
         </code>
        </p>
        <p>
         Emits a logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The
         <em class=""parameter"">
          <code>
           transactional
          </code>
         </em>
         parameter specifies if the message should be part of the current transaction, or if it should be written immediately and decoded as soon as the logical decoder reads the record. The
         <em class=""parameter"">
          <code>
           prefix
          </code>
         </em>
         parameter is a textual prefix that can be used by logical decoding plugins to easily recognize messages that are interesting for them. The
         <em class=""parameter"">
          <code>
           content
          </code>
         </em>
         parameter is the content of the message, given either in text or binary form. The
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         parameter (default set to
         <code class=""literal"">
          false
         </code>
         ) controls if the message is immediately flushed to WAL or not.
         <em class=""parameter"">
          <code>
           flush
          </code>
         </em>
         has no effect with
         <em class=""parameter"">
          <code>
           transactional
          </code>
         </em>
         , as the message's WAL record is flushed along with its transaction.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"" id=""PG-SYNC-REPLICATION-SLOTS"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.8.5.2.2.23.1.1.1"" name=""id-1.5.8.34.8.5.2.2.23.1.1.1"">
         </a>
         <code class=""function"">
          pg_sync_replication_slots
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Synchronize the logical failover replication slots from the primary server to the standby server. This function can only be executed on the standby server. Temporary synced slots, if any, cannot be used for logical decoding and must be dropped after promotion. See
         <a class=""xref"" href=""logicaldecoding-explanation.html#LOGICALDECODING-REPLICATION-SLOTS-SYNCHRONIZATION"" title=""47.2.3. Replication Slot Synchronization"">
          Section 47.2.3
         </a>
         for details. Note that this function cannot be executed if
         <a class=""link"" href=""runtime-config-replication.html#GUC-SYNC-REPLICATION-SLOTS"">
          <code class=""varname"">
           sync_replication_slots
          </code>
         </a>
         is enabled and the slotsync worker is already running to perform the synchronization of slots.
        </p>
        <div class=""caution"">
         <h3 class=""title"">
          Caution
         </h3>
         <p>
          If, after executing the function,
          <a class=""link"" href=""runtime-config-replication.html#GUC-HOT-STANDBY-FEEDBACK"">
           <code class=""varname"">
            hot_standby_feedback
           </code>
          </a>
          is disabled on the standby or the physical slot configured in
          <a class=""link"" href=""runtime-config-replication.html#GUC-PRIMARY-SLOT-NAME"">
           <code class=""varname"">
            primary_slot_name
           </code>
          </a>
          is removed, then it is possible that the necessary rows of the synchronized slot will be removed by the VACUUM process on the primary server, resulting in the synchronized slot becoming invalidated.
         </p>
        </div>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-DBOBJECT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.7. Database Object Management Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-DBOBJECT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-DBSIZE"" title=""Table 9.100. Database Object Size Functions"">
    Table 9.100
   </a>
   calculate the disk space usage of database objects, or assist in presentation or understanding of usage results.
   <code class=""literal"">
    bigint
   </code>
   results are measured in bytes. If an OID that does not represent an existing object is passed to one of these functions,
   <code class=""literal"">
    NULL
   </code>
   is returned.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-DBSIZE"">
   <p class=""title"">
    <strong>
     Table 9.100. Database Object Size Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Database Object Size Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.1.1.1.1"" name=""id-1.5.8.34.9.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_column_size
         </code>
         (
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Shows the number of bytes used to store any individual data value. If applied directly to a table column value, this reflects any compression that was done.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.2.1.1.1"" name=""id-1.5.8.34.9.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_column_compression
         </code>
         (
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Shows the compression algorithm that was used to compress an individual variable-length value. Returns
         <code class=""literal"">
          NULL
         </code>
         if the value is not compressed.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.3.1.1.1"" name=""id-1.5.8.34.9.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_column_toast_chunk_id
         </code>
         (
         <code class=""type"">
          ""any""
         </code>
         ) →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Shows the
         <code class=""structfield"">
          chunk_id
         </code>
         of an on-disk
         <acronym class=""acronym"">
          TOAST
         </acronym>
         ed value. Returns
         <code class=""literal"">
          NULL
         </code>
         if the value is un-
         <acronym class=""acronym"">
          TOAST
         </acronym>
         ed or not on-disk. See
         <a class=""xref"" href=""storage-toast.html"" title=""65.2. TOAST"">
          Section 65.2
         </a>
         for more information about
         <acronym class=""acronym"">
          TOAST
         </acronym>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.4.1.1.1"" name=""id-1.5.8.34.9.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_database_size
         </code>
         (
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_database_size
         </code>
         (
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the total disk space used by the database with the specified name or OID. To use this function, you must have
         <code class=""literal"">
          CONNECT
         </code>
         privilege on the specified database (which is granted by default) or have privileges of the
         <code class=""literal"">
          pg_read_all_stats
         </code>
         role.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.5.1.1.1"" name=""id-1.5.8.34.9.3.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_indexes_size
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the total disk space used by indexes attached to the specified table.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.6.1.1.1"" name=""id-1.5.8.34.9.3.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_relation_size
         </code>
         (
         <em class=""parameter"">
          <code>
           relation
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            fork
           </code>
          </em>
          <code class=""type"">
           text
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the disk space used by one
         <span class=""quote"">
          “
          <span class=""quote"">
           fork
          </span>
          ”
         </span>
         of the specified relation. (Note that for most purposes it is more convenient to use the higher-level functions
         <code class=""function"">
          pg_total_relation_size
         </code>
         or
         <code class=""function"">
          pg_table_size
         </code>
         , which sum the sizes of all forks.) With one argument, this returns the size of the main data fork of the relation. The second argument can be provided to specify which fork to examine:
        </p>
        <div class=""itemizedlist"">
         <ul class=""itemizedlist compact"" style=""list-style-type: disc;"">
          <li class=""listitem"">
           <p>
            <code class=""literal"">
             main
            </code>
            returns the size of the main data fork of the relation.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            <code class=""literal"">
             fsm
            </code>
            returns the size of the Free Space Map (see
            <a class=""xref"" href=""storage-fsm.html"" title=""65.3. Free Space Map"">
             Section 65.3
            </a>
            ) associated with the relation.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            <code class=""literal"">
             vm
            </code>
            returns the size of the Visibility Map (see
            <a class=""xref"" href=""storage-vm.html"" title=""65.4. Visibility Map"">
             Section 65.4
            </a>
            ) associated with the relation.
           </p>
          </li>
          <li class=""listitem"">
           <p>
            <code class=""literal"">
             init
            </code>
            returns the size of the initialization fork, if any, associated with the relation.
           </p>
          </li>
         </ul>
        </div>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.7.1.1.1"" name=""id-1.5.8.34.9.3.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_size_bytes
         </code>
         (
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Converts a size in human-readable format (as returned by
         <code class=""function"">
          pg_size_pretty
         </code>
         ) into bytes. Valid units are
         <code class=""literal"">
          bytes
         </code>
         ,
         <code class=""literal"">
          B
         </code>
         ,
         <code class=""literal"">
          kB
         </code>
         ,
         <code class=""literal"">
          MB
         </code>
         ,
         <code class=""literal"">
          GB
         </code>
         ,
         <code class=""literal"">
          TB
         </code>
         , and
         <code class=""literal"">
          PB
         </code>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.8.1.1.1"" name=""id-1.5.8.34.9.3.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_size_pretty
         </code>
         (
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_size_pretty
         </code>
         (
         <code class=""type"">
          numeric
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Converts a size in bytes into a more easily human-readable format with size units (bytes, kB, MB, GB, TB, or PB as appropriate). Note that the units are powers of 2 rather than powers of 10, so 1kB is 1024 bytes, 1MB is 1024
         <sup>
          2
         </sup>
         = 1048576 bytes, and so on.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.9.1.1.1"" name=""id-1.5.8.34.9.3.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_table_size
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the disk space used by the specified table, excluding indexes (but including its TOAST table if any, free space map, and visibility map).
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.10.1.1.1"" name=""id-1.5.8.34.9.3.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_tablespace_size
         </code>
         (
         <code class=""type"">
          name
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_tablespace_size
         </code>
         (
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the total disk space used in the tablespace with the specified name or OID. To use this function, you must have
         <code class=""literal"">
          CREATE
         </code>
         privilege on the specified tablespace or have privileges of the
         <code class=""literal"">
          pg_read_all_stats
         </code>
         role, unless it is the default tablespace for the current database.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.3.2.2.11.1.1.1"" name=""id-1.5.8.34.9.3.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_total_relation_size
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Computes the total disk space used by the specified table, including all indexes and
         <acronym class=""acronym"">
          TOAST
         </acronym>
         data. The result is equivalent to
         <code class=""function"">
          pg_table_size
         </code>
         <code class=""literal"">
          +
         </code>
         <code class=""function"">
          pg_indexes_size
         </code>
         .
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   The functions above that operate on tables or indexes accept a
   <code class=""type"">
    regclass
   </code>
   argument, which is simply the OID of the table or index in the
   <code class=""structname"">
    pg_class
   </code>
   system catalog. You do not have to look up the OID by hand, however, since the
   <code class=""type"">
    regclass
   </code>
   data type's input converter will do the work for you. See
   <a class=""xref"" href=""datatype-oid.html"" title=""8.19. Object Identifier Types"">
    Section 8.19
   </a>
   for details.
  </p>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-DBLOCATION"" title=""Table 9.101. Database Object Location Functions"">
    Table 9.101
   </a>
   assist in identifying the specific disk files associated with database objects.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-DBLOCATION"">
   <p class=""title"">
    <strong>
     Table 9.101. Database Object Location Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Database Object Location Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.6.2.2.1.1.1.1"" name=""id-1.5.8.34.9.6.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_relation_filenode
         </code>
         (
         <em class=""parameter"">
          <code>
           relation
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Returns the
         <span class=""quote"">
          “
          <span class=""quote"">
           filenode
          </span>
          ”
         </span>
         number currently assigned to the specified relation. The filenode is the base component of the file name(s) used for the relation (see
         <a class=""xref"" href=""storage-file-layout.html"" title=""65.1. Database File Layout"">
          Section 65.1
         </a>
         for more information). For most relations the result is the same as
         <code class=""structname"">
          pg_class
         </code>
         .
         <code class=""structfield"">
          relfilenode
         </code>
         , but for certain system catalogs
         <code class=""structfield"">
          relfilenode
         </code>
         is zero and this function must be used to get the correct value. The function returns NULL if passed a relation that does not have storage, such as a view.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.6.2.2.2.1.1.1"" name=""id-1.5.8.34.9.6.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_relation_filepath
         </code>
         (
         <em class=""parameter"">
          <code>
           relation
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the entire file path name (relative to the database cluster's data directory,
         <code class=""varname"">
          PGDATA
         </code>
         ) of the relation.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.6.2.2.3.1.1.1"" name=""id-1.5.8.34.9.6.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_filenode_relation
         </code>
         (
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ,
         <em class=""parameter"">
          <code>
           filenode
          </code>
         </em>
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          regclass
         </code>
        </p>
        <p>
         Returns a relation's OID given the tablespace OID and filenode it is stored under. This is essentially the inverse mapping of
         <code class=""function"">
          pg_relation_filepath
         </code>
         . For a relation in the database's default tablespace, the tablespace can be specified as zero. Returns
         <code class=""literal"">
          NULL
         </code>
         if no relation in the current database is associated with the given values.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-COLLATION"" title=""Table 9.102. Collation Management Functions"">
    Table 9.102
   </a>
   lists functions used to manage collations.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-COLLATION"">
   <p class=""title"">
    <strong>
     Table 9.102. Collation Management Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Collation Management Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.8.2.2.1.1.1.1"" name=""id-1.5.8.34.9.8.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_collation_actual_version
         </code>
         (
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the actual version of the collation object as it is currently installed in the operating system. If this is different from the value in
         <code class=""structname"">
          pg_collation
         </code>
         .
         <code class=""structfield"">
          collversion
         </code>
         , then objects depending on the collation might need to be rebuilt. See also
         <a class=""xref"" href=""sql-altercollation.html"" title=""ALTER COLLATION"">
          <span class=""refentrytitle"">
           ALTER COLLATION
          </span>
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.8.2.2.2.1.1.1"" name=""id-1.5.8.34.9.8.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_database_collation_actual_version
         </code>
         (
         <code class=""type"">
          oid
         </code>
         ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns the actual version of the database's collation as it is currently installed in the operating system. If this is different from the value in
         <code class=""structname"">
          pg_database
         </code>
         .
         <code class=""structfield"">
          datcollversion
         </code>
         , then objects depending on the collation might need to be rebuilt. See also
         <a class=""xref"" href=""sql-alterdatabase.html"" title=""ALTER DATABASE"">
          <span class=""refentrytitle"">
           ALTER DATABASE
          </span>
         </a>
         .
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.8.2.2.3.1.1.1"" name=""id-1.5.8.34.9.8.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_import_system_collations
         </code>
         (
         <em class=""parameter"">
          <code>
           schema
          </code>
         </em>
         <code class=""type"">
          regnamespace
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Adds collations to the system catalog
         <code class=""structname"">
          pg_collation
         </code>
         based on all the locales it finds in the operating system. This is what
         <code class=""command"">
          initdb
         </code>
         uses; see
         <a class=""xref"" href=""collation.html#COLLATION-MANAGING"" title=""23.2.2. Managing Collations"">
          Section 23.2.2
         </a>
         for more details. If additional locales are installed into the operating system later on, this function can be run again to add collations for the new locales. Locales that match existing entries in
         <code class=""structname"">
          pg_collation
         </code>
         will be skipped. (But collation objects based on locales that are no longer present in the operating system are not removed by this function.) The
         <em class=""parameter"">
          <code>
           schema
          </code>
         </em>
         parameter would typically be
         <code class=""literal"">
          pg_catalog
         </code>
         , but that is not a requirement; the collations could be installed into some other schema as well. The function returns the number of new collation objects it created. Use of this function is restricted to superusers.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-INFO-PARTITION"" title=""Table 9.103. Partitioning Information Functions"">
    Table 9.103
   </a>
   lists functions that provide information about the structure of partitioned tables.
  </p>
  <div class=""table"" id=""FUNCTIONS-INFO-PARTITION"">
   <p class=""title"">
    <strong>
     Table 9.103. Partitioning Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Partitioning Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.10.2.2.1.1.1.1"" name=""id-1.5.8.34.9.10.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_partition_tree
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           relid
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           parentrelid
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           isleaf
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         ,
         <em class=""parameter"">
          <code>
           level
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         )
        </p>
        <p>
         Lists the tables or indexes in the partition tree of the given partitioned table or partitioned index, with one row for each partition. Information provided includes the OID of the partition, the OID of its immediate parent, a boolean value telling if the partition is a leaf, and an integer telling its level in the hierarchy. The level value is 0 for the input table or index, 1 for its immediate child partitions, 2 for their partitions, and so on. Returns no rows if the relation does not exist or is not a partition or partitioned table.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.10.2.2.2.1.1.1"" name=""id-1.5.8.34.9.10.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_partition_ancestors
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          setof regclass
         </code>
        </p>
        <p>
         Lists the ancestor relations of the given partition, including the relation itself. Returns no rows if the relation does not exist or is not a partition or partitioned table.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.9.10.2.2.3.1.1.1"" name=""id-1.5.8.34.9.10.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_partition_root
         </code>
         (
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          regclass
         </code>
        </p>
        <p>
         Returns the top-most parent of the partition tree to which the given relation belongs. Returns
         <code class=""literal"">
          NULL
         </code>
         if the relation does not exist or is not a partition or partitioned table.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   For example, to check the total size of the data contained in a partitioned table
   <code class=""structname"">
    measurement
   </code>
   , one could use the following query:
  </p>
  <pre class=""programlisting"">
SELECT pg_size_pretty(sum(pg_relation_size(relid))) AS total_size
  FROM pg_partition_tree('measurement');
</pre>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-INDEX"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.8. Index Maintenance Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-INDEX"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-INDEX-TABLE"" title=""Table 9.104. Index Maintenance Functions"">
    Table 9.104
   </a>
   shows the functions available for index maintenance tasks. (Note that these maintenance tasks are normally done automatically by autovacuum; use of these functions is only required in special cases.) These functions cannot be executed during recovery. Use of these functions is restricted to superusers and the owner of the given index.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-INDEX-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.104. Index Maintenance Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Index Maintenance Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.10.3.2.2.1.1.1.1"" name=""id-1.5.8.34.10.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          brin_summarize_new_values
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Scans the specified BRIN index to find page ranges in the base table that are not currently summarized by the index; for any such range it creates a new summary index tuple by scanning those table pages. Returns the number of new page range summaries that were inserted into the index.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.10.3.2.2.2.1.1.1"" name=""id-1.5.8.34.10.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          brin_summarize_range
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           blockNumber
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Summarizes the page range covering the given block, if not already summarized. This is like
         <code class=""function"">
          brin_summarize_new_values
         </code>
         except that it only processes the page range that covers the given table block number.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.10.3.2.2.3.1.1.1"" name=""id-1.5.8.34.10.3.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          brin_desummarize_range
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ,
         <em class=""parameter"">
          <code>
           blockNumber
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Removes the BRIN index tuple that summarizes the page range covering the given table block, if there is one.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.10.3.2.2.4.1.1.1"" name=""id-1.5.8.34.10.3.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          gin_clean_pending_list
         </code>
         (
         <em class=""parameter"">
          <code>
           index
          </code>
         </em>
         <code class=""type"">
          regclass
         </code>
         ) →
         <code class=""returnvalue"">
          bigint
         </code>
        </p>
        <p>
         Cleans up the
         <span class=""quote"">
          “
          <span class=""quote"">
           pending
          </span>
          ”
         </span>
         list of the specified GIN index by moving entries in it, in bulk, to the main GIN data structure. Returns the number of pages removed from the pending list. If the argument is a GIN index built with the
         <code class=""literal"">
          fastupdate
         </code>
         option disabled, no cleanup happens and the result is zero, because the index doesn't have a pending list. See
         <a class=""xref"" href=""gin.html#GIN-FAST-UPDATE"" title=""64.4.4.1. GIN Fast Update Technique"">
          Section 64.4.4.1
         </a>
         and
         <a class=""xref"" href=""gin.html#GIN-TIPS"" title=""64.4.5. GIN Tips and Tricks"">
          Section 64.4.5
         </a>
         for details about the pending list and
         <code class=""literal"">
          fastupdate
         </code>
         option.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADMIN-GENFILE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.9. Generic File Access Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADMIN-GENFILE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADMIN-GENFILE-TABLE"" title=""Table 9.105. Generic File Access Functions"">
    Table 9.105
   </a>
   provide native access to files on the machine hosting the server. Only files within the database cluster directory and the
   <code class=""varname"">
    log_directory
   </code>
   can be accessed, unless the user is a superuser or is granted the role
   <code class=""literal"">
    pg_read_server_files
   </code>
   . Use a relative path for files in the cluster directory, and a path matching the
   <code class=""varname"">
    log_directory
   </code>
   configuration setting for log files.
  </p>
  <p>
   Note that granting users the EXECUTE privilege on
   <code class=""function"">
    pg_read_file()
   </code>
   , or related functions, allows them the ability to read any file on the server that the database server process can read; these functions bypass all in-database privilege checks. This means that, for example, a user with such access is able to read the contents of the
   <code class=""structname"">
    pg_authid
   </code>
   table where authentication information is stored, as well as read any table data in the database. Therefore, granting access to these functions should be carefully considered.
  </p>
  <p>
   When granting privilege on these functions, note that the table entries showing optional parameters are mostly implemented as several physical functions with different parameter lists. Privilege must be granted separately on each such function, if it is to be used.
   <span class=""application"">
    psql
   </span>
   's
   <code class=""command"">
    \df
   </code>
   command can be useful to check what the actual function signatures are.
  </p>
  <p>
   Some of these functions take an optional
   <em class=""parameter"">
    <code>
     missing_ok
    </code>
   </em>
   parameter, which specifies the behavior when the file or directory does not exist. If
   <code class=""literal"">
    true
   </code>
   , the function returns
   <code class=""literal"">
    NULL
   </code>
   or an empty result set, as appropriate. If
   <code class=""literal"">
    false
   </code>
   , an error is raised. (Failure conditions other than
   <span class=""quote"">
    “
    <span class=""quote"">
     file not found
    </span>
    ”
   </span>
   are reported as errors in any case.) The default is
   <code class=""literal"">
    false
   </code>
   .
  </p>
  <div class=""table"" id=""FUNCTIONS-ADMIN-GENFILE-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.105. Generic File Access Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Generic File Access Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.1.1.1.1"" name=""id-1.5.8.34.11.6.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_dir
         </code>
         (
         <em class=""parameter"">
          <code>
           dirname
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            missing_ok
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
          ,
          <em class=""parameter"">
           <code>
            include_dot_dirs
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          setof text
         </code>
        </p>
        <p>
         Returns the names of all files (and directories and other special files) in the specified directory. The
         <em class=""parameter"">
          <code>
           include_dot_dirs
          </code>
         </em>
         parameter indicates whether
         <span class=""quote"">
          “
          <span class=""quote"">
           .
          </span>
          ”
         </span>
         and
         <span class=""quote"">
          “
          <span class=""quote"">
           ..
          </span>
          ”
         </span>
         are to be included in the result set; the default is to exclude them. Including them can be useful when
         <em class=""parameter"">
          <code>
           missing_ok
          </code>
         </em>
         is
         <code class=""literal"">
          true
         </code>
         , to distinguish an empty directory from a non-existent directory.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.2.1.1.1"" name=""id-1.5.8.34.11.6.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_logdir
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's log directory. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and roles with privileges of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.3.1.1.1"" name=""id-1.5.8.34.11.6.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_waldir
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's write-ahead log (WAL) directory. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and roles with privileges of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.4.1.1.1"" name=""id-1.5.8.34.11.6.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_logicalmapdir
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's
         <code class=""filename"">
          pg_logical/mappings
         </code>
         directory. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and members of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.5.1.1.1"" name=""id-1.5.8.34.11.6.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_logicalsnapdir
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's
         <code class=""filename"">
          pg_logical/snapshots
         </code>
         directory. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and members of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.6.1.1.1"" name=""id-1.5.8.34.11.6.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_replslotdir
         </code>
         (
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's
         <code class=""filename"">
          pg_replslot/slot_name
         </code>
         directory, where
         <em class=""parameter"">
          <code>
           slot_name
          </code>
         </em>
         is the name of the replication slot provided as input of the function. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and members of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.7.1.1.1"" name=""id-1.5.8.34.11.6.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_archive_statusdir
         </code>
         () →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the server's WAL archive status directory (
         <code class=""filename"">
          pg_wal/archive_status
         </code>
         ). Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and members of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.8.1.1.1"" name=""id-1.5.8.34.11.6.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_ls_tmpdir
         </code>
         ( [
         <span class=""optional"">
          <em class=""parameter"">
           <code>
            tablespace
           </code>
          </em>
          <code class=""type"">
           oid
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          setof record
         </code>
         (
         <em class=""parameter"">
          <code>
           name
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         ,
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         )
        </p>
        <p>
         Returns the name, size, and last modification time (mtime) of each ordinary file in the temporary file directory for the specified
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         . If
         <em class=""parameter"">
          <code>
           tablespace
          </code>
         </em>
         is not provided, the
         <code class=""literal"">
          pg_default
         </code>
         tablespace is examined. Filenames beginning with a dot, directories, and other special files are excluded.
        </p>
        <p>
         This function is restricted to superusers and members of the
         <code class=""literal"">
          pg_monitor
         </code>
         role by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.9.1.1.1"" name=""id-1.5.8.34.11.6.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_read_file
         </code>
         (
         <em class=""parameter"">
          <code>
           filename
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            offset
           </code>
          </em>
          <code class=""type"">
           bigint
          </code>
          ,
          <em class=""parameter"">
           <code>
            length
           </code>
          </em>
          <code class=""type"">
           bigint
          </code>
         </span>
         ] [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            missing_ok
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          text
         </code>
        </p>
        <p>
         Returns all or part of a text file, starting at the given byte
         <em class=""parameter"">
          <code>
           offset
          </code>
         </em>
         , returning at most
         <em class=""parameter"">
          <code>
           length
          </code>
         </em>
         bytes (less if the end of file is reached first). If
         <em class=""parameter"">
          <code>
           offset
          </code>
         </em>
         is negative, it is relative to the end of the file. If
         <em class=""parameter"">
          <code>
           offset
          </code>
         </em>
         and
         <em class=""parameter"">
          <code>
           length
          </code>
         </em>
         are omitted, the entire file is returned. The bytes read from the file are interpreted as a string in the database's encoding; an error is thrown if they are not valid in that encoding.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.10.1.1.1"" name=""id-1.5.8.34.11.6.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_read_binary_file
         </code>
         (
         <em class=""parameter"">
          <code>
           filename
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            offset
           </code>
          </em>
          <code class=""type"">
           bigint
          </code>
          ,
          <em class=""parameter"">
           <code>
            length
           </code>
          </em>
          <code class=""type"">
           bigint
          </code>
         </span>
         ] [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            missing_ok
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          bytea
         </code>
        </p>
        <p>
         Returns all or part of a file. This function is identical to
         <code class=""function"">
          pg_read_file
         </code>
         except that it can read arbitrary binary data, returning the result as
         <code class=""type"">
          bytea
         </code>
         not
         <code class=""type"">
          text
         </code>
         ; accordingly, no encoding checks are performed.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
        <p>
         In combination with the
         <code class=""function"">
          convert_from
         </code>
         function, this function can be used to read a text file in a specified encoding and convert to the database's encoding:
        </p>
        <pre class=""programlisting"">
SELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');
</pre>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.11.6.2.2.11.1.1.1"" name=""id-1.5.8.34.11.6.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_stat_file
         </code>
         (
         <em class=""parameter"">
          <code>
           filename
          </code>
         </em>
         <code class=""type"">
          text
         </code>
         [
         <span class=""optional"">
          ,
          <em class=""parameter"">
           <code>
            missing_ok
           </code>
          </em>
          <code class=""type"">
           boolean
          </code>
         </span>
         ] ) →
         <code class=""returnvalue"">
          record
         </code>
         (
         <em class=""parameter"">
          <code>
           size
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ,
         <em class=""parameter"">
          <code>
           access
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           modification
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           change
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           creation
          </code>
         </em>
         <code class=""type"">
          timestamp with time zone
         </code>
         ,
         <em class=""parameter"">
          <code>
           isdir
          </code>
         </em>
         <code class=""type"">
          boolean
         </code>
         )
        </p>
        <p>
         Returns a record containing the file's size, last access time stamp, last modification time stamp, last file status change time stamp (Unix platforms only), file creation time stamp (Windows only), and a flag indicating if it is a directory.
        </p>
        <p>
         This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""FUNCTIONS-ADVISORY-LOCKS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.28.10. Advisory Lock Functions
      <a class=""id_link"" href=""#FUNCTIONS-ADVISORY-LOCKS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADVISORY-LOCKS-TABLE"" title=""Table 9.106. Advisory Lock Functions"">
    Table 9.106
   </a>
   manage advisory locks. For details about proper use of these functions, see
   <a class=""xref"" href=""explicit-locking.html#ADVISORY-LOCKS"" title=""13.3.5. Advisory Locks"">
    Section 13.3.5
   </a>
   .
  </p>
  <p>
   All these functions are intended to be used to lock application-defined resources, which can be identified either by a single 64-bit key value or two 32-bit key values (note that these two key spaces do not overlap). If another session already holds a conflicting lock on the same resource identifier, the functions will either wait until the resource becomes available, or return a
   <code class=""literal"">
    false
   </code>
   result, as appropriate for the function. Locks can be either shared or exclusive: a shared lock does not conflict with other shared locks on the same resource, only with exclusive locks. Locks can be taken at session level (so that they are held until released or the session ends) or at transaction level (so that they are held until the current transaction ends; there is no provision for manual release). Multiple session-level lock requests stack, so that if the same resource identifier is locked three times there must then be three unlock requests to release the resource in advance of session end.
  </p>
  <div class=""table"" id=""FUNCTIONS-ADVISORY-LOCKS-TABLE"">
   <p class=""title"">
    <strong>
     Table 9.106. Advisory Lock Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Advisory Lock Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.1.1.1.1"" name=""id-1.5.8.34.12.4.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Obtains an exclusive session-level advisory lock, waiting if necessary.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.2.1.1.1"" name=""id-1.5.8.34.12.4.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Obtains a shared session-level advisory lock, waiting if necessary.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.3.1.1.1"" name=""id-1.5.8.34.12.4.2.2.3.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_unlock
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_unlock
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Releases a previously-acquired exclusive session-level advisory lock. Returns
         <code class=""literal"">
          true
         </code>
         if the lock is successfully released. If the lock was not held,
         <code class=""literal"">
          false
         </code>
         is returned, and in addition, an SQL warning will be reported by the server.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.4.1.1.1"" name=""id-1.5.8.34.12.4.2.2.4.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_unlock_all
         </code>
         () →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Releases all session-level advisory locks held by the current session. (This function is implicitly invoked at session end, even if the client disconnects ungracefully.)
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.5.1.1.1"" name=""id-1.5.8.34.12.4.2.2.5.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_unlock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_unlock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Releases a previously-acquired shared session-level advisory lock. Returns
         <code class=""literal"">
          true
         </code>
         if the lock is successfully released. If the lock was not held,
         <code class=""literal"">
          false
         </code>
         is returned, and in addition, an SQL warning will be reported by the server.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.6.1.1.1"" name=""id-1.5.8.34.12.4.2.2.6.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_xact_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_xact_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Obtains an exclusive transaction-level advisory lock, waiting if necessary.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.7.1.1.1"" name=""id-1.5.8.34.12.4.2.2.7.1.1.1"">
         </a>
         <code class=""function"">
          pg_advisory_xact_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_advisory_xact_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          void
         </code>
        </p>
        <p>
         Obtains a shared transaction-level advisory lock, waiting if necessary.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.8.1.1.1"" name=""id-1.5.8.34.12.4.2.2.8.1.1.1"">
         </a>
         <code class=""function"">
          pg_try_advisory_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_try_advisory_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Obtains an exclusive session-level advisory lock if available. This will either obtain the lock immediately and return
         <code class=""literal"">
          true
         </code>
         , or return
         <code class=""literal"">
          false
         </code>
         without waiting if the lock cannot be acquired immediately.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.9.1.1.1"" name=""id-1.5.8.34.12.4.2.2.9.1.1.1"">
         </a>
         <code class=""function"">
          pg_try_advisory_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_try_advisory_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Obtains a shared session-level advisory lock if available. This will either obtain the lock immediately and return
         <code class=""literal"">
          true
         </code>
         , or return
         <code class=""literal"">
          false
         </code>
         without waiting if the lock cannot be acquired immediately.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.10.1.1.1"" name=""id-1.5.8.34.12.4.2.2.10.1.1.1"">
         </a>
         <code class=""function"">
          pg_try_advisory_xact_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_try_advisory_xact_lock
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Obtains an exclusive transaction-level advisory lock if available. This will either obtain the lock immediately and return
         <code class=""literal"">
          true
         </code>
         , or return
         <code class=""literal"">
          false
         </code>
         without waiting if the lock cannot be acquired immediately.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.34.12.4.2.2.11.1.1.1"" name=""id-1.5.8.34.12.4.2.2.11.1.1.1"">
         </a>
         <code class=""function"">
          pg_try_advisory_xact_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key
          </code>
         </em>
         <code class=""type"">
          bigint
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p class=""func_signature"">
         <code class=""function"">
          pg_try_advisory_xact_lock_shared
         </code>
         (
         <em class=""parameter"">
          <code>
           key1
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ,
         <em class=""parameter"">
          <code>
           key2
          </code>
         </em>
         <code class=""type"">
          integer
         </code>
         ) →
         <code class=""returnvalue"">
          boolean
         </code>
        </p>
        <p>
         Obtains a shared transaction-level advisory lock if available. This will either obtain the lock immediately and return
         <code class=""literal"">
          true
         </code>
         , or return
         <code class=""literal"">
          false
         </code>
         without waiting if the lock cannot be acquired immediately.
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
</div>
"
9. Functions and Operators,9.29. Trigger Functions,https://www.postgresql.org/docs/17/functions-trigger.html,"<div class=""sect1"" id=""FUNCTIONS-TRIGGER"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.29. Trigger Functions
     <a class=""id_link"" href=""#FUNCTIONS-TRIGGER"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  While many uses of triggers involve user-written trigger functions,
  <span class=""productname"">
   PostgreSQL
  </span>
  provides a few built-in trigger functions that can be used directly in user-defined triggers. These are summarized in
  <a class=""xref"" href=""functions-trigger.html#BUILTIN-TRIGGERS-TABLE"" title=""Table 9.107. Built-In Trigger Functions"">
   Table 9.107
  </a>
  . (Additional built-in trigger functions exist, which implement foreign key constraints and deferred index constraints. Those are not documented here since users need not use them directly.)
 </p>
 <p>
  For more information about creating triggers, see
  <a class=""xref"" href=""sql-createtrigger.html"" title=""CREATE TRIGGER"">
   <span class=""refentrytitle"">
    CREATE TRIGGER
   </span>
  </a>
  .
 </p>
 <div class=""table"" id=""BUILTIN-TRIGGERS-TABLE"">
  <p class=""title"">
   <strong>
    Table 9.107. Built-In Trigger Functions
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Built-In Trigger Functions"">
    <colgroup>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th class=""func_table_entry"">
       <p class=""func_signature"">
        Function
       </p>
       <p>
        Description
       </p>
       <p>
        Example Usage
       </p>
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.35.4.2.2.1.1.1.1"" name=""id-1.5.8.35.4.2.2.1.1.1.1"">
        </a>
        <code class=""function"">
         suppress_redundant_updates_trigger
        </code>
        ( ) →
        <code class=""returnvalue"">
         trigger
        </code>
       </p>
       <p>
        Suppresses do-nothing update operations. See below for details.
       </p>
       <p>
        <code class=""literal"">
         CREATE TRIGGER ... suppress_redundant_updates_trigger()
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.35.4.2.2.2.1.1.1"" name=""id-1.5.8.35.4.2.2.2.1.1.1"">
        </a>
        <code class=""function"">
         tsvector_update_trigger
        </code>
        ( ) →
        <code class=""returnvalue"">
         trigger
        </code>
       </p>
       <p>
        Automatically updates a
        <code class=""type"">
         tsvector
        </code>
        column from associated plain-text document column(s). The text search configuration to use is specified by name as a trigger argument. See
        <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS"" title=""12.4.3. Triggers for Automatic Updates"">
         Section 12.4.3
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)
        </code>
       </p>
      </td>
     </tr>
     <tr>
      <td class=""func_table_entry"">
       <p class=""func_signature"">
        <a class=""indexterm"" id=""id-1.5.8.35.4.2.2.3.1.1.1"" name=""id-1.5.8.35.4.2.2.3.1.1.1"">
        </a>
        <code class=""function"">
         tsvector_update_trigger_column
        </code>
        ( ) →
        <code class=""returnvalue"">
         trigger
        </code>
       </p>
       <p>
        Automatically updates a
        <code class=""type"">
         tsvector
        </code>
        column from associated plain-text document column(s). The text search configuration to use is taken from a
        <code class=""type"">
         regconfig
        </code>
        column of the table. See
        <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS"" title=""12.4.3. Triggers for Automatic Updates"">
         Section 12.4.3
        </a>
        for details.
       </p>
       <p>
        <code class=""literal"">
         CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, tsconfigcol, title, body)
        </code>
       </p>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  The
  <code class=""function"">
   suppress_redundant_updates_trigger
  </code>
  function, when applied as a row-level
  <code class=""literal"">
   BEFORE UPDATE
  </code>
  trigger, will prevent any update that does not actually change the data in the row from taking place. This overrides the normal behavior which always performs a physical row update regardless of whether or not the data has changed. (This normal behavior makes updates run faster, since no checking is required, and is also useful in certain cases.)
 </p>
 <p>
  Ideally, you should avoid running updates that don't actually change the data in the record. Redundant updates can cost considerable unnecessary time, especially if there are lots of indexes to alter, and space in dead rows that will eventually have to be vacuumed. However, detecting such situations in client code is not always easy, or even possible, and writing expressions to detect them can be error-prone. An alternative is to use
  <code class=""function"">
   suppress_redundant_updates_trigger
  </code>
  , which will skip updates that don't change the data. You should use this with care, however. The trigger takes a small but non-trivial time for each record, so if most of the records affected by updates do actually change, use of this trigger will make updates run slower on average.
 </p>
 <p>
  The
  <code class=""function"">
   suppress_redundant_updates_trigger
  </code>
  function can be added to a table like this:
 </p>
 <pre class=""programlisting"">
CREATE TRIGGER z_min_update
BEFORE UPDATE ON tablename
FOR EACH ROW EXECUTE FUNCTION suppress_redundant_updates_trigger();
</pre>
 <p>
  In most cases, you need to fire this trigger last for each row, so that it does not override other triggers that might wish to alter the row. Bearing in mind that triggers fire in name order, you would therefore choose a trigger name that comes after the name of any other trigger you might have on the table. (Hence the
  <span class=""quote"">
   “
   <span class=""quote"">
    z
   </span>
   ”
  </span>
  prefix in the example.)
 </p>
</div>
"
9. Functions and Operators,9.30. Event Trigger Functions,https://www.postgresql.org/docs/17/functions-event-triggers.html,"<div class=""sect1"" id=""FUNCTIONS-EVENT-TRIGGERS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.30. Event Trigger Functions
     <a class=""id_link"" href=""#FUNCTIONS-EVENT-TRIGGERS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-event-triggers.html#PG-EVENT-TRIGGER-DDL-COMMAND-END-FUNCTIONS"">
      9.30.1. Capturing Changes at Command End
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-event-triggers.html#PG-EVENT-TRIGGER-SQL-DROP-FUNCTIONS"">
      9.30.2. Processing Objects Dropped by a DDL Command
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""functions-event-triggers.html#PG-EVENT-TRIGGER-TABLE-REWRITE-FUNCTIONS"">
      9.30.3. Handling a Table Rewrite Event
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides these helper functions to retrieve information from event triggers.
 </p>
 <p>
  For more information about event triggers, see
  <a class=""xref"" href=""event-triggers.html"" title=""Chapter 38. Event Triggers"">
   Chapter 38
  </a>
  .
 </p>
 <div class=""sect2"" id=""PG-EVENT-TRIGGER-DDL-COMMAND-END-FUNCTIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.30.1. Capturing Changes at Command End
      <a class=""id_link"" href=""#PG-EVENT-TRIGGER-DDL-COMMAND-END-FUNCTIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.36.4.2"" name=""id-1.5.8.36.4.2"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">pg_event_trigger_ddl_commands</code> () → <code class=""returnvalue"">setof record</code>
</pre>
  <p>
   <code class=""function"">
    pg_event_trigger_ddl_commands
   </code>
   returns a list of
   <acronym class=""acronym"">
    DDL
   </acronym>
   commands executed by each user action, when invoked in a function attached to a
   <code class=""literal"">
    ddl_command_end
   </code>
   event trigger. If called in any other context, an error is raised.
   <code class=""function"">
    pg_event_trigger_ddl_commands
   </code>
   returns one row for each base command executed; some commands that are a single SQL sentence may return more than one row. This function returns the following columns:
  </p>
  <div class=""informaltable"">
   <table border=""1"" class=""informaltable"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Type
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        classid
       </code>
      </td>
      <td>
       <code class=""type"">
        oid
       </code>
      </td>
      <td>
       OID of catalog the object belongs in
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        objid
       </code>
      </td>
      <td>
       <code class=""type"">
        oid
       </code>
      </td>
      <td>
       OID of the object itself
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        objsubid
       </code>
      </td>
      <td>
       <code class=""type"">
        integer
       </code>
      </td>
      <td>
       Sub-object ID (e.g., attribute number for a column)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        command_tag
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Command tag
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        object_type
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Type of the object
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        schema_name
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Name of the schema the object belongs in, if any; otherwise
       <code class=""literal"">
        NULL
       </code>
       . No quoting is applied.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        object_identity
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Text rendering of the object identity, schema-qualified. Each identifier included in the identity is quoted if necessary.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        in_extension
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       True if the command is part of an extension script
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        command
       </code>
      </td>
      <td>
       <code class=""type"">
        pg_ddl_command
       </code>
      </td>
      <td>
       A complete representation of the command, in internal format. This cannot be output directly, but it can be passed to other functions to obtain different pieces of information about the command.
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <div class=""sect2"" id=""PG-EVENT-TRIGGER-SQL-DROP-FUNCTIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.30.2. Processing Objects Dropped by a DDL Command
      <a class=""id_link"" href=""#PG-EVENT-TRIGGER-SQL-DROP-FUNCTIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.36.5.2"" name=""id-1.5.8.36.5.2"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">pg_event_trigger_dropped_objects</code> () → <code class=""returnvalue"">setof record</code>
</pre>
  <p>
   <code class=""function"">
    pg_event_trigger_dropped_objects
   </code>
   returns a list of all objects dropped by the command in whose
   <code class=""literal"">
    sql_drop
   </code>
   event it is called. If called in any other context, an error is raised. This function returns the following columns:
  </p>
  <div class=""informaltable"">
   <table border=""1"" class=""informaltable"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Type
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        classid
       </code>
      </td>
      <td>
       <code class=""type"">
        oid
       </code>
      </td>
      <td>
       OID of catalog the object belonged in
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        objid
       </code>
      </td>
      <td>
       <code class=""type"">
        oid
       </code>
      </td>
      <td>
       OID of the object itself
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        objsubid
       </code>
      </td>
      <td>
       <code class=""type"">
        integer
       </code>
      </td>
      <td>
       Sub-object ID (e.g., attribute number for a column)
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        original
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       True if this was one of the root object(s) of the deletion
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        normal
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       True if there was a normal dependency relationship in the dependency graph leading to this object
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        is_temporary
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean
       </code>
      </td>
      <td>
       True if this was a temporary object
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        object_type
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Type of the object
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        schema_name
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Name of the schema the object belonged in, if any; otherwise
       <code class=""literal"">
        NULL
       </code>
       . No quoting is applied.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        object_name
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Name of the object, if the combination of schema and name can be used as a unique identifier for the object; otherwise
       <code class=""literal"">
        NULL
       </code>
       . No quoting is applied, and name is never schema-qualified.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        object_identity
       </code>
      </td>
      <td>
       <code class=""type"">
        text
       </code>
      </td>
      <td>
       Text rendering of the object identity, schema-qualified. Each identifier included in the identity is quoted if necessary.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        address_names
       </code>
      </td>
      <td>
       <code class=""type"">
        text[]
       </code>
      </td>
      <td>
       An array that, together with
       <code class=""literal"">
        object_type
       </code>
       and
       <code class=""literal"">
        address_args
       </code>
       , can be used by the
       <code class=""function"">
        pg_get_object_address
       </code>
       function to recreate the object address in a remote server containing an identically named object of the same kind.
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        address_args
       </code>
      </td>
      <td>
       <code class=""type"">
        text[]
       </code>
      </td>
      <td>
       Complement for
       <code class=""literal"">
        address_names
       </code>
      </td>
     </tr>
    </tbody>
   </table>
  </div>
  <p>
   The
   <code class=""function"">
    pg_event_trigger_dropped_objects
   </code>
   function can be used in an event trigger like this:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION test_event_trigger_for_drops()
        RETURNS event_trigger LANGUAGE plpgsql AS $$
DECLARE
    obj record;
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
    LOOP
        RAISE NOTICE '% dropped object: % %.% %',
                     tg_tag,
                     obj.object_type,
                     obj.schema_name,
                     obj.object_name,
                     obj.object_identity;
    END LOOP;
END;
$$;
CREATE EVENT TRIGGER test_event_trigger_for_drops
   ON sql_drop
   EXECUTE FUNCTION test_event_trigger_for_drops();
</pre>
 </div>
 <div class=""sect2"" id=""PG-EVENT-TRIGGER-TABLE-REWRITE-FUNCTIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.30.3. Handling a Table Rewrite Event
      <a class=""id_link"" href=""#PG-EVENT-TRIGGER-TABLE-REWRITE-FUNCTIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The functions shown in
   <a class=""xref"" href=""functions-event-triggers.html#FUNCTIONS-EVENT-TRIGGER-TABLE-REWRITE"" title=""Table 9.108. Table Rewrite Information Functions"">
    Table 9.108
   </a>
   provide information about a table for which a
   <code class=""literal"">
    table_rewrite
   </code>
   event has just been called. If called in any other context, an error is raised.
  </p>
  <div class=""table"" id=""FUNCTIONS-EVENT-TRIGGER-TABLE-REWRITE"">
   <p class=""title"">
    <strong>
     Table 9.108. Table Rewrite Information Functions
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Table Rewrite Information Functions"">
     <colgroup>
      <col/>
     </colgroup>
     <thead>
      <tr>
       <th class=""func_table_entry"">
        <p class=""func_signature"">
         Function
        </p>
        <p>
         Description
        </p>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.36.6.3.2.2.1.1.1.1"" name=""id-1.5.8.36.6.3.2.2.1.1.1.1"">
         </a>
         <code class=""function"">
          pg_event_trigger_table_rewrite_oid
         </code>
         () →
         <code class=""returnvalue"">
          oid
         </code>
        </p>
        <p>
         Returns the OID of the table about to be rewritten.
        </p>
       </td>
      </tr>
      <tr>
       <td class=""func_table_entry"">
        <p class=""func_signature"">
         <a class=""indexterm"" id=""id-1.5.8.36.6.3.2.2.2.1.1.1"" name=""id-1.5.8.36.6.3.2.2.2.1.1.1"">
         </a>
         <code class=""function"">
          pg_event_trigger_table_rewrite_reason
         </code>
         () →
         <code class=""returnvalue"">
          integer
         </code>
        </p>
        <p>
         Returns a code explaining the reason(s) for rewriting. The value is a bitmap built from the following values:
         <code class=""literal"">
          1
         </code>
         (the table has changed its persistence),
         <code class=""literal"">
          2
         </code>
         (default value of a column has changed),
         <code class=""literal"">
          4
         </code>
         (a column has a new data type) and
         <code class=""literal"">
          8
         </code>
         (the table access method has changed).
        </p>
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
  <p>
   These functions can be used in an event trigger like this:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION test_event_trigger_table_rewrite_oid()
 RETURNS event_trigger
 LANGUAGE plpgsql AS
$$
BEGIN
  RAISE NOTICE 'rewriting table % for reason %',
                pg_event_trigger_table_rewrite_oid()::regclass,
                pg_event_trigger_table_rewrite_reason();
END;
$$;

CREATE EVENT TRIGGER test_table_rewrite_oid
                  ON table_rewrite
   EXECUTE FUNCTION test_event_trigger_table_rewrite_oid();
</pre>
 </div>
</div>
"
9. Functions and Operators,9.31. Statistics Information Functions,https://www.postgresql.org/docs/17/functions-statistics.html,"<div class=""sect1"" id=""FUNCTIONS-STATISTICS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     9.31. Statistics Information Functions
     <a class=""id_link"" href=""#FUNCTIONS-STATISTICS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""functions-statistics.html#FUNCTIONS-STATISTICS-MCV"">
      9.31.1. Inspecting MCV Lists
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.8.37.2"" name=""id-1.5.8.37.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides a function to inspect complex statistics defined using the
  <code class=""command"">
   CREATE STATISTICS
  </code>
  command.
 </p>
 <div class=""sect2"" id=""FUNCTIONS-STATISTICS-MCV"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      9.31.1. Inspecting MCV Lists
      <a class=""id_link"" href=""#FUNCTIONS-STATISTICS-MCV"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.8.37.4.2"" name=""id-1.5.8.37.4.2"">
  </a>
  <pre class=""synopsis"">
<code class=""function"">pg_mcv_list_items</code> ( <code class=""type"">pg_mcv_list</code> ) → <code class=""returnvalue"">setof record</code>
</pre>
  <p>
   <code class=""function"">
    pg_mcv_list_items
   </code>
   returns a set of records describing all items stored in a multi-column
   <acronym class=""acronym"">
    MCV
   </acronym>
   list. It returns the following columns:
  </p>
  <div class=""informaltable"">
   <table border=""1"" class=""informaltable"">
    <colgroup>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Name
      </th>
      <th>
       Type
      </th>
      <th>
       Description
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        index
       </code>
      </td>
      <td>
       <code class=""type"">
        integer
       </code>
      </td>
      <td>
       index of the item in the
       <acronym class=""acronym"">
        MCV
       </acronym>
       list
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        values
       </code>
      </td>
      <td>
       <code class=""type"">
        text[]
       </code>
      </td>
      <td>
       values stored in the MCV item
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        nulls
       </code>
      </td>
      <td>
       <code class=""type"">
        boolean[]
       </code>
      </td>
      <td>
       flags identifying
       <code class=""literal"">
        NULL
       </code>
       values
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        frequency
       </code>
      </td>
      <td>
       <code class=""type"">
        double precision
       </code>
      </td>
      <td>
       frequency of this
       <acronym class=""acronym"">
        MCV
       </acronym>
       item
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        base_frequency
       </code>
      </td>
      <td>
       <code class=""type"">
        double precision
       </code>
      </td>
      <td>
       base frequency of this
       <acronym class=""acronym"">
        MCV
       </acronym>
       item
      </td>
     </tr>
    </tbody>
   </table>
  </div>
  <p>
   The
   <code class=""function"">
    pg_mcv_list_items
   </code>
   function can be used like this:
  </p>
  <pre class=""programlisting"">
SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),
                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts';
</pre>
  <p>
   Values of the
   <code class=""type"">
    pg_mcv_list
   </code>
   type can be obtained only from the
   <code class=""structname"">
    pg_statistic_ext_data
   </code>
   .
   <code class=""structfield"">
    stxdmcv
   </code>
   column.
  </p>
 </div>
</div>
"
10. Type Conversion,10.1. Overview,https://www.postgresql.org/docs/17/typeconv-overview.html,"<div class=""sect1"" id=""TYPECONV-OVERVIEW"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.1. Overview
     <a class=""id_link"" href=""#TYPECONV-OVERVIEW"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  <acronym class=""acronym"">
   SQL
  </acronym>
  is a strongly typed language. That is, every data item has an associated data type which determines its behavior and allowed usage.
  <span class=""productname"">
   PostgreSQL
  </span>
  has an extensible type system that is more general and flexible than other
  <acronym class=""acronym"">
   SQL
  </acronym>
  implementations. Hence, most type conversion behavior in
  <span class=""productname"">
   PostgreSQL
  </span>
  is governed by general rules rather than by ad hoc heuristics. This allows the use of mixed-type expressions even with user-defined types.
 </p>
 <p>
  The
  <span class=""productname"">
   PostgreSQL
  </span>
  scanner/parser divides lexical elements into five fundamental categories: integers, non-integer numbers, strings, identifiers, and key words. Constants of most non-numeric types are first classified as strings. The
  <acronym class=""acronym"">
   SQL
  </acronym>
  language definition allows specifying type names with strings, and this mechanism can be used in
  <span class=""productname"">
   PostgreSQL
  </span>
  to start the parser down the correct path. For example, the query:
 </p>
 <pre class=""screen"">
SELECT text 'Origin' AS ""label"", point '(0,0)' AS ""value"";

 label  | value
--------+-------
 Origin | (0,0)
(1 row)
</pre>
 <p>
  has two literal constants, of type
  <code class=""type"">
   text
  </code>
  and
  <code class=""type"">
   point
  </code>
  . If a type is not specified for a string literal, then the placeholder type
  <code class=""type"">
   unknown
  </code>
  is assigned initially, to be resolved in later stages as described below.
 </p>
 <p>
  There are four fundamental
  <acronym class=""acronym"">
   SQL
  </acronym>
  constructs requiring distinct type conversion rules in the
  <span class=""productname"">
   PostgreSQL
  </span>
  parser:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt>
    <span class=""term"">
     Function calls
    </span>
   </dt>
   <dd>
    <p>
     Much of the
     <span class=""productname"">
      PostgreSQL
     </span>
     type system is built around a rich set of functions. Functions can have one or more arguments. Since
     <span class=""productname"">
      PostgreSQL
     </span>
     permits function overloading, the function name alone does not uniquely identify the function to be called; the parser must select the right function based on the data types of the supplied arguments.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     Operators
    </span>
   </dt>
   <dd>
    <p>
     <span class=""productname"">
      PostgreSQL
     </span>
     allows expressions with prefix (one-argument) operators, as well as infix (two-argument) operators. Like functions, operators can be overloaded, so the same problem of selecting the right operator exists.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     Value Storage
    </span>
   </dt>
   <dd>
    <p>
     <acronym class=""acronym"">
      SQL
     </acronym>
     <code class=""command"">
      INSERT
     </code>
     and
     <code class=""command"">
      UPDATE
     </code>
     statements place the results of expressions into a table. The expressions in the statement must be matched up with, and perhaps converted to, the types of the target columns.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     <code class=""literal"">
      UNION
     </code>
     ,
     <code class=""literal"">
      CASE
     </code>
     , and related constructs
    </span>
   </dt>
   <dd>
    <p>
     Since all query results from a unionized
     <code class=""command"">
      SELECT
     </code>
     statement must appear in a single set of columns, the types of the results of each
     <code class=""command"">
      SELECT
     </code>
     clause must be matched up and converted to a uniform set. Similarly, the result expressions of a
     <code class=""literal"">
      CASE
     </code>
     construct must be converted to a common type so that the
     <code class=""literal"">
      CASE
     </code>
     expression as a whole has a known output type. Some other constructs, such as
     <code class=""literal"">
      ARRAY[]
     </code>
     and the
     <code class=""function"">
      GREATEST
     </code>
     and
     <code class=""function"">
      LEAST
     </code>
     functions, likewise require determination of a common type for several subexpressions.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  The system catalogs store information about which conversions, or
  <em class=""firstterm"">
   casts
  </em>
  , exist between which data types, and how to perform those conversions. Additional casts can be added by the user with the
  <a class=""xref"" href=""sql-createcast.html"" title=""CREATE CAST"">
   <span class=""refentrytitle"">
    CREATE CAST
   </span>
  </a>
  command. (This is usually done in conjunction with defining new data types. The set of casts between built-in types has been carefully crafted and is best not altered.)
 </p>
 <a class=""indexterm"" id=""id-1.5.9.6.6"" name=""id-1.5.9.6.6"">
 </a>
 <p>
  An additional heuristic provided by the parser allows improved determination of the proper casting behavior among groups of types that have implicit casts. Data types are divided into several basic
  <em class=""firstterm"">
   type categories
  </em>
  , including
  <code class=""type"">
   boolean
  </code>
  ,
  <code class=""type"">
   numeric
  </code>
  ,
  <code class=""type"">
   string
  </code>
  ,
  <code class=""type"">
   bitstring
  </code>
  ,
  <code class=""type"">
   datetime
  </code>
  ,
  <code class=""type"">
   timespan
  </code>
  ,
  <code class=""type"">
   geometric
  </code>
  ,
  <code class=""type"">
   network
  </code>
  , and user-defined. (For a list see
  <a class=""xref"" href=""catalog-pg-type.html#CATALOG-TYPCATEGORY-TABLE"" title=""Table 51.65. typcategory Codes"">
   Table 51.65
  </a>
  ; but note it is also possible to create custom type categories.) Within each category there can be one or more
  <em class=""firstterm"">
   preferred types
  </em>
  , which are preferred when there is a choice of possible types. With careful selection of preferred types and available implicit casts, it is possible to ensure that ambiguous expressions (those with multiple candidate parsing solutions) can be resolved in a useful way.
 </p>
 <p>
  All type conversion rules are designed with several principles in mind:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Implicit conversions should never have surprising or unpredictable outcomes.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     There should be no extra overhead in the parser or executor if a query does not need implicit type conversion. That is, if a query is well-formed and the types already match, then the query should execute without spending extra time in the parser and without introducing unnecessary implicit conversion calls in the query.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Additionally, if a query usually requires an implicit conversion for a function, and if then the user defines a new function with the correct argument types, the parser should use this new function and no longer do implicit conversion to use the old function.
    </p>
   </li>
  </ul>
 </div>
</div>
"
10. Type Conversion,10.2. Operators,https://www.postgresql.org/docs/17/typeconv-oper.html,"<div class=""sect1"" id=""TYPECONV-OPER"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.2. Operators
     <a class=""id_link"" href=""#TYPECONV-OPER"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.9.7.2"" name=""id-1.5.9.7.2"">
 </a>
 <p>
  The specific operator that is referenced by an operator expression is determined using the following procedure. Note that this procedure is indirectly affected by the precedence of the operators involved, since that will determine which sub-expressions are taken to be the inputs of which operators. See
  <a class=""xref"" href=""sql-syntax-lexical.html#SQL-PRECEDENCE"" title=""4.1.6. Operator Precedence"">
   Section 4.1.6
  </a>
  for more information.
 </p>
 <div class=""procedure"" id=""id-1.5.9.7.4"">
  <p class=""title"">
   <strong>
    Operator Type Resolution
   </strong>
  </p>
  <ol class=""procedure"" type=""1"">
   <li class=""step"" id=""OP-RESOL-SELECT"">
    <p>
     Select the operators to be considered from the
     <code class=""classname"">
      pg_operator
     </code>
     system catalog. If a non-schema-qualified operator name was used (the usual case), the operators considered are those with the matching name and argument count that are visible in the current search path (see
     <a class=""xref"" href=""ddl-schemas.html#DDL-SCHEMAS-PATH"" title=""5.10.3. The Schema Search Path"">
      Section 5.10.3
     </a>
     ). If a qualified operator name was given, only operators in the specified schema are considered.
    </p>
    <ol class=""substeps"" type=""a"">
     <li class=""step"">
      <p>
       If the search path finds multiple operators with identical argument types, only the one appearing earliest in the path is considered. Operators with different argument types are considered on an equal footing regardless of search path position.
      </p>
     </li>
    </ol>
   </li>
   <li class=""step"" id=""OP-RESOL-EXACT-MATCH"">
    <p>
     Check for an operator accepting exactly the input argument types. If one exists (there can be only one exact match in the set of operators considered), use it. Lack of an exact match creates a security hazard when calling, via qualified name
     <a class=""footnote"" href=""#ftn.OP-QUALIFIED-SECURITY"">
      <sup class=""footnote"" id=""OP-QUALIFIED-SECURITY"">
       [9]
      </sup>
     </a>
     (not typical), any operator found in a schema that permits untrusted users to create objects. In such situations, cast arguments to force an exact match.
    </p>
    <ol class=""substeps"" type=""a"">
     <li class=""step"" id=""OP-RESOL-EXACT-UNKNOWN"">
      <p>
       If one argument of a binary operator invocation is of the
       <code class=""type"">
        unknown
       </code>
       type, then assume it is the same type as the other argument for this check. Invocations involving two
       <code class=""type"">
        unknown
       </code>
       inputs, or a prefix operator with an
       <code class=""type"">
        unknown
       </code>
       input, will never find a match at this step.
      </p>
     </li>
     <li class=""step"" id=""OP-RESOL-EXACT-DOMAIN"">
      <p>
       If one argument of a binary operator invocation is of the
       <code class=""type"">
        unknown
       </code>
       type and the other is of a domain type, next check to see if there is an operator accepting exactly the domain's base type on both sides; if so, use it.
      </p>
     </li>
    </ol>
   </li>
   <li class=""step"" id=""OP-RESOL-BEST-MATCH"">
    <p>
     Look for the best match.
    </p>
    <ol class=""substeps"" type=""a"">
     <li class=""step"">
      <p>
       Discard candidate operators for which the input types do not match and cannot be converted (using an implicit conversion) to match.
       <code class=""type"">
        unknown
       </code>
       literals are assumed to be convertible to anything for this purpose. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       If any input argument is of a domain type, treat it as being of the domain's base type for all subsequent steps. This ensures that domains act like their base types for purposes of ambiguous-operator resolution.
      </p>
     </li>
     <li class=""step"">
      <p>
       Run through all candidates and keep those with the most exact matches on input types. Keep all candidates if none have exact matches. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       Run through all candidates and keep those that accept preferred types (of the input data type's type category) at the most positions where type conversion will be required. Keep all candidates if none accept preferred types. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       If any input arguments are
       <code class=""type"">
        unknown
       </code>
       , check the type categories accepted at those argument positions by the remaining candidates. At each position, select the
       <code class=""type"">
        string
       </code>
       category if any candidate accepts that category. (This bias towards string is appropriate since an unknown-type literal looks like a string.) Otherwise, if all the remaining candidates accept the same type category, select that category; otherwise fail because the correct choice cannot be deduced without more clues. Now discard candidates that do not accept the selected type category. Furthermore, if any candidate accepts a preferred type in that category, discard candidates that accept non-preferred types for that argument. Keep all candidates if none survive these tests. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"" id=""OP-RESOL-LAST-UNKNOWN"">
      <p>
       If there are both
       <code class=""type"">
        unknown
       </code>
       and known-type arguments, and all the known-type arguments have the same type, assume that the
       <code class=""type"">
        unknown
       </code>
       arguments are also of that type, and check which candidates can accept that type at the
       <code class=""type"">
        unknown
       </code>
       -argument positions. If exactly one candidate passes this test, use it. Otherwise, fail.
      </p>
     </li>
    </ol>
   </li>
  </ol>
 </div>
 <p>
  Some examples follow.
 </p>
 <div class=""example"" id=""id-1.5.9.7.6"">
  <p class=""title"">
   <strong>
    Example 10.1. Square Root Operator Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    There is only one square root operator (prefix
    <code class=""literal"">
     |/
    </code>
    ) defined in the standard catalog, and it takes an argument of type
    <code class=""type"">
     double precision
    </code>
    . The scanner assigns an initial type of
    <code class=""type"">
     integer
    </code>
    to the argument in this query expression:
   </p>
   <pre class=""screen"">
SELECT |/ 40 AS ""square root of 40"";
 square root of 40
-------------------
 6.324555320336759
(1 row)
</pre>
   <p>
    So the parser does a type conversion on the operand and the query is equivalent to:
   </p>
   <pre class=""screen"">
SELECT |/ CAST(40 AS double precision) AS ""square root of 40"";
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.7.7"">
  <p class=""title"">
   <strong>
    Example 10.2. String Concatenation Operator Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    A string-like syntax is used for working with string types and for working with complex extension types. Strings with unspecified type are matched with likely operator candidates.
   </p>
   <p>
    An example with one unspecified argument:
   </p>
   <pre class=""screen"">
SELECT text 'abc' || 'def' AS ""text and unknown"";

 text and unknown
------------------
 abcdef
(1 row)
</pre>
   <p>
    In this case the parser looks to see if there is an operator taking
    <code class=""type"">
     text
    </code>
    for both arguments. Since there is, it assumes that the second argument should be interpreted as type
    <code class=""type"">
     text
    </code>
    .
   </p>
   <p>
    Here is a concatenation of two values of unspecified types:
   </p>
   <pre class=""screen"">
SELECT 'abc' || 'def' AS ""unspecified"";

 unspecified
-------------
 abcdef
(1 row)
</pre>
   <p>
    In this case there is no initial hint for which type to use, since no types are specified in the query. So, the parser looks for all candidate operators and finds that there are candidates accepting both string-category and bit-string-category inputs. Since string category is preferred when available, that category is selected, and then the preferred type for strings,
    <code class=""type"">
     text
    </code>
    , is used as the specific type to resolve the unknown-type literals as.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.7.8"">
  <p class=""title"">
   <strong>
    Example 10.3. Absolute-Value and Negation Operator Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    The
    <span class=""productname"">
     PostgreSQL
    </span>
    operator catalog has several entries for the prefix operator
    <code class=""literal"">
     @
    </code>
    , all of which implement absolute-value operations for various numeric data types. One of these entries is for type
    <code class=""type"">
     float8
    </code>
    , which is the preferred type in the numeric category. Therefore,
    <span class=""productname"">
     PostgreSQL
    </span>
    will use that entry when faced with an
    <code class=""type"">
     unknown
    </code>
    input:
   </p>
   <pre class=""screen"">
SELECT @ '-4.5' AS ""abs"";
 abs
-----
 4.5
(1 row)
</pre>
   <p>
    Here the system has implicitly resolved the unknown-type literal as type
    <code class=""type"">
     float8
    </code>
    before applying the chosen operator. We can verify that
    <code class=""type"">
     float8
    </code>
    and not some other type was used:
   </p>
   <pre class=""screen"">
SELECT @ '-4.5e500' AS ""abs"";

ERROR:  ""-4.5e500"" is out of range for type double precision
</pre>
   <p>
    On the other hand, the prefix operator
    <code class=""literal"">
     ~
    </code>
    (bitwise negation) is defined only for integer data types, not for
    <code class=""type"">
     float8
    </code>
    . So, if we try a similar case with
    <code class=""literal"">
     ~
    </code>
    , we get:
   </p>
   <pre class=""screen"">
SELECT ~ '20' AS ""negation"";

ERROR:  operator is not unique: ~ ""unknown""
HINT:  Could not choose a best candidate operator. You might need to add
explicit type casts.
</pre>
   <p>
    This happens because the system cannot decide which of the several possible
    <code class=""literal"">
     ~
    </code>
    operators should be preferred. We can help it out with an explicit cast:
   </p>
   <pre class=""screen"">
SELECT ~ CAST('20' AS int8) AS ""negation"";

 negation
----------
      -21
(1 row)
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.7.9"">
  <p class=""title"">
   <strong>
    Example 10.4. Array Inclusion Operator Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    Here is another example of resolving an operator with one known and one unknown input:
   </p>
   <pre class=""screen"">
SELECT array[1,2] &lt;@ '{1,2,3}' as ""is subset"";

 is subset
-----------
 t
(1 row)
</pre>
   <p>
    The
    <span class=""productname"">
     PostgreSQL
    </span>
    operator catalog has several entries for the infix operator
    <code class=""literal"">
     &lt;@
    </code>
    , but the only two that could possibly accept an integer array on the left-hand side are array inclusion (
    <code class=""type"">
     anyarray
    </code>
    <code class=""literal"">
     &lt;@
    </code>
    <code class=""type"">
     anyarray
    </code>
    ) and range inclusion (
    <code class=""type"">
     anyelement
    </code>
    <code class=""literal"">
     &lt;@
    </code>
    <code class=""type"">
     anyrange
    </code>
    ). Since none of these polymorphic pseudo-types (see
    <a class=""xref"" href=""datatype-pseudo.html"" title=""8.21. Pseudo-Types"">
     Section 8.21
    </a>
    ) are considered preferred, the parser cannot resolve the ambiguity on that basis. However,
    <a class=""xref"" href=""typeconv-oper.html#OP-RESOL-LAST-UNKNOWN"" title=""Step 3.f"">
     Step 3.f
    </a>
    tells it to assume that the unknown-type literal is of the same type as the other input, that is, integer array. Now only one of the two operators can match, so array inclusion is selected. (Had range inclusion been selected, we would have gotten an error, because the string does not have the right format to be a range literal.)
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.7.10"">
  <p class=""title"">
   <strong>
    Example 10.5. Custom Operator on a Domain Type
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    Users sometimes try to declare operators applying just to a domain type. This is possible but is not nearly as useful as it might seem, because the operator resolution rules are designed to select operators applying to the domain's base type. As an example consider
   </p>
   <pre class=""screen"">
CREATE DOMAIN mytext AS text CHECK(...);
CREATE FUNCTION mytext_eq_text (mytext, text) RETURNS boolean AS ...;
CREATE OPERATOR = (procedure=mytext_eq_text, leftarg=mytext, rightarg=text);
CREATE TABLE mytable (val mytext);

SELECT * FROM mytable WHERE val = 'foo';
</pre>
   <p>
    This query will not use the custom operator. The parser will first see if there is a
    <code class=""type"">
     mytext
    </code>
    <code class=""literal"">
     =
    </code>
    <code class=""type"">
     mytext
    </code>
    operator (
    <a class=""xref"" href=""typeconv-oper.html#OP-RESOL-EXACT-UNKNOWN"" title=""Step 2.a"">
     Step 2.a
    </a>
    ), which there is not; then it will consider the domain's base type
    <code class=""type"">
     text
    </code>
    , and see if there is a
    <code class=""type"">
     text
    </code>
    <code class=""literal"">
     =
    </code>
    <code class=""type"">
     text
    </code>
    operator (
    <a class=""xref"" href=""typeconv-oper.html#OP-RESOL-EXACT-DOMAIN"" title=""Step 2.b"">
     Step 2.b
    </a>
    ), which there is; so it resolves the
    <code class=""type"">
     unknown
    </code>
    -type literal as
    <code class=""type"">
     text
    </code>
    and uses the
    <code class=""type"">
     text
    </code>
    <code class=""literal"">
     =
    </code>
    <code class=""type"">
     text
    </code>
    operator. The only way to get the custom operator to be used is to explicitly cast the literal:
   </p>
   <pre class=""screen"">
SELECT * FROM mytable WHERE val = text 'foo';
</pre>
   <p>
    so that the
    <code class=""type"">
     mytext
    </code>
    <code class=""literal"">
     =
    </code>
    <code class=""type"">
     text
    </code>
    operator is found immediately according to the exact-match rule. If the best-match rules are reached, they actively discriminate against operators on domain types. If they did not, such an operator would create too many ambiguous-operator failures, because the casting rules always consider a domain as castable to or from its base type, and so the domain operator would be considered usable in all the same cases as a similarly-named operator on the base type.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.OP-QUALIFIED-SECURITY"">
   <p>
    <a class=""para"" href=""#OP-QUALIFIED-SECURITY"">
     <sup class=""para"">
      [9]
     </sup>
    </a>
    The hazard does not arise with a non-schema-qualified name, because a search path containing schemas that permit untrusted users to create objects is not a
    <a class=""link"" href=""ddl-schemas.html#DDL-SCHEMAS-PATTERNS"" title=""5.10.6. Usage Patterns"">
     secure schema usage pattern
    </a>
    .
   </p>
  </div>
 </div>
</div>
"
10. Type Conversion,10.3. Functions,https://www.postgresql.org/docs/17/typeconv-func.html,"<div class=""sect1"" id=""TYPECONV-FUNC"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.3. Functions
     <a class=""id_link"" href=""#TYPECONV-FUNC"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.9.8.2"" name=""id-1.5.9.8.2"">
 </a>
 <p>
  The specific function that is referenced by a function call is determined using the following procedure.
 </p>
 <div class=""procedure"" id=""id-1.5.9.8.4"">
  <p class=""title"">
   <strong>
    Function Type Resolution
   </strong>
  </p>
  <ol class=""procedure"" type=""1"">
   <li class=""step"">
    <p>
     Select the functions to be considered from the
     <code class=""classname"">
      pg_proc
     </code>
     system catalog. If a non-schema-qualified function name was used, the functions considered are those with the matching name and argument count that are visible in the current search path (see
     <a class=""xref"" href=""ddl-schemas.html#DDL-SCHEMAS-PATH"" title=""5.10.3. The Schema Search Path"">
      Section 5.10.3
     </a>
     ). If a qualified function name was given, only functions in the specified schema are considered.
    </p>
    <ol class=""substeps"" type=""a"">
     <li class=""step"">
      <p>
       If the search path finds multiple functions of identical argument types, only the one appearing earliest in the path is considered. Functions of different argument types are considered on an equal footing regardless of search path position.
      </p>
     </li>
     <li class=""step"">
      <p>
       If a function is declared with a
       <code class=""literal"">
        VARIADIC
       </code>
       array parameter, and the call does not use the
       <code class=""literal"">
        VARIADIC
       </code>
       keyword, then the function is treated as if the array parameter were replaced by one or more occurrences of its element type, as needed to match the call. After such expansion the function might have effective argument types identical to some non-variadic function. In that case the function appearing earlier in the search path is used, or if the two functions are in the same schema, the non-variadic one is preferred.
      </p>
      <p>
       This creates a security hazard when calling, via qualified name
       <a class=""footnote"" href=""#ftn.FUNC-QUALIFIED-SECURITY"">
        <sup class=""footnote"" id=""FUNC-QUALIFIED-SECURITY"">
         [10]
        </sup>
       </a>
       , a variadic function found in a schema that permits untrusted users to create objects. A malicious user can take control and execute arbitrary SQL functions as though you executed them. Substitute a call bearing the
       <code class=""literal"">
        VARIADIC
       </code>
       keyword, which bypasses this hazard. Calls populating
       <code class=""literal"">
        VARIADIC ""any""
       </code>
       parameters often have no equivalent formulation containing the
       <code class=""literal"">
        VARIADIC
       </code>
       keyword. To issue those calls safely, the function's schema must permit only trusted users to create objects.
      </p>
     </li>
     <li class=""step"">
      <p>
       Functions that have default values for parameters are considered to match any call that omits zero or more of the defaultable parameter positions. If more than one such function matches a call, the one appearing earliest in the search path is used. If there are two or more such functions in the same schema with identical parameter types in the non-defaulted positions (which is possible if they have different sets of defaultable parameters), the system will not be able to determine which to prefer, and so an
       <span class=""quote"">
        “
        <span class=""quote"">
         ambiguous function call
        </span>
        ”
       </span>
       error will result if no better match to the call can be found.
      </p>
      <p>
       This creates an availability hazard when calling, via qualified name
       <a class=""footnoteref"" href=""typeconv-func.html#ftn.FUNC-QUALIFIED-SECURITY"">
        <sup class=""footnoteref"">
         [10]
        </sup>
       </a>
       , any function found in a schema that permits untrusted users to create objects. A malicious user can create a function with the name of an existing function, replicating that function's parameters and appending novel parameters having default values. This precludes new calls to the original function. To forestall this hazard, place functions in schemas that permit only trusted users to create objects.
      </p>
     </li>
    </ol>
   </li>
   <li class=""step"">
    <p>
     Check for a function accepting exactly the input argument types. If one exists (there can be only one exact match in the set of functions considered), use it. Lack of an exact match creates a security hazard when calling, via qualified name
     <a class=""footnoteref"" href=""typeconv-func.html#ftn.FUNC-QUALIFIED-SECURITY"">
      <sup class=""footnoteref"">
       [10]
      </sup>
     </a>
     , a function found in a schema that permits untrusted users to create objects. In such situations, cast arguments to force an exact match. (Cases involving
     <code class=""type"">
      unknown
     </code>
     will never find a match at this step.)
    </p>
   </li>
   <li class=""step"">
    <p>
     If no exact match is found, see if the function call appears to be a special type conversion request. This happens if the function call has just one argument and the function name is the same as the (internal) name of some data type. Furthermore, the function argument must be either an unknown-type literal, or a type that is binary-coercible to the named data type, or a type that could be converted to the named data type by applying that type's I/O functions (that is, the conversion is either to or from one of the standard string types). When these conditions are met, the function call is treated as a form of
     <code class=""literal"">
      CAST
     </code>
     specification.
     <a class=""footnote"" href=""#ftn.id-1.5.9.8.4.4.1.2"">
      <sup class=""footnote"" id=""id-1.5.9.8.4.4.1.2"">
       [11]
      </sup>
     </a>
    </p>
   </li>
   <li class=""step"">
    <p>
     Look for the best match.
    </p>
    <ol class=""substeps"" type=""a"">
     <li class=""step"">
      <p>
       Discard candidate functions for which the input types do not match and cannot be converted (using an implicit conversion) to match.
       <code class=""type"">
        unknown
       </code>
       literals are assumed to be convertible to anything for this purpose. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       If any input argument is of a domain type, treat it as being of the domain's base type for all subsequent steps. This ensures that domains act like their base types for purposes of ambiguous-function resolution.
      </p>
     </li>
     <li class=""step"">
      <p>
       Run through all candidates and keep those with the most exact matches on input types. Keep all candidates if none have exact matches. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       Run through all candidates and keep those that accept preferred types (of the input data type's type category) at the most positions where type conversion will be required. Keep all candidates if none accept preferred types. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       If any input arguments are
       <code class=""type"">
        unknown
       </code>
       , check the type categories accepted at those argument positions by the remaining candidates. At each position, select the
       <code class=""type"">
        string
       </code>
       category if any candidate accepts that category. (This bias towards string is appropriate since an unknown-type literal looks like a string.) Otherwise, if all the remaining candidates accept the same type category, select that category; otherwise fail because the correct choice cannot be deduced without more clues. Now discard candidates that do not accept the selected type category. Furthermore, if any candidate accepts a preferred type in that category, discard candidates that accept non-preferred types for that argument. Keep all candidates if none survive these tests. If only one candidate remains, use it; else continue to the next step.
      </p>
     </li>
     <li class=""step"">
      <p>
       If there are both
       <code class=""type"">
        unknown
       </code>
       and known-type arguments, and all the known-type arguments have the same type, assume that the
       <code class=""type"">
        unknown
       </code>
       arguments are also of that type, and check which candidates can accept that type at the
       <code class=""type"">
        unknown
       </code>
       -argument positions. If exactly one candidate passes this test, use it. Otherwise, fail.
      </p>
     </li>
    </ol>
   </li>
  </ol>
 </div>
 <p>
  Note that the
  <span class=""quote"">
   “
   <span class=""quote"">
    best match
   </span>
   ”
  </span>
  rules are identical for operator and function type resolution. Some examples follow.
 </p>
 <div class=""example"" id=""id-1.5.9.8.6"">
  <p class=""title"">
   <strong>
    Example 10.6. Rounding Function Argument Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    There is only one
    <code class=""function"">
     round
    </code>
    function that takes two arguments; it takes a first argument of type
    <code class=""type"">
     numeric
    </code>
    and a second argument of type
    <code class=""type"">
     integer
    </code>
    . So the following query automatically converts the first argument of type
    <code class=""type"">
     integer
    </code>
    to
    <code class=""type"">
     numeric
    </code>
    :
   </p>
   <pre class=""screen"">
SELECT round(4, 4);

 round
--------
 4.0000
(1 row)
</pre>
   <p>
    That query is actually transformed by the parser to:
   </p>
   <pre class=""screen"">
SELECT round(CAST (4 AS numeric), 4);
</pre>
   <p>
    Since numeric constants with decimal points are initially assigned the type
    <code class=""type"">
     numeric
    </code>
    , the following query will require no type conversion and therefore might be slightly more efficient:
   </p>
   <pre class=""screen"">
SELECT round(4.0, 4);
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.8.7"">
  <p class=""title"">
   <strong>
    Example 10.7. Variadic Function Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""screen"">
CREATE FUNCTION public.variadic_example(VARIADIC numeric[]) RETURNS int
  LANGUAGE sql AS 'SELECT 1';
CREATE FUNCTION
</pre>
   <p>
    This function accepts, but does not require, the VARIADIC keyword. It tolerates both integer and numeric arguments:
   </p>
   <pre class=""screen"">
SELECT public.variadic_example(0),
       public.variadic_example(0.0),
       public.variadic_example(VARIADIC array[0.0]);
 variadic_example | variadic_example | variadic_example
------------------+------------------+------------------
                1 |                1 |                1
(1 row)
</pre>
   <p>
    However, the first and second calls will prefer more-specific functions, if available:
   </p>
   <pre class=""screen"">
CREATE FUNCTION public.variadic_example(numeric) RETURNS int
  LANGUAGE sql AS 'SELECT 2';
CREATE FUNCTION

CREATE FUNCTION public.variadic_example(int) RETURNS int
  LANGUAGE sql AS 'SELECT 3';
CREATE FUNCTION

SELECT public.variadic_example(0),
       public.variadic_example(0.0),
       public.variadic_example(VARIADIC array[0.0]);
 variadic_example | variadic_example | variadic_example
------------------+------------------+------------------
                3 |                2 |                1
(1 row)
</pre>
   <p>
    Given the default configuration and only the first function existing, the first and second calls are insecure. Any user could intercept them by creating the second or third function. By matching the argument type exactly and using the
    <code class=""literal"">
     VARIADIC
    </code>
    keyword, the third call is secure.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.8.8"">
  <p class=""title"">
   <strong>
    Example 10.8. Substring Function Type Resolution
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    There are several
    <code class=""function"">
     substr
    </code>
    functions, one of which takes types
    <code class=""type"">
     text
    </code>
    and
    <code class=""type"">
     integer
    </code>
    . If called with a string constant of unspecified type, the system chooses the candidate function that accepts an argument of the preferred category
    <code class=""literal"">
     string
    </code>
    (namely of type
    <code class=""type"">
     text
    </code>
    ).
   </p>
   <pre class=""screen"">
SELECT substr('1234', 3);

 substr
--------
     34
(1 row)
</pre>
   <p>
    If the string is declared to be of type
    <code class=""type"">
     varchar
    </code>
    , as might be the case if it comes from a table, then the parser will try to convert it to become
    <code class=""type"">
     text
    </code>
    :
   </p>
   <pre class=""screen"">
SELECT substr(varchar '1234', 3);

 substr
--------
     34
(1 row)
</pre>
   <p>
    This is transformed by the parser to effectively become:
   </p>
   <pre class=""screen"">
SELECT substr(CAST (varchar '1234' AS text), 3);
</pre>
   <div class=""note"">
    <h3 class=""title"">
     Note
    </h3>
    <p>
     The parser learns from the
     <code class=""structname"">
      pg_cast
     </code>
     catalog that
     <code class=""type"">
      text
     </code>
     and
     <code class=""type"">
      varchar
     </code>
     are binary-compatible, meaning that one can be passed to a function that accepts the other without doing any physical conversion. Therefore, no type conversion call is really inserted in this case.
    </p>
   </div>
   <p>
    And, if the function is called with an argument of type
    <code class=""type"">
     integer
    </code>
    , the parser will try to convert that to
    <code class=""type"">
     text
    </code>
    :
   </p>
   <pre class=""screen"">
SELECT substr(1234, 3);
ERROR:  function substr(integer, integer) does not exist
HINT:  No function matches the given name and argument types. You might need
to add explicit type casts.
</pre>
   <p>
    This does not work because
    <code class=""type"">
     integer
    </code>
    does not have an implicit cast to
    <code class=""type"">
     text
    </code>
    . An explicit cast will work, however:
   </p>
   <pre class=""screen"">
SELECT substr(CAST (1234 AS text), 3);

 substr
--------
     34
(1 row)
</pre>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.FUNC-QUALIFIED-SECURITY"">
   <p>
    <a class=""para"" href=""#FUNC-QUALIFIED-SECURITY"">
     <sup class=""para"">
      [10]
     </sup>
    </a>
    The hazard does not arise with a non-schema-qualified name, because a search path containing schemas that permit untrusted users to create objects is not a
    <a class=""link"" href=""ddl-schemas.html#DDL-SCHEMAS-PATTERNS"" title=""5.10.6. Usage Patterns"">
     secure schema usage pattern
    </a>
    .
   </p>
  </div>
  <div class=""footnote"" id=""ftn.id-1.5.9.8.4.4.1.2"">
   <p>
    <a class=""para"" href=""#id-1.5.9.8.4.4.1.2"">
     <sup class=""para"">
      [11]
     </sup>
    </a>
    The reason for this step is to support function-style cast specifications in cases where there is not an actual cast function. If there is a cast function, it is conventionally named after its output type, and so there is no need to have a special case. See
    <a class=""xref"" href=""sql-createcast.html"" title=""CREATE CAST"">
     <span class=""refentrytitle"">
      CREATE CAST
     </span>
    </a>
    for additional commentary.
   </p>
  </div>
 </div>
</div>
"
10. Type Conversion,10.4. Value Storage,https://www.postgresql.org/docs/17/typeconv-query.html,"<div class=""sect1"" id=""TYPECONV-QUERY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.4. Value Storage
     <a class=""id_link"" href=""#TYPECONV-QUERY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Values to be inserted into a table are converted to the destination column's data type according to the following steps.
 </p>
 <div class=""procedure"" id=""id-1.5.9.9.3"">
  <p class=""title"">
   <strong>
    Value Storage Type Conversion
   </strong>
  </p>
  <ol class=""procedure"" type=""1"">
   <li class=""step"">
    <p>
     Check for an exact match with the target.
    </p>
   </li>
   <li class=""step"">
    <p>
     Otherwise, try to convert the expression to the target type. This is possible if an
     <em class=""firstterm"">
      assignment cast
     </em>
     between the two types is registered in the
     <code class=""structname"">
      pg_cast
     </code>
     catalog (see
     <a class=""xref"" href=""sql-createcast.html"" title=""CREATE CAST"">
      <span class=""refentrytitle"">
       CREATE CAST
      </span>
     </a>
     ). Alternatively, if the expression is an unknown-type literal, the contents of the literal string will be fed to the input conversion routine for the target type.
    </p>
   </li>
   <li class=""step"">
    <p>
     Check to see if there is a sizing cast for the target type. A sizing cast is a cast from that type to itself. If one is found in the
     <code class=""structname"">
      pg_cast
     </code>
     catalog, apply it to the expression before storing into the destination column. The implementation function for such a cast always takes an extra parameter of type
     <code class=""type"">
      integer
     </code>
     , which receives the destination column's
     <code class=""structfield"">
      atttypmod
     </code>
     value (typically its declared length, although the interpretation of
     <code class=""structfield"">
      atttypmod
     </code>
     varies for different data types), and it may take a third
     <code class=""type"">
      boolean
     </code>
     parameter that says whether the cast is explicit or implicit. The cast function is responsible for applying any length-dependent semantics such as size checking or truncation.
    </p>
   </li>
  </ol>
 </div>
 <div class=""example"" id=""id-1.5.9.9.4"">
  <p class=""title"">
   <strong>
    Example 10.9.
    <code class=""type"">
     character
    </code>
    Storage Type Conversion
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    For a target column declared as
    <code class=""type"">
     character(20)
    </code>
    the following statement shows that the stored value is sized correctly:
   </p>
   <pre class=""screen"">
CREATE TABLE vv (v character(20));
INSERT INTO vv SELECT 'abc' || 'def';
SELECT v, octet_length(v) FROM vv;

          v           | octet_length
----------------------+--------------
 abcdef               |           20
(1 row)
</pre>
   <p>
    What has really happened here is that the two unknown literals are resolved to
    <code class=""type"">
     text
    </code>
    by default, allowing the
    <code class=""literal"">
     ||
    </code>
    operator to be resolved as
    <code class=""type"">
     text
    </code>
    concatenation. Then the
    <code class=""type"">
     text
    </code>
    result of the operator is converted to
    <code class=""type"">
     bpchar
    </code>
    (
    <span class=""quote"">
     “
     <span class=""quote"">
      blank-padded char
     </span>
     ”
    </span>
    , the internal name of the
    <code class=""type"">
     character
    </code>
    data type) to match the target column type. (Since the conversion from
    <code class=""type"">
     text
    </code>
    to
    <code class=""type"">
     bpchar
    </code>
    is binary-coercible, this conversion does not insert any real function call.) Finally, the sizing function
    <code class=""literal"">
     bpchar(bpchar, integer, boolean)
    </code>
    is found in the system catalog and applied to the operator's result and the stored column length. This type-specific function performs the required length check and addition of padding spaces.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
</div>
"
10. Type Conversion,"10.5. UNION, CASE, and Related Constructs",https://www.postgresql.org/docs/17/typeconv-union-case.html,"<div class=""sect1"" id=""TYPECONV-UNION-CASE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.5.
     <code class=""literal"">
      UNION
     </code>
     ,
     <code class=""literal"">
      CASE
     </code>
     , and Related Constructs
     <a class=""id_link"" href=""#TYPECONV-UNION-CASE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.9.10.2"" name=""id-1.5.9.10.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.9.10.3"" name=""id-1.5.9.10.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.9.10.4"" name=""id-1.5.9.10.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.9.10.5"" name=""id-1.5.9.10.5"">
 </a>
 <a class=""indexterm"" id=""id-1.5.9.10.6"" name=""id-1.5.9.10.6"">
 </a>
 <a class=""indexterm"" id=""id-1.5.9.10.7"" name=""id-1.5.9.10.7"">
 </a>
 <p>
  SQL
  <code class=""literal"">
   UNION
  </code>
  constructs must match up possibly dissimilar types to become a single result set. The resolution algorithm is applied separately to each output column of a union query. The
  <code class=""literal"">
   INTERSECT
  </code>
  and
  <code class=""literal"">
   EXCEPT
  </code>
  constructs resolve dissimilar types in the same way as
  <code class=""literal"">
   UNION
  </code>
  . Some other constructs, including
  <code class=""literal"">
   CASE
  </code>
  ,
  <code class=""literal"">
   ARRAY
  </code>
  ,
  <code class=""literal"">
   VALUES
  </code>
  , and the
  <code class=""function"">
   GREATEST
  </code>
  and
  <code class=""function"">
   LEAST
  </code>
  functions, use the identical algorithm to match up their component expressions and select a result data type.
 </p>
 <div class=""procedure"" id=""id-1.5.9.10.9"">
  <p class=""title"">
   <strong>
    Type Resolution for
    <code class=""literal"">
     UNION
    </code>
    ,
    <code class=""literal"">
     CASE
    </code>
    , and Related Constructs
   </strong>
  </p>
  <ol class=""procedure"" type=""1"">
   <li class=""step"">
    <p>
     If all inputs are of the same type, and it is not
     <code class=""type"">
      unknown
     </code>
     , resolve as that type.
    </p>
   </li>
   <li class=""step"">
    <p>
     If any input is of a domain type, treat it as being of the domain's base type for all subsequent steps.
     <a class=""footnote"" href=""#ftn.id-1.5.9.10.9.3.1.1"">
      <sup class=""footnote"" id=""id-1.5.9.10.9.3.1.1"">
       [12]
      </sup>
     </a>
    </p>
   </li>
   <li class=""step"">
    <p>
     If all inputs are of type
     <code class=""type"">
      unknown
     </code>
     , resolve as type
     <code class=""type"">
      text
     </code>
     (the preferred type of the string category). Otherwise,
     <code class=""type"">
      unknown
     </code>
     inputs are ignored for the purposes of the remaining rules.
    </p>
   </li>
   <li class=""step"">
    <p>
     If the non-unknown inputs are not all of the same type category, fail.
    </p>
   </li>
   <li class=""step"">
    <p>
     Select the first non-unknown input type as the candidate type, then consider each other non-unknown input type, left to right.
     <a class=""footnote"" href=""#ftn.id-1.5.9.10.9.6.1.1"">
      <sup class=""footnote"" id=""id-1.5.9.10.9.6.1.1"">
       [13]
      </sup>
     </a>
     If the candidate type can be implicitly converted to the other type, but not vice-versa, select the other type as the new candidate type. Then continue considering the remaining inputs. If, at any stage of this process, a preferred type is selected, stop considering additional inputs.
    </p>
   </li>
   <li class=""step"">
    <p>
     Convert all inputs to the final candidate type. Fail if there is not an implicit conversion from a given input type to the candidate type.
    </p>
   </li>
  </ol>
 </div>
 <p>
  Some examples follow.
 </p>
 <div class=""example"" id=""id-1.5.9.10.11"">
  <p class=""title"">
   <strong>
    Example 10.10. Type Resolution with Underspecified Types in a Union
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""screen"">
SELECT text 'a' AS ""text"" UNION SELECT 'b';

 text
------
 a
 b
(2 rows)
</pre>
   <p>
    Here, the unknown-type literal
    <code class=""literal"">
     'b'
    </code>
    will be resolved to type
    <code class=""type"">
     text
    </code>
    .
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.10.12"">
  <p class=""title"">
   <strong>
    Example 10.11. Type Resolution in a Simple Union
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""screen"">
SELECT 1.2 AS ""numeric"" UNION SELECT 1;

 numeric
---------
       1
     1.2
(2 rows)
</pre>
   <p>
    The literal
    <code class=""literal"">
     1.2
    </code>
    is of type
    <code class=""type"">
     numeric
    </code>
    , and the
    <code class=""type"">
     integer
    </code>
    value
    <code class=""literal"">
     1
    </code>
    can be cast implicitly to
    <code class=""type"">
     numeric
    </code>
    , so that type is used.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.10.13"">
  <p class=""title"">
   <strong>
    Example 10.12. Type Resolution in a Transposed Union
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""screen"">
SELECT 1 AS ""real"" UNION SELECT CAST('2.2' AS REAL);

 real
------
    1
  2.2
(2 rows)
</pre>
   <p>
    Here, since type
    <code class=""type"">
     real
    </code>
    cannot be implicitly cast to
    <code class=""type"">
     integer
    </code>
    , but
    <code class=""type"">
     integer
    </code>
    can be implicitly cast to
    <code class=""type"">
     real
    </code>
    , the union result type is resolved as
    <code class=""type"">
     real
    </code>
    .
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""example"" id=""id-1.5.9.10.14"">
  <p class=""title"">
   <strong>
    Example 10.13. Type Resolution in a Nested Union
   </strong>
  </p>
  <div class=""example-contents"">
   <pre class=""screen"">
SELECT NULL UNION SELECT NULL UNION SELECT 1;

ERROR:  UNION types text and integer cannot be matched
</pre>
   <p>
    This failure occurs because
    <span class=""productname"">
     PostgreSQL
    </span>
    treats multiple
    <code class=""literal"">
     UNION
    </code>
    s as a nest of pairwise operations; that is, this input is the same as
   </p>
   <pre class=""screen"">
(SELECT NULL UNION SELECT NULL) UNION SELECT 1;
</pre>
   <p>
    The inner
    <code class=""literal"">
     UNION
    </code>
    is resolved as emitting type
    <code class=""type"">
     text
    </code>
    , according to the rules given above. Then the outer
    <code class=""literal"">
     UNION
    </code>
    has inputs of types
    <code class=""type"">
     text
    </code>
    and
    <code class=""type"">
     integer
    </code>
    , leading to the observed error. The problem can be fixed by ensuring that the leftmost
    <code class=""literal"">
     UNION
    </code>
    has at least one input of the desired result type.
   </p>
   <p>
    <code class=""literal"">
     INTERSECT
    </code>
    and
    <code class=""literal"">
     EXCEPT
    </code>
    operations are likewise resolved pairwise. However, the other constructs described in this section consider all of their inputs in one resolution step.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.id-1.5.9.10.9.3.1.1"">
   <p>
    <a class=""para"" href=""#id-1.5.9.10.9.3.1.1"">
     <sup class=""para"">
      [12]
     </sup>
    </a>
    Somewhat like the treatment of domain inputs for operators and functions, this behavior allows a domain type to be preserved through a
    <code class=""literal"">
     UNION
    </code>
    or similar construct, so long as the user is careful to ensure that all inputs are implicitly or explicitly of that exact type. Otherwise the domain's base type will be used.
   </p>
  </div>
  <div class=""footnote"" id=""ftn.id-1.5.9.10.9.6.1.1"">
   <p>
    <a class=""para"" href=""#id-1.5.9.10.9.6.1.1"">
     <sup class=""para"">
      [13]
     </sup>
    </a>
    For historical reasons,
    <code class=""literal"">
     CASE
    </code>
    treats its
    <code class=""literal"">
     ELSE
    </code>
    clause (if any) as the
    <span class=""quote"">
     “
     <span class=""quote"">
      first
     </span>
     ”
    </span>
    input, with the
    <code class=""literal"">
     THEN
    </code>
    clauses(s) considered after that. In all other cases,
    <span class=""quote"">
     “
     <span class=""quote"">
      left to right
     </span>
     ”
    </span>
    means the order in which the expressions appear in the query text.
   </p>
  </div>
 </div>
</div>
"
10. Type Conversion,10.6. SELECT Output Columns,https://www.postgresql.org/docs/17/typeconv-select.html,"<div class=""sect1"" id=""TYPECONV-SELECT"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     10.6.
     <code class=""literal"">
      SELECT
     </code>
     Output Columns
     <a class=""id_link"" href=""#TYPECONV-SELECT"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.9.11.2"" name=""id-1.5.9.11.2"">
 </a>
 <p>
  The rules given in the preceding sections will result in assignment of non-
  <code class=""type"">
   unknown
  </code>
  data types to all expressions in an SQL query, except for unspecified-type literals that appear as simple output columns of a
  <code class=""command"">
   SELECT
  </code>
  command. For example, in
 </p>
 <pre class=""screen"">
SELECT 'Hello World';
</pre>
 <p>
  there is nothing to identify what type the string literal should be taken as. In this situation
  <span class=""productname"">
   PostgreSQL
  </span>
  will fall back to resolving the literal's type as
  <code class=""type"">
   text
  </code>
  .
 </p>
 <p>
  When the
  <code class=""command"">
   SELECT
  </code>
  is one arm of a
  <code class=""literal"">
   UNION
  </code>
  (or
  <code class=""literal"">
   INTERSECT
  </code>
  or
  <code class=""literal"">
   EXCEPT
  </code>
  ) construct, or when it appears within
  <code class=""command"">
   INSERT ... SELECT
  </code>
  , this rule is not applied since rules given in preceding sections take precedence. The type of an unspecified-type literal can be taken from the other
  <code class=""literal"">
   UNION
  </code>
  arm in the first case, or from the destination column in the second case.
 </p>
 <p>
  <code class=""literal"">
   RETURNING
  </code>
  lists are treated the same as
  <code class=""command"">
   SELECT
  </code>
  output lists for this purpose.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   Prior to
   <span class=""productname"">
    PostgreSQL
   </span>
   10, this rule did not exist, and unspecified-type literals in a
   <code class=""command"">
    SELECT
   </code>
   output list were left as type
   <code class=""type"">
    unknown
   </code>
   . That had assorted bad consequences, so it's been changed.
  </p>
 </div>
</div>
"
11. Indexes,11.1. Introduction,https://www.postgresql.org/docs/17/indexes-intro.html,"<div class=""sect1"" id=""INDEXES-INTRO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.1. Introduction
     <a class=""id_link"" href=""#INDEXES-INTRO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Suppose we have a table similar to this:
 </p>
 <pre class=""programlisting"">
CREATE TABLE test1 (
    id integer,
    content varchar
);
</pre>
 <p>
  and the application issues many queries of the form:
 </p>
 <pre class=""programlisting"">
SELECT content FROM test1 WHERE id = <em class=""replaceable""><code>constant</code></em>;
</pre>
 <p>
  With no advance preparation, the system would have to scan the entire
  <code class=""structname"">
   test1
  </code>
  table, row by row, to find all matching entries. If there are many rows in
  <code class=""structname"">
   test1
  </code>
  and only a few rows (perhaps zero or one) that would be returned by such a query, this is clearly an inefficient method. But if the system has been instructed to maintain an index on the
  <code class=""structfield"">
   id
  </code>
  column, it can use a more efficient method for locating matching rows. For instance, it might only have to walk a few levels deep into a search tree.
 </p>
 <p>
  A similar approach is used in most non-fiction books: terms and concepts that are frequently looked up by readers are collected in an alphabetic index at the end of the book. The interested reader can scan the index relatively quickly and flip to the appropriate page(s), rather than having to read the entire book to find the material of interest. Just as it is the task of the author to anticipate the items that readers are likely to look up, it is the task of the database programmer to foresee which indexes will be useful.
 </p>
 <p>
  The following command can be used to create an index on the
  <code class=""structfield"">
   id
  </code>
  column, as discussed:
 </p>
 <pre class=""programlisting"">
CREATE INDEX test1_id_index ON test1 (id);
</pre>
 <p>
  The name
  <code class=""structname"">
   test1_id_index
  </code>
  can be chosen freely, but you should pick something that enables you to remember later what the index was for.
 </p>
 <p>
  To remove an index, use the
  <code class=""command"">
   DROP INDEX
  </code>
  command. Indexes can be added to and removed from tables at any time.
 </p>
 <p>
  Once an index is created, no further intervention is required: the system will update the index when the table is modified, and it will use the index in queries when it thinks doing so would be more efficient than a sequential table scan. But you might have to run the
  <code class=""command"">
   ANALYZE
  </code>
  command regularly to update statistics to allow the query planner to make educated decisions. See
  <a class=""xref"" href=""performance-tips.html"" title=""Chapter 14. Performance Tips"">
   Chapter 14
  </a>
  for information about how to find out whether an index is used and when and why the planner might choose
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  to use an index.
 </p>
 <p>
  Indexes can also benefit
  <code class=""command"">
   UPDATE
  </code>
  and
  <code class=""command"">
   DELETE
  </code>
  commands with search conditions. Indexes can moreover be used in join searches. Thus, an index defined on a column that is part of a join condition can also significantly speed up queries with joins.
 </p>
 <p>
  In general,
  <span class=""productname"">
   PostgreSQL
  </span>
  indexes can be used to optimize queries that contain one or more
  <code class=""literal"">
   WHERE
  </code>
  or
  <code class=""literal"">
   JOIN
  </code>
  clauses of the form
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>indexed-column</code></em> <em class=""replaceable""><code>indexable-operator</code></em> <em class=""replaceable""><code>comparison-value</code></em>
</pre>
 <p>
  Here, the
  <em class=""replaceable"">
   <code>
    indexed-column
   </code>
  </em>
  is whatever column or expression the index has been defined on. The
  <em class=""replaceable"">
   <code>
    indexable-operator
   </code>
  </em>
  is an operator that is a member of the index's
  <em class=""firstterm"">
   operator class
  </em>
  for the indexed column. (More details about that appear below.) And the
  <em class=""replaceable"">
   <code>
    comparison-value
   </code>
  </em>
  can be any expression that is not volatile and does not reference the index's table.
 </p>
 <p>
  In some cases the query planner can extract an indexable clause of this form from another SQL construct. A simple example is that if the original clause was
 </p>
 <pre class=""synopsis"">
<em class=""replaceable""><code>comparison-value</code></em> <em class=""replaceable""><code>operator</code></em> <em class=""replaceable""><code>indexed-column</code></em>
</pre>
 <p>
  then it can be flipped around into indexable form if the original
  <em class=""replaceable"">
   <code>
    operator
   </code>
  </em>
  has a commutator operator that is a member of the index's operator class.
 </p>
 <p>
  Creating an index on a large table can take a long time. By default,
  <span class=""productname"">
   PostgreSQL
  </span>
  allows reads (
  <code class=""command"">
   SELECT
  </code>
  statements) to occur on the table in parallel with index creation, but writes (
  <code class=""command"">
   INSERT
  </code>
  ,
  <code class=""command"">
   UPDATE
  </code>
  ,
  <code class=""command"">
   DELETE
  </code>
  ) are blocked until the index build is finished. In production environments this is often unacceptable. It is possible to allow writes to occur in parallel with index creation, but there are several caveats to be aware of — for more information see
  <a class=""xref"" href=""sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY"" title=""Building Indexes Concurrently"">
   Building Indexes Concurrently
  </a>
  .
 </p>
 <p>
  After an index is created, the system has to keep it synchronized with the table. This adds overhead to data manipulation operations. Indexes can also prevent the creation of
  <a class=""link"" href=""storage-hot.html"" title=""65.7. Heap-Only Tuples (HOT)"">
   heap-only tuples
  </a>
  . Therefore indexes that are seldom or never used in queries should be removed.
 </p>
</div>
"
11. Indexes,11.2. Index Types,https://www.postgresql.org/docs/17/indexes-types.html,"<div class=""sect1"" id=""INDEXES-TYPES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.2. Index Types
     <a class=""id_link"" href=""#INDEXES-TYPES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPES-BTREE"">
      11.2.1. B-Tree
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPES-HASH"">
      11.2.2. Hash
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPE-GIST"">
      11.2.3. GiST
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPE-SPGIST"">
      11.2.4. SP-GiST
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPES-GIN"">
      11.2.5. GIN
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""indexes-types.html#INDEXES-TYPES-BRIN"">
      11.2.6. BRIN
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides several index types: B-tree, Hash, GiST, SP-GiST, GIN, BRIN, and the extension
  <a class=""link"" href=""bloom.html"" title=""F.6. bloom — bloom filter index access method"">
   bloom
  </a>
  . Each index type uses a different algorithm that is best suited to different types of indexable clauses. By default, the
  <a class=""link"" href=""sql-createindex.html"" title=""CREATE INDEX"">
   <code class=""command"">
    CREATE INDEX
   </code>
  </a>
  command creates B-tree indexes, which fit the most common situations. The other index types are selected by writing the keyword
  <code class=""literal"">
   USING
  </code>
  followed by the index type name. For example, to create a Hash index:
 </p>
 <pre class=""programlisting"">
CREATE INDEX <em class=""replaceable""><code>name</code></em> ON <em class=""replaceable""><code>table</code></em> USING HASH (<em class=""replaceable""><code>column</code></em>);
</pre>
 <div class=""sect2"" id=""INDEXES-TYPES-BTREE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.1. B-Tree
      <a class=""id_link"" href=""#INDEXES-TYPES-BTREE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.3.2"" name=""id-1.5.10.5.3.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.3.3"" name=""id-1.5.10.5.3.3"">
  </a>
  <p>
   B-trees can handle equality and range queries on data that can be sorted into some ordering. In particular, the
   <span class=""productname"">
    PostgreSQL
   </span>
   query planner will consider using a B-tree index whenever an indexed column is involved in a comparison using one of these operators:
  </p>
  <pre class=""synopsis"">
&lt;   &lt;=   =   &gt;=   &gt;
</pre>
  <p>
   Constructs equivalent to combinations of these operators, such as
   <code class=""literal"">
    BETWEEN
   </code>
   and
   <code class=""literal"">
    IN
   </code>
   , can also be implemented with a B-tree index search. Also, an
   <code class=""literal"">
    IS NULL
   </code>
   or
   <code class=""literal"">
    IS NOT NULL
   </code>
   condition on an index column can be used with a B-tree index.
  </p>
  <p>
   The optimizer can also use a B-tree index for queries involving the pattern matching operators
   <code class=""literal"">
    LIKE
   </code>
   and
   <code class=""literal"">
    ~
   </code>
   <span class=""emphasis"">
    <em>
     if
    </em>
   </span>
   the pattern is a constant and is anchored to the beginning of the string — for example,
   <code class=""literal"">
    col LIKE 'foo%'
   </code>
   or
   <code class=""literal"">
    col ~ '^foo'
   </code>
   , but not
   <code class=""literal"">
    col LIKE '%bar'
   </code>
   . However, if your database does not use the C locale you will need to create the index with a special operator class to support indexing of pattern-matching queries; see
   <a class=""xref"" href=""indexes-opclass.html"" title=""11.10. Operator Classes and Operator Families"">
    Section 11.10
   </a>
   below. It is also possible to use B-tree indexes for
   <code class=""literal"">
    ILIKE
   </code>
   and
   <code class=""literal"">
    ~*
   </code>
   , but only if the pattern starts with non-alphabetic characters, i.e., characters that are not affected by upper/lower case conversion.
  </p>
  <p>
   B-tree indexes can also be used to retrieve data in sorted order. This is not always faster than a simple scan and sort, but it is often helpful.
  </p>
 </div>
 <div class=""sect2"" id=""INDEXES-TYPES-HASH"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.2. Hash
      <a class=""id_link"" href=""#INDEXES-TYPES-HASH"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.4.2"" name=""id-1.5.10.5.4.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.4.3"" name=""id-1.5.10.5.4.3"">
  </a>
  <p>
   Hash indexes store a 32-bit hash code derived from the value of the indexed column. Hence, such indexes can only handle simple equality comparisons. The query planner will consider using a hash index whenever an indexed column is involved in a comparison using the equal operator:
  </p>
  <pre class=""synopsis"">
=
</pre>
 </div>
 <div class=""sect2"" id=""INDEXES-TYPE-GIST"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.3. GiST
      <a class=""id_link"" href=""#INDEXES-TYPE-GIST"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.5.2"" name=""id-1.5.10.5.5.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.5.3"" name=""id-1.5.10.5.5.3"">
  </a>
  <p>
   GiST indexes are not a single kind of index, but rather an infrastructure within which many different indexing strategies can be implemented. Accordingly, the particular operators with which a GiST index can be used vary depending on the indexing strategy (the
   <em class=""firstterm"">
    operator class
   </em>
   ). As an example, the standard distribution of
   <span class=""productname"">
    PostgreSQL
   </span>
   includes GiST operator classes for several two-dimensional geometric data types, which support indexed queries using these operators:
  </p>
  <pre class=""synopsis"">
&lt;&lt;   &amp;&lt;   &amp;&gt;   &gt;&gt;   &lt;&lt;|   &amp;&lt;|   |&amp;&gt;   |&gt;&gt;   @&gt;   &lt;@   ~=   &amp;&amp;
</pre>
  <p>
   (See
   <a class=""xref"" href=""functions-geometry.html"" title=""9.11. Geometric Functions and Operators"">
    Section 9.11
   </a>
   for the meaning of these operators.) The GiST operator classes included in the standard distribution are documented in
   <a class=""xref"" href=""gist.html#GIST-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.1. Built-in GiST Operator Classes"">
    Table 64.1
   </a>
   . Many other GiST operator classes are available in the
   <code class=""literal"">
    contrib
   </code>
   collection or as separate projects. For more information see
   <a class=""xref"" href=""gist.html"" title=""64.2. GiST Indexes"">
    Section 64.2
   </a>
   .
  </p>
  <p>
   GiST indexes are also capable of optimizing
   <span class=""quote"">
    “
    <span class=""quote"">
     nearest-neighbor
    </span>
    ”
   </span>
   searches, such as
  </p>
  <pre class=""programlisting"">
SELECT * FROM places ORDER BY location &lt;-&gt; point '(101,456)' LIMIT 10;

</pre>
  <p>
   which finds the ten places closest to a given target point. The ability to do this is again dependent on the particular operator class being used. In
   <a class=""xref"" href=""gist.html#GIST-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.1. Built-in GiST Operator Classes"">
    Table 64.1
   </a>
   , operators that can be used in this way are listed in the column
   <span class=""quote"">
    “
    <span class=""quote"">
     Ordering Operators
    </span>
    ”
   </span>
   .
  </p>
 </div>
 <div class=""sect2"" id=""INDEXES-TYPE-SPGIST"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.4. SP-GiST
      <a class=""id_link"" href=""#INDEXES-TYPE-SPGIST"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.6.2"" name=""id-1.5.10.5.6.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.6.3"" name=""id-1.5.10.5.6.3"">
  </a>
  <p>
   SP-GiST indexes, like GiST indexes, offer an infrastructure that supports various kinds of searches. SP-GiST permits implementation of a wide range of different non-balanced disk-based data structures, such as quadtrees, k-d trees, and radix trees (tries). As an example, the standard distribution of
   <span class=""productname"">
    PostgreSQL
   </span>
   includes SP-GiST operator classes for two-dimensional points, which support indexed queries using these operators:
  </p>
  <pre class=""synopsis"">
&lt;&lt;   &gt;&gt;   ~=   &lt;@   &lt;&lt;|   |&gt;&gt;
</pre>
  <p>
   (See
   <a class=""xref"" href=""functions-geometry.html"" title=""9.11. Geometric Functions and Operators"">
    Section 9.11
   </a>
   for the meaning of these operators.) The SP-GiST operator classes included in the standard distribution are documented in
   <a class=""xref"" href=""spgist.html#SPGIST-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.2. Built-in SP-GiST Operator Classes"">
    Table 64.2
   </a>
   . For more information see
   <a class=""xref"" href=""spgist.html"" title=""64.3. SP-GiST Indexes"">
    Section 64.3
   </a>
   .
  </p>
  <p>
   Like GiST, SP-GiST supports
   <span class=""quote"">
    “
    <span class=""quote"">
     nearest-neighbor
    </span>
    ”
   </span>
   searches. For SP-GiST operator classes that support distance ordering, the corresponding operator is listed in the
   <span class=""quote"">
    “
    <span class=""quote"">
     Ordering Operators
    </span>
    ”
   </span>
   column in
   <a class=""xref"" href=""spgist.html#SPGIST-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.2. Built-in SP-GiST Operator Classes"">
    Table 64.2
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""INDEXES-TYPES-GIN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.5. GIN
      <a class=""id_link"" href=""#INDEXES-TYPES-GIN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.7.2"" name=""id-1.5.10.5.7.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.7.3"" name=""id-1.5.10.5.7.3"">
  </a>
  <p>
   GIN indexes are
   <span class=""quote"">
    “
    <span class=""quote"">
     inverted indexes
    </span>
    ”
   </span>
   which are appropriate for data values that contain multiple component values, such as arrays. An inverted index contains a separate entry for each component value, and can efficiently handle queries that test for the presence of specific component values.
  </p>
  <p>
   Like GiST and SP-GiST, GIN can support many different user-defined indexing strategies, and the particular operators with which a GIN index can be used vary depending on the indexing strategy. As an example, the standard distribution of
   <span class=""productname"">
    PostgreSQL
   </span>
   includes a GIN operator class for arrays, which supports indexed queries using these operators:
  </p>
  <pre class=""synopsis"">
&lt;@   @&gt;   =   &amp;&amp;
</pre>
  <p>
   (See
   <a class=""xref"" href=""functions-array.html"" title=""9.19. Array Functions and Operators"">
    Section 9.19
   </a>
   for the meaning of these operators.) The GIN operator classes included in the standard distribution are documented in
   <a class=""xref"" href=""gin.html#GIN-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.3. Built-in GIN Operator Classes"">
    Table 64.3
   </a>
   . Many other GIN operator classes are available in the
   <code class=""literal"">
    contrib
   </code>
   collection or as separate projects. For more information see
   <a class=""xref"" href=""gin.html"" title=""64.4. GIN Indexes"">
    Section 64.4
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""INDEXES-TYPES-BRIN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      11.2.6. BRIN
      <a class=""id_link"" href=""#INDEXES-TYPES-BRIN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.10.5.8.2"" name=""id-1.5.10.5.8.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.10.5.8.3"" name=""id-1.5.10.5.8.3"">
  </a>
  <p>
   BRIN indexes (a shorthand for Block Range INdexes) store summaries about the values stored in consecutive physical block ranges of a table. Thus, they are most effective for columns whose values are well-correlated with the physical order of the table rows. Like GiST, SP-GiST and GIN, BRIN can support many different indexing strategies, and the particular operators with which a BRIN index can be used vary depending on the indexing strategy. For data types that have a linear sort order, the indexed data corresponds to the minimum and maximum values of the values in the column for each block range. This supports indexed queries using these operators:
  </p>
  <pre class=""synopsis"">
&lt;   &lt;=   =   &gt;=   &gt;
</pre>
  <p>
   The BRIN operator classes included in the standard distribution are documented in
   <a class=""xref"" href=""brin.html#BRIN-BUILTIN-OPCLASSES-TABLE"" title=""Table 64.4. Built-in BRIN Operator Classes"">
    Table 64.4
   </a>
   . For more information see
   <a class=""xref"" href=""brin.html"" title=""64.5. BRIN Indexes"">
    Section 64.5
   </a>
   .
  </p>
 </div>
</div>
"
11. Indexes,11.3. Multicolumn Indexes,https://www.postgresql.org/docs/17/indexes-multicolumn.html,"<div class=""sect1"" id=""INDEXES-MULTICOLUMN"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.3. Multicolumn Indexes
     <a class=""id_link"" href=""#INDEXES-MULTICOLUMN"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.6.2"" name=""id-1.5.10.6.2"">
 </a>
 <p>
  An index can be defined on more than one column of a table. For example, if you have a table of this form:
 </p>
 <pre class=""programlisting"">
CREATE TABLE test2 (
  major int,
  minor int,
  name varchar
);
</pre>
 <p>
  (say, you keep your
  <code class=""filename"">
   /dev
  </code>
  directory in a database...) and you frequently issue queries like:
 </p>
 <pre class=""programlisting"">
SELECT name FROM test2 WHERE major = <em class=""replaceable""><code>constant</code></em> AND minor = <em class=""replaceable""><code>constant</code></em>;
</pre>
 <p>
  then it might be appropriate to define an index on the columns
  <code class=""structfield"">
   major
  </code>
  and
  <code class=""structfield"">
   minor
  </code>
  together, e.g.:
 </p>
 <pre class=""programlisting"">
CREATE INDEX test2_mm_idx ON test2 (major, minor);
</pre>
 <p>
  Currently, only the B-tree, GiST, GIN, and BRIN index types support multiple-key-column indexes. Whether there can be multiple key columns is independent of whether
  <code class=""literal"">
   INCLUDE
  </code>
  columns can be added to the index. Indexes can have up to 32 columns, including
  <code class=""literal"">
   INCLUDE
  </code>
  columns. (This limit can be altered when building
  <span class=""productname"">
   PostgreSQL
  </span>
  ; see the file
  <code class=""filename"">
   pg_config_manual.h
  </code>
  .)
 </p>
 <p>
  A multicolumn B-tree index can be used with query conditions that involve any subset of the index's columns, but the index is most efficient when there are constraints on the leading (leftmost) columns. The exact rule is that equality constraints on leading columns, plus any inequality constraints on the first column that does not have an equality constraint, will be used to limit the portion of the index that is scanned. Constraints on columns to the right of these columns are checked in the index, so they save visits to the table proper, but they do not reduce the portion of the index that has to be scanned. For example, given an index on
  <code class=""literal"">
   (a, b, c)
  </code>
  and a query condition
  <code class=""literal"">
   WHERE a = 5 AND b &gt;= 42 AND c &lt; 77
  </code>
  , the index would have to be scanned from the first entry with
  <code class=""literal"">
   a
  </code>
  = 5 and
  <code class=""literal"">
   b
  </code>
  = 42 up through the last entry with
  <code class=""literal"">
   a
  </code>
  = 5. Index entries with
  <code class=""literal"">
   c
  </code>
  &gt;= 77 would be skipped, but they'd still have to be scanned through. This index could in principle be used for queries that have constraints on
  <code class=""literal"">
   b
  </code>
  and/or
  <code class=""literal"">
   c
  </code>
  with no constraint on
  <code class=""literal"">
   a
  </code>
  — but the entire index would have to be scanned, so in most cases the planner would prefer a sequential table scan over using the index.
 </p>
 <p>
  A multicolumn GiST index can be used with query conditions that involve any subset of the index's columns. Conditions on additional columns restrict the entries returned by the index, but the condition on the first column is the most important one for determining how much of the index needs to be scanned. A GiST index will be relatively ineffective if its first column has only a few distinct values, even if there are many distinct values in additional columns.
 </p>
 <p>
  A multicolumn GIN index can be used with query conditions that involve any subset of the index's columns. Unlike B-tree or GiST, index search effectiveness is the same regardless of which index column(s) the query conditions use.
 </p>
 <p>
  A multicolumn BRIN index can be used with query conditions that involve any subset of the index's columns. Like GIN and unlike B-tree or GiST, index search effectiveness is the same regardless of which index column(s) the query conditions use. The only reason to have multiple BRIN indexes instead of one multicolumn BRIN index on a single table is to have a different
  <code class=""literal"">
   pages_per_range
  </code>
  storage parameter.
 </p>
 <p>
  Of course, each column must be used with operators appropriate to the index type; clauses that involve other operators will not be considered.
 </p>
 <p>
  Multicolumn indexes should be used sparingly. In most situations, an index on a single column is sufficient and saves space and time. Indexes with more than three columns are unlikely to be helpful unless the usage of the table is extremely stylized. See also
  <a class=""xref"" href=""indexes-bitmap-scans.html"" title=""11.5. Combining Multiple Indexes"">
   Section 11.5
  </a>
  and
  <a class=""xref"" href=""indexes-index-only-scans.html"" title=""11.9. Index-Only Scans and Covering Indexes"">
   Section 11.9
  </a>
  for some discussion of the merits of different index configurations.
 </p>
</div>
"
11. Indexes,11.4. Indexes and ORDER BY,https://www.postgresql.org/docs/17/indexes-ordering.html,"<div class=""sect1"" id=""INDEXES-ORDERING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.4. Indexes and
     <code class=""literal"">
      ORDER BY
     </code>
     <a class=""id_link"" href=""#INDEXES-ORDERING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.7.2"" name=""id-1.5.10.7.2"">
 </a>
 <p>
  In addition to simply finding the rows to be returned by a query, an index may be able to deliver them in a specific sorted order. This allows a query's
  <code class=""literal"">
   ORDER BY
  </code>
  specification to be honored without a separate sorting step. Of the index types currently supported by
  <span class=""productname"">
   PostgreSQL
  </span>
  , only B-tree can produce sorted output — the other index types return matching rows in an unspecified, implementation-dependent order.
 </p>
 <p>
  The planner will consider satisfying an
  <code class=""literal"">
   ORDER BY
  </code>
  specification either by scanning an available index that matches the specification, or by scanning the table in physical order and doing an explicit sort. For a query that requires scanning a large fraction of the table, an explicit sort is likely to be faster than using an index because it requires less disk I/O due to following a sequential access pattern. Indexes are more useful when only a few rows need be fetched. An important special case is
  <code class=""literal"">
   ORDER BY
  </code>
  in combination with
  <code class=""literal"">
   LIMIT
  </code>
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  : an explicit sort will have to process all the data to identify the first
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  rows, but if there is an index matching the
  <code class=""literal"">
   ORDER BY
  </code>
  , the first
  <em class=""replaceable"">
   <code>
    n
   </code>
  </em>
  rows can be retrieved directly, without scanning the remainder at all.
 </p>
 <p>
  By default, B-tree indexes store their entries in ascending order with nulls last (table TID is treated as a tiebreaker column among otherwise equal entries). This means that a forward scan of an index on column
  <code class=""literal"">
   x
  </code>
  produces output satisfying
  <code class=""literal"">
   ORDER BY x
  </code>
  (or more verbosely,
  <code class=""literal"">
   ORDER BY x ASC NULLS LAST
  </code>
  ). The index can also be scanned backward, producing output satisfying
  <code class=""literal"">
   ORDER BY x DESC
  </code>
  (or more verbosely,
  <code class=""literal"">
   ORDER BY x DESC NULLS FIRST
  </code>
  , since
  <code class=""literal"">
   NULLS FIRST
  </code>
  is the default for
  <code class=""literal"">
   ORDER BY DESC
  </code>
  ).
 </p>
 <p>
  You can adjust the ordering of a B-tree index by including the options
  <code class=""literal"">
   ASC
  </code>
  ,
  <code class=""literal"">
   DESC
  </code>
  ,
  <code class=""literal"">
   NULLS FIRST
  </code>
  , and/or
  <code class=""literal"">
   NULLS LAST
  </code>
  when creating the index; for example:
 </p>
 <pre class=""programlisting"">
CREATE INDEX test2_info_nulls_low ON test2 (info NULLS FIRST);
CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);
</pre>
 <p>
  An index stored in ascending order with nulls first can satisfy either
  <code class=""literal"">
   ORDER BY x ASC NULLS FIRST
  </code>
  or
  <code class=""literal"">
   ORDER BY x DESC NULLS LAST
  </code>
  depending on which direction it is scanned in.
 </p>
 <p>
  You might wonder why bother providing all four options, when two options together with the possibility of backward scan would cover all the variants of
  <code class=""literal"">
   ORDER BY
  </code>
  . In single-column indexes the options are indeed redundant, but in multicolumn indexes they can be useful. Consider a two-column index on
  <code class=""literal"">
   (x, y)
  </code>
  : this can satisfy
  <code class=""literal"">
   ORDER BY x, y
  </code>
  if we scan forward, or
  <code class=""literal"">
   ORDER BY x DESC, y DESC
  </code>
  if we scan backward. But it might be that the application frequently needs to use
  <code class=""literal"">
   ORDER BY x ASC, y DESC
  </code>
  . There is no way to get that ordering from a plain index, but it is possible if the index is defined as
  <code class=""literal"">
   (x ASC, y DESC)
  </code>
  or
  <code class=""literal"">
   (x DESC, y ASC)
  </code>
  .
 </p>
 <p>
  Obviously, indexes with non-default sort orderings are a fairly specialized feature, but sometimes they can produce tremendous speedups for certain queries. Whether it's worth maintaining such an index depends on how often you use queries that require a special sort ordering.
 </p>
</div>
"
11. Indexes,11.5. Combining Multiple Indexes,https://www.postgresql.org/docs/17/indexes-bitmap-scans.html,"<div class=""sect1"" id=""INDEXES-BITMAP-SCANS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.5. Combining Multiple Indexes
     <a class=""id_link"" href=""#INDEXES-BITMAP-SCANS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.8.2"" name=""id-1.5.10.8.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.10.8.3"" name=""id-1.5.10.8.3"">
 </a>
 <p>
  A single index scan can only use query clauses that use the index's columns with operators of its operator class and are joined with
  <code class=""literal"">
   AND
  </code>
  . For example, given an index on
  <code class=""literal"">
   (a, b)
  </code>
  a query condition like
  <code class=""literal"">
   WHERE a = 5 AND b = 6
  </code>
  could use the index, but a query like
  <code class=""literal"">
   WHERE a = 5 OR b = 6
  </code>
  could not directly use the index.
 </p>
 <p>
  Fortunately,
  <span class=""productname"">
   PostgreSQL
  </span>
  has the ability to combine multiple indexes (including multiple uses of the same index) to handle cases that cannot be implemented by single index scans. The system can form
  <code class=""literal"">
   AND
  </code>
  and
  <code class=""literal"">
   OR
  </code>
  conditions across several index scans. For example, a query like
  <code class=""literal"">
   WHERE x = 42 OR x = 47 OR x = 53 OR x = 99
  </code>
  could be broken down into four separate scans of an index on
  <code class=""literal"">
   x
  </code>
  , each scan using one of the query clauses. The results of these scans are then ORed together to produce the result. Another example is that if we have separate indexes on
  <code class=""literal"">
   x
  </code>
  and
  <code class=""literal"">
   y
  </code>
  , one possible implementation of a query like
  <code class=""literal"">
   WHERE x = 5 AND y = 6
  </code>
  is to use each index with the appropriate query clause and then AND together the index results to identify the result rows.
 </p>
 <p>
  To combine multiple indexes, the system scans each needed index and prepares a
  <em class=""firstterm"">
   bitmap
  </em>
  in memory giving the locations of table rows that are reported as matching that index's conditions. The bitmaps are then ANDed and ORed together as needed by the query. Finally, the actual table rows are visited and returned. The table rows are visited in physical order, because that is how the bitmap is laid out; this means that any ordering of the original indexes is lost, and so a separate sort step will be needed if the query has an
  <code class=""literal"">
   ORDER BY
  </code>
  clause. For this reason, and because each additional index scan adds extra time, the planner will sometimes choose to use a simple index scan even though additional indexes are available that could have been used as well.
 </p>
 <p>
  In all but the simplest applications, there are various combinations of indexes that might be useful, and the database developer must make trade-offs to decide which indexes to provide. Sometimes multicolumn indexes are best, but sometimes it's better to create separate indexes and rely on the index-combination feature. For example, if your workload includes a mix of queries that sometimes involve only column
  <code class=""literal"">
   x
  </code>
  , sometimes only column
  <code class=""literal"">
   y
  </code>
  , and sometimes both columns, you might choose to create two separate indexes on
  <code class=""literal"">
   x
  </code>
  and
  <code class=""literal"">
   y
  </code>
  , relying on index combination to process the queries that use both columns. You could also create a multicolumn index on
  <code class=""literal"">
   (x, y)
  </code>
  . This index would typically be more efficient than index combination for queries involving both columns, but as discussed in
  <a class=""xref"" href=""indexes-multicolumn.html"" title=""11.3. Multicolumn Indexes"">
   Section 11.3
  </a>
  , it would be almost useless for queries involving only
  <code class=""literal"">
   y
  </code>
  , so it should not be the only index. A combination of the multicolumn index and a separate index on
  <code class=""literal"">
   y
  </code>
  would serve reasonably well. For queries involving only
  <code class=""literal"">
   x
  </code>
  , the multicolumn index could be used, though it would be larger and hence slower than an index on
  <code class=""literal"">
   x
  </code>
  alone. The last alternative is to create all three indexes, but this is probably only reasonable if the table is searched much more often than it is updated and all three types of query are common. If one of the types of query is much less common than the others, you'd probably settle for creating just the two indexes that best match the common types.
 </p>
</div>
"
11. Indexes,11.6. Unique Indexes,https://www.postgresql.org/docs/17/indexes-unique.html,"<div class=""sect1"" id=""INDEXES-UNIQUE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.6. Unique Indexes
     <a class=""id_link"" href=""#INDEXES-UNIQUE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.9.2"" name=""id-1.5.10.9.2"">
 </a>
 <p>
  Indexes can also be used to enforce uniqueness of a column's value, or the uniqueness of the combined values of more than one column.
 </p>
 <pre class=""synopsis"">
CREATE UNIQUE INDEX <em class=""replaceable""><code>name</code></em> ON <em class=""replaceable""><code>table</code></em> (<em class=""replaceable""><code>column</code></em> [<span class=""optional"">, ...</span>]) [<span class=""optional""> NULLS [<span class=""optional""> NOT </span>] DISTINCT </span>];
</pre>
 <p>
  Currently, only B-tree indexes can be declared unique.
 </p>
 <p>
  When an index is declared unique, multiple table rows with equal indexed values are not allowed. By default, null values in a unique column are not considered equal, allowing multiple nulls in the column. The
  <code class=""literal"">
   NULLS NOT DISTINCT
  </code>
  option modifies this and causes the index to treat nulls as equal. A multicolumn unique index will only reject cases where all indexed columns are equal in multiple rows.
 </p>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  automatically creates a unique index when a unique constraint or primary key is defined for a table. The index covers the columns that make up the primary key or unique constraint (a multicolumn index, if appropriate), and is the mechanism that enforces the constraint.
 </p>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   There's no need to manually create indexes on unique columns; doing so would just duplicate the automatically-created index.
  </p>
 </div>
</div>
"
11. Indexes,11.7. Indexes on Expressions,https://www.postgresql.org/docs/17/indexes-expressional.html,"<div class=""sect1"" id=""INDEXES-EXPRESSIONAL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.7. Indexes on Expressions
     <a class=""id_link"" href=""#INDEXES-EXPRESSIONAL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.10.2"" name=""id-1.5.10.10.2"">
 </a>
 <p>
  An index column need not be just a column of the underlying table, but can be a function or scalar expression computed from one or more columns of the table. This feature is useful to obtain fast access to tables based on the results of computations.
 </p>
 <p>
  For example, a common way to do case-insensitive comparisons is to use the
  <code class=""function"">
   lower
  </code>
  function:
 </p>
 <pre class=""programlisting"">
SELECT * FROM test1 WHERE lower(col1) = 'value';
</pre>
 <p>
  This query can use an index if one has been defined on the result of the
  <code class=""literal"">
   lower(col1)
  </code>
  function:
 </p>
 <pre class=""programlisting"">
CREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));
</pre>
 <p>
  If we were to declare this index
  <code class=""literal"">
   UNIQUE
  </code>
  , it would prevent creation of rows whose
  <code class=""literal"">
   col1
  </code>
  values differ only in case, as well as rows whose
  <code class=""literal"">
   col1
  </code>
  values are actually identical. Thus, indexes on expressions can be used to enforce constraints that are not definable as simple unique constraints.
 </p>
 <p>
  As another example, if one often does queries like:
 </p>
 <pre class=""programlisting"">
SELECT * FROM people WHERE (first_name || ' ' || last_name) = 'John Smith';
</pre>
 <p>
  then it might be worth creating an index like this:
 </p>
 <pre class=""programlisting"">
CREATE INDEX people_names ON people ((first_name || ' ' || last_name));
</pre>
 <p>
  The syntax of the
  <code class=""command"">
   CREATE INDEX
  </code>
  command normally requires writing parentheses around index expressions, as shown in the second example. The parentheses can be omitted when the expression is just a function call, as in the first example.
 </p>
 <p>
  Index expressions are relatively expensive to maintain, because the derived expression(s) must be computed for each row insertion and
  <a class=""link"" href=""storage-hot.html"" title=""65.7. Heap-Only Tuples (HOT)"">
   non-HOT update
  </a>
  . However, the index expressions are
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  recomputed during an indexed search, since they are already stored in the index. In both examples above, the system sees the query as just
  <code class=""literal"">
   WHERE indexedcolumn = 'constant'
  </code>
  and so the speed of the search is equivalent to any other simple index query. Thus, indexes on expressions are useful when retrieval speed is more important than insertion and update speed.
 </p>
</div>
"
11. Indexes,11.8. Partial Indexes,https://www.postgresql.org/docs/17/indexes-partial.html,"<div class=""sect1"" id=""INDEXES-PARTIAL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.8. Partial Indexes
     <a class=""id_link"" href=""#INDEXES-PARTIAL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.11.2"" name=""id-1.5.10.11.2"">
 </a>
 <p>
  A
  <em class=""firstterm"">
   partial index
  </em>
  is an index built over a subset of a table; the subset is defined by a conditional expression (called the
  <em class=""firstterm"">
   predicate
  </em>
  of the partial index). The index contains entries only for those table rows that satisfy the predicate. Partial indexes are a specialized feature, but there are several situations in which they are useful.
 </p>
 <p>
  One major reason for using a partial index is to avoid indexing common values. Since a query searching for a common value (one that accounts for more than a few percent of all the table rows) will not use the index anyway, there is no point in keeping those rows in the index at all. This reduces the size of the index, which will speed up those queries that do use the index. It will also speed up many table update operations because the index does not need to be updated in all cases.
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX1"" title=""Example 11.1. Setting up a Partial Index to Exclude Common Values"">
   Example 11.1
  </a>
  shows a possible application of this idea.
 </p>
 <div class=""example"" id=""INDEXES-PARTIAL-EX1"">
  <p class=""title"">
   <strong>
    Example 11.1. Setting up a Partial Index to Exclude Common Values
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    Suppose you are storing web server access logs in a database. Most accesses originate from the IP address range of your organization but some are from elsewhere (say, employees on dial-up connections). If your searches by IP are primarily for outside accesses, you probably do not need to index the IP range that corresponds to your organization's subnet.
   </p>
   <p>
    Assume a table like this:
   </p>
   <pre class=""programlisting"">
CREATE TABLE access_log (
    url varchar,
    client_ip inet,
    ...
);
</pre>
   <p>
    To create a partial index that suits our example, use a command such as this:
   </p>
   <pre class=""programlisting"">
CREATE INDEX access_log_client_ip_ix ON access_log (client_ip)
WHERE NOT (client_ip &gt; inet '192.168.100.0' AND
           client_ip &lt; inet '192.168.100.255');
</pre>
   <p>
    A typical query that can use this index would be:
   </p>
   <pre class=""programlisting"">
SELECT *
FROM access_log
WHERE url = '/index.html' AND client_ip = inet '212.78.10.32';
</pre>
   <p>
    Here the query's IP address is covered by the partial index. The following query cannot use the partial index, as it uses an IP address that is excluded from the index:
   </p>
   <pre class=""programlisting"">
SELECT *
FROM access_log
WHERE url = '/index.html' AND client_ip = inet '192.168.100.23';
</pre>
   <p>
    Observe that this kind of partial index requires that the common values be predetermined, so such partial indexes are best used for data distributions that do not change. Such indexes can be recreated occasionally to adjust for new data distributions, but this adds maintenance effort.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  Another possible use for a partial index is to exclude values from the index that the typical query workload is not interested in; this is shown in
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX2"" title=""Example 11.2. Setting up a Partial Index to Exclude Uninteresting Values"">
   Example 11.2
  </a>
  . This results in the same advantages as listed above, but it prevents the
  <span class=""quote"">
   “
   <span class=""quote"">
    uninteresting
   </span>
   ”
  </span>
  values from being accessed via that index, even if an index scan might be profitable in that case. Obviously, setting up partial indexes for this kind of scenario will require a lot of care and experimentation.
 </p>
 <div class=""example"" id=""INDEXES-PARTIAL-EX2"">
  <p class=""title"">
   <strong>
    Example 11.2. Setting up a Partial Index to Exclude Uninteresting Values
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    If you have a table that contains both billed and unbilled orders, where the unbilled orders take up a small fraction of the total table and yet those are the most-accessed rows, you can improve performance by creating an index on just the unbilled rows. The command to create the index would look like this:
   </p>
   <pre class=""programlisting"">
CREATE INDEX orders_unbilled_index ON orders (order_nr)
    WHERE billed is not true;
</pre>
   <p>
    A possible query to use this index would be:
   </p>
   <pre class=""programlisting"">
SELECT * FROM orders WHERE billed is not true AND order_nr &lt; 10000;
</pre>
   <p>
    However, the index can also be used in queries that do not involve
    <code class=""structfield"">
     order_nr
    </code>
    at all, e.g.:
   </p>
   <pre class=""programlisting"">
SELECT * FROM orders WHERE billed is not true AND amount &gt; 5000.00;
</pre>
   <p>
    This is not as efficient as a partial index on the
    <code class=""structfield"">
     amount
    </code>
    column would be, since the system has to scan the entire index. Yet, if there are relatively few unbilled orders, using this partial index just to find the unbilled orders could be a win.
   </p>
   <p>
    Note that this query cannot use this index:
   </p>
   <pre class=""programlisting"">
SELECT * FROM orders WHERE order_nr = 3501;
</pre>
   <p>
    The order 3501 might be among the billed or unbilled orders.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX2"" title=""Example 11.2. Setting up a Partial Index to Exclude Uninteresting Values"">
   Example 11.2
  </a>
  also illustrates that the indexed column and the column used in the predicate do not need to match.
  <span class=""productname"">
   PostgreSQL
  </span>
  supports partial indexes with arbitrary predicates, so long as only columns of the table being indexed are involved. However, keep in mind that the predicate must match the conditions used in the queries that are supposed to benefit from the index. To be precise, a partial index can be used in a query only if the system can recognize that the
  <code class=""literal"">
   WHERE
  </code>
  condition of the query mathematically implies the predicate of the index.
  <span class=""productname"">
   PostgreSQL
  </span>
  does not have a sophisticated theorem prover that can recognize mathematically equivalent expressions that are written in different forms. (Not only is such a general theorem prover extremely difficult to create, it would probably be too slow to be of any real use.) The system can recognize simple inequality implications, for example
  <span class=""quote"">
   “
   <span class=""quote"">
    x &lt; 1
   </span>
   ”
  </span>
  implies
  <span class=""quote"">
   “
   <span class=""quote"">
    x &lt; 2
   </span>
   ”
  </span>
  ; otherwise the predicate condition must exactly match part of the query's
  <code class=""literal"">
   WHERE
  </code>
  condition or the index will not be recognized as usable. Matching takes place at query planning time, not at run time. As a result, parameterized query clauses do not work with a partial index. For example a prepared query with a parameter might specify
  <span class=""quote"">
   “
   <span class=""quote"">
    x &lt; ?
   </span>
   ”
  </span>
  which will never imply
  <span class=""quote"">
   “
   <span class=""quote"">
    x &lt; 2
   </span>
   ”
  </span>
  for all possible values of the parameter.
 </p>
 <p>
  A third possible use for partial indexes does not require the index to be used in queries at all. The idea here is to create a unique index over a subset of a table, as in
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX3"" title=""Example 11.3. Setting up a Partial Unique Index"">
   Example 11.3
  </a>
  . This enforces uniqueness among the rows that satisfy the index predicate, without constraining those that do not.
 </p>
 <div class=""example"" id=""INDEXES-PARTIAL-EX3"">
  <p class=""title"">
   <strong>
    Example 11.3. Setting up a Partial Unique Index
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    Suppose that we have a table describing test outcomes. We wish to ensure that there is only one
    <span class=""quote"">
     “
     <span class=""quote"">
      successful
     </span>
     ”
    </span>
    entry for a given subject and target combination, but there might be any number of
    <span class=""quote"">
     “
     <span class=""quote"">
      unsuccessful
     </span>
     ”
    </span>
    entries. Here is one way to do it:
   </p>
   <pre class=""programlisting"">
CREATE TABLE tests (
    subject text,
    target text,
    success boolean,
    ...
);

CREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)
    WHERE success;
</pre>
   <p>
    This is a particularly efficient approach when there are few successful tests and many unsuccessful ones. It is also possible to allow only one null in a column by creating a unique partial index with an
    <code class=""literal"">
     IS NULL
    </code>
    restriction.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  Finally, a partial index can also be used to override the system's query plan choices. Also, data sets with peculiar distributions might cause the system to use an index when it really should not. In that case the index can be set up so that it is not available for the offending query. Normally,
  <span class=""productname"">
   PostgreSQL
  </span>
  makes reasonable choices about index usage (e.g., it avoids them when retrieving common values, so the earlier example really only saves index size, it is not required to avoid index usage), and grossly incorrect plan choices are cause for a bug report.
 </p>
 <p>
  Keep in mind that setting up a partial index indicates that you know at least as much as the query planner knows, in particular you know when an index might be profitable. Forming this knowledge requires experience and understanding of how indexes in
  <span class=""productname"">
   PostgreSQL
  </span>
  work. In most cases, the advantage of a partial index over a regular index will be minimal. There are cases where they are quite counterproductive, as in
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX4"" title=""Example 11.4. Do Not Use Partial Indexes as a Substitute for Partitioning"">
   Example 11.4
  </a>
  .
 </p>
 <div class=""example"" id=""INDEXES-PARTIAL-EX4"">
  <p class=""title"">
   <strong>
    Example 11.4. Do Not Use Partial Indexes as a Substitute for Partitioning
   </strong>
  </p>
  <div class=""example-contents"">
   <p>
    You might be tempted to create a large set of non-overlapping partial indexes, for example
   </p>
   <pre class=""programlisting"">
CREATE INDEX mytable_cat_1 ON mytable (data) WHERE category = 1;
CREATE INDEX mytable_cat_2 ON mytable (data) WHERE category = 2;
CREATE INDEX mytable_cat_3 ON mytable (data) WHERE category = 3;
...
CREATE INDEX mytable_cat_<em class=""replaceable""><code>N</code></em> ON mytable (data) WHERE category = <em class=""replaceable""><code>N</code></em>;
</pre>
   <p>
    This is a bad idea! Almost certainly, you'll be better off with a single non-partial index, declared like
   </p>
   <pre class=""programlisting"">
CREATE INDEX mytable_cat_data ON mytable (category, data);
</pre>
   <p>
    (Put the category column first, for the reasons described in
    <a class=""xref"" href=""indexes-multicolumn.html"" title=""11.3. Multicolumn Indexes"">
     Section 11.3
    </a>
    .) While a search in this larger index might have to descend through a couple more tree levels than a search in a smaller index, that's almost certainly going to be cheaper than the planner effort needed to select the appropriate one of the partial indexes. The core of the problem is that the system does not understand the relationship among the partial indexes, and will laboriously test each one to see if it's applicable to the current query.
   </p>
   <p>
    If your table is large enough that a single index really is a bad idea, you should look into using partitioning instead (see
    <a class=""xref"" href=""ddl-partitioning.html"" title=""5.12. Table Partitioning"">
     Section 5.12
    </a>
    ). With that mechanism, the system does understand that the tables and indexes are non-overlapping, so far better performance is possible.
   </p>
  </div>
 </div>
 <br class=""example-break""/>
 <p>
  More information about partial indexes can be found in
  <a class=""xref"" href=""biblio.html#STON89B"">
   [ston89b]
  </a>
  ,
  <a class=""xref"" href=""biblio.html#OLSON93"" title=""Partial indexing in POSTGRES: research project"">
   [olson93]
  </a>
  , and
  <a class=""xref"" href=""biblio.html#SESHADRI95"">
   [seshadri95]
  </a>
  .
 </p>
</div>
"
11. Indexes,11.9. Index-Only Scans and Covering Indexes,https://www.postgresql.org/docs/17/indexes-index-only-scans.html,"<div class=""sect1"" id=""INDEXES-INDEX-ONLY-SCANS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.9. Index-Only Scans and Covering Indexes
     <a class=""id_link"" href=""#INDEXES-INDEX-ONLY-SCANS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.12.2"" name=""id-1.5.10.12.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.10.12.3"" name=""id-1.5.10.12.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.10.12.4"" name=""id-1.5.10.12.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.10.12.5"" name=""id-1.5.10.12.5"">
 </a>
 <p>
  All indexes in
  <span class=""productname"">
   PostgreSQL
  </span>
  are
  <em class=""firstterm"">
   secondary
  </em>
  indexes, meaning that each index is stored separately from the table's main data area (which is called the table's
  <em class=""firstterm"">
   heap
  </em>
  in
  <span class=""productname"">
   PostgreSQL
  </span>
  terminology). This means that in an ordinary index scan, each row retrieval requires fetching data from both the index and the heap. Furthermore, while the index entries that match a given indexable
  <code class=""literal"">
   WHERE
  </code>
  condition are usually close together in the index, the table rows they reference might be anywhere in the heap. The heap-access portion of an index scan thus involves a lot of random access into the heap, which can be slow, particularly on traditional rotating media. (As described in
  <a class=""xref"" href=""indexes-bitmap-scans.html"" title=""11.5. Combining Multiple Indexes"">
   Section 11.5
  </a>
  , bitmap scans try to alleviate this cost by doing the heap accesses in sorted order, but that only goes so far.)
 </p>
 <p>
  To solve this performance problem,
  <span class=""productname"">
   PostgreSQL
  </span>
  supports
  <em class=""firstterm"">
   index-only scans
  </em>
  , which can answer queries from an index alone without any heap access. The basic idea is to return values directly out of each index entry instead of consulting the associated heap entry. There are two fundamental restrictions on when this method can be used:
 </p>
 <div class=""orderedlist"">
  <ol class=""orderedlist"" type=""1"">
   <li class=""listitem"">
    <p>
     The index type must support index-only scans. B-tree indexes always do. GiST and SP-GiST indexes support index-only scans for some operator classes but not others. Other index types have no support. The underlying requirement is that the index must physically store, or else be able to reconstruct, the original data value for each index entry. As a counterexample, GIN indexes cannot support index-only scans because each index entry typically holds only part of the original data value.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The query must reference only columns stored in the index. For example, given an index on columns
     <code class=""literal"">
      x
     </code>
     and
     <code class=""literal"">
      y
     </code>
     of a table that also has a column
     <code class=""literal"">
      z
     </code>
     , these queries could use index-only scans:
    </p>
    <pre class=""programlisting"">
SELECT x, y FROM tab WHERE x = 'key';
SELECT x FROM tab WHERE x = 'key' AND y &lt; 42;
</pre>
    <p>
     but these queries could not:
    </p>
    <pre class=""programlisting"">
SELECT x, z FROM tab WHERE x = 'key';
SELECT x FROM tab WHERE x = 'key' AND z &lt; 42;
</pre>
    <p>
     (Expression indexes and partial indexes complicate this rule, as discussed below.)
    </p>
   </li>
  </ol>
 </div>
 <p>
  If these two fundamental requirements are met, then all the data values required by the query are available from the index, so an index-only scan is physically possible. But there is an additional requirement for any table scan in
  <span class=""productname"">
   PostgreSQL
  </span>
  : it must verify that each retrieved row be
  <span class=""quote"">
   “
   <span class=""quote"">
    visible
   </span>
   ”
  </span>
  to the query's MVCC snapshot, as discussed in
  <a class=""xref"" href=""mvcc.html"" title=""Chapter 13. Concurrency Control"">
   Chapter 13
  </a>
  . Visibility information is not stored in index entries, only in heap entries; so at first glance it would seem that every row retrieval would require a heap access anyway. And this is indeed the case, if the table row has been modified recently. However, for seldom-changing data there is a way around this problem.
  <span class=""productname"">
   PostgreSQL
  </span>
  tracks, for each page in a table's heap, whether all rows stored in that page are old enough to be visible to all current and future transactions. This information is stored in a bit in the table's
  <em class=""firstterm"">
   visibility map
  </em>
  . An index-only scan, after finding a candidate index entry, checks the visibility map bit for the corresponding heap page. If it's set, the row is known visible and so the data can be returned with no further work. If it's not set, the heap entry must be visited to find out whether it's visible, so no performance advantage is gained over a standard index scan. Even in the successful case, this approach trades visibility map accesses for heap accesses; but since the visibility map is four orders of magnitude smaller than the heap it describes, far less physical I/O is needed to access it. In most situations the visibility map remains cached in memory all the time.
 </p>
 <p>
  In short, while an index-only scan is possible given the two fundamental requirements, it will be a win only if a significant fraction of the table's heap pages have their all-visible map bits set. But tables in which a large fraction of the rows are unchanging are common enough to make this type of scan very useful in practice.
 </p>
 <p>
  <a class=""indexterm"" id=""id-1.5.10.12.10.1"" name=""id-1.5.10.12.10.1"">
  </a>
  To make effective use of the index-only scan feature, you might choose to create a
  <em class=""firstterm"">
   covering index
  </em>
  , which is an index specifically designed to include the columns needed by a particular type of query that you run frequently. Since queries typically need to retrieve more columns than just the ones they search on,
  <span class=""productname"">
   PostgreSQL
  </span>
  allows you to create an index in which some columns are just
  <span class=""quote"">
   “
   <span class=""quote"">
    payload
   </span>
   ”
  </span>
  and are not part of the search key. This is done by adding an
  <code class=""literal"">
   INCLUDE
  </code>
  clause listing the extra columns. For example, if you commonly run queries like
 </p>
 <pre class=""programlisting"">
SELECT y FROM tab WHERE x = 'key';
</pre>
 <p>
  the traditional approach to speeding up such queries would be to create an index on
  <code class=""literal"">
   x
  </code>
  only. However, an index defined as
 </p>
 <pre class=""programlisting"">
CREATE INDEX tab_x_y ON tab(x) INCLUDE (y);
</pre>
 <p>
  could handle these queries as index-only scans, because
  <code class=""literal"">
   y
  </code>
  can be obtained from the index without visiting the heap.
 </p>
 <p>
  Because column
  <code class=""literal"">
   y
  </code>
  is not part of the index's search key, it does not have to be of a data type that the index can handle; it's merely stored in the index and is not interpreted by the index machinery. Also, if the index is a unique index, that is
 </p>
 <pre class=""programlisting"">
CREATE UNIQUE INDEX tab_x_y ON tab(x) INCLUDE (y);
</pre>
 <p>
  the uniqueness condition applies to just column
  <code class=""literal"">
   x
  </code>
  , not to the combination of
  <code class=""literal"">
   x
  </code>
  and
  <code class=""literal"">
   y
  </code>
  . (An
  <code class=""literal"">
   INCLUDE
  </code>
  clause can also be written in
  <code class=""literal"">
   UNIQUE
  </code>
  and
  <code class=""literal"">
   PRIMARY KEY
  </code>
  constraints, providing alternative syntax for setting up an index like this.)
 </p>
 <p>
  It's wise to be conservative about adding non-key payload columns to an index, especially wide columns. If an index tuple exceeds the maximum size allowed for the index type, data insertion will fail. In any case, non-key columns duplicate data from the index's table and bloat the size of the index, thus potentially slowing searches. And remember that there is little point in including payload columns in an index unless the table changes slowly enough that an index-only scan is likely to not need to access the heap. If the heap tuple must be visited anyway, it costs nothing more to get the column's value from there. Other restrictions are that expressions are not currently supported as included columns, and that only B-tree, GiST and SP-GiST indexes currently support included columns.
 </p>
 <p>
  Before
  <span class=""productname"">
   PostgreSQL
  </span>
  had the
  <code class=""literal"">
   INCLUDE
  </code>
  feature, people sometimes made covering indexes by writing the payload columns as ordinary index columns, that is writing
 </p>
 <pre class=""programlisting"">
CREATE INDEX tab_x_y ON tab(x, y);
</pre>
 <p>
  even though they had no intention of ever using
  <code class=""literal"">
   y
  </code>
  as part of a
  <code class=""literal"">
   WHERE
  </code>
  clause. This works fine as long as the extra columns are trailing columns; making them be leading columns is unwise for the reasons explained in
  <a class=""xref"" href=""indexes-multicolumn.html"" title=""11.3. Multicolumn Indexes"">
   Section 11.3
  </a>
  . However, this method doesn't support the case where you want the index to enforce uniqueness on the key column(s).
 </p>
 <p>
  <em class=""firstterm"">
   Suffix truncation
  </em>
  always removes non-key columns from upper B-Tree levels. As payload columns, they are never used to guide index scans. The truncation process also removes one or more trailing key column(s) when the remaining prefix of key column(s) happens to be sufficient to describe tuples on the lowest B-Tree level. In practice, covering indexes without an
  <code class=""literal"">
   INCLUDE
  </code>
  clause often avoid storing columns that are effectively payload in the upper levels. However, explicitly defining payload columns as non-key columns
  <span class=""emphasis"">
   <em>
    reliably
   </em>
  </span>
  keeps the tuples in upper levels small.
 </p>
 <p>
  In principle, index-only scans can be used with expression indexes. For example, given an index on
  <code class=""literal"">
   f(x)
  </code>
  where
  <code class=""literal"">
   x
  </code>
  is a table column, it should be possible to execute
 </p>
 <pre class=""programlisting"">
SELECT f(x) FROM tab WHERE f(x) &lt; 1;
</pre>
 <p>
  as an index-only scan; and this is very attractive if
  <code class=""literal"">
   f()
  </code>
  is an expensive-to-compute function. However,
  <span class=""productname"">
   PostgreSQL
  </span>
  's planner is currently not very smart about such cases. It considers a query to be potentially executable by index-only scan only when all
  <span class=""emphasis"">
   <em>
    columns
   </em>
  </span>
  needed by the query are available from the index. In this example,
  <code class=""literal"">
   x
  </code>
  is not needed except in the context
  <code class=""literal"">
   f(x)
  </code>
  , but the planner does not notice that and concludes that an index-only scan is not possible. If an index-only scan seems sufficiently worthwhile, this can be worked around by adding
  <code class=""literal"">
   x
  </code>
  as an included column, for example
 </p>
 <pre class=""programlisting"">
CREATE INDEX tab_f_x ON tab (f(x)) INCLUDE (x);
</pre>
 <p>
  An additional caveat, if the goal is to avoid recalculating
  <code class=""literal"">
   f(x)
  </code>
  , is that the planner won't necessarily match uses of
  <code class=""literal"">
   f(x)
  </code>
  that aren't in indexable
  <code class=""literal"">
   WHERE
  </code>
  clauses to the index column. It will usually get this right in simple queries such as shown above, but not in queries that involve joins. These deficiencies may be remedied in future versions of
  <span class=""productname"">
   PostgreSQL
  </span>
  .
 </p>
 <p>
  Partial indexes also have interesting interactions with index-only scans. Consider the partial index shown in
  <a class=""xref"" href=""indexes-partial.html#INDEXES-PARTIAL-EX3"" title=""Example 11.3. Setting up a Partial Unique Index"">
   Example 11.3
  </a>
  :
 </p>
 <pre class=""programlisting"">
CREATE UNIQUE INDEX tests_success_constraint ON tests (subject, target)
    WHERE success;
</pre>
 <p>
  In principle, we could do an index-only scan on this index to satisfy a query like
 </p>
 <pre class=""programlisting"">
SELECT target FROM tests WHERE subject = 'some-subject' AND success;
</pre>
 <p>
  But there's a problem: the
  <code class=""literal"">
   WHERE
  </code>
  clause refers to
  <code class=""literal"">
   success
  </code>
  which is not available as a result column of the index. Nonetheless, an index-only scan is possible because the plan does not need to recheck that part of the
  <code class=""literal"">
   WHERE
  </code>
  clause at run time: all entries found in the index necessarily have
  <code class=""literal"">
   success = true
  </code>
  so this need not be explicitly checked in the plan.
  <span class=""productname"">
   PostgreSQL
  </span>
  versions 9.6 and later will recognize such cases and allow index-only scans to be generated, but older versions will not.
 </p>
</div>
"
11. Indexes,11.10. Operator Classes and Operator Families,https://www.postgresql.org/docs/17/indexes-opclass.html,"<div class=""sect1"" id=""INDEXES-OPCLASS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.10. Operator Classes and Operator Families
     <a class=""id_link"" href=""#INDEXES-OPCLASS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.13.2"" name=""id-1.5.10.13.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.10.13.3"" name=""id-1.5.10.13.3"">
 </a>
 <p>
  An index definition can specify an
  <em class=""firstterm"">
   operator class
  </em>
  for each column of an index.
 </p>
 <pre class=""synopsis"">
CREATE INDEX <em class=""replaceable""><code>name</code></em> ON <em class=""replaceable""><code>table</code></em> (<em class=""replaceable""><code>column</code></em> <em class=""replaceable""><code>opclass</code></em> [ ( <em class=""replaceable""><code>opclass_options</code></em> ) ] [<span class=""optional""><em class=""replaceable""><code>sort options</code></em></span>] [<span class=""optional"">, ...</span>]);
</pre>
 <p>
  The operator class identifies the operators to be used by the index for that column. For example, a B-tree index on the type
  <code class=""type"">
   int4
  </code>
  would use the
  <code class=""literal"">
   int4_ops
  </code>
  class; this operator class includes comparison functions for values of type
  <code class=""type"">
   int4
  </code>
  . In practice the default operator class for the column's data type is usually sufficient. The main reason for having operator classes is that for some data types, there could be more than one meaningful index behavior. For example, we might want to sort a complex-number data type either by absolute value or by real part. We could do this by defining two operator classes for the data type and then selecting the proper class when making an index. The operator class determines the basic sort ordering (which can then be modified by adding sort options
  <code class=""literal"">
   COLLATE
  </code>
  ,
  <code class=""literal"">
   ASC
  </code>
  /
  <code class=""literal"">
   DESC
  </code>
  and/or
  <code class=""literal"">
   NULLS FIRST
  </code>
  /
  <code class=""literal"">
   NULLS LAST
  </code>
  ).
 </p>
 <p>
  There are also some built-in operator classes besides the default ones:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     The operator classes
     <code class=""literal"">
      text_pattern_ops
     </code>
     ,
     <code class=""literal"">
      varchar_pattern_ops
     </code>
     , and
     <code class=""literal"">
      bpchar_pattern_ops
     </code>
     support B-tree indexes on the types
     <code class=""type"">
      text
     </code>
     ,
     <code class=""type"">
      varchar
     </code>
     , and
     <code class=""type"">
      char
     </code>
     respectively. The difference from the default operator classes is that the values are compared strictly character by character rather than according to the locale-specific collation rules. This makes these operator classes suitable for use by queries involving pattern matching expressions (
     <code class=""literal"">
      LIKE
     </code>
     or POSIX regular expressions) when the database does not use the standard
     <span class=""quote"">
      “
      <span class=""quote"">
       C
      </span>
      ”
     </span>
     locale. As an example, you might index a
     <code class=""type"">
      varchar
     </code>
     column like this:
    </p>
    <pre class=""programlisting"">
CREATE INDEX test_index ON test_table (col varchar_pattern_ops);
</pre>
    <p>
     Note that you should also create an index with the default operator class if you want queries involving ordinary
     <code class=""literal"">
      &lt;
     </code>
     ,
     <code class=""literal"">
      &lt;=
     </code>
     ,
     <code class=""literal"">
      &gt;
     </code>
     , or
     <code class=""literal"">
      &gt;=
     </code>
     comparisons to use an index. Such queries cannot use the
     <code class=""literal"">
      <em class=""replaceable"">
       <code>
        xxx
       </code>
      </em>
      _pattern_ops
     </code>
     operator classes. (Ordinary equality comparisons can use these operator classes, however.) It is possible to create multiple indexes on the same column with different operator classes. If you do use the C locale, you do not need the
     <code class=""literal"">
      <em class=""replaceable"">
       <code>
        xxx
       </code>
      </em>
      _pattern_ops
     </code>
     operator classes, because an index with the default operator class is usable for pattern-matching queries in the C locale.
    </p>
   </li>
  </ul>
 </div>
 <p>
  The following query shows all defined operator classes:
 </p>
 <pre class=""programlisting"">
SELECT am.amname AS index_method,
       opc.opcname AS opclass_name,
       opc.opcintype::regtype AS indexed_type,
       opc.opcdefault AS is_default
    FROM pg_am am, pg_opclass opc
    WHERE opc.opcmethod = am.oid
    ORDER BY index_method, opclass_name;
</pre>
 <p>
  An operator class is actually just a subset of a larger structure called an
  <em class=""firstterm"">
   operator family
  </em>
  . In cases where several data types have similar behaviors, it is frequently useful to define cross-data-type operators and allow these to work with indexes. To do this, the operator classes for each of the types must be grouped into the same operator family. The cross-type operators are members of the family, but are not associated with any single class within the family.
 </p>
 <p>
  This expanded version of the previous query shows the operator family each operator class belongs to:
 </p>
 <pre class=""programlisting"">
SELECT am.amname AS index_method,
       opc.opcname AS opclass_name,
       opf.opfname AS opfamily_name,
       opc.opcintype::regtype AS indexed_type,
       opc.opcdefault AS is_default
    FROM pg_am am, pg_opclass opc, pg_opfamily opf
    WHERE opc.opcmethod = am.oid AND
          opc.opcfamily = opf.oid
    ORDER BY index_method, opclass_name;
</pre>
 <p>
  This query shows all defined operator families and all the operators included in each family:
 </p>
 <pre class=""programlisting"">
SELECT am.amname AS index_method,
       opf.opfname AS opfamily_name,
       amop.amopopr::regoperator AS opfamily_operator
    FROM pg_am am, pg_opfamily opf, pg_amop amop
    WHERE opf.opfmethod = am.oid AND
          amop.amopfamily = opf.oid
    ORDER BY index_method, opfamily_name, opfamily_operator;
</pre>
 <div class=""tip"">
  <h3 class=""title"">
   Tip
  </h3>
  <p>
   <a class=""xref"" href=""app-psql.html"" title=""psql"">
    <span class=""refentrytitle"">
     <span class=""application"">
      psql
     </span>
    </span>
   </a>
   has commands
   <code class=""command"">
    \dAc
   </code>
   ,
   <code class=""command"">
    \dAf
   </code>
   , and
   <code class=""command"">
    \dAo
   </code>
   , which provide slightly more sophisticated versions of these queries.
  </p>
 </div>
</div>
"
11. Indexes,11.11. Indexes and Collations,https://www.postgresql.org/docs/17/indexes-collations.html,"<div class=""sect1"" id=""INDEXES-COLLATIONS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.11. Indexes and Collations
     <a class=""id_link"" href=""#INDEXES-COLLATIONS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  An index can support only one collation per index column. If multiple collations are of interest, multiple indexes may be needed.
 </p>
 <p>
  Consider these statements:
 </p>
 <pre class=""programlisting"">
CREATE TABLE test1c (
    id integer,
    content varchar COLLATE ""x""
);

CREATE INDEX test1c_content_index ON test1c (content);
</pre>
 <p>
  The index automatically uses the collation of the underlying column. So a query of the form
 </p>
 <pre class=""programlisting"">
SELECT * FROM test1c WHERE content &gt; <em class=""replaceable""><code>constant</code></em>;
</pre>
 <p>
  could use the index, because the comparison will by default use the collation of the column. However, this index cannot accelerate queries that involve some other collation. So if queries of the form, say,
 </p>
 <pre class=""programlisting"">
SELECT * FROM test1c WHERE content &gt; <em class=""replaceable""><code>constant</code></em> COLLATE ""y"";
</pre>
 <p>
  are also of interest, an additional index could be created that supports the
  <code class=""literal"">
   ""y""
  </code>
  collation, like this:
 </p>
 <pre class=""programlisting"">
CREATE INDEX test1c_content_y_index ON test1c (content COLLATE ""y"");
</pre>
</div>
"
11. Indexes,11.12. Examining Index Usage,https://www.postgresql.org/docs/17/indexes-examine.html,"<div class=""sect1"" id=""INDEXES-EXAMINE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     11.12. Examining Index Usage
     <a class=""id_link"" href=""#INDEXES-EXAMINE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.10.15.2"" name=""id-1.5.10.15.2"">
 </a>
 <p>
  Although indexes in
  <span class=""productname"">
   PostgreSQL
  </span>
  do not need maintenance or tuning, it is still important to check which indexes are actually used by the real-life query workload. Examining index usage for an individual query is done with the
  <a class=""xref"" href=""sql-explain.html"" title=""EXPLAIN"">
   <span class=""refentrytitle"">
    EXPLAIN
   </span>
  </a>
  command; its application for this purpose is illustrated in
  <a class=""xref"" href=""using-explain.html"" title=""14.1. Using EXPLAIN"">
   Section 14.1
  </a>
  . It is also possible to gather overall statistics about index usage in a running server, as described in
  <a class=""xref"" href=""monitoring-stats.html"" title=""27.2. The Cumulative Statistics System"">
   Section 27.2
  </a>
  .
 </p>
 <p>
  It is difficult to formulate a general procedure for determining which indexes to create. There are a number of typical cases that have been shown in the examples throughout the previous sections. A good deal of experimentation is often necessary. The rest of this section gives some tips for that:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Always run
     <a class=""xref"" href=""sql-analyze.html"" title=""ANALYZE"">
      <span class=""refentrytitle"">
       ANALYZE
      </span>
     </a>
     first. This command collects statistics about the distribution of the values in the table. This information is required to estimate the number of rows returned by a query, which is needed by the planner to assign realistic costs to each possible query plan. In absence of any real statistics, some default values are assumed, which are almost certain to be inaccurate. Examining an application's index usage without having run
     <code class=""command"">
      ANALYZE
     </code>
     is therefore a lost cause. See
     <a class=""xref"" href=""routine-vacuuming.html#VACUUM-FOR-STATISTICS"" title=""24.1.3. Updating Planner Statistics"">
      Section 24.1.3
     </a>
     and
     <a class=""xref"" href=""routine-vacuuming.html#AUTOVACUUM"" title=""24.1.6. The Autovacuum Daemon"">
      Section 24.1.6
     </a>
     for more information.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Use real data for experimentation. Using test data for setting up indexes will tell you what indexes you need for the test data, but that is all.
    </p>
    <p>
     It is especially fatal to use very small test data sets. While selecting 1000 out of 100000 rows could be a candidate for an index, selecting 1 out of 100 rows will hardly be, because the 100 rows probably fit within a single disk page, and there is no plan that can beat sequentially fetching 1 disk page.
    </p>
    <p>
     Also be careful when making up test data, which is often unavoidable when the application is not yet in production. Values that are very similar, completely random, or inserted in sorted order will skew the statistics away from the distribution that real data would have.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     When indexes are not used, it can be useful for testing to force their use. There are run-time parameters that can turn off various plan types (see
     <a class=""xref"" href=""runtime-config-query.html#RUNTIME-CONFIG-QUERY-ENABLE"" title=""19.7.1. Planner Method Configuration"">
      Section 19.7.1
     </a>
     ). For instance, turning off sequential scans (
     <code class=""varname"">
      enable_seqscan
     </code>
     ) and nested-loop joins (
     <code class=""varname"">
      enable_nestloop
     </code>
     ), which are the most basic plans, will force the system to use a different plan. If the system still chooses a sequential scan or nested-loop join then there is probably a more fundamental reason why the index is not being used; for example, the query condition does not match the index. (What kind of query can use what kind of index is explained in the previous sections.)
    </p>
   </li>
   <li class=""listitem"">
    <p>
     If forcing index usage does use the index, then there are two possibilities: Either the system is right and using the index is indeed not appropriate, or the cost estimates of the query plans are not reflecting reality. So you should time your query with and without indexes. The
     <code class=""command"">
      EXPLAIN ANALYZE
     </code>
     command can be useful here.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     If it turns out that the cost estimates are wrong, there are, again, two possibilities. The total cost is computed from the per-row costs of each plan node times the selectivity estimate of the plan node. The costs estimated for the plan nodes can be adjusted via run-time parameters (described in
     <a class=""xref"" href=""runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS"" title=""19.7.2. Planner Cost Constants"">
      Section 19.7.2
     </a>
     ). An inaccurate selectivity estimate is due to insufficient statistics. It might be possible to improve this by tuning the statistics-gathering parameters (see
     <a class=""xref"" href=""sql-altertable.html"" title=""ALTER TABLE"">
      <span class=""refentrytitle"">
       ALTER TABLE
      </span>
     </a>
     ).
    </p>
    <p>
     If you do not succeed in adjusting the costs to be more appropriate, then you might have to resort to forcing index usage explicitly. You might also want to contact the
     <span class=""productname"">
      PostgreSQL
     </span>
     developers to examine the issue.
    </p>
   </li>
  </ul>
 </div>
</div>
"
12. Full Text Search,12.1. Introduction,https://www.postgresql.org/docs/17/textsearch-intro.html,"<div class=""sect1"" id=""TEXTSEARCH-INTRO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.1. Introduction
     <a class=""id_link"" href=""#TEXTSEARCH-INTRO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-intro.html#TEXTSEARCH-DOCUMENT"">
      12.1.1. What Is a Document?
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-intro.html#TEXTSEARCH-MATCHING"">
      12.1.2. Basic Text Matching
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-intro.html#TEXTSEARCH-INTRO-CONFIGURATIONS"">
      12.1.3. Configurations
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  Full Text Searching (or just
  <em class=""firstterm"">
   text search
  </em>
  ) provides the capability to identify natural-language
  <em class=""firstterm"">
   documents
  </em>
  that satisfy a
  <em class=""firstterm"">
   query
  </em>
  , and optionally to sort them by relevance to the query. The most common type of search is to find all documents containing given
  <em class=""firstterm"">
   query terms
  </em>
  and return them in order of their
  <em class=""firstterm"">
   similarity
  </em>
  to the query. Notions of
  <code class=""varname"">
   query
  </code>
  and
  <code class=""varname"">
   similarity
  </code>
  are very flexible and depend on the specific application. The simplest search considers
  <code class=""varname"">
   query
  </code>
  as a set of words and
  <code class=""varname"">
   similarity
  </code>
  as the frequency of query words in the document.
 </p>
 <p>
  Textual search operators have existed in databases for years.
  <span class=""productname"">
   PostgreSQL
  </span>
  has
  <code class=""literal"">
   ~
  </code>
  ,
  <code class=""literal"">
   ~*
  </code>
  ,
  <code class=""literal"">
   LIKE
  </code>
  , and
  <code class=""literal"">
   ILIKE
  </code>
  operators for textual data types, but they lack many essential properties required by modern information systems:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     There is no linguistic support, even for English. Regular expressions are not sufficient because they cannot easily handle derived words, e.g.,
     <code class=""literal"">
      satisfies
     </code>
     and
     <code class=""literal"">
      satisfy
     </code>
     . You might miss documents that contain
     <code class=""literal"">
      satisfies
     </code>
     , although you probably would like to find them when searching for
     <code class=""literal"">
      satisfy
     </code>
     . It is possible to use
     <code class=""literal"">
      OR
     </code>
     to search for multiple derived forms, but this is tedious and error-prone (some words can have several thousand derivatives).
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     They provide no ordering (ranking) of search results, which makes them ineffective when thousands of matching documents are found.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     They tend to be slow because there is no index support, so they must process all documents for every search.
    </p>
   </li>
  </ul>
 </div>
 <p>
  Full text indexing allows documents to be
  <span class=""emphasis"">
   <em>
    preprocessed
   </em>
  </span>
  and an index saved for later rapid searching. Preprocessing includes:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: none;"">
   <li class=""listitem"" style=""list-style-type: none"">
    <p>
     <span class=""emphasis"">
      <em>
       Parsing documents into
       <em class=""firstterm"">
        tokens
       </em>
      </em>
     </span>
     . It is useful to identify various classes of tokens, e.g., numbers, words, complex words, email addresses, so that they can be processed differently. In principle token classes depend on the specific application, but for most purposes it is adequate to use a predefined set of classes.
     <span class=""productname"">
      PostgreSQL
     </span>
     uses a
     <em class=""firstterm"">
      parser
     </em>
     to perform this step. A standard parser is provided, and custom parsers can be created for specific needs.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: none"">
    <p>
     <span class=""emphasis"">
      <em>
       Converting tokens into
       <em class=""firstterm"">
        lexemes
       </em>
      </em>
     </span>
     . A lexeme is a string, just like a token, but it has been
     <em class=""firstterm"">
      normalized
     </em>
     so that different forms of the same word are made alike. For example, normalization almost always includes folding upper-case letters to lower-case, and often involves removal of suffixes (such as
     <code class=""literal"">
      s
     </code>
     or
     <code class=""literal"">
      es
     </code>
     in English). This allows searches to find variant forms of the same word, without tediously entering all the possible variants. Also, this step typically eliminates
     <em class=""firstterm"">
      stop words
     </em>
     , which are words that are so common that they are useless for searching. (In short, then, tokens are raw fragments of the document text, while lexemes are words that are believed useful for indexing and searching.)
     <span class=""productname"">
      PostgreSQL
     </span>
     uses
     <em class=""firstterm"">
      dictionaries
     </em>
     to perform this step. Various standard dictionaries are provided, and custom ones can be created for specific needs.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: none"">
    <p>
     <span class=""emphasis"">
      <em>
       Storing preprocessed documents optimized for searching
      </em>
     </span>
     . For example, each document can be represented as a sorted array of normalized lexemes. Along with the lexemes it is often desirable to store positional information to use for
     <em class=""firstterm"">
      proximity ranking
     </em>
     , so that a document that contains a more
     <span class=""quote"">
      “
      <span class=""quote"">
       dense
      </span>
      ”
     </span>
     region of query words is assigned a higher rank than one with scattered query words.
    </p>
   </li>
  </ul>
 </div>
 <p>
  Dictionaries allow fine-grained control over how tokens are normalized. With appropriate dictionaries, you can:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Define stop words that should not be indexed.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Map synonyms to a single word using
     <span class=""application"">
      Ispell
     </span>
     .
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Map phrases to a single word using a thesaurus.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Map different variations of a word to a canonical form using an
     <span class=""application"">
      Ispell
     </span>
     dictionary.
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Map different variations of a word to a canonical form using
     <span class=""application"">
      Snowball
     </span>
     stemmer rules.
    </p>
   </li>
  </ul>
 </div>
 <p>
  A data type
  <code class=""type"">
   tsvector
  </code>
  is provided for storing preprocessed documents, along with a type
  <code class=""type"">
   tsquery
  </code>
  for representing processed queries (
  <a class=""xref"" href=""datatype-textsearch.html"" title=""8.11. Text Search Types"">
   Section 8.11
  </a>
  ). There are many functions and operators available for these data types (
  <a class=""xref"" href=""functions-textsearch.html"" title=""9.13. Text Search Functions and Operators"">
   Section 9.13
  </a>
  ), the most important of which is the match operator
  <code class=""literal"">
   @@
  </code>
  , which we introduce in
  <a class=""xref"" href=""textsearch-intro.html#TEXTSEARCH-MATCHING"" title=""12.1.2. Basic Text Matching"">
   Section 12.1.2
  </a>
  . Full text searches can be accelerated using indexes (
  <a class=""xref"" href=""textsearch-indexes.html"" title=""12.9. Preferred Index Types for Text Search"">
   Section 12.9
  </a>
  ).
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-DOCUMENT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.1.1. What Is a Document?
      <a class=""id_link"" href=""#TEXTSEARCH-DOCUMENT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.11.4.10.2"" name=""id-1.5.11.4.10.2"">
  </a>
  <p>
   A
   <em class=""firstterm"">
    document
   </em>
   is the unit of searching in a full text search system; for example, a magazine article or email message. The text search engine must be able to parse documents and store associations of lexemes (key words) with their parent document. Later, these associations are used to search for documents that contain query words.
  </p>
  <p>
   For searches within
   <span class=""productname"">
    PostgreSQL
   </span>
   , a document is normally a textual field within a row of a database table, or possibly a combination (concatenation) of such fields, perhaps stored in several tables or obtained dynamically. In other words, a document can be constructed from different parts for indexing and it might not be stored anywhere as a whole. For example:
  </p>
  <pre class=""programlisting"">
SELECT title || ' ' ||  author || ' ' ||  abstract || ' ' || body AS document
FROM messages
WHERE mid = 12;

SELECT m.title || ' ' || m.author || ' ' || m.abstract || ' ' || d.body AS document
FROM messages m, docs d
WHERE m.mid = d.did AND m.mid = 12;
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Actually, in these example queries,
    <code class=""function"">
     coalesce
    </code>
    should be used to prevent a single
    <code class=""literal"">
     NULL
    </code>
    attribute from causing a
    <code class=""literal"">
     NULL
    </code>
    result for the whole document.
   </p>
  </div>
  <p>
   Another possibility is to store the documents as simple text files in the file system. In this case, the database can be used to store the full text index and to execute searches, and some unique identifier can be used to retrieve the document from the file system. However, retrieving files from outside the database requires superuser permissions or special function support, so this is usually less convenient than keeping all the data inside
   <span class=""productname"">
    PostgreSQL
   </span>
   . Also, keeping everything inside the database allows easy access to document metadata to assist in indexing and display.
  </p>
  <p>
   For text search purposes, each document must be reduced to the preprocessed
   <code class=""type"">
    tsvector
   </code>
   format. Searching and ranking are performed entirely on the
   <code class=""type"">
    tsvector
   </code>
   representation of a document — the original text need only be retrieved when the document has been selected for display to a user. We therefore often speak of the
   <code class=""type"">
    tsvector
   </code>
   as being the document, but of course it is only a compact representation of the full document.
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-MATCHING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.1.2. Basic Text Matching
      <a class=""id_link"" href=""#TEXTSEARCH-MATCHING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Full text searching in
   <span class=""productname"">
    PostgreSQL
   </span>
   is based on the match operator
   <code class=""literal"">
    @@
   </code>
   , which returns
   <code class=""literal"">
    true
   </code>
   if a
   <code class=""type"">
    tsvector
   </code>
   (document) matches a
   <code class=""type"">
    tsquery
   </code>
   (query). It doesn't matter which data type is written first:
  </p>
  <pre class=""programlisting"">
SELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector @@ 'cat &amp; rat'::tsquery;
 ?column?
----------
 t

SELECT 'fat &amp; cow'::tsquery @@ 'a fat cat sat on a mat and ate a fat rat'::tsvector;
 ?column?
----------
 f
</pre>
  <p>
   As the above example suggests, a
   <code class=""type"">
    tsquery
   </code>
   is not just raw text, any more than a
   <code class=""type"">
    tsvector
   </code>
   is. A
   <code class=""type"">
    tsquery
   </code>
   contains search terms, which must be already-normalized lexemes, and may combine multiple terms using AND, OR, NOT, and FOLLOWED BY operators. (For syntax details see
   <a class=""xref"" href=""datatype-textsearch.html#DATATYPE-TSQUERY"" title=""8.11.2. tsquery"">
    Section 8.11.2
   </a>
   .) There are functions
   <code class=""function"">
    to_tsquery
   </code>
   ,
   <code class=""function"">
    plainto_tsquery
   </code>
   , and
   <code class=""function"">
    phraseto_tsquery
   </code>
   that are helpful in converting user-written text into a proper
   <code class=""type"">
    tsquery
   </code>
   , primarily by normalizing words appearing in the text. Similarly,
   <code class=""function"">
    to_tsvector
   </code>
   is used to parse and normalize a document string. So in practice a text search match would look more like this:
  </p>
  <pre class=""programlisting"">
SELECT to_tsvector('fat cats ate fat rats') @@ to_tsquery('fat &amp; rat');
 ?column?
----------
 t
</pre>
  <p>
   Observe that this match would not succeed if written as
  </p>
  <pre class=""programlisting"">
SELECT 'fat cats ate fat rats'::tsvector @@ to_tsquery('fat &amp; rat');
 ?column?
----------
 f
</pre>
  <p>
   since here no normalization of the word
   <code class=""literal"">
    rats
   </code>
   will occur. The elements of a
   <code class=""type"">
    tsvector
   </code>
   are lexemes, which are assumed already normalized, so
   <code class=""literal"">
    rats
   </code>
   does not match
   <code class=""literal"">
    rat
   </code>
   .
  </p>
  <p>
   The
   <code class=""literal"">
    @@
   </code>
   operator also supports
   <code class=""type"">
    text
   </code>
   input, allowing explicit conversion of a text string to
   <code class=""type"">
    tsvector
   </code>
   or
   <code class=""type"">
    tsquery
   </code>
   to be skipped in simple cases. The variants available are:
  </p>
  <pre class=""programlisting"">
tsvector @@ tsquery
tsquery  @@ tsvector
text @@ tsquery
text @@ text
</pre>
  <p>
   The first two of these we saw already. The form
   <code class=""type"">
    text
   </code>
   <code class=""literal"">
    @@
   </code>
   <code class=""type"">
    tsquery
   </code>
   is equivalent to
   <code class=""literal"">
    to_tsvector(x) @@ y
   </code>
   . The form
   <code class=""type"">
    text
   </code>
   <code class=""literal"">
    @@
   </code>
   <code class=""type"">
    text
   </code>
   is equivalent to
   <code class=""literal"">
    to_tsvector(x) @@ plainto_tsquery(y)
   </code>
   .
  </p>
  <p>
   Within a
   <code class=""type"">
    tsquery
   </code>
   , the
   <code class=""literal"">
    &amp;
   </code>
   (AND) operator specifies that both its arguments must appear in the document to have a match. Similarly, the
   <code class=""literal"">
    |
   </code>
   (OR) operator specifies that at least one of its arguments must appear, while the
   <code class=""literal"">
    !
   </code>
   (NOT) operator specifies that its argument must
   <span class=""emphasis"">
    <em>
     not
    </em>
   </span>
   appear in order to have a match. For example, the query
   <code class=""literal"">
    fat &amp; ! rat
   </code>
   matches documents that contain
   <code class=""literal"">
    fat
   </code>
   but not
   <code class=""literal"">
    rat
   </code>
   .
  </p>
  <p>
   Searching for phrases is possible with the help of the
   <code class=""literal"">
    &lt;-&gt;
   </code>
   (FOLLOWED BY)
   <code class=""type"">
    tsquery
   </code>
   operator, which matches only if its arguments have matches that are adjacent and in the given order. For example:
  </p>
  <pre class=""programlisting"">
SELECT to_tsvector('fatal error') @@ to_tsquery('fatal &lt;-&gt; error');
 ?column?
----------
 t

SELECT to_tsvector('error is not fatal') @@ to_tsquery('fatal &lt;-&gt; error');
 ?column?
----------
 f
</pre>
  <p>
   There is a more general version of the FOLLOWED BY operator having the form
   <code class=""literal"">
    &lt;
    <em class=""replaceable"">
     <code>
      N
     </code>
    </em>
    &gt;
   </code>
   , where
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   is an integer standing for the difference between the positions of the matching lexemes.
   <code class=""literal"">
    &lt;1&gt;
   </code>
   is the same as
   <code class=""literal"">
    &lt;-&gt;
   </code>
   , while
   <code class=""literal"">
    &lt;2&gt;
   </code>
   allows exactly one other lexeme to appear between the matches, and so on. The
   <code class=""literal"">
    phraseto_tsquery
   </code>
   function makes use of this operator to construct a
   <code class=""literal"">
    tsquery
   </code>
   that can match a multi-word phrase when some of the words are stop words. For example:
  </p>
  <pre class=""programlisting"">
SELECT phraseto_tsquery('cats ate rats');
       phraseto_tsquery
-------------------------------
 'cat' &lt;-&gt; 'ate' &lt;-&gt; 'rat'

SELECT phraseto_tsquery('the cats ate the rats');
       phraseto_tsquery
-------------------------------
 'cat' &lt;-&gt; 'ate' &lt;2&gt; 'rat'
</pre>
  <p>
   A special case that's sometimes useful is that
   <code class=""literal"">
    &lt;0&gt;
   </code>
   can be used to require that two patterns match the same word.
  </p>
  <p>
   Parentheses can be used to control nesting of the
   <code class=""type"">
    tsquery
   </code>
   operators. Without parentheses,
   <code class=""literal"">
    |
   </code>
   binds least tightly, then
   <code class=""literal"">
    &amp;
   </code>
   , then
   <code class=""literal"">
    &lt;-&gt;
   </code>
   , and
   <code class=""literal"">
    !
   </code>
   most tightly.
  </p>
  <p>
   It's worth noticing that the AND/OR/NOT operators mean something subtly different when they are within the arguments of a FOLLOWED BY operator than when they are not, because within FOLLOWED BY the exact position of the match is significant. For example, normally
   <code class=""literal"">
    !x
   </code>
   matches only documents that do not contain
   <code class=""literal"">
    x
   </code>
   anywhere. But
   <code class=""literal"">
    !x &lt;-&gt; y
   </code>
   matches
   <code class=""literal"">
    y
   </code>
   if it is not immediately after an
   <code class=""literal"">
    x
   </code>
   ; an occurrence of
   <code class=""literal"">
    x
   </code>
   elsewhere in the document does not prevent a match. Another example is that
   <code class=""literal"">
    x &amp; y
   </code>
   normally only requires that
   <code class=""literal"">
    x
   </code>
   and
   <code class=""literal"">
    y
   </code>
   both appear somewhere in the document, but
   <code class=""literal"">
    (x &amp; y) &lt;-&gt; z
   </code>
   requires
   <code class=""literal"">
    x
   </code>
   and
   <code class=""literal"">
    y
   </code>
   to match at the same place, immediately before a
   <code class=""literal"">
    z
   </code>
   . Thus this query behaves differently from
   <code class=""literal"">
    x &lt;-&gt; z &amp; y &lt;-&gt; z
   </code>
   , which will match a document containing two separate sequences
   <code class=""literal"">
    x z
   </code>
   and
   <code class=""literal"">
    y z
   </code>
   . (This specific query is useless as written, since
   <code class=""literal"">
    x
   </code>
   and
   <code class=""literal"">
    y
   </code>
   could not match at the same place; but with more complex situations such as prefix-match patterns, a query of this form could be useful.)
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-INTRO-CONFIGURATIONS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.1.3. Configurations
      <a class=""id_link"" href=""#TEXTSEARCH-INTRO-CONFIGURATIONS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The above are all simple text search examples. As mentioned before, full text search functionality includes the ability to do many more things: skip indexing certain words (stop words), process synonyms, and use sophisticated parsing, e.g., parse based on more than just white space. This functionality is controlled by
   <em class=""firstterm"">
    text search configurations
   </em>
   .
   <span class=""productname"">
    PostgreSQL
   </span>
   comes with predefined configurations for many languages, and you can easily create your own configurations. (
   <span class=""application"">
    psql
   </span>
   's
   <code class=""command"">
    \dF
   </code>
   command shows all available configurations.)
  </p>
  <p>
   During installation an appropriate configuration is selected and
   <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
    default_text_search_config
   </a>
   is set accordingly in
   <code class=""filename"">
    postgresql.conf
   </code>
   . If you are using the same text search configuration for the entire cluster you can use the value in
   <code class=""filename"">
    postgresql.conf
   </code>
   . To use different configurations throughout the cluster but the same configuration within any one database, use
   <code class=""command"">
    ALTER DATABASE ... SET
   </code>
   . Otherwise, you can set
   <code class=""varname"">
    default_text_search_config
   </code>
   in each session.
  </p>
  <p>
   Each text search function that depends on a configuration has an optional
   <code class=""type"">
    regconfig
   </code>
   argument, so that the configuration to use can be specified explicitly.
   <code class=""varname"">
    default_text_search_config
   </code>
   is used only when this argument is omitted.
  </p>
  <p>
   To make it easier to build custom text search configurations, a configuration is built up from simpler database objects.
   <span class=""productname"">
    PostgreSQL
   </span>
   's text search facility provides four types of configuration-related database objects:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""firstterm"">
       Text search parsers
      </em>
      break documents into tokens and classify each token (for example, as words or numbers).
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""firstterm"">
       Text search dictionaries
      </em>
      convert tokens to normalized form and reject stop words.
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""firstterm"">
       Text search templates
      </em>
      provide the functions underlying dictionaries. (A dictionary simply specifies a template and a set of parameters for the template.)
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""firstterm"">
       Text search configurations
      </em>
      select a parser and a set of dictionaries to use to normalize the tokens produced by the parser.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Text search parsers and templates are built from low-level C functions; therefore it requires C programming ability to develop new ones, and superuser privileges to install one into a database. (There are examples of add-on parsers and templates in the
   <code class=""filename"">
    contrib/
   </code>
   area of the
   <span class=""productname"">
    PostgreSQL
   </span>
   distribution.) Since dictionaries and configurations just parameterize and connect together some underlying parsers and templates, no special privilege is needed to create a new dictionary or configuration. Examples of creating custom dictionaries and configurations appear later in this chapter.
  </p>
 </div>
</div>
"
12. Full Text Search,12.2. Tables and Indexes,https://www.postgresql.org/docs/17/textsearch-tables.html,"<div class=""sect1"" id=""TEXTSEARCH-TABLES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.2. Tables and Indexes
     <a class=""id_link"" href=""#TEXTSEARCH-TABLES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-tables.html#TEXTSEARCH-TABLES-SEARCH"">
      12.2.1. Searching a Table
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-tables.html#TEXTSEARCH-TABLES-INDEX"">
      12.2.2. Creating Indexes
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  The examples in the previous section illustrated full text matching using simple constant strings. This section shows how to search table data, optionally using indexes.
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-TABLES-SEARCH"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.2.1. Searching a Table
      <a class=""id_link"" href=""#TEXTSEARCH-TABLES-SEARCH"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   It is possible to do a full text search without an index. A simple query to print the
   <code class=""structname"">
    title
   </code>
   of each row that contains the word
   <code class=""literal"">
    friend
   </code>
   in its
   <code class=""structfield"">
    body
   </code>
   field is:
  </p>
  <pre class=""programlisting"">
SELECT title
FROM pgweb
WHERE to_tsvector('english', body) @@ to_tsquery('english', 'friend');
</pre>
  <p>
   This will also find related words such as
   <code class=""literal"">
    friends
   </code>
   and
   <code class=""literal"">
    friendly
   </code>
   , since all these are reduced to the same normalized lexeme.
  </p>
  <p>
   The query above specifies that the
   <code class=""literal"">
    english
   </code>
   configuration is to be used to parse and normalize the strings. Alternatively we could omit the configuration parameters:
  </p>
  <pre class=""programlisting"">
SELECT title
FROM pgweb
WHERE to_tsvector(body) @@ to_tsquery('friend');
</pre>
  <p>
   This query will use the configuration set by
   <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
    default_text_search_config
   </a>
   .
  </p>
  <p>
   A more complex example is to select the ten most recent documents that contain
   <code class=""literal"">
    create
   </code>
   and
   <code class=""literal"">
    table
   </code>
   in the
   <code class=""structname"">
    title
   </code>
   or
   <code class=""structname"">
    body
   </code>
   :
  </p>
  <pre class=""programlisting"">
SELECT title
FROM pgweb
WHERE to_tsvector(title || ' ' || body) @@ to_tsquery('create &amp; table')
ORDER BY last_mod_date DESC
LIMIT 10;
</pre>
  <p>
   For clarity we omitted the
   <code class=""function"">
    coalesce
   </code>
   function calls which would be needed to find rows that contain
   <code class=""literal"">
    NULL
   </code>
   in one of the two fields.
  </p>
  <p>
   Although these queries will work without an index, most applications will find this approach too slow, except perhaps for occasional ad-hoc searches. Practical use of text searching usually requires creating an index.
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-TABLES-INDEX"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.2.2. Creating Indexes
      <a class=""id_link"" href=""#TEXTSEARCH-TABLES-INDEX"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   We can create a
   <acronym class=""acronym"">
    GIN
   </acronym>
   index (
   <a class=""xref"" href=""textsearch-indexes.html"" title=""12.9. Preferred Index Types for Text Search"">
    Section 12.9
   </a>
   ) to speed up text searches:
  </p>
  <pre class=""programlisting"">
CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', body));
</pre>
  <p>
   Notice that the 2-argument version of
   <code class=""function"">
    to_tsvector
   </code>
   is used. Only text search functions that specify a configuration name can be used in expression indexes (
   <a class=""xref"" href=""indexes-expressional.html"" title=""11.7. Indexes on Expressions"">
    Section 11.7
   </a>
   ). This is because the index contents must be unaffected by
   <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
    default_text_search_config
   </a>
   . If they were affected, the index contents might be inconsistent because different entries could contain
   <code class=""type"">
    tsvector
   </code>
   s that were created with different text search configurations, and there would be no way to guess which was which. It would be impossible to dump and restore such an index correctly.
  </p>
  <p>
   Because the two-argument version of
   <code class=""function"">
    to_tsvector
   </code>
   was used in the index above, only a query reference that uses the 2-argument version of
   <code class=""function"">
    to_tsvector
   </code>
   with the same configuration name will use that index. That is,
   <code class=""literal"">
    WHERE to_tsvector('english', body) @@ 'a &amp; b'
   </code>
   can use the index, but
   <code class=""literal"">
    WHERE to_tsvector(body) @@ 'a &amp; b'
   </code>
   cannot. This ensures that an index will be used only with the same configuration used to create the index entries.
  </p>
  <p>
   It is possible to set up more complex expression indexes wherein the configuration name is specified by another column, e.g.:
  </p>
  <pre class=""programlisting"">
CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector(config_name, body));
</pre>
  <p>
   where
   <code class=""literal"">
    config_name
   </code>
   is a column in the
   <code class=""literal"">
    pgweb
   </code>
   table. This allows mixed configurations in the same index while recording which configuration was used for each index entry. This would be useful, for example, if the document collection contained documents in different languages. Again, queries that are meant to use the index must be phrased to match, e.g.,
   <code class=""literal"">
    WHERE to_tsvector(config_name, body) @@ 'a &amp; b'
   </code>
   .
  </p>
  <p>
   Indexes can even concatenate columns:
  </p>
  <pre class=""programlisting"">
CREATE INDEX pgweb_idx ON pgweb USING GIN (to_tsvector('english', title || ' ' || body));
</pre>
  <p>
   Another approach is to create a separate
   <code class=""type"">
    tsvector
   </code>
   column to hold the output of
   <code class=""function"">
    to_tsvector
   </code>
   . To keep this column automatically up to date with its source data, use a stored generated column. This example is a concatenation of
   <code class=""literal"">
    title
   </code>
   and
   <code class=""literal"">
    body
   </code>
   , using
   <code class=""function"">
    coalesce
   </code>
   to ensure that one field will still be indexed when the other is
   <code class=""literal"">
    NULL
   </code>
   :
  </p>
  <pre class=""programlisting"">
ALTER TABLE pgweb
    ADD COLUMN textsearchable_index_col tsvector
               GENERATED ALWAYS AS (to_tsvector('english', coalesce(title, '') || ' ' || coalesce(body, ''))) STORED;
</pre>
  <p>
   Then we create a
   <acronym class=""acronym"">
    GIN
   </acronym>
   index to speed up the search:
  </p>
  <pre class=""programlisting"">
CREATE INDEX textsearch_idx ON pgweb USING GIN (textsearchable_index_col);
</pre>
  <p>
   Now we are ready to perform a fast full text search:
  </p>
  <pre class=""programlisting"">
SELECT title
FROM pgweb
WHERE textsearchable_index_col @@ to_tsquery('create &amp; table')
ORDER BY last_mod_date DESC
LIMIT 10;
</pre>
  <p>
   One advantage of the separate-column approach over an expression index is that it is not necessary to explicitly specify the text search configuration in queries in order to make use of the index. As shown in the example above, the query can depend on
   <code class=""varname"">
    default_text_search_config
   </code>
   . Another advantage is that searches will be faster, since it will not be necessary to redo the
   <code class=""function"">
    to_tsvector
   </code>
   calls to verify index matches. (This is more important when using a GiST index than a GIN index; see
   <a class=""xref"" href=""textsearch-indexes.html"" title=""12.9. Preferred Index Types for Text Search"">
    Section 12.9
   </a>
   .) The expression-index approach is simpler to set up, however, and it requires less disk space since the
   <code class=""type"">
    tsvector
   </code>
   representation is not stored explicitly.
  </p>
 </div>
</div>
"
12. Full Text Search,12.3. Controlling Text Search,https://www.postgresql.org/docs/17/textsearch-controls.html,"<div class=""sect1"" id=""TEXTSEARCH-CONTROLS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.3. Controlling Text Search
     <a class=""id_link"" href=""#TEXTSEARCH-CONTROLS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS"">
      12.3.1. Parsing Documents
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"">
      12.3.2. Parsing Queries
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-controls.html#TEXTSEARCH-RANKING"">
      12.3.3. Ranking Search Results
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-controls.html#TEXTSEARCH-HEADLINE"">
      12.3.4. Highlighting Results
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  To implement full text searching there must be a function to create a
  <code class=""type"">
   tsvector
  </code>
  from a document and a
  <code class=""type"">
   tsquery
  </code>
  from a user query. Also, we need to return results in a useful order, so we need a function that compares documents with respect to their relevance to the query. It's also important to be able to display the results nicely.
  <span class=""productname"">
   PostgreSQL
  </span>
  provides support for all of these functions.
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-PARSING-DOCUMENTS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.3.1. Parsing Documents
      <a class=""id_link"" href=""#TEXTSEARCH-PARSING-DOCUMENTS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   provides the function
   <code class=""function"">
    to_tsvector
   </code>
   for converting a document to the
   <code class=""type"">
    tsvector
   </code>
   data type.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.6.3.3"" name=""id-1.5.11.6.3.3"">
  </a>
  <pre class=""synopsis"">
to_tsvector([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>document</code></em> <code class=""type"">text</code>) returns <code class=""type"">tsvector</code>
</pre>
  <p>
   <code class=""function"">
    to_tsvector
   </code>
   parses a textual document into tokens, reduces the tokens to lexemes, and returns a
   <code class=""type"">
    tsvector
   </code>
   which lists the lexemes together with their positions in the document. The document is processed according to the specified or default text search configuration. Here is a simple example:
  </p>
  <pre class=""screen"">
SELECT to_tsvector('english', 'a fat  cat sat on a mat - it ate a fat rats');
                  to_tsvector
-----------------------------------------------------
 'ate':9 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4
</pre>
  <p>
   In the example above we see that the resulting
   <code class=""type"">
    tsvector
   </code>
   does not contain the words
   <code class=""literal"">
    a
   </code>
   ,
   <code class=""literal"">
    on
   </code>
   , or
   <code class=""literal"">
    it
   </code>
   , the word
   <code class=""literal"">
    rats
   </code>
   became
   <code class=""literal"">
    rat
   </code>
   , and the punctuation sign
   <code class=""literal"">
    -
   </code>
   was ignored.
  </p>
  <p>
   The
   <code class=""function"">
    to_tsvector
   </code>
   function internally calls a parser which breaks the document text into tokens and assigns a type to each token. For each token, a list of dictionaries (
   <a class=""xref"" href=""textsearch-dictionaries.html"" title=""12.6. Dictionaries"">
    Section 12.6
   </a>
   ) is consulted, where the list can vary depending on the token type. The first dictionary that
   <em class=""firstterm"">
    recognizes
   </em>
   the token emits one or more normalized
   <em class=""firstterm"">
    lexemes
   </em>
   to represent the token. For example,
   <code class=""literal"">
    rats
   </code>
   became
   <code class=""literal"">
    rat
   </code>
   because one of the dictionaries recognized that the word
   <code class=""literal"">
    rats
   </code>
   is a plural form of
   <code class=""literal"">
    rat
   </code>
   . Some words are recognized as
   <em class=""firstterm"">
    stop words
   </em>
   (
   <a class=""xref"" href=""textsearch-dictionaries.html#TEXTSEARCH-STOPWORDS"" title=""12.6.1. Stop Words"">
    Section 12.6.1
   </a>
   ), which causes them to be ignored since they occur too frequently to be useful in searching. In our example these are
   <code class=""literal"">
    a
   </code>
   ,
   <code class=""literal"">
    on
   </code>
   , and
   <code class=""literal"">
    it
   </code>
   . If no dictionary in the list recognizes the token then it is also ignored. In this example that happened to the punctuation sign
   <code class=""literal"">
    -
   </code>
   because there are in fact no dictionaries assigned for its token type (
   <code class=""literal"">
    Space symbols
   </code>
   ), meaning space tokens will never be indexed. The choices of parser, dictionaries and which types of tokens to index are determined by the selected text search configuration (
   <a class=""xref"" href=""textsearch-configuration.html"" title=""12.7. Configuration Example"">
    Section 12.7
   </a>
   ). It is possible to have many different configurations in the same database, and predefined configurations are available for various languages. In our example we used the default configuration
   <code class=""literal"">
    english
   </code>
   for the English language.
  </p>
  <p>
   The function
   <code class=""function"">
    setweight
   </code>
   can be used to label the entries of a
   <code class=""type"">
    tsvector
   </code>
   with a given
   <em class=""firstterm"">
    weight
   </em>
   , where a weight is one of the letters
   <code class=""literal"">
    A
   </code>
   ,
   <code class=""literal"">
    B
   </code>
   ,
   <code class=""literal"">
    C
   </code>
   , or
   <code class=""literal"">
    D
   </code>
   . This is typically used to mark entries coming from different parts of a document, such as title versus body. Later, this information can be used for ranking of search results.
  </p>
  <p>
   Because
   <code class=""function"">
    to_tsvector
   </code>
   (
   <code class=""literal"">
    NULL
   </code>
   ) will return
   <code class=""literal"">
    NULL
   </code>
   , it is recommended to use
   <code class=""function"">
    coalesce
   </code>
   whenever a field might be null. Here is the recommended method for creating a
   <code class=""type"">
    tsvector
   </code>
   from a structured document:
  </p>
  <pre class=""programlisting"">
UPDATE tt SET ti =
    setweight(to_tsvector(coalesce(title,'')), 'A')    ||
    setweight(to_tsvector(coalesce(keyword,'')), 'B')  ||
    setweight(to_tsvector(coalesce(abstract,'')), 'C') ||
    setweight(to_tsvector(coalesce(body,'')), 'D');
</pre>
  <p>
   Here we have used
   <code class=""function"">
    setweight
   </code>
   to label the source of each lexeme in the finished
   <code class=""type"">
    tsvector
   </code>
   , and then merged the labeled
   <code class=""type"">
    tsvector
   </code>
   values using the
   <code class=""type"">
    tsvector
   </code>
   concatenation operator
   <code class=""literal"">
    ||
   </code>
   . (
   <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR"" title=""12.4.1. Manipulating Documents"">
    Section 12.4.1
   </a>
   gives details about these operations.)
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-PARSING-QUERIES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.3.2. Parsing Queries
      <a class=""id_link"" href=""#TEXTSEARCH-PARSING-QUERIES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   provides the functions
   <code class=""function"">
    to_tsquery
   </code>
   ,
   <code class=""function"">
    plainto_tsquery
   </code>
   ,
   <code class=""function"">
    phraseto_tsquery
   </code>
   and
   <code class=""function"">
    websearch_to_tsquery
   </code>
   for converting a query to the
   <code class=""type"">
    tsquery
   </code>
   data type.
   <code class=""function"">
    to_tsquery
   </code>
   offers access to more features than either
   <code class=""function"">
    plainto_tsquery
   </code>
   or
   <code class=""function"">
    phraseto_tsquery
   </code>
   , but it is less forgiving about its input.
   <code class=""function"">
    websearch_to_tsquery
   </code>
   is a simplified version of
   <code class=""function"">
    to_tsquery
   </code>
   with an alternative syntax, similar to the one used by web search engines.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.6.4.3"" name=""id-1.5.11.6.4.3"">
  </a>
  <pre class=""synopsis"">
to_tsquery([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>querytext</code></em> <code class=""type"">text</code>) returns <code class=""type"">tsquery</code>
</pre>
  <p>
   <code class=""function"">
    to_tsquery
   </code>
   creates a
   <code class=""type"">
    tsquery
   </code>
   value from
   <em class=""replaceable"">
    <code>
     querytext
    </code>
   </em>
   , which must consist of single tokens separated by the
   <code class=""type"">
    tsquery
   </code>
   operators
   <code class=""literal"">
    &amp;
   </code>
   (AND),
   <code class=""literal"">
    |
   </code>
   (OR),
   <code class=""literal"">
    !
   </code>
   (NOT), and
   <code class=""literal"">
    &lt;-&gt;
   </code>
   (FOLLOWED BY), possibly grouped using parentheses. In other words, the input to
   <code class=""function"">
    to_tsquery
   </code>
   must already follow the general rules for
   <code class=""type"">
    tsquery
   </code>
   input, as described in
   <a class=""xref"" href=""datatype-textsearch.html#DATATYPE-TSQUERY"" title=""8.11.2. tsquery"">
    Section 8.11.2
   </a>
   . The difference is that while basic
   <code class=""type"">
    tsquery
   </code>
   input takes the tokens at face value,
   <code class=""function"">
    to_tsquery
   </code>
   normalizes each token into a lexeme using the specified or default configuration, and discards any tokens that are stop words according to the configuration. For example:
  </p>
  <pre class=""screen"">
SELECT to_tsquery('english', 'The &amp; Fat &amp; Rats');
  to_tsquery
---------------
 'fat' &amp; 'rat'
</pre>
  <p>
   As in basic
   <code class=""type"">
    tsquery
   </code>
   input, weight(s) can be attached to each lexeme to restrict it to match only
   <code class=""type"">
    tsvector
   </code>
   lexemes of those weight(s). For example:
  </p>
  <pre class=""screen"">
SELECT to_tsquery('english', 'Fat | Rats:AB');
    to_tsquery
------------------
 'fat' | 'rat':AB
</pre>
  <p>
   Also,
   <code class=""literal"">
    *
   </code>
   can be attached to a lexeme to specify prefix matching:
  </p>
  <pre class=""screen"">
SELECT to_tsquery('supern:*A &amp; star:A*B');
        to_tsquery
--------------------------
 'supern':*A &amp; 'star':*AB
</pre>
  <p>
   Such a lexeme will match any word in a
   <code class=""type"">
    tsvector
   </code>
   that begins with the given string.
  </p>
  <p>
   <code class=""function"">
    to_tsquery
   </code>
   can also accept single-quoted phrases. This is primarily useful when the configuration includes a thesaurus dictionary that may trigger on such phrases. In the example below, a thesaurus contains the rule
   <code class=""literal"">
    supernovae stars : sn
   </code>
   :
  </p>
  <pre class=""screen"">
SELECT to_tsquery('''supernovae stars'' &amp; !crab');
  to_tsquery
---------------
 'sn' &amp; !'crab'
</pre>
  <p>
   Without quotes,
   <code class=""function"">
    to_tsquery
   </code>
   will generate a syntax error for tokens that are not separated by an AND, OR, or FOLLOWED BY operator.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.6.4.7"" name=""id-1.5.11.6.4.7"">
  </a>
  <pre class=""synopsis"">
plainto_tsquery([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>querytext</code></em> <code class=""type"">text</code>) returns <code class=""type"">tsquery</code>
</pre>
  <p>
   <code class=""function"">
    plainto_tsquery
   </code>
   transforms the unformatted text
   <em class=""replaceable"">
    <code>
     querytext
    </code>
   </em>
   to a
   <code class=""type"">
    tsquery
   </code>
   value. The text is parsed and normalized much as for
   <code class=""function"">
    to_tsvector
   </code>
   , then the
   <code class=""literal"">
    &amp;
   </code>
   (AND)
   <code class=""type"">
    tsquery
   </code>
   operator is inserted between surviving words.
  </p>
  <p>
   Example:
  </p>
  <pre class=""screen"">
SELECT plainto_tsquery('english', 'The Fat Rats');
 plainto_tsquery
-----------------
 'fat' &amp; 'rat'
</pre>
  <p>
   Note that
   <code class=""function"">
    plainto_tsquery
   </code>
   will not recognize
   <code class=""type"">
    tsquery
   </code>
   operators, weight labels, or prefix-match labels in its input:
  </p>
  <pre class=""screen"">
SELECT plainto_tsquery('english', 'The Fat &amp; Rats:C');
   plainto_tsquery
---------------------
 'fat' &amp; 'rat' &amp; 'c'
</pre>
  <p>
   Here, all the input punctuation was discarded.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.6.4.11"" name=""id-1.5.11.6.4.11"">
  </a>
  <pre class=""synopsis"">
phraseto_tsquery([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>querytext</code></em> <code class=""type"">text</code>) returns <code class=""type"">tsquery</code>
</pre>
  <p>
   <code class=""function"">
    phraseto_tsquery
   </code>
   behaves much like
   <code class=""function"">
    plainto_tsquery
   </code>
   , except that it inserts the
   <code class=""literal"">
    &lt;-&gt;
   </code>
   (FOLLOWED BY) operator between surviving words instead of the
   <code class=""literal"">
    &amp;
   </code>
   (AND) operator. Also, stop words are not simply discarded, but are accounted for by inserting
   <code class=""literal"">
    &lt;
    <em class=""replaceable"">
     <code>
      N
     </code>
    </em>
    &gt;
   </code>
   operators rather than
   <code class=""literal"">
    &lt;-&gt;
   </code>
   operators. This function is useful when searching for exact lexeme sequences, since the FOLLOWED BY operators check lexeme order not just the presence of all the lexemes.
  </p>
  <p>
   Example:
  </p>
  <pre class=""screen"">
SELECT phraseto_tsquery('english', 'The Fat Rats');
 phraseto_tsquery
------------------
 'fat' &lt;-&gt; 'rat'
</pre>
  <p>
   Like
   <code class=""function"">
    plainto_tsquery
   </code>
   , the
   <code class=""function"">
    phraseto_tsquery
   </code>
   function will not recognize
   <code class=""type"">
    tsquery
   </code>
   operators, weight labels, or prefix-match labels in its input:
  </p>
  <pre class=""screen"">
SELECT phraseto_tsquery('english', 'The Fat &amp; Rats:C');
      phraseto_tsquery
-----------------------------
 'fat' &lt;-&gt; 'rat' &lt;-&gt; 'c'
</pre>
  <pre class=""synopsis"">
websearch_to_tsquery([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>querytext</code></em> <code class=""type"">text</code>) returns <code class=""type"">tsquery</code>
</pre>
  <p>
   <code class=""function"">
    websearch_to_tsquery
   </code>
   creates a
   <code class=""type"">
    tsquery
   </code>
   value from
   <em class=""replaceable"">
    <code>
     querytext
    </code>
   </em>
   using an alternative syntax in which simple unformatted text is a valid query. Unlike
   <code class=""function"">
    plainto_tsquery
   </code>
   and
   <code class=""function"">
    phraseto_tsquery
   </code>
   , it also recognizes certain operators. Moreover, this function will never raise syntax errors, which makes it possible to use raw user-supplied input for search. The following syntax is supported:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       unquoted text
      </code>
      : text not inside quote marks will be converted to terms separated by
      <code class=""literal"">
       &amp;
      </code>
      operators, as if processed by
      <code class=""function"">
       plainto_tsquery
      </code>
      .
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       ""quoted text""
      </code>
      : text inside quote marks will be converted to terms separated by
      <code class=""literal"">
       &lt;-&gt;
      </code>
      operators, as if processed by
      <code class=""function"">
       phraseto_tsquery
      </code>
      .
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       OR
      </code>
      : the word
      <span class=""quote"">
       “
       <span class=""quote"">
        or
       </span>
       ”
      </span>
      will be converted to the
      <code class=""literal"">
       |
      </code>
      operator.
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       -
      </code>
      : a dash will be converted to the
      <code class=""literal"">
       !
      </code>
      operator.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Other punctuation is ignored. So like
   <code class=""function"">
    plainto_tsquery
   </code>
   and
   <code class=""function"">
    phraseto_tsquery
   </code>
   , the
   <code class=""function"">
    websearch_to_tsquery
   </code>
   function will not recognize
   <code class=""type"">
    tsquery
   </code>
   operators, weight labels, or prefix-match labels in its input.
  </p>
  <p>
   Examples:
  </p>
  <pre class=""screen"">
SELECT websearch_to_tsquery('english', 'The fat rats');
 websearch_to_tsquery
----------------------
 'fat' &amp; 'rat'
(1 row)

SELECT websearch_to_tsquery('english', '""supernovae stars"" -crab');
       websearch_to_tsquery
----------------------------------
 'supernova' &lt;-&gt; 'star' &amp; !'crab'
(1 row)

SELECT websearch_to_tsquery('english', '""sad cat"" or ""fat rat""');
       websearch_to_tsquery
-----------------------------------
 'sad' &lt;-&gt; 'cat' | 'fat' &lt;-&gt; 'rat'
(1 row)

SELECT websearch_to_tsquery('english', 'signal -""segmentation fault""');
         websearch_to_tsquery
---------------------------------------
 'signal' &amp; !( 'segment' &lt;-&gt; 'fault' )
(1 row)

SELECT websearch_to_tsquery('english', '"""""" )( dummy \\ query &lt;-&gt;');
 websearch_to_tsquery
----------------------
 'dummi' &amp; 'queri'
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-RANKING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.3.3. Ranking Search Results
      <a class=""id_link"" href=""#TEXTSEARCH-RANKING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Ranking attempts to measure how relevant documents are to a particular query, so that when there are many matches the most relevant ones can be shown first.
   <span class=""productname"">
    PostgreSQL
   </span>
   provides two predefined ranking functions, which take into account lexical, proximity, and structural information; that is, they consider how often the query terms appear in the document, how close together the terms are in the document, and how important is the part of the document where they occur. However, the concept of relevancy is vague and very application-specific. Different applications might require additional information for ranking, e.g., document modification time. The built-in ranking functions are only examples. You can write your own ranking functions and/or combine their results with additional factors to fit your specific needs.
  </p>
  <p>
   The two ranking functions currently available are:
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.6.5.3.1.1.1.1"" name=""id-1.5.11.6.5.3.1.1.1.1"">
      </a>
      <code class=""literal"">
       ts_rank([
       <span class=""optional"">
        <em class=""replaceable"">
         <code>
          weights
         </code>
        </em>
        <code class=""type"">
         float4[]
        </code>
        ,
       </span>
       ]
       <em class=""replaceable"">
        <code>
         vector
        </code>
       </em>
       <code class=""type"">
        tsvector
       </code>
       ,
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       [
       <span class=""optional"">
        ,
        <em class=""replaceable"">
         <code>
          normalization
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
       </span>
       ]) returns
       <code class=""type"">
        float4
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Ranks vectors based on the frequency of their matching lexemes.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.6.5.3.1.2.1.1"" name=""id-1.5.11.6.5.3.1.2.1.1"">
      </a>
      <code class=""literal"">
       ts_rank_cd([
       <span class=""optional"">
        <em class=""replaceable"">
         <code>
          weights
         </code>
        </em>
        <code class=""type"">
         float4[]
        </code>
        ,
       </span>
       ]
       <em class=""replaceable"">
        <code>
         vector
        </code>
       </em>
       <code class=""type"">
        tsvector
       </code>
       ,
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       [
       <span class=""optional"">
        ,
        <em class=""replaceable"">
         <code>
          normalization
         </code>
        </em>
        <code class=""type"">
         integer
        </code>
       </span>
       ]) returns
       <code class=""type"">
        float4
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      This function computes the
      <em class=""firstterm"">
       cover density
      </em>
      ranking for the given document vector and query, as described in Clarke, Cormack, and Tudhope's ""Relevance Ranking for One to Three Term Queries"" in the journal ""Information Processing and Management"", 1999. Cover density is similar to
      <code class=""function"">
       ts_rank
      </code>
      ranking except that the proximity of matching lexemes to each other is taken into consideration.
     </p>
     <p>
      This function requires lexeme positional information to perform its calculation. Therefore, it ignores any
      <span class=""quote"">
       “
       <span class=""quote"">
        stripped
       </span>
       ”
      </span>
      lexemes in the
      <code class=""type"">
       tsvector
      </code>
      . If there are no unstripped lexemes in the input, the result will be zero. (See
      <a class=""xref"" href=""textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR"" title=""12.4.1. Manipulating Documents"">
       Section 12.4.1
      </a>
      for more information about the
      <code class=""function"">
       strip
      </code>
      function and positional information in
      <code class=""type"">
       tsvector
      </code>
      s.)
     </p>
    </dd>
   </dl>
  </div>
  <p>
   For both these functions, the optional
   <em class=""replaceable"">
    <code>
     weights
    </code>
   </em>
   argument offers the ability to weigh word instances more or less heavily depending on how they are labeled. The weight arrays specify how heavily to weigh each category of word, in the order:
  </p>
  <pre class=""synopsis"">
{D-weight, C-weight, B-weight, A-weight}
</pre>
  <p>
   If no
   <em class=""replaceable"">
    <code>
     weights
    </code>
   </em>
   are provided, then these defaults are used:
  </p>
  <pre class=""programlisting"">
{0.1, 0.2, 0.4, 1.0}
</pre>
  <p>
   Typically weights are used to mark words from special areas of the document, like the title or an initial abstract, so they can be treated with more or less importance than words in the document body.
  </p>
  <p>
   Since a longer document has a greater chance of containing a query term it is reasonable to take into account document size, e.g., a hundred-word document with five instances of a search word is probably more relevant than a thousand-word document with five instances. Both ranking functions take an integer
   <em class=""replaceable"">
    <code>
     normalization
    </code>
   </em>
   option that specifies whether and how a document's length should impact its rank. The integer option controls several behaviors, so it is a bit mask: you can specify one or more behaviors using
   <code class=""literal"">
    |
   </code>
   (for example,
   <code class=""literal"">
    2|4
   </code>
   ).
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      0 (the default) ignores the document length
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      1 divides the rank by 1 + the logarithm of the document length
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      2 divides the rank by the document length
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      4 divides the rank by the mean harmonic distance between extents (this is implemented only by
      <code class=""function"">
       ts_rank_cd
      </code>
      )
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      8 divides the rank by the number of unique words in document
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      16 divides the rank by 1 + the logarithm of the number of unique words in document
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      32 divides the rank by itself + 1
     </p>
    </li>
   </ul>
  </div>
  <p>
   If more than one flag bit is specified, the transformations are applied in the order listed.
  </p>
  <p>
   It is important to note that the ranking functions do not use any global information, so it is impossible to produce a fair normalization to 1% or 100% as sometimes desired. Normalization option 32 (
   <code class=""literal"">
    rank/(rank+1)
   </code>
   ) can be applied to scale all ranks into the range zero to one, but of course this is just a cosmetic change; it will not affect the ordering of the search results.
  </p>
  <p>
   Here is an example that selects only the ten highest-ranked matches:
  </p>
  <pre class=""screen"">
SELECT title, ts_rank_cd(textsearch, query) AS rank
FROM apod, to_tsquery('neutrino|(dark &amp; matter)') query
WHERE query @@ textsearch
ORDER BY rank DESC
LIMIT 10;
                     title                     |   rank
-----------------------------------------------+----------
 Neutrinos in the Sun                          |      3.1
 The Sudbury Neutrino Detector                 |      2.4
 A MACHO View of Galactic Dark Matter          |  2.01317
 Hot Gas and Dark Matter                       |  1.91171
 The Virgo Cluster: Hot Plasma and Dark Matter |  1.90953
 Rafting for Solar Neutrinos                   |      1.9
 NGC 4650A: Strange Galaxy and Dark Matter     |  1.85774
 Hot Gas and Dark Matter                       |   1.6123
 Ice Fishing for Cosmic Neutrinos              |      1.6
 Weak Lensing Distorts the Universe            | 0.818218
</pre>
  <p>
   This is the same example using normalized ranking:
  </p>
  <pre class=""screen"">
SELECT title, ts_rank_cd(textsearch, query, 32 /* rank/(rank+1) */ ) AS rank
FROM apod, to_tsquery('neutrino|(dark &amp; matter)') query
WHERE  query @@ textsearch
ORDER BY rank DESC
LIMIT 10;
                     title                     |        rank
-----------------------------------------------+-------------------
 Neutrinos in the Sun                          | 0.756097569485493
 The Sudbury Neutrino Detector                 | 0.705882361190954
 A MACHO View of Galactic Dark Matter          | 0.668123210574724
 Hot Gas and Dark Matter                       |  0.65655958650282
 The Virgo Cluster: Hot Plasma and Dark Matter | 0.656301290640973
 Rafting for Solar Neutrinos                   | 0.655172410958162
 NGC 4650A: Strange Galaxy and Dark Matter     | 0.650072921219637
 Hot Gas and Dark Matter                       | 0.617195790024749
 Ice Fishing for Cosmic Neutrinos              | 0.615384618911517
 Weak Lensing Distorts the Universe            | 0.450010798361481
</pre>
  <p>
   Ranking can be expensive since it requires consulting the
   <code class=""type"">
    tsvector
   </code>
   of each matching document, which can be I/O bound and therefore slow. Unfortunately, it is almost impossible to avoid since practical queries often result in large numbers of matches.
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-HEADLINE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.3.4. Highlighting Results
      <a class=""id_link"" href=""#TEXTSEARCH-HEADLINE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   To present search results it is ideal to show a part of each document and how it is related to the query. Usually, search engines show fragments of the document with marked search terms.
   <span class=""productname"">
    PostgreSQL
   </span>
   provides a function
   <code class=""function"">
    ts_headline
   </code>
   that implements this functionality.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.6.6.3"" name=""id-1.5.11.6.6.3"">
  </a>
  <pre class=""synopsis"">
ts_headline([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>document</code></em> <code class=""type"">text</code>, <em class=""replaceable""><code>query</code></em> <code class=""type"">tsquery</code> [<span class=""optional"">, <em class=""replaceable""><code>options</code></em> <code class=""type"">text</code> </span>]) returns <code class=""type"">text</code>
</pre>
  <p>
   <code class=""function"">
    ts_headline
   </code>
   accepts a document along with a query, and returns an excerpt from the document in which terms from the query are highlighted. Specifically, the function will use the query to select relevant text fragments, and then highlight all words that appear in the query, even if those word positions do not match the query's restrictions. The configuration to be used to parse the document can be specified by
   <em class=""replaceable"">
    <code>
     config
    </code>
   </em>
   ; if
   <em class=""replaceable"">
    <code>
     config
    </code>
   </em>
   is omitted, the
   <code class=""varname"">
    default_text_search_config
   </code>
   configuration is used.
  </p>
  <p>
   If an
   <em class=""replaceable"">
    <code>
     options
    </code>
   </em>
   string is specified it must consist of a comma-separated list of one or more
   <em class=""replaceable"">
    <code>
     option
    </code>
   </em>
   <code class=""literal"">
    =
   </code>
   <em class=""replaceable"">
    <code>
     value
    </code>
   </em>
   pairs. The available options are:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       MaxWords
      </code>
      ,
      <code class=""literal"">
       MinWords
      </code>
      (integers): these numbers determine the longest and shortest headlines to output. The default values are 35 and 15.
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       ShortWord
      </code>
      (integer): words of this length or less will be dropped at the start and end of a headline, unless they are query terms. The default value of three eliminates common English articles.
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       HighlightAll
      </code>
      (boolean): if
      <code class=""literal"">
       true
      </code>
      the whole document will be used as the headline, ignoring the preceding three parameters. The default is
      <code class=""literal"">
       false
      </code>
      .
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       MaxFragments
      </code>
      (integer): maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method. A value greater than zero selects fragment-based headline generation (see below).
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       StartSel
      </code>
      ,
      <code class=""literal"">
       StopSel
      </code>
      (strings): the strings with which to delimit query words appearing in the document, to distinguish them from other excerpted words. The default values are
      <span class=""quote"">
       “
       <span class=""quote"">
        <code class=""literal"">
         &lt;b&gt;
        </code>
       </span>
       ”
      </span>
      and
      <span class=""quote"">
       “
       <span class=""quote"">
        <code class=""literal"">
         &lt;/b&gt;
        </code>
       </span>
       ”
      </span>
      , which can be suitable for HTML output.
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <code class=""literal"">
       FragmentDelimiter
      </code>
      (string): When more than one fragment is displayed, the fragments will be separated by this string. The default is
      <span class=""quote"">
       “
       <span class=""quote"">
        <code class=""literal"">
         ...
        </code>
       </span>
       ”
      </span>
      .
     </p>
    </li>
   </ul>
  </div>
  <p>
   These option names are recognized case-insensitively. You must double-quote string values if they contain spaces or commas.
  </p>
  <p>
   In non-fragment-based headline generation,
   <code class=""function"">
    ts_headline
   </code>
   locates matches for the given
   <em class=""replaceable"">
    <code>
     query
    </code>
   </em>
   and chooses a single one to display, preferring matches that have more query words within the allowed headline length. In fragment-based headline generation,
   <code class=""function"">
    ts_headline
   </code>
   locates the query matches and splits each match into
   <span class=""quote"">
    “
    <span class=""quote"">
     fragments
    </span>
    ”
   </span>
   of no more than
   <code class=""literal"">
    MaxWords
   </code>
   words each, preferring fragments with more query words, and when possible
   <span class=""quote"">
    “
    <span class=""quote"">
     stretching
    </span>
    ”
   </span>
   fragments to include surrounding words. The fragment-based mode is thus more useful when the query matches span large sections of the document, or when it's desirable to display multiple matches. In either mode, if no query matches can be identified, then a single fragment of the first
   <code class=""literal"">
    MinWords
   </code>
   words in the document will be displayed.
  </p>
  <p>
   For example:
  </p>
  <pre class=""screen"">
SELECT ts_headline('english',
  'The most common type of search
is to find all documents containing given query terms
and return them in order of their similarity to the
query.',
  to_tsquery('english', 'query &amp; similarity'));
                        ts_headline
------------------------------------------------------------
 containing given &lt;b&gt;query&lt;/b&gt; terms                       +
 and return them in order of their &lt;b&gt;similarity&lt;/b&gt; to the+
 &lt;b&gt;query&lt;/b&gt;.

SELECT ts_headline('english',
  'Search terms may occur
many times in a document,
requiring ranking of the search matches to decide which
occurrences to display in the result.',
  to_tsquery('english', 'search &amp; term'),
  'MaxFragments=10, MaxWords=7, MinWords=3, StartSel=&lt;&lt;, StopSel=&gt;&gt;');
                        ts_headline
------------------------------------------------------------
 &lt;&lt;Search&gt;&gt; &lt;&lt;terms&gt;&gt; may occur                            +
 many times ... ranking of the &lt;&lt;search&gt;&gt; matches to decide
</pre>
  <p>
   <code class=""function"">
    ts_headline
   </code>
   uses the original document, not a
   <code class=""type"">
    tsvector
   </code>
   summary, so it can be slow and should be used with care.
  </p>
 </div>
</div>
"
12. Full Text Search,12.4. Additional Features,https://www.postgresql.org/docs/17/textsearch-features.html,"<div class=""sect1"" id=""TEXTSEARCH-FEATURES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.4. Additional Features
     <a class=""id_link"" href=""#TEXTSEARCH-FEATURES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR"">
      12.4.1. Manipulating Documents
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY"">
      12.4.2. Manipulating Queries
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS"">
      12.4.3. Triggers for Automatic Updates
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-features.html#TEXTSEARCH-STATISTICS"">
      12.4.4. Gathering Document Statistics
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  This section describes additional functions and operators that are useful in connection with text search.
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-MANIPULATE-TSVECTOR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.4.1. Manipulating Documents
      <a class=""id_link"" href=""#TEXTSEARCH-MANIPULATE-TSVECTOR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS"" title=""12.3.1. Parsing Documents"">
    Section 12.3.1
   </a>
   showed how raw textual documents can be converted into
   <code class=""type"">
    tsvector
   </code>
   values.
   <span class=""productname"">
    PostgreSQL
   </span>
   also provides functions and operators that can be used to manipulate documents that are already in
   <code class=""type"">
    tsvector
   </code>
   form.
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.3.3.1.1.1"" name=""id-1.5.11.7.3.3.1.1.1"">
      </a>
      <code class=""literal"">
       <code class=""type"">
        tsvector
       </code>
       ||
       <code class=""type"">
        tsvector
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      The
      <code class=""type"">
       tsvector
      </code>
      concatenation operator returns a vector which combines the lexemes and positional information of the two vectors given as arguments. Positions and weight labels are retained during the concatenation. Positions appearing in the right-hand vector are offset by the largest position mentioned in the left-hand vector, so that the result is nearly equivalent to the result of performing
      <code class=""function"">
       to_tsvector
      </code>
      on the concatenation of the two original document strings. (The equivalence is not exact, because any stop-words removed from the end of the left-hand argument will not affect the result, whereas they would have affected the positions of the lexemes in the right-hand argument if textual concatenation were used.)
     </p>
     <p>
      One advantage of using concatenation in the vector form, rather than concatenating text before applying
      <code class=""function"">
       to_tsvector
      </code>
      , is that you can use different configurations to parse different sections of the document. Also, because the
      <code class=""function"">
       setweight
      </code>
      function marks all lexemes of the given vector the same way, it is necessary to parse the text and do
      <code class=""function"">
       setweight
      </code>
      before concatenating if you want to label different parts of the document with different weights.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.3.3.2.1.1"" name=""id-1.5.11.7.3.3.2.1.1"">
      </a>
      <code class=""literal"">
       setweight(
       <em class=""replaceable"">
        <code>
         vector
        </code>
       </em>
       <code class=""type"">
        tsvector
       </code>
       ,
       <em class=""replaceable"">
        <code>
         weight
        </code>
       </em>
       <code class=""type"">
        ""char""
       </code>
       ) returns
       <code class=""type"">
        tsvector
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      <code class=""function"">
       setweight
      </code>
      returns a copy of the input vector in which every position has been labeled with the given
      <em class=""replaceable"">
       <code>
        weight
       </code>
      </em>
      , either
      <code class=""literal"">
       A
      </code>
      ,
      <code class=""literal"">
       B
      </code>
      ,
      <code class=""literal"">
       C
      </code>
      , or
      <code class=""literal"">
       D
      </code>
      . (
      <code class=""literal"">
       D
      </code>
      is the default for new vectors and as such is not displayed on output.) These labels are retained when vectors are concatenated, allowing words from different parts of a document to be weighted differently by ranking functions.
     </p>
     <p>
      Note that weight labels apply to
      <span class=""emphasis"">
       <em>
        positions
       </em>
      </span>
      , not
      <span class=""emphasis"">
       <em>
        lexemes
       </em>
      </span>
      . If the input vector has been stripped of positions then
      <code class=""function"">
       setweight
      </code>
      does nothing.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.3.3.3.1.1"" name=""id-1.5.11.7.3.3.3.1.1"">
      </a>
      <code class=""literal"">
       length(
       <em class=""replaceable"">
        <code>
         vector
        </code>
       </em>
       <code class=""type"">
        tsvector
       </code>
       ) returns
       <code class=""type"">
        integer
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the number of lexemes stored in the vector.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.3.3.4.1.1"" name=""id-1.5.11.7.3.3.4.1.1"">
      </a>
      <code class=""literal"">
       strip(
       <em class=""replaceable"">
        <code>
         vector
        </code>
       </em>
       <code class=""type"">
        tsvector
       </code>
       ) returns
       <code class=""type"">
        tsvector
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns a vector that lists the same lexemes as the given vector, but lacks any position or weight information. The result is usually much smaller than an unstripped vector, but it is also less useful. Relevance ranking does not work as well on stripped vectors as unstripped ones. Also, the
      <code class=""literal"">
       &lt;-&gt;
      </code>
      (FOLLOWED BY)
      <code class=""type"">
       tsquery
      </code>
      operator will never match stripped input, since it cannot determine the distance between lexeme occurrences.
     </p>
    </dd>
   </dl>
  </div>
  <p>
   A full list of
   <code class=""type"">
    tsvector
   </code>
   -related functions is available in
   <a class=""xref"" href=""functions-textsearch.html#TEXTSEARCH-FUNCTIONS-TABLE"" title=""Table 9.43. Text Search Functions"">
    Table 9.43
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-MANIPULATE-TSQUERY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.4.2. Manipulating Queries
      <a class=""id_link"" href=""#TEXTSEARCH-MANIPULATE-TSQUERY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"" title=""12.3.2. Parsing Queries"">
    Section 12.3.2
   </a>
   showed how raw textual queries can be converted into
   <code class=""type"">
    tsquery
   </code>
   values.
   <span class=""productname"">
    PostgreSQL
   </span>
   also provides functions and operators that can be used to manipulate queries that are already in
   <code class=""type"">
    tsquery
   </code>
   form.
  </p>
  <div class=""variablelist"">
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <code class=""literal"">
       <code class=""type"">
        tsquery
       </code>
       &amp;&amp;
       <code class=""type"">
        tsquery
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the AND-combination of the two given queries.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       <code class=""type"">
        tsquery
       </code>
       ||
       <code class=""type"">
        tsquery
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the OR-combination of the two given queries.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       !!
       <code class=""type"">
        tsquery
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the negation (NOT) of the given query.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       <code class=""type"">
        tsquery
       </code>
       &lt;-&gt;
       <code class=""type"">
        tsquery
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns a query that searches for a match to the first given query immediately followed by a match to the second given query, using the
      <code class=""literal"">
       &lt;-&gt;
      </code>
      (FOLLOWED BY)
      <code class=""type"">
       tsquery
      </code>
      operator. For example:
     </p>
     <pre class=""screen"">
SELECT to_tsquery('fat') &lt;-&gt; to_tsquery('cat | rat');
          ?column?
----------------------------
 'fat' &lt;-&gt; ( 'cat' | 'rat' )
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.4.3.5.1.1"" name=""id-1.5.11.7.4.3.5.1.1"">
      </a>
      <code class=""literal"">
       tsquery_phrase(
       <em class=""replaceable"">
        <code>
         query1
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       ,
       <em class=""replaceable"">
        <code>
         query2
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       [,
       <em class=""replaceable"">
        <code>
         distance
        </code>
       </em>
       <code class=""type"">
        integer
       </code>
       ]) returns
       <code class=""type"">
        tsquery
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns a query that searches for a match to the first given query followed by a match to the second given query at a distance of exactly
      <em class=""replaceable"">
       <code>
        distance
       </code>
      </em>
      lexemes, using the
      <code class=""literal"">
       &lt;
       <em class=""replaceable"">
        <code>
         N
        </code>
       </em>
       &gt;
      </code>
      <code class=""type"">
       tsquery
      </code>
      operator. For example:
     </p>
     <pre class=""screen"">
SELECT tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10);
  tsquery_phrase
------------------
 'fat' &lt;10&gt; 'cat'
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.4.3.6.1.1"" name=""id-1.5.11.7.4.3.6.1.1"">
      </a>
      <code class=""literal"">
       numnode(
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       ) returns
       <code class=""type"">
        integer
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the number of nodes (lexemes plus operators) in a
      <code class=""type"">
       tsquery
      </code>
      . This function is useful to determine if the
      <em class=""replaceable"">
       <code>
        query
       </code>
      </em>
      is meaningful (returns &gt; 0), or contains only stop words (returns 0). Examples:
     </p>
     <pre class=""screen"">
SELECT numnode(plainto_tsquery('the any'));
NOTICE:  query contains only stopword(s) or doesn't contain lexeme(s), ignored
 numnode
---------
       0

SELECT numnode('foo &amp; bar'::tsquery);
 numnode
---------
       3
</pre>
    </dd>
    <dt>
     <span class=""term"">
      <a class=""indexterm"" id=""id-1.5.11.7.4.3.7.1.1"" name=""id-1.5.11.7.4.3.7.1.1"">
      </a>
      <code class=""literal"">
       querytree(
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       <code class=""type"">
        tsquery
       </code>
       ) returns
       <code class=""type"">
        text
       </code>
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Returns the portion of a
      <code class=""type"">
       tsquery
      </code>
      that can be used for searching an index. This function is useful for detecting unindexable queries, for example those containing only stop words or only negated terms. For example:
     </p>
     <pre class=""screen"">
SELECT querytree(to_tsquery('defined'));
 querytree
-----------
 'defin'

SELECT querytree(to_tsquery('!defined'));
 querytree
-----------
 T
</pre>
    </dd>
   </dl>
  </div>
  <div class=""sect3"" id=""TEXTSEARCH-QUERY-REWRITING"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       12.4.2.1. Query Rewriting
       <a class=""id_link"" href=""#TEXTSEARCH-QUERY-REWRITING"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <a class=""indexterm"" id=""id-1.5.11.7.4.4.2"" name=""id-1.5.11.7.4.4.2"">
   </a>
   <p>
    The
    <code class=""function"">
     ts_rewrite
    </code>
    family of functions search a given
    <code class=""type"">
     tsquery
    </code>
    for occurrences of a target subquery, and replace each occurrence with a substitute subquery. In essence this operation is a
    <code class=""type"">
     tsquery
    </code>
    -specific version of substring replacement. A target and substitute combination can be thought of as a
    <em class=""firstterm"">
     query rewrite rule
    </em>
    . A collection of such rewrite rules can be a powerful search aid. For example, you can expand the search using synonyms (e.g.,
    <code class=""literal"">
     new york
    </code>
    ,
    <code class=""literal"">
     big apple
    </code>
    ,
    <code class=""literal"">
     nyc
    </code>
    ,
    <code class=""literal"">
     gotham
    </code>
    ) or narrow the search to direct the user to some hot topic. There is some overlap in functionality between this feature and thesaurus dictionaries (
    <a class=""xref"" href=""textsearch-dictionaries.html#TEXTSEARCH-THESAURUS"" title=""12.6.4. Thesaurus Dictionary"">
     Section 12.6.4
    </a>
    ). However, you can modify a set of rewrite rules on-the-fly without reindexing, whereas updating a thesaurus requires reindexing to be effective.
   </p>
   <div class=""variablelist"">
    <dl class=""variablelist"">
     <dt>
      <span class=""term"">
       <code class=""literal"">
        ts_rewrite (
        <em class=""replaceable"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""replaceable"">
         <code>
          target
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""replaceable"">
         <code>
          substitute
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ) returns
        <code class=""type"">
         tsquery
        </code>
       </code>
      </span>
     </dt>
     <dd>
      <p>
       This form of
       <code class=""function"">
        ts_rewrite
       </code>
       simply applies a single rewrite rule:
       <em class=""replaceable"">
        <code>
         target
        </code>
       </em>
       is replaced by
       <em class=""replaceable"">
        <code>
         substitute
        </code>
       </em>
       wherever it appears in
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       . For example:
      </p>
      <pre class=""screen"">
SELECT ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'c'::tsquery);
 ts_rewrite
------------
 'b' &amp; 'c'
</pre>
     </dd>
     <dt>
      <span class=""term"">
       <code class=""literal"">
        ts_rewrite (
        <em class=""replaceable"">
         <code>
          query
         </code>
        </em>
        <code class=""type"">
         tsquery
        </code>
        ,
        <em class=""replaceable"">
         <code>
          select
         </code>
        </em>
        <code class=""type"">
         text
        </code>
        ) returns
        <code class=""type"">
         tsquery
        </code>
       </code>
      </span>
     </dt>
     <dd>
      <p>
       This form of
       <code class=""function"">
        ts_rewrite
       </code>
       accepts a starting
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       and an SQL
       <em class=""replaceable"">
        <code>
         select
        </code>
       </em>
       command, which is given as a text string. The
       <em class=""replaceable"">
        <code>
         select
        </code>
       </em>
       must yield two columns of
       <code class=""type"">
        tsquery
       </code>
       type. For each row of the
       <em class=""replaceable"">
        <code>
         select
        </code>
       </em>
       result, occurrences of the first column value (the target) are replaced by the second column value (the substitute) within the current
       <em class=""replaceable"">
        <code>
         query
        </code>
       </em>
       value. For example:
      </p>
      <pre class=""screen"">
CREATE TABLE aliases (t tsquery PRIMARY KEY, s tsquery);
INSERT INTO aliases VALUES('a', 'c');

SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases');
 ts_rewrite
------------
 'b' &amp; 'c'
</pre>
      <p>
       Note that when multiple rewrite rules are applied in this way, the order of application can be important; so in practice you will want the source query to
       <code class=""literal"">
        ORDER BY
       </code>
       some ordering key.
      </p>
     </dd>
    </dl>
   </div>
   <p>
    Let's consider a real-life astronomical example. We'll expand query
    <code class=""literal"">
     supernovae
    </code>
    using table-driven rewriting rules:
   </p>
   <pre class=""screen"">
CREATE TABLE aliases (t tsquery primary key, s tsquery);
INSERT INTO aliases VALUES(to_tsquery('supernovae'), to_tsquery('supernovae|sn'));

SELECT ts_rewrite(to_tsquery('supernovae &amp; crab'), 'SELECT * FROM aliases');
           ts_rewrite
---------------------------------
 'crab' &amp; ( 'supernova' | 'sn' )
</pre>
   <p>
    We can change the rewriting rules just by updating the table:
   </p>
   <pre class=""screen"">
UPDATE aliases
SET s = to_tsquery('supernovae|sn &amp; !nebulae')
WHERE t = to_tsquery('supernovae');

SELECT ts_rewrite(to_tsquery('supernovae &amp; crab'), 'SELECT * FROM aliases');
                 ts_rewrite
---------------------------------------------
 'crab' &amp; ( 'supernova' | 'sn' &amp; !'nebula' )
</pre>
   <p>
    Rewriting can be slow when there are many rewriting rules, since it checks every rule for a possible match. To filter out obvious non-candidate rules we can use the containment operators for the
    <code class=""type"">
     tsquery
    </code>
    type. In the example below, we select only those rules which might match the original query:
   </p>
   <pre class=""screen"">
SELECT ts_rewrite('a &amp; b'::tsquery,
                  'SELECT t,s FROM aliases WHERE ''a &amp; b''::tsquery @&gt; t');
 ts_rewrite
------------
 'b' &amp; 'c'
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-UPDATE-TRIGGERS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.4.3. Triggers for Automatic Updates
      <a class=""id_link"" href=""#TEXTSEARCH-UPDATE-TRIGGERS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.11.7.5.2"" name=""id-1.5.11.7.5.2"">
  </a>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The method described in this section has been obsoleted by the use of stored generated columns, as described in
    <a class=""xref"" href=""textsearch-tables.html#TEXTSEARCH-TABLES-INDEX"" title=""12.2.2. Creating Indexes"">
     Section 12.2.2
    </a>
    .
   </p>
  </div>
  <p>
   When using a separate column to store the
   <code class=""type"">
    tsvector
   </code>
   representation of your documents, it is necessary to create a trigger to update the
   <code class=""type"">
    tsvector
   </code>
   column when the document content columns change. Two built-in trigger functions are available for this, or you can write your own.
  </p>
  <pre class=""synopsis"">
tsvector_update_trigger(<em class=""replaceable""><code>tsvector_column_name</code></em>,​ <em class=""replaceable""><code>config_name</code></em>, <em class=""replaceable""><code>text_column_name</code></em> [<span class=""optional"">, ... </span>])
tsvector_update_trigger_column(<em class=""replaceable""><code>tsvector_column_name</code></em>,​ <em class=""replaceable""><code>config_column_name</code></em>, <em class=""replaceable""><code>text_column_name</code></em> [<span class=""optional"">, ... </span>])
</pre>
  <p>
   These trigger functions automatically compute a
   <code class=""type"">
    tsvector
   </code>
   column from one or more textual columns, under the control of parameters specified in the
   <code class=""command"">
    CREATE TRIGGER
   </code>
   command. An example of their use is:
  </p>
  <pre class=""screen"">
CREATE TABLE messages (
    title       text,
    body        text,
    tsv         tsvector
);

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
ON messages FOR EACH ROW EXECUTE FUNCTION
tsvector_update_trigger(tsv, 'pg_catalog.english', title, body);

INSERT INTO messages VALUES('title here', 'the body text is here');

SELECT * FROM messages;
   title    |         body          |            tsv
------------+-----------------------+----------------------------
 title here | the body text is here | 'bodi':4 'text':5 'titl':1

SELECT title, body FROM messages WHERE tsv @@ to_tsquery('title &amp; body');
   title    |         body
------------+-----------------------
 title here | the body text is here
</pre>
  <p>
   Having created this trigger, any change in
   <code class=""structfield"">
    title
   </code>
   or
   <code class=""structfield"">
    body
   </code>
   will automatically be reflected into
   <code class=""structfield"">
    tsv
   </code>
   , without the application having to worry about it.
  </p>
  <p>
   The first trigger argument must be the name of the
   <code class=""type"">
    tsvector
   </code>
   column to be updated. The second argument specifies the text search configuration to be used to perform the conversion. For
   <code class=""function"">
    tsvector_update_trigger
   </code>
   , the configuration name is simply given as the second trigger argument. It must be schema-qualified as shown above, so that the trigger behavior will not change with changes in
   <code class=""varname"">
    search_path
   </code>
   . For
   <code class=""function"">
    tsvector_update_trigger_column
   </code>
   , the second trigger argument is the name of another table column, which must be of type
   <code class=""type"">
    regconfig
   </code>
   . This allows a per-row selection of configuration to be made. The remaining argument(s) are the names of textual columns (of type
   <code class=""type"">
    text
   </code>
   ,
   <code class=""type"">
    varchar
   </code>
   , or
   <code class=""type"">
    char
   </code>
   ). These will be included in the document in the order given. NULL values will be skipped (but the other columns will still be indexed).
  </p>
  <p>
   A limitation of these built-in triggers is that they treat all the input columns alike. To process columns differently — for example, to weight title differently from body — it is necessary to write a custom trigger. Here is an example using
   <span class=""application"">
    PL/pgSQL
   </span>
   as the trigger language:
  </p>
  <pre class=""programlisting"">
CREATE FUNCTION messages_trigger() RETURNS trigger AS $$
begin
  new.tsv :=
     setweight(to_tsvector('pg_catalog.english', coalesce(new.title,'')), 'A') ||
     setweight(to_tsvector('pg_catalog.english', coalesce(new.body,'')), 'D');
  return new;
end
$$ LANGUAGE plpgsql;

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE
    ON messages FOR EACH ROW EXECUTE FUNCTION messages_trigger();
</pre>
  <p>
   Keep in mind that it is important to specify the configuration name explicitly when creating
   <code class=""type"">
    tsvector
   </code>
   values inside triggers, so that the column's contents will not be affected by changes to
   <code class=""varname"">
    default_text_search_config
   </code>
   . Failure to do this is likely to lead to problems such as search results changing after a dump and restore.
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-STATISTICS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.4.4. Gathering Document Statistics
      <a class=""id_link"" href=""#TEXTSEARCH-STATISTICS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.11.7.6.2"" name=""id-1.5.11.7.6.2"">
  </a>
  <p>
   The function
   <code class=""function"">
    ts_stat
   </code>
   is useful for checking your configuration and for finding stop-word candidates.
  </p>
  <pre class=""synopsis"">
ts_stat(<em class=""replaceable""><code>sqlquery</code></em> <code class=""type"">text</code>, [<span class=""optional""> <em class=""replaceable""><code>weights</code></em> <code class=""type"">text</code>, </span>]
        OUT <em class=""replaceable""><code>word</code></em> <code class=""type"">text</code>, OUT <em class=""replaceable""><code>ndoc</code></em> <code class=""type"">integer</code>,
        OUT <em class=""replaceable""><code>nentry</code></em> <code class=""type"">integer</code>) returns <code class=""type"">setof record</code>
</pre>
  <p>
   <em class=""replaceable"">
    <code>
     sqlquery
    </code>
   </em>
   is a text value containing an SQL query which must return a single
   <code class=""type"">
    tsvector
   </code>
   column.
   <code class=""function"">
    ts_stat
   </code>
   executes the query and returns statistics about each distinct lexeme (word) contained in the
   <code class=""type"">
    tsvector
   </code>
   data. The columns returned are
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        word
       </code>
      </em>
      <code class=""type"">
       text
      </code>
      — the value of a lexeme
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        ndoc
       </code>
      </em>
      <code class=""type"">
       integer
      </code>
      — number of documents (
      <code class=""type"">
       tsvector
      </code>
      s) the word occurred in
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        nentry
       </code>
      </em>
      <code class=""type"">
       integer
      </code>
      — total number of occurrences of the word
     </p>
    </li>
   </ul>
  </div>
  <p>
   If
   <em class=""replaceable"">
    <code>
     weights
    </code>
   </em>
   is supplied, only occurrences having one of those weights are counted.
  </p>
  <p>
   For example, to find the ten most frequent words in a document collection:
  </p>
  <pre class=""programlisting"">
SELECT * FROM ts_stat('SELECT vector FROM apod')
ORDER BY nentry DESC, ndoc DESC, word
LIMIT 10;
</pre>
  <p>
   The same, but counting only word occurrences with weight
   <code class=""literal"">
    A
   </code>
   or
   <code class=""literal"">
    B
   </code>
   :
  </p>
  <pre class=""programlisting"">
SELECT * FROM ts_stat('SELECT vector FROM apod', 'ab')
ORDER BY nentry DESC, ndoc DESC, word
LIMIT 10;
</pre>
 </div>
</div>
"
12. Full Text Search,12.5. Parsers,https://www.postgresql.org/docs/17/textsearch-parsers.html,"<div class=""sect1"" id=""TEXTSEARCH-PARSERS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.5. Parsers
     <a class=""id_link"" href=""#TEXTSEARCH-PARSERS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Text search parsers are responsible for splitting raw document text into
  <em class=""firstterm"">
   tokens
  </em>
  and identifying each token's type, where the set of possible types is defined by the parser itself. Note that a parser does not modify the text at all — it simply identifies plausible word boundaries. Because of this limited scope, there is less need for application-specific custom parsers than there is for custom dictionaries. At present
  <span class=""productname"">
   PostgreSQL
  </span>
  provides just one built-in parser, which has been found to be useful for a wide range of applications.
 </p>
 <p>
  The built-in parser is named
  <code class=""literal"">
   pg_catalog.default
  </code>
  . It recognizes 23 token types, shown in
  <a class=""xref"" href=""textsearch-parsers.html#TEXTSEARCH-DEFAULT-PARSER"" title=""Table 12.1. Default Parser's Token Types"">
   Table 12.1
  </a>
  .
 </p>
 <div class=""table"" id=""TEXTSEARCH-DEFAULT-PARSER"">
  <p class=""title"">
   <strong>
    Table 12.1. Default Parser's Token Types
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Default Parser's Token Types"">
    <colgroup>
     <col class=""col1""/>
     <col class=""col2""/>
     <col class=""col3""/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Alias
      </th>
      <th>
       Description
      </th>
      <th>
       Example
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       <code class=""literal"">
        asciiword
       </code>
      </td>
      <td>
       Word, all ASCII letters
      </td>
      <td>
       <code class=""literal"">
        elephant
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        word
       </code>
      </td>
      <td>
       Word, all letters
      </td>
      <td>
       <code class=""literal"">
        mañana
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        numword
       </code>
      </td>
      <td>
       Word, letters and digits
      </td>
      <td>
       <code class=""literal"">
        beta1
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        asciihword
       </code>
      </td>
      <td>
       Hyphenated word, all ASCII
      </td>
      <td>
       <code class=""literal"">
        up-to-date
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        hword
       </code>
      </td>
      <td>
       Hyphenated word, all letters
      </td>
      <td>
       <code class=""literal"">
        lógico-matemática
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        numhword
       </code>
      </td>
      <td>
       Hyphenated word, letters and digits
      </td>
      <td>
       <code class=""literal"">
        postgresql-beta1
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        hword_asciipart
       </code>
      </td>
      <td>
       Hyphenated word part, all ASCII
      </td>
      <td>
       <code class=""literal"">
        postgresql
       </code>
       in the context
       <code class=""literal"">
        postgresql-beta1
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        hword_part
       </code>
      </td>
      <td>
       Hyphenated word part, all letters
      </td>
      <td>
       <code class=""literal"">
        lógico
       </code>
       or
       <code class=""literal"">
        matemática
       </code>
       in the context
       <code class=""literal"">
        lógico-matemática
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        hword_numpart
       </code>
      </td>
      <td>
       Hyphenated word part, letters and digits
      </td>
      <td>
       <code class=""literal"">
        beta1
       </code>
       in the context
       <code class=""literal"">
        postgresql-beta1
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        email
       </code>
      </td>
      <td>
       Email address
      </td>
      <td>
       <code class=""literal"">
        foo@example.com
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        protocol
       </code>
      </td>
      <td>
       Protocol head
      </td>
      <td>
       <code class=""literal"">
        http://
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        url
       </code>
      </td>
      <td>
       URL
      </td>
      <td>
       <code class=""literal"">
        example.com/stuff/index.html
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        host
       </code>
      </td>
      <td>
       Host
      </td>
      <td>
       <code class=""literal"">
        example.com
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        url_path
       </code>
      </td>
      <td>
       URL path
      </td>
      <td>
       <code class=""literal"">
        /stuff/index.html
       </code>
       , in the context of a URL
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        file
       </code>
      </td>
      <td>
       File or path name
      </td>
      <td>
       <code class=""literal"">
        /usr/local/foo.txt
       </code>
       , if not within a URL
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        sfloat
       </code>
      </td>
      <td>
       Scientific notation
      </td>
      <td>
       <code class=""literal"">
        -1.234e56
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        float
       </code>
      </td>
      <td>
       Decimal notation
      </td>
      <td>
       <code class=""literal"">
        -1.234
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        int
       </code>
      </td>
      <td>
       Signed integer
      </td>
      <td>
       <code class=""literal"">
        -1234
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        uint
       </code>
      </td>
      <td>
       Unsigned integer
      </td>
      <td>
       <code class=""literal"">
        1234
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        version
       </code>
      </td>
      <td>
       Version number
      </td>
      <td>
       <code class=""literal"">
        8.3.0
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        tag
       </code>
      </td>
      <td>
       XML tag
      </td>
      <td>
       <code class=""literal"">
        &lt;a href=""dictionaries.html""&gt;
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        entity
       </code>
      </td>
      <td>
       XML entity
      </td>
      <td>
       <code class=""literal"">
        &amp;amp;
       </code>
      </td>
     </tr>
     <tr>
      <td>
       <code class=""literal"">
        blank
       </code>
      </td>
      <td>
       Space symbols
      </td>
      <td>
       (any whitespace or punctuation not otherwise recognized)
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <div class=""note"">
  <h3 class=""title"">
   Note
  </h3>
  <p>
   The parser's notion of a
   <span class=""quote"">
    “
    <span class=""quote"">
     letter
    </span>
    ”
   </span>
   is determined by the database's locale setting, specifically
   <code class=""varname"">
    lc_ctype
   </code>
   . Words containing only the basic ASCII letters are reported as a separate token type, since it is sometimes useful to distinguish them. In most European languages, token types
   <code class=""literal"">
    word
   </code>
   and
   <code class=""literal"">
    asciiword
   </code>
   should be treated alike.
  </p>
  <p>
   <code class=""literal"">
    email
   </code>
   does not support all valid email characters as defined by
   <a class=""ulink"" href=""https://datatracker.ietf.org/doc/html/rfc5322"" target=""_top"">
    RFC 5322
   </a>
   . Specifically, the only non-alphanumeric characters supported for email user names are period, dash, and underscore.
  </p>
 </div>
 <p>
  It is possible for the parser to produce overlapping tokens from the same piece of text. As an example, a hyphenated word will be reported both as the entire word and as each component:
 </p>
 <pre class=""screen"">
SELECT alias, description, token FROM ts_debug('foo-bar-beta1');
      alias      |               description                |     token
-----------------+------------------------------------------+---------------
 numhword        | Hyphenated word, letters and digits      | foo-bar-beta1
 hword_asciipart | Hyphenated word part, all ASCII          | foo
 blank           | Space symbols                            | -
 hword_asciipart | Hyphenated word part, all ASCII          | bar
 blank           | Space symbols                            | -
 hword_numpart   | Hyphenated word part, letters and digits | beta1
</pre>
 <p>
  This behavior is desirable since it allows searches to work for both the whole compound word and for components. Here is another instructive example:
 </p>
 <pre class=""screen"">
SELECT alias, description, token FROM ts_debug('http://example.com/stuff/index.html');
  alias   |  description  |            token
----------+---------------+------------------------------
 protocol | Protocol head | http://
 url      | URL           | example.com/stuff/index.html
 host     | Host          | example.com
 url_path | URL path      | /stuff/index.html
</pre>
</div>
"
12. Full Text Search,12.6. Dictionaries,https://www.postgresql.org/docs/17/textsearch-dictionaries.html,"<div class=""sect1"" id=""TEXTSEARCH-DICTIONARIES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.6. Dictionaries
     <a class=""id_link"" href=""#TEXTSEARCH-DICTIONARIES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-STOPWORDS"">
      12.6.1. Stop Words
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-SIMPLE-DICTIONARY"">
      12.6.2. Simple Dictionary
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-SYNONYM-DICTIONARY"">
      12.6.3. Synonym Dictionary
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-THESAURUS"">
      12.6.4. Thesaurus Dictionary
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-ISPELL-DICTIONARY"">
      12.6.5.
      <span class=""application"">
       Ispell
      </span>
      Dictionary
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-dictionaries.html#TEXTSEARCH-SNOWBALL-DICTIONARY"">
      12.6.6.
      <span class=""application"">
       Snowball
      </span>
      Dictionary
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  Dictionaries are used to eliminate words that should not be considered in a search (
  <em class=""firstterm"">
   stop words
  </em>
  ), and to
  <em class=""firstterm"">
   normalize
  </em>
  words so that different derived forms of the same word will match. A successfully normalized word is called a
  <em class=""firstterm"">
   lexeme
  </em>
  . Aside from improving search quality, normalization and removal of stop words reduce the size of the
  <code class=""type"">
   tsvector
  </code>
  representation of a document, thereby improving performance. Normalization does not always have linguistic meaning and usually depends on application semantics.
 </p>
 <p>
  Some examples of normalization:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Linguistic — Ispell dictionaries try to reduce input words to a normalized form; stemmer dictionaries remove word endings
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     <acronym class=""acronym"">
      URL
     </acronym>
     locations can be canonicalized to make equivalent URLs match:
    </p>
    <div class=""itemizedlist"">
     <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
      <li class=""listitem"" style=""list-style-type: disc"">
       <p>
        http://www.pgsql.ru/db/mw/index.html
       </p>
      </li>
      <li class=""listitem"" style=""list-style-type: disc"">
       <p>
        http://www.pgsql.ru/db/mw/
       </p>
      </li>
      <li class=""listitem"" style=""list-style-type: disc"">
       <p>
        http://www.pgsql.ru/db/../db/mw/index.html
       </p>
      </li>
     </ul>
    </div>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Color names can be replaced by their hexadecimal values, e.g.,
     <code class=""literal"">
      red, green, blue, magenta -&gt; FF0000, 00FF00, 0000FF, FF00FF
     </code>
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     If indexing numbers, we can remove some fractional digits to reduce the range of possible numbers, so for example
     <span class=""emphasis"">
      <em>
       3.14
      </em>
     </span>
     159265359,
     <span class=""emphasis"">
      <em>
       3.14
      </em>
     </span>
     15926,
     <span class=""emphasis"">
      <em>
       3.14
      </em>
     </span>
     will be the same after normalization if only two digits are kept after the decimal point.
    </p>
   </li>
  </ul>
 </div>
 <p>
  A dictionary is a program that accepts a token as input and returns:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     an array of lexemes if the input token is known to the dictionary (notice that one token can produce more than one lexeme)
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     a single lexeme with the
     <code class=""literal"">
      TSL_FILTER
     </code>
     flag set, to replace the original token with a new token to be passed to subsequent dictionaries (a dictionary that does this is called a
     <em class=""firstterm"">
      filtering dictionary
     </em>
     )
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     an empty array if the dictionary knows the token, but it is a stop word
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     <code class=""literal"">
      NULL
     </code>
     if the dictionary does not recognize the input token
    </p>
   </li>
  </ul>
 </div>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides predefined dictionaries for many languages. There are also several predefined templates that can be used to create new dictionaries with custom parameters. Each predefined dictionary template is described below. If no existing template is suitable, it is possible to create new ones; see the
  <code class=""filename"">
   contrib/
  </code>
  area of the
  <span class=""productname"">
   PostgreSQL
  </span>
  distribution for examples.
 </p>
 <p>
  A text search configuration binds a parser together with a set of dictionaries to process the parser's output tokens. For each token type that the parser can return, a separate list of dictionaries is specified by the configuration. When a token of that type is found by the parser, each dictionary in the list is consulted in turn, until some dictionary recognizes it as a known word. If it is identified as a stop word, or if no dictionary recognizes the token, it will be discarded and not indexed or searched for. Normally, the first dictionary that returns a non-
  <code class=""literal"">
   NULL
  </code>
  output determines the result, and any remaining dictionaries are not consulted; but a filtering dictionary can replace the given word with a modified word, which is then passed to subsequent dictionaries.
 </p>
 <p>
  The general rule for configuring a list of dictionaries is to place first the most narrow, most specific dictionary, then the more general dictionaries, finishing with a very general dictionary, like a
  <span class=""application"">
   Snowball
  </span>
  stemmer or
  <code class=""literal"">
   simple
  </code>
  , which recognizes everything. For example, for an astronomy-specific search (
  <code class=""literal"">
   astro_en
  </code>
  configuration) one could bind token type
  <code class=""type"">
   asciiword
  </code>
  (ASCII word) to a synonym dictionary of astronomical terms, a general English dictionary and a
  <span class=""application"">
   Snowball
  </span>
  English stemmer:
 </p>
 <pre class=""programlisting"">
ALTER TEXT SEARCH CONFIGURATION astro_en
    ADD MAPPING FOR asciiword WITH astrosyn, english_ispell, english_stem;
</pre>
 <p>
  A filtering dictionary can be placed anywhere in the list, except at the end where it'd be useless. Filtering dictionaries are useful to partially normalize words to simplify the task of later dictionaries. For example, a filtering dictionary could be used to remove accents from accented letters, as is done by the
  <a class=""xref"" href=""unaccent.html"" title=""F.46. unaccent — a text search dictionary which removes diacritics"">
   unaccent
  </a>
  module.
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-STOPWORDS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.1. Stop Words
      <a class=""id_link"" href=""#TEXTSEARCH-STOPWORDS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Stop words are words that are very common, appear in almost every document, and have no discrimination value. Therefore, they can be ignored in the context of full text searching. For example, every English text contains words like
   <code class=""literal"">
    a
   </code>
   and
   <code class=""literal"">
    the
   </code>
   , so it is useless to store them in an index. However, stop words do affect the positions in
   <code class=""type"">
    tsvector
   </code>
   , which in turn affect ranking:
  </p>
  <pre class=""screen"">
SELECT to_tsvector('english', 'in the list of stop words');
        to_tsvector
----------------------------
 'list':3 'stop':5 'word':6
</pre>
  <p>
   The missing positions 1,2,4 are because of stop words. Ranks calculated for documents with and without stop words are quite different:
  </p>
  <pre class=""screen"">
SELECT ts_rank_cd (to_tsvector('english', 'in the list of stop words'), to_tsquery('list &amp; stop'));
 ts_rank_cd
------------
       0.05

SELECT ts_rank_cd (to_tsvector('english', 'list stop words'), to_tsquery('list &amp; stop'));
 ts_rank_cd
------------
        0.1
</pre>
  <p>
   It is up to the specific dictionary how it treats stop words. For example,
   <code class=""literal"">
    ispell
   </code>
   dictionaries first normalize words and then look at the list of stop words, while
   <code class=""literal"">
    Snowball
   </code>
   stemmers first check the list of stop words. The reason for the different behavior is an attempt to decrease noise.
  </p>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-SIMPLE-DICTIONARY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.2. Simple Dictionary
      <a class=""id_link"" href=""#TEXTSEARCH-SIMPLE-DICTIONARY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <code class=""literal"">
    simple
   </code>
   dictionary template operates by converting the input token to lower case and checking it against a file of stop words. If it is found in the file then an empty array is returned, causing the token to be discarded. If not, the lower-cased form of the word is returned as the normalized lexeme. Alternatively, the dictionary can be configured to report non-stop-words as unrecognized, allowing them to be passed on to the next dictionary in the list.
  </p>
  <p>
   Here is an example of a dictionary definition using the
   <code class=""literal"">
    simple
   </code>
   template:
  </p>
  <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY public.simple_dict (
    TEMPLATE = pg_catalog.simple,
    STOPWORDS = english
);
</pre>
  <p>
   Here,
   <code class=""literal"">
    english
   </code>
   is the base name of a file of stop words. The file's full name will be
   <code class=""filename"">
    $SHAREDIR/tsearch_data/english.stop
   </code>
   , where
   <code class=""literal"">
    $SHAREDIR
   </code>
   means the
   <span class=""productname"">
    PostgreSQL
   </span>
   installation's shared-data directory, often
   <code class=""filename"">
    /usr/local/share/postgresql
   </code>
   (use
   <code class=""command"">
    pg_config --sharedir
   </code>
   to determine it if you're not sure). The file format is simply a list of words, one per line. Blank lines and trailing spaces are ignored, and upper case is folded to lower case, but no other processing is done on the file contents.
  </p>
  <p>
   Now we can test our dictionary:
  </p>
  <pre class=""screen"">
SELECT ts_lexize('public.simple_dict', 'YeS');
 ts_lexize
-----------
 {yes}

SELECT ts_lexize('public.simple_dict', 'The');
 ts_lexize
-----------
 {}
</pre>
  <p>
   We can also choose to return
   <code class=""literal"">
    NULL
   </code>
   , instead of the lower-cased word, if it is not found in the stop words file. This behavior is selected by setting the dictionary's
   <code class=""literal"">
    Accept
   </code>
   parameter to
   <code class=""literal"">
    false
   </code>
   . Continuing the example:
  </p>
  <pre class=""screen"">
ALTER TEXT SEARCH DICTIONARY public.simple_dict ( Accept = false );

SELECT ts_lexize('public.simple_dict', 'YeS');
 ts_lexize
-----------


SELECT ts_lexize('public.simple_dict', 'The');
 ts_lexize
-----------
 {}
</pre>
  <p>
   With the default setting of
   <code class=""literal"">
    Accept
   </code>
   =
   <code class=""literal"">
    true
   </code>
   , it is only useful to place a
   <code class=""literal"">
    simple
   </code>
   dictionary at the end of a list of dictionaries, since it will never pass on any token to a following dictionary. Conversely,
   <code class=""literal"">
    Accept
   </code>
   =
   <code class=""literal"">
    false
   </code>
   is only useful when there is at least one following dictionary.
  </p>
  <div class=""caution"">
   <h3 class=""title"">
    Caution
   </h3>
   <p>
    Most types of dictionaries rely on configuration files, such as files of stop words. These files
    <span class=""emphasis"">
     <em>
      must
     </em>
    </span>
    be stored in UTF-8 encoding. They will be translated to the actual database encoding, if that is different, when they are read into the server.
   </p>
  </div>
  <div class=""caution"">
   <h3 class=""title"">
    Caution
   </h3>
   <p>
    Normally, a database session will read a dictionary configuration file only once, when it is first used within the session. If you modify a configuration file and want to force existing sessions to pick up the new contents, issue an
    <code class=""command"">
     ALTER TEXT SEARCH DICTIONARY
    </code>
    command on the dictionary. This can be a
    <span class=""quote"">
     “
     <span class=""quote"">
      dummy
     </span>
     ”
    </span>
    update that doesn't actually change any parameter values.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-SYNONYM-DICTIONARY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.3. Synonym Dictionary
      <a class=""id_link"" href=""#TEXTSEARCH-SYNONYM-DICTIONARY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   This dictionary template is used to create dictionaries that replace a word with a synonym. Phrases are not supported (use the thesaurus template (
   <a class=""xref"" href=""textsearch-dictionaries.html#TEXTSEARCH-THESAURUS"" title=""12.6.4. Thesaurus Dictionary"">
    Section 12.6.4
   </a>
   ) for that). A synonym dictionary can be used to overcome linguistic problems, for example, to prevent an English stemmer dictionary from reducing the word
   <span class=""quote"">
    “
    <span class=""quote"">
     Paris
    </span>
    ”
   </span>
   to
   <span class=""quote"">
    “
    <span class=""quote"">
     pari
    </span>
    ”
   </span>
   . It is enough to have a
   <code class=""literal"">
    Paris paris
   </code>
   line in the synonym dictionary and put it before the
   <code class=""literal"">
    english_stem
   </code>
   dictionary. For example:
  </p>
  <pre class=""screen"">
SELECT * FROM ts_debug('english', 'Paris');
   alias   |   description   | token |  dictionaries  |  dictionary  | lexemes
-----------+-----------------+-------+----------------+--------------+---------
 asciiword | Word, all ASCII | Paris | {english_stem} | english_stem | {pari}

CREATE TEXT SEARCH DICTIONARY my_synonym (
    TEMPLATE = synonym,
    SYNONYMS = my_synonyms
);

ALTER TEXT SEARCH CONFIGURATION english
    ALTER MAPPING FOR asciiword
    WITH my_synonym, english_stem;

SELECT * FROM ts_debug('english', 'Paris');
   alias   |   description   | token |       dictionaries        | dictionary | lexemes
-----------+-----------------+-------+---------------------------+------------+---------
 asciiword | Word, all ASCII | Paris | {my_synonym,english_stem} | my_synonym | {paris}
</pre>
  <p>
   The only parameter required by the
   <code class=""literal"">
    synonym
   </code>
   template is
   <code class=""literal"">
    SYNONYMS
   </code>
   , which is the base name of its configuration file —
   <code class=""literal"">
    my_synonyms
   </code>
   in the above example. The file's full name will be
   <code class=""filename"">
    $SHAREDIR/tsearch_data/my_synonyms.syn
   </code>
   (where
   <code class=""literal"">
    $SHAREDIR
   </code>
   means the
   <span class=""productname"">
    PostgreSQL
   </span>
   installation's shared-data directory). The file format is just one line per word to be substituted, with the word followed by its synonym, separated by white space. Blank lines and trailing spaces are ignored.
  </p>
  <p>
   The
   <code class=""literal"">
    synonym
   </code>
   template also has an optional parameter
   <code class=""literal"">
    CaseSensitive
   </code>
   , which defaults to
   <code class=""literal"">
    false
   </code>
   . When
   <code class=""literal"">
    CaseSensitive
   </code>
   is
   <code class=""literal"">
    false
   </code>
   , words in the synonym file are folded to lower case, as are input tokens. When it is
   <code class=""literal"">
    true
   </code>
   , words and tokens are not folded to lower case, but are compared as-is.
  </p>
  <p>
   An asterisk (
   <code class=""literal"">
    *
   </code>
   ) can be placed at the end of a synonym in the configuration file. This indicates that the synonym is a prefix. The asterisk is ignored when the entry is used in
   <code class=""function"">
    to_tsvector()
   </code>
   , but when it is used in
   <code class=""function"">
    to_tsquery()
   </code>
   , the result will be a query item with the prefix match marker (see
   <a class=""xref"" href=""textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"" title=""12.3.2. Parsing Queries"">
    Section 12.3.2
   </a>
   ). For example, suppose we have these entries in
   <code class=""filename"">
    $SHAREDIR/tsearch_data/synonym_sample.syn
   </code>
   :
  </p>
  <pre class=""programlisting"">
postgres        pgsql
postgresql      pgsql
postgre pgsql
gogle   googl
indices index*
</pre>
  <p>
   Then we will get these results:
  </p>
  <pre class=""screen"">
mydb=# CREATE TEXT SEARCH DICTIONARY syn (template=synonym, synonyms='synonym_sample');
mydb=# SELECT ts_lexize('syn', 'indices');
 ts_lexize
-----------
 {index}
(1 row)

mydb=# CREATE TEXT SEARCH CONFIGURATION tst (copy=simple);
mydb=# ALTER TEXT SEARCH CONFIGURATION tst ALTER MAPPING FOR asciiword WITH syn;
mydb=# SELECT to_tsvector('tst', 'indices');
 to_tsvector
-------------
 'index':1
(1 row)

mydb=# SELECT to_tsquery('tst', 'indices');
 to_tsquery
------------
 'index':*
(1 row)

mydb=# SELECT 'indexes are very useful'::tsvector;
            tsvector
---------------------------------
 'are' 'indexes' 'useful' 'very'
(1 row)

mydb=# SELECT 'indexes are very useful'::tsvector @@ to_tsquery('tst', 'indices');
 ?column?
----------
 t
(1 row)
</pre>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-THESAURUS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.4. Thesaurus Dictionary
      <a class=""id_link"" href=""#TEXTSEARCH-THESAURUS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   A thesaurus dictionary (sometimes abbreviated as
   <acronym class=""acronym"">
    TZ
   </acronym>
   ) is a collection of words that includes information about the relationships of words and phrases, i.e., broader terms (
   <acronym class=""acronym"">
    BT
   </acronym>
   ), narrower terms (
   <acronym class=""acronym"">
    NT
   </acronym>
   ), preferred terms, non-preferred terms, related terms, etc.
  </p>
  <p>
   Basically a thesaurus dictionary replaces all non-preferred terms by one preferred term and, optionally, preserves the original terms for indexing as well.
   <span class=""productname"">
    PostgreSQL
   </span>
   's current implementation of the thesaurus dictionary is an extension of the synonym dictionary with added
   <em class=""firstterm"">
    phrase
   </em>
   support. A thesaurus dictionary requires a configuration file of the following format:
  </p>
  <pre class=""programlisting"">
# this is a comment
sample word(s) : indexed word(s)
more sample word(s) : more indexed word(s)
...
</pre>
  <p>
   where the colon (
   <code class=""symbol"">
    :
   </code>
   ) symbol acts as a delimiter between a phrase and its replacement.
  </p>
  <p>
   A thesaurus dictionary uses a
   <em class=""firstterm"">
    subdictionary
   </em>
   (which is specified in the dictionary's configuration) to normalize the input text before checking for phrase matches. It is only possible to select one subdictionary. An error is reported if the subdictionary fails to recognize a word. In that case, you should remove the use of the word or teach the subdictionary about it. You can place an asterisk (
   <code class=""symbol"">
    *
   </code>
   ) at the beginning of an indexed word to skip applying the subdictionary to it, but all sample words
   <span class=""emphasis"">
    <em>
     must
    </em>
   </span>
   be known to the subdictionary.
  </p>
  <p>
   The thesaurus dictionary chooses the longest match if there are multiple phrases matching the input, and ties are broken by using the last definition.
  </p>
  <p>
   Specific stop words recognized by the subdictionary cannot be specified; instead use
   <code class=""literal"">
    ?
   </code>
   to mark the location where any stop word can appear. For example, assuming that
   <code class=""literal"">
    a
   </code>
   and
   <code class=""literal"">
    the
   </code>
   are stop words according to the subdictionary:
  </p>
  <pre class=""programlisting"">
? one ? two : swsw
</pre>
  <p>
   matches
   <code class=""literal"">
    a one the two
   </code>
   and
   <code class=""literal"">
    the one a two
   </code>
   ; both would be replaced by
   <code class=""literal"">
    swsw
   </code>
   .
  </p>
  <p>
   Since a thesaurus dictionary has the capability to recognize phrases it must remember its state and interact with the parser. A thesaurus dictionary uses these assignments to check if it should handle the next word or stop accumulation. The thesaurus dictionary must be configured carefully. For example, if the thesaurus dictionary is assigned to handle only the
   <code class=""literal"">
    asciiword
   </code>
   token, then a thesaurus dictionary definition like
   <code class=""literal"">
    one 7
   </code>
   will not work since token type
   <code class=""literal"">
    uint
   </code>
   is not assigned to the thesaurus dictionary.
  </p>
  <div class=""caution"">
   <h3 class=""title"">
    Caution
   </h3>
   <p>
    Thesauruses are used during indexing so any change in the thesaurus dictionary's parameters
    <span class=""emphasis"">
     <em>
      requires
     </em>
    </span>
    reindexing. For most other dictionary types, small changes such as adding or removing stopwords does not force reindexing.
   </p>
  </div>
  <div class=""sect3"" id=""TEXTSEARCH-THESAURUS-CONFIG"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       12.6.4.1. Thesaurus Configuration
       <a class=""id_link"" href=""#TEXTSEARCH-THESAURUS-CONFIG"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    To define a new thesaurus dictionary, use the
    <code class=""literal"">
     thesaurus
    </code>
    template. For example:
   </p>
   <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY thesaurus_simple (
    TEMPLATE = thesaurus,
    DictFile = mythesaurus,
    Dictionary = pg_catalog.english_stem
);
</pre>
   <p>
    Here:
   </p>
   <div class=""itemizedlist"">
    <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
     <li class=""listitem"" style=""list-style-type: disc"">
      <p>
       <code class=""literal"">
        thesaurus_simple
       </code>
       is the new dictionary's name
      </p>
     </li>
     <li class=""listitem"" style=""list-style-type: disc"">
      <p>
       <code class=""literal"">
        mythesaurus
       </code>
       is the base name of the thesaurus configuration file. (Its full name will be
       <code class=""filename"">
        $SHAREDIR/tsearch_data/mythesaurus.ths
       </code>
       , where
       <code class=""literal"">
        $SHAREDIR
       </code>
       means the installation shared-data directory.)
      </p>
     </li>
     <li class=""listitem"" style=""list-style-type: disc"">
      <p>
       <code class=""literal"">
        pg_catalog.english_stem
       </code>
       is the subdictionary (here, a Snowball English stemmer) to use for thesaurus normalization. Notice that the subdictionary will have its own configuration (for example, stop words), which is not shown here.
      </p>
     </li>
    </ul>
   </div>
   <p>
    Now it is possible to bind the thesaurus dictionary
    <code class=""literal"">
     thesaurus_simple
    </code>
    to the desired token types in a configuration, for example:
   </p>
   <pre class=""programlisting"">
ALTER TEXT SEARCH CONFIGURATION russian
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart
    WITH thesaurus_simple;
</pre>
  </div>
  <div class=""sect3"" id=""TEXTSEARCH-THESAURUS-EXAMPLES"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       12.6.4.2. Thesaurus Example
       <a class=""id_link"" href=""#TEXTSEARCH-THESAURUS-EXAMPLES"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    Consider a simple astronomical thesaurus
    <code class=""literal"">
     thesaurus_astro
    </code>
    , which contains some astronomical word combinations:
   </p>
   <pre class=""programlisting"">
supernovae stars : sn
crab nebulae : crab
</pre>
   <p>
    Below we create a dictionary and bind some token types to an astronomical thesaurus and English stemmer:
   </p>
   <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY thesaurus_astro (
    TEMPLATE = thesaurus,
    DictFile = thesaurus_astro,
    Dictionary = english_stem
);

ALTER TEXT SEARCH CONFIGURATION russian
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart
    WITH thesaurus_astro, english_stem;
</pre>
   <p>
    Now we can see how it works.
    <code class=""function"">
     ts_lexize
    </code>
    is not very useful for testing a thesaurus, because it treats its input as a single token. Instead we can use
    <code class=""function"">
     plainto_tsquery
    </code>
    and
    <code class=""function"">
     to_tsvector
    </code>
    which will break their input strings into multiple tokens:
   </p>
   <pre class=""screen"">
SELECT plainto_tsquery('supernova star');
 plainto_tsquery
-----------------
 'sn'

SELECT to_tsvector('supernova star');
 to_tsvector
-------------
 'sn':1
</pre>
   <p>
    In principle, one can use
    <code class=""function"">
     to_tsquery
    </code>
    if you quote the argument:
   </p>
   <pre class=""screen"">
SELECT to_tsquery('''supernova star''');
 to_tsquery
------------
 'sn'
</pre>
   <p>
    Notice that
    <code class=""literal"">
     supernova star
    </code>
    matches
    <code class=""literal"">
     supernovae stars
    </code>
    in
    <code class=""literal"">
     thesaurus_astro
    </code>
    because we specified the
    <code class=""literal"">
     english_stem
    </code>
    stemmer in the thesaurus definition. The stemmer removed the
    <code class=""literal"">
     e
    </code>
    and
    <code class=""literal"">
     s
    </code>
    .
   </p>
   <p>
    To index the original phrase as well as the substitute, just include it in the right-hand part of the definition:
   </p>
   <pre class=""screen"">
supernovae stars : sn supernovae stars

SELECT plainto_tsquery('supernova star');
       plainto_tsquery
-----------------------------
 'sn' &amp; 'supernova' &amp; 'star'
</pre>
  </div>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-ISPELL-DICTIONARY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.5.
      <span class=""application"">
       Ispell
      </span>
      Dictionary
      <a class=""id_link"" href=""#TEXTSEARCH-ISPELL-DICTIONARY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <span class=""application"">
    Ispell
   </span>
   dictionary template supports
   <em class=""firstterm"">
    morphological dictionaries
   </em>
   , which can normalize many different linguistic forms of a word into the same lexeme. For example, an English
   <span class=""application"">
    Ispell
   </span>
   dictionary can match all declensions and conjugations of the search term
   <code class=""literal"">
    bank
   </code>
   , e.g.,
   <code class=""literal"">
    banking
   </code>
   ,
   <code class=""literal"">
    banked
   </code>
   ,
   <code class=""literal"">
    banks
   </code>
   ,
   <code class=""literal"">
    banks'
   </code>
   , and
   <code class=""literal"">
    bank's
   </code>
   .
  </p>
  <p>
   The standard
   <span class=""productname"">
    PostgreSQL
   </span>
   distribution does not include any
   <span class=""application"">
    Ispell
   </span>
   configuration files. Dictionaries for a large number of languages are available from
   <a class=""ulink"" href=""https://www.cs.hmc.edu/~geoff/ispell.html"" target=""_top"">
    Ispell
   </a>
   . Also, some more modern dictionary file formats are supported —
   <a class=""ulink"" href=""https://en.wikipedia.org/wiki/MySpell"" target=""_top"">
    MySpell
   </a>
   (OO &lt; 2.0.1) and
   <a class=""ulink"" href=""https://hunspell.github.io/"" target=""_top"">
    Hunspell
   </a>
   (OO &gt;= 2.0.2). A large list of dictionaries is available on the
   <a class=""ulink"" href=""https://wiki.openoffice.org/wiki/Dictionaries"" target=""_top"">
    OpenOffice Wiki
   </a>
   .
  </p>
  <p>
   To create an
   <span class=""application"">
    Ispell
   </span>
   dictionary perform these steps:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      download dictionary configuration files.
      <span class=""productname"">
       OpenOffice
      </span>
      extension files have the
      <code class=""filename"">
       .oxt
      </code>
      extension. It is necessary to extract
      <code class=""filename"">
       .aff
      </code>
      and
      <code class=""filename"">
       .dic
      </code>
      files, change extensions to
      <code class=""filename"">
       .affix
      </code>
      and
      <code class=""filename"">
       .dict
      </code>
      . For some dictionary files it is also needed to convert characters to the UTF-8 encoding with commands (for example, for a Norwegian language dictionary):
     </p>
     <pre class=""programlisting"">
iconv -f ISO_8859-1 -t UTF-8 -o nn_no.affix nn_NO.aff
iconv -f ISO_8859-1 -t UTF-8 -o nn_no.dict nn_NO.dic
</pre>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      copy files to the
      <code class=""filename"">
       $SHAREDIR/tsearch_data
      </code>
      directory
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      load files into PostgreSQL with the following command:
     </p>
     <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY english_hunspell (
    TEMPLATE = ispell,
    DictFile = en_us,
    AffFile = en_us,
    Stopwords = english);
</pre>
    </li>
   </ul>
  </div>
  <p>
   Here,
   <code class=""literal"">
    DictFile
   </code>
   ,
   <code class=""literal"">
    AffFile
   </code>
   , and
   <code class=""literal"">
    StopWords
   </code>
   specify the base names of the dictionary, affixes, and stop-words files. The stop-words file has the same format explained above for the
   <code class=""literal"">
    simple
   </code>
   dictionary type. The format of the other files is not specified here but is available from the above-mentioned web sites.
  </p>
  <p>
   Ispell dictionaries usually recognize a limited set of words, so they should be followed by another broader dictionary; for example, a Snowball dictionary, which recognizes everything.
  </p>
  <p>
   The
   <code class=""filename"">
    .affix
   </code>
   file of
   <span class=""application"">
    Ispell
   </span>
   has the following structure:
  </p>
  <pre class=""programlisting"">
prefixes
flag *A:
    .           &gt;   RE      # As in enter &gt; reenter
suffixes
flag T:
    E           &gt;   ST      # As in late &gt; latest
    [^AEIOU]Y   &gt;   -Y,IEST # As in dirty &gt; dirtiest
    [AEIOU]Y    &gt;   EST     # As in gray &gt; grayest
    [^EY]       &gt;   EST     # As in small &gt; smallest
</pre>
  <p>
   And the
   <code class=""filename"">
    .dict
   </code>
   file has the following structure:
  </p>
  <pre class=""programlisting"">
lapse/ADGRS
lard/DGRS
large/PRTY
lark/MRS
</pre>
  <p>
   Format of the
   <code class=""filename"">
    .dict
   </code>
   file is:
  </p>
  <pre class=""programlisting"">
basic_form/affix_class_name
</pre>
  <p>
   In the
   <code class=""filename"">
    .affix
   </code>
   file every affix flag is described in the following format:
  </p>
  <pre class=""programlisting"">
condition &gt; [-stripping_letters,] adding_affix
</pre>
  <p>
   Here, condition has a format similar to the format of regular expressions. It can use groupings
   <code class=""literal"">
    [...]
   </code>
   and
   <code class=""literal"">
    [^...]
   </code>
   . For example,
   <code class=""literal"">
    [AEIOU]Y
   </code>
   means that the last letter of the word is
   <code class=""literal"">
    ""y""
   </code>
   and the penultimate letter is
   <code class=""literal"">
    ""a""
   </code>
   ,
   <code class=""literal"">
    ""e""
   </code>
   ,
   <code class=""literal"">
    ""i""
   </code>
   ,
   <code class=""literal"">
    ""o""
   </code>
   or
   <code class=""literal"">
    ""u""
   </code>
   .
   <code class=""literal"">
    [^EY]
   </code>
   means that the last letter is neither
   <code class=""literal"">
    ""e""
   </code>
   nor
   <code class=""literal"">
    ""y""
   </code>
   .
  </p>
  <p>
   Ispell dictionaries support splitting compound words; a useful feature. Notice that the affix file should specify a special flag using the
   <code class=""literal"">
    compoundwords controlled
   </code>
   statement that marks dictionary words that can participate in compound formation:
  </p>
  <pre class=""programlisting"">
compoundwords  controlled z
</pre>
  <p>
   Here are some examples for the Norwegian language:
  </p>
  <pre class=""programlisting"">
SELECT ts_lexize('norwegian_ispell', 'overbuljongterningpakkmesterassistent');
   {over,buljong,terning,pakk,mester,assistent}
SELECT ts_lexize('norwegian_ispell', 'sjokoladefabrikk');
   {sjokoladefabrikk,sjokolade,fabrikk}
</pre>
  <p>
   <span class=""application"">
    MySpell
   </span>
   format is a subset of
   <span class=""application"">
    Hunspell
   </span>
   . The
   <code class=""filename"">
    .affix
   </code>
   file of
   <span class=""application"">
    Hunspell
   </span>
   has the following structure:
  </p>
  <pre class=""programlisting"">
PFX A Y 1
PFX A   0     re         .
SFX T N 4
SFX T   0     st         e
SFX T   y     iest       [^aeiou]y
SFX T   0     est        [aeiou]y
SFX T   0     est        [^ey]
</pre>
  <p>
   The first line of an affix class is the header. Fields of an affix rules are listed after the header:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      parameter name (PFX or SFX)
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      flag (name of the affix class)
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      stripping characters from beginning (at prefix) or end (at suffix) of the word
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      adding affix
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      condition that has a format similar to the format of regular expressions.
     </p>
    </li>
   </ul>
  </div>
  <p>
   The
   <code class=""filename"">
    .dict
   </code>
   file looks like the
   <code class=""filename"">
    .dict
   </code>
   file of
   <span class=""application"">
    Ispell
   </span>
   :
  </p>
  <pre class=""programlisting"">
larder/M
lardy/RT
large/RSPMYT
largehearted
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    <span class=""application"">
     MySpell
    </span>
    does not support compound words.
    <span class=""application"">
     Hunspell
    </span>
    has sophisticated support for compound words. At present,
    <span class=""productname"">
     PostgreSQL
    </span>
    implements only the basic compound word operations of Hunspell.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-SNOWBALL-DICTIONARY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.6.6.
      <span class=""application"">
       Snowball
      </span>
      Dictionary
      <a class=""id_link"" href=""#TEXTSEARCH-SNOWBALL-DICTIONARY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <span class=""application"">
    Snowball
   </span>
   dictionary template is based on a project by Martin Porter, inventor of the popular Porter's stemming algorithm for the English language. Snowball now provides stemming algorithms for many languages (see the
   <a class=""ulink"" href=""https://snowballstem.org/"" target=""_top"">
    Snowball site
   </a>
   for more information). Each algorithm understands how to reduce common variant forms of words to a base, or stem, spelling within its language. A Snowball dictionary requires a
   <code class=""literal"">
    language
   </code>
   parameter to identify which stemmer to use, and optionally can specify a
   <code class=""literal"">
    stopword
   </code>
   file name that gives a list of words to eliminate. (
   <span class=""productname"">
    PostgreSQL
   </span>
   's standard stopword lists are also provided by the Snowball project.) For example, there is a built-in definition equivalent to
  </p>
  <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY english_stem (
    TEMPLATE = snowball,
    Language = english,
    StopWords = english
);
</pre>
  <p>
   The stopword file format is the same as already explained.
  </p>
  <p>
   A
   <span class=""application"">
    Snowball
   </span>
   dictionary recognizes everything, whether or not it is able to simplify the word, so it should be placed at the end of the dictionary list. It is useless to have it before any other dictionary because a token will never pass through it to the next dictionary.
  </p>
 </div>
</div>
"
12. Full Text Search,12.7. Configuration Example,https://www.postgresql.org/docs/17/textsearch-configuration.html,"<div class=""sect1"" id=""TEXTSEARCH-CONFIGURATION"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.7. Configuration Example
     <a class=""id_link"" href=""#TEXTSEARCH-CONFIGURATION"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  A text search configuration specifies all options necessary to transform a document into a
  <code class=""type"">
   tsvector
  </code>
  : the parser to use to break text into tokens, and the dictionaries to use to transform each token into a lexeme. Every call of
  <code class=""function"">
   to_tsvector
  </code>
  or
  <code class=""function"">
   to_tsquery
  </code>
  needs a text search configuration to perform its processing. The configuration parameter
  <a class=""xref"" href=""runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"">
   default_text_search_config
  </a>
  specifies the name of the default configuration, which is the one used by text search functions if an explicit configuration parameter is omitted. It can be set in
  <code class=""filename"">
   postgresql.conf
  </code>
  , or set for an individual session using the
  <code class=""command"">
   SET
  </code>
  command.
 </p>
 <p>
  Several predefined text search configurations are available, and you can create custom configurations easily. To facilitate management of text search objects, a set of
  <acronym class=""acronym"">
   SQL
  </acronym>
  commands is available, and there are several
  <span class=""application"">
   psql
  </span>
  commands that display information about text search objects (
  <a class=""xref"" href=""textsearch-psql.html"" title=""12.10. psql Support"">
   Section 12.10
  </a>
  ).
 </p>
 <p>
  As an example we will create a configuration
  <code class=""literal"">
   pg
  </code>
  , starting by duplicating the built-in
  <code class=""literal"">
   english
  </code>
  configuration:
 </p>
 <pre class=""programlisting"">
CREATE TEXT SEARCH CONFIGURATION public.pg ( COPY = pg_catalog.english );
</pre>
 <p>
  We will use a PostgreSQL-specific synonym list and store it in
  <code class=""filename"">
   $SHAREDIR/tsearch_data/pg_dict.syn
  </code>
  . The file contents look like:
 </p>
 <pre class=""programlisting"">
postgres    pg
pgsql       pg
postgresql  pg
</pre>
 <p>
  We define the synonym dictionary like this:
 </p>
 <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY pg_dict (
    TEMPLATE = synonym,
    SYNONYMS = pg_dict
);
</pre>
 <p>
  Next we register the
  <span class=""productname"">
   Ispell
  </span>
  dictionary
  <code class=""literal"">
   english_ispell
  </code>
  , which has its own configuration files:
 </p>
 <pre class=""programlisting"">
CREATE TEXT SEARCH DICTIONARY english_ispell (
    TEMPLATE = ispell,
    DictFile = english,
    AffFile = english,
    StopWords = english
);
</pre>
 <p>
  Now we can set up the mappings for words in configuration
  <code class=""literal"">
   pg
  </code>
  :
 </p>
 <pre class=""programlisting"">
ALTER TEXT SEARCH CONFIGURATION pg
    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,
                      word, hword, hword_part
    WITH pg_dict, english_ispell, english_stem;
</pre>
 <p>
  We choose not to index or search some token types that the built-in configuration does handle:
 </p>
 <pre class=""programlisting"">
ALTER TEXT SEARCH CONFIGURATION pg
    DROP MAPPING FOR email, url, url_path, sfloat, float;
</pre>
 <p>
  Now we can test our configuration:
 </p>
 <pre class=""programlisting"">
SELECT * FROM ts_debug('public.pg', '
PostgreSQL, the highly scalable, SQL compliant, open source object-relational
database management system, is now undergoing beta testing of the next
version of our software.
');
</pre>
 <p>
  The next step is to set the session to use the new configuration, which was created in the
  <code class=""literal"">
   public
  </code>
  schema:
 </p>
 <pre class=""screen"">
=&gt; \dF
   List of text search configurations
 Schema  | Name | Description
---------+------+-------------
 public  | pg   |

SET default_text_search_config = 'public.pg';
SET

SHOW default_text_search_config;
 default_text_search_config
----------------------------
 public.pg
</pre>
</div>
"
12. Full Text Search,12.8. Testing and Debugging Text Search,https://www.postgresql.org/docs/17/textsearch-debugging.html,"<div class=""sect1"" id=""TEXTSEARCH-DEBUGGING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.8. Testing and Debugging Text Search
     <a class=""id_link"" href=""#TEXTSEARCH-DEBUGGING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-debugging.html#TEXTSEARCH-CONFIGURATION-TESTING"">
      12.8.1. Configuration Testing
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-debugging.html#TEXTSEARCH-PARSER-TESTING"">
      12.8.2. Parser Testing
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""textsearch-debugging.html#TEXTSEARCH-DICTIONARY-TESTING"">
      12.8.3. Dictionary Testing
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  The behavior of a custom text search configuration can easily become confusing. The functions described in this section are useful for testing text search objects. You can test a complete configuration, or test parsers and dictionaries separately.
 </p>
 <div class=""sect2"" id=""TEXTSEARCH-CONFIGURATION-TESTING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.8.1. Configuration Testing
      <a class=""id_link"" href=""#TEXTSEARCH-CONFIGURATION-TESTING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The function
   <code class=""function"">
    ts_debug
   </code>
   allows easy testing of a text search configuration.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.11.3.3"" name=""id-1.5.11.11.3.3"">
  </a>
  <pre class=""synopsis"">
ts_debug([<span class=""optional""> <em class=""replaceable""><code>config</code></em> <code class=""type"">regconfig</code>, </span>] <em class=""replaceable""><code>document</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>alias</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>description</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>token</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>dictionaries</code></em> <code class=""type"">regdictionary[]</code>,
         OUT <em class=""replaceable""><code>dictionary</code></em> <code class=""type"">regdictionary</code>,
         OUT <em class=""replaceable""><code>lexemes</code></em> <code class=""type"">text[]</code>)
         returns setof record
</pre>
  <p>
   <code class=""function"">
    ts_debug
   </code>
   displays information about every token of
   <em class=""replaceable"">
    <code>
     document
    </code>
   </em>
   as produced by the parser and processed by the configured dictionaries. It uses the configuration specified by
   <em class=""replaceable"">
    <code>
     config
    </code>
   </em>
   , or
   <code class=""varname"">
    default_text_search_config
   </code>
   if that argument is omitted.
  </p>
  <p>
   <code class=""function"">
    ts_debug
   </code>
   returns one row for each token identified in the text by the parser. The columns returned are
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        alias
       </code>
      </em>
      <code class=""type"">
       text
      </code>
      — short name of the token type
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        description
       </code>
      </em>
      <code class=""type"">
       text
      </code>
      — description of the token type
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        token
       </code>
      </em>
      <code class=""type"">
       text
      </code>
      — text of the token
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        dictionaries
       </code>
      </em>
      <code class=""type"">
       regdictionary[]
      </code>
      — the dictionaries selected by the configuration for this token type
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        dictionary
       </code>
      </em>
      <code class=""type"">
       regdictionary
      </code>
      — the dictionary that recognized the token, or
      <code class=""literal"">
       NULL
      </code>
      if none did
     </p>
    </li>
    <li class=""listitem"" style=""list-style-type: disc"">
     <p>
      <em class=""replaceable"">
       <code>
        lexemes
       </code>
      </em>
      <code class=""type"">
       text[]
      </code>
      — the lexeme(s) produced by the dictionary that recognized the token, or
      <code class=""literal"">
       NULL
      </code>
      if none did; an empty array (
      <code class=""literal"">
       {}
      </code>
      ) means it was recognized as a stop word
     </p>
    </li>
   </ul>
  </div>
  <p>
   Here is a simple example:
  </p>
  <pre class=""screen"">
SELECT * FROM ts_debug('english', 'a fat  cat sat on a mat - it ate a fat rats');
   alias   |   description   | token |  dictionaries  |  dictionary  | lexemes
-----------+-----------------+-------+----------------+--------------+---------
 asciiword | Word, all ASCII | a     | {english_stem} | english_stem | {}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | fat   | {english_stem} | english_stem | {fat}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | cat   | {english_stem} | english_stem | {cat}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | sat   | {english_stem} | english_stem | {sat}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | on    | {english_stem} | english_stem | {}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | a     | {english_stem} | english_stem | {}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | mat   | {english_stem} | english_stem | {mat}
 blank     | Space symbols   |       | {}             |              |
 blank     | Space symbols   | -     | {}             |              |
 asciiword | Word, all ASCII | it    | {english_stem} | english_stem | {}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | ate   | {english_stem} | english_stem | {ate}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | a     | {english_stem} | english_stem | {}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | fat   | {english_stem} | english_stem | {fat}
 blank     | Space symbols   |       | {}             |              |
 asciiword | Word, all ASCII | rats  | {english_stem} | english_stem | {rat}
</pre>
  <p>
   For a more extensive demonstration, we first create a
   <code class=""literal"">
    public.english
   </code>
   configuration and Ispell dictionary for the English language:
  </p>
  <pre class=""programlisting"">
CREATE TEXT SEARCH CONFIGURATION public.english ( COPY = pg_catalog.english );

CREATE TEXT SEARCH DICTIONARY english_ispell (
    TEMPLATE = ispell,
    DictFile = english,
    AffFile = english,
    StopWords = english
);

ALTER TEXT SEARCH CONFIGURATION public.english
   ALTER MAPPING FOR asciiword WITH english_ispell, english_stem;
</pre>
  <pre class=""screen"">
SELECT * FROM ts_debug('public.english', 'The Brightest supernovaes');
   alias   |   description   |    token    |         dictionaries          |   dictionary   |   lexemes
-----------+-----------------+-------------+-------------------------------+----------------+-------------
 asciiword | Word, all ASCII | The         | {english_ispell,english_stem} | english_ispell | {}
 blank     | Space symbols   |             | {}                            |                |
 asciiword | Word, all ASCII | Brightest   | {english_ispell,english_stem} | english_ispell | {bright}
 blank     | Space symbols   |             | {}                            |                |
 asciiword | Word, all ASCII | supernovaes | {english_ispell,english_stem} | english_stem   | {supernova}
</pre>
  <p>
   In this example, the word
   <code class=""literal"">
    Brightest
   </code>
   was recognized by the parser as an
   <code class=""literal"">
    ASCII word
   </code>
   (alias
   <code class=""literal"">
    asciiword
   </code>
   ). For this token type the dictionary list is
   <code class=""literal"">
    english_ispell
   </code>
   and
   <code class=""literal"">
    english_stem
   </code>
   . The word was recognized by
   <code class=""literal"">
    english_ispell
   </code>
   , which reduced it to the noun
   <code class=""literal"">
    bright
   </code>
   . The word
   <code class=""literal"">
    supernovaes
   </code>
   is unknown to the
   <code class=""literal"">
    english_ispell
   </code>
   dictionary so it was passed to the next dictionary, and, fortunately, was recognized (in fact,
   <code class=""literal"">
    english_stem
   </code>
   is a Snowball dictionary which recognizes everything; that is why it was placed at the end of the dictionary list).
  </p>
  <p>
   The word
   <code class=""literal"">
    The
   </code>
   was recognized by the
   <code class=""literal"">
    english_ispell
   </code>
   dictionary as a stop word (
   <a class=""xref"" href=""textsearch-dictionaries.html#TEXTSEARCH-STOPWORDS"" title=""12.6.1. Stop Words"">
    Section 12.6.1
   </a>
   ) and will not be indexed. The spaces are discarded too, since the configuration provides no dictionaries at all for them.
  </p>
  <p>
   You can reduce the width of the output by explicitly specifying which columns you want to see:
  </p>
  <pre class=""screen"">
SELECT alias, token, dictionary, lexemes
FROM ts_debug('public.english', 'The Brightest supernovaes');
   alias   |    token    |   dictionary   |   lexemes
-----------+-------------+----------------+-------------
 asciiword | The         | english_ispell | {}
 blank     |             |                |
 asciiword | Brightest   | english_ispell | {bright}
 blank     |             |                |
 asciiword | supernovaes | english_stem   | {supernova}
</pre>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-PARSER-TESTING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.8.2. Parser Testing
      <a class=""id_link"" href=""#TEXTSEARCH-PARSER-TESTING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The following functions allow direct testing of a text search parser.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.11.4.3"" name=""id-1.5.11.11.4.3"">
  </a>
  <pre class=""synopsis"">
ts_parse(<em class=""replaceable""><code>parser_name</code></em> <code class=""type"">text</code>, <em class=""replaceable""><code>document</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>tokid</code></em> <code class=""type"">integer</code>, OUT <em class=""replaceable""><code>token</code></em> <code class=""type"">text</code>) returns <code class=""type"">setof record</code>
ts_parse(<em class=""replaceable""><code>parser_oid</code></em> <code class=""type"">oid</code>, <em class=""replaceable""><code>document</code></em> <code class=""type"">text</code>,
         OUT <em class=""replaceable""><code>tokid</code></em> <code class=""type"">integer</code>, OUT <em class=""replaceable""><code>token</code></em> <code class=""type"">text</code>) returns <code class=""type"">setof record</code>
</pre>
  <p>
   <code class=""function"">
    ts_parse
   </code>
   parses the given
   <em class=""replaceable"">
    <code>
     document
    </code>
   </em>
   and returns a series of records, one for each token produced by parsing. Each record includes a
   <code class=""varname"">
    tokid
   </code>
   showing the assigned token type and a
   <code class=""varname"">
    token
   </code>
   which is the text of the token. For example:
  </p>
  <pre class=""screen"">
SELECT * FROM ts_parse('default', '123 - a number');
 tokid | token
-------+--------
    22 | 123
    12 |
    12 | -
     1 | a
    12 |
     1 | number
</pre>
  <a class=""indexterm"" id=""id-1.5.11.11.4.6"" name=""id-1.5.11.11.4.6"">
  </a>
  <pre class=""synopsis"">
ts_token_type(<em class=""replaceable""><code>parser_name</code></em> <code class=""type"">text</code>, OUT <em class=""replaceable""><code>tokid</code></em> <code class=""type"">integer</code>,
              OUT <em class=""replaceable""><code>alias</code></em> <code class=""type"">text</code>, OUT <em class=""replaceable""><code>description</code></em> <code class=""type"">text</code>) returns <code class=""type"">setof record</code>
ts_token_type(<em class=""replaceable""><code>parser_oid</code></em> <code class=""type"">oid</code>, OUT <em class=""replaceable""><code>tokid</code></em> <code class=""type"">integer</code>,
              OUT <em class=""replaceable""><code>alias</code></em> <code class=""type"">text</code>, OUT <em class=""replaceable""><code>description</code></em> <code class=""type"">text</code>) returns <code class=""type"">setof record</code>
</pre>
  <p>
   <code class=""function"">
    ts_token_type
   </code>
   returns a table which describes each type of token the specified parser can recognize. For each token type, the table gives the integer
   <code class=""varname"">
    tokid
   </code>
   that the parser uses to label a token of that type, the
   <code class=""varname"">
    alias
   </code>
   that names the token type in configuration commands, and a short
   <code class=""varname"">
    description
   </code>
   . For example:
  </p>
  <pre class=""screen"">
SELECT * FROM ts_token_type('default');
 tokid |      alias      |               description
-------+-----------------+------------------------------------------
     1 | asciiword       | Word, all ASCII
     2 | word            | Word, all letters
     3 | numword         | Word, letters and digits
     4 | email           | Email address
     5 | url             | URL
     6 | host            | Host
     7 | sfloat          | Scientific notation
     8 | version         | Version number
     9 | hword_numpart   | Hyphenated word part, letters and digits
    10 | hword_part      | Hyphenated word part, all letters
    11 | hword_asciipart | Hyphenated word part, all ASCII
    12 | blank           | Space symbols
    13 | tag             | XML tag
    14 | protocol        | Protocol head
    15 | numhword        | Hyphenated word, letters and digits
    16 | asciihword      | Hyphenated word, all ASCII
    17 | hword           | Hyphenated word, all letters
    18 | url_path        | URL path
    19 | file            | File or path name
    20 | float           | Decimal notation
    21 | int             | Signed integer
    22 | uint            | Unsigned integer
    23 | entity          | XML entity
</pre>
 </div>
 <div class=""sect2"" id=""TEXTSEARCH-DICTIONARY-TESTING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      12.8.3. Dictionary Testing
      <a class=""id_link"" href=""#TEXTSEARCH-DICTIONARY-TESTING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The
   <code class=""function"">
    ts_lexize
   </code>
   function facilitates dictionary testing.
  </p>
  <a class=""indexterm"" id=""id-1.5.11.11.5.3"" name=""id-1.5.11.11.5.3"">
  </a>
  <pre class=""synopsis"">
ts_lexize(<em class=""replaceable""><code>dict</code></em> <code class=""type"">regdictionary</code>, <em class=""replaceable""><code>token</code></em> <code class=""type"">text</code>) returns <code class=""type"">text[]</code>
</pre>
  <p>
   <code class=""function"">
    ts_lexize
   </code>
   returns an array of lexemes if the input
   <em class=""replaceable"">
    <code>
     token
    </code>
   </em>
   is known to the dictionary, or an empty array if the token is known to the dictionary but it is a stop word, or
   <code class=""literal"">
    NULL
   </code>
   if it is an unknown word.
  </p>
  <p>
   Examples:
  </p>
  <pre class=""screen"">
SELECT ts_lexize('english_stem', 'stars');
 ts_lexize
-----------
 {star}

SELECT ts_lexize('english_stem', 'a');
 ts_lexize
-----------
 {}
</pre>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    The
    <code class=""function"">
     ts_lexize
    </code>
    function expects a single
    <span class=""emphasis"">
     <em>
      token
     </em>
    </span>
    , not text. Here is a case where this can be confusing:
   </p>
   <pre class=""screen"">
SELECT ts_lexize('thesaurus_astro', 'supernovae stars') is null;
 ?column?
----------
 t
</pre>
   <p>
    The thesaurus dictionary
    <code class=""literal"">
     thesaurus_astro
    </code>
    does know the phrase
    <code class=""literal"">
     supernovae stars
    </code>
    , but
    <code class=""function"">
     ts_lexize
    </code>
    fails since it does not parse the input text but treats it as a single token. Use
    <code class=""function"">
     plainto_tsquery
    </code>
    or
    <code class=""function"">
     to_tsvector
    </code>
    to test thesaurus dictionaries, for example:
   </p>
   <pre class=""screen"">
SELECT plainto_tsquery('supernovae stars');
 plainto_tsquery
-----------------
 'sn'
</pre>
  </div>
 </div>
</div>
"
12. Full Text Search,12.9. Preferred Index Types for Text Search,https://www.postgresql.org/docs/17/textsearch-indexes.html,"<div class=""sect1"" id=""TEXTSEARCH-INDEXES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.9. Preferred Index Types for Text Search
     <a class=""id_link"" href=""#TEXTSEARCH-INDEXES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.11.12.2"" name=""id-1.5.11.12.2"">
 </a>
 <p>
  There are two kinds of indexes that can be used to speed up full text searches:
  <a class=""link"" href=""gin.html"" title=""64.4. GIN Indexes"">
   <acronym class=""acronym"">
    GIN
   </acronym>
  </a>
  and
  <a class=""link"" href=""gist.html"" title=""64.2. GiST Indexes"">
   <acronym class=""acronym"">
    GiST
   </acronym>
  </a>
  . Note that indexes are not mandatory for full text searching, but in cases where a column is searched on a regular basis, an index is usually desirable.
 </p>
 <p>
  To create such an index, do one of:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt>
    <span class=""term"">
     <a class=""indexterm"" id=""id-1.5.11.12.4.1.1.1.1"" name=""id-1.5.11.12.4.1.1.1.1"">
     </a>
     <code class=""literal"">
      CREATE INDEX
      <em class=""replaceable"">
       <code>
        name
       </code>
      </em>
      ON
      <em class=""replaceable"">
       <code>
        table
       </code>
      </em>
      USING GIN (
      <em class=""replaceable"">
       <code>
        column
       </code>
      </em>
      );
     </code>
    </span>
   </dt>
   <dd>
    <p>
     Creates a GIN (Generalized Inverted Index)-based index. The
     <em class=""replaceable"">
      <code>
       column
      </code>
     </em>
     must be of
     <code class=""type"">
      tsvector
     </code>
     type.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     <a class=""indexterm"" id=""id-1.5.11.12.4.1.2.1.1"" name=""id-1.5.11.12.4.1.2.1.1"">
     </a>
     <code class=""literal"">
      CREATE INDEX
      <em class=""replaceable"">
       <code>
        name
       </code>
      </em>
      ON
      <em class=""replaceable"">
       <code>
        table
       </code>
      </em>
      USING GIST (
      <em class=""replaceable"">
       <code>
        column
       </code>
      </em>
      [ { DEFAULT | tsvector_ops } (siglen =
      <em class=""replaceable"">
       <code>
        number
       </code>
      </em>
      ) ] );
     </code>
    </span>
   </dt>
   <dd>
    <p>
     Creates a GiST (Generalized Search Tree)-based index. The
     <em class=""replaceable"">
      <code>
       column
      </code>
     </em>
     can be of
     <code class=""type"">
      tsvector
     </code>
     or
     <code class=""type"">
      tsquery
     </code>
     type. Optional integer parameter
     <code class=""literal"">
      siglen
     </code>
     determines signature length in bytes (see below for details).
    </p>
   </dd>
  </dl>
 </div>
 <p>
  GIN indexes are the preferred text search index type. As inverted indexes, they contain an index entry for each word (lexeme), with a compressed list of matching locations. Multi-word searches can find the first match, then use the index to remove rows that are lacking additional words. GIN indexes store only the words (lexemes) of
  <code class=""type"">
   tsvector
  </code>
  values, and not their weight labels. Thus a table row recheck is needed when using a query that involves weights.
 </p>
 <p>
  A GiST index is
  <em class=""firstterm"">
   lossy
  </em>
  , meaning that the index might produce false matches, and it is necessary to check the actual table row to eliminate such false matches. (
  <span class=""productname"">
   PostgreSQL
  </span>
  does this automatically when needed.) GiST indexes are lossy because each document is represented in the index by a fixed-length signature. The signature length in bytes is determined by the value of the optional integer parameter
  <code class=""literal"">
   siglen
  </code>
  . The default signature length (when
  <code class=""literal"">
   siglen
  </code>
  is not specified) is 124 bytes, the maximum signature length is 2024 bytes. The signature is generated by hashing each word into a single bit in an n-bit string, with all these bits OR-ed together to produce an n-bit document signature. When two words hash to the same bit position there will be a false match. If all words in the query have matches (real or false) then the table row must be retrieved to see if the match is correct. Longer signatures lead to a more precise search (scanning a smaller fraction of the index and fewer heap pages), at the cost of a larger index.
 </p>
 <p>
  A GiST index can be covering, i.e., use the
  <code class=""literal"">
   INCLUDE
  </code>
  clause. Included columns can have data types without any GiST operator class. Included attributes will be stored uncompressed.
 </p>
 <p>
  Lossiness causes performance degradation due to unnecessary fetches of table records that turn out to be false matches. Since random access to table records is slow, this limits the usefulness of GiST indexes. The likelihood of false matches depends on several factors, in particular the number of unique words, so using dictionaries to reduce this number is recommended.
 </p>
 <p>
  Note that
  <acronym class=""acronym"">
   GIN
  </acronym>
  index build time can often be improved by increasing
  <a class=""xref"" href=""runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM"">
   maintenance_work_mem
  </a>
  , while
  <acronym class=""acronym"">
   GiST
  </acronym>
  index build time is not sensitive to that parameter.
 </p>
 <p>
  Partitioning of big collections and the proper use of GIN and GiST indexes allows the implementation of very fast searches with online update. Partitioning can be done at the database level using table inheritance, or by distributing documents over servers and collecting external search results, e.g., via
  <a class=""link"" href=""ddl-foreign-data.html"" title=""5.13. Foreign Data"">
   Foreign Data
  </a>
  access. The latter is possible because ranking functions use only local information.
 </p>
</div>
"
12. Full Text Search,12.10. psql Support,https://www.postgresql.org/docs/17/textsearch-psql.html,"<div class=""sect1"" id=""TEXTSEARCH-PSQL"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.10.
     <span class=""application"">
      psql
     </span>
     Support
     <a class=""id_link"" href=""#TEXTSEARCH-PSQL"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Information about text search configuration objects can be obtained in
  <span class=""application"">
   psql
  </span>
  using a set of commands:
 </p>
 <pre class=""synopsis"">
\dF{d,p,t}[<span class=""optional"">+</span>] [<span class=""optional"">PATTERN</span>]
</pre>
 <p>
  An optional
  <code class=""literal"">
   +
  </code>
  produces more details.
 </p>
 <p>
  The optional parameter
  <em class=""replaceable"">
   <code>
    PATTERN
   </code>
  </em>
  can be the name of a text search object, optionally schema-qualified. If
  <em class=""replaceable"">
   <code>
    PATTERN
   </code>
  </em>
  is omitted then information about all visible objects will be displayed.
  <em class=""replaceable"">
   <code>
    PATTERN
   </code>
  </em>
  can be a regular expression and can provide
  <span class=""emphasis"">
   <em>
    separate
   </em>
  </span>
  patterns for the schema and object names. The following examples illustrate this:
 </p>
 <pre class=""screen"">
=&gt; \dF *fulltext*
       List of text search configurations
 Schema |  Name        | Description
--------+--------------+-------------
 public | fulltext_cfg |
</pre>
 <pre class=""screen"">
=&gt; \dF *.fulltext*
       List of text search configurations
 Schema   |  Name        | Description
----------+----------------------------
 fulltext | fulltext_cfg |
 public   | fulltext_cfg |
</pre>
 <p>
  The available commands are:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt>
    <span class=""term"">
     <code class=""literal"">
      \dF[
      <span class=""optional"">
       +
      </span>
      ] [
      <span class=""optional"">
       PATTERN
      </span>
      ]
     </code>
    </span>
   </dt>
   <dd>
    <p>
     List text search configurations (add
     <code class=""literal"">
      +
     </code>
     for more detail).
    </p>
    <pre class=""screen"">
=&gt; \dF russian
            List of text search configurations
   Schema   |  Name   |            Description
------------+---------+------------------------------------
 pg_catalog | russian | configuration for russian language

=&gt; \dF+ russian
Text search configuration ""pg_catalog.russian""
Parser: ""pg_catalog.default""
      Token      | Dictionaries
-----------------+--------------
 asciihword      | english_stem
 asciiword       | english_stem
 email           | simple
 file            | simple
 float           | simple
 host            | simple
 hword           | russian_stem
 hword_asciipart | english_stem
 hword_numpart   | simple
 hword_part      | russian_stem
 int             | simple
 numhword        | simple
 numword         | simple
 sfloat          | simple
 uint            | simple
 url             | simple
 url_path        | simple
 version         | simple
 word            | russian_stem
</pre>
   </dd>
   <dt>
    <span class=""term"">
     <code class=""literal"">
      \dFd[
      <span class=""optional"">
       +
      </span>
      ] [
      <span class=""optional"">
       PATTERN
      </span>
      ]
     </code>
    </span>
   </dt>
   <dd>
    <p>
     List text search dictionaries (add
     <code class=""literal"">
      +
     </code>
     for more detail).
    </p>
    <pre class=""screen"">
=&gt; \dFd
                             List of text search dictionaries
   Schema   |      Name       |                        Description
------------+-----------------+-----------------------------------------------------------
 pg_catalog | arabic_stem     | snowball stemmer for arabic language
 pg_catalog | armenian_stem   | snowball stemmer for armenian language
 pg_catalog | basque_stem     | snowball stemmer for basque language
 pg_catalog | catalan_stem    | snowball stemmer for catalan language
 pg_catalog | danish_stem     | snowball stemmer for danish language
 pg_catalog | dutch_stem      | snowball stemmer for dutch language
 pg_catalog | english_stem    | snowball stemmer for english language
 pg_catalog | finnish_stem    | snowball stemmer for finnish language
 pg_catalog | french_stem     | snowball stemmer for french language
 pg_catalog | german_stem     | snowball stemmer for german language
 pg_catalog | greek_stem      | snowball stemmer for greek language
 pg_catalog | hindi_stem      | snowball stemmer for hindi language
 pg_catalog | hungarian_stem  | snowball stemmer for hungarian language
 pg_catalog | indonesian_stem | snowball stemmer for indonesian language
 pg_catalog | irish_stem      | snowball stemmer for irish language
 pg_catalog | italian_stem    | snowball stemmer for italian language
 pg_catalog | lithuanian_stem | snowball stemmer for lithuanian language
 pg_catalog | nepali_stem     | snowball stemmer for nepali language
 pg_catalog | norwegian_stem  | snowball stemmer for norwegian language
 pg_catalog | portuguese_stem | snowball stemmer for portuguese language
 pg_catalog | romanian_stem   | snowball stemmer for romanian language
 pg_catalog | russian_stem    | snowball stemmer for russian language
 pg_catalog | serbian_stem    | snowball stemmer for serbian language
 pg_catalog | simple          | simple dictionary: just lower case and check for stopword
 pg_catalog | spanish_stem    | snowball stemmer for spanish language
 pg_catalog | swedish_stem    | snowball stemmer for swedish language
 pg_catalog | tamil_stem      | snowball stemmer for tamil language
 pg_catalog | turkish_stem    | snowball stemmer for turkish language
 pg_catalog | yiddish_stem    | snowball stemmer for yiddish language
</pre>
   </dd>
   <dt>
    <span class=""term"">
     <code class=""literal"">
      \dFp[
      <span class=""optional"">
       +
      </span>
      ] [
      <span class=""optional"">
       PATTERN
      </span>
      ]
     </code>
    </span>
   </dt>
   <dd>
    <p>
     List text search parsers (add
     <code class=""literal"">
      +
     </code>
     for more detail).
    </p>
    <pre class=""screen"">
=&gt; \dFp
        List of text search parsers
   Schema   |  Name   |     Description
------------+---------+---------------------
 pg_catalog | default | default word parser
=&gt; \dFp+
    Text search parser ""pg_catalog.default""
     Method      |    Function    | Description
-----------------+----------------+-------------
 Start parse     | prsd_start     |
 Get next token  | prsd_nexttoken |
 End parse       | prsd_end       |
 Get headline    | prsd_headline  |
 Get token types | prsd_lextype   |

        Token types for parser ""pg_catalog.default""
   Token name    |               Description
-----------------+------------------------------------------
 asciihword      | Hyphenated word, all ASCII
 asciiword       | Word, all ASCII
 blank           | Space symbols
 email           | Email address
 entity          | XML entity
 file            | File or path name
 float           | Decimal notation
 host            | Host
 hword           | Hyphenated word, all letters
 hword_asciipart | Hyphenated word part, all ASCII
 hword_numpart   | Hyphenated word part, letters and digits
 hword_part      | Hyphenated word part, all letters
 int             | Signed integer
 numhword        | Hyphenated word, letters and digits
 numword         | Word, letters and digits
 protocol        | Protocol head
 sfloat          | Scientific notation
 tag             | XML tag
 uint            | Unsigned integer
 url             | URL
 url_path        | URL path
 version         | Version number
 word            | Word, all letters
(23 rows)
</pre>
   </dd>
   <dt>
    <span class=""term"">
     <code class=""literal"">
      \dFt[
      <span class=""optional"">
       +
      </span>
      ] [
      <span class=""optional"">
       PATTERN
      </span>
      ]
     </code>
    </span>
   </dt>
   <dd>
    <p>
     List text search templates (add
     <code class=""literal"">
      +
     </code>
     for more detail).
    </p>
    <pre class=""screen"">
=&gt; \dFt
                           List of text search templates
   Schema   |   Name    |                        Description
------------+-----------+-----------------------------------------------------------
 pg_catalog | ispell    | ispell dictionary
 pg_catalog | simple    | simple dictionary: just lower case and check for stopword
 pg_catalog | snowball  | snowball stemmer
 pg_catalog | synonym   | synonym dictionary: replace word by its synonym
 pg_catalog | thesaurus | thesaurus dictionary: phrase by phrase substitution
</pre>
   </dd>
  </dl>
 </div>
</div>
"
12. Full Text Search,12.11. Limitations,https://www.postgresql.org/docs/17/textsearch-limitations.html,"<div class=""sect1"" id=""TEXTSEARCH-LIMITATIONS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     12.11. Limitations
     <a class=""id_link"" href=""#TEXTSEARCH-LIMITATIONS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  The current limitations of
  <span class=""productname"">
   PostgreSQL
  </span>
  's text search features are:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist compact"" style=""list-style-type: bullet;"">
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     The length of each lexeme must be less than 2 kilobytes
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     The length of a
     <code class=""type"">
      tsvector
     </code>
     (lexemes + positions) must be less than 1 megabyte
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     The number of lexemes must be less than 2
     <sup>
      64
     </sup>
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     Position values in
     <code class=""type"">
      tsvector
     </code>
     must be greater than 0 and no more than 16,383
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     The match distance in a
     <code class=""literal"">
      &lt;
      <em class=""replaceable"">
       <code>
        N
       </code>
      </em>
      &gt;
     </code>
     (FOLLOWED BY)
     <code class=""type"">
      tsquery
     </code>
     operator cannot be more than 16,384
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     No more than 256 positions per lexeme
    </p>
   </li>
   <li class=""listitem"" style=""list-style-type: disc"">
    <p>
     The number of nodes (lexemes + operators) in a
     <code class=""type"">
      tsquery
     </code>
     must be less than 32,768
    </p>
   </li>
  </ul>
 </div>
 <p>
  For comparison, the
  <span class=""productname"">
   PostgreSQL
  </span>
  8.1 documentation contained 10,441 unique words, a total of 335,420 words, and the most frequent word
  <span class=""quote"">
   “
   <span class=""quote"">
    postgresql
   </span>
   ”
  </span>
  was mentioned 6,127 times in 655 documents.
 </p>
 <p>
  Another example — the
  <span class=""productname"">
   PostgreSQL
  </span>
  mailing list archives contained 910,989 unique words with 57,491,343 lexemes in 461,020 messages.
 </p>
</div>
"
13. Concurrency Control,13.1. Introduction,https://www.postgresql.org/docs/17/mvcc-intro.html,"<div class=""sect1"" id=""MVCC-INTRO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.1. Introduction
     <a class=""id_link"" href=""#MVCC-INTRO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.12.4.2"" name=""id-1.5.12.4.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.12.4.3"" name=""id-1.5.12.4.3"">
 </a>
 <a class=""indexterm"" id=""id-1.5.12.4.4"" name=""id-1.5.12.4.4"">
 </a>
 <a class=""indexterm"" id=""id-1.5.12.4.5"" name=""id-1.5.12.4.5"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides a rich set of tools for developers to manage concurrent access to data. Internally, data consistency is maintained by using a multiversion model (Multiversion Concurrency Control,
  <acronym class=""acronym"">
   MVCC
  </acronym>
  ). This means that each SQL statement sees a snapshot of data (a
  <em class=""firstterm"">
   database version
  </em>
  ) as it was some time ago, regardless of the current state of the underlying data. This prevents statements from viewing inconsistent data produced by concurrent transactions performing updates on the same data rows, providing
  <em class=""firstterm"">
   transaction isolation
  </em>
  for each database session.
  <acronym class=""acronym"">
   MVCC
  </acronym>
  , by eschewing the locking methodologies of traditional database systems, minimizes lock contention in order to allow for reasonable performance in multiuser environments.
 </p>
 <p>
  The main advantage of using the
  <acronym class=""acronym"">
   MVCC
  </acronym>
  model of concurrency control rather than locking is that in
  <acronym class=""acronym"">
   MVCC
  </acronym>
  locks acquired for querying (reading) data do not conflict with locks acquired for writing data, and so reading never blocks writing and writing never blocks reading.
  <span class=""productname"">
   PostgreSQL
  </span>
  maintains this guarantee even when providing the strictest level of transaction isolation through the use of an innovative
  <em class=""firstterm"">
   Serializable Snapshot Isolation
  </em>
  (
  <acronym class=""acronym"">
   SSI
  </acronym>
  ) level.
 </p>
 <p>
  Table- and row-level locking facilities are also available in
  <span class=""productname"">
   PostgreSQL
  </span>
  for applications which don't generally need full transaction isolation and prefer to explicitly manage particular points of conflict. However, proper use of
  <acronym class=""acronym"">
   MVCC
  </acronym>
  will generally provide better performance than locks. In addition, application-defined advisory locks provide a mechanism for acquiring locks that are not tied to a single transaction.
 </p>
</div>
"
13. Concurrency Control,13.2. Transaction Isolation,https://www.postgresql.org/docs/17/transaction-iso.html,"<div class=""sect1"" id=""TRANSACTION-ISO"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.2. Transaction Isolation
     <a class=""id_link"" href=""#TRANSACTION-ISO"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""transaction-iso.html#XACT-READ-COMMITTED"">
      13.2.1. Read Committed Isolation Level
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""transaction-iso.html#XACT-REPEATABLE-READ"">
      13.2.2. Repeatable Read Isolation Level
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""transaction-iso.html#XACT-SERIALIZABLE"">
      13.2.3. Serializable Isolation Level
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.12.5.2"" name=""id-1.5.12.5.2"">
 </a>
 <p>
  The
  <acronym class=""acronym"">
   SQL
  </acronym>
  standard defines four levels of transaction isolation. The most strict is Serializable, which is defined by the standard in a paragraph which says that any concurrent execution of a set of Serializable transactions is guaranteed to produce the same effect as running them one at a time in some order. The other three levels are defined in terms of phenomena, resulting from interaction between concurrent transactions, which must not occur at each level. The standard notes that due to the definition of Serializable, none of these phenomena are possible at that level. (This is hardly surprising -- if the effect of the transactions must be consistent with having been run one at a time, how could you see any phenomena caused by interactions?)
 </p>
 <p>
  The phenomena which are prohibited at various levels are:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt>
    <span class=""term"">
     dirty read
     <a class=""indexterm"" id=""id-1.5.12.5.4.1.1.1.1"" name=""id-1.5.12.5.4.1.1.1.1"">
     </a>
    </span>
   </dt>
   <dd>
    <p>
     A transaction reads data written by a concurrent uncommitted transaction.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     nonrepeatable read
     <a class=""indexterm"" id=""id-1.5.12.5.4.1.2.1.1"" name=""id-1.5.12.5.4.1.2.1.1"">
     </a>
    </span>
   </dt>
   <dd>
    <p>
     A transaction re-reads data it has previously read and finds that data has been modified by another transaction (that committed since the initial read).
    </p>
   </dd>
   <dt>
    <span class=""term"">
     phantom read
     <a class=""indexterm"" id=""id-1.5.12.5.4.1.3.1.1"" name=""id-1.5.12.5.4.1.3.1.1"">
     </a>
    </span>
   </dt>
   <dd>
    <p>
     A transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     serialization anomaly
     <a class=""indexterm"" id=""id-1.5.12.5.4.1.4.1.1"" name=""id-1.5.12.5.4.1.4.1.1"">
     </a>
    </span>
   </dt>
   <dd>
    <p>
     The result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  <a class=""indexterm"" id=""id-1.5.12.5.5.1"" name=""id-1.5.12.5.5.1"">
  </a>
  The SQL standard and PostgreSQL-implemented transaction isolation levels are described in
  <a class=""xref"" href=""transaction-iso.html#MVCC-ISOLEVEL-TABLE"" title=""Table 13.1. Transaction Isolation Levels"">
   Table 13.1
  </a>
  .
 </p>
 <div class=""table"" id=""MVCC-ISOLEVEL-TABLE"">
  <p class=""title"">
   <strong>
    Table 13.1. Transaction Isolation Levels
   </strong>
  </p>
  <div class=""table-contents"">
   <table border=""1"" class=""table"" summary=""Transaction Isolation Levels"">
    <colgroup>
     <col/>
     <col/>
     <col/>
     <col/>
     <col/>
    </colgroup>
    <thead>
     <tr>
      <th>
       Isolation Level
      </th>
      <th>
       Dirty Read
      </th>
      <th>
       Nonrepeatable Read
      </th>
      <th>
       Phantom Read
      </th>
      <th>
       Serialization Anomaly
      </th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td>
       Read uncommitted
      </td>
      <td>
       Allowed, but not in PG
      </td>
      <td>
       Possible
      </td>
      <td>
       Possible
      </td>
      <td>
       Possible
      </td>
     </tr>
     <tr>
      <td>
       Read committed
      </td>
      <td>
       Not possible
      </td>
      <td>
       Possible
      </td>
      <td>
       Possible
      </td>
      <td>
       Possible
      </td>
     </tr>
     <tr>
      <td>
       Repeatable read
      </td>
      <td>
       Not possible
      </td>
      <td>
       Not possible
      </td>
      <td>
       Allowed, but not in PG
      </td>
      <td>
       Possible
      </td>
     </tr>
     <tr>
      <td>
       Serializable
      </td>
      <td>
       Not possible
      </td>
      <td>
       Not possible
      </td>
      <td>
       Not possible
      </td>
      <td>
       Not possible
      </td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <br class=""table-break""/>
 <p>
  In
  <span class=""productname"">
   PostgreSQL
  </span>
  , you can request any of the four standard transaction isolation levels, but internally only three distinct isolation levels are implemented, i.e., PostgreSQL's Read Uncommitted mode behaves like Read Committed. This is because it is the only sensible way to map the standard isolation levels to PostgreSQL's multiversion concurrency control architecture.
 </p>
 <p>
  The table also shows that PostgreSQL's Repeatable Read implementation does not allow phantom reads. This is acceptable under the SQL standard because the standard specifies which anomalies must
  <span class=""emphasis"">
   <em>
    not
   </em>
  </span>
  occur at certain isolation levels; higher guarantees are acceptable. The behavior of the available isolation levels is detailed in the following subsections.
 </p>
 <p>
  To set the transaction isolation level of a transaction, use the command
  <a class=""xref"" href=""sql-set-transaction.html"" title=""SET TRANSACTION"">
   <span class=""refentrytitle"">
    SET TRANSACTION
   </span>
  </a>
  .
 </p>
 <div class=""important"">
  <h3 class=""title"">
   Important
  </h3>
  <p>
   Some
   <span class=""productname"">
    PostgreSQL
   </span>
   data types and functions have special rules regarding transactional behavior. In particular, changes made to a sequence (and therefore the counter of a column declared using
   <code class=""type"">
    serial
   </code>
   ) are immediately visible to all other transactions and are not rolled back if the transaction that made the changes aborts. See
   <a class=""xref"" href=""functions-sequence.html"" title=""9.17. Sequence Manipulation Functions"">
    Section 9.17
   </a>
   and
   <a class=""xref"" href=""datatype-numeric.html#DATATYPE-SERIAL"" title=""8.1.4. Serial Types"">
    Section 8.1.4
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""XACT-READ-COMMITTED"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.2.1. Read Committed Isolation Level
      <a class=""id_link"" href=""#XACT-READ-COMMITTED"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.5.11.2"" name=""id-1.5.12.5.11.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.5.11.3"" name=""id-1.5.12.5.11.3"">
  </a>
  <p>
   <em class=""firstterm"">
    Read Committed
   </em>
   is the default isolation level in
   <span class=""productname"">
    PostgreSQL
   </span>
   . When a transaction uses this isolation level, a
   <code class=""command"">
    SELECT
   </code>
   query (without a
   <code class=""literal"">
    FOR UPDATE/SHARE
   </code>
   clause) sees only data committed before the query began; it never sees either uncommitted data or changes committed by concurrent transactions during the query's execution. In effect, a
   <code class=""command"">
    SELECT
   </code>
   query sees a snapshot of the database as of the instant the query begins to run. However,
   <code class=""command"">
    SELECT
   </code>
   does see the effects of previous updates executed within its own transaction, even though they are not yet committed. Also note that two successive
   <code class=""command"">
    SELECT
   </code>
   commands can see different data, even though they are within a single transaction, if other transactions commit changes after the first
   <code class=""command"">
    SELECT
   </code>
   starts and before the second
   <code class=""command"">
    SELECT
   </code>
   starts.
  </p>
  <p>
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   ,
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   , and
   <code class=""command"">
    SELECT FOR SHARE
   </code>
   commands behave the same as
   <code class=""command"">
    SELECT
   </code>
   in terms of searching for target rows: they will only find target rows that were committed as of the command start time. However, such a target row might have already been updated (or deleted or locked) by another concurrent transaction by the time it is found. In this case, the would-be updater will wait for the first updating transaction to commit or roll back (if it is still in progress). If the first updater rolls back, then its effects are negated and the second updater can proceed with updating the originally found row. If the first updater commits, the second updater will ignore the row if the first updater deleted it, otherwise it will attempt to apply its operation to the updated version of the row. The search condition of the command (the
   <code class=""literal"">
    WHERE
   </code>
   clause) is re-evaluated to see if the updated version of the row still matches the search condition. If so, the second updater proceeds with its operation using the updated version of the row. In the case of
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   and
   <code class=""command"">
    SELECT FOR SHARE
   </code>
   , this means it is the updated version of the row that is locked and returned to the client.
  </p>
  <p>
   <code class=""command"">
    INSERT
   </code>
   with an
   <code class=""literal"">
    ON CONFLICT DO UPDATE
   </code>
   clause behaves similarly. In Read Committed mode, each row proposed for insertion will either insert or update. Unless there are unrelated errors, one of those two outcomes is guaranteed. If a conflict originates in another transaction whose effects are not yet visible to the
   <code class=""command"">
    INSERT
   </code>
   , the
   <code class=""command"">
    UPDATE
   </code>
   clause will affect that row, even though possibly
   <span class=""emphasis"">
    <em>
     no
    </em>
   </span>
   version of that row is conventionally visible to the command.
  </p>
  <p>
   <code class=""command"">
    INSERT
   </code>
   with an
   <code class=""literal"">
    ON CONFLICT DO NOTHING
   </code>
   clause may have insertion not proceed for a row due to the outcome of another transaction whose effects are not visible to the
   <code class=""command"">
    INSERT
   </code>
   snapshot. Again, this is only the case in Read Committed mode.
  </p>
  <p>
   <code class=""command"">
    MERGE
   </code>
   allows the user to specify various combinations of
   <code class=""command"">
    INSERT
   </code>
   ,
   <code class=""command"">
    UPDATE
   </code>
   and
   <code class=""command"">
    DELETE
   </code>
   subcommands. A
   <code class=""command"">
    MERGE
   </code>
   command with both
   <code class=""command"">
    INSERT
   </code>
   and
   <code class=""command"">
    UPDATE
   </code>
   subcommands looks similar to
   <code class=""command"">
    INSERT
   </code>
   with an
   <code class=""literal"">
    ON CONFLICT DO UPDATE
   </code>
   clause but does not guarantee that either
   <code class=""command"">
    INSERT
   </code>
   or
   <code class=""command"">
    UPDATE
   </code>
   will occur. If
   <code class=""command"">
    MERGE
   </code>
   attempts an
   <code class=""command"">
    UPDATE
   </code>
   or
   <code class=""command"">
    DELETE
   </code>
   and the row is concurrently updated but the join condition still passes for the current target and the current source tuple, then
   <code class=""command"">
    MERGE
   </code>
   will behave the same as the
   <code class=""command"">
    UPDATE
   </code>
   or
   <code class=""command"">
    DELETE
   </code>
   commands and perform its action on the updated version of the row. However, because
   <code class=""command"">
    MERGE
   </code>
   can specify several actions and they can be conditional, the conditions for each action are re-evaluated on the updated version of the row, starting from the first action, even if the action that had originally matched appears later in the list of actions. On the other hand, if the row is concurrently updated so that the join condition fails, then
   <code class=""command"">
    MERGE
   </code>
   will evaluate the command's
   <code class=""literal"">
    NOT MATCHED BY SOURCE
   </code>
   and
   <code class=""literal"">
    NOT MATCHED [BY TARGET]
   </code>
   actions next, and execute the first one of each kind that succeeds. If the row is concurrently deleted, then
   <code class=""command"">
    MERGE
   </code>
   will evaluate the command's
   <code class=""literal"">
    NOT MATCHED [BY TARGET]
   </code>
   actions, and execute the first one that succeeds. If
   <code class=""command"">
    MERGE
   </code>
   attempts an
   <code class=""command"">
    INSERT
   </code>
   and a unique index is present and a duplicate row is concurrently inserted, then a uniqueness violation error is raised;
   <code class=""command"">
    MERGE
   </code>
   does not attempt to avoid such errors by restarting evaluation of
   <code class=""literal"">
    MATCHED
   </code>
   conditions.
  </p>
  <p>
   Because of the above rules, it is possible for an updating command to see an inconsistent snapshot: it can see the effects of concurrent updating commands on the same rows it is trying to update, but it does not see effects of those commands on other rows in the database. This behavior makes Read Committed mode unsuitable for commands that involve complex search conditions; however, it is just right for simpler cases. For example, consider updating bank balances with transactions like:
  </p>
  <pre class=""screen"">
BEGIN;
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
COMMIT;
</pre>
  <p>
   If two such transactions concurrently try to change the balance of account 12345, we clearly want the second transaction to start with the updated version of the account's row. Because each command is affecting only a predetermined row, letting it see the updated version of the row does not create any troublesome inconsistency.
  </p>
  <p>
   More complex usage can produce undesirable results in Read Committed mode. For example, consider a
   <code class=""command"">
    DELETE
   </code>
   command operating on data that is being both added and removed from its restriction criteria by another command, e.g., assume
   <code class=""literal"">
    website
   </code>
   is a two-row table with
   <code class=""literal"">
    website.hits
   </code>
   equaling
   <code class=""literal"">
    9
   </code>
   and
   <code class=""literal"">
    10
   </code>
   :
  </p>
  <pre class=""screen"">
BEGIN;
UPDATE website SET hits = hits + 1;
-- run from another session:  DELETE FROM website WHERE hits = 10;
COMMIT;
</pre>
  <p>
   The
   <code class=""command"">
    DELETE
   </code>
   will have no effect even though there is a
   <code class=""literal"">
    website.hits = 10
   </code>
   row before and after the
   <code class=""command"">
    UPDATE
   </code>
   . This occurs because the pre-update row value
   <code class=""literal"">
    9
   </code>
   is skipped, and when the
   <code class=""command"">
    UPDATE
   </code>
   completes and
   <code class=""command"">
    DELETE
   </code>
   obtains a lock, the new row value is no longer
   <code class=""literal"">
    10
   </code>
   but
   <code class=""literal"">
    11
   </code>
   , which no longer matches the criteria.
  </p>
  <p>
   Because Read Committed mode starts each command with a new snapshot that includes all transactions committed up to that instant, subsequent commands in the same transaction will see the effects of the committed concurrent transaction in any case. The point at issue above is whether or not a
   <span class=""emphasis"">
    <em>
     single
    </em>
   </span>
   command sees an absolutely consistent view of the database.
  </p>
  <p>
   The partial transaction isolation provided by Read Committed mode is adequate for many applications, and this mode is fast and simple to use; however, it is not sufficient for all cases. Applications that do complex queries and updates might require a more rigorously consistent view of the database than Read Committed mode provides.
  </p>
 </div>
 <div class=""sect2"" id=""XACT-REPEATABLE-READ"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.2.2. Repeatable Read Isolation Level
      <a class=""id_link"" href=""#XACT-REPEATABLE-READ"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.5.12.2"" name=""id-1.5.12.5.12.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.5.12.3"" name=""id-1.5.12.5.12.3"">
  </a>
  <p>
   The
   <em class=""firstterm"">
    Repeatable Read
   </em>
   isolation level only sees data committed before the transaction began; it never sees either uncommitted data or changes committed by concurrent transactions during the transaction's execution. (However, each query does see the effects of previous updates executed within its own transaction, even though they are not yet committed.) This is a stronger guarantee than is required by the
   <acronym class=""acronym"">
    SQL
   </acronym>
   standard for this isolation level, and prevents all of the phenomena described in
   <a class=""xref"" href=""transaction-iso.html#MVCC-ISOLEVEL-TABLE"" title=""Table 13.1. Transaction Isolation Levels"">
    Table 13.1
   </a>
   except for serialization anomalies. As mentioned above, this is specifically allowed by the standard, which only describes the
   <span class=""emphasis"">
    <em>
     minimum
    </em>
   </span>
   protections each isolation level must provide.
  </p>
  <p>
   This level is different from Read Committed in that a query in a repeatable read transaction sees a snapshot as of the start of the first non-transaction-control statement in the
   <span class=""emphasis"">
    <em>
     transaction
    </em>
   </span>
   , not as of the start of the current statement within the transaction. Thus, successive
   <code class=""command"">
    SELECT
   </code>
   commands within a
   <span class=""emphasis"">
    <em>
     single
    </em>
   </span>
   transaction see the same data, i.e., they do not see changes made by other transactions that committed after their own transaction started.
  </p>
  <p>
   Applications using this level must be prepared to retry transactions due to serialization failures.
  </p>
  <p>
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   ,
   <code class=""command"">
    MERGE
   </code>
   ,
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   , and
   <code class=""command"">
    SELECT FOR SHARE
   </code>
   commands behave the same as
   <code class=""command"">
    SELECT
   </code>
   in terms of searching for target rows: they will only find target rows that were committed as of the transaction start time. However, such a target row might have already been updated (or deleted or locked) by another concurrent transaction by the time it is found. In this case, the repeatable read transaction will wait for the first updating transaction to commit or roll back (if it is still in progress). If the first updater rolls back, then its effects are negated and the repeatable read transaction can proceed with updating the originally found row. But if the first updater commits (and actually updated or deleted the row, not just locked it) then the repeatable read transaction will be rolled back with the message
  </p>
  <pre class=""screen"">
ERROR:  could not serialize access due to concurrent update
</pre>
  <p>
   because a repeatable read transaction cannot modify or lock rows changed by other transactions after the repeatable read transaction began.
  </p>
  <p>
   When an application receives this error message, it should abort the current transaction and retry the whole transaction from the beginning. The second time through, the transaction will see the previously-committed change as part of its initial view of the database, so there is no logical conflict in using the new version of the row as the starting point for the new transaction's update.
  </p>
  <p>
   Note that only updating transactions might need to be retried; read-only transactions will never have serialization conflicts.
  </p>
  <p>
   The Repeatable Read mode provides a rigorous guarantee that each transaction sees a completely stable view of the database. However, this view will not necessarily always be consistent with some serial (one at a time) execution of concurrent transactions of the same level. For example, even a read-only transaction at this level may see a control record updated to show that a batch has been completed but
   <span class=""emphasis"">
    <em>
     not
    </em>
   </span>
   see one of the detail records which is logically part of the batch because it read an earlier revision of the control record. Attempts to enforce business rules by transactions running at this isolation level are not likely to work correctly without careful use of explicit locks to block conflicting transactions.
  </p>
  <p>
   The Repeatable Read isolation level is implemented using a technique known in academic database literature and in some other database products as
   <em class=""firstterm"">
    Snapshot Isolation
   </em>
   . Differences in behavior and performance may be observed when compared with systems that use a traditional locking technique that reduces concurrency. Some other systems may even offer Repeatable Read and Snapshot Isolation as distinct isolation levels with different behavior. The permitted phenomena that distinguish the two techniques were not formalized by database researchers until after the SQL standard was developed, and are outside the scope of this manual. For a full treatment, please see
   <a class=""xref"" href=""biblio.html#BERENSON95"">
    [berenson95]
   </a>
   .
  </p>
  <div class=""note"">
   <h3 class=""title"">
    Note
   </h3>
   <p>
    Prior to
    <span class=""productname"">
     PostgreSQL
    </span>
    version 9.1, a request for the Serializable transaction isolation level provided exactly the same behavior described here. To retain the legacy Serializable behavior, Repeatable Read should now be requested.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""XACT-SERIALIZABLE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.2.3. Serializable Isolation Level
      <a class=""id_link"" href=""#XACT-SERIALIZABLE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.5.13.2"" name=""id-1.5.12.5.13.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.5.13.3"" name=""id-1.5.12.5.13.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.5.13.4"" name=""id-1.5.12.5.13.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.5.13.5"" name=""id-1.5.12.5.13.5"">
  </a>
  <p>
   The
   <em class=""firstterm"">
    Serializable
   </em>
   isolation level provides the strictest transaction isolation. This level emulates serial transaction execution for all committed transactions; as if transactions had been executed one after another, serially, rather than concurrently. However, like the Repeatable Read level, applications using this level must be prepared to retry transactions due to serialization failures. In fact, this isolation level works exactly the same as Repeatable Read except that it also monitors for conditions which could make execution of a concurrent set of serializable transactions behave in a manner inconsistent with all possible serial (one at a time) executions of those transactions. This monitoring does not introduce any blocking beyond that present in repeatable read, but there is some overhead to the monitoring, and detection of the conditions which could cause a
   <em class=""firstterm"">
    serialization anomaly
   </em>
   will trigger a
   <em class=""firstterm"">
    serialization failure
   </em>
   .
  </p>
  <p>
   As an example, consider a table
   <code class=""structname"">
    mytab
   </code>
   , initially containing:
  </p>
  <pre class=""screen"">
 class | value
-------+-------
     1 |    10
     1 |    20
     2 |   100
     2 |   200
</pre>
  <p>
   Suppose that serializable transaction A computes:
  </p>
  <pre class=""screen"">
SELECT SUM(value) FROM mytab WHERE class = 1;
</pre>
  <p>
   and then inserts the result (30) as the
   <code class=""structfield"">
    value
   </code>
   in a new row with
   <code class=""structfield"">
    class
   </code>
   <code class=""literal"">
    = 2
   </code>
   . Concurrently, serializable transaction B computes:
  </p>
  <pre class=""screen"">
SELECT SUM(value) FROM mytab WHERE class = 2;
</pre>
  <p>
   and obtains the result 300, which it inserts in a new row with
   <code class=""structfield"">
    class
   </code>
   <code class=""literal"">
    = 1
   </code>
   . Then both transactions try to commit. If either transaction were running at the Repeatable Read isolation level, both would be allowed to commit; but since there is no serial order of execution consistent with the result, using Serializable transactions will allow one transaction to commit and will roll the other back with this message:
  </p>
  <pre class=""screen"">
ERROR:  could not serialize access due to read/write dependencies among transactions
</pre>
  <p>
   This is because if A had executed before B, B would have computed the sum 330, not 300, and similarly the other order would have resulted in a different sum computed by A.
  </p>
  <p>
   When relying on Serializable transactions to prevent anomalies, it is important that any data read from a permanent user table not be considered valid until the transaction which read it has successfully committed. This is true even for read-only transactions, except that data read within a
   <em class=""firstterm"">
    deferrable
   </em>
   read-only transaction is known to be valid as soon as it is read, because such a transaction waits until it can acquire a snapshot guaranteed to be free from such problems before starting to read any data. In all other cases applications must not depend on results read during a transaction that later aborted; instead, they should retry the transaction until it succeeds.
  </p>
  <p>
   To guarantee true serializability
   <span class=""productname"">
    PostgreSQL
   </span>
   uses
   <em class=""firstterm"">
    predicate locking
   </em>
   , which means that it keeps locks which allow it to determine when a write would have had an impact on the result of a previous read from a concurrent transaction, had it run first. In
   <span class=""productname"">
    PostgreSQL
   </span>
   these locks do not cause any blocking and therefore can
   <span class=""emphasis"">
    <em>
     not
    </em>
   </span>
   play any part in causing a deadlock. They are used to identify and flag dependencies among concurrent Serializable transactions which in certain combinations can lead to serialization anomalies. In contrast, a Read Committed or Repeatable Read transaction which wants to ensure data consistency may need to take out a lock on an entire table, which could block other users attempting to use that table, or it may use
   <code class=""literal"">
    SELECT FOR UPDATE
   </code>
   or
   <code class=""literal"">
    SELECT FOR SHARE
   </code>
   which not only can block other transactions but cause disk access.
  </p>
  <p>
   Predicate locks in
   <span class=""productname"">
    PostgreSQL
   </span>
   , like in most other database systems, are based on data actually accessed by a transaction. These will show up in the
   <a class=""link"" href=""view-pg-locks.html"" title=""52.12. pg_locks"">
    <code class=""structname"">
     pg_locks
    </code>
   </a>
   system view with a
   <code class=""literal"">
    mode
   </code>
   of
   <code class=""literal"">
    SIReadLock
   </code>
   . The particular locks acquired during execution of a query will depend on the plan used by the query, and multiple finer-grained locks (e.g., tuple locks) may be combined into fewer coarser-grained locks (e.g., page locks) during the course of the transaction to prevent exhaustion of the memory used to track the locks. A
   <code class=""literal"">
    READ ONLY
   </code>
   transaction may be able to release its SIRead locks before completion, if it detects that no conflicts can still occur which could lead to a serialization anomaly. In fact,
   <code class=""literal"">
    READ ONLY
   </code>
   transactions will often be able to establish that fact at startup and avoid taking any predicate locks. If you explicitly request a
   <code class=""literal"">
    SERIALIZABLE READ ONLY DEFERRABLE
   </code>
   transaction, it will block until it can establish this fact. (This is the
   <span class=""emphasis"">
    <em>
     only
    </em>
   </span>
   case where Serializable transactions block but Repeatable Read transactions don't.) On the other hand, SIRead locks often need to be kept past transaction commit, until overlapping read write transactions complete.
  </p>
  <p>
   Consistent use of Serializable transactions can simplify development. The guarantee that any set of successfully committed concurrent Serializable transactions will have the same effect as if they were run one at a time means that if you can demonstrate that a single transaction, as written, will do the right thing when run by itself, you can have confidence that it will do the right thing in any mix of Serializable transactions, even without any information about what those other transactions might do, or it will not successfully commit. It is important that an environment which uses this technique have a generalized way of handling serialization failures (which always return with an SQLSTATE value of '40001'), because it will be very hard to predict exactly which transactions might contribute to the read/write dependencies and need to be rolled back to prevent serialization anomalies. The monitoring of read/write dependencies has a cost, as does the restart of transactions which are terminated with a serialization failure, but balanced against the cost and blocking involved in use of explicit locks and
   <code class=""literal"">
    SELECT FOR UPDATE
   </code>
   or
   <code class=""literal"">
    SELECT FOR SHARE
   </code>
   , Serializable transactions are the best performance choice for some environments.
  </p>
  <p>
   While
   <span class=""productname"">
    PostgreSQL
   </span>
   's Serializable transaction isolation level only allows concurrent transactions to commit if it can prove there is a serial order of execution that would produce the same effect, it doesn't always prevent errors from being raised that would not occur in true serial execution. In particular, it is possible to see unique constraint violations caused by conflicts with overlapping Serializable transactions even after explicitly checking that the key isn't present before attempting to insert it. This can be avoided by making sure that
   <span class=""emphasis"">
    <em>
     all
    </em>
   </span>
   Serializable transactions that insert potentially conflicting keys explicitly check if they can do so first. For example, imagine an application that asks the user for a new key and then checks that it doesn't exist already by trying to select it first, or generates a new key by selecting the maximum existing key and adding one. If some Serializable transactions insert new keys directly without following this protocol, unique constraints violations might be reported even in cases where they could not occur in a serial execution of the concurrent transactions.
  </p>
  <p>
   For optimal performance when relying on Serializable transactions for concurrency control, these issues should be considered:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Declare transactions as
      <code class=""literal"">
       READ ONLY
      </code>
      when possible.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Control the number of active connections, using a connection pool if needed. This is always an important performance consideration, but it can be particularly important in a busy system using Serializable transactions.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Don't put more into a single transaction than needed for integrity purposes.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Don't leave connections dangling
      <span class=""quote"">
       “
       <span class=""quote"">
        idle in transaction
       </span>
       ”
      </span>
      longer than necessary. The configuration parameter
      <a class=""xref"" href=""runtime-config-client.html#GUC-IDLE-IN-TRANSACTION-SESSION-TIMEOUT"">
       idle_in_transaction_session_timeout
      </a>
      may be used to automatically disconnect lingering sessions.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Eliminate explicit locks,
      <code class=""literal"">
       SELECT FOR UPDATE
      </code>
      , and
      <code class=""literal"">
       SELECT FOR SHARE
      </code>
      where no longer needed due to the protections automatically provided by Serializable transactions.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      When the system is forced to combine multiple page-level predicate locks into a single relation-level predicate lock because the predicate lock table is short of memory, an increase in the rate of serialization failures may occur. You can avoid this by increasing
      <a class=""xref"" href=""runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-TRANSACTION"">
       max_pred_locks_per_transaction
      </a>
      ,
      <a class=""xref"" href=""runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-RELATION"">
       max_pred_locks_per_relation
      </a>
      , and/or
      <a class=""xref"" href=""runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-PAGE"">
       max_pred_locks_per_page
      </a>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      A sequential scan will always necessitate a relation-level predicate lock. This can result in an increased rate of serialization failures. It may be helpful to encourage the use of index scans by reducing
      <a class=""xref"" href=""runtime-config-query.html#GUC-RANDOM-PAGE-COST"">
       random_page_cost
      </a>
      and/or increasing
      <a class=""xref"" href=""runtime-config-query.html#GUC-CPU-TUPLE-COST"">
       cpu_tuple_cost
      </a>
      . Be sure to weigh any decrease in transaction rollbacks and restarts against any overall change in query execution time.
     </p>
    </li>
   </ul>
  </div>
  <p>
   The Serializable isolation level is implemented using a technique known in academic database literature as Serializable Snapshot Isolation, which builds on Snapshot Isolation by adding checks for serialization anomalies. Some differences in behavior and performance may be observed when compared with other systems that use a traditional locking technique. Please see
   <a class=""xref"" href=""biblio.html#PORTS12"">
    [ports12]
   </a>
   for detailed information.
  </p>
 </div>
</div>
"
13. Concurrency Control,13.3. Explicit Locking,https://www.postgresql.org/docs/17/explicit-locking.html,"<div class=""sect1"" id=""EXPLICIT-LOCKING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.3. Explicit Locking
     <a class=""id_link"" href=""#EXPLICIT-LOCKING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""explicit-locking.html#LOCKING-TABLES"">
      13.3.1. Table-Level Locks
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""explicit-locking.html#LOCKING-ROWS"">
      13.3.2. Row-Level Locks
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""explicit-locking.html#LOCKING-PAGES"">
      13.3.3. Page-Level Locks
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""explicit-locking.html#LOCKING-DEADLOCKS"">
      13.3.4. Deadlocks
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""explicit-locking.html#ADVISORY-LOCKS"">
      13.3.5. Advisory Locks
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.12.6.2"" name=""id-1.5.12.6.2"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  provides various lock modes to control concurrent access to data in tables. These modes can be used for application-controlled locking in situations where
  <acronym class=""acronym"">
   MVCC
  </acronym>
  does not give the desired behavior. Also, most
  <span class=""productname"">
   PostgreSQL
  </span>
  commands automatically acquire locks of appropriate modes to ensure that referenced tables are not dropped or modified in incompatible ways while the command executes. (For example,
  <code class=""command"">
   TRUNCATE
  </code>
  cannot safely be executed concurrently with other operations on the same table, so it obtains an
  <code class=""literal"">
   ACCESS EXCLUSIVE
  </code>
  lock on the table to enforce that.)
 </p>
 <p>
  To examine a list of the currently outstanding locks in a database server, use the
  <a class=""link"" href=""view-pg-locks.html"" title=""52.12. pg_locks"">
   <code class=""structname"">
    pg_locks
   </code>
  </a>
  system view. For more information on monitoring the status of the lock manager subsystem, refer to
  <a class=""xref"" href=""monitoring.html"" title=""Chapter 27. Monitoring Database Activity"">
   Chapter 27
  </a>
  .
 </p>
 <div class=""sect2"" id=""LOCKING-TABLES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.3.1. Table-Level Locks
      <a class=""id_link"" href=""#LOCKING-TABLES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.6.5.2"" name=""id-1.5.12.6.5.2"">
  </a>
  <p>
   The list below shows the available lock modes and the contexts in which they are used automatically by
   <span class=""productname"">
    PostgreSQL
   </span>
   . You can also acquire any of these locks explicitly with the command
   <a class=""xref"" href=""sql-lock.html"" title=""LOCK"">
    <span class=""refentrytitle"">
     LOCK
    </span>
   </a>
   . Remember that all of these lock modes are table-level locks, even if the name contains the word
   <span class=""quote"">
    “
    <span class=""quote"">
     row
    </span>
    ”
   </span>
   ; the names of the lock modes are historical. To some extent the names reflect the typical usage of each lock mode — but the semantics are all the same. The only real difference between one lock mode and another is the set of lock modes with which each conflicts (see
   <a class=""xref"" href=""explicit-locking.html#TABLE-LOCK-COMPATIBILITY"" title=""Table 13.2. Conflicting Lock Modes"">
    Table 13.2
   </a>
   ). Two transactions cannot hold locks of conflicting modes on the same table at the same time. (However, a transaction never conflicts with itself. For example, it might acquire
   <code class=""literal"">
    ACCESS EXCLUSIVE
   </code>
   lock and later acquire
   <code class=""literal"">
    ACCESS SHARE
   </code>
   lock on the same table.) Non-conflicting lock modes can be held concurrently by many transactions. Notice in particular that some lock modes are self-conflicting (for example, an
   <code class=""literal"">
    ACCESS EXCLUSIVE
   </code>
   lock cannot be held by more than one transaction at a time) while others are not self-conflicting (for example, an
   <code class=""literal"">
    ACCESS SHARE
   </code>
   lock can be held by multiple transactions).
  </p>
  <div class=""variablelist"">
   <p class=""title"">
    <strong>
     Table-Level Lock Modes
    </strong>
   </p>
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <code class=""literal"">
       ACCESS SHARE
      </code>
      (
      <code class=""literal"">
       AccessShareLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock mode only.
     </p>
     <p>
      The
      <code class=""command"">
       SELECT
      </code>
      command acquires a lock of this mode on referenced tables. In general, any query that only
      <span class=""emphasis"">
       <em>
        reads
       </em>
      </span>
      a table and does not modify it will acquire this lock mode.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       ROW SHARE
      </code>
      (
      <code class=""literal"">
       RowShareLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       EXCLUSIVE
      </code>
      and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes.
     </p>
     <p>
      The
      <code class=""command"">
       SELECT
      </code>
      command acquires a lock of this mode on all tables on which one of the
      <code class=""option"">
       FOR UPDATE
      </code>
      ,
      <code class=""option"">
       FOR NO KEY UPDATE
      </code>
      ,
      <code class=""option"">
       FOR SHARE
      </code>
      , or
      <code class=""option"">
       FOR KEY SHARE
      </code>
      options is specified (in addition to
      <code class=""literal"">
       ACCESS SHARE
      </code>
      locks on any other tables that are referenced without any explicit
      <code class=""option"">
       FOR ...
      </code>
      locking option).
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       ROW EXCLUSIVE
      </code>
      (
      <code class=""literal"">
       RowExclusiveLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       SHARE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes.
     </p>
     <p>
      The commands
      <code class=""command"">
       UPDATE
      </code>
      ,
      <code class=""command"">
       DELETE
      </code>
      ,
      <code class=""command"">
       INSERT
      </code>
      , and
      <code class=""command"">
       MERGE
      </code>
      acquire this lock mode on the target table (in addition to
      <code class=""literal"">
       ACCESS SHARE
      </code>
      locks on any other referenced tables). In general, this lock mode will be acquired by any command that
      <span class=""emphasis"">
       <em>
        modifies data
       </em>
      </span>
      in a table.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      (
      <code class=""literal"">
       ShareUpdateExclusiveLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes. This mode protects a table against concurrent schema changes and
      <code class=""command"">
       VACUUM
      </code>
      runs.
     </p>
     <p>
      Acquired by
      <code class=""command"">
       VACUUM
      </code>
      (without
      <code class=""option"">
       FULL
      </code>
      ),
      <code class=""command"">
       ANALYZE
      </code>
      ,
      <code class=""command"">
       CREATE INDEX CONCURRENTLY
      </code>
      ,
      <code class=""command"">
       CREATE STATISTICS
      </code>
      ,
      <code class=""command"">
       COMMENT ON
      </code>
      ,
      <code class=""command"">
       REINDEX CONCURRENTLY
      </code>
      , and certain
      <a class=""link"" href=""sql-alterindex.html"" title=""ALTER INDEX"">
       <code class=""command"">
        ALTER INDEX
       </code>
      </a>
      and
      <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
       <code class=""command"">
        ALTER TABLE
       </code>
      </a>
      variants (for full details see the documentation of these commands).
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       SHARE
      </code>
      (
      <code class=""literal"">
       ShareLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes. This mode protects a table against concurrent data changes.
     </p>
     <p>
      Acquired by
      <code class=""command"">
       CREATE INDEX
      </code>
      (without
      <code class=""option"">
       CONCURRENTLY
      </code>
      ).
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      (
      <code class=""literal"">
       ShareRowExclusiveLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes. This mode protects a table against concurrent data changes, and is self-exclusive so that only one session can hold it at a time.
     </p>
     <p>
      Acquired by
      <code class=""command"">
       CREATE TRIGGER
      </code>
      and some forms of
      <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
       <code class=""command"">
        ALTER TABLE
       </code>
      </a>
      .
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       EXCLUSIVE
      </code>
      (
      <code class=""literal"">
       ExclusiveLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with the
      <code class=""literal"">
       ROW SHARE
      </code>
      ,
      <code class=""literal"">
       ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      lock modes. This mode allows only concurrent
      <code class=""literal"">
       ACCESS SHARE
      </code>
      locks, i.e., only reads from the table can proceed in parallel with a transaction holding this lock mode.
     </p>
     <p>
      Acquired by
      <code class=""command"">
       REFRESH MATERIALIZED VIEW CONCURRENTLY
      </code>
      .
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      (
      <code class=""literal"">
       AccessExclusiveLock
      </code>
      )
     </span>
    </dt>
    <dd>
     <p>
      Conflicts with locks of all modes (
      <code class=""literal"">
       ACCESS SHARE
      </code>
      ,
      <code class=""literal"">
       ROW SHARE
      </code>
      ,
      <code class=""literal"">
       ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE UPDATE EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       SHARE
      </code>
      ,
      <code class=""literal"">
       SHARE ROW EXCLUSIVE
      </code>
      ,
      <code class=""literal"">
       EXCLUSIVE
      </code>
      , and
      <code class=""literal"">
       ACCESS EXCLUSIVE
      </code>
      ). This mode guarantees that the holder is the only transaction accessing the table in any way.
     </p>
     <p>
      Acquired by the
      <code class=""command"">
       DROP TABLE
      </code>
      ,
      <code class=""command"">
       TRUNCATE
      </code>
      ,
      <code class=""command"">
       REINDEX
      </code>
      ,
      <code class=""command"">
       CLUSTER
      </code>
      ,
      <code class=""command"">
       VACUUM FULL
      </code>
      , and
      <code class=""command"">
       REFRESH MATERIALIZED VIEW
      </code>
      (without
      <code class=""option"">
       CONCURRENTLY
      </code>
      ) commands. Many forms of
      <code class=""command"">
       ALTER INDEX
      </code>
      and
      <code class=""command"">
       ALTER TABLE
      </code>
      also acquire a lock at this level. This is also the default lock mode for
      <code class=""command"">
       LOCK TABLE
      </code>
      statements that do not specify a mode explicitly.
     </p>
    </dd>
   </dl>
  </div>
  <div class=""tip"">
   <h3 class=""title"">
    Tip
   </h3>
   <p>
    Only an
    <code class=""literal"">
     ACCESS EXCLUSIVE
    </code>
    lock blocks a
    <code class=""command"">
     SELECT
    </code>
    (without
    <code class=""option"">
     FOR UPDATE/SHARE
    </code>
    ) statement.
   </p>
  </div>
  <p>
   Once acquired, a lock is normally held until the end of the transaction. But if a lock is acquired after establishing a savepoint, the lock is released immediately if the savepoint is rolled back to. This is consistent with the principle that
   <code class=""command"">
    ROLLBACK
   </code>
   cancels all effects of the commands since the savepoint. The same holds for locks acquired within a
   <span class=""application"">
    PL/pgSQL
   </span>
   exception block: an error escape from the block releases locks acquired within it.
  </p>
  <div class=""table"" id=""TABLE-LOCK-COMPATIBILITY"">
   <p class=""title"">
    <strong>
     Table 13.2. Conflicting Lock Modes
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Conflicting Lock Modes"">
     <colgroup>
      <col/>
      <col class=""lockst""/>
      <col/>
      <col/>
      <col/>
      <col/>
      <col/>
      <col/>
      <col class=""lockend""/>
     </colgroup>
     <thead>
      <tr>
       <th rowspan=""2"">
        Requested Lock Mode
       </th>
       <th align=""center"" colspan=""8"">
        Existing Lock Mode
       </th>
      </tr>
      <tr>
       <th>
        <code class=""literal"">
         ACCESS SHARE
        </code>
       </th>
       <th>
        <code class=""literal"">
         ROW SHARE
        </code>
       </th>
       <th>
        <code class=""literal"">
         ROW EXCL.
        </code>
       </th>
       <th>
        <code class=""literal"">
         SHARE UPDATE EXCL.
        </code>
       </th>
       <th>
        <code class=""literal"">
         SHARE
        </code>
       </th>
       <th>
        <code class=""literal"">
         SHARE ROW EXCL.
        </code>
       </th>
       <th>
        <code class=""literal"">
         EXCL.
        </code>
       </th>
       <th>
        <code class=""literal"">
         ACCESS EXCL.
        </code>
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        <code class=""literal"">
         ACCESS SHARE
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         ROW SHARE
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         ROW EXCL.
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         SHARE UPDATE EXCL.
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         SHARE
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         SHARE ROW EXCL.
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         EXCL.
        </code>
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        <code class=""literal"">
         ACCESS EXCL.
        </code>
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""LOCKING-ROWS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.3.2. Row-Level Locks
      <a class=""id_link"" href=""#LOCKING-ROWS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   In addition to table-level locks, there are row-level locks, which are listed as below with the contexts in which they are used automatically by
   <span class=""productname"">
    PostgreSQL
   </span>
   . See
   <a class=""xref"" href=""explicit-locking.html#ROW-LOCK-COMPATIBILITY"" title=""Table 13.3. Conflicting Row-Level Locks"">
    Table 13.3
   </a>
   for a complete table of row-level lock conflicts. Note that a transaction can hold conflicting locks on the same row, even in different subtransactions; but other than that, two transactions can never hold conflicting locks on the same row. Row-level locks do not affect data querying; they block only
   <span class=""emphasis"">
    <em>
     writers and lockers
    </em>
   </span>
   to the same row. Row-level locks are released at transaction end or during savepoint rollback, just like table-level locks.
  </p>
  <div class=""variablelist"">
   <p class=""title"">
    <strong>
     Row-Level Lock Modes
    </strong>
   </p>
   <dl class=""variablelist"">
    <dt>
     <span class=""term"">
      <code class=""literal"">
       FOR UPDATE
      </code>
     </span>
    </dt>
    <dd>
     <p>
      <code class=""literal"">
       FOR UPDATE
      </code>
      causes the rows retrieved by the
      <code class=""command"">
       SELECT
      </code>
      statement to be locked as though for update. This prevents them from being locked, modified or deleted by other transactions until the current transaction ends. That is, other transactions that attempt
      <code class=""command"">
       UPDATE
      </code>
      ,
      <code class=""command"">
       DELETE
      </code>
      ,
      <code class=""command"">
       SELECT FOR UPDATE
      </code>
      ,
      <code class=""command"">
       SELECT FOR NO KEY UPDATE
      </code>
      ,
      <code class=""command"">
       SELECT FOR SHARE
      </code>
      or
      <code class=""command"">
       SELECT FOR KEY SHARE
      </code>
      of these rows will be blocked until the current transaction ends; conversely,
      <code class=""command"">
       SELECT FOR UPDATE
      </code>
      will wait for a concurrent transaction that has run any of those commands on the same row, and will then lock and return the updated row (or no row, if the row was deleted). Within a
      <code class=""literal"">
       REPEATABLE READ
      </code>
      or
      <code class=""literal"">
       SERIALIZABLE
      </code>
      transaction, however, an error will be thrown if a row to be locked has changed since the transaction started. For further discussion see
      <a class=""xref"" href=""applevel-consistency.html"" title=""13.4. Data Consistency Checks at the Application Level"">
       Section 13.4
      </a>
      .
     </p>
     <p>
      The
      <code class=""literal"">
       FOR UPDATE
      </code>
      lock mode is also acquired by any
      <code class=""command"">
       DELETE
      </code>
      on a row, and also by an
      <code class=""command"">
       UPDATE
      </code>
      that modifies the values of certain columns. Currently, the set of columns considered for the
      <code class=""command"">
       UPDATE
      </code>
      case are those that have a unique index on them that can be used in a foreign key (so partial indexes and expressional indexes are not considered), but this may change in the future.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       FOR NO KEY UPDATE
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Behaves similarly to
      <code class=""literal"">
       FOR UPDATE
      </code>
      , except that the lock acquired is weaker: this lock will not block
      <code class=""literal"">
       SELECT FOR KEY SHARE
      </code>
      commands that attempt to acquire a lock on the same rows. This lock mode is also acquired by any
      <code class=""command"">
       UPDATE
      </code>
      that does not acquire a
      <code class=""literal"">
       FOR UPDATE
      </code>
      lock.
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       FOR SHARE
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Behaves similarly to
      <code class=""literal"">
       FOR NO KEY UPDATE
      </code>
      , except that it acquires a shared lock rather than exclusive lock on each retrieved row. A shared lock blocks other transactions from performing
      <code class=""command"">
       UPDATE
      </code>
      ,
      <code class=""command"">
       DELETE
      </code>
      ,
      <code class=""command"">
       SELECT FOR UPDATE
      </code>
      or
      <code class=""command"">
       SELECT FOR NO KEY UPDATE
      </code>
      on these rows, but it does not prevent them from performing
      <code class=""command"">
       SELECT FOR SHARE
      </code>
      or
      <code class=""command"">
       SELECT FOR KEY SHARE
      </code>
      .
     </p>
    </dd>
    <dt>
     <span class=""term"">
      <code class=""literal"">
       FOR KEY SHARE
      </code>
     </span>
    </dt>
    <dd>
     <p>
      Behaves similarly to
      <code class=""literal"">
       FOR SHARE
      </code>
      , except that the lock is weaker:
      <code class=""literal"">
       SELECT FOR UPDATE
      </code>
      is blocked, but not
      <code class=""literal"">
       SELECT FOR NO KEY UPDATE
      </code>
      . A key-shared lock blocks other transactions from performing
      <code class=""command"">
       DELETE
      </code>
      or any
      <code class=""command"">
       UPDATE
      </code>
      that changes the key values, but not other
      <code class=""command"">
       UPDATE
      </code>
      , and neither does it prevent
      <code class=""command"">
       SELECT FOR NO KEY UPDATE
      </code>
      ,
      <code class=""command"">
       SELECT FOR SHARE
      </code>
      , or
      <code class=""command"">
       SELECT FOR KEY SHARE
      </code>
      .
     </p>
    </dd>
   </dl>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   doesn't remember any information about modified rows in memory, so there is no limit on the number of rows locked at one time. However, locking a row might cause a disk write, e.g.,
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   modifies selected rows to mark them locked, and so will result in disk writes.
  </p>
  <div class=""table"" id=""ROW-LOCK-COMPATIBILITY"">
   <p class=""title"">
    <strong>
     Table 13.3. Conflicting Row-Level Locks
    </strong>
   </p>
   <div class=""table-contents"">
    <table border=""1"" class=""table"" summary=""Conflicting Row-Level Locks"">
     <colgroup>
      <col class=""col1""/>
      <col class=""lockst""/>
      <col class=""col3""/>
      <col class=""col4""/>
      <col class=""lockend""/>
     </colgroup>
     <thead>
      <tr>
       <th rowspan=""2"">
        Requested Lock Mode
       </th>
       <th colspan=""4"">
        Current Lock Mode
       </th>
      </tr>
      <tr>
       <th>
        FOR KEY SHARE
       </th>
       <th>
        FOR SHARE
       </th>
       <th>
        FOR NO KEY UPDATE
       </th>
       <th>
        FOR UPDATE
       </th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td>
        FOR KEY SHARE
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        FOR SHARE
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        FOR NO KEY UPDATE
       </td>
       <td align=""center"">
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
      <tr>
       <td>
        FOR UPDATE
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
       <td align=""center"">
        X
       </td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <br class=""table-break""/>
 </div>
 <div class=""sect2"" id=""LOCKING-PAGES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.3.3. Page-Level Locks
      <a class=""id_link"" href=""#LOCKING-PAGES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   In addition to table and row locks, page-level share/exclusive locks are used to control read/write access to table pages in the shared buffer pool. These locks are released immediately after a row is fetched or updated. Application developers normally need not be concerned with page-level locks, but they are mentioned here for completeness.
  </p>
 </div>
 <div class=""sect2"" id=""LOCKING-DEADLOCKS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.3.4. Deadlocks
      <a class=""id_link"" href=""#LOCKING-DEADLOCKS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.6.8.2"" name=""id-1.5.12.6.8.2"">
  </a>
  <p>
   The use of explicit locking can increase the likelihood of
   <em class=""firstterm"">
    deadlocks
   </em>
   , wherein two (or more) transactions each hold locks that the other wants. For example, if transaction 1 acquires an exclusive lock on table A and then tries to acquire an exclusive lock on table B, while transaction 2 has already exclusive-locked table B and now wants an exclusive lock on table A, then neither one can proceed.
   <span class=""productname"">
    PostgreSQL
   </span>
   automatically detects deadlock situations and resolves them by aborting one of the transactions involved, allowing the other(s) to complete. (Exactly which transaction will be aborted is difficult to predict and should not be relied upon.)
  </p>
  <p>
   Note that deadlocks can also occur as the result of row-level locks (and thus, they can occur even if explicit locking is not used). Consider the case in which two concurrent transactions modify a table. The first transaction executes:
  </p>
  <pre class=""screen"">
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 11111;
</pre>
  <p>
   This acquires a row-level lock on the row with the specified account number. Then, the second transaction executes:
  </p>
  <pre class=""screen"">
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 22222;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 11111;
</pre>
  <p>
   The first
   <code class=""command"">
    UPDATE
   </code>
   statement successfully acquires a row-level lock on the specified row, so it succeeds in updating that row. However, the second
   <code class=""command"">
    UPDATE
   </code>
   statement finds that the row it is attempting to update has already been locked, so it waits for the transaction that acquired the lock to complete. Transaction two is now waiting on transaction one to complete before it continues execution. Now, transaction one executes:
  </p>
  <pre class=""screen"">
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 22222;
</pre>
  <p>
   Transaction one attempts to acquire a row-level lock on the specified row, but it cannot: transaction two already holds such a lock. So it waits for transaction two to complete. Thus, transaction one is blocked on transaction two, and transaction two is blocked on transaction one: a deadlock condition.
   <span class=""productname"">
    PostgreSQL
   </span>
   will detect this situation and abort one of the transactions.
  </p>
  <p>
   The best defense against deadlocks is generally to avoid them by being certain that all applications using a database acquire locks on multiple objects in a consistent order. In the example above, if both transactions had updated the rows in the same order, no deadlock would have occurred. One should also ensure that the first lock acquired on an object in a transaction is the most restrictive mode that will be needed for that object. If it is not feasible to verify this in advance, then deadlocks can be handled on-the-fly by retrying transactions that abort due to deadlocks.
  </p>
  <p>
   So long as no deadlock situation is detected, a transaction seeking either a table-level or row-level lock will wait indefinitely for conflicting locks to be released. This means it is a bad idea for applications to hold transactions open for long periods of time (e.g., while waiting for user input).
  </p>
 </div>
 <div class=""sect2"" id=""ADVISORY-LOCKS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.3.5. Advisory Locks
      <a class=""id_link"" href=""#ADVISORY-LOCKS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.12.6.9.2"" name=""id-1.5.12.6.9.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.12.6.9.3"" name=""id-1.5.12.6.9.3"">
  </a>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   provides a means for creating locks that have application-defined meanings. These are called
   <em class=""firstterm"">
    advisory locks
   </em>
   , because the system does not enforce their use — it is up to the application to use them correctly. Advisory locks can be useful for locking strategies that are an awkward fit for the MVCC model. For example, a common use of advisory locks is to emulate pessimistic locking strategies typical of so-called
   <span class=""quote"">
    “
    <span class=""quote"">
     flat file
    </span>
    ”
   </span>
   data management systems. While a flag stored in a table could be used for the same purpose, advisory locks are faster, avoid table bloat, and are automatically cleaned up by the server at the end of the session.
  </p>
  <p>
   There are two ways to acquire an advisory lock in
   <span class=""productname"">
    PostgreSQL
   </span>
   : at session level or at transaction level. Once acquired at session level, an advisory lock is held until explicitly released or the session ends. Unlike standard lock requests, session-level advisory lock requests do not honor transaction semantics: a lock acquired during a transaction that is later rolled back will still be held following the rollback, and likewise an unlock is effective even if the calling transaction fails later. A lock can be acquired multiple times by its owning process; for each completed lock request there must be a corresponding unlock request before the lock is actually released. Transaction-level lock requests, on the other hand, behave more like regular lock requests: they are automatically released at the end of the transaction, and there is no explicit unlock operation. This behavior is often more convenient than the session-level behavior for short-term usage of an advisory lock. Session-level and transaction-level lock requests for the same advisory lock identifier will block each other in the expected way. If a session already holds a given advisory lock, additional requests by it will always succeed, even if other sessions are awaiting the lock; this statement is true regardless of whether the existing lock hold and new request are at session level or transaction level.
  </p>
  <p>
   Like all locks in
   <span class=""productname"">
    PostgreSQL
   </span>
   , a complete list of advisory locks currently held by any session can be found in the
   <a class=""link"" href=""view-pg-locks.html"" title=""52.12. pg_locks"">
    <code class=""structname"">
     pg_locks
    </code>
   </a>
   system view.
  </p>
  <p>
   Both advisory locks and regular locks are stored in a shared memory pool whose size is defined by the configuration variables
   <a class=""xref"" href=""runtime-config-locks.html#GUC-MAX-LOCKS-PER-TRANSACTION"">
    max_locks_per_transaction
   </a>
   and
   <a class=""xref"" href=""runtime-config-connection.html#GUC-MAX-CONNECTIONS"">
    max_connections
   </a>
   . Care must be taken not to exhaust this memory or the server will be unable to grant any locks at all. This imposes an upper limit on the number of advisory locks grantable by the server, typically in the tens to hundreds of thousands depending on how the server is configured.
  </p>
  <p>
   In certain cases using advisory locking methods, especially in queries involving explicit ordering and
   <code class=""literal"">
    LIMIT
   </code>
   clauses, care must be taken to control the locks acquired because of the order in which SQL expressions are evaluated. For example:
  </p>
  <pre class=""screen"">
SELECT pg_advisory_lock(id) FROM foo WHERE id = 12345; -- ok
SELECT pg_advisory_lock(id) FROM foo WHERE id &gt; 12345 LIMIT 100; -- danger!
SELECT pg_advisory_lock(q.id) FROM
(
  SELECT id FROM foo WHERE id &gt; 12345 LIMIT 100
) q; -- ok
</pre>
  <p>
   In the above queries, the second form is dangerous because the
   <code class=""literal"">
    LIMIT
   </code>
   is not guaranteed to be applied before the locking function is executed. This might cause some locks to be acquired that the application was not expecting, and hence would fail to release (until it ends the session). From the point of view of the application, such locks would be dangling, although still viewable in
   <code class=""structname"">
    pg_locks
   </code>
   .
  </p>
  <p>
   The functions provided to manipulate advisory locks are described in
   <a class=""xref"" href=""functions-admin.html#FUNCTIONS-ADVISORY-LOCKS"" title=""9.28.10. Advisory Lock Functions"">
    Section 9.28.10
   </a>
   .
  </p>
 </div>
</div>
"
13. Concurrency Control,13.4. Data Consistency Checks at the Application Level,https://www.postgresql.org/docs/17/applevel-consistency.html,"<div class=""sect1"" id=""APPLEVEL-CONSISTENCY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.4. Data Consistency Checks at the Application Level
     <a class=""id_link"" href=""#APPLEVEL-CONSISTENCY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""applevel-consistency.html#SERIALIZABLE-CONSISTENCY"">
      13.4.1. Enforcing Consistency with Serializable Transactions
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""applevel-consistency.html#NON-SERIALIZABLE-CONSISTENCY"">
      13.4.2. Enforcing Consistency with Explicit Blocking Locks
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  It is very difficult to enforce business rules regarding data integrity using Read Committed transactions because the view of the data is shifting with each statement, and even a single statement may not restrict itself to the statement's snapshot if a write conflict occurs.
 </p>
 <p>
  While a Repeatable Read transaction has a stable view of the data throughout its execution, there is a subtle issue with using
  <acronym class=""acronym"">
   MVCC
  </acronym>
  snapshots for data consistency checks, involving something known as
  <em class=""firstterm"">
   read/write conflicts
  </em>
  . If one transaction writes data and a concurrent transaction attempts to read the same data (whether before or after the write), it cannot see the work of the other transaction. The reader then appears to have executed first regardless of which started first or which committed first. If that is as far as it goes, there is no problem, but if the reader also writes data which is read by a concurrent transaction there is now a transaction which appears to have run before either of the previously mentioned transactions. If the transaction which appears to have executed last actually commits first, it is very easy for a cycle to appear in a graph of the order of execution of the transactions. When such a cycle appears, integrity checks will not work correctly without some help.
 </p>
 <p>
  As mentioned in
  <a class=""xref"" href=""transaction-iso.html#XACT-SERIALIZABLE"" title=""13.2.3. Serializable Isolation Level"">
   Section 13.2.3
  </a>
  , Serializable transactions are just Repeatable Read transactions which add nonblocking monitoring for dangerous patterns of read/write conflicts. When a pattern is detected which could cause a cycle in the apparent order of execution, one of the transactions involved is rolled back to break the cycle.
 </p>
 <div class=""sect2"" id=""SERIALIZABLE-CONSISTENCY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.4.1. Enforcing Consistency with Serializable Transactions
      <a class=""id_link"" href=""#SERIALIZABLE-CONSISTENCY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   If the Serializable transaction isolation level is used for all writes and for all reads which need a consistent view of the data, no other effort is required to ensure consistency. Software from other environments which is written to use serializable transactions to ensure consistency should
   <span class=""quote"">
    “
    <span class=""quote"">
     just work
    </span>
    ”
   </span>
   in this regard in
   <span class=""productname"">
    PostgreSQL
   </span>
   .
  </p>
  <p>
   When using this technique, it will avoid creating an unnecessary burden for application programmers if the application software goes through a framework which automatically retries transactions which are rolled back with a serialization failure. It may be a good idea to set
   <code class=""literal"">
    default_transaction_isolation
   </code>
   to
   <code class=""literal"">
    serializable
   </code>
   . It would also be wise to take some action to ensure that no other transaction isolation level is used, either inadvertently or to subvert integrity checks, through checks of the transaction isolation level in triggers.
  </p>
  <p>
   See
   <a class=""xref"" href=""transaction-iso.html#XACT-SERIALIZABLE"" title=""13.2.3. Serializable Isolation Level"">
    Section 13.2.3
   </a>
   for performance suggestions.
  </p>
  <div class=""warning"">
   <h3 class=""title"">
    Warning: Serializable Transactions and Data Replication
   </h3>
   <p>
    This level of integrity protection using Serializable transactions does not yet extend to hot standby mode (
    <a class=""xref"" href=""hot-standby.html"" title=""26.4. Hot Standby"">
     Section 26.4
    </a>
    ) or logical replicas. Because of that, those using hot standby or logical replication may want to use Repeatable Read and explicit locking on the primary.
   </p>
  </div>
 </div>
 <div class=""sect2"" id=""NON-SERIALIZABLE-CONSISTENCY"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      13.4.2. Enforcing Consistency with Explicit Blocking Locks
      <a class=""id_link"" href=""#NON-SERIALIZABLE-CONSISTENCY"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   When non-serializable writes are possible, to ensure the current validity of a row and protect it against concurrent updates one must use
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   ,
   <code class=""command"">
    SELECT FOR SHARE
   </code>
   , or an appropriate
   <code class=""command"">
    LOCK TABLE
   </code>
   statement. (
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   and
   <code class=""command"">
    SELECT FOR SHARE
   </code>
   lock just the returned rows against concurrent updates, while
   <code class=""command"">
    LOCK TABLE
   </code>
   locks the whole table.) This should be taken into account when porting applications to
   <span class=""productname"">
    PostgreSQL
   </span>
   from other environments.
  </p>
  <p>
   Also of note to those converting from other environments is the fact that
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   does not ensure that a concurrent transaction will not update or delete a selected row. To do that in
   <span class=""productname"">
    PostgreSQL
   </span>
   you must actually update the row, even if no values need to be changed.
   <code class=""command"">
    SELECT FOR UPDATE
   </code>
   <span class=""emphasis"">
    <em>
     temporarily blocks
    </em>
   </span>
   other transactions from acquiring the same lock or executing an
   <code class=""command"">
    UPDATE
   </code>
   or
   <code class=""command"">
    DELETE
   </code>
   which would affect the locked row, but once the transaction holding this lock commits or rolls back, a blocked transaction will proceed with the conflicting operation unless an actual
   <code class=""command"">
    UPDATE
   </code>
   of the row was performed while the lock was held.
  </p>
  <p>
   Global validity checks require extra thought under non-serializable
   <acronym class=""acronym"">
    MVCC
   </acronym>
   . For example, a banking application might wish to check that the sum of all credits in one table equals the sum of debits in another table, when both tables are being actively updated. Comparing the results of two successive
   <code class=""literal"">
    SELECT sum(...)
   </code>
   commands will not work reliably in Read Committed mode, since the second query will likely include the results of transactions not counted by the first. Doing the two sums in a single repeatable read transaction will give an accurate picture of only the effects of transactions that committed before the repeatable read transaction started — but one might legitimately wonder whether the answer is still relevant by the time it is delivered. If the repeatable read transaction itself applied some changes before trying to make the consistency check, the usefulness of the check becomes even more debatable, since now it includes some but not all post-transaction-start changes. In such cases a careful person might wish to lock all tables needed for the check, in order to get an indisputable picture of current reality. A
   <code class=""literal"">
    SHARE
   </code>
   mode (or higher) lock guarantees that there are no uncommitted changes in the locked table, other than those of the current transaction.
  </p>
  <p>
   Note also that if one is relying on explicit locking to prevent concurrent changes, one should either use Read Committed mode, or in Repeatable Read mode be careful to obtain locks before performing queries. A lock obtained by a repeatable read transaction guarantees that no other transactions modifying the table are still running, but if the snapshot seen by the transaction predates obtaining the lock, it might predate some now-committed changes in the table. A repeatable read transaction's snapshot is actually frozen at the start of its first query or data-modification command (
   <code class=""literal"">
    SELECT
   </code>
   ,
   <code class=""literal"">
    INSERT
   </code>
   ,
   <code class=""literal"">
    UPDATE
   </code>
   ,
   <code class=""literal"">
    DELETE
   </code>
   , or
   <code class=""literal"">
    MERGE
   </code>
   ), so it is possible to obtain locks explicitly before the snapshot is frozen.
  </p>
 </div>
</div>
"
13. Concurrency Control,13.5. Serialization Failure Handling,https://www.postgresql.org/docs/17/mvcc-serialization-failure-handling.html,"<div class=""sect1"" id=""MVCC-SERIALIZATION-FAILURE-HANDLING"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.5. Serialization Failure Handling
     <a class=""id_link"" href=""#MVCC-SERIALIZATION-FAILURE-HANDLING"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.12.8.2"" name=""id-1.5.12.8.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.12.8.3"" name=""id-1.5.12.8.3"">
 </a>
 <p>
  Both Repeatable Read and Serializable isolation levels can produce errors that are designed to prevent serialization anomalies. As previously stated, applications using these levels must be prepared to retry transactions that fail due to serialization errors. Such an error's message text will vary according to the precise circumstances, but it will always have the SQLSTATE code
  <code class=""literal"">
   40001
  </code>
  (
  <code class=""literal"">
   serialization_failure
  </code>
  ).
 </p>
 <p>
  It may also be advisable to retry deadlock failures. These have the SQLSTATE code
  <code class=""literal"">
   40P01
  </code>
  (
  <code class=""literal"">
   deadlock_detected
  </code>
  ).
 </p>
 <p>
  In some cases it is also appropriate to retry unique-key failures, which have SQLSTATE code
  <code class=""literal"">
   23505
  </code>
  (
  <code class=""literal"">
   unique_violation
  </code>
  ), and exclusion constraint failures, which have SQLSTATE code
  <code class=""literal"">
   23P01
  </code>
  (
  <code class=""literal"">
   exclusion_violation
  </code>
  ). For example, if the application selects a new value for a primary key column after inspecting the currently stored keys, it could get a unique-key failure because another application instance selected the same new key concurrently. This is effectively a serialization failure, but the server will not detect it as such because it cannot
  <span class=""quote"">
   “
   <span class=""quote"">
    see
   </span>
   ”
  </span>
  the connection between the inserted value and the previous reads. There are also some corner cases in which the server will issue a unique-key or exclusion constraint error even though in principle it has enough information to determine that a serialization problem is the underlying cause. While it's recommendable to just retry
  <code class=""literal"">
   serialization_failure
  </code>
  errors unconditionally, more care is needed when retrying these other error codes, since they might represent persistent error conditions rather than transient failures.
 </p>
 <p>
  It is important to retry the complete transaction, including all logic that decides which SQL to issue and/or which values to use. Therefore,
  <span class=""productname"">
   PostgreSQL
  </span>
  does not offer an automatic retry facility, since it cannot do so with any guarantee of correctness.
 </p>
 <p>
  Transaction retry does not guarantee that the retried transaction will complete; multiple retries may be needed. In cases with very high contention, it is possible that completion of a transaction may take many attempts. In cases involving a conflicting prepared transaction, it may not be possible to make progress until the prepared transaction commits or rolls back.
 </p>
</div>
"
13. Concurrency Control,13.6. Caveats,https://www.postgresql.org/docs/17/mvcc-caveats.html,"<div class=""sect1"" id=""MVCC-CAVEATS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.6. Caveats
     <a class=""id_link"" href=""#MVCC-CAVEATS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  Some DDL commands, currently only
  <a class=""link"" href=""sql-truncate.html"" title=""TRUNCATE"">
   <code class=""command"">
    TRUNCATE
   </code>
  </a>
  and the table-rewriting forms of
  <a class=""link"" href=""sql-altertable.html"" title=""ALTER TABLE"">
   <code class=""command"">
    ALTER TABLE
   </code>
  </a>
  , are not MVCC-safe. This means that after the truncation or rewrite commits, the table will appear empty to concurrent transactions, if they are using a snapshot taken before the DDL command committed. This will only be an issue for a transaction that did not access the table in question before the DDL command started — any transaction that has done so would hold at least an
  <code class=""literal"">
   ACCESS SHARE
  </code>
  table lock, which would block the DDL command until that transaction completes. So these commands will not cause any apparent inconsistency in the table contents for successive queries on the target table, but they could cause visible inconsistency between the contents of the target table and other tables in the database.
 </p>
 <p>
  Support for the Serializable transaction isolation level has not yet been added to hot standby replication targets (described in
  <a class=""xref"" href=""hot-standby.html"" title=""26.4. Hot Standby"">
   Section 26.4
  </a>
  ). The strictest isolation level currently supported in hot standby mode is Repeatable Read. While performing all permanent database writes within Serializable transactions on the primary will ensure that all standbys will eventually reach a consistent state, a Repeatable Read transaction run on the standby can sometimes see a transient state that is inconsistent with any serial execution of the transactions on the primary.
 </p>
 <p>
  Internal access to the system catalogs is not done using the isolation level of the current transaction. This means that newly created database objects such as tables are visible to concurrent Repeatable Read and Serializable transactions, even though the rows they contain are not. In contrast, queries that explicitly examine the system catalogs don't see rows representing concurrently created database objects, in the higher isolation levels.
 </p>
</div>
"
13. Concurrency Control,13.7. Locking and Indexes,https://www.postgresql.org/docs/17/locking-indexes.html,"<div class=""sect1"" id=""LOCKING-INDEXES"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     13.7. Locking and Indexes
     <a class=""id_link"" href=""#LOCKING-INDEXES"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.12.10.2"" name=""id-1.5.12.10.2"">
 </a>
 <p>
  Though
  <span class=""productname"">
   PostgreSQL
  </span>
  provides nonblocking read/write access to table data, nonblocking read/write access is not currently offered for every index access method implemented in
  <span class=""productname"">
   PostgreSQL
  </span>
  . The various index types are handled as follows:
 </p>
 <div class=""variablelist"">
  <dl class=""variablelist"">
   <dt>
    <span class=""term"">
     B-tree,
     <acronym class=""acronym"">
      GiST
     </acronym>
     and
     <acronym class=""acronym"">
      SP-GiST
     </acronym>
     indexes
    </span>
   </dt>
   <dd>
    <p>
     Short-term share/exclusive page-level locks are used for read/write access. Locks are released immediately after each index row is fetched or inserted. These index types provide the highest concurrency without deadlock conditions.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     Hash indexes
    </span>
   </dt>
   <dd>
    <p>
     Share/exclusive hash-bucket-level locks are used for read/write access. Locks are released after the whole bucket is processed. Bucket-level locks provide better concurrency than index-level ones, but deadlock is possible since the locks are held longer than one index operation.
    </p>
   </dd>
   <dt>
    <span class=""term"">
     <acronym class=""acronym"">
      GIN
     </acronym>
     indexes
    </span>
   </dt>
   <dd>
    <p>
     Short-term share/exclusive page-level locks are used for read/write access. Locks are released immediately after each index row is fetched or inserted. But note that insertion of a GIN-indexed value usually produces several index key insertions per row, so GIN might do substantial work for a single value's insertion.
    </p>
   </dd>
  </dl>
 </div>
 <p>
  Currently, B-tree indexes offer the best performance for concurrent applications; since they also have more features than hash indexes, they are the recommended index type for concurrent applications that need to index scalar data. When dealing with non-scalar data, B-trees are not useful, and GiST, SP-GiST or GIN indexes should be used instead.
 </p>
</div>
"
14. Performance Tips,14.1. Using EXPLAIN,https://www.postgresql.org/docs/17/using-explain.html,"<div class=""sect1"" id=""USING-EXPLAIN"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     14.1. Using
     <code class=""command"">
      EXPLAIN
     </code>
     <a class=""id_link"" href=""#USING-EXPLAIN"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""using-explain.html#USING-EXPLAIN-BASICS"">
      14.1.1.
      <code class=""command"">
       EXPLAIN
      </code>
      Basics
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""using-explain.html#USING-EXPLAIN-ANALYZE"">
      14.1.2.
      <code class=""command"">
       EXPLAIN ANALYZE
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""using-explain.html#USING-EXPLAIN-CAVEATS"">
      14.1.3. Caveats
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.13.4.2"" name=""id-1.5.13.4.2"">
 </a>
 <a class=""indexterm"" id=""id-1.5.13.4.3"" name=""id-1.5.13.4.3"">
 </a>
 <p>
  <span class=""productname"">
   PostgreSQL
  </span>
  devises a
  <em class=""firstterm"">
   query plan
  </em>
  for each query it receives. Choosing the right plan to match the query structure and the properties of the data is absolutely critical for good performance, so the system includes a complex
  <em class=""firstterm"">
   planner
  </em>
  that tries to choose good plans. You can use the
  <a class=""link"" href=""sql-explain.html"" title=""EXPLAIN"">
   <code class=""command"">
    EXPLAIN
   </code>
  </a>
  command to see what query plan the planner creates for any query. Plan-reading is an art that requires some experience to master, but this section attempts to cover the basics.
 </p>
 <p>
  Examples in this section are drawn from the regression test database after doing a
  <code class=""command"">
   VACUUM ANALYZE
  </code>
  , using v17 development sources. You should be able to get similar results if you try the examples yourself, but your estimated costs and row counts might vary slightly because
  <code class=""command"">
   ANALYZE
  </code>
  's statistics are random samples rather than exact, and because costs are inherently somewhat platform-dependent.
 </p>
 <p>
  The examples use
  <code class=""command"">
   EXPLAIN
  </code>
  's default
  <span class=""quote"">
   “
   <span class=""quote"">
    text
   </span>
   ”
  </span>
  output format, which is compact and convenient for humans to read. If you want to feed
  <code class=""command"">
   EXPLAIN
  </code>
  's output to a program for further analysis, you should use one of its machine-readable output formats (XML, JSON, or YAML) instead.
 </p>
 <div class=""sect2"" id=""USING-EXPLAIN-BASICS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.1.1.
      <code class=""command"">
       EXPLAIN
      </code>
      Basics
      <a class=""id_link"" href=""#USING-EXPLAIN-BASICS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The structure of a query plan is a tree of
   <em class=""firstterm"">
    plan nodes
   </em>
   . Nodes at the bottom level of the tree are scan nodes: they return raw rows from a table. There are different types of scan nodes for different table access methods: sequential scans, index scans, and bitmap index scans. There are also non-table row sources, such as
   <code class=""literal"">
    VALUES
   </code>
   clauses and set-returning functions in
   <code class=""literal"">
    FROM
   </code>
   , which have their own scan node types. If the query requires joining, aggregation, sorting, or other operations on the raw rows, then there will be additional nodes above the scan nodes to perform these operations. Again, there is usually more than one possible way to do these operations, so different node types can appear here too. The output of
   <code class=""command"">
    EXPLAIN
   </code>
   has one line for each node in the plan tree, showing the basic node type plus the cost estimates that the planner made for the execution of that plan node. Additional lines might appear, indented from the node's summary line, to show additional properties of the node. The very first line (the summary line for the topmost node) has the estimated total execution cost for the plan; it is this number that the planner seeks to minimize.
  </p>
  <p>
   Here is a trivial example, just to show what the output looks like:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..445.00 rows=10000 width=244)
</pre>
  <p>
   Since this query has no
   <code class=""literal"">
    WHERE
   </code>
   clause, it must scan all the rows of the table, so the planner has chosen to use a simple sequential scan plan. The numbers that are quoted in parentheses are (left to right):
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Estimated start-up cost. This is the time expended before the output phase can begin, e.g., time to do the sorting in a sort node.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Estimated total cost. This is stated on the assumption that the plan node is run to completion, i.e., all available rows are retrieved. In practice a node's parent node might stop short of reading all available rows (see the
      <code class=""literal"">
       LIMIT
      </code>
      example below).
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Estimated number of rows output by this plan node. Again, the node is assumed to be run to completion.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Estimated average width of rows output by this plan node (in bytes).
     </p>
    </li>
   </ul>
  </div>
  <p>
   The costs are measured in arbitrary units determined by the planner's cost parameters (see
   <a class=""xref"" href=""runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS"" title=""19.7.2. Planner Cost Constants"">
    Section 19.7.2
   </a>
   ). Traditional practice is to measure the costs in units of disk page fetches; that is,
   <a class=""xref"" href=""runtime-config-query.html#GUC-SEQ-PAGE-COST"">
    seq_page_cost
   </a>
   is conventionally set to
   <code class=""literal"">
    1.0
   </code>
   and the other cost parameters are set relative to that. The examples in this section are run with the default cost parameters.
  </p>
  <p>
   It's important to understand that the cost of an upper-level node includes the cost of all its child nodes. It's also important to realize that the cost only reflects things that the planner cares about. In particular, the cost does not consider the time spent to convert output values to text form or to transmit them to the client, which could be important factors in the real elapsed time; but the planner ignores those costs because it cannot change them by altering the plan. (Every correct plan will output the same row set, we trust.)
  </p>
  <p>
   The
   <code class=""literal"">
    rows
   </code>
   value is a little tricky because it is not the number of rows processed or scanned by the plan node, but rather the number emitted by the node. This is often less than the number scanned, as a result of filtering by any
   <code class=""literal"">
    WHERE
   </code>
   -clause conditions that are being applied at the node. Ideally the top-level rows estimate will approximate the number of rows actually returned, updated, or deleted by the query.
  </p>
  <p>
   Returning to our example:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..445.00 rows=10000 width=244)
</pre>
  <p>
   These numbers are derived very straightforwardly. If you do:
  </p>
  <pre class=""programlisting"">
SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';
</pre>
  <p>
   you will find that
   <code class=""classname"">
    tenk1
   </code>
   has 345 disk pages and 10000 rows. The estimated cost is computed as (disk pages read *
   <a class=""xref"" href=""runtime-config-query.html#GUC-SEQ-PAGE-COST"">
    seq_page_cost
   </a>
   ) + (rows scanned *
   <a class=""xref"" href=""runtime-config-query.html#GUC-CPU-TUPLE-COST"">
    cpu_tuple_cost
   </a>
   ). By default,
   <code class=""varname"">
    seq_page_cost
   </code>
   is 1.0 and
   <code class=""varname"">
    cpu_tuple_cost
   </code>
   is 0.01, so the estimated cost is (345 * 1.0) + (10000 * 0.01) = 445.
  </p>
  <p>
   Now let's modify the query to add a
   <code class=""literal"">
    WHERE
   </code>
   condition:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 7000;

                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..470.00 rows=7000 width=244)
   Filter: (unique1 &lt; 7000)
</pre>
  <p>
   Notice that the
   <code class=""command"">
    EXPLAIN
   </code>
   output shows the
   <code class=""literal"">
    WHERE
   </code>
   clause being applied as a
   <span class=""quote"">
    “
    <span class=""quote"">
     filter
    </span>
    ”
   </span>
   condition attached to the Seq Scan plan node. This means that the plan node checks the condition for each row it scans, and outputs only the ones that pass the condition. The estimate of output rows has been reduced because of the
   <code class=""literal"">
    WHERE
   </code>
   clause. However, the scan will still have to visit all 10000 rows, so the cost hasn't decreased; in fact it has gone up a bit (by 10000 *
   <a class=""xref"" href=""runtime-config-query.html#GUC-CPU-OPERATOR-COST"">
    cpu_operator_cost
   </a>
   , to be exact) to reflect the extra CPU time spent checking the
   <code class=""literal"">
    WHERE
   </code>
   condition.
  </p>
  <p>
   The actual number of rows this query would select is 7000, but the
   <code class=""literal"">
    rows
   </code>
   estimate is only approximate. If you try to duplicate this experiment, you may well get a slightly different estimate; moreover, it can change after each
   <code class=""command"">
    ANALYZE
   </code>
   command, because the statistics produced by
   <code class=""command"">
    ANALYZE
   </code>
   are taken from a randomized sample of the table.
  </p>
  <p>
   Now, let's make the condition more restrictive:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 100;

                                  QUERY PLAN
-------------------------------------------------------------------​-----------
 Bitmap Heap Scan on tenk1  (cost=5.06..224.98 rows=100 width=244)
   Recheck Cond: (unique1 &lt; 100)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0)
         Index Cond: (unique1 &lt; 100)
</pre>
  <p>
   Here the planner has decided to use a two-step plan: the child plan node visits an index to find the locations of rows matching the index condition, and then the upper plan node actually fetches those rows from the table itself. Fetching rows separately is much more expensive than reading them sequentially, but because not all the pages of the table have to be visited, this is still cheaper than a sequential scan. (The reason for using two plan levels is that the upper plan node sorts the row locations identified by the index into physical order before reading them, to minimize the cost of separate fetches. The
   <span class=""quote"">
    “
    <span class=""quote"">
     bitmap
    </span>
    ”
   </span>
   mentioned in the node names is the mechanism that does the sorting.)
  </p>
  <p>
   Now let's add another condition to the
   <code class=""literal"">
    WHERE
   </code>
   clause:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 100 AND stringu1 = 'xxx';

                                  QUERY PLAN
-------------------------------------------------------------------​-----------
 Bitmap Heap Scan on tenk1  (cost=5.04..225.20 rows=1 width=244)
   Recheck Cond: (unique1 &lt; 100)
   Filter: (stringu1 = 'xxx'::name)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0)
         Index Cond: (unique1 &lt; 100)
</pre>
  <p>
   The added condition
   <code class=""literal"">
    stringu1 = 'xxx'
   </code>
   reduces the output row count estimate, but not the cost because we still have to visit the same set of rows. That's because the
   <code class=""literal"">
    stringu1
   </code>
   clause cannot be applied as an index condition, since this index is only on the
   <code class=""literal"">
    unique1
   </code>
   column. Instead it is applied as a filter on the rows retrieved using the index. Thus the cost has actually gone up slightly to reflect this extra checking.
  </p>
  <p>
   In some cases the planner will prefer a
   <span class=""quote"">
    “
    <span class=""quote"">
     simple
    </span>
    ”
   </span>
   index scan plan:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 = 42;

                                 QUERY PLAN
-------------------------------------------------------------------​----------
 Index Scan using tenk1_unique1 on tenk1  (cost=0.29..8.30 rows=1 width=244)
   Index Cond: (unique1 = 42)
</pre>
  <p>
   In this type of plan the table rows are fetched in index order, which makes them even more expensive to read, but there are so few that the extra cost of sorting the row locations is not worth it. You'll most often see this plan type for queries that fetch just a single row. It's also often used for queries that have an
   <code class=""literal"">
    ORDER BY
   </code>
   condition that matches the index order, because then no extra sorting step is needed to satisfy the
   <code class=""literal"">
    ORDER BY
   </code>
   . In this example, adding
   <code class=""literal"">
    ORDER BY unique1
   </code>
   would use the same plan because the index already implicitly provides the requested ordering.
  </p>
  <p>
   The planner may implement an
   <code class=""literal"">
    ORDER BY
   </code>
   clause in several ways. The above example shows that such an ordering clause may be implemented implicitly. The planner may also add an explicit
   <code class=""literal"">
    Sort
   </code>
   step:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 ORDER BY unique1;

                            QUERY PLAN
-------------------------------------------------------------------
 Sort  (cost=1109.39..1134.39 rows=10000 width=244)
   Sort Key: unique1
   -&gt;  Seq Scan on tenk1  (cost=0.00..445.00 rows=10000 width=244)
</pre>
  <p>
   If a part of the plan guarantees an ordering on a prefix of the required sort keys, then the planner may instead decide to use an
   <code class=""literal"">
    Incremental Sort
   </code>
   step:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 ORDER BY hundred, ten LIMIT 100;

                                              QUERY PLAN
-------------------------------------------------------------------​-----------------------------
 Limit  (cost=19.35..39.49 rows=100 width=244)
   -&gt;  Incremental Sort  (cost=19.35..2033.39 rows=10000 width=244)
         Sort Key: hundred, ten
         Presorted Key: hundred
         -&gt;  Index Scan using tenk1_hundred on tenk1  (cost=0.29..1574.20 rows=10000 width=244)
</pre>
  <p>
   Compared to regular sorts, sorting incrementally allows returning tuples before the entire result set has been sorted, which particularly enables optimizations with
   <code class=""literal"">
    LIMIT
   </code>
   queries. It may also reduce memory usage and the likelihood of spilling sorts to disk, but it comes at the cost of the increased overhead of splitting the result set into multiple sorting batches.
  </p>
  <p>
   If there are separate indexes on several of the columns referenced in
   <code class=""literal"">
    WHERE
   </code>
   , the planner might choose to use an AND or OR combination of the indexes:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 100 AND unique2 &gt; 9000;

                                     QUERY PLAN
-------------------------------------------------------------------​------------------
 Bitmap Heap Scan on tenk1  (cost=25.07..60.11 rows=10 width=244)
   Recheck Cond: ((unique1 &lt; 100) AND (unique2 &gt; 9000))
   -&gt;  BitmapAnd  (cost=25.07..25.07 rows=10 width=0)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0)
               Index Cond: (unique1 &lt; 100)
         -&gt;  Bitmap Index Scan on tenk1_unique2  (cost=0.00..19.78 rows=999 width=0)
               Index Cond: (unique2 &gt; 9000)
</pre>
  <p>
   But this requires visiting both indexes, so it's not necessarily a win compared to using just one index and treating the other condition as a filter. If you vary the ranges involved you'll see the plan change accordingly.
  </p>
  <p>
   Here is an example showing the effects of
   <code class=""literal"">
    LIMIT
   </code>
   :
  </p>
  <pre class=""screen"">
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 100 AND unique2 &gt; 9000 LIMIT 2;

                                     QUERY PLAN
-------------------------------------------------------------------​------------------
 Limit  (cost=0.29..14.28 rows=2 width=244)
   -&gt;  Index Scan using tenk1_unique2 on tenk1  (cost=0.29..70.27 rows=10 width=244)
         Index Cond: (unique2 &gt; 9000)
         Filter: (unique1 &lt; 100)
</pre>
  <p>
   This is the same query as above, but we added a
   <code class=""literal"">
    LIMIT
   </code>
   so that not all the rows need be retrieved, and the planner changed its mind about what to do. Notice that the total cost and row count of the Index Scan node are shown as if it were run to completion. However, the Limit node is expected to stop after retrieving only a fifth of those rows, so its total cost is only a fifth as much, and that's the actual estimated cost of the query. This plan is preferred over adding a Limit node to the previous plan because the Limit could not avoid paying the startup cost of the bitmap scan, so the total cost would be something over 25 units with that approach.
  </p>
  <p>
   Let's try joining two tables, using the columns we have been discussing:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT *
FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 10 AND t1.unique2 = t2.unique2;

                                      QUERY PLAN
-------------------------------------------------------------------​-------------------
 Nested Loop  (cost=4.65..118.50 rows=10 width=488)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.36..39.38 rows=10 width=244)
         Recheck Cond: (unique1 &lt; 10)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.36 rows=10 width=0)
               Index Cond: (unique1 &lt; 10)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.29..7.90 rows=1 width=244)
         Index Cond: (unique2 = t1.unique2)
</pre>
  <p>
   In this plan, we have a nested-loop join node with two table scans as inputs, or children. The indentation of the node summary lines reflects the plan tree structure. The join's first, or
   <span class=""quote"">
    “
    <span class=""quote"">
     outer
    </span>
    ”
   </span>
   , child is a bitmap scan similar to those we saw before. Its cost and row count are the same as we'd get from
   <code class=""literal"">
    SELECT ... WHERE unique1 &lt; 10
   </code>
   because we are applying the
   <code class=""literal"">
    WHERE
   </code>
   clause
   <code class=""literal"">
    unique1 &lt; 10
   </code>
   at that node. The
   <code class=""literal"">
    t1.unique2 = t2.unique2
   </code>
   clause is not relevant yet, so it doesn't affect the row count of the outer scan. The nested-loop join node will run its second, or
   <span class=""quote"">
    “
    <span class=""quote"">
     inner
    </span>
    ”
   </span>
   child once for each row obtained from the outer child. Column values from the current outer row can be plugged into the inner scan; here, the
   <code class=""literal"">
    t1.unique2
   </code>
   value from the outer row is available, so we get a plan and costs similar to what we saw above for a simple
   <code class=""literal"">
    SELECT ... WHERE t2.unique2 =
    <em class=""replaceable"">
     <code>
      constant
     </code>
    </em>
   </code>
   case. (The estimated cost is actually a bit lower than what was seen above, as a result of caching that's expected to occur during the repeated index scans on
   <code class=""literal"">
    t2
   </code>
   .) The costs of the loop node are then set on the basis of the cost of the outer scan, plus one repetition of the inner scan for each outer row (10 * 7.90, here), plus a little CPU time for join processing.
  </p>
  <p>
   In this example the join's output row count is the same as the product of the two scans' row counts, but that's not true in all cases because there can be additional
   <code class=""literal"">
    WHERE
   </code>
   clauses that mention both tables and so can only be applied at the join point, not to either input scan. Here's an example:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT *
FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 10 AND t2.unique2 &lt; 10 AND t1.hundred &lt; t2.hundred;

                                         QUERY PLAN
-------------------------------------------------------------------​--------------------------
 Nested Loop  (cost=4.65..49.36 rows=33 width=488)
   Join Filter: (t1.hundred &lt; t2.hundred)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.36..39.38 rows=10 width=244)
         Recheck Cond: (unique1 &lt; 10)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.36 rows=10 width=0)
               Index Cond: (unique1 &lt; 10)
   -&gt;  Materialize  (cost=0.29..8.51 rows=10 width=244)
         -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.29..8.46 rows=10 width=244)
               Index Cond: (unique2 &lt; 10)
</pre>
  <p>
   The condition
   <code class=""literal"">
    t1.hundred &lt; t2.hundred
   </code>
   can't be tested in the
   <code class=""literal"">
    tenk2_unique2
   </code>
   index, so it's applied at the join node. This reduces the estimated output row count of the join node, but does not change either input scan.
  </p>
  <p>
   Notice that here the planner has chosen to
   <span class=""quote"">
    “
    <span class=""quote"">
     materialize
    </span>
    ”
   </span>
   the inner relation of the join, by putting a Materialize plan node atop it. This means that the
   <code class=""literal"">
    t2
   </code>
   index scan will be done just once, even though the nested-loop join node needs to read that data ten times, once for each row from the outer relation. The Materialize node saves the data in memory as it's read, and then returns the data from memory on each subsequent pass.
  </p>
  <p>
   When dealing with outer joins, you might see join plan nodes with both
   <span class=""quote"">
    “
    <span class=""quote"">
     Join Filter
    </span>
    ”
   </span>
   and plain
   <span class=""quote"">
    “
    <span class=""quote"">
     Filter
    </span>
    ”
   </span>
   conditions attached. Join Filter conditions come from the outer join's
   <code class=""literal"">
    ON
   </code>
   clause, so a row that fails the Join Filter condition could still get emitted as a null-extended row. But a plain Filter condition is applied after the outer-join rules and so acts to remove rows unconditionally. In an inner join there is no semantic difference between these types of filters.
  </p>
  <p>
   If we change the query's selectivity a bit, we might get a very different join plan:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT *
FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 100 AND t1.unique2 = t2.unique2;

                                        QUERY PLAN
-------------------------------------------------------------------​-----------------------
 Hash Join  (cost=226.23..709.73 rows=100 width=488)
   Hash Cond: (t2.unique2 = t1.unique2)
   -&gt;  Seq Scan on tenk2 t2  (cost=0.00..445.00 rows=10000 width=244)
   -&gt;  Hash  (cost=224.98..224.98 rows=100 width=244)
         -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=5.06..224.98 rows=100 width=244)
               Recheck Cond: (unique1 &lt; 100)
               -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0)
                     Index Cond: (unique1 &lt; 100)
</pre>
  <p>
   Here, the planner has chosen to use a hash join, in which rows of one table are entered into an in-memory hash table, after which the other table is scanned and the hash table is probed for matches to each row. Again note how the indentation reflects the plan structure: the bitmap scan on
   <code class=""literal"">
    tenk1
   </code>
   is the input to the Hash node, which constructs the hash table. That's then returned to the Hash Join node, which reads rows from its outer child plan and searches the hash table for each one.
  </p>
  <p>
   Another possible type of join is a merge join, illustrated here:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT *
FROM tenk1 t1, onek t2
WHERE t1.unique1 &lt; 100 AND t1.unique2 = t2.unique2;

                                        QUERY PLAN
-------------------------------------------------------------------​-----------------------
 Merge Join  (cost=0.56..233.49 rows=10 width=488)
   Merge Cond: (t1.unique2 = t2.unique2)
   -&gt;  Index Scan using tenk1_unique2 on tenk1 t1  (cost=0.29..643.28 rows=100 width=244)
         Filter: (unique1 &lt; 100)
   -&gt;  Index Scan using onek_unique2 on onek t2  (cost=0.28..166.28 rows=1000 width=244)
</pre>
  <p>
   Merge join requires its input data to be sorted on the join keys. In this example each input is sorted by using an index scan to visit the rows in the correct order; but a sequential scan and sort could also be used. (Sequential-scan-and-sort frequently beats an index scan for sorting many rows, because of the nonsequential disk access required by the index scan.)
  </p>
  <p>
   One way to look at variant plans is to force the planner to disregard whatever strategy it thought was the cheapest, using the enable/disable flags described in
   <a class=""xref"" href=""runtime-config-query.html#RUNTIME-CONFIG-QUERY-ENABLE"" title=""19.7.1. Planner Method Configuration"">
    Section 19.7.1
   </a>
   . (This is a crude tool, but useful. See also
   <a class=""xref"" href=""explicit-joins.html"" title=""14.3. Controlling the Planner with Explicit JOIN Clauses"">
    Section 14.3
   </a>
   .) For example, if we're unconvinced that merge join is the best join type for the previous example, we could try
  </p>
  <pre class=""screen"">
SET enable_mergejoin = off;

EXPLAIN SELECT *
FROM tenk1 t1, onek t2
WHERE t1.unique1 &lt; 100 AND t1.unique2 = t2.unique2;

                                        QUERY PLAN
-------------------------------------------------------------------​-----------------------
 Hash Join  (cost=226.23..344.08 rows=10 width=488)
   Hash Cond: (t2.unique2 = t1.unique2)
   -&gt;  Seq Scan on onek t2  (cost=0.00..114.00 rows=1000 width=244)
   -&gt;  Hash  (cost=224.98..224.98 rows=100 width=244)
         -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=5.06..224.98 rows=100 width=244)
               Recheck Cond: (unique1 &lt; 100)
               -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0)
                     Index Cond: (unique1 &lt; 100)
</pre>
  <p>
   which shows that the planner thinks that hash join would be nearly 50% more expensive than merge join for this case. Of course, the next question is whether it's right about that. We can investigate that using
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   , as discussed
   <a class=""link"" href=""using-explain.html#USING-EXPLAIN-ANALYZE"" title=""14.1.2. EXPLAIN ANALYZE"">
    below
   </a>
   .
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.13.4.7.29.1"" name=""id-1.5.13.4.7.29.1"">
   </a>
   Some query plans involve
   <em class=""firstterm"">
    subplans
   </em>
   , which arise from sub-
   <code class=""literal"">
    SELECT
   </code>
   s in the original query. Such queries can sometimes be transformed into ordinary join plans, but when they cannot be, we get plans like:
  </p>
  <pre class=""screen"">
EXPLAIN VERBOSE SELECT unique1
FROM tenk1 t
WHERE t.ten &lt; ALL (SELECT o.ten FROM onek o WHERE o.four = t.four);

                               QUERY PLAN
-------------------------------------------------------------------​------
 Seq Scan on public.tenk1 t  (cost=0.00..586095.00 rows=5000 width=4)
   Output: t.unique1
   Filter: (ALL (t.ten &lt; (SubPlan 1).col1))
   SubPlan 1
     -&gt;  Seq Scan on public.onek o  (cost=0.00..116.50 rows=250 width=4)
           Output: o.ten
           Filter: (o.four = t.four)
</pre>
  <p>
   This rather artificial example serves to illustrate a couple of points: values from the outer plan level can be passed down into a subplan (here,
   <code class=""literal"">
    t.four
   </code>
   is passed down) and the results of the sub-select are available to the outer plan. Those result values are shown by
   <code class=""command"">
    EXPLAIN
   </code>
   with notations like
   <code class=""literal"">
    (
    <em class=""replaceable"">
     <code>
      subplan_name
     </code>
    </em>
    ).col
    <em class=""replaceable"">
     <code>
      N
     </code>
    </em>
   </code>
   , which refers to the
   <em class=""replaceable"">
    <code>
     N
    </code>
   </em>
   'th output column of the sub-
   <code class=""literal"">
    SELECT
   </code>
   .
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.13.4.7.30.1"" name=""id-1.5.13.4.7.30.1"">
   </a>
   In the example above, the
   <code class=""literal"">
    ALL
   </code>
   operator runs the subplan again for each row of the outer query (which accounts for the high estimated cost). Some queries can use a
   <em class=""firstterm"">
    hashed subplan
   </em>
   to avoid that:
  </p>
  <pre class=""screen"">
EXPLAIN SELECT *
FROM tenk1 t
WHERE t.unique1 NOT IN (SELECT o.unique1 FROM onek o);

                                         QUERY PLAN
-------------------------------------------------------------------​-------------------------
 Seq Scan on tenk1 t  (cost=61.77..531.77 rows=5000 width=244)
   Filter: (NOT (ANY (unique1 = (hashed SubPlan 1).col1)))
   SubPlan 1
     -&gt;  Index Only Scan using onek_unique1 on onek o  (cost=0.28..59.27 rows=1000 width=4)
(4 rows)
</pre>
  <p>
   Here, the subplan is run a single time and its output is loaded into an in-memory hash table, which is then probed by the outer
   <code class=""literal"">
    ANY
   </code>
   operator. This requires that the sub-
   <code class=""literal"">
    SELECT
   </code>
   not reference any variables of the outer query, and that the
   <code class=""literal"">
    ANY
   </code>
   's comparison operator be amenable to hashing.
  </p>
  <p>
   <a class=""indexterm"" id=""id-1.5.13.4.7.31.1"" name=""id-1.5.13.4.7.31.1"">
   </a>
   If, in addition to not referencing any variables of the outer query, the sub-
   <code class=""literal"">
    SELECT
   </code>
   cannot return more than one row, it may instead be implemented as an
   <em class=""firstterm"">
    initplan
   </em>
   :
  </p>
  <pre class=""screen"">
EXPLAIN VERBOSE SELECT unique1
FROM tenk1 t1 WHERE t1.ten = (SELECT (random() * 10)::integer);

                             QUERY PLAN
------------------------------------------------------------​--------
 Seq Scan on public.tenk1 t1  (cost=0.02..470.02 rows=1000 width=4)
   Output: t1.unique1
   Filter: (t1.ten = (InitPlan 1).col1)
   InitPlan 1
     -&gt;  Result  (cost=0.00..0.02 rows=1 width=4)
           Output: ((random() * '10'::double precision))::integer
</pre>
  <p>
   An initplan is run only once per execution of the outer plan, and its results are saved for re-use in later rows of the outer plan. So in this example
   <code class=""literal"">
    random()
   </code>
   is evaluated only once and all the values of
   <code class=""literal"">
    t1.ten
   </code>
   are compared to the same randomly-chosen integer. That's quite different from what would happen without the sub-
   <code class=""literal"">
    SELECT
   </code>
   construct.
  </p>
 </div>
 <div class=""sect2"" id=""USING-EXPLAIN-ANALYZE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.1.2.
      <code class=""command"">
       EXPLAIN ANALYZE
      </code>
      <a class=""id_link"" href=""#USING-EXPLAIN-ANALYZE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   It is possible to check the accuracy of the planner's estimates by using
   <code class=""command"">
    EXPLAIN
   </code>
   's
   <code class=""literal"">
    ANALYZE
   </code>
   option. With this option,
   <code class=""command"">
    EXPLAIN
   </code>
   actually executes the query, and then displays the true row counts and true run time accumulated within each plan node, along with the same estimates that a plain
   <code class=""command"">
    EXPLAIN
   </code>
   shows. For example, we might get a result like this:
  </p>
  <pre class=""screen"">
EXPLAIN ANALYZE SELECT *
FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 10 AND t1.unique2 = t2.unique2;

                                                           QUERY PLAN
-------------------------------------------------------------------​--------------------------------------------------------------
 Nested Loop  (cost=4.65..118.50 rows=10 width=488) (actual time=0.017..0.051 rows=10 loops=1)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.36..39.38 rows=10 width=244) (actual time=0.009..0.017 rows=10 loops=1)
         Recheck Cond: (unique1 &lt; 10)
         Heap Blocks: exact=10
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.36 rows=10 width=0) (actual time=0.004..0.004 rows=10 loops=1)
               Index Cond: (unique1 &lt; 10)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.29..7.90 rows=1 width=244) (actual time=0.003..0.003 rows=1 loops=10)
         Index Cond: (unique2 = t1.unique2)
 Planning Time: 0.485 ms
 Execution Time: 0.073 ms
</pre>
  <p>
   Note that the
   <span class=""quote"">
    “
    <span class=""quote"">
     actual time
    </span>
    ”
   </span>
   values are in milliseconds of real time, whereas the
   <code class=""literal"">
    cost
   </code>
   estimates are expressed in arbitrary units; so they are unlikely to match up. The thing that's usually most important to look for is whether the estimated row counts are reasonably close to reality. In this example the estimates were all dead-on, but that's quite unusual in practice.
  </p>
  <p>
   In some query plans, it is possible for a subplan node to be executed more than once. For example, the inner index scan will be executed once per outer row in the above nested-loop plan. In such cases, the
   <code class=""literal"">
    loops
   </code>
   value reports the total number of executions of the node, and the actual time and rows values shown are averages per-execution. This is done to make the numbers comparable with the way that the cost estimates are shown. Multiply by the
   <code class=""literal"">
    loops
   </code>
   value to get the total time actually spent in the node. In the above example, we spent a total of 0.030 milliseconds executing the index scans on
   <code class=""literal"">
    tenk2
   </code>
   .
  </p>
  <p>
   In some cases
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   shows additional execution statistics beyond the plan node execution times and row counts. For example, Sort and Hash nodes provide extra information:
  </p>
  <pre class=""screen"">
EXPLAIN ANALYZE SELECT *
FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 100 AND t1.unique2 = t2.unique2 ORDER BY t1.fivethous;

                                                                 QUERY PLAN
-------------------------------------------------------------------​-------------------------------------------------------------------​------
 Sort  (cost=713.05..713.30 rows=100 width=488) (actual time=2.995..3.002 rows=100 loops=1)
   Sort Key: t1.fivethous
   Sort Method: quicksort  Memory: 74kB
   -&gt;  Hash Join  (cost=226.23..709.73 rows=100 width=488) (actual time=0.515..2.920 rows=100 loops=1)
         Hash Cond: (t2.unique2 = t1.unique2)
         -&gt;  Seq Scan on tenk2 t2  (cost=0.00..445.00 rows=10000 width=244) (actual time=0.026..1.790 rows=10000 loops=1)
         -&gt;  Hash  (cost=224.98..224.98 rows=100 width=244) (actual time=0.476..0.477 rows=100 loops=1)
               Buckets: 1024  Batches: 1  Memory Usage: 35kB
               -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=5.06..224.98 rows=100 width=244) (actual time=0.030..0.450 rows=100 loops=1)
                     Recheck Cond: (unique1 &lt; 100)
                     Heap Blocks: exact=90
                     -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0) (actual time=0.013..0.013 rows=100 loops=1)
                           Index Cond: (unique1 &lt; 100)
 Planning Time: 0.187 ms
 Execution Time: 3.036 ms
</pre>
  <p>
   The Sort node shows the sort method used (in particular, whether the sort was in-memory or on-disk) and the amount of memory or disk space needed. The Hash node shows the number of hash buckets and batches as well as the peak amount of memory used for the hash table. (If the number of batches exceeds one, there will also be disk space usage involved, but that is not shown.)
  </p>
  <p>
   Another type of extra information is the number of rows removed by a filter condition:
  </p>
  <pre class=""screen"">
EXPLAIN ANALYZE SELECT * FROM tenk1 WHERE ten &lt; 7;

                                               QUERY PLAN
-------------------------------------------------------------------​--------------------------------------
 Seq Scan on tenk1  (cost=0.00..470.00 rows=7000 width=244) (actual time=0.030..1.995 rows=7000 loops=1)
   Filter: (ten &lt; 7)
   Rows Removed by Filter: 3000
 Planning Time: 0.102 ms
 Execution Time: 2.145 ms
</pre>
  <p>
   These counts can be particularly valuable for filter conditions applied at join nodes. The
   <span class=""quote"">
    “
    <span class=""quote"">
     Rows Removed
    </span>
    ”
   </span>
   line only appears when at least one scanned row, or potential join pair in the case of a join node, is rejected by the filter condition.
  </p>
  <p>
   A case similar to filter conditions occurs with
   <span class=""quote"">
    “
    <span class=""quote"">
     lossy
    </span>
    ”
   </span>
   index scans. For example, consider this search for polygons containing a specific point:
  </p>
  <pre class=""screen"">
EXPLAIN ANALYZE SELECT * FROM polygon_tbl WHERE f1 @&gt; polygon '(0.5,2.0)';

                                              QUERY PLAN
-------------------------------------------------------------------​-----------------------------------
 Seq Scan on polygon_tbl  (cost=0.00..1.09 rows=1 width=85) (actual time=0.023..0.023 rows=0 loops=1)
   Filter: (f1 @&gt; '((0.5,2))'::polygon)
   Rows Removed by Filter: 7
 Planning Time: 0.039 ms
 Execution Time: 0.033 ms
</pre>
  <p>
   The planner thinks (quite correctly) that this sample table is too small to bother with an index scan, so we have a plain sequential scan in which all the rows got rejected by the filter condition. But if we force an index scan to be used, we see:
  </p>
  <pre class=""screen"">
SET enable_seqscan TO off;

EXPLAIN ANALYZE SELECT * FROM polygon_tbl WHERE f1 @&gt; polygon '(0.5,2.0)';

                                                        QUERY PLAN
-------------------------------------------------------------------​-------------------------------------------------------
 Index Scan using gpolygonind on polygon_tbl  (cost=0.13..8.15 rows=1 width=85) (actual time=0.074..0.074 rows=0 loops=1)
   Index Cond: (f1 @&gt; '((0.5,2))'::polygon)
   Rows Removed by Index Recheck: 1
 Planning Time: 0.039 ms
 Execution Time: 0.098 ms
</pre>
  <p>
   Here we can see that the index returned one candidate row, which was then rejected by a recheck of the index condition. This happens because a GiST index is
   <span class=""quote"">
    “
    <span class=""quote"">
     lossy
    </span>
    ”
   </span>
   for polygon containment tests: it actually returns the rows with polygons that overlap the target, and then we have to do the exact containment test on those rows.
  </p>
  <p>
   <code class=""command"">
    EXPLAIN
   </code>
   has a
   <code class=""literal"">
    BUFFERS
   </code>
   option that can be used with
   <code class=""literal"">
    ANALYZE
   </code>
   to get even more run time statistics:
  </p>
  <pre class=""screen"">
EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM tenk1 WHERE unique1 &lt; 100 AND unique2 &gt; 9000;

                                                           QUERY PLAN
-------------------------------------------------------------------​--------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=25.07..60.11 rows=10 width=244) (actual time=0.105..0.114 rows=10 loops=1)
   Recheck Cond: ((unique1 &lt; 100) AND (unique2 &gt; 9000))
   Heap Blocks: exact=10
   Buffers: shared hit=14 read=3
   -&gt;  BitmapAnd  (cost=25.07..25.07 rows=10 width=0) (actual time=0.100..0.101 rows=0 loops=1)
         Buffers: shared hit=4 read=3
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0) (actual time=0.027..0.027 rows=100 loops=1)
               Index Cond: (unique1 &lt; 100)
               Buffers: shared hit=2
         -&gt;  Bitmap Index Scan on tenk1_unique2  (cost=0.00..19.78 rows=999 width=0) (actual time=0.070..0.070 rows=999 loops=1)
               Index Cond: (unique2 &gt; 9000)
               Buffers: shared hit=2 read=3
 Planning:
   Buffers: shared hit=3
 Planning Time: 0.162 ms
 Execution Time: 0.143 ms
</pre>
  <p>
   The numbers provided by
   <code class=""literal"">
    BUFFERS
   </code>
   help to identify which parts of the query are the most I/O-intensive.
  </p>
  <p>
   Keep in mind that because
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   actually runs the query, any side-effects will happen as usual, even though whatever results the query might output are discarded in favor of printing the
   <code class=""command"">
    EXPLAIN
   </code>
   data. If you want to analyze a data-modifying query without changing your tables, you can roll the command back afterwards, for example:
  </p>
  <pre class=""screen"">
BEGIN;

EXPLAIN ANALYZE UPDATE tenk1 SET hundred = hundred + 1 WHERE unique1 &lt; 100;

                                                           QUERY PLAN
-------------------------------------------------------------------​-------------------------------------------------------------
 Update on tenk1  (cost=5.06..225.23 rows=0 width=0) (actual time=1.634..1.635 rows=0 loops=1)
   -&gt;  Bitmap Heap Scan on tenk1  (cost=5.06..225.23 rows=100 width=10) (actual time=0.065..0.141 rows=100 loops=1)
         Recheck Cond: (unique1 &lt; 100)
         Heap Blocks: exact=90
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..5.04 rows=100 width=0) (actual time=0.031..0.031 rows=100 loops=1)
               Index Cond: (unique1 &lt; 100)
 Planning Time: 0.151 ms
 Execution Time: 1.856 ms

ROLLBACK;
</pre>
  <p>
   As seen in this example, when the query is an
   <code class=""command"">
    INSERT
   </code>
   ,
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   , or
   <code class=""command"">
    MERGE
   </code>
   command, the actual work of applying the table changes is done by a top-level Insert, Update, Delete, or Merge plan node. The plan nodes underneath this node perform the work of locating the old rows and/or computing the new data. So above, we see the same sort of bitmap table scan we've seen already, and its output is fed to an Update node that stores the updated rows. It's worth noting that although the data-modifying node can take a considerable amount of run time (here, it's consuming the lion's share of the time), the planner does not currently add anything to the cost estimates to account for that work. That's because the work to be done is the same for every correct query plan, so it doesn't affect planning decisions.
  </p>
  <p>
   When an
   <code class=""command"">
    UPDATE
   </code>
   ,
   <code class=""command"">
    DELETE
   </code>
   , or
   <code class=""command"">
    MERGE
   </code>
   command affects a partitioned table or inheritance hierarchy, the output might look like this:
  </p>
  <pre class=""screen"">
EXPLAIN UPDATE gtest_parent SET f1 = CURRENT_DATE WHERE f2 = 101;

                                       QUERY PLAN
-------------------------------------------------------------------​---------------------
 Update on gtest_parent  (cost=0.00..3.06 rows=0 width=0)
   Update on gtest_child gtest_parent_1
   Update on gtest_child2 gtest_parent_2
   Update on gtest_child3 gtest_parent_3
   -&gt;  Append  (cost=0.00..3.06 rows=3 width=14)
         -&gt;  Seq Scan on gtest_child gtest_parent_1  (cost=0.00..1.01 rows=1 width=14)
               Filter: (f2 = 101)
         -&gt;  Seq Scan on gtest_child2 gtest_parent_2  (cost=0.00..1.01 rows=1 width=14)
               Filter: (f2 = 101)
         -&gt;  Seq Scan on gtest_child3 gtest_parent_3  (cost=0.00..1.01 rows=1 width=14)
               Filter: (f2 = 101)
</pre>
  <p>
   In this example the Update node needs to consider three child tables, but not the originally-mentioned partitioned table (since that never stores any data). So there are three input scanning subplans, one per table. For clarity, the Update node is annotated to show the specific target tables that will be updated, in the same order as the corresponding subplans.
  </p>
  <p>
   The
   <code class=""literal"">
    Planning time
   </code>
   shown by
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   is the time it took to generate the query plan from the parsed query and optimize it. It does not include parsing or rewriting.
  </p>
  <p>
   The
   <code class=""literal"">
    Execution time
   </code>
   shown by
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   includes executor start-up and shut-down time, as well as the time to run any triggers that are fired, but it does not include parsing, rewriting, or planning time. Time spent executing
   <code class=""literal"">
    BEFORE
   </code>
   triggers, if any, is included in the time for the related Insert, Update, or Delete node; but time spent executing
   <code class=""literal"">
    AFTER
   </code>
   triggers is not counted there because
   <code class=""literal"">
    AFTER
   </code>
   triggers are fired after completion of the whole plan. The total time spent in each trigger (either
   <code class=""literal"">
    BEFORE
   </code>
   or
   <code class=""literal"">
    AFTER
   </code>
   ) is also shown separately. Note that deferred constraint triggers will not be executed until end of transaction and are thus not considered at all by
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   .
  </p>
  <p>
   The time shown for the top-level node does not include any time needed to convert the query's output data into displayable form or to send it to the client. While
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   will never send the data to the client, it can be told to convert the query's output data to displayable form and measure the time needed for that, by specifying the
   <code class=""literal"">
    SERIALIZE
   </code>
   option. That time will be shown separately, and it's also included in the total
   <code class=""literal"">
    Execution time
   </code>
   .
  </p>
 </div>
 <div class=""sect2"" id=""USING-EXPLAIN-CAVEATS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.1.3. Caveats
      <a class=""id_link"" href=""#USING-EXPLAIN-CAVEATS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   There are two significant ways in which run times measured by
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   can deviate from normal execution of the same query. First, since no output rows are delivered to the client, network transmission costs are not included. I/O conversion costs are not included either unless
   <code class=""literal"">
    SERIALIZE
   </code>
   is specified. Second, the measurement overhead added by
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   can be significant, especially on machines with slow
   <code class=""function"">
    gettimeofday()
   </code>
   operating-system calls. You can use the
   <a class=""xref"" href=""pgtesttiming.html"" title=""pg_test_timing"">
    <span class=""refentrytitle"">
     <span class=""application"">
      pg_test_timing
     </span>
    </span>
   </a>
   tool to measure the overhead of timing on your system.
  </p>
  <p>
   <code class=""command"">
    EXPLAIN
   </code>
   results should not be extrapolated to situations much different from the one you are actually testing; for example, results on a toy-sized table cannot be assumed to apply to large tables. The planner's cost estimates are not linear and so it might choose a different plan for a larger or smaller table. An extreme example is that on a table that only occupies one disk page, you'll nearly always get a sequential scan plan whether indexes are available or not. The planner realizes that it's going to take one disk page read to process the table in any case, so there's no value in expending additional page reads to look at an index. (We saw this happening in the
   <code class=""literal"">
    polygon_tbl
   </code>
   example above.)
  </p>
  <p>
   There are cases in which the actual and estimated values won't match up well, but nothing is really wrong. One such case occurs when plan node execution is stopped short by a
   <code class=""literal"">
    LIMIT
   </code>
   or similar effect. For example, in the
   <code class=""literal"">
    LIMIT
   </code>
   query we used before,
  </p>
  <pre class=""screen"">
EXPLAIN ANALYZE SELECT * FROM tenk1 WHERE unique1 &lt; 100 AND unique2 &gt; 9000 LIMIT 2;

                                                          QUERY PLAN
-------------------------------------------------------------------​------------------------------------------------------------
 Limit  (cost=0.29..14.33 rows=2 width=244) (actual time=0.051..0.071 rows=2 loops=1)
   -&gt;  Index Scan using tenk1_unique2 on tenk1  (cost=0.29..70.50 rows=10 width=244) (actual time=0.051..0.070 rows=2 loops=1)
         Index Cond: (unique2 &gt; 9000)
         Filter: (unique1 &lt; 100)
         Rows Removed by Filter: 287
 Planning Time: 0.077 ms
 Execution Time: 0.086 ms
</pre>
  <p>
   the estimated cost and row count for the Index Scan node are shown as though it were run to completion. But in reality the Limit node stopped requesting rows after it got two, so the actual row count is only 2 and the run time is less than the cost estimate would suggest. This is not an estimation error, only a discrepancy in the way the estimates and true values are displayed.
  </p>
  <p>
   Merge joins also have measurement artifacts that can confuse the unwary. A merge join will stop reading one input if it's exhausted the other input and the next key value in the one input is greater than the last key value of the other input; in such a case there can be no more matches and so no need to scan the rest of the first input. This results in not reading all of one child, with results like those mentioned for
   <code class=""literal"">
    LIMIT
   </code>
   . Also, if the outer (first) child contains rows with duplicate key values, the inner (second) child is backed up and rescanned for the portion of its rows matching that key value.
   <code class=""command"">
    EXPLAIN ANALYZE
   </code>
   counts these repeated emissions of the same inner rows as if they were real additional rows. When there are many outer duplicates, the reported actual row count for the inner child plan node can be significantly larger than the number of rows that are actually in the inner relation.
  </p>
  <p>
   BitmapAnd and BitmapOr nodes always report their actual row counts as zero, due to implementation limitations.
  </p>
  <p>
   Normally,
   <code class=""command"">
    EXPLAIN
   </code>
   will display every plan node created by the planner. However, there are cases where the executor can determine that certain nodes need not be executed because they cannot produce any rows, based on parameter values that were not available at planning time. (Currently this can only happen for child nodes of an Append or MergeAppend node that is scanning a partitioned table.) When this happens, those plan nodes are omitted from the
   <code class=""command"">
    EXPLAIN
   </code>
   output and a
   <code class=""literal"">
    Subplans Removed:
    <em class=""replaceable"">
     <code>
      N
     </code>
    </em>
   </code>
   annotation appears instead.
  </p>
 </div>
</div>
"
14. Performance Tips,14.2. Statistics Used by the Planner,https://www.postgresql.org/docs/17/planner-stats.html,"<div class=""sect1"" id=""PLANNER-STATS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     14.2. Statistics Used by the Planner
     <a class=""id_link"" href=""#PLANNER-STATS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""planner-stats.html#PLANNER-STATS-SINGLE-COLUMN"">
      14.2.1. Single-Column Statistics
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""planner-stats.html#PLANNER-STATS-EXTENDED"">
      14.2.2. Extended Statistics
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <a class=""indexterm"" id=""id-1.5.13.5.2"" name=""id-1.5.13.5.2"">
 </a>
 <div class=""sect2"" id=""PLANNER-STATS-SINGLE-COLUMN"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.2.1. Single-Column Statistics
      <a class=""id_link"" href=""#PLANNER-STATS-SINGLE-COLUMN"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   As we saw in the previous section, the query planner needs to estimate the number of rows retrieved by a query in order to make good choices of query plans. This section provides a quick look at the statistics that the system uses for these estimates.
  </p>
  <p>
   One component of the statistics is the total number of entries in each table and index, as well as the number of disk blocks occupied by each table and index. This information is kept in the table
   <a class=""link"" href=""catalog-pg-class.html"" title=""51.11. pg_class"">
    <code class=""structname"">
     pg_class
    </code>
   </a>
   , in the columns
   <code class=""structfield"">
    reltuples
   </code>
   and
   <code class=""structfield"">
    relpages
   </code>
   . We can look at it with queries similar to this one:
  </p>
  <pre class=""screen"">
SELECT relname, relkind, reltuples, relpages
FROM pg_class
WHERE relname LIKE 'tenk1%';

       relname        | relkind | reltuples | relpages
----------------------+---------+-----------+----------
 tenk1                | r       |     10000 |      345
 tenk1_hundred        | i       |     10000 |       11
 tenk1_thous_tenthous | i       |     10000 |       30
 tenk1_unique1        | i       |     10000 |       30
 tenk1_unique2        | i       |     10000 |       30
(5 rows)
</pre>
  <p>
   Here we can see that
   <code class=""structname"">
    tenk1
   </code>
   contains 10000 rows, as do its indexes, but the indexes are (unsurprisingly) much smaller than the table.
  </p>
  <p>
   For efficiency reasons,
   <code class=""structfield"">
    reltuples
   </code>
   and
   <code class=""structfield"">
    relpages
   </code>
   are not updated on-the-fly, and so they usually contain somewhat out-of-date values. They are updated by
   <code class=""command"">
    VACUUM
   </code>
   ,
   <code class=""command"">
    ANALYZE
   </code>
   , and a few DDL commands such as
   <code class=""command"">
    CREATE INDEX
   </code>
   . A
   <code class=""command"">
    VACUUM
   </code>
   or
   <code class=""command"">
    ANALYZE
   </code>
   operation that does not scan the entire table (which is commonly the case) will incrementally update the
   <code class=""structfield"">
    reltuples
   </code>
   count on the basis of the part of the table it did scan, resulting in an approximate value. In any case, the planner will scale the values it finds in
   <code class=""structname"">
    pg_class
   </code>
   to match the current physical table size, thus obtaining a closer approximation.
  </p>
  <a class=""indexterm"" id=""id-1.5.13.5.3.5"" name=""id-1.5.13.5.3.5"">
  </a>
  <p>
   Most queries retrieve only a fraction of the rows in a table, due to
   <code class=""literal"">
    WHERE
   </code>
   clauses that restrict the rows to be examined. The planner thus needs to make an estimate of the
   <em class=""firstterm"">
    selectivity
   </em>
   of
   <code class=""literal"">
    WHERE
   </code>
   clauses, that is, the fraction of rows that match each condition in the
   <code class=""literal"">
    WHERE
   </code>
   clause. The information used for this task is stored in the
   <a class=""link"" href=""catalog-pg-statistic.html"" title=""51.51. pg_statistic"">
    <code class=""structname"">
     pg_statistic
    </code>
   </a>
   system catalog. Entries in
   <code class=""structname"">
    pg_statistic
   </code>
   are updated by the
   <code class=""command"">
    ANALYZE
   </code>
   and
   <code class=""command"">
    VACUUM ANALYZE
   </code>
   commands, and are always approximate even when freshly updated.
  </p>
  <a class=""indexterm"" id=""id-1.5.13.5.3.7"" name=""id-1.5.13.5.3.7"">
  </a>
  <p>
   Rather than look at
   <code class=""structname"">
    pg_statistic
   </code>
   directly, it's better to look at its view
   <a class=""link"" href=""view-pg-stats.html"" title=""52.27. pg_stats"">
    <code class=""structname"">
     pg_stats
    </code>
   </a>
   when examining the statistics manually.
   <code class=""structname"">
    pg_stats
   </code>
   is designed to be more easily readable. Furthermore,
   <code class=""structname"">
    pg_stats
   </code>
   is readable by all, whereas
   <code class=""structname"">
    pg_statistic
   </code>
   is only readable by a superuser. (This prevents unprivileged users from learning something about the contents of other people's tables from the statistics. The
   <code class=""structname"">
    pg_stats
   </code>
   view is restricted to show only rows about tables that the current user can read.) For example, we might do:
  </p>
  <pre class=""screen"">
SELECT attname, inherited, n_distinct,
       array_to_string(most_common_vals, E'\n') as most_common_vals
FROM pg_stats
WHERE tablename = 'road';

 attname | inherited | n_distinct |          most_common_vals
---------+-----------+------------+------------------------------------
 name    | f         | -0.5681108 | I- 580                        Ramp+
         |           |            | I- 880                        Ramp+
         |           |            | Sp Railroad                       +
         |           |            | I- 580                            +
         |           |            | I- 680                        Ramp+
         |           |            | I- 80                         Ramp+
         |           |            | 14th                          St  +
         |           |            | I- 880                            +
         |           |            | Mac Arthur                    Blvd+
         |           |            | Mission                       Blvd+
...
 name    | t         |    -0.5125 | I- 580                        Ramp+
         |           |            | I- 880                        Ramp+
         |           |            | I- 580                            +
         |           |            | I- 680                        Ramp+
         |           |            | I- 80                         Ramp+
         |           |            | Sp Railroad                       +
         |           |            | I- 880                            +
         |           |            | State Hwy 13                  Ramp+
         |           |            | I- 80                             +
         |           |            | State Hwy 24                  Ramp+
...
 thepath | f         |          0 |
 thepath | t         |          0 |
(4 rows)
</pre>
  <p>
   Note that two rows are displayed for the same column, one corresponding to the complete inheritance hierarchy starting at the
   <code class=""literal"">
    road
   </code>
   table (
   <code class=""literal"">
    inherited
   </code>
   =
   <code class=""literal"">
    t
   </code>
   ), and another one including only the
   <code class=""literal"">
    road
   </code>
   table itself (
   <code class=""literal"">
    inherited
   </code>
   =
   <code class=""literal"">
    f
   </code>
   ). (For brevity, we have only shown the first ten most-common values for the
   <code class=""literal"">
    name
   </code>
   column.)
  </p>
  <p>
   The amount of information stored in
   <code class=""structname"">
    pg_statistic
   </code>
   by
   <code class=""command"">
    ANALYZE
   </code>
   , in particular the maximum number of entries in the
   <code class=""structfield"">
    most_common_vals
   </code>
   and
   <code class=""structfield"">
    histogram_bounds
   </code>
   arrays for each column, can be set on a column-by-column basis using the
   <code class=""command"">
    ALTER TABLE SET STATISTICS
   </code>
   command, or globally by setting the
   <a class=""xref"" href=""runtime-config-query.html#GUC-DEFAULT-STATISTICS-TARGET"">
    default_statistics_target
   </a>
   configuration variable. The default limit is presently 100 entries. Raising the limit might allow more accurate planner estimates to be made, particularly for columns with irregular data distributions, at the price of consuming more space in
   <code class=""structname"">
    pg_statistic
   </code>
   and slightly more time to compute the estimates. Conversely, a lower limit might be sufficient for columns with simple data distributions.
  </p>
  <p>
   Further details about the planner's use of statistics can be found in
   <a class=""xref"" href=""planner-stats-details.html"" title=""Chapter 68. How the Planner Uses Statistics"">
    Chapter 68
   </a>
   .
  </p>
 </div>
 <div class=""sect2"" id=""PLANNER-STATS-EXTENDED"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.2.2. Extended Statistics
      <a class=""id_link"" href=""#PLANNER-STATS-EXTENDED"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.13.5.4.2"" name=""id-1.5.13.5.4.2"">
  </a>
  <a class=""indexterm"" id=""id-1.5.13.5.4.3"" name=""id-1.5.13.5.4.3"">
  </a>
  <a class=""indexterm"" id=""id-1.5.13.5.4.4"" name=""id-1.5.13.5.4.4"">
  </a>
  <a class=""indexterm"" id=""id-1.5.13.5.4.5"" name=""id-1.5.13.5.4.5"">
  </a>
  <p>
   It is common to see slow queries running bad execution plans because multiple columns used in the query clauses are correlated. The planner normally assumes that multiple conditions are independent of each other, an assumption that does not hold when column values are correlated. Regular statistics, because of their per-individual-column nature, cannot capture any knowledge about cross-column correlation. However,
   <span class=""productname"">
    PostgreSQL
   </span>
   has the ability to compute
   <em class=""firstterm"">
    multivariate statistics
   </em>
   , which can capture such information.
  </p>
  <p>
   Because the number of possible column combinations is very large, it's impractical to compute multivariate statistics automatically. Instead,
   <em class=""firstterm"">
    extended statistics objects
   </em>
   , more often called just
   <em class=""firstterm"">
    statistics objects
   </em>
   , can be created to instruct the server to obtain statistics across interesting sets of columns.
  </p>
  <p>
   Statistics objects are created using the
   <a class=""link"" href=""sql-createstatistics.html"" title=""CREATE STATISTICS"">
    <code class=""command"">
     CREATE STATISTICS
    </code>
   </a>
   command. Creation of such an object merely creates a catalog entry expressing interest in the statistics. Actual data collection is performed by
   <code class=""command"">
    ANALYZE
   </code>
   (either a manual command, or background auto-analyze). The collected values can be examined in the
   <a class=""link"" href=""catalog-pg-statistic-ext-data.html"" title=""51.53. pg_statistic_ext_data"">
    <code class=""structname"">
     pg_statistic_ext_data
    </code>
   </a>
   catalog.
  </p>
  <p>
   <code class=""command"">
    ANALYZE
   </code>
   computes extended statistics based on the same sample of table rows that it takes for computing regular single-column statistics. Since the sample size is increased by increasing the statistics target for the table or any of its columns (as described in the previous section), a larger statistics target will normally result in more accurate extended statistics, as well as more time spent calculating them.
  </p>
  <p>
   The following subsections describe the kinds of extended statistics that are currently supported.
  </p>
  <div class=""sect3"" id=""PLANNER-STATS-EXTENDED-FUNCTIONAL-DEPS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       14.2.2.1. Functional Dependencies
       <a class=""id_link"" href=""#PLANNER-STATS-EXTENDED-FUNCTIONAL-DEPS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    The simplest kind of extended statistics tracks
    <em class=""firstterm"">
     functional dependencies
    </em>
    , a concept used in definitions of database normal forms. We say that column
    <code class=""structfield"">
     b
    </code>
    is functionally dependent on column
    <code class=""structfield"">
     a
    </code>
    if knowledge of the value of
    <code class=""structfield"">
     a
    </code>
    is sufficient to determine the value of
    <code class=""structfield"">
     b
    </code>
    , that is there are no two rows having the same value of
    <code class=""structfield"">
     a
    </code>
    but different values of
    <code class=""structfield"">
     b
    </code>
    . In a fully normalized database, functional dependencies should exist only on primary keys and superkeys. However, in practice many data sets are not fully normalized for various reasons; intentional denormalization for performance reasons is a common example. Even in a fully normalized database, there may be partial correlation between some columns, which can be expressed as partial functional dependency.
   </p>
   <p>
    The existence of functional dependencies directly affects the accuracy of estimates in certain queries. If a query contains conditions on both the independent and the dependent column(s), the conditions on the dependent columns do not further reduce the result size; but without knowledge of the functional dependency, the query planner will assume that the conditions are independent, resulting in underestimating the result size.
   </p>
   <p>
    To inform the planner about functional dependencies,
    <code class=""command"">
     ANALYZE
    </code>
    can collect measurements of cross-column dependency. Assessing the degree of dependency between all sets of columns would be prohibitively expensive, so data collection is limited to those groups of columns appearing together in a statistics object defined with the
    <code class=""literal"">
     dependencies
    </code>
    option. It is advisable to create
    <code class=""literal"">
     dependencies
    </code>
    statistics only for column groups that are strongly correlated, to avoid unnecessary overhead in both
    <code class=""command"">
     ANALYZE
    </code>
    and later query planning.
   </p>
   <p>
    Here is an example of collecting functional-dependency statistics:
   </p>
   <pre class=""programlisting"">
CREATE STATISTICS stts (dependencies) ON city, zip FROM zipcodes;

ANALYZE zipcodes;

SELECT stxname, stxkeys, stxddependencies
  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)
  WHERE stxname = 'stts';
 stxname | stxkeys |             stxddependencies
---------+---------+------------------------------------------
 stts    | 1 5     | {""1 =&gt; 5"": 1.000000, ""5 =&gt; 1"": 0.423130}
(1 row)
</pre>
   <p>
    Here it can be seen that column 1 (zip code) fully determines column 5 (city) so the coefficient is 1.0, while city only determines zip code about 42% of the time, meaning that there are many cities (58%) that are represented by more than a single ZIP code.
   </p>
   <p>
    When computing the selectivity for a query involving functionally dependent columns, the planner adjusts the per-condition selectivity estimates using the dependency coefficients so as not to produce an underestimate.
   </p>
   <div class=""sect4"" id=""PLANNER-STATS-EXTENDED-FUNCTIONAL-DEPS-LIMITS"">
    <div class=""titlepage"">
     <div>
      <div>
       <h5 class=""title"">
        14.2.2.1.1. Limitations of Functional Dependencies
        <a class=""id_link"" href=""#PLANNER-STATS-EXTENDED-FUNCTIONAL-DEPS-LIMITS"">
         #
        </a>
       </h5>
      </div>
     </div>
    </div>
    <p>
     Functional dependencies are currently only applied when considering simple equality conditions that compare columns to constant values, and
     <code class=""literal"">
      IN
     </code>
     clauses with constant values. They are not used to improve estimates for equality conditions comparing two columns or comparing a column to an expression, nor for range clauses,
     <code class=""literal"">
      LIKE
     </code>
     or any other type of condition.
    </p>
    <p>
     When estimating with functional dependencies, the planner assumes that conditions on the involved columns are compatible and hence redundant. If they are incompatible, the correct estimate would be zero rows, but that possibility is not considered. For example, given a query like
    </p>
    <pre class=""programlisting"">
SELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '94105';
</pre>
    <p>
     the planner will disregard the
     <code class=""structfield"">
      city
     </code>
     clause as not changing the selectivity, which is correct. However, it will make the same assumption about
    </p>
    <pre class=""programlisting"">
SELECT * FROM zipcodes WHERE city = 'San Francisco' AND zip = '90210';
</pre>
    <p>
     even though there will really be zero rows satisfying this query. Functional dependency statistics do not provide enough information to conclude that, however.
    </p>
    <p>
     In many practical situations, this assumption is usually satisfied; for example, there might be a GUI in the application that only allows selecting compatible city and ZIP code values to use in a query. But if that's not the case, functional dependencies may not be a viable option.
    </p>
   </div>
  </div>
  <div class=""sect3"" id=""PLANNER-STATS-EXTENDED-N-DISTINCT-COUNTS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       14.2.2.2. Multivariate N-Distinct Counts
       <a class=""id_link"" href=""#PLANNER-STATS-EXTENDED-N-DISTINCT-COUNTS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    Single-column statistics store the number of distinct values in each column. Estimates of the number of distinct values when combining more than one column (for example, for
    <code class=""literal"">
     GROUP BY a, b
    </code>
    ) are frequently wrong when the planner only has single-column statistical data, causing it to select bad plans.
   </p>
   <p>
    To improve such estimates,
    <code class=""command"">
     ANALYZE
    </code>
    can collect n-distinct statistics for groups of columns. As before, it's impractical to do this for every possible column grouping, so data is collected only for those groups of columns appearing together in a statistics object defined with the
    <code class=""literal"">
     ndistinct
    </code>
    option. Data will be collected for each possible combination of two or more columns from the set of listed columns.
   </p>
   <p>
    Continuing the previous example, the n-distinct counts in a table of ZIP codes might look like the following:
   </p>
   <pre class=""programlisting"">
CREATE STATISTICS stts2 (ndistinct) ON city, state, zip FROM zipcodes;

ANALYZE zipcodes;

SELECT stxkeys AS k, stxdndistinct AS nd
  FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid)
  WHERE stxname = 'stts2';
-[ RECORD 1 ]------------------------------------------------------​--
k  | 1 2 5
nd | {""1, 2"": 33178, ""1, 5"": 33178, ""2, 5"": 27435, ""1, 2, 5"": 33178}
(1 row)
</pre>
   <p>
    This indicates that there are three combinations of columns that have 33178 distinct values: ZIP code and state; ZIP code and city; and ZIP code, city and state (the fact that they are all equal is expected given that ZIP code alone is unique in this table). On the other hand, the combination of city and state has only 27435 distinct values.
   </p>
   <p>
    It's advisable to create
    <code class=""literal"">
     ndistinct
    </code>
    statistics objects only on combinations of columns that are actually used for grouping, and for which misestimation of the number of groups is resulting in bad plans. Otherwise, the
    <code class=""command"">
     ANALYZE
    </code>
    cycles are just wasted.
   </p>
  </div>
  <div class=""sect3"" id=""PLANNER-STATS-EXTENDED-MCV-LISTS"">
   <div class=""titlepage"">
    <div>
     <div>
      <h4 class=""title"">
       14.2.2.3. Multivariate MCV Lists
       <a class=""id_link"" href=""#PLANNER-STATS-EXTENDED-MCV-LISTS"">
        #
       </a>
      </h4>
     </div>
    </div>
   </div>
   <p>
    Another type of statistic stored for each column are most-common value lists. This allows very accurate estimates for individual columns, but may result in significant misestimates for queries with conditions on multiple columns.
   </p>
   <p>
    To improve such estimates,
    <code class=""command"">
     ANALYZE
    </code>
    can collect MCV lists on combinations of columns. Similarly to functional dependencies and n-distinct coefficients, it's impractical to do this for every possible column grouping. Even more so in this case, as the MCV list (unlike functional dependencies and n-distinct coefficients) does store the common column values. So data is collected only for those groups of columns appearing together in a statistics object defined with the
    <code class=""literal"">
     mcv
    </code>
    option.
   </p>
   <p>
    Continuing the previous example, the MCV list for a table of ZIP codes might look like the following (unlike for simpler types of statistics, a function is required for inspection of MCV contents):
   </p>
   <pre class=""programlisting"">
CREATE STATISTICS stts3 (mcv) ON city, state FROM zipcodes;

ANALYZE zipcodes;

SELECT m.* FROM pg_statistic_ext join pg_statistic_ext_data on (oid = stxoid),
                pg_mcv_list_items(stxdmcv) m WHERE stxname = 'stts3';

 index |         values         | nulls | frequency | base_frequency
-------+------------------------+-------+-----------+----------------
     0 | {Washington, DC}       | {f,f} |  0.003467 |        2.7e-05
     1 | {Apo, AE}              | {f,f} |  0.003067 |        1.9e-05
     2 | {Houston, TX}          | {f,f} |  0.002167 |       0.000133
     3 | {El Paso, TX}          | {f,f} |     0.002 |       0.000113
     4 | {New York, NY}         | {f,f} |  0.001967 |       0.000114
     5 | {Atlanta, GA}          | {f,f} |  0.001633 |        3.3e-05
     6 | {Sacramento, CA}       | {f,f} |  0.001433 |        7.8e-05
     7 | {Miami, FL}            | {f,f} |    0.0014 |          6e-05
     8 | {Dallas, TX}           | {f,f} |  0.001367 |        8.8e-05
     9 | {Chicago, IL}          | {f,f} |  0.001333 |        5.1e-05
   ...
(99 rows)
</pre>
   <p>
    This indicates that the most common combination of city and state is Washington in DC, with actual frequency (in the sample) about 0.35%. The base frequency of the combination (as computed from the simple per-column frequencies) is only 0.0027%, resulting in two orders of magnitude under-estimates.
   </p>
   <p>
    It's advisable to create
    <acronym class=""acronym"">
     MCV
    </acronym>
    statistics objects only on combinations of columns that are actually used in conditions together, and for which misestimation of the number of groups is resulting in bad plans. Otherwise, the
    <code class=""command"">
     ANALYZE
    </code>
    and planning cycles are just wasted.
   </p>
  </div>
 </div>
</div>
"
14. Performance Tips,14.3. Controlling the Planner with Explicit JOIN Clauses,https://www.postgresql.org/docs/17/explicit-joins.html,"<div class=""sect1"" id=""EXPLICIT-JOINS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     14.3. Controlling the Planner with Explicit
     <code class=""literal"">
      JOIN
     </code>
     Clauses
     <a class=""id_link"" href=""#EXPLICIT-JOINS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.13.6.2"" name=""id-1.5.13.6.2"">
 </a>
 <p>
  It is possible to control the query planner to some extent by using the explicit
  <code class=""literal"">
   JOIN
  </code>
  syntax. To see why this matters, we first need some background.
 </p>
 <p>
  In a simple join query, such as:
 </p>
 <pre class=""programlisting"">
SELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;
</pre>
 <p>
  the planner is free to join the given tables in any order. For example, it could generate a query plan that joins A to B, using the
  <code class=""literal"">
   WHERE
  </code>
  condition
  <code class=""literal"">
   a.id = b.id
  </code>
  , and then joins C to this joined table, using the other
  <code class=""literal"">
   WHERE
  </code>
  condition. Or it could join B to C and then join A to that result. Or it could join A to C and then join them with B — but that would be inefficient, since the full Cartesian product of A and C would have to be formed, there being no applicable condition in the
  <code class=""literal"">
   WHERE
  </code>
  clause to allow optimization of the join. (All joins in the
  <span class=""productname"">
   PostgreSQL
  </span>
  executor happen between two input tables, so it's necessary to build up the result in one or another of these fashions.) The important point is that these different join possibilities give semantically equivalent results but might have hugely different execution costs. Therefore, the planner will explore all of them to try to find the most efficient query plan.
 </p>
 <p>
  When a query only involves two or three tables, there aren't many join orders to worry about. But the number of possible join orders grows exponentially as the number of tables expands. Beyond ten or so input tables it's no longer practical to do an exhaustive search of all the possibilities, and even for six or seven tables planning might take an annoyingly long time. When there are too many input tables, the
  <span class=""productname"">
   PostgreSQL
  </span>
  planner will switch from exhaustive search to a
  <em class=""firstterm"">
   genetic
  </em>
  probabilistic search through a limited number of possibilities. (The switch-over threshold is set by the
  <a class=""xref"" href=""runtime-config-query.html#GUC-GEQO-THRESHOLD"">
   geqo_threshold
  </a>
  run-time parameter.) The genetic search takes less time, but it won't necessarily find the best possible plan.
 </p>
 <p>
  When the query involves outer joins, the planner has less freedom than it does for plain (inner) joins. For example, consider:
 </p>
 <pre class=""programlisting"">
SELECT * FROM a LEFT JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);
</pre>
 <p>
  Although this query's restrictions are superficially similar to the previous example, the semantics are different because a row must be emitted for each row of A that has no matching row in the join of B and C. Therefore the planner has no choice of join order here: it must join B to C and then join A to that result. Accordingly, this query takes less time to plan than the previous query. In other cases, the planner might be able to determine that more than one join order is safe. For example, given:
 </p>
 <pre class=""programlisting"">
SELECT * FROM a LEFT JOIN b ON (a.bid = b.id) LEFT JOIN c ON (a.cid = c.id);
</pre>
 <p>
  it is valid to join A to either B or C first. Currently, only
  <code class=""literal"">
   FULL JOIN
  </code>
  completely constrains the join order. Most practical cases involving
  <code class=""literal"">
   LEFT JOIN
  </code>
  or
  <code class=""literal"">
   RIGHT JOIN
  </code>
  can be rearranged to some extent.
 </p>
 <p>
  Explicit inner join syntax (
  <code class=""literal"">
   INNER JOIN
  </code>
  ,
  <code class=""literal"">
   CROSS JOIN
  </code>
  , or unadorned
  <code class=""literal"">
   JOIN
  </code>
  ) is semantically the same as listing the input relations in
  <code class=""literal"">
   FROM
  </code>
  , so it does not constrain the join order.
 </p>
 <p>
  Even though most kinds of
  <code class=""literal"">
   JOIN
  </code>
  don't completely constrain the join order, it is possible to instruct the
  <span class=""productname"">
   PostgreSQL
  </span>
  query planner to treat all
  <code class=""literal"">
   JOIN
  </code>
  clauses as constraining the join order anyway. For example, these three queries are logically equivalent:
 </p>
 <pre class=""programlisting"">
SELECT * FROM a, b, c WHERE a.id = b.id AND b.ref = c.id;
SELECT * FROM a CROSS JOIN b CROSS JOIN c WHERE a.id = b.id AND b.ref = c.id;
SELECT * FROM a JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);
</pre>
 <p>
  But if we tell the planner to honor the
  <code class=""literal"">
   JOIN
  </code>
  order, the second and third take less time to plan than the first. This effect is not worth worrying about for only three tables, but it can be a lifesaver with many tables.
 </p>
 <p>
  To force the planner to follow the join order laid out by explicit
  <code class=""literal"">
   JOIN
  </code>
  s, set the
  <a class=""xref"" href=""runtime-config-query.html#GUC-JOIN-COLLAPSE-LIMIT"">
   join_collapse_limit
  </a>
  run-time parameter to 1. (Other possible values are discussed below.)
 </p>
 <p>
  You do not need to constrain the join order completely in order to cut search time, because it's OK to use
  <code class=""literal"">
   JOIN
  </code>
  operators within items of a plain
  <code class=""literal"">
   FROM
  </code>
  list. For example, consider:
 </p>
 <pre class=""programlisting"">
SELECT * FROM a CROSS JOIN b, c, d, e WHERE ...;
</pre>
 <p>
  With
  <code class=""varname"">
   join_collapse_limit
  </code>
  = 1, this forces the planner to join A to B before joining them to other tables, but doesn't constrain its choices otherwise. In this example, the number of possible join orders is reduced by a factor of 5.
 </p>
 <p>
  Constraining the planner's search in this way is a useful technique both for reducing planning time and for directing the planner to a good query plan. If the planner chooses a bad join order by default, you can force it to choose a better order via
  <code class=""literal"">
   JOIN
  </code>
  syntax — assuming that you know of a better order, that is. Experimentation is recommended.
 </p>
 <p>
  A closely related issue that affects planning time is collapsing of subqueries into their parent query. For example, consider:
 </p>
 <pre class=""programlisting"">
SELECT *
FROM x, y,
    (SELECT * FROM a, b, c WHERE something) AS ss
WHERE somethingelse;
</pre>
 <p>
  This situation might arise from use of a view that contains a join; the view's
  <code class=""literal"">
   SELECT
  </code>
  rule will be inserted in place of the view reference, yielding a query much like the above. Normally, the planner will try to collapse the subquery into the parent, yielding:
 </p>
 <pre class=""programlisting"">
SELECT * FROM x, y, a, b, c WHERE something AND somethingelse;
</pre>
 <p>
  This usually results in a better plan than planning the subquery separately. (For example, the outer
  <code class=""literal"">
   WHERE
  </code>
  conditions might be such that joining X to A first eliminates many rows of A, thus avoiding the need to form the full logical output of the subquery.) But at the same time, we have increased the planning time; here, we have a five-way join problem replacing two separate three-way join problems. Because of the exponential growth of the number of possibilities, this makes a big difference. The planner tries to avoid getting stuck in huge join search problems by not collapsing a subquery if more than
  <code class=""varname"">
   from_collapse_limit
  </code>
  <code class=""literal"">
   FROM
  </code>
  items would result in the parent query. You can trade off planning time against quality of plan by adjusting this run-time parameter up or down.
 </p>
 <p>
  <a class=""xref"" href=""runtime-config-query.html#GUC-FROM-COLLAPSE-LIMIT"">
   from_collapse_limit
  </a>
  and
  <a class=""xref"" href=""runtime-config-query.html#GUC-JOIN-COLLAPSE-LIMIT"">
   join_collapse_limit
  </a>
  are similarly named because they do almost the same thing: one controls when the planner will
  <span class=""quote"">
   “
   <span class=""quote"">
    flatten out
   </span>
   ”
  </span>
  subqueries, and the other controls when it will flatten out explicit joins. Typically you would either set
  <code class=""varname"">
   join_collapse_limit
  </code>
  equal to
  <code class=""varname"">
   from_collapse_limit
  </code>
  (so that explicit joins and subqueries act similarly) or set
  <code class=""varname"">
   join_collapse_limit
  </code>
  to 1 (if you want to control join order with explicit joins). But you might set them differently if you are trying to fine-tune the trade-off between planning time and run time.
 </p>
</div>
"
14. Performance Tips,14.4. Populating a Database,https://www.postgresql.org/docs/17/populate.html,"<div class=""sect1"" id=""POPULATE"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     14.4. Populating a Database
     <a class=""id_link"" href=""#POPULATE"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#DISABLE-AUTOCOMMIT"">
      14.4.1. Disable Autocommit
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-COPY-FROM"">
      14.4.2. Use
      <code class=""command"">
       COPY
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-RM-INDEXES"">
      14.4.3. Remove Indexes
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-RM-FKEYS"">
      14.4.4. Remove Foreign Key Constraints
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-WORK-MEM"">
      14.4.5. Increase
      <code class=""varname"">
       maintenance_work_mem
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-MAX-WAL-SIZE"">
      14.4.6. Increase
      <code class=""varname"">
       max_wal_size
      </code>
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-PITR"">
      14.4.7. Disable WAL Archival and Streaming Replication
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-ANALYZE"">
      14.4.8. Run
      <code class=""command"">
       ANALYZE
      </code>
      Afterwards
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""populate.html#POPULATE-PG-DUMP"">
      14.4.9. Some Notes about
      <span class=""application"">
       pg_dump
      </span>
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  One might need to insert a large amount of data when first populating a database. This section contains some suggestions on how to make this process as efficient as possible.
 </p>
 <div class=""sect2"" id=""DISABLE-AUTOCOMMIT"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.1. Disable Autocommit
      <a class=""id_link"" href=""#DISABLE-AUTOCOMMIT"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <a class=""indexterm"" id=""id-1.5.13.7.3.2"" name=""id-1.5.13.7.3.2"">
  </a>
  <p>
   When using multiple
   <code class=""command"">
    INSERT
   </code>
   s, turn off autocommit and just do one commit at the end. (In plain SQL, this means issuing
   <code class=""command"">
    BEGIN
   </code>
   at the start and
   <code class=""command"">
    COMMIT
   </code>
   at the end. Some client libraries might do this behind your back, in which case you need to make sure the library does it when you want it done.) If you allow each insertion to be committed separately,
   <span class=""productname"">
    PostgreSQL
   </span>
   is doing a lot of work for each row that is added. An additional benefit of doing all insertions in one transaction is that if the insertion of one row were to fail then the insertion of all rows inserted up to that point would be rolled back, so you won't be stuck with partially loaded data.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-COPY-FROM"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.2. Use
      <code class=""command"">
       COPY
      </code>
      <a class=""id_link"" href=""#POPULATE-COPY-FROM"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Use
   <a class=""link"" href=""sql-copy.html"" title=""COPY"">
    <code class=""command"">
     COPY
    </code>
   </a>
   to load all the rows in one command, instead of using a series of
   <code class=""command"">
    INSERT
   </code>
   commands. The
   <code class=""command"">
    COPY
   </code>
   command is optimized for loading large numbers of rows; it is less flexible than
   <code class=""command"">
    INSERT
   </code>
   , but incurs significantly less overhead for large data loads. Since
   <code class=""command"">
    COPY
   </code>
   is a single command, there is no need to disable autocommit if you use this method to populate a table.
  </p>
  <p>
   If you cannot use
   <code class=""command"">
    COPY
   </code>
   , it might help to use
   <a class=""link"" href=""sql-prepare.html"" title=""PREPARE"">
    <code class=""command"">
     PREPARE
    </code>
   </a>
   to create a prepared
   <code class=""command"">
    INSERT
   </code>
   statement, and then use
   <code class=""command"">
    EXECUTE
   </code>
   as many times as required. This avoids some of the overhead of repeatedly parsing and planning
   <code class=""command"">
    INSERT
   </code>
   . Different interfaces provide this facility in different ways; look for
   <span class=""quote"">
    “
    <span class=""quote"">
     prepared statements
    </span>
    ”
   </span>
   in the interface documentation.
  </p>
  <p>
   Note that loading a large number of rows using
   <code class=""command"">
    COPY
   </code>
   is almost always faster than using
   <code class=""command"">
    INSERT
   </code>
   , even if
   <code class=""command"">
    PREPARE
   </code>
   is used and multiple insertions are batched into a single transaction.
  </p>
  <p>
   <code class=""command"">
    COPY
   </code>
   is fastest when used within the same transaction as an earlier
   <code class=""command"">
    CREATE TABLE
   </code>
   or
   <code class=""command"">
    TRUNCATE
   </code>
   command. In such cases no WAL needs to be written, because in case of an error, the files containing the newly loaded data will be removed anyway. However, this consideration only applies when
   <a class=""xref"" href=""runtime-config-wal.html#GUC-WAL-LEVEL"">
    wal_level
   </a>
   is
   <code class=""literal"">
    minimal
   </code>
   as all commands must write WAL otherwise.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-RM-INDEXES"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.3. Remove Indexes
      <a class=""id_link"" href=""#POPULATE-RM-INDEXES"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   If you are loading a freshly created table, the fastest method is to create the table, bulk load the table's data using
   <code class=""command"">
    COPY
   </code>
   , then create any indexes needed for the table. Creating an index on pre-existing data is quicker than updating it incrementally as each row is loaded.
  </p>
  <p>
   If you are adding large amounts of data to an existing table, it might be a win to drop the indexes, load the table, and then recreate the indexes. Of course, the database performance for other users might suffer during the time the indexes are missing. One should also think twice before dropping a unique index, since the error checking afforded by the unique constraint will be lost while the index is missing.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-RM-FKEYS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.4. Remove Foreign Key Constraints
      <a class=""id_link"" href=""#POPULATE-RM-FKEYS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Just as with indexes, a foreign key constraint can be checked
   <span class=""quote"">
    “
    <span class=""quote"">
     in bulk
    </span>
    ”
   </span>
   more efficiently than row-by-row. So it might be useful to drop foreign key constraints, load data, and re-create the constraints. Again, there is a trade-off between data load speed and loss of error checking while the constraint is missing.
  </p>
  <p>
   What's more, when you load data into a table with existing foreign key constraints, each new row requires an entry in the server's list of pending trigger events (since it is the firing of a trigger that checks the row's foreign key constraint). Loading many millions of rows can cause the trigger event queue to overflow available memory, leading to intolerable swapping or even outright failure of the command. Therefore it may be
   <span class=""emphasis"">
    <em>
     necessary
    </em>
   </span>
   , not just desirable, to drop and re-apply foreign keys when loading large amounts of data. If temporarily removing the constraint isn't acceptable, the only other recourse may be to split up the load operation into smaller transactions.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-WORK-MEM"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.5. Increase
      <code class=""varname"">
       maintenance_work_mem
      </code>
      <a class=""id_link"" href=""#POPULATE-WORK-MEM"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Temporarily increasing the
   <a class=""xref"" href=""runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM"">
    maintenance_work_mem
   </a>
   configuration variable when loading large amounts of data can lead to improved performance. This will help to speed up
   <code class=""command"">
    CREATE INDEX
   </code>
   commands and
   <code class=""command"">
    ALTER TABLE ADD FOREIGN KEY
   </code>
   commands. It won't do much for
   <code class=""command"">
    COPY
   </code>
   itself, so this advice is only useful when you are using one or both of the above techniques.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-MAX-WAL-SIZE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.6. Increase
      <code class=""varname"">
       max_wal_size
      </code>
      <a class=""id_link"" href=""#POPULATE-MAX-WAL-SIZE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Temporarily increasing the
   <a class=""xref"" href=""runtime-config-wal.html#GUC-MAX-WAL-SIZE"">
    max_wal_size
   </a>
   configuration variable can also make large data loads faster. This is because loading a large amount of data into
   <span class=""productname"">
    PostgreSQL
   </span>
   will cause checkpoints to occur more often than the normal checkpoint frequency (specified by the
   <code class=""varname"">
    checkpoint_timeout
   </code>
   configuration variable). Whenever a checkpoint occurs, all dirty pages must be flushed to disk. By increasing
   <code class=""varname"">
    max_wal_size
   </code>
   temporarily during bulk data loads, the number of checkpoints that are required can be reduced.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-PITR"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.7. Disable WAL Archival and Streaming Replication
      <a class=""id_link"" href=""#POPULATE-PITR"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   When loading large amounts of data into an installation that uses WAL archiving or streaming replication, it might be faster to take a new base backup after the load has completed than to process a large amount of incremental WAL data. To prevent incremental WAL logging while loading, disable archiving and streaming replication, by setting
   <a class=""xref"" href=""runtime-config-wal.html#GUC-WAL-LEVEL"">
    wal_level
   </a>
   to
   <code class=""literal"">
    minimal
   </code>
   ,
   <a class=""xref"" href=""runtime-config-wal.html#GUC-ARCHIVE-MODE"">
    archive_mode
   </a>
   to
   <code class=""literal"">
    off
   </code>
   , and
   <a class=""xref"" href=""runtime-config-replication.html#GUC-MAX-WAL-SENDERS"">
    max_wal_senders
   </a>
   to zero. But note that changing these settings requires a server restart, and makes any base backups taken before unavailable for archive recovery and standby server, which may lead to data loss.
  </p>
  <p>
   Aside from avoiding the time for the archiver or WAL sender to process the WAL data, doing this will actually make certain commands faster, because they do not to write WAL at all if
   <code class=""varname"">
    wal_level
   </code>
   is
   <code class=""literal"">
    minimal
   </code>
   and the current subtransaction (or top-level transaction) created or truncated the table or index they change. (They can guarantee crash safety more cheaply by doing an
   <code class=""function"">
    fsync
   </code>
   at the end than by writing WAL.)
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-ANALYZE"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.8. Run
      <code class=""command"">
       ANALYZE
      </code>
      Afterwards
      <a class=""id_link"" href=""#POPULATE-ANALYZE"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Whenever you have significantly altered the distribution of data within a table, running
   <a class=""link"" href=""sql-analyze.html"" title=""ANALYZE"">
    <code class=""command"">
     ANALYZE
    </code>
   </a>
   is strongly recommended. This includes bulk loading large amounts of data into the table. Running
   <code class=""command"">
    ANALYZE
   </code>
   (or
   <code class=""command"">
    VACUUM ANALYZE
   </code>
   ) ensures that the planner has up-to-date statistics about the table. With no statistics or obsolete statistics, the planner might make poor decisions during query planning, leading to poor performance on any tables with inaccurate or nonexistent statistics. Note that if the autovacuum daemon is enabled, it might run
   <code class=""command"">
    ANALYZE
   </code>
   automatically; see
   <a class=""xref"" href=""routine-vacuuming.html#VACUUM-FOR-STATISTICS"" title=""24.1.3. Updating Planner Statistics"">
    Section 24.1.3
   </a>
   and
   <a class=""xref"" href=""routine-vacuuming.html#AUTOVACUUM"" title=""24.1.6. The Autovacuum Daemon"">
    Section 24.1.6
   </a>
   for more information.
  </p>
 </div>
 <div class=""sect2"" id=""POPULATE-PG-DUMP"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      14.4.9. Some Notes about
      <span class=""application"">
       pg_dump
      </span>
      <a class=""id_link"" href=""#POPULATE-PG-DUMP"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Dump scripts generated by
   <span class=""application"">
    pg_dump
   </span>
   automatically apply several, but not all, of the above guidelines. To restore a
   <span class=""application"">
    pg_dump
   </span>
   dump as quickly as possible, you need to do a few extra things manually. (Note that these points apply while
   <span class=""emphasis"">
    <em>
     restoring
    </em>
   </span>
   a dump, not while
   <span class=""emphasis"">
    <em>
     creating
    </em>
   </span>
   it. The same points apply whether loading a text dump with
   <span class=""application"">
    psql
   </span>
   or using
   <span class=""application"">
    pg_restore
   </span>
   to load from a
   <span class=""application"">
    pg_dump
   </span>
   archive file.)
  </p>
  <p>
   By default,
   <span class=""application"">
    pg_dump
   </span>
   uses
   <code class=""command"">
    COPY
   </code>
   , and when it is generating a complete schema-and-data dump, it is careful to load data before creating indexes and foreign keys. So in this case several guidelines are handled automatically. What is left for you to do is to:
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      Set appropriate (i.e., larger than normal) values for
      <code class=""varname"">
       maintenance_work_mem
      </code>
      and
      <code class=""varname"">
       max_wal_size
      </code>
      .
     </p>
    </li>
    <li class=""listitem"">
     <p>
      If using WAL archiving or streaming replication, consider disabling them during the restore. To do that, set
      <code class=""varname"">
       archive_mode
      </code>
      to
      <code class=""literal"">
       off
      </code>
      ,
      <code class=""varname"">
       wal_level
      </code>
      to
      <code class=""literal"">
       minimal
      </code>
      , and
      <code class=""varname"">
       max_wal_senders
      </code>
      to zero before loading the dump. Afterwards, set them back to the right values and take a fresh base backup.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Experiment with the parallel dump and restore modes of both
      <span class=""application"">
       pg_dump
      </span>
      and
      <span class=""application"">
       pg_restore
      </span>
      and find the optimal number of concurrent jobs to use. Dumping and restoring in parallel by means of the
      <code class=""option"">
       -j
      </code>
      option should give you a significantly higher performance over the serial mode.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Consider whether the whole dump should be restored as a single transaction. To do that, pass the
      <code class=""option"">
       -1
      </code>
      or
      <code class=""option"">
       --single-transaction
      </code>
      command-line option to
      <span class=""application"">
       psql
      </span>
      or
      <span class=""application"">
       pg_restore
      </span>
      . When using this mode, even the smallest of errors will rollback the entire restore, possibly discarding many hours of processing. Depending on how interrelated the data is, that might seem preferable to manual cleanup, or not.
      <code class=""command"">
       COPY
      </code>
      commands will run fastest if you use a single transaction and have WAL archiving turned off.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      If multiple CPUs are available in the database server, consider using
      <span class=""application"">
       pg_restore
      </span>
      's
      <code class=""option"">
       --jobs
      </code>
      option. This allows concurrent data loading and index creation.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      Run
      <code class=""command"">
       ANALYZE
      </code>
      afterwards.
     </p>
    </li>
   </ul>
  </div>
  <p>
   A data-only dump will still use
   <code class=""command"">
    COPY
   </code>
   , but it does not drop or recreate indexes, and it does not normally touch foreign keys.
   <a class=""footnote"" href=""#ftn.id-1.5.13.7.11.4.2"">
    <sup class=""footnote"" id=""id-1.5.13.7.11.4.2"">
     [14]
    </sup>
   </a>
   So when loading a data-only dump, it is up to you to drop and recreate indexes and foreign keys if you wish to use those techniques. It's still useful to increase
   <code class=""varname"">
    max_wal_size
   </code>
   while loading the data, but don't bother increasing
   <code class=""varname"">
    maintenance_work_mem
   </code>
   ; rather, you'd do that while manually recreating indexes and foreign keys afterwards. And don't forget to
   <code class=""command"">
    ANALYZE
   </code>
   when you're done; see
   <a class=""xref"" href=""routine-vacuuming.html#VACUUM-FOR-STATISTICS"" title=""24.1.3. Updating Planner Statistics"">
    Section 24.1.3
   </a>
   and
   <a class=""xref"" href=""routine-vacuuming.html#AUTOVACUUM"" title=""24.1.6. The Autovacuum Daemon"">
    Section 24.1.6
   </a>
   for more information.
  </p>
 </div>
 <div class=""footnotes"">
  <br/>
  <hr style=""width:100; text-align:left;margin-left: 0""/>
  <div class=""footnote"" id=""ftn.id-1.5.13.7.11.4.2"">
   <p>
    <a class=""para"" href=""#id-1.5.13.7.11.4.2"">
     <sup class=""para"">
      [14]
     </sup>
    </a>
    You can get the effect of disabling foreign keys by using the
    <code class=""option"">
     --disable-triggers
    </code>
    option — but realize that that eliminates, rather than just postpones, foreign key validation, and so it is possible to insert bad data if you use it.
   </p>
  </div>
 </div>
</div>
"
14. Performance Tips,14.5. Non-Durable Settings,https://www.postgresql.org/docs/17/non-durability.html,"<div class=""sect1"" id=""NON-DURABILITY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     14.5. Non-Durable Settings
     <a class=""id_link"" href=""#NON-DURABILITY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <a class=""indexterm"" id=""id-1.5.13.8.2"" name=""id-1.5.13.8.2"">
 </a>
 <p>
  Durability is a database feature that guarantees the recording of committed transactions even if the server crashes or loses power. However, durability adds significant database overhead, so if your site does not require such a guarantee,
  <span class=""productname"">
   PostgreSQL
  </span>
  can be configured to run much faster. The following are configuration changes you can make to improve performance in such cases. Except as noted below, durability is still guaranteed in case of a crash of the database software; only an abrupt operating system crash creates a risk of data loss or corruption when these settings are used.
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Place the database cluster's data directory in a memory-backed file system (i.e.,
     <acronym class=""acronym"">
      RAM
     </acronym>
     disk). This eliminates all database disk I/O, but limits data storage to the amount of available memory (and perhaps swap).
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Turn off
     <a class=""xref"" href=""runtime-config-wal.html#GUC-FSYNC"">
      fsync
     </a>
     ; there is no need to flush data to disk.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Turn off
     <a class=""xref"" href=""runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT"">
      synchronous_commit
     </a>
     ; there might be no need to force
     <acronym class=""acronym"">
      WAL
     </acronym>
     writes to disk on every commit. This setting does risk transaction loss (though not data corruption) in case of a crash of the
     <span class=""emphasis"">
      <em>
       database
      </em>
     </span>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Turn off
     <a class=""xref"" href=""runtime-config-wal.html#GUC-FULL-PAGE-WRITES"">
      full_page_writes
     </a>
     ; there is no need to guard against partial page writes.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Increase
     <a class=""xref"" href=""runtime-config-wal.html#GUC-MAX-WAL-SIZE"">
      max_wal_size
     </a>
     and
     <a class=""xref"" href=""runtime-config-wal.html#GUC-CHECKPOINT-TIMEOUT"">
      checkpoint_timeout
     </a>
     ; this reduces the frequency of checkpoints, but increases the storage requirements of
     <code class=""filename"">
      /pg_wal
     </code>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Create
     <a class=""link"" href=""sql-createtable.html#SQL-CREATETABLE-UNLOGGED"">
      unlogged tables
     </a>
     to avoid
     <acronym class=""acronym"">
      WAL
     </acronym>
     writes, though it makes the tables non-crash-safe.
    </p>
   </li>
  </ul>
 </div>
</div>
"
15. Parallel Query,15.1. How Parallel Query Works,https://www.postgresql.org/docs/17/how-parallel-query-works.html,"<div class=""sect1"" id=""HOW-PARALLEL-QUERY-WORKS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     15.1. How Parallel Query Works
     <a class=""id_link"" href=""#HOW-PARALLEL-QUERY-WORKS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  When the optimizer determines that parallel query is the fastest execution strategy for a particular query, it will create a query plan that includes a
  <em class=""firstterm"">
   Gather
  </em>
  or
  <em class=""firstterm"">
   Gather Merge
  </em>
  node. Here is a simple example:
 </p>
 <pre class=""screen"">
EXPLAIN SELECT * FROM pgbench_accounts WHERE filler LIKE '%x%';
                                     QUERY PLAN
-------------------------------------------------------------------​------------------
 Gather  (cost=1000.00..217018.43 rows=1 width=97)
   Workers Planned: 2
   -&gt;  Parallel Seq Scan on pgbench_accounts  (cost=0.00..216018.33 rows=1 width=97)
         Filter: (filler ~~ '%x%'::text)
(4 rows)
</pre>
 <p>
  In all cases, the
  <code class=""literal"">
   Gather
  </code>
  or
  <code class=""literal"">
   Gather Merge
  </code>
  node will have exactly one child plan, which is the portion of the plan that will be executed in parallel. If the
  <code class=""literal"">
   Gather
  </code>
  or
  <code class=""literal"">
   Gather Merge
  </code>
  node is at the very top of the plan tree, then the entire query will execute in parallel. If it is somewhere else in the plan tree, then only the portion of the plan below it will run in parallel. In the example above, the query accesses only one table, so there is only one plan node other than the
  <code class=""literal"">
   Gather
  </code>
  node itself; since that plan node is a child of the
  <code class=""literal"">
   Gather
  </code>
  node, it will run in parallel.
 </p>
 <p>
  <a class=""link"" href=""using-explain.html"" title=""14.1. Using EXPLAIN"">
   Using EXPLAIN
  </a>
  , you can see the number of workers chosen by the planner. When the
  <code class=""literal"">
   Gather
  </code>
  node is reached during query execution, the process that is implementing the user's session will request a number of
  <a class=""link"" href=""bgworker.html"" title=""Chapter 46. Background Worker Processes"">
   background worker processes
  </a>
  equal to the number of workers chosen by the planner. The number of background workers that the planner will consider using is limited to at most
  <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER"">
   max_parallel_workers_per_gather
  </a>
  . The total number of background workers that can exist at any one time is limited by both
  <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES"">
   max_worker_processes
  </a>
  and
  <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS"">
   max_parallel_workers
  </a>
  . Therefore, it is possible for a parallel query to run with fewer workers than planned, or even with no workers at all. The optimal plan may depend on the number of workers that are available, so this can result in poor query performance. If this occurrence is frequent, consider increasing
  <code class=""varname"">
   max_worker_processes
  </code>
  and
  <code class=""varname"">
   max_parallel_workers
  </code>
  so that more workers can be run simultaneously or alternatively reducing
  <code class=""varname"">
   max_parallel_workers_per_gather
  </code>
  so that the planner requests fewer workers.
 </p>
 <p>
  Every background worker process that is successfully started for a given parallel query will execute the parallel portion of the plan. The leader will also execute that portion of the plan, but it has an additional responsibility: it must also read all of the tuples generated by the workers. When the parallel portion of the plan generates only a small number of tuples, the leader will often behave very much like an additional worker, speeding up query execution. Conversely, when the parallel portion of the plan generates a large number of tuples, the leader may be almost entirely occupied with reading the tuples generated by the workers and performing any further processing steps that are required by plan nodes above the level of the
  <code class=""literal"">
   Gather
  </code>
  node or
  <code class=""literal"">
   Gather Merge
  </code>
  node. In such cases, the leader will do very little of the work of executing the parallel portion of the plan.
 </p>
 <p>
  When the node at the top of the parallel portion of the plan is
  <code class=""literal"">
   Gather Merge
  </code>
  rather than
  <code class=""literal"">
   Gather
  </code>
  , it indicates that each process executing the parallel portion of the plan is producing tuples in sorted order, and that the leader is performing an order-preserving merge. In contrast,
  <code class=""literal"">
   Gather
  </code>
  reads tuples from the workers in whatever order is convenient, destroying any sort order that may have existed.
 </p>
</div>
"
15. Parallel Query,15.2. When Can Parallel Query Be Used?,https://www.postgresql.org/docs/17/when-can-parallel-query-be-used.html,"<div class=""sect1"" id=""WHEN-CAN-PARALLEL-QUERY-BE-USED"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     15.2. When Can Parallel Query Be Used?
     <a class=""id_link"" href=""#WHEN-CAN-PARALLEL-QUERY-BE-USED"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <p>
  There are several settings that can cause the query planner not to generate a parallel query plan under any circumstances. In order for any parallel query plans whatsoever to be generated, the following settings must be configured as indicated.
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER"">
      max_parallel_workers_per_gather
     </a>
     must be set to a value that is greater than zero. This is a special case of the more general principle that no more workers should be used than the number configured via
     <code class=""varname"">
      max_parallel_workers_per_gather
     </code>
     .
    </p>
   </li>
  </ul>
 </div>
 <p>
  In addition, the system must not be running in single-user mode. Since the entire database system is running as a single process in this situation, no background workers will be available.
 </p>
 <p>
  Even when it is in general possible for parallel query plans to be generated, the planner will not generate them for a given query if any of the following are true:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     The query writes any data or locks any database rows. If a query contains a data-modifying operation either at the top level or within a CTE, no parallel plans for that query will be generated. As an exception, the following commands, which create a new table and populate it, can use a parallel plan for the underlying
     <code class=""literal"">
      SELECT
     </code>
     part of the query:
    </p>
    <div class=""itemizedlist"">
     <ul class=""itemizedlist"" style=""list-style-type: circle;"">
      <li class=""listitem"">
       <p>
        <code class=""command"">
         CREATE TABLE ... AS
        </code>
       </p>
      </li>
      <li class=""listitem"">
       <p>
        <code class=""command"">
         SELECT INTO
        </code>
       </p>
      </li>
      <li class=""listitem"">
       <p>
        <code class=""command"">
         CREATE MATERIALIZED VIEW
        </code>
       </p>
      </li>
      <li class=""listitem"">
       <p>
        <code class=""command"">
         REFRESH MATERIALIZED VIEW
        </code>
       </p>
      </li>
     </ul>
    </div>
   </li>
   <li class=""listitem"">
    <p>
     The query might be suspended during execution. In any situation in which the system thinks that partial or incremental execution might occur, no parallel plan is generated. For example, a cursor created using
     <a class=""link"" href=""sql-declare.html"" title=""DECLARE"">
      DECLARE CURSOR
     </a>
     will never use a parallel plan. Similarly, a PL/pgSQL loop of the form
     <code class=""literal"">
      FOR x IN query LOOP .. END LOOP
     </code>
     will never use a parallel plan, because the parallel query system is unable to verify that the code in the loop is safe to execute while parallel query is active.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The query uses any function marked
     <code class=""literal"">
      PARALLEL UNSAFE
     </code>
     . Most system-defined functions are
     <code class=""literal"">
      PARALLEL SAFE
     </code>
     , but user-defined functions are marked
     <code class=""literal"">
      PARALLEL UNSAFE
     </code>
     by default. See the discussion of
     <a class=""xref"" href=""parallel-safety.html"" title=""15.4. Parallel Safety"">
      Section 15.4
     </a>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The query is running inside of another query that is already parallel. For example, if a function called by a parallel query issues an SQL query itself, that query will never use a parallel plan. This is a limitation of the current implementation, but it may not be desirable to remove this limitation, since it could result in a single query using a very large number of processes.
    </p>
   </li>
  </ul>
 </div>
 <p>
  Even when a parallel query plan is generated for a particular query, there are several circumstances under which it will be impossible to execute that plan in parallel at execution time. If this occurs, the leader will execute the portion of the plan below the
  <code class=""literal"">
   Gather
  </code>
  node entirely by itself, almost as if the
  <code class=""literal"">
   Gather
  </code>
  node were not present. This will happen if any of the following conditions are met:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     No background workers can be obtained because of the limitation that the total number of background workers cannot exceed
     <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES"">
      max_worker_processes
     </a>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     No background workers can be obtained because of the limitation that the total number of background workers launched for purposes of parallel query cannot exceed
     <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS"">
      max_parallel_workers
     </a>
     .
    </p>
   </li>
   <li class=""listitem"">
    <p>
     The client sends an Execute message with a non-zero fetch count. See the discussion of the
     <a class=""link"" href=""protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY"" title=""53.2.3. Extended Query"">
      extended query protocol
     </a>
     . Since
     <a class=""link"" href=""libpq.html"" title=""Chapter 32. libpq — C Library"">
      libpq
     </a>
     currently provides no way to send such a message, this can only occur when using a client that does not rely on libpq. If this is a frequent occurrence, it may be a good idea to set
     <a class=""xref"" href=""runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER"">
      max_parallel_workers_per_gather
     </a>
     to zero in sessions where it is likely, so as to avoid generating query plans that may be suboptimal when run serially.
    </p>
   </li>
  </ul>
 </div>
</div>
"
15. Parallel Query,15.3. Parallel Plans,https://www.postgresql.org/docs/17/parallel-plans.html,"<div class=""sect1"" id=""PARALLEL-PLANS"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     15.3. Parallel Plans
     <a class=""id_link"" href=""#PARALLEL-PLANS"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""parallel-plans.html#PARALLEL-SCANS"">
      15.3.1. Parallel Scans
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""parallel-plans.html#PARALLEL-JOINS"">
      15.3.2. Parallel Joins
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""parallel-plans.html#PARALLEL-AGGREGATION"">
      15.3.3. Parallel Aggregation
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""parallel-plans.html#PARALLEL-APPEND"">
      15.3.4. Parallel Append
     </a>
    </span>
   </dt>
   <dt>
    <span class=""sect2"">
     <a href=""parallel-plans.html#PARALLEL-PLAN-TIPS"">
      15.3.5. Parallel Plan Tips
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  Because each worker executes the parallel portion of the plan to completion, it is not possible to simply take an ordinary query plan and run it using multiple workers. Each worker would produce a full copy of the output result set, so the query would not run any faster than normal but would produce incorrect results. Instead, the parallel portion of the plan must be what is known internally to the query optimizer as a
  <em class=""firstterm"">
   partial plan
  </em>
  ; that is, it must be constructed so that each process that executes the plan will generate only a subset of the output rows in such a way that each required output row is guaranteed to be generated by exactly one of the cooperating processes. Generally, this means that the scan on the driving table of the query must be a parallel-aware scan.
 </p>
 <div class=""sect2"" id=""PARALLEL-SCANS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.3.1. Parallel Scans
      <a class=""id_link"" href=""#PARALLEL-SCANS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The following types of parallel-aware table scans are currently supported.
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        parallel sequential scan
       </em>
      </span>
      , the table's blocks will be divided into ranges and shared among the cooperating processes. Each worker process will complete the scanning of its given range of blocks before requesting an additional range of blocks.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        parallel bitmap heap scan
       </em>
      </span>
      , one process is chosen as the leader. That process performs a scan of one or more indexes and builds a bitmap indicating which table blocks need to be visited. These blocks are then divided among the cooperating processes as in a parallel sequential scan. In other words, the heap scan is performed in parallel, but the underlying index scan is not.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        parallel index scan
       </em>
      </span>
      or
      <span class=""emphasis"">
       <em>
        parallel index-only scan
       </em>
      </span>
      , the cooperating processes take turns reading data from the index. Currently, parallel index scans are supported only for btree indexes. Each process will claim a single index block and will scan and return all tuples referenced by that block; other processes can at the same time be returning tuples from a different index block. The results of a parallel btree scan are returned in sorted order within each worker process.
     </p>
    </li>
   </ul>
  </div>
  <p>
   Other scan types, such as scans of non-btree indexes, may support parallel scans in the future.
  </p>
 </div>
 <div class=""sect2"" id=""PARALLEL-JOINS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.3.2. Parallel Joins
      <a class=""id_link"" href=""#PARALLEL-JOINS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Just as in a non-parallel plan, the driving table may be joined to one or more other tables using a nested loop, hash join, or merge join. The inner side of the join may be any kind of non-parallel plan that is otherwise supported by the planner provided that it is safe to run within a parallel worker. Depending on the join type, the inner side may also be a parallel plan.
  </p>
  <div class=""itemizedlist"">
   <ul class=""itemizedlist"" style=""list-style-type: disc;"">
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        nested loop join
       </em>
      </span>
      , the inner side is always non-parallel. Although it is executed in full, this is efficient if the inner side is an index scan, because the outer tuples and thus the loops that look up values in the index are divided over the cooperating processes.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        merge join
       </em>
      </span>
      , the inner side is always a non-parallel plan and therefore executed in full. This may be inefficient, especially if a sort must be performed, because the work and resulting data are duplicated in every cooperating process.
     </p>
    </li>
    <li class=""listitem"">
     <p>
      In a
      <span class=""emphasis"">
       <em>
        hash join
       </em>
      </span>
      (without the ""parallel"" prefix), the inner side is executed in full by every cooperating process to build identical copies of the hash table. This may be inefficient if the hash table is large or the plan is expensive. In a
      <span class=""emphasis"">
       <em>
        parallel hash join
       </em>
      </span>
      , the inner side is a
      <span class=""emphasis"">
       <em>
        parallel hash
       </em>
      </span>
      that divides the work of building a shared hash table over the cooperating processes.
     </p>
    </li>
   </ul>
  </div>
 </div>
 <div class=""sect2"" id=""PARALLEL-AGGREGATION"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.3.3. Parallel Aggregation
      <a class=""id_link"" href=""#PARALLEL-AGGREGATION"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   <span class=""productname"">
    PostgreSQL
   </span>
   supports parallel aggregation by aggregating in two stages. First, each process participating in the parallel portion of the query performs an aggregation step, producing a partial result for each group of which that process is aware. This is reflected in the plan as a
   <code class=""literal"">
    Partial Aggregate
   </code>
   node. Second, the partial results are transferred to the leader via
   <code class=""literal"">
    Gather
   </code>
   or
   <code class=""literal"">
    Gather Merge
   </code>
   . Finally, the leader re-aggregates the results across all workers in order to produce the final result. This is reflected in the plan as a
   <code class=""literal"">
    Finalize Aggregate
   </code>
   node.
  </p>
  <p>
   Because the
   <code class=""literal"">
    Finalize Aggregate
   </code>
   node runs on the leader process, queries that produce a relatively large number of groups in comparison to the number of input rows will appear less favorable to the query planner. For example, in the worst-case scenario the number of groups seen by the
   <code class=""literal"">
    Finalize Aggregate
   </code>
   node could be as many as the number of input rows that were seen by all worker processes in the
   <code class=""literal"">
    Partial Aggregate
   </code>
   stage. For such cases, there is clearly going to be no performance benefit to using parallel aggregation. The query planner takes this into account during the planning process and is unlikely to choose parallel aggregate in this scenario.
  </p>
  <p>
   Parallel aggregation is not supported in all situations. Each aggregate must be
   <a class=""link"" href=""parallel-safety.html"" title=""15.4. Parallel Safety"">
    safe
   </a>
   for parallelism and must have a combine function. If the aggregate has a transition state of type
   <code class=""literal"">
    internal
   </code>
   , it must have serialization and deserialization functions. See
   <a class=""xref"" href=""sql-createaggregate.html"" title=""CREATE AGGREGATE"">
    <span class=""refentrytitle"">
     CREATE AGGREGATE
    </span>
   </a>
   for more details. Parallel aggregation is not supported if any aggregate function call contains
   <code class=""literal"">
    DISTINCT
   </code>
   or
   <code class=""literal"">
    ORDER BY
   </code>
   clause and is also not supported for ordered set aggregates or when the query involves
   <code class=""literal"">
    GROUPING SETS
   </code>
   . It can only be used when all joins involved in the query are also part of the parallel portion of the plan.
  </p>
 </div>
 <div class=""sect2"" id=""PARALLEL-APPEND"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.3.4. Parallel Append
      <a class=""id_link"" href=""#PARALLEL-APPEND"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   Whenever
   <span class=""productname"">
    PostgreSQL
   </span>
   needs to combine rows from multiple sources into a single result set, it uses an
   <code class=""literal"">
    Append
   </code>
   or
   <code class=""literal"">
    MergeAppend
   </code>
   plan node. This commonly happens when implementing
   <code class=""literal"">
    UNION ALL
   </code>
   or when scanning a partitioned table. Such nodes can be used in parallel plans just as they can in any other plan. However, in a parallel plan, the planner may instead use a
   <code class=""literal"">
    Parallel Append
   </code>
   node.
  </p>
  <p>
   When an
   <code class=""literal"">
    Append
   </code>
   node is used in a parallel plan, each process will execute the child plans in the order in which they appear, so that all participating processes cooperate to execute the first child plan until it is complete and then move to the second plan at around the same time. When a
   <code class=""literal"">
    Parallel Append
   </code>
   is used instead, the executor will instead spread out the participating processes as evenly as possible across its child plans, so that multiple child plans are executed simultaneously. This avoids contention, and also avoids paying the startup cost of a child plan in those processes that never execute it.
  </p>
  <p>
   Also, unlike a regular
   <code class=""literal"">
    Append
   </code>
   node, which can only have partial children when used within a parallel plan, a
   <code class=""literal"">
    Parallel Append
   </code>
   node can have both partial and non-partial child plans. Non-partial children will be scanned by only a single process, since scanning them more than once would produce duplicate results. Plans that involve appending multiple results sets can therefore achieve coarse-grained parallelism even when efficient partial plans are not available. For example, consider a query against a partitioned table that can only be implemented efficiently by using an index that does not support parallel scans. The planner might choose a
   <code class=""literal"">
    Parallel Append
   </code>
   of regular
   <code class=""literal"">
    Index Scan
   </code>
   plans; each individual index scan would have to be executed to completion by a single process, but different scans could be performed at the same time by different processes.
  </p>
  <p>
   <a class=""xref"" href=""runtime-config-query.html#GUC-ENABLE-PARALLEL-APPEND"">
    enable_parallel_append
   </a>
   can be used to disable this feature.
  </p>
 </div>
 <div class=""sect2"" id=""PARALLEL-PLAN-TIPS"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.3.5. Parallel Plan Tips
      <a class=""id_link"" href=""#PARALLEL-PLAN-TIPS"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   If a query that is expected to do so does not produce a parallel plan, you can try reducing
   <a class=""xref"" href=""runtime-config-query.html#GUC-PARALLEL-SETUP-COST"">
    parallel_setup_cost
   </a>
   or
   <a class=""xref"" href=""runtime-config-query.html#GUC-PARALLEL-TUPLE-COST"">
    parallel_tuple_cost
   </a>
   . Of course, this plan may turn out to be slower than the serial plan that the planner preferred, but this will not always be the case. If you don't get a parallel plan even with very small values of these settings (e.g., after setting them both to zero), there may be some reason why the query planner is unable to generate a parallel plan for your query. See
   <a class=""xref"" href=""when-can-parallel-query-be-used.html"" title=""15.2. When Can Parallel Query Be Used?"">
    Section 15.2
   </a>
   and
   <a class=""xref"" href=""parallel-safety.html"" title=""15.4. Parallel Safety"">
    Section 15.4
   </a>
   for information on why this may be the case.
  </p>
  <p>
   When executing a parallel plan, you can use
   <code class=""literal"">
    EXPLAIN (ANALYZE, VERBOSE)
   </code>
   to display per-worker statistics for each plan node. This may be useful in determining whether the work is being evenly distributed between all plan nodes and more generally in understanding the performance characteristics of the plan.
  </p>
 </div>
</div>
"
15. Parallel Query,15.4. Parallel Safety,https://www.postgresql.org/docs/17/parallel-safety.html,"<div class=""sect1"" id=""PARALLEL-SAFETY"">
 <div class=""titlepage"">
  <div>
   <div>
    <h2 class=""title"" style=""clear: both"">
     15.4. Parallel Safety
     <a class=""id_link"" href=""#PARALLEL-SAFETY"">
      #
     </a>
    </h2>
   </div>
  </div>
 </div>
 <div class=""toc"">
  <dl class=""toc"">
   <dt>
    <span class=""sect2"">
     <a href=""parallel-safety.html#PARALLEL-LABELING"">
      15.4.1. Parallel Labeling for Functions and Aggregates
     </a>
    </span>
   </dt>
  </dl>
 </div>
 <p>
  The planner classifies operations involved in a query as either
  <em class=""firstterm"">
   parallel safe
  </em>
  ,
  <em class=""firstterm"">
   parallel restricted
  </em>
  , or
  <em class=""firstterm"">
   parallel unsafe
  </em>
  . A parallel safe operation is one that does not conflict with the use of parallel query. A parallel restricted operation is one that cannot be performed in a parallel worker, but that can be performed in the leader while parallel query is in use. Therefore, parallel restricted operations can never occur below a
  <code class=""literal"">
   Gather
  </code>
  or
  <code class=""literal"">
   Gather Merge
  </code>
  node, but can occur elsewhere in a plan that contains such a node. A parallel unsafe operation is one that cannot be performed while parallel query is in use, not even in the leader. When a query contains anything that is parallel unsafe, parallel query is completely disabled for that query.
 </p>
 <p>
  The following operations are always parallel restricted:
 </p>
 <div class=""itemizedlist"">
  <ul class=""itemizedlist"" style=""list-style-type: disc;"">
   <li class=""listitem"">
    <p>
     Scans of common table expressions (CTEs).
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Scans of temporary tables.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Scans of foreign tables, unless the foreign data wrapper has an
     <code class=""literal"">
      IsForeignScanParallelSafe
     </code>
     API that indicates otherwise.
    </p>
   </li>
   <li class=""listitem"">
    <p>
     Plan nodes that reference a correlated
     <code class=""literal"">
      SubPlan
     </code>
     .
    </p>
   </li>
  </ul>
 </div>
 <div class=""sect2"" id=""PARALLEL-LABELING"">
  <div class=""titlepage"">
   <div>
    <div>
     <h3 class=""title"">
      15.4.1. Parallel Labeling for Functions and Aggregates
      <a class=""id_link"" href=""#PARALLEL-LABELING"">
       #
      </a>
     </h3>
    </div>
   </div>
  </div>
  <p>
   The planner cannot automatically determine whether a user-defined function or aggregate is parallel safe, parallel restricted, or parallel unsafe, because this would require predicting every operation that the function could possibly perform. In general, this is equivalent to the Halting Problem and therefore impossible. Even for simple functions where it could conceivably be done, we do not try, since this would be expensive and error-prone. Instead, all user-defined functions are assumed to be parallel unsafe unless otherwise marked. When using
   <a class=""xref"" href=""sql-createfunction.html"" title=""CREATE FUNCTION"">
    <span class=""refentrytitle"">
     CREATE FUNCTION
    </span>
   </a>
   or
   <a class=""xref"" href=""sql-alterfunction.html"" title=""ALTER FUNCTION"">
    <span class=""refentrytitle"">
     ALTER FUNCTION
    </span>
   </a>
   , markings can be set by specifying
   <code class=""literal"">
    PARALLEL SAFE
   </code>
   ,
   <code class=""literal"">
    PARALLEL RESTRICTED
   </code>
   , or
   <code class=""literal"">
    PARALLEL UNSAFE
   </code>
   as appropriate. When using
   <a class=""xref"" href=""sql-createaggregate.html"" title=""CREATE AGGREGATE"">
    <span class=""refentrytitle"">
     CREATE AGGREGATE
    </span>
   </a>
   , the
   <code class=""literal"">
    PARALLEL
   </code>
   option can be specified with
   <code class=""literal"">
    SAFE
   </code>
   ,
   <code class=""literal"">
    RESTRICTED
   </code>
   , or
   <code class=""literal"">
    UNSAFE
   </code>
   as the corresponding value.
  </p>
  <p>
   Functions and aggregates must be marked
   <code class=""literal"">
    PARALLEL UNSAFE
   </code>
   if they write to the database, change the transaction state (other than by using a subtransaction for error recovery), access sequences, or make persistent changes to settings. Similarly, functions must be marked
   <code class=""literal"">
    PARALLEL RESTRICTED
   </code>
   if they access temporary tables, client connection state, cursors, prepared statements, or miscellaneous backend-local state that the system cannot synchronize across workers. For example,
   <code class=""literal"">
    setseed
   </code>
   and
   <code class=""literal"">
    random
   </code>
   are parallel restricted for this last reason.
  </p>
  <p>
   In general, if a function is labeled as being safe when it is restricted or unsafe, or if it is labeled as being restricted when it is in fact unsafe, it may throw errors or produce wrong answers when used in a parallel query. C-language functions could in theory exhibit totally undefined behavior if mislabeled, since there is no way for the system to protect itself against arbitrary C code, but in most likely cases the result will be no worse than for any other function. If in doubt, it is probably best to label functions as
   <code class=""literal"">
    UNSAFE
   </code>
   .
  </p>
  <p>
   If a function executed within a parallel worker acquires locks that are not held by the leader, for example by querying a table not referenced in the query, those locks will be released at worker exit, not end of transaction. If you write a function that does this, and this behavior difference is important to you, mark such functions as
   <code class=""literal"">
    PARALLEL RESTRICTED
   </code>
   to ensure that they execute only in the leader.
  </p>
  <p>
   Note that the query planner does not consider deferring the evaluation of parallel-restricted functions or aggregates involved in the query in order to obtain a superior plan. So, for example, if a
   <code class=""literal"">
    WHERE
   </code>
   clause applied to a particular table is parallel restricted, the query planner will not consider performing a scan of that table in the parallel portion of a plan. In some cases, it would be possible (and perhaps even efficient) to include the scan of that table in the parallel portion of the query and defer the evaluation of the
   <code class=""literal"">
    WHERE
   </code>
   clause so that it happens above the
   <code class=""literal"">
    Gather
   </code>
   node. However, the planner does not do this.
  </p>
 </div>
</div>
"
